
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019208  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  080193d8  080193d8  000293d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a34c  0801a34c  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a34c  0801a34c  0002a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a354  0801a354  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a354  0801a354  0002a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a358  0801a358  0002a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0801a35c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d74  200002fc  0801a658  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003070  0801a658  00033070  2**0
                  ALLOC
 11 .ext_sram     00000000  60000000  60000000  000302fc  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034371  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e81  00000000  00000000  0006469d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002850  00000000  00000000  0006c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023b8  00000000  00000000  0006ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000390d9  00000000  00000000  00071128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000454c3  00000000  00000000  000aa201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107d99  00000000  00000000  000ef6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f745d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b2d0  00000000  00000000  001f74b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080193c0 	.word	0x080193c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	080193c0 	.word	0x080193c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdventOfCode_init>:
		AdventOfCode_return_t(*aoc_day_21)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_22)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_23)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_24)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_25)(AdventOfCode_config_t))
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
	aoc->aoc_func_list[0] = aoc_day_01;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
	aoc->aoc_func_list[1] = aoc_day_02;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	aoc->aoc_func_list[2] = aoc_day_03;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
	aoc->aoc_func_list[3] = aoc_day_04;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	60da      	str	r2, [r3, #12]
	aoc->aoc_func_list[4] = aoc_day_05;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	611a      	str	r2, [r3, #16]
	aoc->aoc_func_list[5] = aoc_day_06;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	615a      	str	r2, [r3, #20]
	aoc->aoc_func_list[6] = aoc_day_07;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f22:	619a      	str	r2, [r3, #24]
	aoc->aoc_func_list[7] = aoc_day_08;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f28:	61da      	str	r2, [r3, #28]
	aoc->aoc_func_list[8] = aoc_day_09;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	621a      	str	r2, [r3, #32]
	aoc->aoc_func_list[9] = aoc_day_10;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	aoc->aoc_func_list[10] = aoc_day_11;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
	aoc->aoc_func_list[11] = aoc_day_12;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
	aoc->aoc_func_list[12] = aoc_day_13;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
	aoc->aoc_func_list[13] = aoc_day_14;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
	aoc->aoc_func_list[14] = aoc_day_15;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
	aoc->aoc_func_list[15] = aoc_day_16;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
	aoc->aoc_func_list[16] = aoc_day_17;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
	aoc->aoc_func_list[17] = aoc_day_18;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
	aoc->aoc_func_list[18] = aoc_day_19;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
	aoc->aoc_func_list[19] = aoc_day_20;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
	aoc->aoc_func_list[20] = aoc_day_21;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f76:	651a      	str	r2, [r3, #80]	; 0x50
	aoc->aoc_func_list[21] = aoc_day_22;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
	aoc->aoc_func_list[22] = aoc_day_23;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
	aoc->aoc_func_list[23] = aoc_day_24;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
	aoc->aoc_func_list[24] = aoc_day_25;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <AdventOfCode_print>:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, line, strlen(line));
	}
}

void AdventOfCode_print(AdventOfCode_config_t config, char *text, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(config == AOC_CONFIG_TEST || config == AOC_CONFIG_DEBUG || config == AOC_CONFIG_RELEASE)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d014      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d011      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d00e      	beq.n	8000fda <AdventOfCode_print+0x3e>
		return;
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8000fbc:	bf00      	nop
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <AdventOfCode_print+0x48>)
 8000fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f8      	bne.n	8000fbe <AdventOfCode_print+0x22>
	CDC_Transmit_HS((uint8_t*)text, len);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f014 fa00 	bl	80153d8 <CDC_Transmit_HS>
 8000fd8:	e000      	b.n	8000fdc <AdventOfCode_print+0x40>
		return;
 8000fda:	bf00      	nop
}
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000f9c 	.word	0x20000f9c

08000fe8 <AoC_Day_01>:
 */

#include "AoC/Days/Day01.h"

AdventOfCode_return_t AoC_Day_01(AdventOfCode_config_t config)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000ff6:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8000ffa:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8000ffc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001000:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <AoC_Day_01+0x26>
		return AOC_RETURN_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e10b      	b.n	8001226 <AoC_Day_01+0x23e>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800100e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001012:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10a      	bne.n	8001032 <AoC_Day_01+0x4a>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	2201      	movs	r2, #1
 8001022:	4983      	ldr	r1, [pc, #524]	; (8001230 <AoC_Day_01+0x248>)
 8001024:	4618      	mov	r0, r3
 8001026:	f013 f97f 	bl	8014328 <f_open>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 8001030:	e009      	b.n	8001046 <AoC_Day_01+0x5e>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	2201      	movs	r2, #1
 8001038:	497e      	ldr	r1, [pc, #504]	; (8001234 <AoC_Day_01+0x24c>)
 800103a:	4618      	mov	r0, r3
 800103c:	f013 f974 	bl	8014328 <f_open>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
		if(ret != FR_OK)
 8001046:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <AoC_Day_01+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800104e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001052:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2213      	movs	r2, #19
 800105a:	4977      	ldr	r1, [pc, #476]	; (8001238 <AoC_Day_01+0x250>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff9d 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001062:	2301      	movs	r3, #1
 8001064:	e0df      	b.n	8001226 <AoC_Day_01+0x23e>
		}

		// process data
		char buffer[16];
		int32_t prev_value = -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		int32_t counter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		while(f_gets(buffer, 16, &file))
 8001074:	e019      	b.n	80010aa <AoC_Day_01+0xc2>
		{
			int32_t value = atoi(buffer);
 8001076:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800107a:	4618      	mov	r0, r3
 800107c:	f015 f988 	bl	8016390 <atoi>
 8001080:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
			if(prev_value >= 0 && prev_value < value)
 8001084:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <AoC_Day_01+0xba>
 800108c:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001090:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001094:	429a      	cmp	r2, r3
 8001096:	da04      	bge.n	80010a2 <AoC_Day_01+0xba>
				counter++;
 8001098:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800109c:	3301      	adds	r3, #1
 800109e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
			prev_value = value;
 80010a2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80010a6:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		while(f_gets(buffer, 16, &file))
 80010aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80010ae:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80010b2:	2110      	movs	r1, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f014 f80b 	bl	80150d0 <f_gets>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1da      	bne.n	8001076 <AoC_Day_01+0x8e>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", counter);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80010c8:	495c      	ldr	r1, [pc, #368]	; (800123c <AoC_Day_01+0x254>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f015 ff1e 	bl	8016f0c <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f89b 	bl	8000210 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	f107 010c 	add.w	r1, r7, #12
 80010e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010e6:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4618      	mov	r0, r3
 80010f8:	f013 fe06 	bl	8014d08 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80010fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001100:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10a      	bne.n	8001120 <AoC_Day_01+0x138>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	2201      	movs	r2, #1
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <AoC_Day_01+0x248>)
 8001112:	4618      	mov	r0, r3
 8001114:	f013 f908 	bl	8014328 <f_open>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
 800111e:	e009      	b.n	8001134 <AoC_Day_01+0x14c>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	2201      	movs	r2, #1
 8001126:	4943      	ldr	r1, [pc, #268]	; (8001234 <AoC_Day_01+0x24c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f8fd 	bl	8014328 <f_open>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
		if(ret != FR_OK)
 8001134:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <AoC_Day_01+0x16c>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800113c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001140:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2213      	movs	r2, #19
 8001148:	493b      	ldr	r1, [pc, #236]	; (8001238 <AoC_Day_01+0x250>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff26 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001150:	2301      	movs	r3, #1
 8001152:	e068      	b.n	8001226 <AoC_Day_01+0x23e>
		}

		// process data
		char buffer[16];
		int32_t prev_value[] = {-1, -1};
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <AoC_Day_01+0x258>)
 8001156:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800115a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115e:	e883 0003 	stmia.w	r3, {r0, r1}
		int32_t prev_sum = -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
		int32_t counter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
		while(f_gets(buffer, 16, &file))
 8001170:	e02f      	b.n	80011d2 <AoC_Day_01+0x1ea>
		{
			int32_t value = atoi(buffer);
 8001172:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001176:	4618      	mov	r0, r3
 8001178:	f015 f90a 	bl	8016390 <atoi>
 800117c:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
			if(prev_value[1] >= 0)
 8001180:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001184:	2b00      	cmp	r3, #0
 8001186:	db1c      	blt.n	80011c2 <AoC_Day_01+0x1da>
			{
				int32_t sum = value + prev_value[1] + prev_value[0];
 8001188:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800118c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001190:	441a      	add	r2, r3
 8001192:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001196:	4413      	add	r3, r2
 8001198:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
				if(prev_sum >= 0 && prev_sum < sum)
 800119c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <AoC_Day_01+0x1d2>
 80011a4:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80011a8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011ac:	429a      	cmp	r2, r3
 80011ae:	da04      	bge.n	80011ba <AoC_Day_01+0x1d2>
					counter++;
 80011b0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80011b4:	3301      	adds	r3, #1
 80011b6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				prev_sum = sum;
 80011ba:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011be:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
			}
			prev_value[1] = prev_value[0];
 80011c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80011c6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			prev_value[0] = value;
 80011ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80011ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
		while(f_gets(buffer, 16, &file))
 80011d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80011d6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80011da:	2110      	movs	r1, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f013 ff77 	bl	80150d0 <f_gets>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1c4      	bne.n	8001172 <AoC_Day_01+0x18a>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", counter);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80011f0:	4914      	ldr	r1, [pc, #80]	; (8001244 <AoC_Day_01+0x25c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f015 fe8a 	bl	8016f0c <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f807 	bl	8000210 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	f107 010c 	add.w	r1, r7, #12
 800120a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800120e:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fec1 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4618      	mov	r0, r3
 8001220:	f013 fd72 	bl	8014d08 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	080193d8 	.word	0x080193d8
 8001234:	080193e4 	.word	0x080193e4
 8001238:	080193f0 	.word	0x080193f0
 800123c:	08019408 	.word	0x08019408
 8001240:	08019438 	.word	0x08019438
 8001244:	08019420 	.word	0x08019420

08001248 <AoC_Day_02>:
 */

#include "AoC/Days/Day02.h"

AdventOfCode_return_t AoC_Day_02(AdventOfCode_config_t config)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <AoC_Day_02+0x14>
		return AOC_RETURN_NOK;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <AoC_Day_02+0x16>

	// status code
	return AOC_RETURN_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <AoC_Day_03>:
 */

#include "AoC/Days/Day03.h"

AdventOfCode_return_t AoC_Day_03(AdventOfCode_config_t config)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <AoC_Day_03+0x14>
		return AOC_RETURN_NOK;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <AoC_Day_03+0x16>

	// status code
	return AOC_RETURN_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <AoC_Day_04>:
 */

#include "AoC/Days/Day04.h"

AdventOfCode_return_t AoC_Day_04(AdventOfCode_config_t config)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <AoC_Day_04+0x14>
		return AOC_RETURN_NOK;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <AoC_Day_04+0x16>

	// status code
	return AOC_RETURN_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <AoC_Day_05>:
 */

#include "AoC/Days/Day05.h"

AdventOfCode_return_t AoC_Day_05(AdventOfCode_config_t config)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <AoC_Day_05+0x14>
		return AOC_RETURN_NOK;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <AoC_Day_05+0x16>

	// status code
	return AOC_RETURN_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <AoC_Day_06>:
 */

#include "AoC/Days/Day06.h"

AdventOfCode_return_t AoC_Day_06(AdventOfCode_config_t config)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <AoC_Day_06+0x14>
		return AOC_RETURN_NOK;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <AoC_Day_06+0x16>

	// status code
	return AOC_RETURN_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <AoC_Day_07>:
 */

#include "AoC/Days/Day07.h"

AdventOfCode_return_t AoC_Day_07(AdventOfCode_config_t config)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <AoC_Day_07+0x14>
		return AOC_RETURN_NOK;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <AoC_Day_07+0x16>

	// status code
	return AOC_RETURN_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <AoC_Day_08>:
 */

#include "AoC/Days/Day08.h"

AdventOfCode_return_t AoC_Day_08(AdventOfCode_config_t config)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <AoC_Day_08+0x14>
		return AOC_RETURN_NOK;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <AoC_Day_08+0x16>

	// status code
	return AOC_RETURN_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <AoC_Day_09>:
 */

#include "AoC/Days/Day09.h"

AdventOfCode_return_t AoC_Day_09(AdventOfCode_config_t config)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <AoC_Day_09+0x14>
		return AOC_RETURN_NOK;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <AoC_Day_09+0x16>

	// status code
	return AOC_RETURN_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <AoC_Day_10>:
 */

#include "AoC/Days/Day10.h"

AdventOfCode_return_t AoC_Day_10(AdventOfCode_config_t config)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <AoC_Day_10+0x14>
		return AOC_RETURN_NOK;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <AoC_Day_10+0x16>

	// status code
	return AOC_RETURN_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <AoC_Day_11>:
 */

#include "AoC/Days/Day11.h"

AdventOfCode_return_t AoC_Day_11(AdventOfCode_config_t config)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <AoC_Day_11+0x14>
		return AOC_RETURN_NOK;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <AoC_Day_11+0x16>

	// status code
	return AOC_RETURN_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <AoC_Day_12>:
 */

#include "AoC/Days/Day12.h"

AdventOfCode_return_t AoC_Day_12(AdventOfCode_config_t config)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <AoC_Day_12+0x14>
		return AOC_RETURN_NOK;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <AoC_Day_12+0x16>

	// status code
	return AOC_RETURN_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <AoC_Day_13>:
 */

#include "AoC/Days/Day13.h"

AdventOfCode_return_t AoC_Day_13(AdventOfCode_config_t config)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <AoC_Day_13+0x14>
		return AOC_RETURN_NOK;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <AoC_Day_13+0x16>

	// status code
	return AOC_RETURN_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <AoC_Day_14>:
 */

#include "AoC/Days/Day14.h"

AdventOfCode_return_t AoC_Day_14(AdventOfCode_config_t config)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <AoC_Day_14+0x14>
		return AOC_RETURN_NOK;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <AoC_Day_14+0x16>

	// status code
	return AOC_RETURN_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <AoC_Day_15>:
 */

#include "AoC/Days/Day15.h"

AdventOfCode_return_t AoC_Day_15(AdventOfCode_config_t config)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <AoC_Day_15+0x14>
		return AOC_RETURN_NOK;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <AoC_Day_15+0x16>

	// status code
	return AOC_RETURN_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <AoC_Day_16>:
 */

#include "AoC/Days/Day16.h"

AdventOfCode_return_t AoC_Day_16(AdventOfCode_config_t config)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <AoC_Day_16+0x14>
		return AOC_RETURN_NOK;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <AoC_Day_16+0x16>

	// status code
	return AOC_RETURN_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <AoC_Day_17>:
 */

#include "AoC/Days/Day17.h"

AdventOfCode_return_t AoC_Day_17(AdventOfCode_config_t config)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <AoC_Day_17+0x14>
		return AOC_RETURN_NOK;
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <AoC_Day_17+0x16>

	// status code
	return AOC_RETURN_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <AoC_Day_18>:
 */

#include "AoC/Days/Day18.h"

AdventOfCode_return_t AoC_Day_18(AdventOfCode_config_t config)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <AoC_Day_18+0x14>
		return AOC_RETURN_NOK;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <AoC_Day_18+0x16>

	// status code
	return AOC_RETURN_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <AoC_Day_19>:
 */

#include "AoC/Days/Day19.h"

AdventOfCode_return_t AoC_Day_19(AdventOfCode_config_t config)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <AoC_Day_19+0x14>
		return AOC_RETURN_NOK;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <AoC_Day_19+0x16>

	// status code
	return AOC_RETURN_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <AoC_Day_20>:
 */

#include "AoC/Days/Day20.h"

AdventOfCode_return_t AoC_Day_20(AdventOfCode_config_t config)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <AoC_Day_20+0x14>
		return AOC_RETURN_NOK;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <AoC_Day_20+0x16>

	// status code
	return AOC_RETURN_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <AoC_Day_21>:
 */

#include "AoC/Days/Day21.h"

AdventOfCode_return_t AoC_Day_21(AdventOfCode_config_t config)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <AoC_Day_21+0x14>
		return AOC_RETURN_NOK;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <AoC_Day_21+0x16>

	// status code
	return AOC_RETURN_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <AoC_Day_22>:
 */

#include "AoC/Days/Day22.h"

AdventOfCode_return_t AoC_Day_22(AdventOfCode_config_t config)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <AoC_Day_22+0x14>
		return AOC_RETURN_NOK;
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <AoC_Day_22+0x16>

	// status code
	return AOC_RETURN_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <AoC_Day_23>:
 */

#include "AoC/Days/Day23.h"

AdventOfCode_return_t AoC_Day_23(AdventOfCode_config_t config)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <AoC_Day_23+0x14>
		return AOC_RETURN_NOK;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <AoC_Day_23+0x16>

	// status code
	return AOC_RETURN_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <AoC_Day_24>:
 */

#include "AoC/Days/Day24.h"

AdventOfCode_return_t AoC_Day_24(AdventOfCode_config_t config)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <AoC_Day_24+0x14>
		return AOC_RETURN_NOK;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <AoC_Day_24+0x16>

	// status code
	return AOC_RETURN_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <AoC_Day_25>:
 */

#include "AoC/Days/Day25.h"

AdventOfCode_return_t AoC_Day_25(AdventOfCode_config_t config)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <AoC_Day_25+0x14>
		return AOC_RETURN_NOK;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <AoC_Day_25+0x16>

	// status code
	return AOC_RETURN_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f805 	bl	80015a8 <System_selfTest>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <System_selfTest>:

void System_selfTest(System_t *state)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = (void*)0x60000000 + 1000000ul;
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <System_selfTest+0x90>)
 80015b2:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	0919      	lsrs	r1, r3, #4
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	b28a      	uxth	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <System_selfTest+0x94>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d9f0      	bls.n	80015ba <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	e00f      	b.n	80015fe <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d002      	beq.n	80015f8 <System_selfTest+0x50>
			state->sram_working = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	3301      	adds	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <System_selfTest+0x94>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d9eb      	bls.n	80015de <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800160c:	2200      	movs	r2, #0
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <System_selfTest+0x98>)
 8001610:	4618      	mov	r0, r3
 8001612:	f012 fe43 	bl	801429c <f_mount>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(state->sdio.file_result != FR_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <System_selfTest+0x88>
		state->sdio_working = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	600f4240 	.word	0x600f4240
 800163c:	000f423f 	.word	0x000f423f
 8001640:	20000f58 	.word	0x20000f58

08001644 <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	char *logo = "\n________________________________________________________________________________\n"
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <System_initLog+0x38>)
 800164e:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001650:	bf00      	nop
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <System_initLog+0x3c>)
 8001654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f8      	bne.n	8001652 <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7fe fdd5 	bl	8000210 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29b      	uxth	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f013 feb3 	bl	80153d8 <CDC_Transmit_HS>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	08019440 	.word	0x08019440
 8001680:	20000f9c 	.word	0x20000f9c

08001684 <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b0d3      	sub	sp, #332	; 0x14c
 8001688:	af02      	add	r7, sp, #8
 800168a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800168e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001692:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <System_selfTestLog+0x100>)
 8001696:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 800169a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800169e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 80016aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <System_selfTestLog+0x104>)
 80016b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80016b8:	e005      	b.n	80016c6 <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 80016ba:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80016be:	4a33      	ldr	r2, [pc, #204]	; (800178c <System_selfTestLog+0x108>)
 80016c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c2:	c303      	stmia	r3!, {r0, r1}
 80016c4:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 80016c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	789b      	ldrb	r3, [r3, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 80016d6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016da:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <System_selfTestLog+0x104>)
 80016dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016e4:	e005      	b.n	80016f2 <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 80016e6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <System_selfTestLog+0x108>)
 80016ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ee:	c303      	stmia	r3!, {r0, r1}
 80016f0:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 80016f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <System_selfTestLog+0x10c>)
 8001704:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800170e:	e005      	b.n	800171c <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 8001710:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <System_selfTestLog+0x108>)
 8001716:	ca07      	ldmia	r2, {r0, r1, r2}
 8001718:	c303      	stmia	r3!, {r0, r1}
 800171a:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 800171c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001720:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001724:	f107 000c 	add.w	r0, r7, #12
 8001728:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	460b      	mov	r3, r1
 8001730:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001734:	f015 fbea 	bl	8016f0c <siprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001738:	bf00      	nop
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <System_selfTestLog+0x110>)
 800173c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f8      	bne.n	800173a <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd5f 	bl	8000210 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f013 fe3b 	bl	80153d8 <CDC_Transmit_HS>

	// print new cursor
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001762:	bf00      	nop
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <System_selfTestLog+0x110>)
 8001766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800176a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f8      	bne.n	8001764 <System_selfTestLog+0xe0>
	CDC_Transmit_HS((uint8_t*)">", 1);
 8001772:	2101      	movs	r1, #1
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <System_selfTestLog+0x114>)
 8001776:	f013 fe2f 	bl	80153d8 <CDC_Transmit_HS>
}
 800177a:	bf00      	nop
 800177c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	080197e0 	.word	0x080197e0
 8001788:	08019880 	.word	0x08019880
 800178c:	08019888 	.word	0x08019888
 8001790:	08019894 	.word	0x08019894
 8001794:	20000f9c 	.word	0x20000f9c
 8001798:	080198a4 	.word	0x080198a4

0800179c <sram_clrmem>:
	// return cleared allocation addres
	return alloc_ptr;
}

void sram_clrmem()
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	// reset allocation ptr
	sram_ptr = 0;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <sram_clrmem+0x14>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	20000318 	.word	0x20000318

080017b4 <checkImplementation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void checkImplementation(char token_buffer[6][32])
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017c0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80017c4:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 80017c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017ca:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3320      	adds	r3, #32
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <checkImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 80017d8:	2215      	movs	r2, #21
 80017da:	4946      	ldr	r1, [pc, #280]	; (80018f4 <checkImplementation+0x140>)
 80017dc:	2002      	movs	r0, #2
 80017de:	f7ff fbdd 	bl	8000f9c <AdventOfCode_print>
		return;
 80017e2:	e083      	b.n	80018ec <checkImplementation+0x138>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 80017e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80017e8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3320      	adds	r3, #32
 80017f0:	4618      	mov	r0, r3
 80017f2:	f014 fdcd 	bl	8016390 <atoi>
 80017f6:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
	if(day > 25 || day <= 0)
 80017fa:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017fe:	2b19      	cmp	r3, #25
 8001800:	dc03      	bgt.n	800180a <checkImplementation+0x56>
 8001802:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc05      	bgt.n	8001816 <checkImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800180a:	221a      	movs	r2, #26
 800180c:	493a      	ldr	r1, [pc, #232]	; (80018f8 <checkImplementation+0x144>)
 800180e:	2002      	movs	r0, #2
 8001810:	f7ff fbc4 	bl	8000f9c <AdventOfCode_print>
		return;
 8001814:	e06a      	b.n	80018ec <checkImplementation+0x138>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Checking day %ld\n", day);
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800181e:	4937      	ldr	r1, [pc, #220]	; (80018fc <checkImplementation+0x148>)
 8001820:	4618      	mov	r0, r3
 8001822:	f015 fb73 	bl	8016f0c <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fcf0 	bl	8000210 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4619      	mov	r1, r3
 800183a:	2002      	movs	r0, #2
 800183c:	f7ff fbae 	bl	8000f9c <AdventOfCode_print>

	// check day
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001840:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001844:	3b01      	subs	r3, #1
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <checkImplementation+0x14c>)
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	2000      	movs	r0, #0
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
	if(ret == AOC_RETURN_OK)
 8001856:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <checkImplementation+0xb6>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Implemented\n", strlen("\tState: Implemented\n"));
 800185e:	2214      	movs	r2, #20
 8001860:	4928      	ldr	r1, [pc, #160]	; (8001904 <checkImplementation+0x150>)
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fb9a 	bl	8000f9c <AdventOfCode_print>
 8001868:	e004      	b.n	8001874 <checkImplementation+0xc0>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 800186a:	2218      	movs	r2, #24
 800186c:	4926      	ldr	r1, [pc, #152]	; (8001908 <checkImplementation+0x154>)
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff fb94 	bl	8000f9c <AdventOfCode_print>

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800187c:	4923      	ldr	r1, [pc, #140]	; (800190c <checkImplementation+0x158>)
 800187e:	4618      	mov	r0, r3
 8001880:	f015 fb44 	bl	8016f0c <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f013 fb3a 	bl	8014f08 <f_stat>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <checkImplementation+0xf2>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Present\n", strlen("\tDebug: Present\n"));
 800189a:	2210      	movs	r2, #16
 800189c:	491c      	ldr	r1, [pc, #112]	; (8001910 <checkImplementation+0x15c>)
 800189e:	2002      	movs	r0, #2
 80018a0:	f7ff fb7c 	bl	8000f9c <AdventOfCode_print>
 80018a4:	e004      	b.n	80018b0 <checkImplementation+0xfc>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 80018a6:	220f      	movs	r2, #15
 80018a8:	491a      	ldr	r1, [pc, #104]	; (8001914 <checkImplementation+0x160>)
 80018aa:	2002      	movs	r0, #2
 80018ac:	f7ff fb76 	bl	8000f9c <AdventOfCode_print>

	// check release file
	sprintf(buffer, "day%ld.txt", day);
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80018b8:	4917      	ldr	r1, [pc, #92]	; (8001918 <checkImplementation+0x164>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f015 fb26 	bl	8016f0c <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f013 fb1c 	bl	8014f08 <f_stat>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <checkImplementation+0x12e>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Present\n", strlen("\tRelease: Present\n"));
 80018d6:	2212      	movs	r2, #18
 80018d8:	4910      	ldr	r1, [pc, #64]	; (800191c <checkImplementation+0x168>)
 80018da:	2002      	movs	r0, #2
 80018dc:	f7ff fb5e 	bl	8000f9c <AdventOfCode_print>
 80018e0:	e004      	b.n	80018ec <checkImplementation+0x138>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 80018e2:	2211      	movs	r2, #17
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <checkImplementation+0x16c>)
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7ff fb58 	bl	8000f9c <AdventOfCode_print>
}
 80018ec:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	080198a8 	.word	0x080198a8
 80018f8:	080198c0 	.word	0x080198c0
 80018fc:	080198dc 	.word	0x080198dc
 8001900:	20000ee4 	.word	0x20000ee4
 8001904:	080198f0 	.word	0x080198f0
 8001908:	08019908 	.word	0x08019908
 800190c:	08019924 	.word	0x08019924
 8001910:	08019930 	.word	0x08019930
 8001914:	08019944 	.word	0x08019944
 8001918:	08019954 	.word	0x08019954
 800191c:	08019960 	.word	0x08019960
 8001920:	08019974 	.word	0x08019974

08001924 <runDebugImplementation>:

static void runDebugImplementation(char token_buffer[6][32])
{
 8001924:	b580      	push	{r7, lr}
 8001926:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800192a:	af00      	add	r7, sp, #0
 800192c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001930:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001934:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8001936:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800193a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3320      	adds	r3, #32
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <runDebugImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001948:	2215      	movs	r2, #21
 800194a:	495a      	ldr	r1, [pc, #360]	; (8001ab4 <runDebugImplementation+0x190>)
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff fb25 	bl	8000f9c <AdventOfCode_print>
		return;
 8001952:	e0aa      	b.n	8001aaa <runDebugImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 8001954:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001958:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3320      	adds	r3, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f014 fd15 	bl	8016390 <atoi>
 8001966:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 800196a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800196e:	2b19      	cmp	r3, #25
 8001970:	dc03      	bgt.n	800197a <runDebugImplementation+0x56>
 8001972:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001976:	2b00      	cmp	r3, #0
 8001978:	dc05      	bgt.n	8001986 <runDebugImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800197a:	221a      	movs	r2, #26
 800197c:	494e      	ldr	r1, [pc, #312]	; (8001ab8 <runDebugImplementation+0x194>)
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff fb0c 	bl	8000f9c <AdventOfCode_print>
		return;
 8001984:	e091      	b.n	8001aaa <runDebugImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing debug day %ld\n", day);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800198e:	494b      	ldr	r1, [pc, #300]	; (8001abc <runDebugImplementation+0x198>)
 8001990:	4618      	mov	r0, r3
 8001992:	f015 fabb 	bl	8016f0c <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc38 	bl	8000210 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff faf6 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 80019b0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <runDebugImplementation+0x19c>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	2000      	movs	r0, #0
 80019be:	4798      	blx	r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 80019c6:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <runDebugImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 80019ce:	2218      	movs	r2, #24
 80019d0:	493c      	ldr	r1, [pc, #240]	; (8001ac4 <runDebugImplementation+0x1a0>)
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7ff fae2 	bl	8000f9c <AdventOfCode_print>
		return;
 80019d8:	e067      	b.n	8001aaa <runDebugImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80019e2:	4939      	ldr	r1, [pc, #228]	; (8001ac8 <runDebugImplementation+0x1a4>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f015 fa91 	bl	8016f0c <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 80019ea:	f107 020c 	add.w	r2, r7, #12
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f013 fa87 	bl	8014f08 <f_stat>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <runDebugImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 8001a00:	220f      	movs	r2, #15
 8001a02:	4932      	ldr	r1, [pc, #200]	; (8001acc <runDebugImplementation+0x1a8>)
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7ff fac9 	bl	8000f9c <AdventOfCode_print>
		return;
 8001a0a:	e04e      	b.n	8001aaa <runDebugImplementation+0x186>
	}

	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	4930      	ldr	r1, [pc, #192]	; (8001ad0 <runDebugImplementation+0x1ac>)
 8001a10:	2002      	movs	r0, #2
 8001a12:	f7ff fac3 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001a16:	f001 fd01 	bl	800341c <HAL_GetTick>
 8001a1a:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_DEBUG_VERBOSE);
 8001a1e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001a22:	3b01      	subs	r3, #1
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <runDebugImplementation+0x19c>)
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	4798      	blx	r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 8001a34:	f001 fcf2 	bl	800341c <HAL_GetTick>
 8001a38:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 8001a3c:	f7ff feae 	bl	800179c <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 8001a40:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <runDebugImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001a48:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001a4c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001a50:	1ad2      	subs	r2, r2, r3
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	491f      	ldr	r1, [pc, #124]	; (8001ad4 <runDebugImplementation+0x1b0>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f015 fa57 	bl	8016f0c <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fbd4 	bl	8000210 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fa92 	bl	8000f9c <AdventOfCode_print>
 8001a78:	e017      	b.n	8001aaa <runDebugImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001a7a:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001a7e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001a82:	1ad2      	subs	r2, r2, r3
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4913      	ldr	r1, [pc, #76]	; (8001ad8 <runDebugImplementation+0x1b4>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f015 fa3e 	bl	8016f0c <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fbbb 	bl	8000210 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f7ff fa79 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001aaa:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	080198a8 	.word	0x080198a8
 8001ab8:	080198c0 	.word	0x080198c0
 8001abc:	08019988 	.word	0x08019988
 8001ac0:	20000ee4 	.word	0x20000ee4
 8001ac4:	08019908 	.word	0x08019908
 8001ac8:	08019924 	.word	0x08019924
 8001acc:	08019944 	.word	0x08019944
 8001ad0:	080199a4 	.word	0x080199a4
 8001ad4:	080199ac 	.word	0x080199ac
 8001ad8:	080199c0 	.word	0x080199c0

08001adc <runReleaseImplementation>:

static void runReleaseImplementation(char token_buffer[6][32])
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001ae8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001aec:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8001aee:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001af2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3320      	adds	r3, #32
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <runReleaseImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001b00:	2215      	movs	r2, #21
 8001b02:	495a      	ldr	r1, [pc, #360]	; (8001c6c <runReleaseImplementation+0x190>)
 8001b04:	2002      	movs	r0, #2
 8001b06:	f7ff fa49 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b0a:	e0aa      	b.n	8001c62 <runReleaseImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 8001b0c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b10:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3320      	adds	r3, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f014 fc39 	bl	8016390 <atoi>
 8001b1e:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 8001b22:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001b26:	2b19      	cmp	r3, #25
 8001b28:	dc03      	bgt.n	8001b32 <runReleaseImplementation+0x56>
 8001b2a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dc05      	bgt.n	8001b3e <runReleaseImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8001b32:	221a      	movs	r2, #26
 8001b34:	494e      	ldr	r1, [pc, #312]	; (8001c70 <runReleaseImplementation+0x194>)
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fa30 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b3c:	e091      	b.n	8001c62 <runReleaseImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing release day %ld\n", day);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001b46:	494b      	ldr	r1, [pc, #300]	; (8001c74 <runReleaseImplementation+0x198>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f015 f9df 	bl	8016f0c <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fb5c 	bl	8000210 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff fa1a 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001b68:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	4a42      	ldr	r2, [pc, #264]	; (8001c78 <runReleaseImplementation+0x19c>)
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	2000      	movs	r0, #0
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 8001b7e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <runReleaseImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8001b86:	2218      	movs	r2, #24
 8001b88:	493c      	ldr	r1, [pc, #240]	; (8001c7c <runReleaseImplementation+0x1a0>)
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7ff fa06 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b90:	e067      	b.n	8001c62 <runReleaseImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ld.txt", day);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001b9a:	4939      	ldr	r1, [pc, #228]	; (8001c80 <runReleaseImplementation+0x1a4>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f015 f9b5 	bl	8016f0c <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8001ba2:	f107 020c 	add.w	r2, r7, #12
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f013 f9ab 	bl	8014f08 <f_stat>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <runReleaseImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 8001bb8:	2211      	movs	r2, #17
 8001bba:	4932      	ldr	r1, [pc, #200]	; (8001c84 <runReleaseImplementation+0x1a8>)
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f7ff f9ed 	bl	8000f9c <AdventOfCode_print>
		return;
 8001bc2:	e04e      	b.n	8001c62 <runReleaseImplementation+0x186>
	}


	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4930      	ldr	r1, [pc, #192]	; (8001c88 <runReleaseImplementation+0x1ac>)
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff f9e7 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001bce:	f001 fc25 	bl	800341c <HAL_GetTick>
 8001bd2:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_RELEASE_VERBOSE);
 8001bd6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <runReleaseImplementation+0x19c>)
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	2004      	movs	r0, #4
 8001be4:	4798      	blx	r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 8001bec:	f001 fc16 	bl	800341c <HAL_GetTick>
 8001bf0:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 8001bf4:	f7ff fdd2 	bl	800179c <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 8001bf8:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d118      	bne.n	8001c32 <runReleaseImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001c00:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001c04:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001c08:	1ad2      	subs	r2, r2, r3
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	491f      	ldr	r1, [pc, #124]	; (8001c8c <runReleaseImplementation+0x1b0>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f015 f97b 	bl	8016f0c <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe faf8 	bl	8000210 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f7ff f9b6 	bl	8000f9c <AdventOfCode_print>
 8001c30:	e017      	b.n	8001c62 <runReleaseImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001c32:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001c36:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001c3a:	1ad2      	subs	r2, r2, r3
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4913      	ldr	r1, [pc, #76]	; (8001c90 <runReleaseImplementation+0x1b4>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f015 f962 	bl	8016f0c <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fadf 	bl	8000210 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7ff f99d 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001c62:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	080198a8 	.word	0x080198a8
 8001c70:	080198c0 	.word	0x080198c0
 8001c74:	080199d0 	.word	0x080199d0
 8001c78:	20000ee4 	.word	0x20000ee4
 8001c7c:	08019908 	.word	0x08019908
 8001c80:	08019954 	.word	0x08019954
 8001c84:	08019974 	.word	0x08019974
 8001c88:	080199a4 	.word	0x080199a4
 8001c8c:	080199ac 	.word	0x080199ac
 8001c90:	080199c0 	.word	0x080199c0

08001c94 <fetchPuzzleInput>:

static void fetchPuzzleInput(char token_buffer[6][32])
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	f5ad 6dc9 	sub.w	sp, sp, #1608	; 0x648
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8001ca0:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8001ca4:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8001ca6:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8001caa:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3320      	adds	r3, #32
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <fetchPuzzleInput+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 8001cb8:	2214      	movs	r2, #20
 8001cba:	4952      	ldr	r1, [pc, #328]	; (8001e04 <fetchPuzzleInput+0x170>)
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7ff f96d 	bl	8000f9c <AdventOfCode_print>
		return;
 8001cc2:	e09b      	b.n	8001dfc <fetchPuzzleInput+0x168>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Creating %s\n", token_buffer[1]);
 8001cc4:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8001cc8:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f103 0220 	add.w	r2, r3, #32
 8001cd2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cd6:	494c      	ldr	r1, [pc, #304]	; (8001e08 <fetchPuzzleInput+0x174>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f015 f917 	bl	8016f0c <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001cde:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fa94 	bl	8000210 <strlen>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7ff f952 	bl	8000f9c <AdventOfCode_print>

	// create file
	FIL file;
	uint8_t ret = f_open(&file, token_buffer[1], FA_CREATE_ALWAYS | FA_WRITE);
 8001cf8:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8001cfc:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f103 0120 	add.w	r1, r3, #32
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f012 fb0b 	bl	8014328 <f_open>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 363f 	strb.w	r3, [r7, #1599]	; 0x63f
	if(ret != FR_OK)
 8001d18:	f897 363f 	ldrb.w	r3, [r7, #1599]	; 0x63f
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <fetchPuzzleInput+0x98>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to create file!\n", strlen("Failed to create file!\n"));
 8001d20:	2217      	movs	r2, #23
 8001d22:	493a      	ldr	r1, [pc, #232]	; (8001e0c <fetchPuzzleInput+0x178>)
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7ff f939 	bl	8000f9c <AdventOfCode_print>
		return;
 8001d2a:	e067      	b.n	8001dfc <fetchPuzzleInput+0x168>
	}

	// fetch data
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploade data:\n{\n", strlen("Uploade data:\n{\n"));
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4938      	ldr	r1, [pc, #224]	; (8001e10 <fetchPuzzleInput+0x17c>)
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff f933 	bl	8000f9c <AdventOfCode_print>

	usb_rx_ready = 0;
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <fetchPuzzleInput+0x180>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	uint8_t done = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
	uint32_t counter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
	while(!done)
 8001d48:	e045      	b.n	8001dd6 <fetchPuzzleInput+0x142>
	{
		// wait for new data
		if(!usb_rx_ready)
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <fetchPuzzleInput+0x180>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d100      	bne.n	8001d54 <fetchPuzzleInput+0xc0>
			continue;
 8001d52:	e040      	b.n	8001dd6 <fetchPuzzleInput+0x142>

		// flicker lightn light
		if((counter++ % 2) == 0)
 8001d54:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	f8c7 2640 	str.w	r2, [r7, #1600]	; 0x640
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <fetchPuzzleInput+0xda>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	482b      	ldr	r0, [pc, #172]	; (8001e18 <fetchPuzzleInput+0x184>)
 8001d6a:	f002 fc98 	bl	800469e <HAL_GPIO_TogglePin>

		// check last character
		char last_character = usb_rx_buffer[usb_rx_length - 3];
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <fetchPuzzleInput+0x188>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	3b03      	subs	r3, #3
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <fetchPuzzleInput+0x18c>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	f887 363e 	strb.w	r3, [r7, #1598]	; 0x63e
		if(last_character == '`')
 8001d7c:	f897 363e 	ldrb.w	r3, [r7, #1598]	; 0x63e
 8001d80:	2b60      	cmp	r3, #96	; 0x60
 8001d82:	d108      	bne.n	8001d96 <fetchPuzzleInput+0x102>
		{
			usb_rx_buffer[usb_rx_length - 3] = 0x00;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <fetchPuzzleInput+0x188>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <fetchPuzzleInput+0x18c>)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	54d1      	strb	r1, [r2, r3]
			done = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
		}

		// echo message
		sprintf(buffer, "\t%s", (char*)usb_rx_buffer);
 8001d96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <fetchPuzzleInput+0x18c>)
 8001d9c:	4921      	ldr	r1, [pc, #132]	; (8001e24 <fetchPuzzleInput+0x190>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f015 f8b4 	bl	8016f0c <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001da4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa31 	bl	8000210 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001db6:	4619      	mov	r1, r3
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7ff f8ef 	bl	8000f9c <AdventOfCode_print>

		// write to file
		f_write(&file, usb_rx_buffer, usb_rx_length, NULL);
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <fetchPuzzleInput+0x188>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f107 0008 	add.w	r0, r7, #8
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4915      	ldr	r1, [pc, #84]	; (8001e20 <fetchPuzzleInput+0x18c>)
 8001dcc:	f012 fda9 	bl	8014922 <f_write>

		// clear flag
		usb_rx_ready = 0;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <fetchPuzzleInput+0x180>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	while(!done)
 8001dd6:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0b5      	beq.n	8001d4a <fetchPuzzleInput+0xb6>
	}

	// close file
	f_close(&file);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f012 ff90 	bl	8014d08 <f_close>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\nSaving input\n", strlen("}\nSaving input\n"));
 8001de8:	220f      	movs	r2, #15
 8001dea:	490f      	ldr	r1, [pc, #60]	; (8001e28 <fetchPuzzleInput+0x194>)
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff f8d5 	bl	8000f9c <AdventOfCode_print>

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <fetchPuzzleInput+0x184>)
 8001df8:	f002 fc38 	bl	800466c <HAL_GPIO_WritePin>
}
 8001dfc:	f507 67c9 	add.w	r7, r7, #1608	; 0x648
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	080199ec 	.word	0x080199ec
 8001e08:	08019a04 	.word	0x08019a04
 8001e0c:	08019a14 	.word	0x08019a14
 8001e10:	08019a2c 	.word	0x08019a2c
 8001e14:	20000ee2 	.word	0x20000ee2
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	20000ee0 	.word	0x20000ee0
 8001e20:	20000ae0 	.word	0x20000ae0
 8001e24:	08019a40 	.word	0x08019a40
 8001e28:	08019a44 	.word	0x08019a44

08001e2c <showDirectory>:

static void showDirectory()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0a4      	sub	sp, #144	; 0x90
 8001e30:	af00      	add	r7, sp, #0
	// opening log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploaded files:\n{\n", strlen("Uploaded files:\n{\n"));
 8001e32:	2212      	movs	r2, #18
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <showDirectory+0x94>)
 8001e36:	2002      	movs	r0, #2
 8001e38:	f7ff f8b0 	bl	8000f9c <AdventOfCode_print>
	char buffer[64];

	DIR dir;
	FILINFO fno;
	uint8_t counter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	f_opendir(&dir, "/");
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	491f      	ldr	r1, [pc, #124]	; (8001ec4 <showDirectory+0x98>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f012 ff87 	bl	8014d5c <f_opendir>
	do
	{
		f_readdir(&dir, &fno);
 8001e4e:	1d3a      	adds	r2, r7, #4
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f013 f819 	bl	8014e8e <f_readdir>
		if(fno.fname[0] != 0 && counter++ > 1)
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01c      	beq.n	8001e9c <showDirectory+0x70>
 8001e62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d915      	bls.n	8001e9c <showDirectory+0x70>
		{
			sprintf(buffer, "\t%s\n", fno.fname);
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	f103 0209 	add.w	r2, r3, #9
 8001e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7a:	4913      	ldr	r1, [pc, #76]	; (8001ec8 <showDirectory+0x9c>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f015 f845 	bl	8016f0c <siprintf>
			AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001e82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9c2 	bl	8000210 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e94:	4619      	mov	r1, r3
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff f880 	bl	8000f9c <AdventOfCode_print>
		}
	} while(fno.fname[0] != 0);
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1d5      	bne.n	8001e4e <showDirectory+0x22>
	f_closedir(&dir);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f012 ffcb 	bl	8014e42 <f_closedir>

	// closing log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\n", strlen("}\n"));
 8001eac:	2202      	movs	r2, #2
 8001eae:	4907      	ldr	r1, [pc, #28]	; (8001ecc <showDirectory+0xa0>)
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7ff f873 	bl	8000f9c <AdventOfCode_print>
}
 8001eb6:	bf00      	nop
 8001eb8:	3790      	adds	r7, #144	; 0x90
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08019a54 	.word	0x08019a54
 8001ec4:	08019a68 	.word	0x08019a68
 8001ec8:	08019a6c 	.word	0x08019a6c
 8001ecc:	08019a74 	.word	0x08019a74

08001ed0 <deleteFile>:

static void deleteFile(char token_buffer[6][32])
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001edc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001ee0:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8001ee2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001ee6:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3320      	adds	r3, #32
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <deleteFile+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 8001ef4:	2214      	movs	r2, #20
 8001ef6:	491f      	ldr	r1, [pc, #124]	; (8001f74 <deleteFile+0xa4>)
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7ff f84f 	bl	8000f9c <AdventOfCode_print>
		return;
 8001efe:	e034      	b.n	8001f6a <deleteFile+0x9a>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Deleting %s\n", token_buffer[1]);
 8001f00:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001f04:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f103 0220 	add.w	r2, r3, #32
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	4919      	ldr	r1, [pc, #100]	; (8001f78 <deleteFile+0xa8>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f014 fff9 	bl	8016f0c <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe f976 	bl	8000210 <strlen>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff f834 	bl	8000f9c <AdventOfCode_print>

	// delete file
	uint8_t ret = f_unlink(token_buffer[1]);
 8001f34:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001f38:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	4618      	mov	r0, r3
 8001f42:	f013 f81a 	bl	8014f7a <f_unlink>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	if(ret != FR_OK)
 8001f4c:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <deleteFile+0x90>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to delete file!\n", strlen("Failed to delete file!\n"));
 8001f54:	2217      	movs	r2, #23
 8001f56:	4909      	ldr	r1, [pc, #36]	; (8001f7c <deleteFile+0xac>)
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff f81f 	bl	8000f9c <AdventOfCode_print>
		return;
 8001f5e:	e004      	b.n	8001f6a <deleteFile+0x9a>
	}

	// deleted file
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Deleted file\n", strlen("Deleted file\n"));
 8001f60:	220d      	movs	r2, #13
 8001f62:	4907      	ldr	r1, [pc, #28]	; (8001f80 <deleteFile+0xb0>)
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7ff f819 	bl	8000f9c <AdventOfCode_print>
}
 8001f6a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	080199ec 	.word	0x080199ec
 8001f78:	08019a78 	.word	0x08019a78
 8001f7c:	08019a88 	.word	0x08019a88
 8001f80:	08019aa0 	.word	0x08019aa0

08001f84 <showHelp>:

static void showHelp()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8001f8a:	af00      	add	r7, sp, #0
	// print execution commands
	char puzzle_commands[] =
 8001f8c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001f90:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f94:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <showHelp+0x74>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	4611      	mov	r1, r2
 8001f9a:	f240 1365 	movw	r3, #357	; 0x165
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f014 fa44 	bl	801642c <memcpy>
			"               [check <day_number>]\n"
			"    test     > Run puzzle implementation using test input.\n"
			"               [test <day_number>]\n"
			"    release  > Run puzzle implementation using release input.\n"
			"               [release <day_number>]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, puzzle_commands, strlen(puzzle_commands));
 8001fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe f931 	bl	8000210 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f7fe ffef 	bl	8000f9c <AdventOfCode_print>

	// print file commands
	char file_commands[] =
 8001fbe:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001fc2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <showHelp+0x78>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4611      	mov	r1, r2
 8001fcc:	f44f 7399 	mov.w	r3, #306	; 0x132
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f014 fa2b 	bl	801642c <memcpy>
			"               [list]\n"
			"    upload   > Upload puzzle input data to the SD card.\n"
			"               [upload <name_of_file>.txt]\n"
			"    delete   > Delete puzzle input data on the SD card.\n"
			"               [delete <name_of_file>.txt]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, file_commands, strlen(file_commands));
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe f919 	bl	8000210 <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f7fe ffd8 	bl	8000f9c <AdventOfCode_print>
}
 8001fec:	bf00      	nop
 8001fee:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08019ab0 	.word	0x08019ab0
 8001ffc:	08019c18 	.word	0x08019c18

08002000 <invalidCommand>:

static void invalidCommand()
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0
	char unknown_string[] = "Unkown command refer to the commands list using [help]!\n";
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <invalidCommand+0x40>)
 8002008:	1d3c      	adds	r4, r7, #4
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800201c:	c403      	stmia	r4!, {r0, r1}
 800201e:	7022      	strb	r2, [r4, #0]
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, unknown_string, strlen(unknown_string));
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f8f4 	bl	8000210 <strlen>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	2002      	movs	r0, #2
 8002032:	f7fe ffb3 	bl	8000f9c <AdventOfCode_print>
}
 8002036:	bf00      	nop
 8002038:	3740      	adds	r7, #64	; 0x40
 800203a:	46bd      	mov	sp, r7
 800203c:	bdb0      	pop	{r4, r5, r7, pc}
 800203e:	bf00      	nop
 8002040:	08019d4c 	.word	0x08019d4c

08002044 <USBD_HandleCommands>:

void USBD_HandleCommands()
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b0b3      	sub	sp, #204	; 0xcc
 8002048:	af00      	add	r7, sp, #0
	// check if message is valid
	if(!usb_rx_ready)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <USBD_HandleCommands+0x194>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80bd 	beq.w	80021ce <USBD_HandleCommands+0x18a>
		return;

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	4860      	ldr	r0, [pc, #384]	; (80021dc <USBD_HandleCommands+0x198>)
 800205a:	f002 fb07 	bl	800466c <HAL_GPIO_WritePin>

	// tokenize input
	char token_buffer[6][32];
	memset(token_buffer, 0x00, 6 * 32);
 800205e:	463b      	mov	r3, r7
 8002060:	22c0      	movs	r2, #192	; 0xc0
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f014 f9ef 	bl	8016448 <memset>
	char *token = strtok((char*)usb_rx_buffer, " ");
 800206a:	495d      	ldr	r1, [pc, #372]	; (80021e0 <USBD_HandleCommands+0x19c>)
 800206c:	485d      	ldr	r0, [pc, #372]	; (80021e4 <USBD_HandleCommands+0x1a0>)
 800206e:	f014 ff6d 	bl	8016f4c <strtok>
 8002072:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	uint8_t token_counter = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 800207c:	e01a      	b.n	80020b4 <USBD_HandleCommands+0x70>
	{
		memcpy(token_buffer[token_counter], token, strlen(token));
 800207e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8002082:	463a      	mov	r2, r7
 8002084:	015b      	lsls	r3, r3, #5
 8002086:	18d4      	adds	r4, r2, r3
 8002088:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800208c:	f7fe f8c0 	bl	8000210 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002098:	4620      	mov	r0, r4
 800209a:	f014 f9c7 	bl	801642c <memcpy>
		token = strtok(NULL, " ");
 800209e:	4950      	ldr	r1, [pc, #320]	; (80021e0 <USBD_HandleCommands+0x19c>)
 80020a0:	2000      	movs	r0, #0
 80020a2:	f014 ff53 	bl	8016f4c <strtok>
 80020a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		token_counter++;
 80020aa:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 80020b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <USBD_HandleCommands+0x80>
 80020bc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d9dc      	bls.n	800207e <USBD_HandleCommands+0x3a>
	}

	// process command
	uint8_t token_length = strlen(token_buffer[0]);
 80020c4:	463b      	mov	r3, r7
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f8a2 	bl	8000210 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(token_counter == 1) token_length -= 2;
 80020d2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d104      	bne.n	80020e4 <USBD_HandleCommands+0xa0>
 80020da:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80020de:	3b02      	subs	r3, #2
 80020e0:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(!memcmp(token_buffer[0], USB_COMMAND_CHECK, token_length))
 80020e4:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80020e8:	463b      	mov	r3, r7
 80020ea:	493f      	ldr	r1, [pc, #252]	; (80021e8 <USBD_HandleCommands+0x1a4>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f014 f98d 	bl	801640c <memcmp>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d104      	bne.n	8002102 <USBD_HandleCommands+0xbe>
		checkImplementation(token_buffer);
 80020f8:	463b      	mov	r3, r7
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb5a 	bl	80017b4 <checkImplementation>
 8002100:	e057      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_TEST, token_length))
 8002102:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8002106:	463b      	mov	r3, r7
 8002108:	4938      	ldr	r1, [pc, #224]	; (80021ec <USBD_HandleCommands+0x1a8>)
 800210a:	4618      	mov	r0, r3
 800210c:	f014 f97e 	bl	801640c <memcmp>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <USBD_HandleCommands+0xdc>
		runDebugImplementation(token_buffer);
 8002116:	463b      	mov	r3, r7
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc03 	bl	8001924 <runDebugImplementation>
 800211e:	e048      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_RELEASE, token_length))
 8002120:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8002124:	463b      	mov	r3, r7
 8002126:	4932      	ldr	r1, [pc, #200]	; (80021f0 <USBD_HandleCommands+0x1ac>)
 8002128:	4618      	mov	r0, r3
 800212a:	f014 f96f 	bl	801640c <memcmp>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <USBD_HandleCommands+0xfa>
		runReleaseImplementation(token_buffer);
 8002134:	463b      	mov	r3, r7
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fcd0 	bl	8001adc <runReleaseImplementation>
 800213c:	e039      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_LIST, token_length))
 800213e:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8002142:	463b      	mov	r3, r7
 8002144:	492b      	ldr	r1, [pc, #172]	; (80021f4 <USBD_HandleCommands+0x1b0>)
 8002146:	4618      	mov	r0, r3
 8002148:	f014 f960 	bl	801640c <memcmp>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <USBD_HandleCommands+0x114>
		showDirectory();
 8002152:	f7ff fe6b 	bl	8001e2c <showDirectory>
 8002156:	e02c      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_UPLOAD, token_length))
 8002158:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800215c:	463b      	mov	r3, r7
 800215e:	4926      	ldr	r1, [pc, #152]	; (80021f8 <USBD_HandleCommands+0x1b4>)
 8002160:	4618      	mov	r0, r3
 8002162:	f014 f953 	bl	801640c <memcmp>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <USBD_HandleCommands+0x132>
		fetchPuzzleInput(token_buffer);
 800216c:	463b      	mov	r3, r7
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd90 	bl	8001c94 <fetchPuzzleInput>
 8002174:	e01d      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_DELETE, token_length))
 8002176:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800217a:	463b      	mov	r3, r7
 800217c:	491f      	ldr	r1, [pc, #124]	; (80021fc <USBD_HandleCommands+0x1b8>)
 800217e:	4618      	mov	r0, r3
 8002180:	f014 f944 	bl	801640c <memcmp>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <USBD_HandleCommands+0x150>
		deleteFile(token_buffer);
 800218a:	463b      	mov	r3, r7
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fe9f 	bl	8001ed0 <deleteFile>
 8002192:	e00e      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_HELP, token_length))
 8002194:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8002198:	463b      	mov	r3, r7
 800219a:	4919      	ldr	r1, [pc, #100]	; (8002200 <USBD_HandleCommands+0x1bc>)
 800219c:	4618      	mov	r0, r3
 800219e:	f014 f935 	bl	801640c <memcmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <USBD_HandleCommands+0x16a>
		showHelp();
 80021a8:	f7ff feec 	bl	8001f84 <showHelp>
 80021ac:	e001      	b.n	80021b2 <USBD_HandleCommands+0x16e>
	else
		invalidCommand();
 80021ae:	f7ff ff27 	bl	8002000 <invalidCommand>

	// print new cursor
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, ">", 1);
 80021b2:	2201      	movs	r2, #1
 80021b4:	4913      	ldr	r1, [pc, #76]	; (8002204 <USBD_HandleCommands+0x1c0>)
 80021b6:	2002      	movs	r0, #2
 80021b8:	f7fe fef0 	bl	8000f9c <AdventOfCode_print>

	// clear receive flag
	usb_rx_ready = 0;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <USBD_HandleCommands+0x194>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

	// turn off led
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <USBD_HandleCommands+0x198>)
 80021c8:	f002 fa50 	bl	800466c <HAL_GPIO_WritePin>
 80021cc:	e000      	b.n	80021d0 <USBD_HandleCommands+0x18c>
		return;
 80021ce:	bf00      	nop
}
 80021d0:	37cc      	adds	r7, #204	; 0xcc
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000ee2 	.word	0x20000ee2
 80021dc:	40021800 	.word	0x40021800
 80021e0:	08019d88 	.word	0x08019d88
 80021e4:	20000ae0 	.word	0x20000ae0
 80021e8:	08019d8c 	.word	0x08019d8c
 80021ec:	08019d94 	.word	0x08019d94
 80021f0:	08019d9c 	.word	0x08019d9c
 80021f4:	08019da4 	.word	0x08019da4
 80021f8:	08019dac 	.word	0x08019dac
 80021fc:	08019db4 	.word	0x08019db4
 8002200:	08019dbc 	.word	0x08019dbc
 8002204:	08019dc4 	.word	0x08019dc4

08002208 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b096      	sub	sp, #88	; 0x58
 800220c:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800220e:	f001 f8b4 	bl	800337a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002212:	f000 f897 	bl	8002344 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002216:	f000 fae7 	bl	80027e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800221a:	f000 fa55 	bl	80026c8 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 800221e:	f000 f95f 	bl	80024e0 <MX_SDMMC1_SD_Init>
	MX_USB_DEVICE_Init();
 8002222:	f012 ffef 	bl	8015204 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8002226:	f013 fd9b 	bl	8015d60 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 800222a:	f000 fa1d 	bl	8002668 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800222e:	f000 f979 	bl	8002524 <MX_TIM1_Init>
	MX_TIM11_Init();
 8002232:	f000 f9cb 	bl	80025cc <MX_TIM11_Init>
	MX_ADC1_Init();
 8002236:	f000 f8f3 	bl	8002420 <MX_ADC1_Init>
	MX_FMC_Init();
 800223a:	f000 fa73 	bl	8002724 <MX_FMC_Init>
	MX_FATFS_Init();
 800223e:	f00c f809 	bl	800e254 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	// wait for usb connection
	while(!usb_connected)
 8002242:	e003      	b.n	800224c <main+0x44>
		HAL_Delay(500);
 8002244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002248:	f001 f8f4 	bl	8003434 <HAL_Delay>
	while(!usb_connected)
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <main+0xcc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f7      	beq.n	8002244 <main+0x3c>

	// system startup
	System_init(&system_state);
 8002254:	4820      	ldr	r0, [pc, #128]	; (80022d8 <main+0xd0>)
 8002256:	f7ff f98f 	bl	8001578 <System_init>

	// system init terminal log
	System_initLog(&system_state);
 800225a:	481f      	ldr	r0, [pc, #124]	; (80022d8 <main+0xd0>)
 800225c:	f7ff f9f2 	bl	8001644 <System_initLog>
	System_selfTestLog(&system_state);
 8002260:	481d      	ldr	r0, [pc, #116]	; (80022d8 <main+0xd0>)
 8002262:	f7ff fa0f 	bl	8001684 <System_selfTestLog>

	// init AOC
	AdventOfCode_init(&aoc,
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <main+0xd4>)
 8002268:	9315      	str	r3, [sp, #84]	; 0x54
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <main+0xd8>)
 800226c:	9314      	str	r3, [sp, #80]	; 0x50
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <main+0xdc>)
 8002270:	9313      	str	r3, [sp, #76]	; 0x4c
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <main+0xe0>)
 8002274:	9312      	str	r3, [sp, #72]	; 0x48
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <main+0xe4>)
 8002278:	9311      	str	r3, [sp, #68]	; 0x44
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <main+0xe8>)
 800227c:	9310      	str	r3, [sp, #64]	; 0x40
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <main+0xec>)
 8002280:	930f      	str	r3, [sp, #60]	; 0x3c
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <main+0xf0>)
 8002284:	930e      	str	r3, [sp, #56]	; 0x38
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <main+0xf4>)
 8002288:	930d      	str	r3, [sp, #52]	; 0x34
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <main+0xf8>)
 800228c:	930c      	str	r3, [sp, #48]	; 0x30
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <main+0xfc>)
 8002290:	930b      	str	r3, [sp, #44]	; 0x2c
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <main+0x100>)
 8002294:	930a      	str	r3, [sp, #40]	; 0x28
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <main+0x104>)
 8002298:	9309      	str	r3, [sp, #36]	; 0x24
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <main+0x108>)
 800229c:	9308      	str	r3, [sp, #32]
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <main+0x10c>)
 80022a0:	9307      	str	r3, [sp, #28]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <main+0x110>)
 80022a4:	9306      	str	r3, [sp, #24]
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <main+0x114>)
 80022a8:	9305      	str	r3, [sp, #20]
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <main+0x118>)
 80022ac:	9304      	str	r3, [sp, #16]
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <main+0x11c>)
 80022b0:	9303      	str	r3, [sp, #12]
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <main+0x120>)
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <main+0x124>)
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <main+0x128>)
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <main+0x12c>)
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <main+0x130>)
 80022c2:	491e      	ldr	r1, [pc, #120]	; (800233c <main+0x134>)
 80022c4:	481e      	ldr	r0, [pc, #120]	; (8002340 <main+0x138>)
 80022c6:	f7fe fe11 	bl	8000eec <AdventOfCode_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		USBD_HandleCommands();
 80022ca:	f7ff febb 	bl	8002044 <USBD_HandleCommands>

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80022ce:	f013 fd6d 	bl	8015dac <MX_USB_HOST_Process>
		USBD_HandleCommands();
 80022d2:	e7fa      	b.n	80022ca <main+0xc2>
 80022d4:	20000ee3 	.word	0x20000ee3
 80022d8:	20000674 	.word	0x20000674
 80022dc:	08001557 	.word	0x08001557
 80022e0:	08001535 	.word	0x08001535
 80022e4:	08001513 	.word	0x08001513
 80022e8:	080014f1 	.word	0x080014f1
 80022ec:	080014cf 	.word	0x080014cf
 80022f0:	080014ad 	.word	0x080014ad
 80022f4:	0800148b 	.word	0x0800148b
 80022f8:	08001469 	.word	0x08001469
 80022fc:	08001447 	.word	0x08001447
 8002300:	08001425 	.word	0x08001425
 8002304:	08001403 	.word	0x08001403
 8002308:	080013e1 	.word	0x080013e1
 800230c:	080013bf 	.word	0x080013bf
 8002310:	0800139d 	.word	0x0800139d
 8002314:	0800137b 	.word	0x0800137b
 8002318:	08001359 	.word	0x08001359
 800231c:	08001337 	.word	0x08001337
 8002320:	08001315 	.word	0x08001315
 8002324:	080012f3 	.word	0x080012f3
 8002328:	080012d1 	.word	0x080012d1
 800232c:	080012af 	.word	0x080012af
 8002330:	0800128d 	.word	0x0800128d
 8002334:	0800126b 	.word	0x0800126b
 8002338:	08001249 	.word	0x08001249
 800233c:	08000fe9 	.word	0x08000fe9
 8002340:	20000ee4 	.word	0x20000ee4

08002344 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	; 0x50
 8002348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	2230      	movs	r2, #48	; 0x30
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f014 f878 	bl	8016448 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002368:	f005 f9a6 	bl	80076b8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <SystemClock_Config+0xd4>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <SystemClock_Config+0xd4>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <SystemClock_Config+0xd4>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <SystemClock_Config+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <SystemClock_Config+0xd8>)
 800238a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <SystemClock_Config+0xd8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800239c:	2301      	movs	r3, #1
 800239e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a6:	2302      	movs	r3, #2
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80023b0:	2308      	movs	r3, #8
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 80023b4:	23d8      	movs	r3, #216	; 0xd8
 80023b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80023bc:	2309      	movs	r3, #9
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 f9d7 	bl	8007778 <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80023d0:	f000 fb3c 	bl	8002a4c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023d4:	f005 f980 	bl	80076d8 <HAL_PWREx_EnableOverDrive>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80023de:	f000 fb35 	bl	8002a4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e2:	230f      	movs	r3, #15
 80023e4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e6:	2302      	movs	r3, #2
 80023e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2107      	movs	r1, #7
 8002400:	4618      	mov	r0, r3
 8002402:	f005 fc5d 	bl	8007cc0 <HAL_RCC_ClockConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <SystemClock_Config+0xcc>
	{
		Error_Handler();
 800240c:	f000 fb1e 	bl	8002a4c <Error_Handler>
	}
}
 8002410:	bf00      	nop
 8002412:	3750      	adds	r7, #80	; 0x50
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40007000 	.word	0x40007000

08002420 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002434:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <MX_ADC1_Init+0xb8>)
 8002436:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002438:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <MX_ADC1_Init+0xb4>)
 800243a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800243e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002448:	2201      	movs	r2, #1
 800244a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <MX_ADC1_Init+0xb4>)
 800244e:	2201      	movs	r2, #1
 8002450:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MX_ADC1_Init+0xb4>)
 800245c:	2200      	movs	r2, #0
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <MX_ADC1_Init+0xbc>)
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <MX_ADC1_Init+0xb4>)
 800246e:	2202      	movs	r2, #2
 8002470:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_ADC1_Init+0xb4>)
 800247c:	2201      	movs	r2, #1
 800247e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002480:	4814      	ldr	r0, [pc, #80]	; (80024d4 <MX_ADC1_Init+0xb4>)
 8002482:	f000 fffb 	bl	800347c <HAL_ADC_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 800248c:	f000 fade 	bl	8002a4c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002494:	2301      	movs	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002498:	2306      	movs	r3, #6
 800249a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <MX_ADC1_Init+0xb4>)
 80024a2:	f001 f82f 	bl	8003504 <HAL_ADC_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80024ac:	f000 face 	bl	8002a4c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_ADC1_Init+0xb4>)
 80024be:	f001 f821 	bl	8003504 <HAL_ADC_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 80024c8:	f000 fac0 	bl	8002a4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000031c 	.word	0x2000031c
 80024d8:	40012000 	.word	0x40012000
 80024dc:	0f000001 	.word	0x0f000001

080024e0 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <MX_SDMMC1_SD_Init+0x40>)
 80024e8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 8002504:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002508:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 800250c:	2204      	movs	r2, #4
 800250e:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <MX_SDMMC1_SD_Init+0x3c>)
 8002512:	f006 f9b1 	bl	8008878 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200003c4 	.word	0x200003c4
 8002520:	40012c00 	.word	0x40012c00

08002524 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <MX_TIM1_Init+0xa0>)
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <MX_TIM1_Init+0xa4>)
 8002546:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <MX_TIM1_Init+0xa0>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <MX_TIM1_Init+0xa0>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_TIM1_Init+0xa0>)
 8002556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <MX_TIM1_Init+0xa0>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_TIM1_Init+0xa0>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <MX_TIM1_Init+0xa0>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <MX_TIM1_Init+0xa0>)
 8002570:	f007 faf2 	bl	8009b58 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 800257a:	f000 fa67 	bl	8002a4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002582:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4619      	mov	r1, r3
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <MX_TIM1_Init+0xa0>)
 800258c:	f007 fcb0 	bl	8009ef0 <HAL_TIM_ConfigClockSource>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 8002596:	f000 fa59 	bl	8002a4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <MX_TIM1_Init+0xa0>)
 80025ac:	f008 f902 	bl	800a7b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80025b6:	f000 fa49 	bl	8002a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000508 	.word	0x20000508
 80025c8:	40010000 	.word	0x40010000

080025cc <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	615a      	str	r2, [r3, #20]
 80025e2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <MX_TIM11_Init+0x94>)
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <MX_TIM11_Init+0x98>)
 80025e8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <MX_TIM11_Init+0x94>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <MX_TIM11_Init+0x94>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_TIM11_Init+0x94>)
 80025f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fc:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <MX_TIM11_Init+0x94>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <MX_TIM11_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800260a:	4815      	ldr	r0, [pc, #84]	; (8002660 <MX_TIM11_Init+0x94>)
 800260c:	f007 faa4 	bl	8009b58 <HAL_TIM_Base_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 8002616:	f000 fa19 	bl	8002a4c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800261a:	4811      	ldr	r0, [pc, #68]	; (8002660 <MX_TIM11_Init+0x94>)
 800261c:	f007 faf3 	bl	8009c06 <HAL_TIM_PWM_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 8002626:	f000 fa11 	bl	8002a4c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	; 0x60
 800262c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <MX_TIM11_Init+0x94>)
 8002642:	f007 fb41 	bl	8009cc8 <HAL_TIM_PWM_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 800264c:	f000 f9fe 	bl	8002a4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <MX_TIM11_Init+0x94>)
 8002652:	f000 fc1d 	bl	8002e90 <HAL_TIM_MspPostInit>

}
 8002656:	bf00      	nop
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000554 	.word	0x20000554
 8002664:	40014800 	.word	0x40014800

08002668 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <MX_USART1_UART_Init+0x5c>)
 8002670:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 8002674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002678:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 800268e:	220c      	movs	r2, #12
 8002690:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <MX_USART1_UART_Init+0x58>)
 80026ac:	f008 f910 	bl	800a8d0 <HAL_UART_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80026b6:	f000 f9c9 	bl	8002a4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200005a0 	.word	0x200005a0
 80026c4:	40011000 	.word	0x40011000

080026c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <MX_DMA_Init+0x58>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <MX_DMA_Init+0x58>)
 80026d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_DMA_Init+0x58>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2038      	movs	r0, #56	; 0x38
 80026ec:	f001 fa35 	bl	8003b5a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026f0:	2038      	movs	r0, #56	; 0x38
 80026f2:	f001 fa4e 	bl	8003b92 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	203b      	movs	r0, #59	; 0x3b
 80026fc:	f001 fa2d 	bl	8003b5a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002700:	203b      	movs	r0, #59	; 0x3b
 8002702:	f001 fa46 	bl	8003b92 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2045      	movs	r0, #69	; 0x45
 800270c:	f001 fa25 	bl	8003b5a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002710:	2045      	movs	r0, #69	; 0x45
 8002712:	f001 fa3e 	bl	8003b92 <HAL_NVIC_EnableIRQ>

}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	615a      	str	r2, [r3, #20]
 800273a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <MX_FMC_Init+0xbc>)
 800273e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002742:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <MX_FMC_Init+0xc0>)
 8002748:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <MX_FMC_Init+0xbc>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002758:	2204      	movs	r2, #4
 800275a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <MX_FMC_Init+0xbc>)
 800275e:	2210      	movs	r2, #16
 8002760:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_FMC_Init+0xbc>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_FMC_Init+0xbc>)
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002784:	2200      	movs	r2, #0
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_FMC_Init+0xbc>)
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <MX_FMC_Init+0xbc>)
 8002796:	2200      	movs	r2, #0
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <MX_FMC_Init+0xbc>)
 800279c:	2200      	movs	r2, #0
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <MX_FMC_Init+0xbc>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 80027a6:	2305      	movs	r3, #5
 80027a8:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80027aa:	230f      	movs	r3, #15
 80027ac:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 80027ae:	2308      	movs	r3, #8
 80027b0:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80027b6:	2310      	movs	r3, #16
 80027b8:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80027ba:	2311      	movs	r3, #17
 80027bc:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_FMC_Init+0xbc>)
 80027ca:	f007 f97d 	bl	8009ac8 <HAL_SRAM_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 80027d4:	f000 f93a 	bl	8002a4c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000628 	.word	0x20000628
 80027e4:	a0000104 	.word	0xa0000104

080027e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80027fe:	4b8b      	ldr	r3, [pc, #556]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a8a      	ldr	r2, [pc, #552]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <MX_GPIO_Init+0x244>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a84      	ldr	r2, [pc, #528]	; (8002a2c <MX_GPIO_Init+0x244>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a7e      	ldr	r2, [pc, #504]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b7c      	ldr	r3, [pc, #496]	; (8002a2c <MX_GPIO_Init+0x244>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002846:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a78      	ldr	r2, [pc, #480]	; (8002a2c <MX_GPIO_Init+0x244>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800285e:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a72      	ldr	r2, [pc, #456]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <MX_GPIO_Init+0x244>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <MX_GPIO_Init+0x244>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a66      	ldr	r2, [pc, #408]	; (8002a2c <MX_GPIO_Init+0x244>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <MX_GPIO_Init+0x244>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a60      	ldr	r2, [pc, #384]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028ac:	f043 0320 	orr.w	r3, r3, #32
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b5e      	ldr	r3, [pc, #376]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a5a      	ldr	r2, [pc, #360]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <MX_GPIO_Init+0x244>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028dc:	4854      	ldr	r0, [pc, #336]	; (8002a30 <MX_GPIO_Init+0x248>)
 80028de:	f001 fec5 	bl	800466c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2104      	movs	r1, #4
 80028e6:	4853      	ldr	r0, [pc, #332]	; (8002a34 <MX_GPIO_Init+0x24c>)
 80028e8:	f001 fec0 	bl	800466c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	4851      	ldr	r0, [pc, #324]	; (8002a38 <MX_GPIO_Init+0x250>)
 80028f2:	f001 febb 	bl	800466c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	21c0      	movs	r1, #192	; 0xc0
 80028fa:	4850      	ldr	r0, [pc, #320]	; (8002a3c <MX_GPIO_Init+0x254>)
 80028fc:	f001 feb6 	bl	800466c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8002900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4845      	ldr	r0, [pc, #276]	; (8002a30 <MX_GPIO_Init+0x248>)
 800291a:	f001 fcfb 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800291e:	f643 4333 	movw	r3, #15411	; 0x3c33
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	483f      	ldr	r0, [pc, #252]	; (8002a30 <MX_GPIO_Init+0x248>)
 8002934:	f001 fcee 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8002938:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	483b      	ldr	r0, [pc, #236]	; (8002a3c <MX_GPIO_Init+0x254>)
 800294e:	f001 fce1 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 8002952:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4836      	ldr	r0, [pc, #216]	; (8002a40 <MX_GPIO_Init+0x258>)
 8002968:	f001 fcd4 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800296c:	2340      	movs	r3, #64	; 0x40
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	4831      	ldr	r0, [pc, #196]	; (8002a44 <MX_GPIO_Init+0x25c>)
 8002980:	f001 fcc8 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8002984:	230b      	movs	r3, #11
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4827      	ldr	r0, [pc, #156]	; (8002a34 <MX_GPIO_Init+0x24c>)
 8002998:	f001 fcbc 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 800299c:	2304      	movs	r3, #4
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4820      	ldr	r0, [pc, #128]	; (8002a34 <MX_GPIO_Init+0x24c>)
 80029b4:	f001 fcae 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80029b8:	23a0      	movs	r3, #160	; 0xa0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	481b      	ldr	r0, [pc, #108]	; (8002a38 <MX_GPIO_Init+0x250>)
 80029cc:	f001 fca2 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e4:	4619      	mov	r1, r3
 80029e6:	4814      	ldr	r0, [pc, #80]	; (8002a38 <MX_GPIO_Init+0x250>)
 80029e8:	f001 fc94 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80029ec:	23c0      	movs	r3, #192	; 0xc0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a00:	4619      	mov	r1, r3
 8002a02:	480e      	ldr	r0, [pc, #56]	; (8002a3c <MX_GPIO_Init+0x254>)
 8002a04:	f001 fc86 	bl	8004314 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <MX_GPIO_Init+0x260>)
 8002a1e:	f001 fc79 	bl	8004314 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002a22:	bf00      	nop
 8002a24:	3738      	adds	r7, #56	; 0x38
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020c00 	.word	0x40020c00
 8002a48:	40021400 	.word	0x40021400

08002a4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a52:	b672      	cpsid	i
}
 8002a54:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	481c      	ldr	r0, [pc, #112]	; (8002acc <Error_Handler+0x80>)
 8002a5c:	f001 fe06 	bl	800466c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	4819      	ldr	r0, [pc, #100]	; (8002acc <Error_Handler+0x80>)
 8002a66:	f001 fe01 	bl	800466c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <Error_Handler+0x84>)
 8002a70:	f001 fdfc 	bl	800466c <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <Error_Handler+0x88>)
 8002a76:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d010      	beq.n	8002aa0 <Error_Handler+0x54>
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	dc17      	bgt.n	8002ab2 <Error_Handler+0x66>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <Error_Handler+0x40>
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <Error_Handler+0x4a>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8002a8a:	e012      	b.n	8002ab2 <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	480f      	ldr	r0, [pc, #60]	; (8002acc <Error_Handler+0x80>)
 8002a90:	f001 fe05 	bl	800469e <HAL_GPIO_TogglePin>
			break;
 8002a94:	e00e      	b.n	8002ab4 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <Error_Handler+0x80>)
 8002a9a:	f001 fe00 	bl	800469e <HAL_GPIO_TogglePin>
			break;
 8002a9e:	e009      	b.n	8002ab4 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	480a      	ldr	r0, [pc, #40]	; (8002acc <Error_Handler+0x80>)
 8002aa4:	f001 fdfb 	bl	800469e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <Error_Handler+0x80>)
 8002aac:	f001 fdf7 	bl	800469e <HAL_GPIO_TogglePin>
			break;
 8002ab0:	e000      	b.n	8002ab4 <Error_Handler+0x68>
			break;
 8002ab2:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	e002      	b.n	8002ac0 <Error_Handler+0x74>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3301      	adds	r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <Error_Handler+0x8c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d9f8      	bls.n	8002aba <Error_Handler+0x6e>
		switch(system_state.error)
 8002ac8:	e7d4      	b.n	8002a74 <Error_Handler+0x28>
 8002aca:	bf00      	nop
 8002acc:	40021800 	.word	0x40021800
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	20000674 	.word	0x20000674
 8002ad8:	001e847f 	.word	0x001e847f

08002adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_MspInit+0x44>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_MspInit+0x44>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_MspInit+0x44>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_MspInit+0x44>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_MspInit+0x44>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_MspInit+0x44>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <HAL_ADC_MspInit+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d153      	bne.n	8002bee <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a2c      	ldr	r2, [pc, #176]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_ADC_MspInit+0xd8>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002b76:	2305      	movs	r3, #5
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	481d      	ldr	r0, [pc, #116]	; (8002c00 <HAL_ADC_MspInit+0xdc>)
 8002b8a:	f001 fbc3 	bl	8004314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_ADC_MspInit+0xe4>)
 8002b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bd2:	480c      	ldr	r0, [pc, #48]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bd4:	f000 fff8 	bl	8003bc8 <HAL_DMA_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002bde:	f7ff ff35 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_ADC_MspInit+0xe0>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012000 	.word	0x40012000
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	20000364 	.word	0x20000364
 8002c08:	40026410 	.word	0x40026410

08002c0c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0ac      	sub	sp, #176	; 0xb0
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 0318 	add.w	r3, r7, #24
 8002c28:	2284      	movs	r2, #132	; 0x84
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f013 fc0b 	bl	8016448 <memset>
  if(hsd->Instance==SDMMC1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a74      	ldr	r2, [pc, #464]	; (8002e08 <HAL_SD_MspInit+0x1fc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	f040 80e0 	bne.w	8002dfe <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8002c3e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8002c42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 fa57 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8002c60:	f7ff fef4 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c64:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4a68      	ldr	r2, [pc, #416]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a62      	ldr	r2, [pc, #392]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c94:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_SD_MspInit+0x200>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8002cac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	484f      	ldr	r0, [pc, #316]	; (8002e10 <HAL_SD_MspInit+0x204>)
 8002cd4:	f001 fb1e 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4845      	ldr	r0, [pc, #276]	; (8002e14 <HAL_SD_MspInit+0x208>)
 8002cfe:	f001 fb09 	bl	8004314 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002d02:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <HAL_SD_MspInit+0x210>)
 8002d06:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d0e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d16:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d22:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d24:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d2a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d32:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002d34:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d36:	2220      	movs	r2, #32
 8002d38:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d42:	2204      	movs	r2, #4
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d48:	2203      	movs	r2, #3
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002d5c:	482e      	ldr	r0, [pc, #184]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d5e:	f000 ff33 	bl	8003bc8 <HAL_DMA_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8002d68:	f7ff fe70 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
 8002d72:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <HAL_SD_MspInit+0x20c>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_SD_MspInit+0x218>)
 8002d7c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d84:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d88:	2240      	movs	r2, #64	; 0x40
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d98:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002da0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002da4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002db8:	2204      	movs	r2, #4
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002dd2:	4813      	ldr	r0, [pc, #76]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dd4:	f000 fef8 	bl	8003bc8 <HAL_DMA_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002dde:	f7ff fe35 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002de8:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <HAL_SD_MspInit+0x214>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2031      	movs	r0, #49	; 0x31
 8002df4:	f000 feb1 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002df8:	2031      	movs	r0, #49	; 0x31
 8002dfa:	f000 feca 	bl	8003b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	37b0      	adds	r7, #176	; 0xb0
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	20000448 	.word	0x20000448
 8002e1c:	40026458 	.word	0x40026458
 8002e20:	200004a8 	.word	0x200004a8
 8002e24:	400264a0 	.word	0x400264a0

08002e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_TIM_Base_MspInit+0x5c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10c      	bne.n	8002e54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e52:	e010      	b.n	8002e76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_TIM_Base_MspInit+0x64>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10b      	bne.n	8002e76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <HAL_TIM_Base_MspInit+0x60>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40014800 	.word	0x40014800

08002e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_TIM_MspPostInit+0x64>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d11b      	bne.n	8002eea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HAL_TIM_MspPostInit+0x68>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <HAL_TIM_MspPostInit+0x68>)
 8002eb8:	f043 0320 	orr.w	r3, r3, #32
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_TIM_MspPostInit+0x68>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002eda:	2303      	movs	r3, #3
 8002edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <HAL_TIM_MspPostInit+0x6c>)
 8002ee6:	f001 fa15 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002eea:	bf00      	nop
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40014800 	.word	0x40014800
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40021400 	.word	0x40021400

08002f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b0aa      	sub	sp, #168	; 0xa8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	2284      	movs	r2, #132	; 0x84
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f013 fa91 	bl	8016448 <memset>
  if(huart->Instance==USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_UART_MspInit+0xb0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d13a      	bne.n	8002fa6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f30:	2340      	movs	r3, #64	; 0x40
 8002f32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f34:	2300      	movs	r3, #0
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 f8e3 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f48:	f7ff fd80 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f52:	f043 0310 	orr.w	r3, r3, #16
 8002f56:	6453      	str	r3, [r2, #68]	; 0x44
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_UART_MspInit+0xb4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f94:	2307      	movs	r3, #7
 8002f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <HAL_UART_MspInit+0xb8>)
 8002fa2:	f001 f9b7 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	37a8      	adds	r7, #168	; 0xa8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020400 	.word	0x40020400

08002fbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_FMC_MspInit+0xc4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d14e      	bne.n	8003076 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_FMC_MspInit+0xc4>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_FMC_MspInit+0xc8>)
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_FMC_MspInit+0xc8>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6393      	str	r3, [r2, #56]	; 0x38
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_FMC_MspInit+0xc8>)
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8002ff6:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8002ffa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003008:	230c      	movs	r3, #12
 800300a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	4619      	mov	r1, r3
 8003010:	481d      	ldr	r0, [pc, #116]	; (8003088 <HAL_FMC_MspInit+0xcc>)
 8003012:	f001 f97f 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8003016:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800301a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003024:	2303      	movs	r3, #3
 8003026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003028:	230c      	movs	r3, #12
 800302a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	4619      	mov	r1, r3
 8003030:	4816      	ldr	r0, [pc, #88]	; (800308c <HAL_FMC_MspInit+0xd0>)
 8003032:	f001 f96f 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8003036:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800303a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003048:	230c      	movs	r3, #12
 800304a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	4619      	mov	r1, r3
 8003050:	480f      	ldr	r0, [pc, #60]	; (8003090 <HAL_FMC_MspInit+0xd4>)
 8003052:	f001 f95f 	bl	8004314 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8003056:	233f      	movs	r3, #63	; 0x3f
 8003058:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003066:	230c      	movs	r3, #12
 8003068:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4809      	ldr	r0, [pc, #36]	; (8003094 <HAL_FMC_MspInit+0xd8>)
 8003070:	f001 f950 	bl	8004314 <HAL_GPIO_Init>
 8003074:	e000      	b.n	8003078 <HAL_FMC_MspInit+0xbc>
    return;
 8003076:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000f48 	.word	0x20000f48
 8003084:	40023800 	.word	0x40023800
 8003088:	40021000 	.word	0x40021000
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021400 	.word	0x40021400
 8003094:	40021800 	.word	0x40021800

08003098 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80030a0:	f7ff ff8c 	bl	8002fbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <MemManage_Handler+0x4>

080030be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <BusFault_Handler+0x4>

080030c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <UsageFault_Handler+0x4>

080030ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f8:	f000 f97c 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <SDMMC1_IRQHandler+0x10>)
 8003106:	f005 fe37 	bl	8008d78 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200003c4 	.word	0x200003c4

08003114 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <DMA2_Stream0_IRQHandler+0x10>)
 800311a:	f000 fe85 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000364 	.word	0x20000364

08003128 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <DMA2_Stream3_IRQHandler+0x10>)
 800312e:	f000 fe7b 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000448 	.word	0x20000448

0800313c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <OTG_FS_IRQHandler+0x10>)
 8003142:	f001 fd31 	bl	8004ba8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20002d5c 	.word	0x20002d5c

08003150 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <DMA2_Stream6_IRQHandler+0x10>)
 8003156:	f000 fe67 	bl	8003e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200004a8 	.word	0x200004a8

08003164 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <OTG_HS_IRQHandler+0x10>)
 800316a:	f003 f933 	bl	80063d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20002478 	.word	0x20002478

08003178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return 1;
 800317c:	2301      	movs	r3, #1
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_kill>:

int _kill(int pid, int sig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003192:	f013 f901 	bl	8016398 <__errno>
 8003196:	4603      	mov	r3, r0
 8003198:	2216      	movs	r2, #22
 800319a:	601a      	str	r2, [r3, #0]
  return -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_exit>:

void _exit (int status)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffe7 	bl	8003188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031ba:	e7fe      	b.n	80031ba <_exit+0x12>

080031bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e00a      	b.n	80031e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031ce:	f3af 8000 	nop.w
 80031d2:	4601      	mov	r1, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf0      	blt.n	80031ce <_read+0x12>
  }

  return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e009      	b.n	800321c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	60ba      	str	r2, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	dbf1      	blt.n	8003208 <_write+0x12>
  }
  return len;
 8003224:	687b      	ldr	r3, [r7, #4]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_close>:

int _close(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003256:	605a      	str	r2, [r3, #4]
  return 0;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <_isatty>:

int _isatty(int file)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800326e:	2301      	movs	r3, #1
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <_sbrk+0x5c>)
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <_sbrk+0x60>)
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <_sbrk+0x64>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <_sbrk+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c8:	f013 f866 	bl	8016398 <__errno>
 80032cc:	4603      	mov	r3, r0
 80032ce:	220c      	movs	r2, #12
 80032d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	e009      	b.n	80032ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <_sbrk+0x64>)
 80032e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20050000 	.word	0x20050000
 80032f8:	00000400 	.word	0x00000400
 80032fc:	20000f4c 	.word	0x20000f4c
 8003300:	20003070 	.word	0x20003070

08003304 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <SystemInit+0x20>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	4a05      	ldr	r2, [pc, #20]	; (8003324 <SystemInit+0x20>)
 8003310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800332e:	490e      	ldr	r1, [pc, #56]	; (8003368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003334:	e002      	b.n	800333c <LoopCopyDataInit>

08003336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333a:	3304      	adds	r3, #4

0800333c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800333c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003340:	d3f9      	bcc.n	8003336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003344:	4c0b      	ldr	r4, [pc, #44]	; (8003374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003348:	e001      	b.n	800334e <LoopFillZerobss>

0800334a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800334c:	3204      	adds	r2, #4

0800334e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003350:	d3fb      	bcc.n	800334a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003352:	f7ff ffd7 	bl	8003304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f013 f825 	bl	80163a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335a:	f7fe ff55 	bl	8002208 <main>
  bx  lr    
 800335e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003360:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003368:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 800336c:	0801a35c 	.word	0x0801a35c
  ldr r2, =_sbss
 8003370:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8003374:	20003070 	.word	0x20003070

08003378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC_IRQHandler>

0800337a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337e:	2003      	movs	r0, #3
 8003380:	f000 fbe0 	bl	8003b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003384:	200f      	movs	r0, #15
 8003386:	f000 f805 	bl	8003394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800338a:	f7ff fba7 	bl	8002adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_InitTick+0x54>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_InitTick+0x58>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fbfb 	bl	8003bae <HAL_SYSTICK_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00e      	b.n	80033e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d80a      	bhi.n	80033de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c8:	2200      	movs	r2, #0
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f000 fbc3 	bl	8003b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_InitTick+0x5c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_IncTick+0x20>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_IncTick+0x24>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_IncTick+0x24>)
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000008 	.word	0x20000008
 8003418:	20000f50 	.word	0x20000f50

0800341c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return uwTick;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_GetTick+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000f50 	.word	0x20000f50

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff ffee 	bl	800341c <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d005      	beq.n	800345a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_Delay+0x44>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800345a:	bf00      	nop
 800345c:	f7ff ffde 	bl	800341c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d8f7      	bhi.n	800345c <HAL_Delay+0x28>
  {
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000008 	.word	0x20000008

0800347c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e031      	b.n	80034f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fb42 	bl	8002b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_ADC_Init+0x84>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f970 	bl	80037b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
 80034e6:	e001      	b.n	80034ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	ffffeefd 	.word	0xffffeefd

08003504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1c>
 800351c:	2302      	movs	r3, #2
 800351e:	e136      	b.n	800378e <HAL_ADC_ConfigChannel+0x28a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b09      	cmp	r3, #9
 800352e:	d93a      	bls.n	80035a6 <HAL_ADC_ConfigChannel+0xa2>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003538:	d035      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	3b1e      	subs	r3, #30
 8003550:	2207      	movs	r2, #7
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	400a      	ands	r2, r1
 800355e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a8d      	ldr	r2, [pc, #564]	; (800379c <HAL_ADC_ConfigChannel+0x298>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10a      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68d9      	ldr	r1, [r3, #12]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	061a      	lsls	r2, r3, #24
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800357e:	e035      	b.n	80035ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	4603      	mov	r3, r0
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4403      	add	r3, r0
 8003598:	3b1e      	subs	r3, #30
 800359a:	409a      	lsls	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035a4:	e022      	b.n	80035ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6919      	ldr	r1, [r3, #16]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	2207      	movs	r2, #7
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43da      	mvns	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	400a      	ands	r2, r1
 80035c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6919      	ldr	r1, [r3, #16]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	4603      	mov	r3, r0
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4403      	add	r3, r0
 80035e2:	409a      	lsls	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d824      	bhi.n	800363e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	3b05      	subs	r3, #5
 8003606:	221f      	movs	r2, #31
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43da      	mvns	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	400a      	ands	r2, r1
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	4618      	mov	r0, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	3b05      	subs	r3, #5
 8003630:	fa00 f203 	lsl.w	r2, r0, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	635a      	str	r2, [r3, #52]	; 0x34
 800363c:	e04c      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d824      	bhi.n	8003690 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	3b23      	subs	r3, #35	; 0x23
 8003658:	221f      	movs	r2, #31
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	400a      	ands	r2, r1
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	3b23      	subs	r3, #35	; 0x23
 8003682:	fa00 f203 	lsl.w	r2, r0, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
 800368e:	e023      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b41      	subs	r3, #65	; 0x41
 80036a2:	221f      	movs	r2, #31
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43da      	mvns	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	400a      	ands	r2, r1
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	4618      	mov	r0, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	3b41      	subs	r3, #65	; 0x41
 80036cc:	fa00 f203 	lsl.w	r2, r0, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a30      	ldr	r2, [pc, #192]	; (80037a0 <HAL_ADC_ConfigChannel+0x29c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10a      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x1f4>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_ADC_ConfigChannel+0x29c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10f      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x21e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b12      	cmp	r3, #18
 8003708:	d10b      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003710:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003714:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800371c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003720:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_ADC_ConfigChannel+0x29c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d12b      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x280>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_ADC_ConfigChannel+0x298>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <HAL_ADC_ConfigChannel+0x23a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b11      	cmp	r3, #17
 800373c:	d122      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003744:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003748:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003754:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_ADC_ConfigChannel+0x298>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_ADC_ConfigChannel+0x2a8>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0c9a      	lsrs	r2, r3, #18
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b01      	subs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	10000012 	.word	0x10000012
 80037a0:	40012000 	.word	0x40012000
 80037a4:	40012300 	.word	0x40012300
 80037a8:	20000000 	.word	0x20000000
 80037ac:	431bde83 	.word	0x431bde83

080037b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80037b8:	4b78      	ldr	r3, [pc, #480]	; (800399c <ADC_Init+0x1ec>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a77      	ldr	r2, [pc, #476]	; (800399c <ADC_Init+0x1ec>)
 80037be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80037c4:	4b75      	ldr	r3, [pc, #468]	; (800399c <ADC_Init+0x1ec>)
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4973      	ldr	r1, [pc, #460]	; (800399c <ADC_Init+0x1ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <ADC_Init+0x1f0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e00f      	b.n	80038aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0202 	bic.w	r2, r2, #2
 80038b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6899      	ldr	r1, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	3b01      	subs	r3, #1
 8003904:	035a      	lsls	r2, r3, #13
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e007      	b.n	8003920 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	051a      	lsls	r2, r3, #20
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003962:	025a      	lsls	r2, r3, #9
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	029a      	lsls	r2, r3, #10
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012300 	.word	0x40012300
 80039a0:	0f000001 	.word	0x0f000001

080039a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <__NVIC_SetPriorityGrouping+0x40>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c0:	4013      	ands	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <__NVIC_SetPriorityGrouping+0x44>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <__NVIC_SetPriorityGrouping+0x40>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	05fa0000 	.word	0x05fa0000

080039ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <__NVIC_GetPriorityGrouping+0x18>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	f003 0307 	and.w	r3, r3, #7
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	db0b      	blt.n	8003a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	f003 021f 	and.w	r2, r3, #31
 8003a20:	4907      	ldr	r1, [pc, #28]	; (8003a40 <__NVIC_EnableIRQ+0x38>)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2001      	movs	r0, #1
 8003a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000e100 	.word	0xe000e100

08003a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	6039      	str	r1, [r7, #0]
 8003a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db0a      	blt.n	8003a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <__NVIC_SetPriority+0x4c>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	0112      	lsls	r2, r2, #4
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a6c:	e00a      	b.n	8003a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <__NVIC_SetPriority+0x50>)
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	3b04      	subs	r3, #4
 8003a7c:	0112      	lsls	r2, r2, #4
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	440b      	add	r3, r1
 8003a82:	761a      	strb	r2, [r3, #24]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000e100 	.word	0xe000e100
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f1c3 0307 	rsb	r3, r3, #7
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	bf28      	it	cs
 8003ab6:	2304      	movcs	r3, #4
 8003ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d902      	bls.n	8003ac8 <NVIC_EncodePriority+0x30>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3b03      	subs	r3, #3
 8003ac6:	e000      	b.n	8003aca <NVIC_EncodePriority+0x32>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	401a      	ands	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	43d9      	mvns	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	4313      	orrs	r3, r2
         );
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b10:	d301      	bcc.n	8003b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b12:	2301      	movs	r3, #1
 8003b14:	e00f      	b.n	8003b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <SysTick_Config+0x40>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1e:	210f      	movs	r1, #15
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	f7ff ff8e 	bl	8003a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <SysTick_Config+0x40>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <SysTick_Config+0x40>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000e010 	.word	0xe000e010

08003b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff29 	bl	80039a4 <__NVIC_SetPriorityGrouping>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b6c:	f7ff ff3e 	bl	80039ec <__NVIC_GetPriorityGrouping>
 8003b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff ff8e 	bl	8003a98 <NVIC_EncodePriority>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff5d 	bl	8003a44 <__NVIC_SetPriority>
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff31 	bl	8003a08 <__NVIC_EnableIRQ>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ffa2 	bl	8003b00 <SysTick_Config>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7ff fc22 	bl	800341c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e099      	b.n	8003d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c04:	e00f      	b.n	8003c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c06:	f7ff fc09 	bl	800341c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d908      	bls.n	8003c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e078      	b.n	8003d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e8      	bne.n	8003c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4b38      	ldr	r3, [pc, #224]	; (8003d20 <HAL_DMA_Init+0x158>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d117      	bne.n	8003cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 faa5 	bl	800421c <DMA_CheckFifoParam>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e016      	b.n	8003d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa5c 	bl	80041b0 <DMA_CalcBaseAndBitshift>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	223f      	movs	r2, #63	; 0x3f
 8003d02:	409a      	lsls	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	f010803f 	.word	0xf010803f

08003d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_DMA_Start_IT+0x26>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e048      	b.n	8003ddc <HAL_DMA_Start_IT+0xb8>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d137      	bne.n	8003dce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f9ee 	bl	8004154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	223f      	movs	r2, #63	; 0x3f
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0216 	orr.w	r2, r2, #22
 8003d92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e005      	b.n	8003dda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00c      	b.n	8003e1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2205      	movs	r2, #5
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e34:	4b8e      	ldr	r3, [pc, #568]	; (8004070 <HAL_DMA_IRQHandler+0x248>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a8e      	ldr	r2, [pc, #568]	; (8004074 <HAL_DMA_IRQHandler+0x24c>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	2208      	movs	r2, #8
 8003e54:	409a      	lsls	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01a      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2208      	movs	r2, #8
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2201      	movs	r2, #1
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2204      	movs	r2, #4
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d012      	beq.n	8003f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2204      	movs	r2, #4
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0204 	orr.w	r2, r3, #4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2210      	movs	r2, #16
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d043      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03c      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2210      	movs	r2, #16
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d024      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e01f      	b.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
 8003f68:	e016      	b.n	8003f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0208 	bic.w	r2, r2, #8
 8003f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 808f 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8087 	beq.w	80040c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d136      	bne.n	8004040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0216 	bic.w	r2, r2, #22
 8003fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_DMA_IRQHandler+0x1da>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0208 	bic.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	223f      	movs	r2, #63	; 0x3f
 8004018:	409a      	lsls	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	2b00      	cmp	r3, #0
 8004034:	d07e      	beq.n	8004134 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
        }
        return;
 800403e:	e079      	b.n	8004134 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01d      	beq.n	800408a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	2b00      	cmp	r3, #0
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
 800406c:	e02c      	b.n	80040c8 <HAL_DMA_IRQHandler+0x2a0>
 800406e:	bf00      	nop
 8004070:	20000000 	.word	0x20000000
 8004074:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e01e      	b.n	80040c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0210 	bic.w	r2, r2, #16
 80040a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d032      	beq.n	8004136 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d022      	beq.n	8004122 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2205      	movs	r2, #5
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d307      	bcc.n	8004110 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f2      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x2cc>
 800410e:	e000      	b.n	8004112 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004110:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e000      	b.n	8004136 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004134:	bf00      	nop
    }
  }
}
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d108      	bne.n	8004194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004192:	e007      	b.n	80041a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b10      	subs	r3, #16
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <DMA_CalcBaseAndBitshift+0x60>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <DMA_CalcBaseAndBitshift+0x64>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d908      	bls.n	80041f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <DMA_CalcBaseAndBitshift+0x68>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	659a      	str	r2, [r3, #88]	; 0x58
 80041ee:	e006      	b.n	80041fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <DMA_CalcBaseAndBitshift+0x68>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	aaaaaaab 	.word	0xaaaaaaab
 8004214:	08019e70 	.word	0x08019e70
 8004218:	fffffc00 	.word	0xfffffc00

0800421c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d856      	bhi.n	80042ea <DMA_CheckFifoParam+0xce>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <DMA_CheckFifoParam+0x28>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	08004267 	.word	0x08004267
 800424c:	08004255 	.word	0x08004255
 8004250:	080042eb 	.word	0x080042eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d046      	beq.n	80042ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e043      	b.n	80042ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426e:	d140      	bne.n	80042f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e03d      	b.n	80042f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d121      	bne.n	80042c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d837      	bhi.n	80042f6 <DMA_CheckFifoParam+0xda>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x70>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042a3 	.word	0x080042a3
 8004294:	0800429d 	.word	0x0800429d
 8004298:	080042b5 	.word	0x080042b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e030      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d025      	beq.n	80042fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e022      	b.n	80042fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c2:	e01c      	b.n	80042fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d903      	bls.n	80042d2 <DMA_CheckFifoParam+0xb6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d003      	beq.n	80042d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d0:	e018      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      break;
 80042d6:	e015      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e00b      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042ea:	bf00      	nop
 80042ec:	e00a      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e008      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e006      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;   
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
    }
  } 
  
  return status; 
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e175      	b.n	8004620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 8164 	bne.w	800461a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x56>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80be 	beq.w	800461a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a8:	6453      	str	r3, [r2, #68]	; 0x44
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_GPIO_Init+0x324>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044b6:	4a61      	ldr	r2, [pc, #388]	; (800463c <HAL_GPIO_Init+0x328>)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_GPIO_Init+0x32c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d037      	beq.n	8004552 <HAL_GPIO_Init+0x23e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a57      	ldr	r2, [pc, #348]	; (8004644 <HAL_GPIO_Init+0x330>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_GPIO_Init+0x23a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a56      	ldr	r2, [pc, #344]	; (8004648 <HAL_GPIO_Init+0x334>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <HAL_GPIO_Init+0x236>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a55      	ldr	r2, [pc, #340]	; (800464c <HAL_GPIO_Init+0x338>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d025      	beq.n	8004546 <HAL_GPIO_Init+0x232>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a54      	ldr	r2, [pc, #336]	; (8004650 <HAL_GPIO_Init+0x33c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <HAL_GPIO_Init+0x22e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a53      	ldr	r2, [pc, #332]	; (8004654 <HAL_GPIO_Init+0x340>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_GPIO_Init+0x22a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_GPIO_Init+0x344>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0x226>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_GPIO_Init+0x348>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_GPIO_Init+0x222>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_GPIO_Init+0x34c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x21e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4f      	ldr	r2, [pc, #316]	; (8004664 <HAL_GPIO_Init+0x350>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_GPIO_Init+0x21a>
 800452a:	2309      	movs	r3, #9
 800452c:	e012      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800452e:	230a      	movs	r3, #10
 8004530:	e010      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004532:	2308      	movs	r3, #8
 8004534:	e00e      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004536:	2307      	movs	r3, #7
 8004538:	e00c      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800453a:	2306      	movs	r3, #6
 800453c:	e00a      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800453e:	2305      	movs	r3, #5
 8004540:	e008      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004542:	2304      	movs	r3, #4
 8004544:	e006      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004546:	2303      	movs	r3, #3
 8004548:	e004      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800454a:	2302      	movs	r3, #2
 800454c:	e002      	b.n	8004554 <HAL_GPIO_Init+0x240>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_GPIO_Init+0x240>
 8004552:	2300      	movs	r3, #0
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	f002 0203 	and.w	r2, r2, #3
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	4093      	lsls	r3, r2
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004564:	4935      	ldr	r1, [pc, #212]	; (800463c <HAL_GPIO_Init+0x328>)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004596:	4a34      	ldr	r2, [pc, #208]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_GPIO_Init+0x354>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045c6:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_GPIO_Init+0x354>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <HAL_GPIO_Init+0x354>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3301      	adds	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	f67f ae86 	bls.w	8004334 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	40013800 	.word	0x40013800
 8004640:	40020000 	.word	0x40020000
 8004644:	40020400 	.word	0x40020400
 8004648:	40020800 	.word	0x40020800
 800464c:	40020c00 	.word	0x40020c00
 8004650:	40021000 	.word	0x40021000
 8004654:	40021400 	.word	0x40021400
 8004658:	40021800 	.word	0x40021800
 800465c:	40021c00 	.word	0x40021c00
 8004660:	40022000 	.word	0x40022000
 8004664:	40022400 	.word	0x40022400
 8004668:	40013c00 	.word	0x40013c00

0800466c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
 8004678:	4613      	mov	r3, r2
 800467a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800467c:	787b      	ldrb	r3, [r7, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004688:	e003      	b.n	8004692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	041a      	lsls	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	619a      	str	r2, [r3, #24]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046b0:	887a      	ldrh	r2, [r7, #2]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	041a      	lsls	r2, r3, #16
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	400b      	ands	r3, r1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	619a      	str	r2, [r3, #24]
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80046d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d4:	b08f      	sub	sp, #60	; 0x3c
 80046d6:	af0a      	add	r7, sp, #40	; 0x28
 80046d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e054      	b.n	800478e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f011 fb8c 	bl	8015e1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2203      	movs	r2, #3
 8004708:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f007 fc7b 	bl	800c01e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	687e      	ldr	r6, [r7, #4]
 8004730:	466d      	mov	r5, sp
 8004732:	f106 0410 	add.w	r4, r6, #16
 8004736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800473a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800473e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004742:	e885 0003 	stmia.w	r5, {r0, r1}
 8004746:	1d33      	adds	r3, r6, #4
 8004748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f007 fb5c 	bl	800be08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f007 fc72 	bl	800c040 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	687e      	ldr	r6, [r7, #4]
 8004764:	466d      	mov	r5, sp
 8004766:	f106 0410 	add.w	r4, r6, #16
 800476a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004776:	e885 0003 	stmia.w	r5, {r0, r1}
 800477a:	1d33      	adds	r3, r6, #4
 800477c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800477e:	6838      	ldr	r0, [r7, #0]
 8004780:	f008 ffae 	bl	800d6e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004796 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004796:	b590      	push	{r4, r7, lr}
 8004798:	b089      	sub	sp, #36	; 0x24
 800479a:	af04      	add	r7, sp, #16
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	4608      	mov	r0, r1
 80047a0:	4611      	mov	r1, r2
 80047a2:	461a      	mov	r2, r3
 80047a4:	4603      	mov	r3, r0
 80047a6:	70fb      	strb	r3, [r7, #3]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70bb      	strb	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_HCD_HC_Init+0x28>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e076      	b.n	80048ac <HAL_HCD_HC_Init+0x116>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	333d      	adds	r3, #61	; 0x3d
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3338      	adds	r3, #56	; 0x38
 80047e6:	787a      	ldrb	r2, [r7, #1]
 80047e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	212c      	movs	r1, #44	; 0x2c
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	3340      	adds	r3, #64	; 0x40
 80047f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80047fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3339      	adds	r3, #57	; 0x39
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	333f      	adds	r3, #63	; 0x3f
 800481c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	78ba      	ldrb	r2, [r7, #2]
 8004826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482a:	b2d0      	uxtb	r0, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	333a      	adds	r3, #58	; 0x3a
 8004838:	4602      	mov	r2, r0
 800483a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800483c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	da09      	bge.n	8004858 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	333b      	adds	r3, #59	; 0x3b
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	e008      	b.n	800486a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	333b      	adds	r3, #59	; 0x3b
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	333c      	adds	r3, #60	; 0x3c
 8004878:	f897 2020 	ldrb.w	r2, [r7, #32]
 800487c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	787c      	ldrb	r4, [r7, #1]
 8004884:	78ba      	ldrb	r2, [r7, #2]
 8004886:	78f9      	ldrb	r1, [r7, #3]
 8004888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800488a:	9302      	str	r3, [sp, #8]
 800488c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	4623      	mov	r3, r4
 800489a:	f009 f89b 	bl	800d9d4 <USB_HC_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd90      	pop	{r4, r7, pc}

080048b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_HCD_HC_Halt+0x1e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e00f      	b.n	80048f2 <HAL_HCD_HC_Halt+0x3e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f009 faeb 	bl	800debe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	70fb      	strb	r3, [r7, #3]
 800490e:	460b      	mov	r3, r1
 8004910:	70bb      	strb	r3, [r7, #2]
 8004912:	4613      	mov	r3, r2
 8004914:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	333b      	adds	r3, #59	; 0x3b
 8004924:	78ba      	ldrb	r2, [r7, #2]
 8004926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	333f      	adds	r3, #63	; 0x3f
 8004936:	787a      	ldrb	r2, [r7, #1]
 8004938:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800493a:	7c3b      	ldrb	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d112      	bne.n	8004966 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3342      	adds	r3, #66	; 0x42
 800494e:	2203      	movs	r2, #3
 8004950:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	333d      	adds	r3, #61	; 0x3d
 8004960:	7f3a      	ldrb	r2, [r7, #28]
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e008      	b.n	8004978 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	3342      	adds	r3, #66	; 0x42
 8004974:	2202      	movs	r2, #2
 8004976:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004978:	787b      	ldrb	r3, [r7, #1]
 800497a:	2b03      	cmp	r3, #3
 800497c:	f200 80c6 	bhi.w	8004b0c <HAL_HCD_HC_SubmitRequest+0x210>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004999 	.word	0x08004999
 800498c:	08004af9 	.word	0x08004af9
 8004990:	080049fd 	.word	0x080049fd
 8004994:	08004a7b 	.word	0x08004a7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004998:	7c3b      	ldrb	r3, [r7, #16]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 80b8 	bne.w	8004b10 <HAL_HCD_HC_SubmitRequest+0x214>
 80049a0:	78bb      	ldrb	r3, [r7, #2]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 80b4 	bne.w	8004b10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80049a8:	8b3b      	ldrh	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d108      	bne.n	80049c0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	212c      	movs	r1, #44	; 0x2c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	3355      	adds	r3, #85	; 0x55
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	3355      	adds	r3, #85	; 0x55
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3342      	adds	r3, #66	; 0x42
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049e6:	e093      	b.n	8004b10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	212c      	movs	r1, #44	; 0x2c
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3342      	adds	r3, #66	; 0x42
 80049f6:	2202      	movs	r2, #2
 80049f8:	701a      	strb	r2, [r3, #0]
      break;
 80049fa:	e089      	b.n	8004b10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80049fc:	78bb      	ldrb	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11d      	bne.n	8004a3e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3355      	adds	r3, #85	; 0x55
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3342      	adds	r3, #66	; 0x42
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a28:	e073      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	3342      	adds	r3, #66	; 0x42
 8004a38:	2202      	movs	r2, #2
 8004a3a:	701a      	strb	r2, [r3, #0]
      break;
 8004a3c:	e069      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3354      	adds	r3, #84	; 0x54
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3342      	adds	r3, #66	; 0x42
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
      break;
 8004a64:	e055      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	3342      	adds	r3, #66	; 0x42
 8004a74:	2202      	movs	r2, #2
 8004a76:	701a      	strb	r2, [r3, #0]
      break;
 8004a78:	e04b      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a7a:	78bb      	ldrb	r3, [r7, #2]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11d      	bne.n	8004abc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	212c      	movs	r1, #44	; 0x2c
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3355      	adds	r3, #85	; 0x55
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3342      	adds	r3, #66	; 0x42
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004aa6:	e034      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3342      	adds	r3, #66	; 0x42
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	701a      	strb	r2, [r3, #0]
      break;
 8004aba:	e02a      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3354      	adds	r3, #84	; 0x54
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	212c      	movs	r1, #44	; 0x2c
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	3342      	adds	r3, #66	; 0x42
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
      break;
 8004ae2:	e016      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3342      	adds	r3, #66	; 0x42
 8004af2:	2202      	movs	r2, #2
 8004af4:	701a      	strb	r2, [r3, #0]
      break;
 8004af6:	e00c      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	3342      	adds	r3, #66	; 0x42
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3344      	adds	r3, #68	; 0x44
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	8b3a      	ldrh	r2, [r7, #24]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	202c      	movs	r0, #44	; 0x2c
 8004b2c:	fb00 f303 	mul.w	r3, r0, r3
 8004b30:	440b      	add	r3, r1
 8004b32:	334c      	adds	r3, #76	; 0x4c
 8004b34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3360      	adds	r3, #96	; 0x60
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3350      	adds	r3, #80	; 0x50
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3339      	adds	r3, #57	; 0x39
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3361      	adds	r3, #97	; 0x61
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	222c      	movs	r2, #44	; 0x2c
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	3338      	adds	r3, #56	; 0x38
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	18d1      	adds	r1, r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	f009 f83e 	bl	800dc18 <USB_HC_StartXfer>
 8004b9c:	4603      	mov	r3, r0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop

08004ba8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f008 fcca 	bl	800d558 <USB_GetMode>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	f040 80f6 	bne.w	8004db8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f008 fc0d 	bl	800d3f0 <USB_ReadInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80ec 	beq.w	8004db6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f008 fc04 	bl	800d3f0 <USB_ReadInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf2:	d104      	bne.n	8004bfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004bfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f008 fbf4 	bl	800d3f0 <USB_ReadInterrupts>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d104      	bne.n	8004c1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f008 fbe4 	bl	800d3f0 <USB_ReadInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c32:	d104      	bne.n	8004c3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f008 fbd4 	bl	800d3f0 <USB_ReadInterrupts>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d103      	bne.n	8004c5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2202      	movs	r2, #2
 8004c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f008 fbc6 	bl	800d3f0 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6e:	d11c      	bne.n	8004caa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	6938      	ldr	r0, [r7, #16]
 8004c8e:	f007 fb81 	bl	800c394 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004c92:	6938      	ldr	r0, [r7, #16]
 8004c94:	f007 fbb2 	bl	800c3fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f008 fdd2 	bl	800d848 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f011 f947 	bl	8015f38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f008 fb9e 	bl	800d3f0 <USB_ReadInterrupts>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cbe:	d102      	bne.n	8004cc6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 f9ce 	bl	8006062 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f008 fb90 	bl	800d3f0 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d106      	bne.n	8004ce8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f011 f910 	bl	8015f00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f008 fb7f 	bl	800d3f0 <USB_ReadInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d101      	bne.n	8004d00 <HAL_HCD_IRQHandler+0x158>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_HCD_IRQHandler+0x15a>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0210 	bic.w	r2, r2, #16
 8004d14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f8d1 	bl	8005ebe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0210 	orr.w	r2, r2, #16
 8004d2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f008 fb5d 	bl	800d3f0 <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d40:	d13a      	bne.n	8004db8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f009 f8a8 	bl	800de9c <USB_HC_ReadInterrupt>
 8004d4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e025      	b.n	8004da0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d018      	beq.n	8004d9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7e:	d106      	bne.n	8004d8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8ab 	bl	8004ee2 <HCD_HC_IN_IRQHandler>
 8004d8c:	e005      	b.n	8004d9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fcc6 	bl	8005726 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3d4      	bcc.n	8004d54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db2:	615a      	str	r2, [r3, #20]
 8004db4:	e000      	b.n	8004db8 <HAL_HCD_IRQHandler+0x210>
      return;
 8004db6:	bf00      	nop
    }
  }
}
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_HCD_Start+0x16>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e013      	b.n	8004dfc <HAL_HCD_Start+0x3e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f008 fd94 	bl	800d910 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f007 f905 	bl	800bffc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_HCD_Stop+0x16>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e00d      	b.n	8004e36 <HAL_HCD_Stop+0x32>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f009 f982 	bl	800e130 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f008 fd36 	bl	800d8bc <USB_ResetPort>
 8004e50:	4603      	mov	r3, r0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3360      	adds	r3, #96	; 0x60
 8004e74:	781b      	ldrb	r3, [r3, #0]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	212c      	movs	r1, #44	; 0x2c
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	3350      	adds	r3, #80	; 0x50
 8004e9c:	681b      	ldr	r3, [r3, #0]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f008 fd7a 	bl	800d9b0 <USB_GetCurrentFrame>
 8004ebc:	4603      	mov	r3, r0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f008 fd55 	bl	800d982 <USB_GetHostSpeed>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f008 fa85 	bl	800d416 <USB_ReadChInterrupts>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d11a      	bne.n	8004f4c <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	461a      	mov	r2, r3
 8004f24:	2304      	movs	r3, #4
 8004f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	212c      	movs	r1, #44	; 0x2c
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	3361      	adds	r3, #97	; 0x61
 8004f36:	2207      	movs	r2, #7
 8004f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f008 ffba 	bl	800debe <USB_HC_Halt>
 8004f4a:	e0a2      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f008 fa5d 	bl	800d416 <USB_ReadChInterrupts>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d11b      	bne.n	8004fa0 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	461a      	mov	r2, r3
 8004f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3361      	adds	r3, #97	; 0x61
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f008 ff90 	bl	800debe <USB_HC_Halt>
 8004f9e:	e078      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f008 fa33 	bl	800d416 <USB_ReadChInterrupts>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d11a      	bne.n	8004ff0 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2308      	movs	r3, #8
 8004fca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3361      	adds	r3, #97	; 0x61
 8004fda:	2206      	movs	r2, #6
 8004fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f008 ff68 	bl	800debe <USB_HC_Halt>
 8004fee:	e050      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f008 fa0b 	bl	800d416 <USB_ReadChInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d11b      	bne.n	8005044 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005018:	461a      	mov	r2, r3
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	3361      	adds	r3, #97	; 0x61
 800502e:	2209      	movs	r2, #9
 8005030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f008 ff3e 	bl	800debe <USB_HC_Halt>
 8005042:	e026      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	4611      	mov	r1, r2
 800504e:	4618      	mov	r0, r3
 8005050:	f008 f9e1 	bl	800d416 <USB_ReadChInterrupts>
 8005054:	4603      	mov	r3, r0
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d119      	bne.n	8005092 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	3361      	adds	r3, #97	; 0x61
 800507e:	2207      	movs	r2, #7
 8005080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f008 ff16 	bl	800debe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f008 f9ba 	bl	800d416 <USB_ReadChInterrupts>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d112      	bne.n	80050d4 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f008 ff00 	bl	800debe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d0:	6093      	str	r3, [r2, #8]
 80050d2:	e325      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f008 f999 	bl	800d416 <USB_ReadChInterrupts>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 80e8 	bne.w	80052c0 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	461a      	mov	r2, r3
 80050fe:	2320      	movs	r3, #32
 8005100:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d019      	beq.n	800513e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	3348      	adds	r3, #72	; 0x48
 8005118:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	0159      	lsls	r1, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	440b      	add	r3, r1
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800512c:	1ad2      	subs	r2, r2, r3
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	202c      	movs	r0, #44	; 0x2c
 8005134:	fb00 f303 	mul.w	r3, r0, r3
 8005138:	440b      	add	r3, r1
 800513a:	3350      	adds	r3, #80	; 0x50
 800513c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	212c      	movs	r1, #44	; 0x2c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	3361      	adds	r3, #97	; 0x61
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	212c      	movs	r1, #44	; 0x2c
 8005156:	fb01 f303 	mul.w	r3, r1, r3
 800515a:	4413      	add	r3, r2
 800515c:	335c      	adds	r3, #92	; 0x5c
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	461a      	mov	r2, r3
 8005170:	2301      	movs	r3, #1
 8005172:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	333f      	adds	r3, #63	; 0x3f
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	333f      	adds	r3, #63	; 0x3f
 8005196:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005198:	2b02      	cmp	r3, #2
 800519a:	d111      	bne.n	80051c0 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f008 fe89 	bl	800debe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	461a      	mov	r2, r3
 80051ba:	2310      	movs	r3, #16
 80051bc:	6093      	str	r3, [r2, #8]
 80051be:	e03a      	b.n	8005236 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	212c      	movs	r1, #44	; 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	333f      	adds	r3, #63	; 0x3f
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d009      	beq.n	80051e8 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	333f      	adds	r3, #63	; 0x3f
 80051e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d126      	bne.n	8005236 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005206:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	212c      	movs	r1, #44	; 0x2c
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	3360      	adds	r3, #96	; 0x60
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	b2d9      	uxtb	r1, r3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	202c      	movs	r0, #44	; 0x2c
 8005224:	fb00 f303 	mul.w	r3, r0, r3
 8005228:	4413      	add	r3, r2
 800522a:	3360      	adds	r3, #96	; 0x60
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f010 fe8f 	bl	8015f54 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d12b      	bne.n	8005296 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	3348      	adds	r3, #72	; 0x48
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	202c      	movs	r0, #44	; 0x2c
 8005254:	fb00 f202 	mul.w	r2, r0, r2
 8005258:	440a      	add	r2, r1
 800525a:	3240      	adds	r2, #64	; 0x40
 800525c:	8812      	ldrh	r2, [r2, #0]
 800525e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 825a 	beq.w	8005720 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	212c      	movs	r1, #44	; 0x2c
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	3354      	adds	r3, #84	; 0x54
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2d8      	uxtb	r0, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	212c      	movs	r1, #44	; 0x2c
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	3354      	adds	r3, #84	; 0x54
 8005290:	4602      	mov	r2, r0
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e244      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	212c      	movs	r1, #44	; 0x2c
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	3354      	adds	r3, #84	; 0x54
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2d8      	uxtb	r0, r3
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	212c      	movs	r1, #44	; 0x2c
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	3354      	adds	r3, #84	; 0x54
 80052ba:	4602      	mov	r2, r0
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e22f      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f008 f8a3 	bl	800d416 <USB_ReadChInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d109      	bne.n	80052ee <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	2320      	movs	r3, #32
 80052ea:	6093      	str	r3, [r2, #8]
 80052ec:	e218      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f008 f88c 	bl	800d416 <USB_ReadChInterrupts>
 80052fe:	4603      	mov	r3, r0
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	f040 816b 	bne.w	80055e0 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	461a      	mov	r2, r3
 8005318:	2302      	movs	r3, #2
 800531a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	212c      	movs	r1, #44	; 0x2c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	3361      	adds	r3, #97	; 0x61
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d112      	bne.n	8005356 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3361      	adds	r3, #97	; 0x61
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	212c      	movs	r1, #44	; 0x2c
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	4413      	add	r3, r2
 800534e:	3360      	adds	r3, #96	; 0x60
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e135      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	212c      	movs	r1, #44	; 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3361      	adds	r3, #97	; 0x61
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d112      	bne.n	8005390 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	212c      	movs	r1, #44	; 0x2c
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	4413      	add	r3, r2
 8005376:	3361      	adds	r3, #97	; 0x61
 8005378:	2202      	movs	r2, #2
 800537a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3360      	adds	r3, #96	; 0x60
 800538a:	2205      	movs	r2, #5
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e118      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	212c      	movs	r1, #44	; 0x2c
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	3361      	adds	r3, #97	; 0x61
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b07      	cmp	r3, #7
 80053a2:	d009      	beq.n	80053b8 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3361      	adds	r3, #97	; 0x61
 80053b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d159      	bne.n	800546c <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3361      	adds	r3, #97	; 0x61
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	212c      	movs	r1, #44	; 0x2c
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	4413      	add	r3, r2
 80053d6:	335c      	adds	r3, #92	; 0x5c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	202c      	movs	r0, #44	; 0x2c
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	440b      	add	r3, r1
 80053e8:	335c      	adds	r3, #92	; 0x5c
 80053ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	212c      	movs	r1, #44	; 0x2c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	335c      	adds	r3, #92	; 0x5c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d912      	bls.n	8005426 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	212c      	movs	r1, #44	; 0x2c
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	335c      	adds	r3, #92	; 0x5c
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	212c      	movs	r1, #44	; 0x2c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	3360      	adds	r3, #96	; 0x60
 8005420:	2204      	movs	r2, #4
 8005422:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005424:	e0cd      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3360      	adds	r3, #96	; 0x60
 8005434:	2202      	movs	r2, #2
 8005436:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800544e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005456:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800546a:	e0aa      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3361      	adds	r3, #97	; 0x61
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b05      	cmp	r3, #5
 800547e:	d109      	bne.n	8005494 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	212c      	movs	r1, #44	; 0x2c
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	3361      	adds	r3, #97	; 0x61
 800548e:	2202      	movs	r2, #2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e096      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	212c      	movs	r1, #44	; 0x2c
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	3361      	adds	r3, #97	; 0x61
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d109      	bne.n	80054bc <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	212c      	movs	r1, #44	; 0x2c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	3361      	adds	r3, #97	; 0x61
 80054b6:	2202      	movs	r2, #2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e082      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	3361      	adds	r3, #97	; 0x61
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d13f      	bne.n	8005550 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	212c      	movs	r1, #44	; 0x2c
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	3361      	adds	r3, #97	; 0x61
 80054de:	2202      	movs	r2, #2
 80054e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	212c      	movs	r1, #44	; 0x2c
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	3360      	adds	r3, #96	; 0x60
 80054f0:	2202      	movs	r2, #2
 80054f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	333f      	adds	r3, #63	; 0x3f
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	333f      	adds	r3, #63	; 0x3f
 8005516:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005518:	2b02      	cmp	r3, #2
 800551a:	d152      	bne.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005532:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800553a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005548:	461a      	mov	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e038      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	212c      	movs	r1, #44	; 0x2c
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	3361      	adds	r3, #97	; 0x61
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d123      	bne.n	80055ac <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3361      	adds	r3, #97	; 0x61
 8005572:	2202      	movs	r2, #2
 8005574:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	335c      	adds	r3, #92	; 0x5c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	202c      	movs	r0, #44	; 0x2c
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	440b      	add	r3, r1
 8005594:	335c      	adds	r3, #92	; 0x5c
 8005596:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	212c      	movs	r1, #44	; 0x2c
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	3360      	adds	r3, #96	; 0x60
 80055a6:	2204      	movs	r2, #4
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e00a      	b.n	80055c2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	212c      	movs	r1, #44	; 0x2c
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	3361      	adds	r3, #97	; 0x61
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f000 80ae 	beq.w	800571e <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	b2d9      	uxtb	r1, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	202c      	movs	r0, #44	; 0x2c
 80055cc:	fb00 f303 	mul.w	r3, r0, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	3360      	adds	r3, #96	; 0x60
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f010 fcbb 	bl	8015f54 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055de:	e09f      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f007 ff13 	bl	800d416 <USB_ReadChInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d123      	bne.n	8005642 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	461a      	mov	r2, r3
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3361      	adds	r3, #97	; 0x61
 800561a:	2205      	movs	r2, #5
 800561c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	212c      	movs	r1, #44	; 0x2c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	335c      	adds	r3, #92	; 0x5c
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f008 fc3f 	bl	800debe <USB_HC_Halt>
 8005640:	e06e      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f007 fee2 	bl	800d416 <USB_ReadChInterrupts>
 8005652:	4603      	mov	r3, r0
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b10      	cmp	r3, #16
 800565a:	d161      	bne.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	333f      	adds	r3, #63	; 0x3f
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d11a      	bne.n	80056a6 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	212c      	movs	r1, #44	; 0x2c
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	335c      	adds	r3, #92	; 0x5c
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3361      	adds	r3, #97	; 0x61
 8005690:	2204      	movs	r2, #4
 8005692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f008 fc0d 	bl	800debe <USB_HC_Halt>
 80056a4:	e031      	b.n	800570a <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	333f      	adds	r3, #63	; 0x3f
 80056c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d11d      	bne.n	800570a <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	335c      	adds	r3, #92	; 0x5c
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d110      	bne.n	800570a <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	212c      	movs	r1, #44	; 0x2c
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	3361      	adds	r3, #97	; 0x61
 80056f6:	2204      	movs	r2, #4
 80056f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f008 fbda 	bl	800debe <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	2310      	movs	r3, #16
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	e000      	b.n	8005720 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800571e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f007 fe63 	bl	800d416 <USB_ReadChInterrupts>
 8005750:	4603      	mov	r3, r0
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d11a      	bne.n	8005790 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	461a      	mov	r2, r3
 8005768:	2304      	movs	r3, #4
 800576a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	212c      	movs	r1, #44	; 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	3361      	adds	r3, #97	; 0x61
 800577a:	2207      	movs	r2, #7
 800577c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f008 fb98 	bl	800debe <USB_HC_Halt>
 800578e:	e393      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	4611      	mov	r1, r2
 800579a:	4618      	mov	r0, r3
 800579c:	f007 fe3b 	bl	800d416 <USB_ReadChInterrupts>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d137      	bne.n	800581a <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	461a      	mov	r2, r3
 80057b8:	2320      	movs	r3, #32
 80057ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	212c      	movs	r1, #44	; 0x2c
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	333d      	adds	r3, #61	; 0x3d
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 8373 	bne.w	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	212c      	movs	r1, #44	; 0x2c
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	333d      	adds	r3, #61	; 0x3d
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3360      	adds	r3, #96	; 0x60
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	212c      	movs	r1, #44	; 0x2c
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	3361      	adds	r3, #97	; 0x61
 8005804:	2203      	movs	r2, #3
 8005806:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f008 fb53 	bl	800debe <USB_HC_Halt>
 8005818:	e34e      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f007 fdf6 	bl	800d416 <USB_ReadChInterrupts>
 800582a:	4603      	mov	r3, r0
 800582c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005834:	d112      	bne.n	800585c <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4413      	add	r3, r2
 800583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005842:	461a      	mov	r2, r3
 8005844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005848:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	4611      	mov	r1, r2
 8005854:	4618      	mov	r0, r3
 8005856:	f008 fb32 	bl	800debe <USB_HC_Halt>
 800585a:	e32d      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f007 fdd5 	bl	800d416 <USB_ReadChInterrupts>
 800586c:	4603      	mov	r3, r0
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d142      	bne.n	80058fc <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	212c      	movs	r1, #44	; 0x2c
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	335c      	adds	r3, #92	; 0x5c
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f007 fdbf 	bl	800d416 <USB_ReadChInterrupts>
 8005898:	4603      	mov	r3, r0
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d111      	bne.n	80058c6 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	212c      	movs	r1, #44	; 0x2c
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	333d      	adds	r3, #61	; 0x3d
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	2340      	movs	r3, #64	; 0x40
 80058c4:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	461a      	mov	r2, r3
 80058d4:	2301      	movs	r3, #1
 80058d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	212c      	movs	r1, #44	; 0x2c
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	3361      	adds	r3, #97	; 0x61
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f008 fae2 	bl	800debe <USB_HC_Halt>
 80058fa:	e2dd      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f007 fd85 	bl	800d416 <USB_ReadChInterrupts>
 800590c:	4603      	mov	r3, r0
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d12c      	bne.n	8005970 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	212c      	movs	r1, #44	; 0x2c
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	3361      	adds	r3, #97	; 0x61
 8005924:	2205      	movs	r2, #5
 8005926:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	212c      	movs	r1, #44	; 0x2c
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	333d      	adds	r3, #61	; 0x3d
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	212c      	movs	r1, #44	; 0x2c
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	335c      	adds	r3, #92	; 0x5c
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f008 fab1 	bl	800debe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	461a      	mov	r2, r3
 800596a:	2340      	movs	r3, #64	; 0x40
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	e2a3      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f007 fd4b 	bl	800d416 <USB_ReadChInterrupts>
 8005980:	4603      	mov	r3, r0
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b08      	cmp	r3, #8
 8005988:	d11a      	bne.n	80059c0 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	4413      	add	r3, r2
 8005992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005996:	461a      	mov	r2, r3
 8005998:	2308      	movs	r3, #8
 800599a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	3361      	adds	r3, #97	; 0x61
 80059aa:	2206      	movs	r2, #6
 80059ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f008 fa80 	bl	800debe <USB_HC_Halt>
 80059be:	e27b      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f007 fd23 	bl	800d416 <USB_ReadChInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d140      	bne.n	8005a5c <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	212c      	movs	r1, #44	; 0x2c
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	335c      	adds	r3, #92	; 0x5c
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	212c      	movs	r1, #44	; 0x2c
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	3361      	adds	r3, #97	; 0x61
 80059fa:	2204      	movs	r2, #4
 80059fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	212c      	movs	r1, #44	; 0x2c
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	333d      	adds	r3, #61	; 0x3d
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d112      	bne.n	8005a38 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	212c      	movs	r1, #44	; 0x2c
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	333c      	adds	r3, #60	; 0x3c
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	212c      	movs	r1, #44	; 0x2c
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	333d      	adds	r3, #61	; 0x3d
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f008 fa3b 	bl	800debe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	461a      	mov	r2, r3
 8005a56:	2310      	movs	r3, #16
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	e22d      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f007 fcd5 	bl	800d416 <USB_ReadChInterrupts>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d164      	bne.n	8005b40 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d111      	bne.n	8005aa2 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	212c      	movs	r1, #44	; 0x2c
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	3361      	adds	r3, #97	; 0x61
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f008 fa0f 	bl	800debe <USB_HC_Halt>
 8005aa0:	e044      	b.n	8005b2c <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	212c      	movs	r1, #44	; 0x2c
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	335c      	adds	r3, #92	; 0x5c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	202c      	movs	r0, #44	; 0x2c
 8005aba:	fb00 f303 	mul.w	r3, r0, r3
 8005abe:	440b      	add	r3, r1
 8005ac0:	335c      	adds	r3, #92	; 0x5c
 8005ac2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	212c      	movs	r1, #44	; 0x2c
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	335c      	adds	r3, #92	; 0x5c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d920      	bls.n	8005b1a <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	212c      	movs	r1, #44	; 0x2c
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	335c      	adds	r3, #92	; 0x5c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	212c      	movs	r1, #44	; 0x2c
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	4413      	add	r3, r2
 8005af6:	3360      	adds	r3, #96	; 0x60
 8005af8:	2204      	movs	r2, #4
 8005afa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	202c      	movs	r0, #44	; 0x2c
 8005b06:	fb00 f303 	mul.w	r3, r0, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3360      	adds	r3, #96	; 0x60
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f010 fa1e 	bl	8015f54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b18:	e008      	b.n	8005b2c <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3360      	adds	r3, #96	; 0x60
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	6093      	str	r3, [r2, #8]
 8005b3e:	e1bb      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f007 fc63 	bl	800d416 <USB_ReadChInterrupts>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5a:	d11b      	bne.n	8005b94 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	3361      	adds	r3, #97	; 0x61
 8005b6a:	2209      	movs	r2, #9
 8005b6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f008 f9a0 	bl	800debe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	e191      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f007 fc39 	bl	800d416 <USB_ReadChInterrupts>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	f040 8184 	bne.w	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	212c      	movs	r1, #44	; 0x2c
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	4413      	add	r3, r2
 8005bce:	3361      	adds	r3, #97	; 0x61
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	f040 8087 	bne.w	8005ce6 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3361      	adds	r3, #97	; 0x61
 8005be6:	2202      	movs	r2, #2
 8005be8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	212c      	movs	r1, #44	; 0x2c
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3360      	adds	r3, #96	; 0x60
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	212c      	movs	r1, #44	; 0x2c
 8005c02:	fb01 f303 	mul.w	r3, r1, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	333f      	adds	r3, #63	; 0x3f
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d00a      	beq.n	8005c26 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	212c      	movs	r1, #44	; 0x2c
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	333f      	adds	r3, #63	; 0x3f
 8005c1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	f040 8139 	bne.w	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	212c      	movs	r1, #44	; 0x2c
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	3355      	adds	r3, #85	; 0x55
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f083 0301 	eor.w	r3, r3, #1
 8005c42:	b2d8      	uxtb	r0, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	212c      	movs	r1, #44	; 0x2c
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3355      	adds	r3, #85	; 0x55
 8005c52:	4602      	mov	r2, r0
 8005c54:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	f040 811c 	bne.w	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	334c      	adds	r3, #76	; 0x4c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8111 	beq.w	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	334c      	adds	r3, #76	; 0x4c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	202c      	movs	r0, #44	; 0x2c
 8005c8c:	fb00 f202 	mul.w	r2, r0, r2
 8005c90:	440a      	add	r2, r1
 8005c92:	3240      	adds	r2, #64	; 0x40
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	202c      	movs	r0, #44	; 0x2c
 8005ca0:	fb00 f202 	mul.w	r2, r0, r2
 8005ca4:	440a      	add	r2, r1
 8005ca6:	3240      	adds	r2, #64	; 0x40
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80ee 	beq.w	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3355      	adds	r3, #85	; 0x55
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f083 0301 	eor.w	r3, r3, #1
 8005cd0:	b2d8      	uxtb	r0, r3
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	212c      	movs	r1, #44	; 0x2c
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3355      	adds	r3, #85	; 0x55
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e0d8      	b.n	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	212c      	movs	r1, #44	; 0x2c
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3361      	adds	r3, #97	; 0x61
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d109      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	212c      	movs	r1, #44	; 0x2c
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	3361      	adds	r3, #97	; 0x61
 8005d08:	2202      	movs	r2, #2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e0c4      	b.n	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	212c      	movs	r1, #44	; 0x2c
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	3361      	adds	r3, #97	; 0x61
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d112      	bne.n	8005d48 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	212c      	movs	r1, #44	; 0x2c
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3361      	adds	r3, #97	; 0x61
 8005d30:	2202      	movs	r2, #2
 8005d32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	3360      	adds	r3, #96	; 0x60
 8005d42:	2202      	movs	r2, #2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e0a7      	b.n	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	212c      	movs	r1, #44	; 0x2c
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	3361      	adds	r3, #97	; 0x61
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	d112      	bne.n	8005d82 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	212c      	movs	r1, #44	; 0x2c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	3361      	adds	r3, #97	; 0x61
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	212c      	movs	r1, #44	; 0x2c
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3360      	adds	r3, #96	; 0x60
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e08a      	b.n	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	212c      	movs	r1, #44	; 0x2c
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3361      	adds	r3, #97	; 0x61
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d112      	bne.n	8005dbc <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	212c      	movs	r1, #44	; 0x2c
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	3361      	adds	r3, #97	; 0x61
 8005da4:	2202      	movs	r2, #2
 8005da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	212c      	movs	r1, #44	; 0x2c
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	3360      	adds	r3, #96	; 0x60
 8005db6:	2205      	movs	r2, #5
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e06d      	b.n	8005e98 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	212c      	movs	r1, #44	; 0x2c
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3361      	adds	r3, #97	; 0x61
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d009      	beq.n	8005de4 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	212c      	movs	r1, #44	; 0x2c
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	3361      	adds	r3, #97	; 0x61
 8005dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d168      	bne.n	8005eb6 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	212c      	movs	r1, #44	; 0x2c
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	3361      	adds	r3, #97	; 0x61
 8005df2:	2202      	movs	r2, #2
 8005df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	335c      	adds	r3, #92	; 0x5c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	202c      	movs	r0, #44	; 0x2c
 8005e0e:	fb00 f303 	mul.w	r3, r0, r3
 8005e12:	440b      	add	r3, r1
 8005e14:	335c      	adds	r3, #92	; 0x5c
 8005e16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	212c      	movs	r1, #44	; 0x2c
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	335c      	adds	r3, #92	; 0x5c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d912      	bls.n	8005e52 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	212c      	movs	r1, #44	; 0x2c
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	335c      	adds	r3, #92	; 0x5c
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	212c      	movs	r1, #44	; 0x2c
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3360      	adds	r3, #96	; 0x60
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e50:	e021      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	212c      	movs	r1, #44	; 0x2c
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3360      	adds	r3, #96	; 0x60
 8005e60:	2202      	movs	r2, #2
 8005e62:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	b2d9      	uxtb	r1, r3
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	202c      	movs	r0, #44	; 0x2c
 8005ea2:	fb00 f303 	mul.w	r3, r0, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	3360      	adds	r3, #96	; 0x60
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f010 f850 	bl	8015f54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005eb4:	e000      	b.n	8005eb8 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8005eb6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b08a      	sub	sp, #40	; 0x28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	0c5b      	lsrs	r3, r3, #17
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d004      	beq.n	8005f04 <HCD_RXQLVL_IRQHandler+0x46>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	f000 80a9 	beq.w	8006054 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f02:	e0aa      	b.n	800605a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80a6 	beq.w	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	212c      	movs	r1, #44	; 0x2c
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	3344      	adds	r3, #68	; 0x44
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 809b 	beq.w	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	212c      	movs	r1, #44	; 0x2c
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3350      	adds	r3, #80	; 0x50
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	441a      	add	r2, r3
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	202c      	movs	r0, #44	; 0x2c
 8005f3c:	fb00 f303 	mul.w	r3, r0, r3
 8005f40:	440b      	add	r3, r1
 8005f42:	334c      	adds	r3, #76	; 0x4c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d87a      	bhi.n	8006040 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	212c      	movs	r1, #44	; 0x2c
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	3344      	adds	r3, #68	; 0x44
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	b292      	uxth	r2, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	f007 f8b0 	bl	800d0c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	212c      	movs	r1, #44	; 0x2c
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	3344      	adds	r3, #68	; 0x44
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	441a      	add	r2, r3
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	202c      	movs	r0, #44	; 0x2c
 8005f82:	fb00 f303 	mul.w	r3, r0, r3
 8005f86:	440b      	add	r3, r1
 8005f88:	3344      	adds	r3, #68	; 0x44
 8005f8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	212c      	movs	r1, #44	; 0x2c
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4413      	add	r3, r2
 8005f98:	3350      	adds	r3, #80	; 0x50
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	202c      	movs	r0, #44	; 0x2c
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	440b      	add	r3, r1
 8005fac:	3350      	adds	r3, #80	; 0x50
 8005fae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	0cdb      	lsrs	r3, r3, #19
 8005fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	212c      	movs	r1, #44	; 0x2c
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3340      	adds	r3, #64	; 0x40
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d13c      	bne.n	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d039      	beq.n	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006002:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	212c      	movs	r1, #44	; 0x2c
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	4413      	add	r3, r2
 8006022:	3354      	adds	r3, #84	; 0x54
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2d8      	uxtb	r0, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	212c      	movs	r1, #44	; 0x2c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	3354      	adds	r3, #84	; 0x54
 800603a:	4602      	mov	r2, r0
 800603c:	701a      	strb	r2, [r3, #0]
      break;
 800603e:	e00b      	b.n	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	212c      	movs	r1, #44	; 0x2c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	3360      	adds	r3, #96	; 0x60
 800604e:	2204      	movs	r2, #4
 8006050:	701a      	strb	r2, [r3, #0]
      break;
 8006052:	e001      	b.n	8006058 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006058:	bf00      	nop
  }
}
 800605a:	bf00      	nop
 800605c:	3728      	adds	r7, #40	; 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800608e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d10b      	bne.n	80060b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d102      	bne.n	80060aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f00f ff39 	bl	8015f1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 0302 	orr.w	r3, r3, #2
 80060b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d132      	bne.n	8006122 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f043 0308 	orr.w	r3, r3, #8
 80060c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d126      	bne.n	800611c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d113      	bne.n	80060fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e0:	d106      	bne.n	80060f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2102      	movs	r1, #2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f007 fbad 	bl	800d848 <USB_InitFSLSPClkSel>
 80060ee:	e011      	b.n	8006114 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f007 fba6 	bl	800d848 <USB_InitFSLSPClkSel>
 80060fc:	e00a      	b.n	8006114 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d106      	bne.n	8006114 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610c:	461a      	mov	r2, r3
 800610e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006112:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f00f ff2b 	bl	8015f70 <HAL_HCD_PortEnabled_Callback>
 800611a:	e002      	b.n	8006122 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f00f ff35 	bl	8015f8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b20      	cmp	r3, #32
 800612a:	d103      	bne.n	8006134 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6013      	str	r3, [r2, #0]
}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614a:	b08f      	sub	sp, #60	; 0x3c
 800614c:	af0a      	add	r7, sp, #40	; 0x28
 800614e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e116      	b.n	8006388 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f00f fa89 	bl	801568c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2203      	movs	r2, #3
 800617e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f005 ff40 	bl	800c01e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	687e      	ldr	r6, [r7, #4]
 80061a6:	466d      	mov	r5, sp
 80061a8:	f106 0410 	add.w	r4, r6, #16
 80061ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80061bc:	1d33      	adds	r3, r6, #4
 80061be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c0:	6838      	ldr	r0, [r7, #0]
 80061c2:	f005 fe21 	bl	800be08 <USB_CoreInit>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0d7      	b.n	8006388 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f005 ff2e 	bl	800c040 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e04a      	b.n	8006280 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	333d      	adds	r3, #61	; 0x3d
 80061fa:	2201      	movs	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	333c      	adds	r3, #60	; 0x3c
 800620e:	7bfa      	ldrb	r2, [r7, #15]
 8006210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	b298      	uxth	r0, r3
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	3344      	adds	r3, #68	; 0x44
 8006226:	4602      	mov	r2, r0
 8006228:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800622a:	7bfa      	ldrb	r2, [r7, #15]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3348      	adds	r3, #72	; 0x48
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	334c      	adds	r3, #76	; 0x4c
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3354      	adds	r3, #84	; 0x54
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	3301      	adds	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d3af      	bcc.n	80061ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	e044      	b.n	800631a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006290:	7bfa      	ldrb	r2, [r7, #15]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062e8:	7bfa      	ldrb	r2, [r7, #15]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	3301      	adds	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	7bfa      	ldrb	r2, [r7, #15]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d3b5      	bcc.n	8006290 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	687e      	ldr	r6, [r7, #4]
 800632c:	466d      	mov	r5, sp
 800632e:	f106 0410 	add.w	r4, r6, #16
 8006332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800633e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006342:	1d33      	adds	r3, r6, #4
 8006344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006346:	6838      	ldr	r0, [r7, #0]
 8006348:	f005 fec6 	bl	800c0d8 <USB_DevInit>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e014      	b.n	8006388 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b01      	cmp	r3, #1
 8006374:	d102      	bne.n	800637c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f97a 	bl	8007670 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f007 f814 	bl	800d3ae <USB_DevDisconnect>

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_PCD_Start+0x16>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e012      	b.n	80063cc <HAL_PCD_Start+0x3c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f005 fe22 	bl	800bffc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f006 ffd5 	bl	800d36c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b08d      	sub	sp, #52	; 0x34
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f007 f8b4 	bl	800d558 <USB_GetMode>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f040 84b7 	bne.w	8006d66 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f006 fff7 	bl	800d3f0 <USB_ReadInterrupts>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 84ad 	beq.w	8006d64 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f006 ffe4 	bl	800d3f0 <USB_ReadInterrupts>
 8006428:	4603      	mov	r3, r0
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d107      	bne.n	8006442 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f002 0202 	and.w	r2, r2, #2
 8006440:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f006 ffd2 	bl	800d3f0 <USB_ReadInterrupts>
 800644c:	4603      	mov	r3, r0
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d161      	bne.n	800651a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0210 	bic.w	r2, r2, #16
 8006464:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	3304      	adds	r3, #4
 8006484:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	0c5b      	lsrs	r3, r3, #17
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	2b02      	cmp	r3, #2
 8006490:	d124      	bne.n	80064dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d035      	beq.n	800650a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	6a38      	ldr	r0, [r7, #32]
 80064b2:	f006 fe09 	bl	800d0c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064c2:	441a      	add	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d4:	441a      	add	r2, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	621a      	str	r2, [r3, #32]
 80064da:	e016      	b.n	800650a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	0c5b      	lsrs	r3, r3, #17
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d110      	bne.n	800650a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064ee:	2208      	movs	r2, #8
 80064f0:	4619      	mov	r1, r3
 80064f2:	6a38      	ldr	r0, [r7, #32]
 80064f4:	f006 fde8 	bl	800d0c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	091b      	lsrs	r3, r3, #4
 8006500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006504:	441a      	add	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0210 	orr.w	r2, r2, #16
 8006518:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f006 ff66 	bl	800d3f0 <USB_ReadInterrupts>
 8006524:	4603      	mov	r3, r0
 8006526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800652a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800652e:	f040 80a7 	bne.w	8006680 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f006 ff8c 	bl	800d458 <USB_ReadDevAllOutEpInterrupt>
 8006540:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006542:	e099      	b.n	8006678 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 808e 	beq.w	800666c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f006 ffb0 	bl	800d4c0 <USB_ReadDevOutEPInterrupt>
 8006560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	2301      	movs	r3, #1
 800657c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800657e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 feef 	bl	8007364 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00c      	beq.n	80065aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	2308      	movs	r3, #8
 80065a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80065a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 ffc5 	bl	8007534 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	461a      	mov	r2, r3
 80065c2:	2310      	movs	r3, #16
 80065c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d030      	beq.n	8006632 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	2b80      	cmp	r3, #128	; 0x80
 80065da:	d109      	bne.n	80065f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80065f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	3304      	adds	r3, #4
 8006604:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d108      	bne.n	8006620 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	b2db      	uxtb	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f00f f950 	bl	80158c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	2302      	movs	r3, #2
 8006630:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	461a      	mov	r2, r3
 800664a:	2320      	movs	r3, #32
 800664c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800666a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	3301      	adds	r3, #1
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	f47f af62 	bne.w	8006544 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f006 feb3 	bl	800d3f0 <USB_ReadInterrupts>
 800668a:	4603      	mov	r3, r0
 800668c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006694:	f040 80db 	bne.w	800684e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f006 fef5 	bl	800d48c <USB_ReadDevAllInEpInterrupt>
 80066a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80066a8:	e0cd      	b.n	8006846 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80c2 	beq.w	800683a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 ff1b 	bl	800d4fc <USB_ReadDevInEPInterrupt>
 80066c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d057      	beq.n	8006782 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	2201      	movs	r2, #1
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f2:	4013      	ands	r3, r2
 80066f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006702:	461a      	mov	r2, r3
 8006704:	2301      	movs	r3, #1
 8006706:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d132      	bne.n	8006776 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006714:	4613      	mov	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	334c      	adds	r3, #76	; 0x4c
 8006720:	6819      	ldr	r1, [r3, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4403      	add	r3, r0
 8006730:	3348      	adds	r3, #72	; 0x48
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4419      	add	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4403      	add	r3, r0
 8006744:	334c      	adds	r3, #76	; 0x4c
 8006746:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d113      	bne.n	8006776 <HAL_PCD_IRQHandler+0x3a2>
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	4613      	mov	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3354      	adds	r3, #84	; 0x54
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d108      	bne.n	8006776 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800676e:	461a      	mov	r2, r3
 8006770:	2101      	movs	r1, #1
 8006772:	f006 ff23 	bl	800d5bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f00f f81a 	bl	80157b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	2308      	movs	r3, #8
 800679c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	461a      	mov	r2, r3
 80067b6:	2310      	movs	r3, #16
 80067b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	461a      	mov	r2, r3
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d023      	beq.n	8006828 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80067e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067e2:	6a38      	ldr	r0, [r7, #32]
 80067e4:	f005 fdd6 	bl	800c394 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	3338      	adds	r3, #56	; 0x38
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d108      	bne.n	8006816 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	b2db      	uxtb	r3, r3
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f00f f867 	bl	80158e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	461a      	mov	r2, r3
 8006824:	2302      	movs	r3, #2
 8006826:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd08 	bl	800724a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	3301      	adds	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f af2e 	bne.w	80066aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f006 fdcc 	bl	800d3f0 <USB_ReadInterrupts>
 8006858:	4603      	mov	r3, r0
 800685a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800685e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006862:	d122      	bne.n	80068aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800687e:	2b01      	cmp	r3, #1
 8006880:	d108      	bne.n	8006894 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800688a:	2100      	movs	r1, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f00f f9e7 	bl	8015c60 <HAL_PCDEx_LPM_Callback>
 8006892:	e002      	b.n	800689a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f00f f805 	bl	80158a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80068a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f006 fd9e 	bl	800d3f0 <USB_ReadInterrupts>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d112      	bne.n	80068e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f00e ffc1 	bl	8015858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80068e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f006 fd80 	bl	800d3f0 <USB_ReadInterrupts>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fa:	d121      	bne.n	8006940 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800690a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d111      	bne.n	800693a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	089b      	lsrs	r3, r3, #2
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006930:	2101      	movs	r1, #1
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f00f f994 	bl	8015c60 <HAL_PCDEx_LPM_Callback>
 8006938:	e002      	b.n	8006940 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f00e ff8c 	bl	8015858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f006 fd53 	bl	800d3f0 <USB_ReadInterrupts>
 800694a:	4603      	mov	r3, r0
 800694c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	f040 80b7 	bne.w	8006ac6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2110      	movs	r1, #16
 8006972:	4618      	mov	r0, r3
 8006974:	f005 fd0e 	bl	800c394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697c:	e046      	b.n	8006a0c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	461a      	mov	r2, r3
 800698c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006990:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	3301      	adds	r3, #1
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d3b3      	bcc.n	800697e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a42:	f043 030b 	orr.w	r3, r3, #11
 8006a46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a58:	f043 030b 	orr.w	r3, r3, #11
 8006a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a5e:	e015      	b.n	8006a8c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f242 032b 	movw	r3, #8235	; 0x202b
 8006a74:	4313      	orrs	r3, r2
 8006a76:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a86:	f043 030b 	orr.w	r3, r3, #11
 8006a8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f006 fd83 	bl	800d5bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f006 fc90 	bl	800d3f0 <USB_ReadInterrupts>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ada:	d124      	bne.n	8006b26 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f006 fd47 	bl	800d574 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f005 fccf 	bl	800c48e <USB_GetDevSpeed>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681c      	ldr	r4, [r3, #0]
 8006afc:	f001 fad0 	bl	80080a0 <HAL_RCC_GetHCLKFreq>
 8006b00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f005 f9d4 	bl	800beb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f00e fe78 	bl	8015806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f006 fc60 	bl	800d3f0 <USB_ReadInterrupts>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d10a      	bne.n	8006b50 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f00e fe55 	bl	80157ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f002 0208 	and.w	r2, r2, #8
 8006b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f006 fc4b 	bl	800d3f0 <USB_ReadInterrupts>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d122      	bne.n	8006baa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b70:	2301      	movs	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	e014      	b.n	8006ba0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb27 	bl	80071e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d3e5      	bcc.n	8006b76 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f006 fc1e 	bl	800d3f0 <USB_ReadInterrupts>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d13b      	bne.n	8006c38 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc4:	e02b      	b.n	8006c1e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d115      	bne.n	8006c18 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da12      	bge.n	8006c18 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	333f      	adds	r3, #63	; 0x3f
 8006c02:	2201      	movs	r2, #1
 8006c04:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fae8 	bl	80071e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3ce      	bcc.n	8006bc6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f006 fbd7 	bl	800d3f0 <USB_ReadInterrupts>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4c:	d155      	bne.n	8006cfa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c4e:	2301      	movs	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e045      	b.n	8006ce0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d12e      	bne.n	8006cda <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da2b      	bge.n	8006cda <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006c8e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d121      	bne.n	8006cda <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006ca8:	2201      	movs	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd6:	6053      	str	r3, [r2, #4]
            break;
 8006cd8:	e007      	b.n	8006cea <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	3301      	adds	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d3b4      	bcc.n	8006c54 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f006 fb76 	bl	800d3f0 <USB_ReadInterrupts>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d10a      	bne.n	8006d26 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f00e fdf9 	bl	8015908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f006 fb60 	bl	800d3f0 <USB_ReadInterrupts>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d115      	bne.n	8006d66 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f00e fde9 	bl	8015924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6859      	ldr	r1, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	e000      	b.n	8006d66 <HAL_PCD_IRQHandler+0x992>
      return;
 8006d64:	bf00      	nop
    }
  }
}
 8006d66:	3734      	adds	r7, #52	; 0x34
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd90      	pop	{r4, r7, pc}

08006d6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_PCD_SetAddress+0x1a>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e013      	b.n	8006dae <HAL_PCD_SetAddress+0x42>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f006 fabe 	bl	800d320 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	70fb      	strb	r3, [r7, #3]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	803b      	strh	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	da0f      	bge.n	8006dfc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	3338      	adds	r3, #56	; 0x38
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4413      	add	r3, r2
 8006df0:	3304      	adds	r3, #4
 8006df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	705a      	strb	r2, [r3, #1]
 8006dfa:	e00f      	b.n	8006e1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	4613      	mov	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	3304      	adds	r3, #4
 8006e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e28:	883a      	ldrh	r2, [r7, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	78ba      	ldrb	r2, [r7, #2]
 8006e32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e46:	78bb      	ldrb	r3, [r7, #2]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d102      	bne.n	8006e52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_PCD_EP_Open+0xaa>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e00e      	b.n	8006e7e <HAL_PCD_EP_Open+0xc8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68f9      	ldr	r1, [r7, #12]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f005 fb32 	bl	800c4d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da0f      	bge.n	8006eba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3338      	adds	r3, #56	; 0x38
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	705a      	strb	r2, [r3, #1]
 8006eb8:	e00f      	b.n	8006eda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_PCD_EP_Close+0x6e>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e00e      	b.n	8006f12 <HAL_PCD_EP_Close+0x8c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f005 fb70 	bl	800c5e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	460b      	mov	r3, r1
 8006f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	4613      	mov	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	3304      	adds	r3, #4
 8006f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2200      	movs	r2, #0
 8006f54:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d102      	bne.n	8006f76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	f005 fe57 	bl	800cc40 <USB_EP0StartXfer>
 8006f92:	e008      	b.n	8006fa6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6979      	ldr	r1, [r7, #20]
 8006fa2:	f005 fbfd 	bl	800c7a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	f003 020f 	and.w	r2, r3, #15
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006fd2:	681b      	ldr	r3, [r3, #0]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	460b      	mov	r3, r1
 8006fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3338      	adds	r3, #56	; 0x38
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2200      	movs	r2, #0
 8007018:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2201      	movs	r2, #1
 800701e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	b2da      	uxtb	r2, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d102      	bne.n	800703a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	6979      	ldr	r1, [r7, #20]
 8007052:	f005 fdf5 	bl	800cc40 <USB_EP0StartXfer>
 8007056:	e008      	b.n	800706a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	f005 fb9b 	bl	800c7a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f003 020f 	and.w	r2, r3, #15
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	429a      	cmp	r2, r3
 800708c:	d901      	bls.n	8007092 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e050      	b.n	8007134 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da0f      	bge.n	80070ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	4613      	mov	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3338      	adds	r3, #56	; 0x38
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	3304      	adds	r3, #4
 80070b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	705a      	strb	r2, [r3, #1]
 80070b8:	e00d      	b.n	80070d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4613      	mov	r3, r2
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	3304      	adds	r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_PCD_EP_SetStall+0x82>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e01e      	b.n	8007134 <HAL_PCD_EP_SetStall+0xc0>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	4618      	mov	r0, r3
 8007106:	f006 f837 	bl	800d178 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	b2d9      	uxtb	r1, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007124:	461a      	mov	r2, r3
 8007126:	f006 fa49 	bl	800d5bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 020f 	and.w	r2, r3, #15
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d901      	bls.n	800715a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e042      	b.n	80071e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800715a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800715e:	2b00      	cmp	r3, #0
 8007160:	da0f      	bge.n	8007182 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	3338      	adds	r3, #56	; 0x38
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	3304      	adds	r3, #4
 8007178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	705a      	strb	r2, [r3, #1]
 8007180:	e00f      	b.n	80071a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	f003 020f 	and.w	r2, r3, #15
 8007188:	4613      	mov	r3, r2
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_PCD_EP_ClrStall+0x86>
 80071be:	2302      	movs	r3, #2
 80071c0:	e00e      	b.n	80071e0 <HAL_PCD_EP_ClrStall+0xa4>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f006 f83f 	bl	800d254 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80071f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da0c      	bge.n	8007216 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	f003 020f 	and.w	r2, r3, #15
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	3338      	adds	r3, #56	; 0x38
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4413      	add	r3, r2
 8007210:	3304      	adds	r3, #4
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e00c      	b.n	8007230 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	4613      	mov	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68f9      	ldr	r1, [r7, #12]
 8007236:	4618      	mov	r0, r3
 8007238:	f005 fe5e 	bl	800cef8 <USB_EPStopXfer>
 800723c:	4603      	mov	r3, r0
 800723e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007240:	7afb      	ldrb	r3, [r7, #11]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b08a      	sub	sp, #40	; 0x28
 800724e:	af02      	add	r7, sp, #8
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	3338      	adds	r3, #56	; 0x38
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	3304      	adds	r3, #4
 8007270:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1a      	ldr	r2, [r3, #32]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	d901      	bls.n	8007282 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e06c      	b.n	800735c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	429a      	cmp	r2, r3
 8007296:	d902      	bls.n	800729e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	3303      	adds	r3, #3
 80072a2:	089b      	lsrs	r3, r3, #2
 80072a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072a6:	e02b      	b.n	8007300 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d902      	bls.n	80072c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3303      	adds	r3, #3
 80072c8:	089b      	lsrs	r3, r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6919      	ldr	r1, [r3, #16]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f005 feb2 	bl	800d04c <USB_WritePacket>

    ep->xfer_buff  += len;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	441a      	add	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	b29b      	uxth	r3, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	429a      	cmp	r2, r3
 8007314:	d809      	bhi.n	800732a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800731e:	429a      	cmp	r2, r3
 8007320:	d203      	bcs.n	800732a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1be      	bne.n	80072a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	429a      	cmp	r2, r3
 8007334:	d811      	bhi.n	800735a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	2201      	movs	r2, #1
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	43db      	mvns	r3, r3
 8007350:	6939      	ldr	r1, [r7, #16]
 8007352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007356:	4013      	ands	r3, r2
 8007358:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	333c      	adds	r3, #60	; 0x3c
 800737c:	3304      	adds	r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d17b      	bne.n	8007492 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	4a61      	ldr	r2, [pc, #388]	; (800752c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	f240 80b9 	bls.w	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80b3 	beq.w	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	461a      	mov	r2, r3
 80073c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073cc:	6093      	str	r3, [r2, #8]
 80073ce:	e0a7      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	2320      	movs	r3, #32
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	e098      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 8093 	bne.w	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	4a4b      	ldr	r2, [pc, #300]	; (800752c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d90f      	bls.n	8007422 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	461a      	mov	r2, r3
 800741a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741e:	6093      	str	r3, [r2, #8]
 8007420:	e07e      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	0159      	lsls	r1, r3, #5
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	440b      	add	r3, r1
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d114      	bne.n	8007484 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800746c:	461a      	mov	r2, r3
 800746e:	2101      	movs	r1, #1
 8007470:	f006 f8a4 	bl	800d5bc <USB_EP0_OutStart>
 8007474:	e006      	b.n	8007484 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f00e f978 	bl	8015780 <HAL_PCD_DataOutStageCallback>
 8007490:	e046      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d124      	bne.n	80074e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074b6:	6093      	str	r3, [r2, #8]
 80074b8:	e032      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d0:	461a      	mov	r2, r3
 80074d2:	2320      	movs	r3, #32
 80074d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f00e f94f 	bl	8015780 <HAL_PCD_DataOutStageCallback>
 80074e2:	e01d      	b.n	8007520 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d114      	bne.n	8007514 <PCD_EP_OutXfrComplete_int+0x1b0>
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d108      	bne.n	8007514 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800750c:	461a      	mov	r2, r3
 800750e:	2100      	movs	r1, #0
 8007510:	f006 f854 	bl	800d5bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f00e f930 	bl	8015780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	4f54300a 	.word	0x4f54300a
 8007530:	4f54310a 	.word	0x4f54310a

08007534 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	333c      	adds	r3, #60	; 0x3c
 800754c:	3304      	adds	r3, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <PCD_EP_OutSetupPacket_int+0x88>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d90e      	bls.n	8007588 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	461a      	mov	r2, r3
 8007582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007586:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f00e f8e7 	bl	801575c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <PCD_EP_OutSetupPacket_int+0x88>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d90c      	bls.n	80075b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d108      	bne.n	80075b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075a8:	461a      	mov	r2, r3
 80075aa:	2101      	movs	r1, #1
 80075ac:	f006 f806 	bl	800d5bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	4f54300a 	.word	0x4f54300a

080075c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
 80075cc:	4613      	mov	r3, r2
 80075ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80075de:	883b      	ldrh	r3, [r7, #0]
 80075e0:	0419      	lsls	r1, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	629a      	str	r2, [r3, #40]	; 0x28
 80075ec:	e028      	b.n	8007640 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	0c1b      	lsrs	r3, r3, #16
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	4413      	add	r3, r2
 80075fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
 8007600:	e00d      	b.n	800761e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	3340      	adds	r3, #64	; 0x40
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4413      	add	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	3301      	adds	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	7bfa      	ldrb	r2, [r7, #15]
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	3b01      	subs	r3, #1
 8007624:	429a      	cmp	r2, r3
 8007626:	d3ec      	bcc.n	8007602 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007628:	883b      	ldrh	r3, [r7, #0]
 800762a:	0418      	lsls	r0, r3, #16
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	3b01      	subs	r3, #1
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	4302      	orrs	r2, r0
 8007638:	3340      	adds	r3, #64	; 0x40
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	10000003 	.word	0x10000003

080076b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c6:	6013      	str	r3, [r2, #0]
}
 80076c8:	bf00      	nop
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40007000 	.word	0x40007000

080076d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80076e2:	4b23      	ldr	r3, [pc, #140]	; (8007770 <HAL_PWREx_EnableOverDrive+0x98>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a22      	ldr	r2, [pc, #136]	; (8007770 <HAL_PWREx_EnableOverDrive+0x98>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b20      	ldr	r3, [pc, #128]	; (8007770 <HAL_PWREx_EnableOverDrive+0x98>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076fa:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007706:	f7fb fe89 	bl	800341c <HAL_GetTick>
 800770a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800770c:	e009      	b.n	8007722 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800770e:	f7fb fe85 	bl	800341c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800771c:	d901      	bls.n	8007722 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e022      	b.n	8007768 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772e:	d1ee      	bne.n	800770e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800773c:	f7fb fe6e 	bl	800341c <HAL_GetTick>
 8007740:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007742:	e009      	b.n	8007758 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007744:	f7fb fe6a 	bl	800341c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007752:	d901      	bls.n	8007758 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e007      	b.n	8007768 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_PWREx_EnableOverDrive+0x9c>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007764:	d1ee      	bne.n	8007744 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40023800 	.word	0x40023800
 8007774:	40007000 	.word	0x40007000

08007778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e291      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8087 	beq.w	80078aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800779c:	4b96      	ldr	r3, [pc, #600]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d00c      	beq.n	80077c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077a8:	4b93      	ldr	r3, [pc, #588]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 030c 	and.w	r3, r3, #12
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d112      	bne.n	80077da <HAL_RCC_OscConfig+0x62>
 80077b4:	4b90      	ldr	r3, [pc, #576]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077c0:	d10b      	bne.n	80077da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c2:	4b8d      	ldr	r3, [pc, #564]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d06c      	beq.n	80078a8 <HAL_RCC_OscConfig+0x130>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d168      	bne.n	80078a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e26b      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e2:	d106      	bne.n	80077f2 <HAL_RCC_OscConfig+0x7a>
 80077e4:	4b84      	ldr	r3, [pc, #528]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a83      	ldr	r2, [pc, #524]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	e02e      	b.n	8007850 <HAL_RCC_OscConfig+0xd8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10c      	bne.n	8007814 <HAL_RCC_OscConfig+0x9c>
 80077fa:	4b7f      	ldr	r3, [pc, #508]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7e      	ldr	r2, [pc, #504]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	4b7c      	ldr	r3, [pc, #496]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a7b      	ldr	r2, [pc, #492]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800780c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	e01d      	b.n	8007850 <HAL_RCC_OscConfig+0xd8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0xc0>
 800781e:	4b76      	ldr	r3, [pc, #472]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a75      	ldr	r2, [pc, #468]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4b73      	ldr	r3, [pc, #460]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a72      	ldr	r2, [pc, #456]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	e00b      	b.n	8007850 <HAL_RCC_OscConfig+0xd8>
 8007838:	4b6f      	ldr	r3, [pc, #444]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6e      	ldr	r2, [pc, #440]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800783e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	4b6c      	ldr	r3, [pc, #432]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a6b      	ldr	r2, [pc, #428]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800784a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800784e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d013      	beq.n	8007880 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007858:	f7fb fde0 	bl	800341c <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007860:	f7fb fddc 	bl	800341c <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	; 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e21f      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007872:	4b61      	ldr	r3, [pc, #388]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0xe8>
 800787e:	e014      	b.n	80078aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fb fdcc 	bl	800341c <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007888:	f7fb fdc8 	bl	800341c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b64      	cmp	r3, #100	; 0x64
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e20b      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800789a:	4b57      	ldr	r3, [pc, #348]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x110>
 80078a6:	e000      	b.n	80078aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d069      	beq.n	800798a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078b6:	4b50      	ldr	r3, [pc, #320]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078c2:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 030c 	and.w	r3, r3, #12
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d11c      	bne.n	8007908 <HAL_RCC_OscConfig+0x190>
 80078ce:	4b4a      	ldr	r3, [pc, #296]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d116      	bne.n	8007908 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078da:	4b47      	ldr	r3, [pc, #284]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_RCC_OscConfig+0x17a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d001      	beq.n	80078f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e1df      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f2:	4b41      	ldr	r3, [pc, #260]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	493d      	ldr	r1, [pc, #244]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007902:	4313      	orrs	r3, r2
 8007904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007906:	e040      	b.n	800798a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d023      	beq.n	8007958 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007910:	4b39      	ldr	r3, [pc, #228]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a38      	ldr	r2, [pc, #224]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fb fd7e 	bl	800341c <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007924:	f7fb fd7a 	bl	800341c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e1bd      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007936:	4b30      	ldr	r3, [pc, #192]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007942:	4b2d      	ldr	r3, [pc, #180]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	4929      	ldr	r1, [pc, #164]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007952:	4313      	orrs	r3, r2
 8007954:	600b      	str	r3, [r1, #0]
 8007956:	e018      	b.n	800798a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007958:	4b27      	ldr	r3, [pc, #156]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a26      	ldr	r2, [pc, #152]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7fb fd5a 	bl	800341c <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800796c:	f7fb fd56 	bl	800341c <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e199      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f0      	bne.n	800796c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d038      	beq.n	8007a08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d019      	beq.n	80079d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800799e:	4b16      	ldr	r3, [pc, #88]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80079a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079aa:	f7fb fd37 	bl	800341c <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b2:	f7fb fd33 	bl	800341c <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e176      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80079c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <HAL_RCC_OscConfig+0x23a>
 80079d0:	e01a      	b.n	8007a08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079d2:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80079d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d6:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079de:	f7fb fd1d 	bl	800341c <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e4:	e00a      	b.n	80079fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e6:	f7fb fd19 	bl	800341c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d903      	bls.n	80079fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e15c      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
 80079f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079fc:	4b91      	ldr	r3, [pc, #580]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 80079fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ee      	bne.n	80079e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80a4 	beq.w	8007b5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a16:	4b8b      	ldr	r3, [pc, #556]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a22:	4b88      	ldr	r3, [pc, #544]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	4a87      	ldr	r2, [pc, #540]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a2e:	4b85      	ldr	r3, [pc, #532]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a36:	60bb      	str	r3, [r7, #8]
 8007a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a3e:	4b82      	ldr	r3, [pc, #520]	; (8007c48 <HAL_RCC_OscConfig+0x4d0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d118      	bne.n	8007a7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <HAL_RCC_OscConfig+0x4d0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a7e      	ldr	r2, [pc, #504]	; (8007c48 <HAL_RCC_OscConfig+0x4d0>)
 8007a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a56:	f7fb fce1 	bl	800341c <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a5e:	f7fb fcdd 	bl	800341c <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b64      	cmp	r3, #100	; 0x64
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e120      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a70:	4b75      	ldr	r3, [pc, #468]	; (8007c48 <HAL_RCC_OscConfig+0x4d0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d106      	bne.n	8007a92 <HAL_RCC_OscConfig+0x31a>
 8007a84:	4b6f      	ldr	r3, [pc, #444]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4a6e      	ldr	r2, [pc, #440]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a90:	e02d      	b.n	8007aee <HAL_RCC_OscConfig+0x376>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10c      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x33c>
 8007a9a:	4b6a      	ldr	r3, [pc, #424]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	4a69      	ldr	r2, [pc, #420]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa6:	4b67      	ldr	r3, [pc, #412]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	4a66      	ldr	r2, [pc, #408]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007aac:	f023 0304 	bic.w	r3, r3, #4
 8007ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab2:	e01c      	b.n	8007aee <HAL_RCC_OscConfig+0x376>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b05      	cmp	r3, #5
 8007aba:	d10c      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x35e>
 8007abc:	4b61      	ldr	r3, [pc, #388]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac0:	4a60      	ldr	r2, [pc, #384]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ac2:	f043 0304 	orr.w	r3, r3, #4
 8007ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac8:	4b5e      	ldr	r3, [pc, #376]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a5d      	ldr	r2, [pc, #372]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad4:	e00b      	b.n	8007aee <HAL_RCC_OscConfig+0x376>
 8007ad6:	4b5b      	ldr	r3, [pc, #364]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	4a5a      	ldr	r2, [pc, #360]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae2:	4b58      	ldr	r3, [pc, #352]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	4a57      	ldr	r2, [pc, #348]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ae8:	f023 0304 	bic.w	r3, r3, #4
 8007aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d015      	beq.n	8007b22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af6:	f7fb fc91 	bl	800341c <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afc:	e00a      	b.n	8007b14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afe:	f7fb fc8d 	bl	800341c <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0ce      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b14:	4b4b      	ldr	r3, [pc, #300]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0ee      	beq.n	8007afe <HAL_RCC_OscConfig+0x386>
 8007b20:	e014      	b.n	8007b4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b22:	f7fb fc7b 	bl	800341c <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b28:	e00a      	b.n	8007b40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2a:	f7fb fc77 	bl	800341c <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e0b8      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b40:	4b40      	ldr	r3, [pc, #256]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1ee      	bne.n	8007b2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d105      	bne.n	8007b5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b52:	4b3c      	ldr	r3, [pc, #240]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	4a3b      	ldr	r2, [pc, #236]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80a4 	beq.w	8007cb0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b68:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 030c 	and.w	r3, r3, #12
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d06b      	beq.n	8007c4c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d149      	bne.n	8007c10 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7c:	4b31      	ldr	r3, [pc, #196]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a30      	ldr	r2, [pc, #192]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fb fc48 	bl	800341c <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fb fc44 	bl	800341c <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e087      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba2:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69da      	ldr	r2, [r3, #28]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	061b      	lsls	r3, r3, #24
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fb fc18 	bl	800341c <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf0:	f7fb fc14 	bl	800341c <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e057      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x478>
 8007c0e:	e04f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fb fbfe 	bl	800341c <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c24:	f7fb fbfa 	bl	800341c <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e03d      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <HAL_RCC_OscConfig+0x4cc>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f0      	bne.n	8007c24 <HAL_RCC_OscConfig+0x4ac>
 8007c42:	e035      	b.n	8007cb0 <HAL_RCC_OscConfig+0x538>
 8007c44:	40023800 	.word	0x40023800
 8007c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <HAL_RCC_OscConfig+0x544>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d028      	beq.n	8007cac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d121      	bne.n	8007cac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d11a      	bne.n	8007cac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d111      	bne.n	8007cac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	3b01      	subs	r3, #1
 8007c96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d107      	bne.n	8007cac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d001      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800

08007cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0d0      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd8:	4b6a      	ldr	r3, [pc, #424]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d910      	bls.n	8007d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce6:	4b67      	ldr	r3, [pc, #412]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f023 020f 	bic.w	r2, r3, #15
 8007cee:	4965      	ldr	r1, [pc, #404]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf6:	4b63      	ldr	r3, [pc, #396]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d001      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0b8      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d020      	beq.n	8007d56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d20:	4b59      	ldr	r3, [pc, #356]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	4a58      	ldr	r2, [pc, #352]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0308 	and.w	r3, r3, #8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d38:	4b53      	ldr	r3, [pc, #332]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4a52      	ldr	r2, [pc, #328]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d44:	4b50      	ldr	r3, [pc, #320]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	494d      	ldr	r1, [pc, #308]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d040      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d107      	bne.n	8007d7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6a:	4b47      	ldr	r3, [pc, #284]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d115      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e07f      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d107      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d82:	4b41      	ldr	r3, [pc, #260]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e073      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d92:	4b3d      	ldr	r3, [pc, #244]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e06b      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 0203 	bic.w	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4936      	ldr	r1, [pc, #216]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db4:	f7fb fb32 	bl	800341c <HAL_GetTick>
 8007db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dba:	e00a      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dbc:	f7fb fb2e 	bl	800341c <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e053      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd2:	4b2d      	ldr	r3, [pc, #180]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 020c 	and.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d1eb      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007de4:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d210      	bcs.n	8007e14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 020f 	bic.w	r2, r3, #15
 8007dfa:	4922      	ldr	r1, [pc, #136]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e02:	4b20      	ldr	r3, [pc, #128]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e032      	b.n	8007e7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d008      	beq.n	8007e32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e20:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	4916      	ldr	r1, [pc, #88]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	490e      	ldr	r1, [pc, #56]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e52:	f000 f821 	bl	8007e98 <HAL_RCC_GetSysClockFreq>
 8007e56:	4602      	mov	r2, r0
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	490a      	ldr	r1, [pc, #40]	; (8007e8c <HAL_RCC_ClockConfig+0x1cc>)
 8007e64:	5ccb      	ldrb	r3, [r1, r3]
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <HAL_RCC_ClockConfig+0x1d0>)
 8007e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <HAL_RCC_ClockConfig+0x1d4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fb fa8e 	bl	8003394 <HAL_InitTick>

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40023c00 	.word	0x40023c00
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	08019e58 	.word	0x08019e58
 8007e90:	20000000 	.word	0x20000000
 8007e94:	20000004 	.word	0x20000004

08007e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e9c:	b094      	sub	sp, #80	; 0x50
 8007e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eb0:	4b79      	ldr	r3, [pc, #484]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 030c 	and.w	r3, r3, #12
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d00d      	beq.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	f200 80e1 	bhi.w	8008084 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_RCC_GetSysClockFreq+0x34>
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d003      	beq.n	8007ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007eca:	e0db      	b.n	8008084 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ecc:	4b73      	ldr	r3, [pc, #460]	; (800809c <HAL_RCC_GetSysClockFreq+0x204>)
 8007ece:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ed0:	e0db      	b.n	800808a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ed2:	4b72      	ldr	r3, [pc, #456]	; (800809c <HAL_RCC_GetSysClockFreq+0x204>)
 8007ed4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ed6:	e0d8      	b.n	800808a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed8:	4b6f      	ldr	r3, [pc, #444]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ee0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007ee2:	4b6d      	ldr	r3, [pc, #436]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d063      	beq.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eee:	4b6a      	ldr	r3, [pc, #424]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	099b      	lsrs	r3, r3, #6
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	633b      	str	r3, [r7, #48]	; 0x30
 8007f02:	2300      	movs	r3, #0
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
 8007f06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	f04f 0000 	mov.w	r0, #0
 8007f12:	f04f 0100 	mov.w	r1, #0
 8007f16:	0159      	lsls	r1, r3, #5
 8007f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f1c:	0150      	lsls	r0, r2, #5
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4621      	mov	r1, r4
 8007f24:	1a51      	subs	r1, r2, r1
 8007f26:	6139      	str	r1, [r7, #16]
 8007f28:	4629      	mov	r1, r5
 8007f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f3c:	4659      	mov	r1, fp
 8007f3e:	018b      	lsls	r3, r1, #6
 8007f40:	4651      	mov	r1, sl
 8007f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f46:	4651      	mov	r1, sl
 8007f48:	018a      	lsls	r2, r1, #6
 8007f4a:	4651      	mov	r1, sl
 8007f4c:	ebb2 0801 	subs.w	r8, r2, r1
 8007f50:	4659      	mov	r1, fp
 8007f52:	eb63 0901 	sbc.w	r9, r3, r1
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f6a:	4690      	mov	r8, r2
 8007f6c:	4699      	mov	r9, r3
 8007f6e:	4623      	mov	r3, r4
 8007f70:	eb18 0303 	adds.w	r3, r8, r3
 8007f74:	60bb      	str	r3, [r7, #8]
 8007f76:	462b      	mov	r3, r5
 8007f78:	eb49 0303 	adc.w	r3, r9, r3
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	028b      	lsls	r3, r1, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f94:	4621      	mov	r1, r4
 8007f96:	028a      	lsls	r2, r1, #10
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fa8:	f7f8 fe1e 	bl	8000be8 <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb4:	e058      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fb6:	4b38      	ldr	r3, [pc, #224]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	099b      	lsrs	r3, r3, #6
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fc6:	623b      	str	r3, [r7, #32]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
 8007fcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	f04f 0000 	mov.w	r0, #0
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	0159      	lsls	r1, r3, #5
 8007fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fe2:	0150      	lsls	r0, r2, #5
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4641      	mov	r1, r8
 8007fea:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fee:	4649      	mov	r1, r9
 8007ff0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008000:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008004:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008008:	ebb2 040a 	subs.w	r4, r2, sl
 800800c:	eb63 050b 	sbc.w	r5, r3, fp
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	00eb      	lsls	r3, r5, #3
 800801a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800801e:	00e2      	lsls	r2, r4, #3
 8008020:	4614      	mov	r4, r2
 8008022:	461d      	mov	r5, r3
 8008024:	4643      	mov	r3, r8
 8008026:	18e3      	adds	r3, r4, r3
 8008028:	603b      	str	r3, [r7, #0]
 800802a:	464b      	mov	r3, r9
 800802c:	eb45 0303 	adc.w	r3, r5, r3
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800803e:	4629      	mov	r1, r5
 8008040:	028b      	lsls	r3, r1, #10
 8008042:	4621      	mov	r1, r4
 8008044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008048:	4621      	mov	r1, r4
 800804a:	028a      	lsls	r2, r1, #10
 800804c:	4610      	mov	r0, r2
 800804e:	4619      	mov	r1, r3
 8008050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008052:	2200      	movs	r2, #0
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	61fa      	str	r2, [r7, #28]
 8008058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800805c:	f7f8 fdc4 	bl	8000be8 <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4613      	mov	r3, r2
 8008066:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <HAL_RCC_GetSysClockFreq+0x200>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	3301      	adds	r3, #1
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008082:	e002      	b.n	800808a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <HAL_RCC_GetSysClockFreq+0x204>)
 8008086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800808a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800808c:	4618      	mov	r0, r3
 800808e:	3750      	adds	r7, #80	; 0x50
 8008090:	46bd      	mov	sp, r7
 8008092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008096:	bf00      	nop
 8008098:	40023800 	.word	0x40023800
 800809c:	00f42400 	.word	0x00f42400

080080a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080a4:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80080a6:	681b      	ldr	r3, [r3, #0]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000000 	.word	0x20000000

080080b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080bc:	f7ff fff0 	bl	80080a0 <HAL_RCC_GetHCLKFreq>
 80080c0:	4602      	mov	r2, r0
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	0a9b      	lsrs	r3, r3, #10
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	4903      	ldr	r1, [pc, #12]	; (80080dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ce:	5ccb      	ldrb	r3, [r1, r3]
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40023800 	.word	0x40023800
 80080dc:	08019e68 	.word	0x08019e68

080080e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080e4:	f7ff ffdc 	bl	80080a0 <HAL_RCC_GetHCLKFreq>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	0b5b      	lsrs	r3, r3, #13
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	4903      	ldr	r1, [pc, #12]	; (8008104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080f6:	5ccb      	ldrb	r3, [r1, r3]
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40023800 	.word	0x40023800
 8008104:	08019e68 	.word	0x08019e68

08008108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d012      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008130:	4b69      	ldr	r3, [pc, #420]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4a68      	ldr	r2, [pc, #416]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008136:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800813a:	6093      	str	r3, [r2, #8]
 800813c:	4b66      	ldr	r3, [pc, #408]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	4964      	ldr	r1, [pc, #400]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008152:	2301      	movs	r3, #1
 8008154:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d017      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008162:	4b5d      	ldr	r3, [pc, #372]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008170:	4959      	ldr	r1, [pc, #356]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008172:	4313      	orrs	r3, r2
 8008174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008180:	d101      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008182:	2301      	movs	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800818e:	2301      	movs	r3, #1
 8008190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d017      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800819e:	4b4e      	ldr	r3, [pc, #312]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	494a      	ldr	r1, [pc, #296]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081bc:	d101      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80081be:	2301      	movs	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80081ca:	2301      	movs	r3, #1
 80081cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 808b 	beq.w	8008302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081ec:	4b3a      	ldr	r3, [pc, #232]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	4a39      	ldr	r2, [pc, #228]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f6:	6413      	str	r3, [r2, #64]	; 0x40
 80081f8:	4b37      	ldr	r3, [pc, #220]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008200:	60bb      	str	r3, [r7, #8]
 8008202:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008204:	4b35      	ldr	r3, [pc, #212]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a34      	ldr	r2, [pc, #208]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800820a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008210:	f7fb f904 	bl	800341c <HAL_GetTick>
 8008214:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008216:	e008      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008218:	f7fb f900 	bl	800341c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b64      	cmp	r3, #100	; 0x64
 8008224:	d901      	bls.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e31f      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800822a:	4b2c      	ldr	r3, [pc, #176]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f0      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008236:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d035      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	429a      	cmp	r2, r3
 8008252:	d02e      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008254:	4b20      	ldr	r3, [pc, #128]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800825c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800825e:	4b1e      	ldr	r3, [pc, #120]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008268:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a1a      	ldr	r2, [pc, #104]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800827c:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b01      	cmp	r3, #1
 8008286:	d114      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008288:	f7fb f8c8 	bl	800341c <HAL_GetTick>
 800828c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828e:	e00a      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008290:	f7fb f8c4 	bl	800341c <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	; 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e2e1      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0ee      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082be:	d111      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80082ce:	400b      	ands	r3, r1
 80082d0:	4901      	ldr	r1, [pc, #4]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	608b      	str	r3, [r1, #8]
 80082d6:	e00b      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80082d8:	40023800 	.word	0x40023800
 80082dc:	40007000 	.word	0x40007000
 80082e0:	0ffffcff 	.word	0x0ffffcff
 80082e4:	4ba8      	ldr	r3, [pc, #672]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4aa7      	ldr	r2, [pc, #668]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082ee:	6093      	str	r3, [r2, #8]
 80082f0:	4ba5      	ldr	r3, [pc, #660]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082fc:	49a2      	ldr	r1, [pc, #648]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b00      	cmp	r3, #0
 800830c:	d010      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800830e:	4b9e      	ldr	r3, [pc, #632]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008314:	4a9c      	ldr	r2, [pc, #624]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800831a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800831e:	4b9a      	ldr	r3, [pc, #616]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008320:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	4997      	ldr	r1, [pc, #604]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800833c:	4b92      	ldr	r3, [pc, #584]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800834a:	498f      	ldr	r1, [pc, #572]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800835e:	4b8a      	ldr	r3, [pc, #552]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800836c:	4986      	ldr	r1, [pc, #536]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008380:	4b81      	ldr	r3, [pc, #516]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800838e:	497e      	ldr	r1, [pc, #504]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083a2:	4b79      	ldr	r3, [pc, #484]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	4975      	ldr	r1, [pc, #468]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083c4:	4b70      	ldr	r3, [pc, #448]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ca:	f023 0203 	bic.w	r2, r3, #3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	496d      	ldr	r1, [pc, #436]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083e6:	4b68      	ldr	r3, [pc, #416]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ec:	f023 020c 	bic.w	r2, r3, #12
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f4:	4964      	ldr	r1, [pc, #400]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008408:	4b5f      	ldr	r3, [pc, #380]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	495c      	ldr	r1, [pc, #368]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008418:	4313      	orrs	r3, r2
 800841a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800842a:	4b57      	ldr	r3, [pc, #348]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008430:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008438:	4953      	ldr	r1, [pc, #332]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800844c:	4b4e      	ldr	r3, [pc, #312]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845a:	494b      	ldr	r1, [pc, #300]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800845c:	4313      	orrs	r3, r2
 800845e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800846e:	4b46      	ldr	r3, [pc, #280]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008474:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847c:	4942      	ldr	r1, [pc, #264]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800847e:	4313      	orrs	r3, r2
 8008480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008490:	4b3d      	ldr	r3, [pc, #244]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849e:	493a      	ldr	r1, [pc, #232]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80084b2:	4b35      	ldr	r3, [pc, #212]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c0:	4931      	ldr	r1, [pc, #196]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084d4:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e2:	4929      	ldr	r1, [pc, #164]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d011      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80084f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008504:	4920      	ldr	r1, [pc, #128]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008514:	d101      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008516:	2301      	movs	r3, #1
 8008518:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008526:	4b18      	ldr	r3, [pc, #96]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008534:	4914      	ldr	r1, [pc, #80]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008536:	4313      	orrs	r3, r2
 8008538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800854a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008558:	490b      	ldr	r1, [pc, #44]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d006      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 80d8 	beq.w	8008724 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008574:	4b04      	ldr	r3, [pc, #16]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a03      	ldr	r2, [pc, #12]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800857a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800857e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008580:	f7fa ff4c 	bl	800341c <HAL_GetTick>
 8008584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008586:	e00a      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008588:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800858c:	f7fa ff46 	bl	800341c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b64      	cmp	r3, #100	; 0x64
 8008598:	d901      	bls.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e165      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800859e:	4ba9      	ldr	r3, [pc, #676]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d021      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d11d      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085be:	4ba1      	ldr	r3, [pc, #644]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085cc:	4b9d      	ldr	r3, [pc, #628]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d2:	0e1b      	lsrs	r3, r3, #24
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	019a      	lsls	r2, r3, #6
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	041b      	lsls	r3, r3, #16
 80085e4:	431a      	orrs	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	061b      	lsls	r3, r3, #24
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	4994      	ldr	r1, [pc, #592]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800860e:	d00a      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008618:	2b00      	cmp	r3, #0
 800861a:	d02e      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008624:	d129      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008626:	4b87      	ldr	r3, [pc, #540]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800862c:	0c1b      	lsrs	r3, r3, #16
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008634:	4b83      	ldr	r3, [pc, #524]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800863a:	0f1b      	lsrs	r3, r3, #28
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	019a      	lsls	r2, r3, #6
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	041b      	lsls	r3, r3, #16
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	071b      	lsls	r3, r3, #28
 800865a:	497a      	ldr	r1, [pc, #488]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008662:	4b78      	ldr	r3, [pc, #480]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008668:	f023 021f 	bic.w	r2, r3, #31
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	3b01      	subs	r3, #1
 8008672:	4974      	ldr	r1, [pc, #464]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01d      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008686:	4b6f      	ldr	r3, [pc, #444]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800868c:	0e1b      	lsrs	r3, r3, #24
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008694:	4b6b      	ldr	r3, [pc, #428]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800869a:	0f1b      	lsrs	r3, r3, #28
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	019a      	lsls	r2, r3, #6
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	431a      	orrs	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	061b      	lsls	r3, r3, #24
 80086b4:	431a      	orrs	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	071b      	lsls	r3, r3, #28
 80086ba:	4962      	ldr	r1, [pc, #392]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d011      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	019a      	lsls	r2, r3, #6
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	071b      	lsls	r3, r3, #28
 80086ea:	4956      	ldr	r1, [pc, #344]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086f2:	4b54      	ldr	r3, [pc, #336]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a53      	ldr	r2, [pc, #332]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fe:	f7fa fe8d 	bl	800341c <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008704:	e008      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008706:	f7fa fe89 	bl	800341c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b64      	cmp	r3, #100	; 0x64
 8008712:	d901      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e0a8      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008718:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	2b01      	cmp	r3, #1
 8008728:	f040 809e 	bne.w	8008868 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800872c:	4b45      	ldr	r3, [pc, #276]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a44      	ldr	r2, [pc, #272]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008738:	f7fa fe70 	bl	800341c <HAL_GetTick>
 800873c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800873e:	e008      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008740:	f7fa fe6c 	bl	800341c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b64      	cmp	r3, #100	; 0x64
 800874c:	d901      	bls.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e08b      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008752:	4b3c      	ldr	r3, [pc, #240]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800875e:	d0ef      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d009      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800877c:	2b00      	cmp	r3, #0
 800877e:	d02e      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d12a      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008788:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800878a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008796:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879c:	0f1b      	lsrs	r3, r3, #28
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	019a      	lsls	r2, r3, #6
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	071b      	lsls	r3, r3, #28
 80087bc:	4921      	ldr	r1, [pc, #132]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80087c4:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80087c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	3b01      	subs	r3, #1
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	491b      	ldr	r1, [pc, #108]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d022      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f2:	d11d      	bne.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80087f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fa:	0e1b      	lsrs	r3, r3, #24
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008808:	0f1b      	lsrs	r3, r3, #28
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	019a      	lsls	r2, r3, #6
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	431a      	orrs	r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	061b      	lsls	r3, r3, #24
 8008822:	431a      	orrs	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	071b      	lsls	r3, r3, #28
 8008828:	4906      	ldr	r1, [pc, #24]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008830:	4b04      	ldr	r3, [pc, #16]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a03      	ldr	r2, [pc, #12]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800883c:	f7fa fdee 	bl	800341c <HAL_GetTick>
 8008840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008842:	e00a      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x752>
 8008844:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008848:	f7fa fde8 	bl	800341c <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b64      	cmp	r3, #100	; 0x64
 8008854:	d901      	bls.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e007      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008866:	d1ef      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40023800 	.word	0x40023800

08008878 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e022      	b.n	80088d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d105      	bne.n	80088a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fa f9b5 	bl	8002c0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f814 	bl	80088d8 <HAL_SD_InitCard>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e00a      	b.n	80088d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088d8:	b5b0      	push	{r4, r5, r7, lr}
 80088da:	b08e      	sub	sp, #56	; 0x38
 80088dc:	af04      	add	r7, sp, #16
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80088f4:	2376      	movs	r3, #118	; 0x76
 80088f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681d      	ldr	r5, [r3, #0]
 80088fc:	466c      	mov	r4, sp
 80088fe:	f107 0314 	add.w	r3, r7, #20
 8008902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800890a:	f107 0308 	add.w	r3, r7, #8
 800890e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008910:	4628      	mov	r0, r5
 8008912:	f002 fd47 	bl	800b3a4 <SDMMC_Init>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800891c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e059      	b.n	80089dc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008936:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f002 fd7b 	bl	800b438 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008950:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008952:	2002      	movs	r0, #2
 8008954:	f7fa fd6e 	bl	8003434 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 ff59 	bl	8009810 <SD_PowerON>
 800895e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00b      	beq.n	800897e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e02e      	b.n	80089dc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fe78 	bl	8009674 <SD_InitCard>
 8008984:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e01b      	b.n	80089dc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089ac:	4618      	mov	r0, r3
 80089ae:	f002 fdd5 	bl	800b55c <SDMMC_CmdBlockLength>
 80089b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <HAL_SD_InitCard+0x10c>)
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3728      	adds	r7, #40	; 0x28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bdb0      	pop	{r4, r5, r7, pc}
 80089e4:	004005ff 	.word	0x004005ff

080089e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08c      	sub	sp, #48	; 0x30
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d107      	bne.n	8008a10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e0c3      	b.n	8008b98 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	f040 80bc 	bne.w	8008b96 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d907      	bls.n	8008a42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e0aa      	b.n	8008b98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2203      	movs	r2, #3
 8008a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	4a4e      	ldr	r2, [pc, #312]	; (8008ba0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	4a4d      	ldr	r2, [pc, #308]	; (8008ba4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008a70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2200      	movs	r2, #0
 8008a78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2200      	movs	r2, #0
 8008a80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3380      	adds	r3, #128	; 0x80
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	025b      	lsls	r3, r3, #9
 8008ab0:	089b      	lsrs	r3, r3, #2
 8008ab2:	f7fb f937 	bl	8003d24 <HAL_DMA_Start_IT>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d017      	beq.n	8008aec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008aca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a35      	ldr	r2, [pc, #212]	; (8008ba8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e055      	b.n	8008b98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0208 	orr.w	r2, r2, #8
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d002      	beq.n	8008b0a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	025b      	lsls	r3, r3, #9
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	025b      	lsls	r3, r3, #9
 8008b14:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b16:	2390      	movs	r3, #144	; 0x90
 8008b18:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b22:	2301      	movs	r3, #1
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f107 0210 	add.w	r2, r7, #16
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 fce7 	bl	800b504 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d90a      	bls.n	8008b52 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2282      	movs	r2, #130	; 0x82
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fd4b 	bl	800b5e4 <SDMMC_CmdReadMultiBlock>
 8008b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b50:	e009      	b.n	8008b66 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2281      	movs	r2, #129	; 0x81
 8008b56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 fd1e 	bl	800b5a0 <SDMMC_CmdReadSingleBlock>
 8008b64:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d012      	beq.n	8008b92 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0d      	ldr	r2, [pc, #52]	; (8008ba8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e002      	b.n	8008b98 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e000      	b.n	8008b98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b96:	2302      	movs	r3, #2
  }
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3730      	adds	r7, #48	; 0x30
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	08009483 	.word	0x08009483
 8008ba4:	080094f5 	.word	0x080094f5
 8008ba8:	004005ff 	.word	0x004005ff

08008bac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	; 0x30
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0c6      	b.n	8008d62 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	f040 80bf 	bne.w	8008d60 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d907      	bls.n	8008c06 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e0ad      	b.n	8008d62 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2203      	movs	r2, #3
 8008c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 021a 	orr.w	r2, r2, #26
 8008c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	4a50      	ldr	r2, [pc, #320]	; (8008d6c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	4a4f      	ldr	r2, [pc, #316]	; (8008d70 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d002      	beq.n	8008c4c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	025b      	lsls	r3, r3, #9
 8008c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d90a      	bls.n	8008c68 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	22a0      	movs	r2, #160	; 0xa0
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fd04 	bl	800b66c <SDMMC_CmdWriteMultiBlock>
 8008c64:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008c66:	e009      	b.n	8008c7c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2290      	movs	r2, #144	; 0x90
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c74:	4618      	mov	r0, r3
 8008c76:	f002 fcd7 	bl	800b628 <SDMMC_CmdWriteSingleBlock>
 8008c7a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d012      	beq.n	8008ca8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a3b      	ldr	r2, [pc, #236]	; (8008d74 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e05c      	b.n	8008d62 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0208 	orr.w	r2, r2, #8
 8008cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	2240      	movs	r2, #64	; 0x40
 8008cbe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3380      	adds	r3, #128	; 0x80
 8008ce8:	461a      	mov	r2, r3
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	025b      	lsls	r3, r3, #9
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	f7fb f818 	bl	8003d24 <HAL_DMA_Start_IT>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01a      	beq.n	8008d30 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 021a 	bic.w	r2, r2, #26
 8008d08:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008d10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e018      	b.n	8008d62 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	025b      	lsls	r3, r3, #9
 8008d3a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d3c:	2390      	movs	r3, #144	; 0x90
 8008d3e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f107 0210 	add.w	r2, r7, #16
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 fbd4 	bl	800b504 <SDMMC_ConfigData>

      return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e000      	b.n	8008d62 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d60:	2302      	movs	r3, #2
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3730      	adds	r7, #48	; 0x30
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	08009459 	.word	0x08009459
 8008d70:	080094f5 	.word	0x080094f5
 8008d74:	004005ff 	.word	0x004005ff

08008d78 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_SD_IRQHandler+0x2e>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fdec 	bl	800997c <SD_Read_IT>
 8008da4:	e15a      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 808d 	beq.w	8008ed0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b9a      	ldr	r3, [pc, #616]	; (8009034 <HAL_SD_IRQHandler+0x2bc>)
 8008dcc:	400b      	ands	r3, r1
 8008dce:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0201 	bic.w	r2, r2, #1
 8008dde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d039      	beq.n	8008e5e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_SD_IRQHandler+0x86>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d011      	beq.n	8008e22 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 fc54 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 8008e08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f921 	bl	8009064 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_SD_IRQHandler+0xd6>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f005 fa98 	bl	800e384 <HAL_SD_RxCpltCallback>
 8008e54:	e102      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f005 fa8a 	bl	800e370 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e5c:	e0fe      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80f9 	beq.w	800905c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d011      	beq.n	8008e98 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fc19 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 8008e7e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f8e6 	bl	8009064 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f040 80dc 	bne.w	800905c <HAL_SD_IRQHandler+0x2e4>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 80d6 	bne.w	800905c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0208 	bic.w	r2, r2, #8
 8008ebe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f005 fa51 	bl	800e370 <HAL_SD_TxCpltCallback>
}
 8008ece:	e0c5      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <HAL_SD_IRQHandler+0x178>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fd98 	bl	8009a1e <SD_Write_IT>
 8008eee:	e0b5      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80ae 	beq.w	800905c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	f043 0202 	orr.w	r2, r3, #2
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f043 0208 	orr.w	r2, r3, #8
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f043 0220 	orr.w	r2, r3, #32
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	f043 0210 	orr.w	r2, r3, #16
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f80:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 fb92 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f857 	bl	8009064 <HAL_SD_ErrorCallback>
}
 8008fb6:	e051      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d04c      	beq.n	800905c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <HAL_SD_IRQHandler+0x25e>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d011      	beq.n	8008ffa <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <HAL_SD_IRQHandler+0x2c0>)
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fa fefe 	bl	8003de4 <HAL_DMA_Abort_IT>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d036      	beq.n	800905c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fad0 	bl	8009598 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ff8:	e030      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <HAL_SD_IRQHandler+0x296>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d018      	beq.n	8009040 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <HAL_SD_IRQHandler+0x2c4>)
 8009014:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	4618      	mov	r0, r3
 800901c:	f7fa fee2 	bl	8003de4 <HAL_DMA_Abort_IT>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d01a      	beq.n	800905c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	4618      	mov	r0, r3
 800902c:	f000 faeb 	bl	8009606 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009030:	e014      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
 8009032:	bf00      	nop
 8009034:	ffff3ec5 	.word	0xffff3ec5
 8009038:	08009599 	.word	0x08009599
 800903c:	08009607 	.word	0x08009607
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f005 f981 	bl	800e35c <HAL_SD_AbortCallback>
}
 800905a:	e7ff      	b.n	800905c <HAL_SD_IRQHandler+0x2e4>
 800905c:	bf00      	nop
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009086:	0f9b      	lsrs	r3, r3, #30
 8009088:	b2da      	uxtb	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009092:	0e9b      	lsrs	r3, r3, #26
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a4:	0e1b      	lsrs	r3, r3, #24
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b6:	0c1b      	lsrs	r3, r3, #16
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d8:	0d1b      	lsrs	r3, r3, #20
 80090da:	b29a      	uxth	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090f6:	0bdb      	lsrs	r3, r3, #15
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009108:	0b9b      	lsrs	r3, r3, #14
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911a:	0b5b      	lsrs	r3, r3, #13
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	b2da      	uxtb	r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912c:	0b1b      	lsrs	r3, r3, #12
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	b2da      	uxtb	r2, r3
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	2b00      	cmp	r3, #0
 8009146:	d163      	bne.n	8009210 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800914c:	009a      	lsls	r2, r3, #2
 800914e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009152:	4013      	ands	r3, r2
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009158:	0f92      	lsrs	r2, r2, #30
 800915a:	431a      	orrs	r2, r3
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009164:	0edb      	lsrs	r3, r3, #27
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	b2da      	uxtb	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009176:	0e1b      	lsrs	r3, r3, #24
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	b2da      	uxtb	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009188:	0d5b      	lsrs	r3, r3, #21
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	b2da      	uxtb	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919a:	0c9b      	lsrs	r3, r3, #18
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ac:	0bdb      	lsrs	r3, r3, #15
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	7e1b      	ldrb	r3, [r3, #24]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	3302      	adds	r3, #2
 80091d0:	2201      	movs	r2, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091da:	fb03 f202 	mul.w	r2, r3, r2
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	7a1b      	ldrb	r3, [r3, #8]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 030f 	and.w	r3, r3, #15
 80091ec:	2201      	movs	r2, #1
 80091ee:	409a      	lsls	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80091fc:	0a52      	lsrs	r2, r2, #9
 80091fe:	fb03 f202 	mul.w	r2, r3, r2
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800920c:	661a      	str	r2, [r3, #96]	; 0x60
 800920e:	e031      	b.n	8009274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009214:	2b01      	cmp	r3, #1
 8009216:	d11d      	bne.n	8009254 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	0c1b      	lsrs	r3, r3, #16
 8009228:	431a      	orrs	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	3301      	adds	r3, #1
 8009234:	029a      	lsls	r2, r3, #10
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009248:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	661a      	str	r2, [r3, #96]	; 0x60
 8009252:	e00f      	b.n	8009274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a58      	ldr	r2, [pc, #352]	; (80093bc <HAL_SD_GetCardCSD+0x344>)
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e09d      	b.n	80093b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009278:	0b9b      	lsrs	r3, r3, #14
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	09db      	lsrs	r3, r3, #7
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009292:	b2da      	uxtb	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ac:	0fdb      	lsrs	r3, r3, #31
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b8:	0f5b      	lsrs	r3, r3, #29
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	0e9b      	lsrs	r3, r3, #26
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0307 	and.w	r3, r3, #7
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	0d9b      	lsrs	r3, r3, #22
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	0d5b      	lsrs	r3, r3, #21
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931e:	0bdb      	lsrs	r3, r3, #15
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	0b9b      	lsrs	r3, r3, #14
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009346:	0b5b      	lsrs	r3, r3, #13
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	0b1b      	lsrs	r3, r3, #12
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	0a9b      	lsrs	r3, r3, #10
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	b2da      	uxtb	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	085b      	lsrs	r3, r3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	004005ff 	.word	0x004005ff

080093c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009424:	f107 030c 	add.w	r3, r7, #12
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa7e 	bl	800992c <SD_SendStatus>
 8009430:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	0a5b      	lsrs	r3, r3, #9
 8009448:	f003 030f 	and.w	r3, r3, #15
 800944c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800944e:	693b      	ldr	r3, [r7, #16]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009474:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	2b82      	cmp	r3, #130	; 0x82
 8009496:	d111      	bne.n	80094bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f002 f907 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 80094a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d008      	beq.n	80094bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fdd4 	bl	8009064 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0208 	bic.w	r2, r2, #8
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f004 ff4d 	bl	800e384 <HAL_SD_RxCpltCallback>
#endif
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7fa fe1a 	bl	800413c <HAL_DMA_GetError>
 8009508:	4603      	mov	r3, r0
 800950a:	2b02      	cmp	r3, #2
 800950c:	d03e      	beq.n	800958c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009514:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d002      	beq.n	800952a <SD_DMAError+0x36>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d12d      	bne.n	8009586 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a19      	ldr	r2, [pc, #100]	; (8009594 <SD_DMAError+0xa0>)
 8009530:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009540:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800954e:	6978      	ldr	r0, [r7, #20]
 8009550:	f7ff ff62 	bl	8009418 <HAL_SD_GetCardState>
 8009554:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b06      	cmp	r3, #6
 800955a:	d002      	beq.n	8009562 <SD_DMAError+0x6e>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b05      	cmp	r3, #5
 8009560:	d10a      	bne.n	8009578 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4618      	mov	r0, r3
 8009568:	f002 f8a2 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 800956c:	4602      	mov	r2, r0
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	431a      	orrs	r2, r3
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009586:	6978      	ldr	r0, [r7, #20]
 8009588:	f7ff fd6c 	bl	8009064 <HAL_SD_ErrorCallback>
#endif
  }
}
 800958c:	bf00      	nop
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	004005ff 	.word	0x004005ff

08009598 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff ff31 	bl	8009418 <HAL_SD_GetCardState>
 80095b6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b06      	cmp	r3, #6
 80095ca:	d002      	beq.n	80095d2 <SD_DMATxAbort+0x3a>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	d10a      	bne.n	80095e8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f002 f86a 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 80095dc:	4602      	mov	r2, r0
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	431a      	orrs	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f004 feb3 	bl	800e35c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80095f6:	e002      	b.n	80095fe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fd33 	bl	8009064 <HAL_SD_ErrorCallback>
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f240 523a 	movw	r2, #1338	; 0x53a
 800961c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fefa 	bl	8009418 <HAL_SD_GetCardState>
 8009624:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b06      	cmp	r3, #6
 8009638:	d002      	beq.n	8009640 <SD_DMARxAbort+0x3a>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b05      	cmp	r3, #5
 800963e:	d10a      	bne.n	8009656 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	f002 f833 	bl	800b6b0 <SDMMC_CmdStopTransfer>
 800964a:	4602      	mov	r2, r0
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	431a      	orrs	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f004 fe7c 	bl	800e35c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009664:	e002      	b.n	800966c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7ff fcfc 	bl	8009064 <HAL_SD_ErrorCallback>
}
 800966c:	bf00      	nop
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009674:	b5b0      	push	{r4, r5, r7, lr}
 8009676:	b094      	sub	sp, #80	; 0x50
 8009678:	af04      	add	r7, sp, #16
 800967a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800967c:	2301      	movs	r3, #1
 800967e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fee5 	bl	800b454 <SDMMC_GetPowerState>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009690:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009694:	e0b8      	b.n	8009808 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969a:	2b03      	cmp	r3, #3
 800969c:	d02f      	beq.n	80096fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f002 f8cc 	bl	800b840 <SDMMC_CmdSendCID>
 80096a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80096b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b2:	e0a9      	b.n	8009808 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 ff0f 	bl	800b4de <SDMMC_GetResponse>
 80096c0:	4602      	mov	r2, r0
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2104      	movs	r1, #4
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 ff06 	bl	800b4de <SDMMC_GetResponse>
 80096d2:	4602      	mov	r2, r0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2108      	movs	r1, #8
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 fefd 	bl	800b4de <SDMMC_GetResponse>
 80096e4:	4602      	mov	r2, r0
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	210c      	movs	r1, #12
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fef4 	bl	800b4de <SDMMC_GetResponse>
 80096f6:	4602      	mov	r2, r0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009702:	2b03      	cmp	r3, #3
 8009704:	d00d      	beq.n	8009722 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f107 020e 	add.w	r2, r7, #14
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f002 f8d2 	bl	800b8ba <SDMMC_CmdSetRelAdd>
 8009716:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <SD_InitCard+0xae>
    {
      return errorstate;
 800971e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009720:	e072      	b.n	8009808 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009726:	2b03      	cmp	r3, #3
 8009728:	d036      	beq.n	8009798 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	461a      	mov	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	041b      	lsls	r3, r3, #16
 800973c:	4619      	mov	r1, r3
 800973e:	4610      	mov	r0, r2
 8009740:	f002 f89c 	bl	800b87c <SDMMC_CmdSendCSD>
 8009744:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <SD_InitCard+0xdc>
    {
      return errorstate;
 800974c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974e:	e05b      	b.n	8009808 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f001 fec1 	bl	800b4de <SDMMC_GetResponse>
 800975c:	4602      	mov	r2, r0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2104      	movs	r1, #4
 8009768:	4618      	mov	r0, r3
 800976a:	f001 feb8 	bl	800b4de <SDMMC_GetResponse>
 800976e:	4602      	mov	r2, r0
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2108      	movs	r1, #8
 800977a:	4618      	mov	r0, r3
 800977c:	f001 feaf 	bl	800b4de <SDMMC_GetResponse>
 8009780:	4602      	mov	r2, r0
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	210c      	movs	r1, #12
 800978c:	4618      	mov	r0, r3
 800978e:	f001 fea6 	bl	800b4de <SDMMC_GetResponse>
 8009792:	4602      	mov	r2, r0
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2104      	movs	r1, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 fe9d 	bl	800b4de <SDMMC_GetResponse>
 80097a4:	4603      	mov	r3, r0
 80097a6:	0d1a      	lsrs	r2, r3, #20
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fc60 	bl	8009078 <HAL_SD_GetCardCSD>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097c2:	e021      	b.n	8009808 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6819      	ldr	r1, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	2200      	movs	r2, #0
 80097d0:	461c      	mov	r4, r3
 80097d2:	4615      	mov	r5, r2
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	4608      	mov	r0, r1
 80097da:	f001 ff8b 	bl	800b6f4 <SDMMC_CmdSelDesel>
 80097de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80097e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <SD_InitCard+0x176>
  {
    return errorstate;
 80097e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e8:	e00e      	b.n	8009808 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681d      	ldr	r5, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	466c      	mov	r4, sp
 80097f2:	f103 0210 	add.w	r2, r3, #16
 80097f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80097f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097fc:	3304      	adds	r3, #4
 80097fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009800:	4628      	mov	r0, r5
 8009802:	f001 fdcf 	bl	800b3a4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3740      	adds	r7, #64	; 0x40
 800980c:	46bd      	mov	sp, r7
 800980e:	bdb0      	pop	{r4, r5, r7, pc}

08009810 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f001 ff86 	bl	800b73a <SDMMC_CmdGoIdleState>
 800982e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	e072      	b.n	8009920 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f001 ff99 	bl	800b776 <SDMMC_CmdOperCond>
 8009844:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00d      	beq.n	8009868 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f001 ff6f 	bl	800b73a <SDMMC_CmdGoIdleState>
 800985c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	e05b      	b.n	8009920 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009872:	2b01      	cmp	r3, #1
 8009874:	d137      	bne.n	80098e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2100      	movs	r1, #0
 800987c:	4618      	mov	r0, r3
 800987e:	f001 ff99 	bl	800b7b4 <SDMMC_CmdAppCommand>
 8009882:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02d      	beq.n	80098e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800988a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800988e:	e047      	b.n	8009920 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f001 ff8c 	bl	800b7b4 <SDMMC_CmdAppCommand>
 800989c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e03b      	b.n	8009920 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	491e      	ldr	r1, [pc, #120]	; (8009928 <SD_PowerON+0x118>)
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 ffa2 	bl	800b7f8 <SDMMC_CmdAppOperCommand>
 80098b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098c0:	e02e      	b.n	8009920 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 fe08 	bl	800b4de <SDMMC_GetResponse>
 80098ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	0fdb      	lsrs	r3, r3, #31
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <SD_PowerON+0xcc>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <SD_PowerON+0xce>
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]

    count++;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	3301      	adds	r3, #1
 80098e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d802      	bhi.n	80098f6 <SD_PowerON+0xe6>
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0cc      	beq.n	8009890 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d902      	bls.n	8009906 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009904:	e00c      	b.n	8009920 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	645a      	str	r2, [r3, #68]	; 0x44
 8009916:	e002      	b.n	800991e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	c1100000 	.word	0xc1100000

0800992c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800993c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009940:	e018      	b.n	8009974 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f001 ffd4 	bl	800b8fc <SDMMC_CmdSendStatus>
 8009954:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <SD_SendStatus+0x34>
  {
    return errorstate;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	e009      	b.n	8009974 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f001 fdb9 	bl	800b4de <SDMMC_GetResponse>
 800996c:	4602      	mov	r2, r0
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d03f      	beq.n	8009a16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e033      	b.n	8009a04 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 fd2b 	bl	800b3fc <SDMMC_ReadFIFO>
 80099a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3301      	adds	r3, #1
 80099b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
 80099e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	0e1b      	lsrs	r3, r3, #24
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	3301      	adds	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b07      	cmp	r3, #7
 8009a08:	d9c8      	bls.n	800999c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b086      	sub	sp, #24
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d043      	beq.n	8009ac0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e037      	b.n	8009aae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3301      	adds	r3, #1
 8009a48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	021a      	lsls	r2, r3, #8
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	041a      	lsls	r2, r3, #16
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	061a      	lsls	r2, r3, #24
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f107 0208 	add.w	r2, r7, #8
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fcb7 	bl	800b416 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b07      	cmp	r3, #7
 8009ab2:	d9c4      	bls.n	8009a3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e038      	b.n	8009b50 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7f9 fad0 	bl	8003098 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3308      	adds	r3, #8
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f001 fb36 	bl	800b174 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	461a      	mov	r2, r3
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	f001 fbbe 	bl	800b294 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6858      	ldr	r0, [r3, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	f001 fc05 	bl	800b334 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	6892      	ldr	r2, [r2, #8]
 8009b32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	f041 0101 	orr.w	r1, r1, #1
 8009b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e049      	b.n	8009bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7f9 f952 	bl	8002e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f000 fa74 	bl	800a084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e049      	b.n	8009cac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d106      	bne.n	8009c32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f841 	bl	8009cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2202      	movs	r2, #2
 8009c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f000 fa1d 	bl	800a084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e0ff      	b.n	8009ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b14      	cmp	r3, #20
 8009cf2:	f200 80f0 	bhi.w	8009ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009ed7 	.word	0x08009ed7
 8009d04:	08009ed7 	.word	0x08009ed7
 8009d08:	08009ed7 	.word	0x08009ed7
 8009d0c:	08009d91 	.word	0x08009d91
 8009d10:	08009ed7 	.word	0x08009ed7
 8009d14:	08009ed7 	.word	0x08009ed7
 8009d18:	08009ed7 	.word	0x08009ed7
 8009d1c:	08009dd3 	.word	0x08009dd3
 8009d20:	08009ed7 	.word	0x08009ed7
 8009d24:	08009ed7 	.word	0x08009ed7
 8009d28:	08009ed7 	.word	0x08009ed7
 8009d2c:	08009e13 	.word	0x08009e13
 8009d30:	08009ed7 	.word	0x08009ed7
 8009d34:	08009ed7 	.word	0x08009ed7
 8009d38:	08009ed7 	.word	0x08009ed7
 8009d3c:	08009e55 	.word	0x08009e55
 8009d40:	08009ed7 	.word	0x08009ed7
 8009d44:	08009ed7 	.word	0x08009ed7
 8009d48:	08009ed7 	.word	0x08009ed7
 8009d4c:	08009e95 	.word	0x08009e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fa34 	bl	800a1c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0208 	orr.w	r2, r2, #8
 8009d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0204 	bic.w	r2, r2, #4
 8009d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6999      	ldr	r1, [r3, #24]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	619a      	str	r2, [r3, #24]
      break;
 8009d8e:	e0a5      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fa86 	bl	800a2a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6999      	ldr	r1, [r3, #24]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	021a      	lsls	r2, r3, #8
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	619a      	str	r2, [r3, #24]
      break;
 8009dd0:	e084      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fadd 	bl	800a398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69da      	ldr	r2, [r3, #28]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f042 0208 	orr.w	r2, r2, #8
 8009dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69da      	ldr	r2, [r3, #28]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0204 	bic.w	r2, r2, #4
 8009dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69d9      	ldr	r1, [r3, #28]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	61da      	str	r2, [r3, #28]
      break;
 8009e10:	e064      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fb33 	bl	800a484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69da      	ldr	r2, [r3, #28]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69d9      	ldr	r1, [r3, #28]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	021a      	lsls	r2, r3, #8
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	61da      	str	r2, [r3, #28]
      break;
 8009e52:	e043      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fb6a 	bl	800a534 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0208 	orr.w	r2, r2, #8
 8009e6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0204 	bic.w	r2, r2, #4
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e92:	e023      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fb9c 	bl	800a5d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	021a      	lsls	r2, r3, #8
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ed4:	e002      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop

08009ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_ConfigClockSource+0x1c>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e0b4      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x186>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	4b56      	ldr	r3, [pc, #344]	; (800a080 <HAL_TIM_ConfigClockSource+0x190>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f44:	d03e      	beq.n	8009fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8009f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f4a:	f200 8087 	bhi.w	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	f000 8086 	beq.w	800a062 <HAL_TIM_ConfigClockSource+0x172>
 8009f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5a:	d87f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f5c:	2b70      	cmp	r3, #112	; 0x70
 8009f5e:	d01a      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0xa6>
 8009f60:	2b70      	cmp	r3, #112	; 0x70
 8009f62:	d87b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f64:	2b60      	cmp	r3, #96	; 0x60
 8009f66:	d050      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x11a>
 8009f68:	2b60      	cmp	r3, #96	; 0x60
 8009f6a:	d877      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b50      	cmp	r3, #80	; 0x50
 8009f6e:	d03c      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0xfa>
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d873      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b40      	cmp	r3, #64	; 0x40
 8009f76:	d058      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x13a>
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d86f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f7c:	2b30      	cmp	r3, #48	; 0x30
 8009f7e:	d064      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d86b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d060      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d867      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05c      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	d05a      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f94:	e062      	b.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f000 fbe5 	bl	800a774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	609a      	str	r2, [r3, #8]
      break;
 8009fc2:	e04f      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	6899      	ldr	r1, [r3, #8]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f000 fbce 	bl	800a774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fe6:	609a      	str	r2, [r3, #8]
      break;
 8009fe8:	e03c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f000 fb42 	bl	800a680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2150      	movs	r1, #80	; 0x50
 800a002:	4618      	mov	r0, r3
 800a004:	f000 fb9b 	bl	800a73e <TIM_ITRx_SetConfig>
      break;
 800a008:	e02c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	f000 fb61 	bl	800a6de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2160      	movs	r1, #96	; 0x60
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fb8b 	bl	800a73e <TIM_ITRx_SetConfig>
      break;
 800a028:	e01c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	461a      	mov	r2, r3
 800a038:	f000 fb22 	bl	800a680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fb7b 	bl	800a73e <TIM_ITRx_SetConfig>
      break;
 800a048:	e00c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f000 fb72 	bl	800a73e <TIM_ITRx_SetConfig>
      break;
 800a05a:	e003      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
      break;
 800a060:	e000      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	fffeff88 	.word	0xfffeff88

0800a084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a40      	ldr	r2, [pc, #256]	; (800a198 <TIM_Base_SetConfig+0x114>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d013      	beq.n	800a0c4 <TIM_Base_SetConfig+0x40>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a2:	d00f      	beq.n	800a0c4 <TIM_Base_SetConfig+0x40>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a3d      	ldr	r2, [pc, #244]	; (800a19c <TIM_Base_SetConfig+0x118>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00b      	beq.n	800a0c4 <TIM_Base_SetConfig+0x40>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a3c      	ldr	r2, [pc, #240]	; (800a1a0 <TIM_Base_SetConfig+0x11c>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d007      	beq.n	800a0c4 <TIM_Base_SetConfig+0x40>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a3b      	ldr	r2, [pc, #236]	; (800a1a4 <TIM_Base_SetConfig+0x120>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <TIM_Base_SetConfig+0x40>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a3a      	ldr	r2, [pc, #232]	; (800a1a8 <TIM_Base_SetConfig+0x124>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d108      	bne.n	800a0d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a2f      	ldr	r2, [pc, #188]	; (800a198 <TIM_Base_SetConfig+0x114>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d02b      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d027      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a2c      	ldr	r2, [pc, #176]	; (800a19c <TIM_Base_SetConfig+0x118>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d023      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a2b      	ldr	r2, [pc, #172]	; (800a1a0 <TIM_Base_SetConfig+0x11c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d01f      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <TIM_Base_SetConfig+0x120>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d01b      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a29      	ldr	r2, [pc, #164]	; (800a1a8 <TIM_Base_SetConfig+0x124>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d017      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a28      	ldr	r2, [pc, #160]	; (800a1ac <TIM_Base_SetConfig+0x128>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d013      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a27      	ldr	r2, [pc, #156]	; (800a1b0 <TIM_Base_SetConfig+0x12c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00f      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a26      	ldr	r2, [pc, #152]	; (800a1b4 <TIM_Base_SetConfig+0x130>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00b      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a25      	ldr	r2, [pc, #148]	; (800a1b8 <TIM_Base_SetConfig+0x134>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d007      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a24      	ldr	r2, [pc, #144]	; (800a1bc <TIM_Base_SetConfig+0x138>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d003      	beq.n	800a136 <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a23      	ldr	r2, [pc, #140]	; (800a1c0 <TIM_Base_SetConfig+0x13c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d108      	bne.n	800a148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4313      	orrs	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <TIM_Base_SetConfig+0x114>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d003      	beq.n	800a17c <TIM_Base_SetConfig+0xf8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a0c      	ldr	r2, [pc, #48]	; (800a1a8 <TIM_Base_SetConfig+0x124>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d103      	bne.n	800a184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	615a      	str	r2, [r3, #20]
}
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40010000 	.word	0x40010000
 800a19c:	40000400 	.word	0x40000400
 800a1a0:	40000800 	.word	0x40000800
 800a1a4:	40000c00 	.word	0x40000c00
 800a1a8:	40010400 	.word	0x40010400
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800
 800a1b8:	40001800 	.word	0x40001800
 800a1bc:	40001c00 	.word	0x40001c00
 800a1c0:	40002000 	.word	0x40002000

0800a1c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f023 0201 	bic.w	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <TIM_OC1_SetConfig+0xd8>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f023 0302 	bic.w	r3, r3, #2
 800a20c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4313      	orrs	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a21      	ldr	r2, [pc, #132]	; (800a2a0 <TIM_OC1_SetConfig+0xdc>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_OC1_SetConfig+0x64>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <TIM_OC1_SetConfig+0xe0>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d10c      	bne.n	800a242 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f023 0308 	bic.w	r3, r3, #8
 800a22e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f023 0304 	bic.w	r3, r3, #4
 800a240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a16      	ldr	r2, [pc, #88]	; (800a2a0 <TIM_OC1_SetConfig+0xdc>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d003      	beq.n	800a252 <TIM_OC1_SetConfig+0x8e>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <TIM_OC1_SetConfig+0xe0>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d111      	bne.n	800a276 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	621a      	str	r2, [r3, #32]
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	fffeff8f 	.word	0xfffeff8f
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40010400 	.word	0x40010400

0800a2a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	f023 0210 	bic.w	r2, r3, #16
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4b2e      	ldr	r3, [pc, #184]	; (800a38c <TIM_OC2_SetConfig+0xe4>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f023 0320 	bic.w	r3, r3, #32
 800a2f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a23      	ldr	r2, [pc, #140]	; (800a390 <TIM_OC2_SetConfig+0xe8>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d003      	beq.n	800a310 <TIM_OC2_SetConfig+0x68>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a22      	ldr	r2, [pc, #136]	; (800a394 <TIM_OC2_SetConfig+0xec>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10d      	bne.n	800a32c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4313      	orrs	r3, r2
 800a322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a32a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a18      	ldr	r2, [pc, #96]	; (800a390 <TIM_OC2_SetConfig+0xe8>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d003      	beq.n	800a33c <TIM_OC2_SetConfig+0x94>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a17      	ldr	r2, [pc, #92]	; (800a394 <TIM_OC2_SetConfig+0xec>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d113      	bne.n	800a364 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a34a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	4313      	orrs	r3, r2
 800a356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4313      	orrs	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	621a      	str	r2, [r3, #32]
}
 800a37e:	bf00      	nop
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	feff8fff 	.word	0xfeff8fff
 800a390:	40010000 	.word	0x40010000
 800a394:	40010400 	.word	0x40010400

0800a398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <TIM_OC3_SetConfig+0xe0>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a22      	ldr	r2, [pc, #136]	; (800a47c <TIM_OC3_SetConfig+0xe4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d003      	beq.n	800a3fe <TIM_OC3_SetConfig+0x66>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a21      	ldr	r2, [pc, #132]	; (800a480 <TIM_OC3_SetConfig+0xe8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d10d      	bne.n	800a41a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a17      	ldr	r2, [pc, #92]	; (800a47c <TIM_OC3_SetConfig+0xe4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d003      	beq.n	800a42a <TIM_OC3_SetConfig+0x92>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a16      	ldr	r2, [pc, #88]	; (800a480 <TIM_OC3_SetConfig+0xe8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d113      	bne.n	800a452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	011b      	lsls	r3, r3, #4
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	4313      	orrs	r3, r2
 800a450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	621a      	str	r2, [r3, #32]
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	fffeff8f 	.word	0xfffeff8f
 800a47c:	40010000 	.word	0x40010000
 800a480:	40010400 	.word	0x40010400

0800a484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	4b1e      	ldr	r3, [pc, #120]	; (800a528 <TIM_OC4_SetConfig+0xa4>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	031b      	lsls	r3, r3, #12
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a13      	ldr	r2, [pc, #76]	; (800a52c <TIM_OC4_SetConfig+0xa8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d003      	beq.n	800a4ec <TIM_OC4_SetConfig+0x68>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a12      	ldr	r2, [pc, #72]	; (800a530 <TIM_OC4_SetConfig+0xac>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d109      	bne.n	800a500 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	019b      	lsls	r3, r3, #6
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	621a      	str	r2, [r3, #32]
}
 800a51a:	bf00      	nop
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	feff8fff 	.word	0xfeff8fff
 800a52c:	40010000 	.word	0x40010000
 800a530:	40010400 	.word	0x40010400

0800a534 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <TIM_OC5_SetConfig+0x98>)
 800a560:	4013      	ands	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	041b      	lsls	r3, r3, #16
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a12      	ldr	r2, [pc, #72]	; (800a5d0 <TIM_OC5_SetConfig+0x9c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d003      	beq.n	800a592 <TIM_OC5_SetConfig+0x5e>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a11      	ldr	r2, [pc, #68]	; (800a5d4 <TIM_OC5_SetConfig+0xa0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d109      	bne.n	800a5a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	021b      	lsls	r3, r3, #8
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	621a      	str	r2, [r3, #32]
}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	fffeff8f 	.word	0xfffeff8f
 800a5d0:	40010000 	.word	0x40010000
 800a5d4:	40010400 	.word	0x40010400

0800a5d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <TIM_OC6_SetConfig+0x9c>)
 800a604:	4013      	ands	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	051b      	lsls	r3, r3, #20
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a13      	ldr	r2, [pc, #76]	; (800a678 <TIM_OC6_SetConfig+0xa0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_OC6_SetConfig+0x60>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a12      	ldr	r2, [pc, #72]	; (800a67c <TIM_OC6_SetConfig+0xa4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d109      	bne.n	800a64c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a63e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	feff8fff 	.word	0xfeff8fff
 800a678:	40010000 	.word	0x40010000
 800a67c:	40010400 	.word	0x40010400

0800a680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f023 0201 	bic.w	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f023 030a 	bic.w	r3, r3, #10
 800a6bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	621a      	str	r2, [r3, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b087      	sub	sp, #28
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	f023 0210 	bic.w	r2, r3, #16
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	031b      	lsls	r3, r3, #12
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a71a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	621a      	str	r2, [r3, #32]
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	f043 0307 	orr.w	r3, r3, #7
 800a760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	609a      	str	r2, [r3, #8]
}
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a78e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	021a      	lsls	r2, r3, #8
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	431a      	orrs	r2, r3
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	609a      	str	r2, [r3, #8]
}
 800a7a8:	bf00      	nop
 800a7aa:	371c      	adds	r7, #28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e06d      	b.n	800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a30      	ldr	r2, [pc, #192]	; (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d004      	beq.n	800a800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a2f      	ldr	r2, [pc, #188]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d108      	bne.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	4313      	orrs	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a20      	ldr	r2, [pc, #128]	; (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d022      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d01d      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1d      	ldr	r2, [pc, #116]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d018      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1c      	ldr	r2, [pc, #112]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d013      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1a      	ldr	r2, [pc, #104]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d00e      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d009      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a15      	ldr	r2, [pc, #84]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d10c      	bne.n	800a896 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40010400 	.word	0x40010400
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	40000800 	.word	0x40000800
 800a8c4:	40000c00 	.word	0x40000c00
 800a8c8:	40014000 	.word	0x40014000
 800a8cc:	40001800 	.word	0x40001800

0800a8d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e040      	b.n	800a964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7f8 fb04 	bl	8002f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2224      	movs	r2, #36	; 0x24
 800a8fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 0201 	bic.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f82c 	bl	800a96c <UART_SetConfig>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d101      	bne.n	800a91e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e022      	b.n	800a964 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa84 	bl	800ae34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a93a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a94a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fb0b 	bl	800af78 <UART_CheckIdleState>
 800a962:	4603      	mov	r3, r0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	4ba6      	ldr	r3, [pc, #664]	; (800ac30 <UART_SetConfig+0x2c4>)
 800a998:	4013      	ands	r3, r2
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	6979      	ldr	r1, [r7, #20]
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a94      	ldr	r2, [pc, #592]	; (800ac34 <UART_SetConfig+0x2c8>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d120      	bne.n	800aa2a <UART_SetConfig+0xbe>
 800a9e8:	4b93      	ldr	r3, [pc, #588]	; (800ac38 <UART_SetConfig+0x2cc>)
 800a9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d816      	bhi.n	800aa24 <UART_SetConfig+0xb8>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x90>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa0d 	.word	0x0800aa0d
 800aa00:	0800aa19 	.word	0x0800aa19
 800aa04:	0800aa13 	.word	0x0800aa13
 800aa08:	0800aa1f 	.word	0x0800aa1f
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	77fb      	strb	r3, [r7, #31]
 800aa10:	e150      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa12:	2302      	movs	r3, #2
 800aa14:	77fb      	strb	r3, [r7, #31]
 800aa16:	e14d      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa18:	2304      	movs	r3, #4
 800aa1a:	77fb      	strb	r3, [r7, #31]
 800aa1c:	e14a      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa1e:	2308      	movs	r3, #8
 800aa20:	77fb      	strb	r3, [r7, #31]
 800aa22:	e147      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa24:	2310      	movs	r3, #16
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e144      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a83      	ldr	r2, [pc, #524]	; (800ac3c <UART_SetConfig+0x2d0>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d132      	bne.n	800aa9a <UART_SetConfig+0x12e>
 800aa34:	4b80      	ldr	r3, [pc, #512]	; (800ac38 <UART_SetConfig+0x2cc>)
 800aa36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa3a:	f003 030c 	and.w	r3, r3, #12
 800aa3e:	2b0c      	cmp	r3, #12
 800aa40:	d828      	bhi.n	800aa94 <UART_SetConfig+0x128>
 800aa42:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <UART_SetConfig+0xdc>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aa7d 	.word	0x0800aa7d
 800aa4c:	0800aa95 	.word	0x0800aa95
 800aa50:	0800aa95 	.word	0x0800aa95
 800aa54:	0800aa95 	.word	0x0800aa95
 800aa58:	0800aa89 	.word	0x0800aa89
 800aa5c:	0800aa95 	.word	0x0800aa95
 800aa60:	0800aa95 	.word	0x0800aa95
 800aa64:	0800aa95 	.word	0x0800aa95
 800aa68:	0800aa83 	.word	0x0800aa83
 800aa6c:	0800aa95 	.word	0x0800aa95
 800aa70:	0800aa95 	.word	0x0800aa95
 800aa74:	0800aa95 	.word	0x0800aa95
 800aa78:	0800aa8f 	.word	0x0800aa8f
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	77fb      	strb	r3, [r7, #31]
 800aa80:	e118      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa82:	2302      	movs	r3, #2
 800aa84:	77fb      	strb	r3, [r7, #31]
 800aa86:	e115      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e112      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa8e:	2308      	movs	r3, #8
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e10f      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa94:	2310      	movs	r3, #16
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e10c      	b.n	800acb4 <UART_SetConfig+0x348>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a68      	ldr	r2, [pc, #416]	; (800ac40 <UART_SetConfig+0x2d4>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d120      	bne.n	800aae6 <UART_SetConfig+0x17a>
 800aaa4:	4b64      	ldr	r3, [pc, #400]	; (800ac38 <UART_SetConfig+0x2cc>)
 800aaa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aaae:	2b30      	cmp	r3, #48	; 0x30
 800aab0:	d013      	beq.n	800aada <UART_SetConfig+0x16e>
 800aab2:	2b30      	cmp	r3, #48	; 0x30
 800aab4:	d814      	bhi.n	800aae0 <UART_SetConfig+0x174>
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d009      	beq.n	800aace <UART_SetConfig+0x162>
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d810      	bhi.n	800aae0 <UART_SetConfig+0x174>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <UART_SetConfig+0x15c>
 800aac2:	2b10      	cmp	r3, #16
 800aac4:	d006      	beq.n	800aad4 <UART_SetConfig+0x168>
 800aac6:	e00b      	b.n	800aae0 <UART_SetConfig+0x174>
 800aac8:	2300      	movs	r3, #0
 800aaca:	77fb      	strb	r3, [r7, #31]
 800aacc:	e0f2      	b.n	800acb4 <UART_SetConfig+0x348>
 800aace:	2302      	movs	r3, #2
 800aad0:	77fb      	strb	r3, [r7, #31]
 800aad2:	e0ef      	b.n	800acb4 <UART_SetConfig+0x348>
 800aad4:	2304      	movs	r3, #4
 800aad6:	77fb      	strb	r3, [r7, #31]
 800aad8:	e0ec      	b.n	800acb4 <UART_SetConfig+0x348>
 800aada:	2308      	movs	r3, #8
 800aadc:	77fb      	strb	r3, [r7, #31]
 800aade:	e0e9      	b.n	800acb4 <UART_SetConfig+0x348>
 800aae0:	2310      	movs	r3, #16
 800aae2:	77fb      	strb	r3, [r7, #31]
 800aae4:	e0e6      	b.n	800acb4 <UART_SetConfig+0x348>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a56      	ldr	r2, [pc, #344]	; (800ac44 <UART_SetConfig+0x2d8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d120      	bne.n	800ab32 <UART_SetConfig+0x1c6>
 800aaf0:	4b51      	ldr	r3, [pc, #324]	; (800ac38 <UART_SetConfig+0x2cc>)
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aafa:	2bc0      	cmp	r3, #192	; 0xc0
 800aafc:	d013      	beq.n	800ab26 <UART_SetConfig+0x1ba>
 800aafe:	2bc0      	cmp	r3, #192	; 0xc0
 800ab00:	d814      	bhi.n	800ab2c <UART_SetConfig+0x1c0>
 800ab02:	2b80      	cmp	r3, #128	; 0x80
 800ab04:	d009      	beq.n	800ab1a <UART_SetConfig+0x1ae>
 800ab06:	2b80      	cmp	r3, #128	; 0x80
 800ab08:	d810      	bhi.n	800ab2c <UART_SetConfig+0x1c0>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <UART_SetConfig+0x1a8>
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	d006      	beq.n	800ab20 <UART_SetConfig+0x1b4>
 800ab12:	e00b      	b.n	800ab2c <UART_SetConfig+0x1c0>
 800ab14:	2300      	movs	r3, #0
 800ab16:	77fb      	strb	r3, [r7, #31]
 800ab18:	e0cc      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	77fb      	strb	r3, [r7, #31]
 800ab1e:	e0c9      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab20:	2304      	movs	r3, #4
 800ab22:	77fb      	strb	r3, [r7, #31]
 800ab24:	e0c6      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab26:	2308      	movs	r3, #8
 800ab28:	77fb      	strb	r3, [r7, #31]
 800ab2a:	e0c3      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e0c0      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a44      	ldr	r2, [pc, #272]	; (800ac48 <UART_SetConfig+0x2dc>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d125      	bne.n	800ab88 <UART_SetConfig+0x21c>
 800ab3c:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <UART_SetConfig+0x2cc>)
 800ab3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab4a:	d017      	beq.n	800ab7c <UART_SetConfig+0x210>
 800ab4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab50:	d817      	bhi.n	800ab82 <UART_SetConfig+0x216>
 800ab52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab56:	d00b      	beq.n	800ab70 <UART_SetConfig+0x204>
 800ab58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab5c:	d811      	bhi.n	800ab82 <UART_SetConfig+0x216>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <UART_SetConfig+0x1fe>
 800ab62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab66:	d006      	beq.n	800ab76 <UART_SetConfig+0x20a>
 800ab68:	e00b      	b.n	800ab82 <UART_SetConfig+0x216>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	77fb      	strb	r3, [r7, #31]
 800ab6e:	e0a1      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab70:	2302      	movs	r3, #2
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	e09e      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab76:	2304      	movs	r3, #4
 800ab78:	77fb      	strb	r3, [r7, #31]
 800ab7a:	e09b      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	77fb      	strb	r3, [r7, #31]
 800ab80:	e098      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab82:	2310      	movs	r3, #16
 800ab84:	77fb      	strb	r3, [r7, #31]
 800ab86:	e095      	b.n	800acb4 <UART_SetConfig+0x348>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a2f      	ldr	r2, [pc, #188]	; (800ac4c <UART_SetConfig+0x2e0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d125      	bne.n	800abde <UART_SetConfig+0x272>
 800ab92:	4b29      	ldr	r3, [pc, #164]	; (800ac38 <UART_SetConfig+0x2cc>)
 800ab94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aba0:	d017      	beq.n	800abd2 <UART_SetConfig+0x266>
 800aba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aba6:	d817      	bhi.n	800abd8 <UART_SetConfig+0x26c>
 800aba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abac:	d00b      	beq.n	800abc6 <UART_SetConfig+0x25a>
 800abae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abb2:	d811      	bhi.n	800abd8 <UART_SetConfig+0x26c>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <UART_SetConfig+0x254>
 800abb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abbc:	d006      	beq.n	800abcc <UART_SetConfig+0x260>
 800abbe:	e00b      	b.n	800abd8 <UART_SetConfig+0x26c>
 800abc0:	2301      	movs	r3, #1
 800abc2:	77fb      	strb	r3, [r7, #31]
 800abc4:	e076      	b.n	800acb4 <UART_SetConfig+0x348>
 800abc6:	2302      	movs	r3, #2
 800abc8:	77fb      	strb	r3, [r7, #31]
 800abca:	e073      	b.n	800acb4 <UART_SetConfig+0x348>
 800abcc:	2304      	movs	r3, #4
 800abce:	77fb      	strb	r3, [r7, #31]
 800abd0:	e070      	b.n	800acb4 <UART_SetConfig+0x348>
 800abd2:	2308      	movs	r3, #8
 800abd4:	77fb      	strb	r3, [r7, #31]
 800abd6:	e06d      	b.n	800acb4 <UART_SetConfig+0x348>
 800abd8:	2310      	movs	r3, #16
 800abda:	77fb      	strb	r3, [r7, #31]
 800abdc:	e06a      	b.n	800acb4 <UART_SetConfig+0x348>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a1b      	ldr	r2, [pc, #108]	; (800ac50 <UART_SetConfig+0x2e4>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d138      	bne.n	800ac5a <UART_SetConfig+0x2ee>
 800abe8:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <UART_SetConfig+0x2cc>)
 800abea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800abf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abf6:	d017      	beq.n	800ac28 <UART_SetConfig+0x2bc>
 800abf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abfc:	d82a      	bhi.n	800ac54 <UART_SetConfig+0x2e8>
 800abfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac02:	d00b      	beq.n	800ac1c <UART_SetConfig+0x2b0>
 800ac04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac08:	d824      	bhi.n	800ac54 <UART_SetConfig+0x2e8>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <UART_SetConfig+0x2aa>
 800ac0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac12:	d006      	beq.n	800ac22 <UART_SetConfig+0x2b6>
 800ac14:	e01e      	b.n	800ac54 <UART_SetConfig+0x2e8>
 800ac16:	2300      	movs	r3, #0
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e04b      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e048      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac22:	2304      	movs	r3, #4
 800ac24:	77fb      	strb	r3, [r7, #31]
 800ac26:	e045      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac28:	2308      	movs	r3, #8
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	e042      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac2e:	bf00      	nop
 800ac30:	efff69f3 	.word	0xefff69f3
 800ac34:	40011000 	.word	0x40011000
 800ac38:	40023800 	.word	0x40023800
 800ac3c:	40004400 	.word	0x40004400
 800ac40:	40004800 	.word	0x40004800
 800ac44:	40004c00 	.word	0x40004c00
 800ac48:	40005000 	.word	0x40005000
 800ac4c:	40011400 	.word	0x40011400
 800ac50:	40007800 	.word	0x40007800
 800ac54:	2310      	movs	r3, #16
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	e02c      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a72      	ldr	r2, [pc, #456]	; (800ae28 <UART_SetConfig+0x4bc>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d125      	bne.n	800acb0 <UART_SetConfig+0x344>
 800ac64:	4b71      	ldr	r3, [pc, #452]	; (800ae2c <UART_SetConfig+0x4c0>)
 800ac66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac72:	d017      	beq.n	800aca4 <UART_SetConfig+0x338>
 800ac74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac78:	d817      	bhi.n	800acaa <UART_SetConfig+0x33e>
 800ac7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac7e:	d00b      	beq.n	800ac98 <UART_SetConfig+0x32c>
 800ac80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac84:	d811      	bhi.n	800acaa <UART_SetConfig+0x33e>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <UART_SetConfig+0x326>
 800ac8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac8e:	d006      	beq.n	800ac9e <UART_SetConfig+0x332>
 800ac90:	e00b      	b.n	800acaa <UART_SetConfig+0x33e>
 800ac92:	2300      	movs	r3, #0
 800ac94:	77fb      	strb	r3, [r7, #31]
 800ac96:	e00d      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	77fb      	strb	r3, [r7, #31]
 800ac9c:	e00a      	b.n	800acb4 <UART_SetConfig+0x348>
 800ac9e:	2304      	movs	r3, #4
 800aca0:	77fb      	strb	r3, [r7, #31]
 800aca2:	e007      	b.n	800acb4 <UART_SetConfig+0x348>
 800aca4:	2308      	movs	r3, #8
 800aca6:	77fb      	strb	r3, [r7, #31]
 800aca8:	e004      	b.n	800acb4 <UART_SetConfig+0x348>
 800acaa:	2310      	movs	r3, #16
 800acac:	77fb      	strb	r3, [r7, #31]
 800acae:	e001      	b.n	800acb4 <UART_SetConfig+0x348>
 800acb0:	2310      	movs	r3, #16
 800acb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acbc:	d15b      	bne.n	800ad76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800acbe:	7ffb      	ldrb	r3, [r7, #31]
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d828      	bhi.n	800ad16 <UART_SetConfig+0x3aa>
 800acc4:	a201      	add	r2, pc, #4	; (adr r2, 800accc <UART_SetConfig+0x360>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800acf9 	.word	0x0800acf9
 800acd4:	0800ad01 	.word	0x0800ad01
 800acd8:	0800ad17 	.word	0x0800ad17
 800acdc:	0800ad07 	.word	0x0800ad07
 800ace0:	0800ad17 	.word	0x0800ad17
 800ace4:	0800ad17 	.word	0x0800ad17
 800ace8:	0800ad17 	.word	0x0800ad17
 800acec:	0800ad0f 	.word	0x0800ad0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf0:	f7fd f9e2 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>
 800acf4:	61b8      	str	r0, [r7, #24]
        break;
 800acf6:	e013      	b.n	800ad20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf8:	f7fd f9f2 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 800acfc:	61b8      	str	r0, [r7, #24]
        break;
 800acfe:	e00f      	b.n	800ad20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad00:	4b4b      	ldr	r3, [pc, #300]	; (800ae30 <UART_SetConfig+0x4c4>)
 800ad02:	61bb      	str	r3, [r7, #24]
        break;
 800ad04:	e00c      	b.n	800ad20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad06:	f7fd f8c7 	bl	8007e98 <HAL_RCC_GetSysClockFreq>
 800ad0a:	61b8      	str	r0, [r7, #24]
        break;
 800ad0c:	e008      	b.n	800ad20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad12:	61bb      	str	r3, [r7, #24]
        break;
 800ad14:	e004      	b.n	800ad20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	77bb      	strb	r3, [r7, #30]
        break;
 800ad1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d074      	beq.n	800ae10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	005a      	lsls	r2, r3, #1
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	441a      	add	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	2b0f      	cmp	r3, #15
 800ad40:	d916      	bls.n	800ad70 <UART_SetConfig+0x404>
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad48:	d212      	bcs.n	800ad70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f023 030f 	bic.w	r3, r3, #15
 800ad52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	085b      	lsrs	r3, r3, #1
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	89fb      	ldrh	r3, [r7, #14]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	89fa      	ldrh	r2, [r7, #14]
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	e04f      	b.n	800ae10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	77bb      	strb	r3, [r7, #30]
 800ad74:	e04c      	b.n	800ae10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d828      	bhi.n	800adce <UART_SetConfig+0x462>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <UART_SetConfig+0x418>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800ada9 	.word	0x0800ada9
 800ad88:	0800adb1 	.word	0x0800adb1
 800ad8c:	0800adb9 	.word	0x0800adb9
 800ad90:	0800adcf 	.word	0x0800adcf
 800ad94:	0800adbf 	.word	0x0800adbf
 800ad98:	0800adcf 	.word	0x0800adcf
 800ad9c:	0800adcf 	.word	0x0800adcf
 800ada0:	0800adcf 	.word	0x0800adcf
 800ada4:	0800adc7 	.word	0x0800adc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ada8:	f7fd f986 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>
 800adac:	61b8      	str	r0, [r7, #24]
        break;
 800adae:	e013      	b.n	800add8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adb0:	f7fd f996 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 800adb4:	61b8      	str	r0, [r7, #24]
        break;
 800adb6:	e00f      	b.n	800add8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adb8:	4b1d      	ldr	r3, [pc, #116]	; (800ae30 <UART_SetConfig+0x4c4>)
 800adba:	61bb      	str	r3, [r7, #24]
        break;
 800adbc:	e00c      	b.n	800add8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adbe:	f7fd f86b 	bl	8007e98 <HAL_RCC_GetSysClockFreq>
 800adc2:	61b8      	str	r0, [r7, #24]
        break;
 800adc4:	e008      	b.n	800add8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adca:	61bb      	str	r3, [r7, #24]
        break;
 800adcc:	e004      	b.n	800add8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	77bb      	strb	r3, [r7, #30]
        break;
 800add6:	bf00      	nop
    }

    if (pclk != 0U)
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d018      	beq.n	800ae10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	085a      	lsrs	r2, r3, #1
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	441a      	add	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b0f      	cmp	r3, #15
 800adf6:	d909      	bls.n	800ae0c <UART_SetConfig+0x4a0>
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfe:	d205      	bcs.n	800ae0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	e001      	b.n	800ae10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ae1c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	40007c00 	.word	0x40007c00
 800ae2c:	40023800 	.word	0x40023800
 800ae30:	00f42400 	.word	0x00f42400

0800ae34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00a      	beq.n	800ae5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	f003 0310 	and.w	r3, r3, #16
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeea:	f003 0320 	and.w	r3, r3, #32
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01a      	beq.n	800af4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af32:	d10a      	bne.n	800af4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	605a      	str	r2, [r3, #4]
  }
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af88:	f7f8 fa48 	bl	800341c <HAL_GetTick>
 800af8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0308 	and.w	r3, r3, #8
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d10e      	bne.n	800afba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f81b 	bl	800afe6 <UART_WaitOnFlagUntilTimeout>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	e011      	b.n	800afde <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b09c      	sub	sp, #112	; 0x70
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	603b      	str	r3, [r7, #0]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aff6:	e0a7      	b.n	800b148 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	f000 80a3 	beq.w	800b148 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b002:	f7f8 fa0b 	bl	800341c <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b00e:	429a      	cmp	r2, r3
 800b010:	d302      	bcc.n	800b018 <UART_WaitOnFlagUntilTimeout+0x32>
 800b012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b014:	2b00      	cmp	r3, #0
 800b016:	d13f      	bne.n	800b098 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b020:	e853 3f00 	ldrex	r3, [r3]
 800b024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b02c:	667b      	str	r3, [r7, #100]	; 0x64
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b036:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b038:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b03c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b03e:	e841 2300 	strex	r3, r2, [r1]
 800b042:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1e6      	bne.n	800b018 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3308      	adds	r3, #8
 800b050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	663b      	str	r3, [r7, #96]	; 0x60
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3308      	adds	r3, #8
 800b068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b06a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b06c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e5      	bne.n	800b04a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2220      	movs	r2, #32
 800b082:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e068      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d050      	beq.n	800b148 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b4:	d148      	bne.n	800b148 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0de:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e6      	bne.n	800b0c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	613b      	str	r3, [r7, #16]
   return(result);
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f023 0301 	bic.w	r3, r3, #1
 800b108:	66bb      	str	r3, [r7, #104]	; 0x68
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b112:	623a      	str	r2, [r7, #32]
 800b114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	69f9      	ldr	r1, [r7, #28]
 800b118:	6a3a      	ldr	r2, [r7, #32]
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e5      	bne.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2220      	movs	r2, #32
 800b12a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2220      	movs	r2, #32
 800b130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e010      	b.n	800b16a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69da      	ldr	r2, [r3, #28]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	4013      	ands	r3, r2
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	429a      	cmp	r2, r3
 800b156:	bf0c      	ite	eq
 800b158:	2301      	moveq	r3, #1
 800b15a:	2300      	movne	r3, #0
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	461a      	mov	r2, r3
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	429a      	cmp	r2, r3
 800b164:	f43f af48 	beq.w	800aff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3770      	adds	r7, #112	; 0x70
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	f023 0101 	bic.w	r1, r3, #1
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d102      	bne.n	800b1a4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b19e:	2340      	movs	r3, #64	; 0x40
 800b1a0:	617b      	str	r3, [r7, #20]
 800b1a2:	e001      	b.n	800b1a8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b1b4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b1ba:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b1c0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b1c6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b1cc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b1d2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b1d8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b1de:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b1e4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	4313      	orrs	r3, r2
 800b20a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800b20c:	4b20      	ldr	r3, [pc, #128]	; (800b290 <FMC_NORSRAM_Init+0x11c>)
 800b20e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b216:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b21e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b226:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	43db      	mvns	r3, r3
 800b236:	ea02 0103 	and.w	r1, r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	4319      	orrs	r1, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b250:	d10c      	bne.n	800b26c <FMC_NORSRAM_Init+0xf8>
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d006      	beq.n	800b282 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	371c      	adds	r7, #28
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	0008fb7f 	.word	0x0008fb7f

0800b294 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2aa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	021b      	lsls	r3, r3, #8
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	041b      	lsls	r3, r3, #16
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	051b      	lsls	r3, r3, #20
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	3b02      	subs	r3, #2
 800b2da:	061b      	lsls	r3, r3, #24
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	4319      	orrs	r1, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2fc:	d113      	bne.n	800b326 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b306:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	051b      	lsls	r3, r3, #20
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	431a      	orrs	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b348:	d11d      	bne.n	800b386 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b352:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b354:	4013      	ands	r3, r2
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	6811      	ldr	r1, [r2, #0]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	6852      	ldr	r2, [r2, #4]
 800b35e:	0112      	lsls	r2, r2, #4
 800b360:	4311      	orrs	r1, r2
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	6892      	ldr	r2, [r2, #8]
 800b366:	0212      	lsls	r2, r2, #8
 800b368:	4311      	orrs	r1, r2
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	6992      	ldr	r2, [r2, #24]
 800b36e:	4311      	orrs	r1, r2
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	68d2      	ldr	r2, [r2, #12]
 800b374:	0412      	lsls	r2, r2, #16
 800b376:	430a      	orrs	r2, r1
 800b378:	ea43 0102 	orr.w	r1, r3, r2
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b384:	e005      	b.n	800b392 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b38e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	cff00000 	.word	0xcff00000

0800b3a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	f107 001c 	add.w	r0, r7, #28
 800b3b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b3ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b3be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b3c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b3c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b3ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b3ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <SDMMC_Init+0x54>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	b004      	add	sp, #16
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	ffff8100 	.word	0xffff8100

0800b3fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2203      	movs	r2, #3
 800b444:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0303 	and.w	r3, r3, #3
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b48e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b494:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b49a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <SDMMC_SendCommand+0x50>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	fffff000 	.word	0xfffff000

0800b4c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	b2db      	uxtb	r3, r3
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b085      	sub	sp, #20
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3314      	adds	r3, #20
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
}  
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b52a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b530:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b536:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	431a      	orrs	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b54e:	2300      	movs	r3, #0

}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b56a:	2310      	movs	r3, #16
 800b56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b57c:	f107 0308 	add.w	r3, r7, #8
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff ff74 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b588:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58c:	2110      	movs	r1, #16
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f9d6 	bl	800b940 <SDMMC_GetCmdResp1>
 800b594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b596:	69fb      	ldr	r3, [r7, #28]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b5ae:	2311      	movs	r3, #17
 800b5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5b2:	2340      	movs	r3, #64	; 0x40
 800b5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c0:	f107 0308 	add.w	r3, r7, #8
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff ff52 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d0:	2111      	movs	r1, #17
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f9b4 	bl	800b940 <SDMMC_GetCmdResp1>
 800b5d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5da:	69fb      	ldr	r3, [r7, #28]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3720      	adds	r7, #32
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b5f2:	2312      	movs	r3, #18
 800b5f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f6:	2340      	movs	r3, #64	; 0x40
 800b5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff ff30 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b610:	f241 3288 	movw	r2, #5000	; 0x1388
 800b614:	2112      	movs	r1, #18
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f992 	bl	800b940 <SDMMC_GetCmdResp1>
 800b61c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b61e:	69fb      	ldr	r3, [r7, #28]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b636:	2318      	movs	r3, #24
 800b638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff ff0e 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	2118      	movs	r1, #24
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f970 	bl	800b940 <SDMMC_GetCmdResp1>
 800b660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b662:	69fb      	ldr	r3, [r7, #28]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3720      	adds	r7, #32
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b67a:	2319      	movs	r3, #25
 800b67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b67e:	2340      	movs	r3, #64	; 0x40
 800b680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b68a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68c:	f107 0308 	add.w	r3, r7, #8
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff feec 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b698:	f241 3288 	movw	r2, #5000	; 0x1388
 800b69c:	2119      	movs	r1, #25
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f94e 	bl	800b940 <SDMMC_GetCmdResp1>
 800b6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a6:	69fb      	ldr	r3, [r7, #28]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b6bc:	230c      	movs	r3, #12
 800b6be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c0:	2340      	movs	r3, #64	; 0x40
 800b6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ce:	f107 0308 	add.w	r3, r7, #8
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff fecb 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b6da:	4a05      	ldr	r2, [pc, #20]	; (800b6f0 <SDMMC_CmdStopTransfer+0x40>)
 800b6dc:	210c      	movs	r1, #12
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f92e 	bl	800b940 <SDMMC_GetCmdResp1>
 800b6e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3720      	adds	r7, #32
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	05f5e100 	.word	0x05f5e100

0800b6f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08a      	sub	sp, #40	; 0x28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b704:	2307      	movs	r3, #7
 800b706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b708:	2340      	movs	r3, #64	; 0x40
 800b70a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b70c:	2300      	movs	r3, #0
 800b70e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b714:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b716:	f107 0310 	add.w	r3, r7, #16
 800b71a:	4619      	mov	r1, r3
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff fea7 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b722:	f241 3288 	movw	r2, #5000	; 0x1388
 800b726:	2107      	movs	r1, #7
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f909 	bl	800b940 <SDMMC_GetCmdResp1>
 800b72e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b732:	4618      	mov	r0, r3
 800b734:	3728      	adds	r7, #40	; 0x28
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b088      	sub	sp, #32
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b74a:	2300      	movs	r3, #0
 800b74c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fe86 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fb23 	bl	800bdb0 <SDMMC_GetCmdError>
 800b76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76c:	69fb      	ldr	r3, [r7, #28]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b088      	sub	sp, #32
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b77e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b784:	2308      	movs	r3, #8
 800b786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b794:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b796:	f107 0308 	add.w	r3, r7, #8
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff fe67 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fab6 	bl	800bd14 <SDMMC_GetCmdResp7>
 800b7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7c2:	2337      	movs	r3, #55	; 0x37
 800b7c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c6:	2340      	movs	r3, #64	; 0x40
 800b7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d4:	f107 0308 	add.w	r3, r7, #8
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fe48 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e4:	2137      	movs	r1, #55	; 0x37
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f8aa 	bl	800b940 <SDMMC_GetCmdResp1>
 800b7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <SDMMC_CmdAppOperCommand+0x44>)
 800b806:	4313      	orrs	r3, r2
 800b808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b80a:	2329      	movs	r3, #41	; 0x29
 800b80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b812:	2300      	movs	r3, #0
 800b814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff fe24 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f9bf 	bl	800bbac <SDMMC_GetCmdResp3>
 800b82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b830:	69fb      	ldr	r3, [r7, #28]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3720      	adds	r7, #32
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	80100000 	.word	0x80100000

0800b840 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b84c:	2302      	movs	r3, #2
 800b84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b850:	23c0      	movs	r3, #192	; 0xc0
 800b852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff fe03 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f956 	bl	800bb1c <SDMMC_GetCmdResp2>
 800b870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b88a:	2309      	movs	r3, #9
 800b88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b88e:	23c0      	movs	r3, #192	; 0xc0
 800b890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff fde4 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f937 	bl	800bb1c <SDMMC_GetCmdResp2>
 800b8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b088      	sub	sp, #32
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8cc:	2340      	movs	r3, #64	; 0x40
 800b8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8da:	f107 0308 	add.w	r3, r7, #8
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff fdc5 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	2103      	movs	r1, #3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f99c 	bl	800bc28 <SDMMC_GetCmdResp6>
 800b8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b90a:	230d      	movs	r3, #13
 800b90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b90e:	2340      	movs	r3, #64	; 0x40
 800b910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b912:	2300      	movs	r3, #0
 800b914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b91a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b91c:	f107 0308 	add.w	r3, r7, #8
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fda4 	bl	800b470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b928:	f241 3288 	movw	r2, #5000	; 0x1388
 800b92c:	210d      	movs	r1, #13
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f806 	bl	800b940 <SDMMC_GetCmdResp1>
 800b934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b936:	69fb      	ldr	r3, [r7, #28]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3720      	adds	r7, #32
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	460b      	mov	r3, r1
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b94e:	4b70      	ldr	r3, [pc, #448]	; (800bb10 <SDMMC_GetCmdResp1+0x1d0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a70      	ldr	r2, [pc, #448]	; (800bb14 <SDMMC_GetCmdResp1+0x1d4>)
 800b954:	fba2 2303 	umull	r2, r3, r2, r3
 800b958:	0a5a      	lsrs	r2, r3, #9
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	fb02 f303 	mul.w	r3, r2, r3
 800b960:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	1e5a      	subs	r2, r3, #1
 800b966:	61fa      	str	r2, [r7, #28]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d102      	bne.n	800b972 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b970:	e0c9      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b976:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0ef      	beq.n	800b962 <SDMMC_GetCmdResp1+0x22>
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1ea      	bne.n	800b962 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2204      	movs	r2, #4
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99e:	2304      	movs	r3, #4
 800b9a0:	e0b1      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	f003 0301 	and.w	r3, r3, #1
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e0a6      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	22c5      	movs	r2, #197	; 0xc5
 800b9bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fd80 	bl	800b4c4 <SDMMC_GetCommandResponse>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d001      	beq.n	800b9d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e099      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff fd82 	bl	800b4de <SDMMC_GetResponse>
 800b9da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	4b4e      	ldr	r3, [pc, #312]	; (800bb18 <SDMMC_GetCmdResp1+0x1d8>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e08d      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	da02      	bge.n	800b9f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9f4:	e087      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba00:	2340      	movs	r3, #64	; 0x40
 800ba02:	e080      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba0e:	2380      	movs	r3, #128	; 0x80
 800ba10:	e079      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba20:	e071      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba30:	e069      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba40:	e061      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba50:	e059      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba60:	e051      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba70:	e049      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba80:	e041      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba90:	e039      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800baa0:	e031      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800baac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bab0:	e029      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800babc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bac0:	e021      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bacc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bad0:	e019      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800badc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bae0:	e011      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800baec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800baf0:	e009      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bafc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bb00:	e001      	b.n	800bb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3720      	adds	r7, #32
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000000 	.word	0x20000000
 800bb14:	10624dd3 	.word	0x10624dd3
 800bb18:	fdffe008 	.word	0xfdffe008

0800bb1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb24:	4b1f      	ldr	r3, [pc, #124]	; (800bba4 <SDMMC_GetCmdResp2+0x88>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a1f      	ldr	r2, [pc, #124]	; (800bba8 <SDMMC_GetCmdResp2+0x8c>)
 800bb2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2e:	0a5b      	lsrs	r3, r3, #9
 800bb30:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb34:	fb02 f303 	mul.w	r3, r2, r3
 800bb38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	1e5a      	subs	r2, r3, #1
 800bb3e:	60fa      	str	r2, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb48:	e026      	b.n	800bb98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0ef      	beq.n	800bb3a <SDMMC_GetCmdResp2+0x1e>
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1ea      	bne.n	800bb3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2204      	movs	r2, #4
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb76:	2304      	movs	r3, #4
 800bb78:	e00e      	b.n	800bb98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e003      	b.n	800bb98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	22c5      	movs	r2, #197	; 0xc5
 800bb94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr
 800bba4:	20000000 	.word	0x20000000
 800bba8:	10624dd3 	.word	0x10624dd3

0800bbac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbb4:	4b1a      	ldr	r3, [pc, #104]	; (800bc20 <SDMMC_GetCmdResp3+0x74>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a1a      	ldr	r2, [pc, #104]	; (800bc24 <SDMMC_GetCmdResp3+0x78>)
 800bbba:	fba2 2303 	umull	r2, r3, r2, r3
 800bbbe:	0a5b      	lsrs	r3, r3, #9
 800bbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc4:	fb02 f303 	mul.w	r3, r2, r3
 800bbc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1e5a      	subs	r2, r3, #1
 800bbce:	60fa      	str	r2, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbd8:	e01b      	b.n	800bc12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0ef      	beq.n	800bbca <SDMMC_GetCmdResp3+0x1e>
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1ea      	bne.n	800bbca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2204      	movs	r2, #4
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc06:	2304      	movs	r3, #4
 800bc08:	e003      	b.n	800bc12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	22c5      	movs	r2, #197	; 0xc5
 800bc0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000000 	.word	0x20000000
 800bc24:	10624dd3 	.word	0x10624dd3

0800bc28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	460b      	mov	r3, r1
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc36:	4b35      	ldr	r3, [pc, #212]	; (800bd0c <SDMMC_GetCmdResp6+0xe4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a35      	ldr	r2, [pc, #212]	; (800bd10 <SDMMC_GetCmdResp6+0xe8>)
 800bc3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc40:	0a5b      	lsrs	r3, r3, #9
 800bc42:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc46:	fb02 f303 	mul.w	r3, r2, r3
 800bc4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	1e5a      	subs	r2, r3, #1
 800bc50:	61fa      	str	r2, [r7, #28]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d102      	bne.n	800bc5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc5a:	e052      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0ef      	beq.n	800bc4c <SDMMC_GetCmdResp6+0x24>
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1ea      	bne.n	800bc4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d004      	beq.n	800bc8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2204      	movs	r2, #4
 800bc86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc88:	2304      	movs	r3, #4
 800bc8a:	e03a      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d004      	beq.n	800bca2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e02f      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f7ff fc0e 	bl	800b4c4 <SDMMC_GetCommandResponse>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d001      	beq.n	800bcb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e025      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	22c5      	movs	r2, #197	; 0xc5
 800bcba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fc0d 	bl	800b4de <SDMMC_GetResponse>
 800bcc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d106      	bne.n	800bcde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e011      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcec:	e009      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcfc:	e001      	b.n	800bd02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20000000 	.word	0x20000000
 800bd10:	10624dd3 	.word	0x10624dd3

0800bd14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd1c:	4b22      	ldr	r3, [pc, #136]	; (800bda8 <SDMMC_GetCmdResp7+0x94>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a22      	ldr	r2, [pc, #136]	; (800bdac <SDMMC_GetCmdResp7+0x98>)
 800bd22:	fba2 2303 	umull	r2, r3, r2, r3
 800bd26:	0a5b      	lsrs	r3, r3, #9
 800bd28:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2c:	fb02 f303 	mul.w	r3, r2, r3
 800bd30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	60fa      	str	r2, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd40:	e02c      	b.n	800bd9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0ef      	beq.n	800bd32 <SDMMC_GetCmdResp7+0x1e>
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1ea      	bne.n	800bd32 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2204      	movs	r2, #4
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd6e:	2304      	movs	r3, #4
 800bd70:	e014      	b.n	800bd9c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d004      	beq.n	800bd88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e009      	b.n	800bd9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2240      	movs	r2, #64	; 0x40
 800bd98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd9a:	2300      	movs	r3, #0
  
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	20000000 	.word	0x20000000
 800bdac:	10624dd3 	.word	0x10624dd3

0800bdb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdb8:	4b11      	ldr	r3, [pc, #68]	; (800be00 <SDMMC_GetCmdError+0x50>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a11      	ldr	r2, [pc, #68]	; (800be04 <SDMMC_GetCmdError+0x54>)
 800bdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc2:	0a5b      	lsrs	r3, r3, #9
 800bdc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc8:	fb02 f303 	mul.w	r3, r2, r3
 800bdcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1e5a      	subs	r2, r3, #1
 800bdd2:	60fa      	str	r2, [r7, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d102      	bne.n	800bdde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bddc:	e009      	b.n	800bdf2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0f1      	beq.n	800bdce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	22c5      	movs	r2, #197	; 0xc5
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20000000 	.word	0x20000000
 800be04:	10624dd3 	.word	0x10624dd3

0800be08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be08:	b084      	sub	sp, #16
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	f107 001c 	add.w	r0, r7, #28
 800be16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d120      	bne.n	800be62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68da      	ldr	r2, [r3, #12]
 800be30:	4b20      	ldr	r3, [pc, #128]	; (800beb4 <USB_CoreInit+0xac>)
 800be32:	4013      	ands	r3, r2
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be46:	2b01      	cmp	r3, #1
 800be48:	d105      	bne.n	800be56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 fc0e 	bl	800d678 <USB_CoreReset>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
 800be60:	e010      	b.n	800be84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f001 fc02 	bl	800d678 <USB_CoreReset>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	2b01      	cmp	r3, #1
 800be88:	d10b      	bne.n	800bea2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f043 0206 	orr.w	r2, r3, #6
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f043 0220 	orr.w	r2, r3, #32
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800beae:	b004      	add	sp, #16
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	ffbdffbf 	.word	0xffbdffbf

0800beb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	4613      	mov	r3, r2
 800bec4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d165      	bne.n	800bf98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4a41      	ldr	r2, [pc, #260]	; (800bfd4 <USB_SetTurnaroundTime+0x11c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d906      	bls.n	800bee2 <USB_SetTurnaroundTime+0x2a>
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	4a40      	ldr	r2, [pc, #256]	; (800bfd8 <USB_SetTurnaroundTime+0x120>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d202      	bcs.n	800bee2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bedc:	230f      	movs	r3, #15
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e062      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4a3c      	ldr	r2, [pc, #240]	; (800bfd8 <USB_SetTurnaroundTime+0x120>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d306      	bcc.n	800bef8 <USB_SetTurnaroundTime+0x40>
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	4a3b      	ldr	r2, [pc, #236]	; (800bfdc <USB_SetTurnaroundTime+0x124>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d202      	bcs.n	800bef8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bef2:	230e      	movs	r3, #14
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	e057      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	4a38      	ldr	r2, [pc, #224]	; (800bfdc <USB_SetTurnaroundTime+0x124>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d306      	bcc.n	800bf0e <USB_SetTurnaroundTime+0x56>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4a37      	ldr	r2, [pc, #220]	; (800bfe0 <USB_SetTurnaroundTime+0x128>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d202      	bcs.n	800bf0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bf08:	230d      	movs	r3, #13
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	e04c      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4a33      	ldr	r2, [pc, #204]	; (800bfe0 <USB_SetTurnaroundTime+0x128>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d306      	bcc.n	800bf24 <USB_SetTurnaroundTime+0x6c>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	4a32      	ldr	r2, [pc, #200]	; (800bfe4 <USB_SetTurnaroundTime+0x12c>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d802      	bhi.n	800bf24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bf1e:	230c      	movs	r3, #12
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	e041      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4a2f      	ldr	r2, [pc, #188]	; (800bfe4 <USB_SetTurnaroundTime+0x12c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d906      	bls.n	800bf3a <USB_SetTurnaroundTime+0x82>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4a2e      	ldr	r2, [pc, #184]	; (800bfe8 <USB_SetTurnaroundTime+0x130>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d802      	bhi.n	800bf3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf34:	230b      	movs	r3, #11
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e036      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	4a2a      	ldr	r2, [pc, #168]	; (800bfe8 <USB_SetTurnaroundTime+0x130>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d906      	bls.n	800bf50 <USB_SetTurnaroundTime+0x98>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4a29      	ldr	r2, [pc, #164]	; (800bfec <USB_SetTurnaroundTime+0x134>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d802      	bhi.n	800bf50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bf4a:	230a      	movs	r3, #10
 800bf4c:	617b      	str	r3, [r7, #20]
 800bf4e:	e02b      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	4a26      	ldr	r2, [pc, #152]	; (800bfec <USB_SetTurnaroundTime+0x134>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d906      	bls.n	800bf66 <USB_SetTurnaroundTime+0xae>
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	4a25      	ldr	r2, [pc, #148]	; (800bff0 <USB_SetTurnaroundTime+0x138>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d202      	bcs.n	800bf66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf60:	2309      	movs	r3, #9
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	e020      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	4a21      	ldr	r2, [pc, #132]	; (800bff0 <USB_SetTurnaroundTime+0x138>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d306      	bcc.n	800bf7c <USB_SetTurnaroundTime+0xc4>
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	4a20      	ldr	r2, [pc, #128]	; (800bff4 <USB_SetTurnaroundTime+0x13c>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d802      	bhi.n	800bf7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf76:	2308      	movs	r3, #8
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	e015      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <USB_SetTurnaroundTime+0x13c>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d906      	bls.n	800bf92 <USB_SetTurnaroundTime+0xda>
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	4a1c      	ldr	r2, [pc, #112]	; (800bff8 <USB_SetTurnaroundTime+0x140>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d202      	bcs.n	800bf92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf8c:	2307      	movs	r3, #7
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	e00a      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf92:	2306      	movs	r3, #6
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e007      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf9e:	2309      	movs	r3, #9
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	e001      	b.n	800bfa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bfa4:	2309      	movs	r3, #9
 800bfa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	029b      	lsls	r3, r3, #10
 800bfbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	00d8acbf 	.word	0x00d8acbf
 800bfd8:	00e4e1c0 	.word	0x00e4e1c0
 800bfdc:	00f42400 	.word	0x00f42400
 800bfe0:	01067380 	.word	0x01067380
 800bfe4:	011a499f 	.word	0x011a499f
 800bfe8:	01312cff 	.word	0x01312cff
 800bfec:	014ca43f 	.word	0x014ca43f
 800bff0:	016e3600 	.word	0x016e3600
 800bff4:	01a6ab1f 	.word	0x01a6ab1f
 800bff8:	01e84800 	.word	0x01e84800

0800bffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	f043 0201 	orr.w	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	f023 0201 	bic.w	r2, r3, #1
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d115      	bne.n	800c08e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c06e:	2001      	movs	r0, #1
 800c070:	f7f7 f9e0 	bl	8003434 <HAL_Delay>
      ms++;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 fa6c 	bl	800d558 <USB_GetMode>
 800c080:	4603      	mov	r3, r0
 800c082:	2b01      	cmp	r3, #1
 800c084:	d01e      	beq.n	800c0c4 <USB_SetCurrentMode+0x84>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b31      	cmp	r3, #49	; 0x31
 800c08a:	d9f0      	bls.n	800c06e <USB_SetCurrentMode+0x2e>
 800c08c:	e01a      	b.n	800c0c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d115      	bne.n	800c0c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0a0:	2001      	movs	r0, #1
 800c0a2:	f7f7 f9c7 	bl	8003434 <HAL_Delay>
      ms++;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 fa53 	bl	800d558 <USB_GetMode>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <USB_SetCurrentMode+0x84>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b31      	cmp	r3, #49	; 0x31
 800c0bc:	d9f0      	bls.n	800c0a0 <USB_SetCurrentMode+0x60>
 800c0be:	e001      	b.n	800c0c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e005      	b.n	800c0d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b32      	cmp	r3, #50	; 0x32
 800c0c8:	d101      	bne.n	800c0ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0d8:	b084      	sub	sp, #16
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b086      	sub	sp, #24
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c0e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	613b      	str	r3, [r7, #16]
 800c0f6:	e009      	b.n	800c10c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3340      	adds	r3, #64	; 0x40
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	2200      	movs	r2, #0
 800c104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	3301      	adds	r3, #1
 800c10a:	613b      	str	r3, [r7, #16]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b0e      	cmp	r3, #14
 800c110:	d9f2      	bls.n	800c0f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11c      	bne.n	800c152 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c126:	f043 0302 	orr.w	r3, r3, #2
 800c12a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	e005      	b.n	800c15e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c164:	461a      	mov	r2, r3
 800c166:	2300      	movs	r3, #0
 800c168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c170:	4619      	mov	r1, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c178:	461a      	mov	r2, r3
 800c17a:	680b      	ldr	r3, [r1, #0]
 800c17c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	2b01      	cmp	r3, #1
 800c182:	d10c      	bne.n	800c19e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c18a:	2100      	movs	r1, #0
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f965 	bl	800c45c <USB_SetDevSpeed>
 800c192:	e008      	b.n	800c1a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c194:	2101      	movs	r1, #1
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f960 	bl	800c45c <USB_SetDevSpeed>
 800c19c:	e003      	b.n	800c1a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c19e:	2103      	movs	r1, #3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f95b 	bl	800c45c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1a6:	2110      	movs	r1, #16
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f8f3 	bl	800c394 <USB_FlushTxFifo>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f91f 	bl	800c3fc <USB_FlushRxFifo>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1da:	461a      	mov	r2, r3
 800c1dc:	2300      	movs	r3, #0
 800c1de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	e043      	b.n	800c27a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c208:	d118      	bne.n	800c23c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21c:	461a      	mov	r2, r3
 800c21e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	e013      	b.n	800c24e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c232:	461a      	mov	r2, r3
 800c234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	e008      	b.n	800c24e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	461a      	mov	r2, r3
 800c24a:	2300      	movs	r3, #0
 800c24c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25a:	461a      	mov	r2, r3
 800c25c:	2300      	movs	r3, #0
 800c25e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26c:	461a      	mov	r2, r3
 800c26e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	3301      	adds	r3, #1
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d3b7      	bcc.n	800c1f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	e043      	b.n	800c310 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c29a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c29e:	d118      	bne.n	800c2d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	e013      	b.n	800c2e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	e008      	b.n	800c2e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2de:	461a      	mov	r2, r3
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	015a      	lsls	r2, r3, #5
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c302:	461a      	mov	r2, r3
 800c304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	3301      	adds	r3, #1
 800c30e:	613b      	str	r3, [r7, #16]
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	429a      	cmp	r2, r3
 800c316:	d3b7      	bcc.n	800c288 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c32a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	f043 0210 	orr.w	r2, r3, #16
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699a      	ldr	r2, [r3, #24]
 800c350:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <USB_DevInit+0x2b4>)
 800c352:	4313      	orrs	r3, r2
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d005      	beq.n	800c36a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	f043 0208 	orr.w	r2, r3, #8
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d105      	bne.n	800c37c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <USB_DevInit+0x2b8>)
 800c376:	4313      	orrs	r3, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c388:	b004      	add	sp, #16
 800c38a:	4770      	bx	lr
 800c38c:	803c3800 	.word	0x803c3800
 800c390:	40000004 	.word	0x40000004

0800c394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4a13      	ldr	r2, [pc, #76]	; (800c3f8 <USB_FlushTxFifo+0x64>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d901      	bls.n	800c3b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e01b      	b.n	800c3ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	daf2      	bge.n	800c3a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	019b      	lsls	r3, r3, #6
 800c3c4:	f043 0220 	orr.w	r2, r3, #32
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <USB_FlushTxFifo+0x64>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d901      	bls.n	800c3de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e006      	b.n	800c3ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	d0f0      	beq.n	800c3cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	00030d40 	.word	0x00030d40

0800c3fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3301      	adds	r3, #1
 800c40c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	4a11      	ldr	r2, [pc, #68]	; (800c458 <USB_FlushRxFifo+0x5c>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d901      	bls.n	800c41a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e018      	b.n	800c44c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	daf2      	bge.n	800c408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c422:	2300      	movs	r3, #0
 800c424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2210      	movs	r2, #16
 800c42a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3301      	adds	r3, #1
 800c430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	4a08      	ldr	r2, [pc, #32]	; (800c458 <USB_FlushRxFifo+0x5c>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d901      	bls.n	800c43e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c43a:	2303      	movs	r3, #3
 800c43c:	e006      	b.n	800c44c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	f003 0310 	and.w	r3, r3, #16
 800c446:	2b10      	cmp	r3, #16
 800c448:	d0f0      	beq.n	800c42c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	00030d40 	.word	0x00030d40

0800c45c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c47c:	4313      	orrs	r3, r2
 800c47e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c48e:	b480      	push	{r7}
 800c490:	b087      	sub	sp, #28
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f003 0306 	and.w	r3, r3, #6
 800c4a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	75fb      	strb	r3, [r7, #23]
 800c4b2:	e00a      	b.n	800c4ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d002      	beq.n	800c4c0 <USB_GetDevSpeed+0x32>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b06      	cmp	r3, #6
 800c4be:	d102      	bne.n	800c4c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	75fb      	strb	r3, [r7, #23]
 800c4c4:	e001      	b.n	800c4ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c4c6:	230f      	movs	r3, #15
 800c4c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	785b      	ldrb	r3, [r3, #1]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d139      	bne.n	800c568 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4fa:	69da      	ldr	r2, [r3, #28]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f003 030f 	and.w	r3, r3, #15
 800c504:	2101      	movs	r1, #1
 800c506:	fa01 f303 	lsl.w	r3, r1, r3
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	68f9      	ldr	r1, [r7, #12]
 800c50e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c512:	4313      	orrs	r3, r2
 800c514:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d153      	bne.n	800c5d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	791b      	ldrb	r3, [r3, #4]
 800c546:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c548:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	059b      	lsls	r3, r3, #22
 800c54e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c550:	431a      	orrs	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	0159      	lsls	r1, r3, #5
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	440b      	add	r3, r1
 800c55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55e:	4619      	mov	r1, r3
 800c560:	4b20      	ldr	r3, [pc, #128]	; (800c5e4 <USB_ActivateEndpoint+0x10c>)
 800c562:	4313      	orrs	r3, r2
 800c564:	600b      	str	r3, [r1, #0]
 800c566:	e035      	b.n	800c5d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c56e:	69da      	ldr	r2, [r3, #28]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	f003 030f 	and.w	r3, r3, #15
 800c578:	2101      	movs	r1, #1
 800c57a:	fa01 f303 	lsl.w	r3, r1, r3
 800c57e:	041b      	lsls	r3, r3, #16
 800c580:	68f9      	ldr	r1, [r7, #12]
 800c582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c586:	4313      	orrs	r3, r2
 800c588:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	015a      	lsls	r2, r3, #5
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	4413      	add	r3, r2
 800c592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d119      	bne.n	800c5d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	791b      	ldrb	r3, [r3, #4]
 800c5ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	431a      	orrs	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	0159      	lsls	r1, r3, #5
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	440b      	add	r3, r1
 800c5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <USB_ActivateEndpoint+0x10c>)
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	10008000 	.word	0x10008000

0800c5e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	785b      	ldrb	r3, [r3, #1]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d161      	bne.n	800c6c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c61a:	d11f      	bne.n	800c65c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	0151      	lsls	r1, r2, #5
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	440a      	add	r2, r1
 800c632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c63a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	015a      	lsls	r2, r3, #5
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4413      	add	r3, r2
 800c644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	0151      	lsls	r1, r2, #5
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	440a      	add	r2, r1
 800c652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c65a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	f003 030f 	and.w	r3, r3, #15
 800c66c:	2101      	movs	r1, #1
 800c66e:	fa01 f303 	lsl.w	r3, r1, r3
 800c672:	b29b      	uxth	r3, r3
 800c674:	43db      	mvns	r3, r3
 800c676:	68f9      	ldr	r1, [r7, #12]
 800c678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c67c:	4013      	ands	r3, r2
 800c67e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c686:	69da      	ldr	r2, [r3, #28]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	2101      	movs	r1, #1
 800c692:	fa01 f303 	lsl.w	r3, r1, r3
 800c696:	b29b      	uxth	r3, r3
 800c698:	43db      	mvns	r3, r3
 800c69a:	68f9      	ldr	r1, [r7, #12]
 800c69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	0159      	lsls	r1, r3, #5
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	440b      	add	r3, r1
 800c6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4b35      	ldr	r3, [pc, #212]	; (800c798 <USB_DeactivateEndpoint+0x1b0>)
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	600b      	str	r3, [r1, #0]
 800c6c6:	e060      	b.n	800c78a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	015a      	lsls	r2, r3, #5
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6de:	d11f      	bne.n	800c720 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c71a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c71e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	f003 030f 	and.w	r3, r3, #15
 800c730:	2101      	movs	r1, #1
 800c732:	fa01 f303 	lsl.w	r3, r1, r3
 800c736:	041b      	lsls	r3, r3, #16
 800c738:	43db      	mvns	r3, r3
 800c73a:	68f9      	ldr	r1, [r7, #12]
 800c73c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c740:	4013      	ands	r3, r2
 800c742:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c74a:	69da      	ldr	r2, [r3, #28]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f003 030f 	and.w	r3, r3, #15
 800c754:	2101      	movs	r1, #1
 800c756:	fa01 f303 	lsl.w	r3, r1, r3
 800c75a:	041b      	lsls	r3, r3, #16
 800c75c:	43db      	mvns	r3, r3
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c764:	4013      	ands	r3, r2
 800c766:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	0159      	lsls	r1, r3, #5
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	440b      	add	r3, r1
 800c77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c782:	4619      	mov	r1, r3
 800c784:	4b05      	ldr	r3, [pc, #20]	; (800c79c <USB_DeactivateEndpoint+0x1b4>)
 800c786:	4013      	ands	r3, r2
 800c788:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr
 800c798:	ec337800 	.word	0xec337800
 800c79c:	eff37800 	.word	0xeff37800

0800c7a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08a      	sub	sp, #40	; 0x28
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	785b      	ldrb	r3, [r3, #1]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	f040 8163 	bne.w	800ca88 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d132      	bne.n	800c830 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d6:	691a      	ldr	r2, [r3, #16]
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	0159      	lsls	r1, r3, #5
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	440b      	add	r3, r1
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4ba5      	ldr	r3, [pc, #660]	; (800ca7c <USB_EPStartXfer+0x2dc>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	0151      	lsls	r1, r2, #5
 800c7fe:	69fa      	ldr	r2, [r7, #28]
 800c800:	440a      	add	r2, r1
 800c802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c80a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c818:	691a      	ldr	r2, [r3, #16]
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	0159      	lsls	r1, r3, #5
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	440b      	add	r3, r1
 800c822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c826:	4619      	mov	r1, r3
 800c828:	4b95      	ldr	r3, [pc, #596]	; (800ca80 <USB_EPStartXfer+0x2e0>)
 800c82a:	4013      	ands	r3, r2
 800c82c:	610b      	str	r3, [r1, #16]
 800c82e:	e074      	b.n	800c91a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83c:	691a      	ldr	r2, [r3, #16]
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	0159      	lsls	r1, r3, #5
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	440b      	add	r3, r1
 800c846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84a:	4619      	mov	r1, r3
 800c84c:	4b8c      	ldr	r3, [pc, #560]	; (800ca80 <USB_EPStartXfer+0x2e0>)
 800c84e:	4013      	ands	r3, r2
 800c850:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85e:	691a      	ldr	r2, [r3, #16]
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	0159      	lsls	r1, r3, #5
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	440b      	add	r3, r1
 800c868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86c:	4619      	mov	r1, r3
 800c86e:	4b83      	ldr	r3, [pc, #524]	; (800ca7c <USB_EPStartXfer+0x2dc>)
 800c870:	4013      	ands	r3, r2
 800c872:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c880:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6999      	ldr	r1, [r3, #24]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	440b      	add	r3, r1
 800c88c:	1e59      	subs	r1, r3, #1
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	fbb1 f3f3 	udiv	r3, r1, r3
 800c896:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c898:	4b7a      	ldr	r3, [pc, #488]	; (800ca84 <USB_EPStartXfer+0x2e4>)
 800c89a:	400b      	ands	r3, r1
 800c89c:	69b9      	ldr	r1, [r7, #24]
 800c89e:	0148      	lsls	r0, r1, #5
 800c8a0:	69f9      	ldr	r1, [r7, #28]
 800c8a2:	4401      	add	r1, r0
 800c8a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b8:	691a      	ldr	r2, [r3, #16]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8c2:	69b9      	ldr	r1, [r7, #24]
 800c8c4:	0148      	lsls	r0, r1, #5
 800c8c6:	69f9      	ldr	r1, [r7, #28]
 800c8c8:	4401      	add	r1, r0
 800c8ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	791b      	ldrb	r3, [r3, #4]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d11f      	bne.n	800c91a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	015a      	lsls	r2, r3, #5
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	69ba      	ldr	r2, [r7, #24]
 800c8ea:	0151      	lsls	r1, r2, #5
 800c8ec:	69fa      	ldr	r2, [r7, #28]
 800c8ee:	440a      	add	r2, r1
 800c8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c8f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	69fa      	ldr	r2, [r7, #28]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c918:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d14b      	bne.n	800c9b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d009      	beq.n	800c93c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	015a      	lsls	r2, r3, #5
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	4413      	add	r3, r2
 800c930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c934:	461a      	mov	r2, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	791b      	ldrb	r3, [r3, #4]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d128      	bne.n	800c996 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d110      	bne.n	800c976 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	0151      	lsls	r1, r2, #5
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	440a      	add	r2, r1
 800c96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c96e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	e00f      	b.n	800c996 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	015a      	lsls	r2, r3, #5
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	0151      	lsls	r1, r2, #5
 800c988:	69fa      	ldr	r2, [r7, #28]
 800c98a:	440a      	add	r2, r1
 800c98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c994:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	69ba      	ldr	r2, [r7, #24]
 800c9a6:	0151      	lsls	r1, r2, #5
 800c9a8:	69fa      	ldr	r2, [r7, #28]
 800c9aa:	440a      	add	r2, r1
 800c9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	e137      	b.n	800cc28 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	0151      	lsls	r1, r2, #5
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	440a      	add	r2, r1
 800c9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	791b      	ldrb	r3, [r3, #4]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d015      	beq.n	800ca0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 811f 	beq.w	800cc28 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f003 030f 	and.w	r3, r3, #15
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca06:	4313      	orrs	r3, r2
 800ca08:	634b      	str	r3, [r1, #52]	; 0x34
 800ca0a:	e10d      	b.n	800cc28 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d110      	bne.n	800ca3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	0151      	lsls	r1, r2, #5
 800ca2e:	69fa      	ldr	r2, [r7, #28]
 800ca30:	440a      	add	r2, r1
 800ca32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	e00f      	b.n	800ca5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	69ba      	ldr	r2, [r7, #24]
 800ca4e:	0151      	lsls	r1, r2, #5
 800ca50:	69fa      	ldr	r2, [r7, #28]
 800ca52:	440a      	add	r2, r1
 800ca54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6919      	ldr	r1, [r3, #16]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	781a      	ldrb	r2, [r3, #0]
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	b298      	uxth	r0, r3
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	4603      	mov	r3, r0
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 faea 	bl	800d04c <USB_WritePacket>
 800ca78:	e0d6      	b.n	800cc28 <USB_EPStartXfer+0x488>
 800ca7a:	bf00      	nop
 800ca7c:	e007ffff 	.word	0xe007ffff
 800ca80:	fff80000 	.word	0xfff80000
 800ca84:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca94:	691a      	ldr	r2, [r3, #16]
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	0159      	lsls	r1, r3, #5
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	440b      	add	r3, r1
 800ca9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa2:	4619      	mov	r1, r3
 800caa4:	4b63      	ldr	r3, [pc, #396]	; (800cc34 <USB_EPStartXfer+0x494>)
 800caa6:	4013      	ands	r3, r2
 800caa8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	691a      	ldr	r2, [r3, #16]
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	0159      	lsls	r1, r3, #5
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	440b      	add	r3, r1
 800cac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac4:	4619      	mov	r1, r3
 800cac6:	4b5c      	ldr	r3, [pc, #368]	; (800cc38 <USB_EPStartXfer+0x498>)
 800cac8:	4013      	ands	r3, r2
 800caca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d123      	bne.n	800cb1c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	015a      	lsls	r2, r3, #5
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	4413      	add	r3, r2
 800cadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae0:	691a      	ldr	r2, [r3, #16]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caea:	69b9      	ldr	r1, [r7, #24]
 800caec:	0148      	lsls	r0, r1, #5
 800caee:	69f9      	ldr	r1, [r7, #28]
 800caf0:	4401      	add	r1, r0
 800caf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800caf6:	4313      	orrs	r3, r2
 800caf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	015a      	lsls	r2, r3, #5
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4413      	add	r3, r2
 800cb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	0151      	lsls	r1, r2, #5
 800cb0c:	69fa      	ldr	r2, [r7, #28]
 800cb0e:	440a      	add	r2, r1
 800cb10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb18:	6113      	str	r3, [r2, #16]
 800cb1a:	e037      	b.n	800cb8c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	1e5a      	subs	r2, r3, #1
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	8afa      	ldrh	r2, [r7, #22]
 800cb38:	fb03 f202 	mul.w	r2, r3, r2
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	691a      	ldr	r2, [r3, #16]
 800cb4e:	8afb      	ldrh	r3, [r7, #22]
 800cb50:	04d9      	lsls	r1, r3, #19
 800cb52:	4b3a      	ldr	r3, [pc, #232]	; (800cc3c <USB_EPStartXfer+0x49c>)
 800cb54:	400b      	ands	r3, r1
 800cb56:	69b9      	ldr	r1, [r7, #24]
 800cb58:	0148      	lsls	r0, r1, #5
 800cb5a:	69f9      	ldr	r1, [r7, #28]
 800cb5c:	4401      	add	r1, r0
 800cb5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb62:	4313      	orrs	r3, r2
 800cb64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	691a      	ldr	r2, [r3, #16]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb7c:	69b9      	ldr	r1, [r7, #24]
 800cb7e:	0148      	lsls	r0, r1, #5
 800cb80:	69f9      	ldr	r1, [r7, #28]
 800cb82:	4401      	add	r1, r0
 800cb84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d10d      	bne.n	800cbae <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	6919      	ldr	r1, [r3, #16]
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbaa:	460a      	mov	r2, r1
 800cbac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	791b      	ldrb	r3, [r3, #4]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d128      	bne.n	800cc08 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d110      	bne.n	800cbe8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	0151      	lsls	r1, r2, #5
 800cbd8:	69fa      	ldr	r2, [r7, #28]
 800cbda:	440a      	add	r2, r1
 800cbdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	e00f      	b.n	800cc08 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	015a      	lsls	r2, r3, #5
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	4413      	add	r3, r2
 800cbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	0151      	lsls	r1, r2, #5
 800cbfa:	69fa      	ldr	r2, [r7, #28]
 800cbfc:	440a      	add	r2, r1
 800cbfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	0151      	lsls	r1, r2, #5
 800cc1a:	69fa      	ldr	r2, [r7, #28]
 800cc1c:	440a      	add	r2, r1
 800cc1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	fff80000 	.word	0xfff80000
 800cc38:	e007ffff 	.word	0xe007ffff
 800cc3c:	1ff80000 	.word	0x1ff80000

0800cc40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	f040 80ce 	bne.w	800cdfe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d132      	bne.n	800ccd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc76:	691a      	ldr	r2, [r3, #16]
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	0159      	lsls	r1, r3, #5
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	440b      	add	r3, r1
 800cc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc84:	4619      	mov	r1, r3
 800cc86:	4b9a      	ldr	r3, [pc, #616]	; (800cef0 <USB_EP0StartXfer+0x2b0>)
 800cc88:	4013      	ands	r3, r2
 800cc8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	0151      	lsls	r1, r2, #5
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	440a      	add	r2, r1
 800cca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb8:	691a      	ldr	r2, [r3, #16]
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	0159      	lsls	r1, r3, #5
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	440b      	add	r3, r1
 800ccc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4b8a      	ldr	r3, [pc, #552]	; (800cef4 <USB_EP0StartXfer+0x2b4>)
 800ccca:	4013      	ands	r3, r2
 800cccc:	610b      	str	r3, [r1, #16]
 800ccce:	e04e      	b.n	800cd6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccdc:	691a      	ldr	r2, [r3, #16]
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	0159      	lsls	r1, r3, #5
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	440b      	add	r3, r1
 800cce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccea:	4619      	mov	r1, r3
 800ccec:	4b81      	ldr	r3, [pc, #516]	; (800cef4 <USB_EP0StartXfer+0x2b4>)
 800ccee:	4013      	ands	r3, r2
 800ccf0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	015a      	lsls	r2, r3, #5
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfe:	691a      	ldr	r2, [r3, #16]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	0159      	lsls	r1, r3, #5
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	440b      	add	r3, r1
 800cd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4b78      	ldr	r3, [pc, #480]	; (800cef0 <USB_EP0StartXfer+0x2b0>)
 800cd10:	4013      	ands	r3, r2
 800cd12:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	699a      	ldr	r2, [r3, #24]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d903      	bls.n	800cd28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	68da      	ldr	r2, [r3, #12]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	0151      	lsls	r1, r2, #5
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	440a      	add	r2, r1
 800cd3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	015a      	lsls	r2, r3, #5
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	4413      	add	r3, r2
 800cd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd54:	691a      	ldr	r2, [r3, #16]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd5e:	6939      	ldr	r1, [r7, #16]
 800cd60:	0148      	lsls	r0, r1, #5
 800cd62:	6979      	ldr	r1, [r7, #20]
 800cd64:	4401      	add	r1, r0
 800cd66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cd6e:	79fb      	ldrb	r3, [r7, #7]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d11e      	bne.n	800cdb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d009      	beq.n	800cd90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd88:	461a      	mov	r2, r3
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	015a      	lsls	r2, r3, #5
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	4413      	add	r3, r2
 800cd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	0151      	lsls	r1, r2, #5
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	440a      	add	r2, r1
 800cda6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	e097      	b.n	800cee2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	015a      	lsls	r2, r3, #5
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	4413      	add	r3, r2
 800cdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	0151      	lsls	r1, r2, #5
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	440a      	add	r2, r1
 800cdc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f000 8083 	beq.w	800cee2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cde2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	2101      	movs	r1, #1
 800cdee:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf2:	6979      	ldr	r1, [r7, #20]
 800cdf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	634b      	str	r3, [r1, #52]	; 0x34
 800cdfc:	e071      	b.n	800cee2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0a:	691a      	ldr	r2, [r3, #16]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	0159      	lsls	r1, r3, #5
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	440b      	add	r3, r1
 800ce14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce18:	4619      	mov	r1, r3
 800ce1a:	4b36      	ldr	r3, [pc, #216]	; (800cef4 <USB_EP0StartXfer+0x2b4>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2c:	691a      	ldr	r2, [r3, #16]
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	0159      	lsls	r1, r3, #5
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	440b      	add	r3, r1
 800ce36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4b2c      	ldr	r3, [pc, #176]	; (800cef0 <USB_EP0StartXfer+0x2b0>)
 800ce3e:	4013      	ands	r3, r2
 800ce40:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d003      	beq.n	800ce52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	0151      	lsls	r1, r2, #5
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	440a      	add	r2, r1
 800ce70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	015a      	lsls	r2, r3, #5
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce86:	691a      	ldr	r2, [r3, #16]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	69db      	ldr	r3, [r3, #28]
 800ce8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce90:	6939      	ldr	r1, [r7, #16]
 800ce92:	0148      	lsls	r0, r1, #5
 800ce94:	6979      	ldr	r1, [r7, #20]
 800ce96:	4401      	add	r1, r0
 800ce98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d10d      	bne.n	800cec2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d009      	beq.n	800cec2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6919      	ldr	r1, [r3, #16]
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	015a      	lsls	r2, r3, #5
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	4413      	add	r3, r2
 800ceba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cebe:	460a      	mov	r2, r1
 800cec0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	0151      	lsls	r1, r2, #5
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	440a      	add	r2, r1
 800ced8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cedc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cee0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	371c      	adds	r7, #28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	e007ffff 	.word	0xe007ffff
 800cef4:	fff80000 	.word	0xfff80000

0800cef8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d14a      	bne.n	800cfac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	015a      	lsls	r2, r3, #5
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	4413      	add	r3, r2
 800cf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf2e:	f040 8086 	bne.w	800d03e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	015a      	lsls	r2, r3, #5
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	7812      	ldrb	r2, [r2, #0]
 800cf46:	0151      	lsls	r1, r2, #5
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	7812      	ldrb	r2, [r2, #0]
 800cf6a:	0151      	lsls	r1, r2, #5
 800cf6c:	693a      	ldr	r2, [r7, #16]
 800cf6e:	440a      	add	r2, r1
 800cf70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d902      	bls.n	800cf90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf8e:	e056      	b.n	800d03e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	015a      	lsls	r2, r3, #5
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	4413      	add	r3, r2
 800cf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfa8:	d0e7      	beq.n	800cf7a <USB_EPStopXfer+0x82>
 800cfaa:	e048      	b.n	800d03e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	015a      	lsls	r2, r3, #5
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfc4:	d13b      	bne.n	800d03e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	0151      	lsls	r1, r2, #5
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	440a      	add	r2, r1
 800cfe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cfe8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	7812      	ldrb	r2, [r2, #0]
 800cffe:	0151      	lsls	r1, r2, #5
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	440a      	add	r2, r1
 800d004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d00c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3301      	adds	r3, #1
 800d012:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f242 7210 	movw	r2, #10000	; 0x2710
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d902      	bls.n	800d024 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	75fb      	strb	r3, [r7, #23]
          break;
 800d022:	e00c      	b.n	800d03e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	015a      	lsls	r2, r3, #5
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	4413      	add	r3, r2
 800d02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d03c:	d0e7      	beq.n	800d00e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d040:	4618      	mov	r0, r3
 800d042:	371c      	adds	r7, #28
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b089      	sub	sp, #36	; 0x24
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	4611      	mov	r1, r2
 800d058:	461a      	mov	r2, r3
 800d05a:	460b      	mov	r3, r1
 800d05c:	71fb      	strb	r3, [r7, #7]
 800d05e:	4613      	mov	r3, r2
 800d060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d06a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d123      	bne.n	800d0ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d072:	88bb      	ldrh	r3, [r7, #4]
 800d074:	3303      	adds	r3, #3
 800d076:	089b      	lsrs	r3, r3, #2
 800d078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d07a:	2300      	movs	r3, #0
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	e018      	b.n	800d0b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	031a      	lsls	r2, r3, #12
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	4413      	add	r3, r2
 800d088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08c:	461a      	mov	r2, r3
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	3301      	adds	r3, #1
 800d098:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	3301      	adds	r3, #1
 800d09e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	61bb      	str	r3, [r7, #24]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d3e2      	bcc.n	800d080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3724      	adds	r7, #36	; 0x24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b08b      	sub	sp, #44	; 0x2c
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d0de:	88fb      	ldrh	r3, [r7, #6]
 800d0e0:	089b      	lsrs	r3, r3, #2
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d0e6:	88fb      	ldrh	r3, [r7, #6]
 800d0e8:	f003 0303 	and.w	r3, r3, #3
 800d0ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	623b      	str	r3, [r7, #32]
 800d0f2:	e014      	b.n	800d11e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	3301      	adds	r3, #1
 800d104:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	3301      	adds	r3, #1
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	3301      	adds	r3, #1
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	3301      	adds	r3, #1
 800d116:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	3301      	adds	r3, #1
 800d11c:	623b      	str	r3, [r7, #32]
 800d11e:	6a3a      	ldr	r2, [r7, #32]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	429a      	cmp	r2, r3
 800d124:	d3e6      	bcc.n	800d0f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d126:	8bfb      	ldrh	r3, [r7, #30]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01e      	beq.n	800d16a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d136:	461a      	mov	r2, r3
 800d138:	f107 0310 	add.w	r3, r7, #16
 800d13c:	6812      	ldr	r2, [r2, #0]
 800d13e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	b2db      	uxtb	r3, r3
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	fa22 f303 	lsr.w	r3, r2, r3
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	701a      	strb	r2, [r3, #0]
      i++;
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	3301      	adds	r3, #1
 800d156:	623b      	str	r3, [r7, #32]
      pDest++;
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	3301      	adds	r3, #1
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d15e:	8bfb      	ldrh	r3, [r7, #30]
 800d160:	3b01      	subs	r3, #1
 800d162:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d164:	8bfb      	ldrh	r3, [r7, #30]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1ea      	bne.n	800d140 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	372c      	adds	r7, #44	; 0x2c
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	785b      	ldrb	r3, [r3, #1]
 800d190:	2b01      	cmp	r3, #1
 800d192:	d12c      	bne.n	800d1ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	015a      	lsls	r2, r3, #5
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	db12      	blt.n	800d1cc <USB_EPSetStall+0x54>
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00f      	beq.n	800d1cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	0151      	lsls	r1, r2, #5
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	440a      	add	r2, r1
 800d1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	0151      	lsls	r1, r2, #5
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	440a      	add	r2, r1
 800d1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	e02b      	b.n	800d246 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	015a      	lsls	r2, r3, #5
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	db12      	blt.n	800d226 <USB_EPSetStall+0xae>
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00f      	beq.n	800d226 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	015a      	lsls	r2, r3, #5
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	4413      	add	r3, r2
 800d20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	0151      	lsls	r1, r2, #5
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	440a      	add	r2, r1
 800d21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d224:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	0151      	lsls	r1, r2, #5
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	440a      	add	r2, r1
 800d23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d244:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d128      	bne.n	800d2c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	015a      	lsls	r2, r3, #5
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	4413      	add	r3, r2
 800d278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	0151      	lsls	r1, r2, #5
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	440a      	add	r2, r1
 800d286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d28a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d28e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	791b      	ldrb	r3, [r3, #4]
 800d294:	2b03      	cmp	r3, #3
 800d296:	d003      	beq.n	800d2a0 <USB_EPClearStall+0x4c>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	791b      	ldrb	r3, [r3, #4]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d138      	bne.n	800d312 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	015a      	lsls	r2, r3, #5
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	0151      	lsls	r1, r2, #5
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	440a      	add	r2, r1
 800d2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	e027      	b.n	800d312 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	0151      	lsls	r1, r2, #5
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d2e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	791b      	ldrb	r3, [r3, #4]
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d003      	beq.n	800d2f2 <USB_EPClearStall+0x9e>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	791b      	ldrb	r3, [r3, #4]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d10f      	bne.n	800d312 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	0151      	lsls	r1, r2, #5
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	440a      	add	r2, r1
 800d308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d30c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d310:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d33e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d342:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	011b      	lsls	r3, r3, #4
 800d350:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d354:	68f9      	ldr	r1, [r7, #12]
 800d356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d35a:	4313      	orrs	r3, r2
 800d35c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d386:	f023 0303 	bic.w	r3, r3, #3
 800d38a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d39a:	f023 0302 	bic.w	r3, r3, #2
 800d39e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b085      	sub	sp, #20
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3c8:	f023 0303 	bic.w	r3, r3, #3
 800d3cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3dc:	f043 0302 	orr.w	r3, r3, #2
 800d3e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	4013      	ands	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d408:	68fb      	ldr	r3, [r7, #12]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d416:	b480      	push	{r7}
 800d418:	b085      	sub	sp, #20
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d426:	78fb      	ldrb	r3, [r7, #3]
 800d428:	015a      	lsls	r2, r3, #5
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	4413      	add	r3, r2
 800d42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	015a      	lsls	r2, r3, #5
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4413      	add	r3, r2
 800d43e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	4013      	ands	r3, r2
 800d448:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d44a:	68bb      	ldr	r3, [r7, #8]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3714      	adds	r7, #20
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d474:	69db      	ldr	r3, [r3, #28]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	4013      	ands	r3, r2
 800d47a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	0c1b      	lsrs	r3, r3, #16
}
 800d480:	4618      	mov	r0, r3
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	b29b      	uxth	r3, r3
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d4ee:	68bb      	ldr	r3, [r7, #8]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d51e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	f003 030f 	and.w	r3, r3, #15
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	fa22 f303 	lsr.w	r3, r2, r3
 800d52c:	01db      	lsls	r3, r3, #7
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	4313      	orrs	r3, r2
 800d534:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	4013      	ands	r3, r2
 800d548:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d54a:	68bb      	ldr	r3, [r7, #8]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	371c      	adds	r7, #28
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	f003 0301 	and.w	r3, r3, #1
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58e:	4619      	mov	r1, r3
 800d590:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <USB_ActivateSetup+0x44>)
 800d592:	4013      	ands	r3, r2
 800d594:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	fffff800 	.word	0xfffff800

0800d5bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	333c      	adds	r3, #60	; 0x3c
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	4a26      	ldr	r2, [pc, #152]	; (800d674 <USB_EP0_OutStart+0xb8>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d90a      	bls.n	800d5f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5f0:	d101      	bne.n	800d5f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e037      	b.n	800d666 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	2300      	movs	r3, #0
 800d600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d624:	f043 0318 	orr.w	r3, r3, #24
 800d628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d638:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d63c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d10f      	bne.n	800d664 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64a:	461a      	mov	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d65e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	4f54300a 	.word	0x4f54300a

0800d678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3301      	adds	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	4a13      	ldr	r2, [pc, #76]	; (800d6dc <USB_CoreReset+0x64>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d901      	bls.n	800d696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d692:	2303      	movs	r3, #3
 800d694:	e01b      	b.n	800d6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	daf2      	bge.n	800d684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	f043 0201 	orr.w	r2, r3, #1
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	4a09      	ldr	r2, [pc, #36]	; (800d6dc <USB_CoreReset+0x64>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d901      	bls.n	800d6c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d6bc:	2303      	movs	r3, #3
 800d6be:	e006      	b.n	800d6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d0f0      	beq.n	800d6ae <USB_CoreReset+0x36>

  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	00030d40 	.word	0x00030d40

0800d6e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b086      	sub	sp, #24
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d700:	461a      	mov	r2, r3
 800d702:	2300      	movs	r3, #0
 800d704:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d018      	beq.n	800d750 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	2b01      	cmp	r3, #1
 800d722:	d10a      	bne.n	800d73a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d732:	f043 0304 	orr.w	r3, r3, #4
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	e014      	b.n	800d764 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d748:	f023 0304 	bic.w	r3, r3, #4
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	e009      	b.n	800d764 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d75e:	f023 0304 	bic.w	r3, r3, #4
 800d762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d764:	2110      	movs	r1, #16
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7fe fe14 	bl	800c394 <USB_FlushTxFifo>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7fe fe40 	bl	800c3fc <USB_FlushRxFifo>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d786:	2300      	movs	r3, #0
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	e015      	b.n	800d7b8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	015a      	lsls	r2, r3, #5
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4413      	add	r3, r2
 800d794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d798:	461a      	mov	r2, r3
 800d79a:	f04f 33ff 	mov.w	r3, #4294967295
 800d79e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	613b      	str	r3, [r7, #16]
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d3e5      	bcc.n	800d78c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a13      	ldr	r2, [pc, #76]	; (800d834 <USB_HostInit+0x154>)
 800d7e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a13      	ldr	r2, [pc, #76]	; (800d838 <USB_HostInit+0x158>)
 800d7ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d7f0:	e009      	b.n	800d806 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2280      	movs	r2, #128	; 0x80
 800d7f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a10      	ldr	r2, [pc, #64]	; (800d83c <USB_HostInit+0x15c>)
 800d7fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a0f      	ldr	r2, [pc, #60]	; (800d840 <USB_HostInit+0x160>)
 800d802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d105      	bne.n	800d818 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	f043 0210 	orr.w	r2, r3, #16
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	699a      	ldr	r2, [r3, #24]
 800d81c:	4b09      	ldr	r3, [pc, #36]	; (800d844 <USB_HostInit+0x164>)
 800d81e:	4313      	orrs	r3, r2
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d824:	7dfb      	ldrb	r3, [r7, #23]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d830:	b004      	add	sp, #16
 800d832:	4770      	bx	lr
 800d834:	01000200 	.word	0x01000200
 800d838:	00e00300 	.word	0x00e00300
 800d83c:	00600080 	.word	0x00600080
 800d840:	004000e0 	.word	0x004000e0
 800d844:	a3200008 	.word	0xa3200008

0800d848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d866:	f023 0303 	bic.w	r3, r3, #3
 800d86a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	78fb      	ldrb	r3, [r7, #3]
 800d876:	f003 0303 	and.w	r3, r3, #3
 800d87a:	68f9      	ldr	r1, [r7, #12]
 800d87c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d880:	4313      	orrs	r3, r2
 800d882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d107      	bne.n	800d89a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d890:	461a      	mov	r2, r3
 800d892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d896:	6053      	str	r3, [r2, #4]
 800d898:	e009      	b.n	800d8ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d89a:	78fb      	ldrb	r3, [r7, #3]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d106      	bne.n	800d8ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f241 7370 	movw	r3, #6000	; 0x1770
 800d8ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3714      	adds	r7, #20
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d8dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d8ec:	2064      	movs	r0, #100	; 0x64
 800d8ee:	f7f5 fda1 	bl	8003434 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d900:	200a      	movs	r0, #10
 800d902:	f7f5 fd97 	bl	8003434 <HAL_Delay>

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <USB_DriveVbus+0x44>
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d106      	bne.n	800d954 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d94e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d952:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d95e:	d109      	bne.n	800d974 <USB_DriveVbus+0x64>
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d972:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	0c5b      	lsrs	r3, r3, #17
 800d9a0:	f003 0303 	and.w	r3, r3, #3
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	b29b      	uxth	r3, r3
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
	...

0800d9d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	70fb      	strb	r3, [r7, #3]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70bb      	strb	r3, [r7, #2]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d9f6:	78fb      	ldrb	r3, [r7, #3]
 800d9f8:	015a      	lsls	r2, r3, #5
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da02:	461a      	mov	r2, r3
 800da04:	f04f 33ff 	mov.w	r3, #4294967295
 800da08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800da0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d87e      	bhi.n	800db10 <USB_HC_Init+0x13c>
 800da12:	a201      	add	r2, pc, #4	; (adr r2, 800da18 <USB_HC_Init+0x44>)
 800da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da18:	0800da29 	.word	0x0800da29
 800da1c:	0800dad3 	.word	0x0800dad3
 800da20:	0800da29 	.word	0x0800da29
 800da24:	0800da95 	.word	0x0800da95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da34:	461a      	mov	r2, r3
 800da36:	f240 439d 	movw	r3, #1181	; 0x49d
 800da3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800da3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da40:	2b00      	cmp	r3, #0
 800da42:	da10      	bge.n	800da66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	78fa      	ldrb	r2, [r7, #3]
 800da54:	0151      	lsls	r1, r2, #5
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	440a      	add	r2, r1
 800da5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800da64:	e057      	b.n	800db16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d051      	beq.n	800db16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	015a      	lsls	r2, r3, #5
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	4413      	add	r3, r2
 800da7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	78fa      	ldrb	r2, [r7, #3]
 800da82:	0151      	lsls	r1, r2, #5
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	440a      	add	r2, r1
 800da88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800da90:	60d3      	str	r3, [r2, #12]
      break;
 800da92:	e040      	b.n	800db16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da94:	78fb      	ldrb	r3, [r7, #3]
 800da96:	015a      	lsls	r2, r3, #5
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	4413      	add	r3, r2
 800da9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daa0:	461a      	mov	r2, r3
 800daa2:	f240 639d 	movw	r3, #1693	; 0x69d
 800daa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800daa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800daac:	2b00      	cmp	r3, #0
 800daae:	da34      	bge.n	800db1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	015a      	lsls	r2, r3, #5
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	4413      	add	r3, r2
 800dab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	78fa      	ldrb	r2, [r7, #3]
 800dac0:	0151      	lsls	r1, r2, #5
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	440a      	add	r2, r1
 800dac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800daca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dace:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dad0:	e023      	b.n	800db1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	015a      	lsls	r2, r3, #5
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	4413      	add	r3, r2
 800dada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dade:	461a      	mov	r2, r3
 800dae0:	f240 2325 	movw	r3, #549	; 0x225
 800dae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800daea:	2b00      	cmp	r3, #0
 800daec:	da17      	bge.n	800db1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800daee:	78fb      	ldrb	r3, [r7, #3]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	78fa      	ldrb	r2, [r7, #3]
 800dafe:	0151      	lsls	r1, r2, #5
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	440a      	add	r2, r1
 800db04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800db0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800db0e:	e006      	b.n	800db1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	77fb      	strb	r3, [r7, #31]
      break;
 800db14:	e004      	b.n	800db20 <USB_HC_Init+0x14c>
      break;
 800db16:	bf00      	nop
 800db18:	e002      	b.n	800db20 <USB_HC_Init+0x14c>
      break;
 800db1a:	bf00      	nop
 800db1c:	e000      	b.n	800db20 <USB_HC_Init+0x14c>
      break;
 800db1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	015a      	lsls	r2, r3, #5
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	4413      	add	r3, r2
 800db28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	78fa      	ldrb	r2, [r7, #3]
 800db30:	0151      	lsls	r1, r2, #5
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	440a      	add	r2, r1
 800db36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db3a:	f043 0302 	orr.w	r3, r3, #2
 800db3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db46:	699a      	ldr	r2, [r3, #24]
 800db48:	78fb      	ldrb	r3, [r7, #3]
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	2101      	movs	r1, #1
 800db50:	fa01 f303 	lsl.w	r3, r1, r3
 800db54:	6939      	ldr	r1, [r7, #16]
 800db56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800db5a:	4313      	orrs	r3, r2
 800db5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800db6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da03      	bge.n	800db7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800db72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db76:	61bb      	str	r3, [r7, #24]
 800db78:	e001      	b.n	800db7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800db7a:	2300      	movs	r3, #0
 800db7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff feff 	bl	800d982 <USB_GetHostSpeed>
 800db84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800db86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	d106      	bne.n	800db9c <USB_HC_Init+0x1c8>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d003      	beq.n	800db9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800db94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	e001      	b.n	800dba0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800db9c:	2300      	movs	r3, #0
 800db9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dba0:	787b      	ldrb	r3, [r7, #1]
 800dba2:	059b      	lsls	r3, r3, #22
 800dba4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dba8:	78bb      	ldrb	r3, [r7, #2]
 800dbaa:	02db      	lsls	r3, r3, #11
 800dbac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dbb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dbb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbb6:	049b      	lsls	r3, r3, #18
 800dbb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dbbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dbbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dbc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dbc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	0159      	lsls	r1, r3, #5
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	440b      	add	r3, r1
 800dbd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dbdc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dbde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d003      	beq.n	800dbee <USB_HC_Init+0x21a>
 800dbe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d10f      	bne.n	800dc0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800dbee:	78fb      	ldrb	r3, [r7, #3]
 800dbf0:	015a      	lsls	r2, r3, #5
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	0151      	lsls	r1, r2, #5
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	440a      	add	r2, r1
 800dc04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dc0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3720      	adds	r7, #32
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08c      	sub	sp, #48	; 0x30
 800dc1c:	af02      	add	r7, sp, #8
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	4613      	mov	r3, r2
 800dc24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	785b      	ldrb	r3, [r3, #1]
 800dc2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800dc30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d02d      	beq.n	800dc9e <USB_HC_StartXfer+0x86>
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	791b      	ldrb	r3, [r3, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d129      	bne.n	800dc9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d117      	bne.n	800dc80 <USB_HC_StartXfer+0x68>
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	79db      	ldrb	r3, [r3, #7]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d003      	beq.n	800dc60 <USB_HC_StartXfer+0x48>
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	79db      	ldrb	r3, [r3, #7]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d10f      	bne.n	800dc80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	015a      	lsls	r2, r3, #5
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	4413      	add	r3, r2
 800dc68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	69fa      	ldr	r2, [r7, #28]
 800dc70:	0151      	lsls	r1, r2, #5
 800dc72:	6a3a      	ldr	r2, [r7, #32]
 800dc74:	440a      	add	r2, r1
 800dc76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10b      	bne.n	800dc9e <USB_HC_StartXfer+0x86>
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	795b      	ldrb	r3, [r3, #5]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d107      	bne.n	800dc9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	785b      	ldrb	r3, [r3, #1]
 800dc92:	4619      	mov	r1, r3
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 fa0f 	bl	800e0b8 <USB_DoPing>
      return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e0f8      	b.n	800de90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d018      	beq.n	800dcd8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	8912      	ldrh	r2, [r2, #8]
 800dcae:	4413      	add	r3, r2
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	8912      	ldrh	r2, [r2, #8]
 800dcb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dcbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcbe:	8b7b      	ldrh	r3, [r7, #26]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d90b      	bls.n	800dcdc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dcc4:	8b7b      	ldrh	r3, [r7, #26]
 800dcc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dcc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	8912      	ldrh	r2, [r2, #8]
 800dcce:	fb03 f202 	mul.w	r2, r3, r2
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	611a      	str	r2, [r3, #16]
 800dcd6:	e001      	b.n	800dcdc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	78db      	ldrb	r3, [r3, #3]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d007      	beq.n	800dcf4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	8912      	ldrh	r2, [r2, #8]
 800dcea:	fb03 f202 	mul.w	r2, r3, r2
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	611a      	str	r2, [r3, #16]
 800dcf2:	e003      	b.n	800dcfc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	695a      	ldr	r2, [r3, #20]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd06:	04d9      	lsls	r1, r3, #19
 800dd08:	4b63      	ldr	r3, [pc, #396]	; (800de98 <USB_HC_StartXfer+0x280>)
 800dd0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	7a9b      	ldrb	r3, [r3, #10]
 800dd12:	075b      	lsls	r3, r3, #29
 800dd14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd18:	69f9      	ldr	r1, [r7, #28]
 800dd1a:	0148      	lsls	r0, r1, #5
 800dd1c:	6a39      	ldr	r1, [r7, #32]
 800dd1e:	4401      	add	r1, r0
 800dd20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dd28:	79fb      	ldrb	r3, [r7, #7]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d009      	beq.n	800dd42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	68d9      	ldr	r1, [r3, #12]
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	015a      	lsls	r2, r3, #5
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd3e:	460a      	mov	r2, r1
 800dd40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bf0c      	ite	eq
 800dd52:	2301      	moveq	r3, #1
 800dd54:	2300      	movne	r3, #0
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	69fa      	ldr	r2, [r7, #28]
 800dd6a:	0151      	lsls	r1, r2, #5
 800dd6c:	6a3a      	ldr	r2, [r7, #32]
 800dd6e:	440a      	add	r2, r1
 800dd70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	7e7b      	ldrb	r3, [r7, #25]
 800dd8a:	075b      	lsls	r3, r3, #29
 800dd8c:	69f9      	ldr	r1, [r7, #28]
 800dd8e:	0148      	lsls	r0, r1, #5
 800dd90:	6a39      	ldr	r1, [r7, #32]
 800dd92:	4401      	add	r1, r0
 800dd94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ddb2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	78db      	ldrb	r3, [r3, #3]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d004      	beq.n	800ddc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddc2:	613b      	str	r3, [r7, #16]
 800ddc4:	e003      	b.n	800ddce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ddcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde2:	461a      	mov	r2, r3
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dde8:	79fb      	ldrb	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e04e      	b.n	800de90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	78db      	ldrb	r3, [r3, #3]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d149      	bne.n	800de8e <USB_HC_StartXfer+0x276>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d045      	beq.n	800de8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	79db      	ldrb	r3, [r3, #7]
 800de06:	2b03      	cmp	r3, #3
 800de08:	d830      	bhi.n	800de6c <USB_HC_StartXfer+0x254>
 800de0a:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <USB_HC_StartXfer+0x1f8>)
 800de0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de10:	0800de21 	.word	0x0800de21
 800de14:	0800de45 	.word	0x0800de45
 800de18:	0800de21 	.word	0x0800de21
 800de1c:	0800de45 	.word	0x0800de45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	3303      	adds	r3, #3
 800de26:	089b      	lsrs	r3, r3, #2
 800de28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800de2a:	8afa      	ldrh	r2, [r7, #22]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de30:	b29b      	uxth	r3, r3
 800de32:	429a      	cmp	r2, r3
 800de34:	d91c      	bls.n	800de70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	f043 0220 	orr.w	r2, r3, #32
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	619a      	str	r2, [r3, #24]
        }
        break;
 800de42:	e015      	b.n	800de70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	3303      	adds	r3, #3
 800de4a:	089b      	lsrs	r3, r3, #2
 800de4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800de4e:	8afa      	ldrh	r2, [r7, #22]
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d90a      	bls.n	800de74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	619a      	str	r2, [r3, #24]
        }
        break;
 800de6a:	e003      	b.n	800de74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800de6c:	bf00      	nop
 800de6e:	e002      	b.n	800de76 <USB_HC_StartXfer+0x25e>
        break;
 800de70:	bf00      	nop
 800de72:	e000      	b.n	800de76 <USB_HC_StartXfer+0x25e>
        break;
 800de74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	68d9      	ldr	r1, [r3, #12]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	785a      	ldrb	r2, [r3, #1]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	b29b      	uxth	r3, r3
 800de84:	2000      	movs	r0, #0
 800de86:	9000      	str	r0, [sp, #0]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff f8df 	bl	800d04c <USB_WritePacket>
  }

  return HAL_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3728      	adds	r7, #40	; 0x28
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	1ff80000 	.word	0x1ff80000

0800de9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	b29b      	uxth	r3, r3
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3714      	adds	r7, #20
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr

0800debe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800debe:	b480      	push	{r7}
 800dec0:	b089      	sub	sp, #36	; 0x24
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
 800dec6:	460b      	mov	r3, r1
 800dec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800dece:	78fb      	ldrb	r3, [r7, #3]
 800ded0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	015a      	lsls	r2, r3, #5
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	4413      	add	r3, r2
 800dede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	0c9b      	lsrs	r3, r3, #18
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	4413      	add	r3, r2
 800def4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	0fdb      	lsrs	r3, r3, #31
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	f003 0320 	and.w	r3, r3, #32
 800df0a:	2b20      	cmp	r3, #32
 800df0c:	d104      	bne.n	800df18 <USB_HC_Halt+0x5a>
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d101      	bne.n	800df18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	e0c8      	b.n	800e0aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <USB_HC_Halt+0x66>
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d163      	bne.n	800dfec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	015a      	lsls	r2, r3, #5
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	4413      	add	r3, r2
 800df2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	0151      	lsls	r1, r2, #5
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	440a      	add	r2, r1
 800df3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f003 0320 	and.w	r3, r3, #32
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f040 80ab 	bne.w	800e0a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d133      	bne.n	800dfc6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	4413      	add	r3, r2
 800df66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	69ba      	ldr	r2, [r7, #24]
 800df6e:	0151      	lsls	r1, r2, #5
 800df70:	69fa      	ldr	r2, [r7, #28]
 800df72:	440a      	add	r2, r1
 800df74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	015a      	lsls	r2, r3, #5
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	4413      	add	r3, r2
 800df86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	69ba      	ldr	r2, [r7, #24]
 800df8e:	0151      	lsls	r1, r2, #5
 800df90:	69fa      	ldr	r2, [r7, #28]
 800df92:	440a      	add	r2, r1
 800df94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfaa:	d81d      	bhi.n	800dfe8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	015a      	lsls	r2, r3, #5
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfc2:	d0ec      	beq.n	800df9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dfc4:	e070      	b.n	800e0a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	69ba      	ldr	r2, [r7, #24]
 800dfd6:	0151      	lsls	r1, r2, #5
 800dfd8:	69fa      	ldr	r2, [r7, #28]
 800dfda:	440a      	add	r2, r1
 800dfdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfe4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dfe6:	e05f      	b.n	800e0a8 <USB_HC_Halt+0x1ea>
            break;
 800dfe8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dfea:	e05d      	b.n	800e0a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	015a      	lsls	r2, r3, #5
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	4413      	add	r3, r2
 800dff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69ba      	ldr	r2, [r7, #24]
 800dffc:	0151      	lsls	r1, r2, #5
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	440a      	add	r2, r1
 800e002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e00a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d133      	bne.n	800e084 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	015a      	lsls	r2, r3, #5
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	4413      	add	r3, r2
 800e024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	69ba      	ldr	r2, [r7, #24]
 800e02c:	0151      	lsls	r1, r2, #5
 800e02e:	69fa      	ldr	r2, [r7, #28]
 800e030:	440a      	add	r2, r1
 800e032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e03a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	4413      	add	r3, r2
 800e044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	69ba      	ldr	r2, [r7, #24]
 800e04c:	0151      	lsls	r1, r2, #5
 800e04e:	69fa      	ldr	r2, [r7, #28]
 800e050:	440a      	add	r2, r1
 800e052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e05a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e068:	d81d      	bhi.n	800e0a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	015a      	lsls	r2, r3, #5
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4413      	add	r3, r2
 800e072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e07c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e080:	d0ec      	beq.n	800e05c <USB_HC_Halt+0x19e>
 800e082:	e011      	b.n	800e0a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69ba      	ldr	r2, [r7, #24]
 800e094:	0151      	lsls	r1, r2, #5
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	440a      	add	r2, r1
 800e09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e09e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	e000      	b.n	800e0a8 <USB_HC_Halt+0x1ea>
          break;
 800e0a6:	bf00      	nop
    }
  }

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3724      	adds	r7, #36	; 0x24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e0c8:	78fb      	ldrb	r3, [r7, #3]
 800e0ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	04da      	lsls	r2, r3, #19
 800e0d4:	4b15      	ldr	r3, [pc, #84]	; (800e12c <USB_DoPing+0x74>)
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	693a      	ldr	r2, [r7, #16]
 800e0da:	0151      	lsls	r1, r2, #5
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	440a      	add	r2, r1
 800e0e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	015a      	lsls	r2, r3, #5
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e100:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e108:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	015a      	lsls	r2, r3, #5
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	4413      	add	r3, r2
 800e112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e116:	461a      	mov	r2, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	371c      	adds	r7, #28
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	1ff80000 	.word	0x1ff80000

0800e130 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e140:	2300      	movs	r3, #0
 800e142:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7fd ff6a 	bl	800c01e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e14a:	2110      	movs	r1, #16
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7fe f921 	bl	800c394 <USB_FlushTxFifo>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d001      	beq.n	800e15c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7fe f94d 	bl	800c3fc <USB_FlushRxFifo>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e16c:	2300      	movs	r3, #0
 800e16e:	61bb      	str	r3, [r7, #24]
 800e170:	e01f      	b.n	800e1b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	015a      	lsls	r2, r3, #5
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	4413      	add	r3, r2
 800e17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e198:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	015a      	lsls	r2, r3, #5
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	61bb      	str	r3, [r7, #24]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	2b0f      	cmp	r3, #15
 800e1b6:	d9dc      	bls.n	800e172 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	e034      	b.n	800e228 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	015a      	lsls	r2, r3, #5
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e1dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e1e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	015a      	lsls	r2, r3, #5
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e204:	d80c      	bhi.n	800e220 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e21c:	d0ec      	beq.n	800e1f8 <USB_StopHost+0xc8>
 800e21e:	e000      	b.n	800e222 <USB_StopHost+0xf2>
        break;
 800e220:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	3301      	adds	r3, #1
 800e226:	61bb      	str	r3, [r7, #24]
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	2b0f      	cmp	r3, #15
 800e22c:	d9c7      	bls.n	800e1be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e234:	461a      	mov	r2, r3
 800e236:	f04f 33ff 	mov.w	r3, #4294967295
 800e23a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7fd fed9 	bl	800bffc <USB_EnableGlobalInt>

  return ret;
 800e24a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e258:	4904      	ldr	r1, [pc, #16]	; (800e26c <MX_FATFS_Init+0x18>)
 800e25a:	4805      	ldr	r0, [pc, #20]	; (800e270 <MX_FATFS_Init+0x1c>)
 800e25c:	f006 ffc2 	bl	80151e4 <FATFS_LinkDriver>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	4b03      	ldr	r3, [pc, #12]	; (800e274 <MX_FATFS_Init+0x20>)
 800e266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e268:	bf00      	nop
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20000f58 	.word	0x20000f58
 800e270:	08019e78 	.word	0x08019e78
 800e274:	20000f54 	.word	0x20000f54

0800e278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e278:	b480      	push	{r7}
 800e27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e27c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e27e:	4618      	mov	r0, r3
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e292:	f000 f888 	bl	800e3a6 <BSP_SD_IsDetected>
 800e296:	4603      	mov	r3, r0
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d001      	beq.n	800e2a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e29c:	2302      	movs	r3, #2
 800e29e:	e005      	b.n	800e2ac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e2a0:	4804      	ldr	r0, [pc, #16]	; (800e2b4 <BSP_SD_Init+0x2c>)
 800e2a2:	f7fa fae9 	bl	8008878 <HAL_SD_Init>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	200003c4 	.word	0x200003c4

0800e2b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	68f9      	ldr	r1, [r7, #12]
 800e2ce:	4806      	ldr	r0, [pc, #24]	; (800e2e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e2d0:	f7fa fb8a 	bl	80089e8 <HAL_SD_ReadBlocks_DMA>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	200003c4 	.word	0x200003c4

0800e2ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	68f9      	ldr	r1, [r7, #12]
 800e302:	4806      	ldr	r0, [pc, #24]	; (800e31c <BSP_SD_WriteBlocks_DMA+0x30>)
 800e304:	f7fa fc52 	bl	8008bac <HAL_SD_WriteBlocks_DMA>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e312:	7dfb      	ldrb	r3, [r7, #23]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3718      	adds	r7, #24
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	200003c4 	.word	0x200003c4

0800e320 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e324:	4805      	ldr	r0, [pc, #20]	; (800e33c <BSP_SD_GetCardState+0x1c>)
 800e326:	f7fb f877 	bl	8009418 <HAL_SD_GetCardState>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	bf14      	ite	ne
 800e330:	2301      	movne	r3, #1
 800e332:	2300      	moveq	r3, #0
 800e334:	b2db      	uxtb	r3, r3
}
 800e336:	4618      	mov	r0, r3
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	200003c4 	.word	0x200003c4

0800e340 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	4803      	ldr	r0, [pc, #12]	; (800e358 <BSP_SD_GetCardInfo+0x18>)
 800e34c:	f7fb f838 	bl	80093c0 <HAL_SD_GetCardInfo>
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	200003c4 	.word	0x200003c4

0800e35c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e364:	f000 f818 	bl	800e398 <BSP_SD_AbortCallback>
}
 800e368:	bf00      	nop
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e378:	f000 f98c 	bl	800e694 <BSP_SD_WriteCpltCallback>
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e38c:	f000 f98e 	bl	800e6ac <BSP_SD_ReadCpltCallback>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e398:	b480      	push	{r7}
 800e39a:	af00      	add	r7, sp, #0

}
 800e39c:	bf00      	nop
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b083      	sub	sp, #12
 800e3aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	b2db      	uxtb	r3, r3
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e3c8:	f7f5 f828 	bl	800341c <HAL_GetTick>
 800e3cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e3ce:	e006      	b.n	800e3de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e3d0:	f7ff ffa6 	bl	800e320 <BSP_SD_GetCardState>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e009      	b.n	800e3f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e3de:	f7f5 f81d 	bl	800341c <HAL_GetTick>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d8f0      	bhi.n	800e3d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e3ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <SD_CheckStatus+0x38>)
 800e408:	2201      	movs	r2, #1
 800e40a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e40c:	f7ff ff88 	bl	800e320 <BSP_SD_GetCardState>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d107      	bne.n	800e426 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e416:	4b07      	ldr	r3, [pc, #28]	; (800e434 <SD_CheckStatus+0x38>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f023 0301 	bic.w	r3, r3, #1
 800e420:	b2da      	uxtb	r2, r3
 800e422:	4b04      	ldr	r3, [pc, #16]	; (800e434 <SD_CheckStatus+0x38>)
 800e424:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e426:	4b03      	ldr	r3, [pc, #12]	; (800e434 <SD_CheckStatus+0x38>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	b2db      	uxtb	r3, r3
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	20000009 	.word	0x20000009

0800e438 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e442:	f7ff ff21 	bl	800e288 <BSP_SD_Init>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d107      	bne.n	800e45c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e44c:	79fb      	ldrb	r3, [r7, #7]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7ff ffd4 	bl	800e3fc <SD_CheckStatus>
 800e454:	4603      	mov	r3, r0
 800e456:	461a      	mov	r2, r3
 800e458:	4b04      	ldr	r3, [pc, #16]	; (800e46c <SD_initialize+0x34>)
 800e45a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e45c:	4b03      	ldr	r3, [pc, #12]	; (800e46c <SD_initialize+0x34>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	b2db      	uxtb	r3, r3
}
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000009 	.word	0x20000009

0800e470 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e47a:	79fb      	ldrb	r3, [r7, #7]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7ff ffbd 	bl	800e3fc <SD_CheckStatus>
 800e482:	4603      	mov	r3, r0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	60b9      	str	r1, [r7, #8]
 800e494:	607a      	str	r2, [r7, #4]
 800e496:	603b      	str	r3, [r7, #0]
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4a0:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4a4:	f7ff ff8c 	bl	800e3c0 <SD_CheckStatusWithTimeout>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	da01      	bge.n	800e4b2 <SD_read+0x26>
  {
    return res;
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
 800e4b0:	e03b      	b.n	800e52a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	6879      	ldr	r1, [r7, #4]
 800e4b6:	68b8      	ldr	r0, [r7, #8]
 800e4b8:	f7ff fefe 	bl	800e2b8 <BSP_SD_ReadBlocks_DMA>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d132      	bne.n	800e528 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e4c2:	4b1c      	ldr	r3, [pc, #112]	; (800e534 <SD_read+0xa8>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e4c8:	f7f4 ffa8 	bl	800341c <HAL_GetTick>
 800e4cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e4ce:	bf00      	nop
 800e4d0:	4b18      	ldr	r3, [pc, #96]	; (800e534 <SD_read+0xa8>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d108      	bne.n	800e4ea <SD_read+0x5e>
 800e4d8:	f7f4 ffa0 	bl	800341c <HAL_GetTick>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d9f2      	bls.n	800e4d0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e4ea:	4b12      	ldr	r3, [pc, #72]	; (800e534 <SD_read+0xa8>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d102      	bne.n	800e4f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	75fb      	strb	r3, [r7, #23]
 800e4f6:	e017      	b.n	800e528 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e4f8:	4b0e      	ldr	r3, [pc, #56]	; (800e534 <SD_read+0xa8>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e4fe:	f7f4 ff8d 	bl	800341c <HAL_GetTick>
 800e502:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e504:	e007      	b.n	800e516 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e506:	f7ff ff0b 	bl	800e320 <BSP_SD_GetCardState>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d102      	bne.n	800e516 <SD_read+0x8a>
          {
            res = RES_OK;
 800e510:	2300      	movs	r3, #0
 800e512:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e514:	e008      	b.n	800e528 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e516:	f7f4 ff81 	bl	800341c <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	f247 522f 	movw	r2, #29999	; 0x752f
 800e524:	4293      	cmp	r3, r2
 800e526:	d9ee      	bls.n	800e506 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e528:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20000f60 	.word	0x20000f60

0800e538 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60b9      	str	r1, [r7, #8]
 800e540:	607a      	str	r2, [r7, #4]
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	4603      	mov	r3, r0
 800e546:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e54c:	4b24      	ldr	r3, [pc, #144]	; (800e5e0 <SD_write+0xa8>)
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e552:	f247 5030 	movw	r0, #30000	; 0x7530
 800e556:	f7ff ff33 	bl	800e3c0 <SD_CheckStatusWithTimeout>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	da01      	bge.n	800e564 <SD_write+0x2c>
  {
    return res;
 800e560:	7dfb      	ldrb	r3, [r7, #23]
 800e562:	e038      	b.n	800e5d6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	68b8      	ldr	r0, [r7, #8]
 800e56a:	f7ff febf 	bl	800e2ec <BSP_SD_WriteBlocks_DMA>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d12f      	bne.n	800e5d4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e574:	f7f4 ff52 	bl	800341c <HAL_GetTick>
 800e578:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e57a:	bf00      	nop
 800e57c:	4b18      	ldr	r3, [pc, #96]	; (800e5e0 <SD_write+0xa8>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d108      	bne.n	800e596 <SD_write+0x5e>
 800e584:	f7f4 ff4a 	bl	800341c <HAL_GetTick>
 800e588:	4602      	mov	r2, r0
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e592:	4293      	cmp	r3, r2
 800e594:	d9f2      	bls.n	800e57c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e596:	4b12      	ldr	r3, [pc, #72]	; (800e5e0 <SD_write+0xa8>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d102      	bne.n	800e5a4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	75fb      	strb	r3, [r7, #23]
 800e5a2:	e017      	b.n	800e5d4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e5a4:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <SD_write+0xa8>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e5aa:	f7f4 ff37 	bl	800341c <HAL_GetTick>
 800e5ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5b0:	e007      	b.n	800e5c2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5b2:	f7ff feb5 	bl	800e320 <BSP_SD_GetCardState>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <SD_write+0x8a>
          {
            res = RES_OK;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	75fb      	strb	r3, [r7, #23]
            break;
 800e5c0:	e008      	b.n	800e5d4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5c2:	f7f4 ff2b 	bl	800341c <HAL_GetTick>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d9ee      	bls.n	800e5b2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	20000f5c 	.word	0x20000f5c

0800e5e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08c      	sub	sp, #48	; 0x30
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	603a      	str	r2, [r7, #0]
 800e5ee:	71fb      	strb	r3, [r7, #7]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e5fa:	4b25      	ldr	r3, [pc, #148]	; (800e690 <SD_ioctl+0xac>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	f003 0301 	and.w	r3, r3, #1
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <SD_ioctl+0x28>
 800e608:	2303      	movs	r3, #3
 800e60a:	e03c      	b.n	800e686 <SD_ioctl+0xa2>

  switch (cmd)
 800e60c:	79bb      	ldrb	r3, [r7, #6]
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d834      	bhi.n	800e67c <SD_ioctl+0x98>
 800e612:	a201      	add	r2, pc, #4	; (adr r2, 800e618 <SD_ioctl+0x34>)
 800e614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e618:	0800e629 	.word	0x0800e629
 800e61c:	0800e631 	.word	0x0800e631
 800e620:	0800e649 	.word	0x0800e649
 800e624:	0800e663 	.word	0x0800e663
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e62e:	e028      	b.n	800e682 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e630:	f107 030c 	add.w	r3, r7, #12
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff fe83 	bl	800e340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e646:	e01c      	b.n	800e682 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e648:	f107 030c 	add.w	r3, r7, #12
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fe77 	bl	800e340 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e654:	b29a      	uxth	r2, r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e65a:	2300      	movs	r3, #0
 800e65c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e660:	e00f      	b.n	800e682 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e662:	f107 030c 	add.w	r3, r7, #12
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fe6a 	bl	800e340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	0a5a      	lsrs	r2, r3, #9
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e67a:	e002      	b.n	800e682 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e67c:	2304      	movs	r3, #4
 800e67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e686:	4618      	mov	r0, r3
 800e688:	3730      	adds	r7, #48	; 0x30
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	20000009 	.word	0x20000009

0800e694 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e694:	b480      	push	{r7}
 800e696:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e698:	4b03      	ldr	r3, [pc, #12]	; (800e6a8 <BSP_SD_WriteCpltCallback+0x14>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	601a      	str	r2, [r3, #0]
}
 800e69e:	bf00      	nop
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	20000f5c 	.word	0x20000f5c

0800e6ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <BSP_SD_ReadCpltCallback+0x14>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	20000f60 	.word	0x20000f60

0800e6c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e6d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e6d4:	f007 fe8a 	bl	80163ec <malloc>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d109      	bne.n	800e6f6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	32b0      	adds	r2, #176	; 0xb0
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e6f2:	2302      	movs	r3, #2
 800e6f4:	e0d4      	b.n	800e8a0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e6f6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f007 fea3 	bl	8016448 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	32b0      	adds	r2, #176	; 0xb0
 800e70c:	68f9      	ldr	r1, [r7, #12]
 800e70e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	32b0      	adds	r2, #176	; 0xb0
 800e71c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	7c1b      	ldrb	r3, [r3, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d138      	bne.n	800e7a0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e72e:	4b5e      	ldr	r3, [pc, #376]	; (800e8a8 <USBD_CDC_Init+0x1e4>)
 800e730:	7819      	ldrb	r1, [r3, #0]
 800e732:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e736:	2202      	movs	r2, #2
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f007 f96e 	bl	8015a1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e73e:	4b5a      	ldr	r3, [pc, #360]	; (800e8a8 <USBD_CDC_Init+0x1e4>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f003 020f 	and.w	r2, r3, #15
 800e746:	6879      	ldr	r1, [r7, #4]
 800e748:	4613      	mov	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	440b      	add	r3, r1
 800e752:	3324      	adds	r3, #36	; 0x24
 800e754:	2201      	movs	r2, #1
 800e756:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e758:	4b54      	ldr	r3, [pc, #336]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e75a:	7819      	ldrb	r1, [r3, #0]
 800e75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e760:	2202      	movs	r2, #2
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f007 f959 	bl	8015a1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e768:	4b50      	ldr	r3, [pc, #320]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	f003 020f 	and.w	r2, r3, #15
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	440b      	add	r3, r1
 800e77c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e780:	2201      	movs	r2, #1
 800e782:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e784:	4b4a      	ldr	r3, [pc, #296]	; (800e8b0 <USBD_CDC_Init+0x1ec>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 020f 	and.w	r2, r3, #15
 800e78c:	6879      	ldr	r1, [r7, #4]
 800e78e:	4613      	mov	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	440b      	add	r3, r1
 800e798:	3326      	adds	r3, #38	; 0x26
 800e79a:	2210      	movs	r2, #16
 800e79c:	801a      	strh	r2, [r3, #0]
 800e79e:	e035      	b.n	800e80c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e7a0:	4b41      	ldr	r3, [pc, #260]	; (800e8a8 <USBD_CDC_Init+0x1e4>)
 800e7a2:	7819      	ldrb	r1, [r3, #0]
 800e7a4:	2340      	movs	r3, #64	; 0x40
 800e7a6:	2202      	movs	r2, #2
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f007 f936 	bl	8015a1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e7ae:	4b3e      	ldr	r3, [pc, #248]	; (800e8a8 <USBD_CDC_Init+0x1e4>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 020f 	and.w	r2, r3, #15
 800e7b6:	6879      	ldr	r1, [r7, #4]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4413      	add	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	440b      	add	r3, r1
 800e7c2:	3324      	adds	r3, #36	; 0x24
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e7c8:	4b38      	ldr	r3, [pc, #224]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e7ca:	7819      	ldrb	r1, [r3, #0]
 800e7cc:	2340      	movs	r3, #64	; 0x40
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f007 f922 	bl	8015a1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e7d6:	4b35      	ldr	r3, [pc, #212]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	f003 020f 	and.w	r2, r3, #15
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4413      	add	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	440b      	add	r3, r1
 800e7ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e7f2:	4b2f      	ldr	r3, [pc, #188]	; (800e8b0 <USBD_CDC_Init+0x1ec>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	f003 020f 	and.w	r2, r3, #15
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	440b      	add	r3, r1
 800e806:	3326      	adds	r3, #38	; 0x26
 800e808:	2210      	movs	r2, #16
 800e80a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e80c:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <USBD_CDC_Init+0x1ec>)
 800e80e:	7819      	ldrb	r1, [r3, #0]
 800e810:	2308      	movs	r3, #8
 800e812:	2203      	movs	r2, #3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f007 f900 	bl	8015a1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e81a:	4b25      	ldr	r3, [pc, #148]	; (800e8b0 <USBD_CDC_Init+0x1ec>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	f003 020f 	and.w	r2, r3, #15
 800e822:	6879      	ldr	r1, [r7, #4]
 800e824:	4613      	mov	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	440b      	add	r3, r1
 800e82e:	3324      	adds	r3, #36	; 0x24
 800e830:	2201      	movs	r2, #1
 800e832:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	33b0      	adds	r3, #176	; 0xb0
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4413      	add	r3, r2
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e866:	2b00      	cmp	r3, #0
 800e868:	d101      	bne.n	800e86e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800e86a:	2302      	movs	r3, #2
 800e86c:	e018      	b.n	800e8a0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	7c1b      	ldrb	r3, [r3, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10a      	bne.n	800e88c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e876:	4b0d      	ldr	r3, [pc, #52]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e878:	7819      	ldrb	r1, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f007 f9b7 	bl	8015bf8 <USBD_LL_PrepareReceive>
 800e88a:	e008      	b.n	800e89e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e88c:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <USBD_CDC_Init+0x1e8>)
 800e88e:	7819      	ldrb	r1, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e896:	2340      	movs	r3, #64	; 0x40
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f007 f9ad 	bl	8015bf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	20000093 	.word	0x20000093
 800e8ac:	20000094 	.word	0x20000094
 800e8b0:	20000095 	.word	0x20000095

0800e8b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e8c0:	4b3a      	ldr	r3, [pc, #232]	; (800e9ac <USBD_CDC_DeInit+0xf8>)
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f007 f8cd 	bl	8015a66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e8cc:	4b37      	ldr	r3, [pc, #220]	; (800e9ac <USBD_CDC_DeInit+0xf8>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	f003 020f 	and.w	r2, r3, #15
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	440b      	add	r3, r1
 800e8e0:	3324      	adds	r3, #36	; 0x24
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e8e6:	4b32      	ldr	r3, [pc, #200]	; (800e9b0 <USBD_CDC_DeInit+0xfc>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f007 f8ba 	bl	8015a66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e8f2:	4b2f      	ldr	r3, [pc, #188]	; (800e9b0 <USBD_CDC_DeInit+0xfc>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	f003 020f 	and.w	r2, r3, #15
 800e8fa:	6879      	ldr	r1, [r7, #4]
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	440b      	add	r3, r1
 800e906:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e90a:	2200      	movs	r2, #0
 800e90c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e90e:	4b29      	ldr	r3, [pc, #164]	; (800e9b4 <USBD_CDC_DeInit+0x100>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	4619      	mov	r1, r3
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f007 f8a6 	bl	8015a66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e91a:	4b26      	ldr	r3, [pc, #152]	; (800e9b4 <USBD_CDC_DeInit+0x100>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	f003 020f 	and.w	r2, r3, #15
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	440b      	add	r3, r1
 800e92e:	3324      	adds	r3, #36	; 0x24
 800e930:	2200      	movs	r2, #0
 800e932:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e934:	4b1f      	ldr	r3, [pc, #124]	; (800e9b4 <USBD_CDC_DeInit+0x100>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f003 020f 	and.w	r2, r3, #15
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	4613      	mov	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	440b      	add	r3, r1
 800e948:	3326      	adds	r3, #38	; 0x26
 800e94a:	2200      	movs	r2, #0
 800e94c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	32b0      	adds	r2, #176	; 0xb0
 800e958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d01f      	beq.n	800e9a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	33b0      	adds	r3, #176	; 0xb0
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	4413      	add	r3, r2
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	32b0      	adds	r2, #176	; 0xb0
 800e97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e982:	4618      	mov	r0, r3
 800e984:	f007 fd3a 	bl	80163fc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	32b0      	adds	r2, #176	; 0xb0
 800e992:	2100      	movs	r1, #0
 800e994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20000093 	.word	0x20000093
 800e9b0:	20000094 	.word	0x20000094
 800e9b4:	20000095 	.word	0x20000095

0800e9b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	32b0      	adds	r2, #176	; 0xb0
 800e9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	e0bf      	b.n	800eb68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d050      	beq.n	800ea96 <USBD_CDC_Setup+0xde>
 800e9f4:	2b20      	cmp	r3, #32
 800e9f6:	f040 80af 	bne.w	800eb58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	88db      	ldrh	r3, [r3, #6]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d03a      	beq.n	800ea78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	b25b      	sxtb	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	da1b      	bge.n	800ea44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	33b0      	adds	r3, #176	; 0xb0
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	4413      	add	r3, r2
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ea22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	88d2      	ldrh	r2, [r2, #6]
 800ea28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	88db      	ldrh	r3, [r3, #6]
 800ea2e:	2b07      	cmp	r3, #7
 800ea30:	bf28      	it	cs
 800ea32:	2307      	movcs	r3, #7
 800ea34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	89fa      	ldrh	r2, [r7, #14]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f001 fdad 	bl	801059c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ea42:	e090      	b.n	800eb66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	785a      	ldrb	r2, [r3, #1]
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	88db      	ldrh	r3, [r3, #6]
 800ea52:	2b3f      	cmp	r3, #63	; 0x3f
 800ea54:	d803      	bhi.n	800ea5e <USBD_CDC_Setup+0xa6>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	88db      	ldrh	r3, [r3, #6]
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	e000      	b.n	800ea60 <USBD_CDC_Setup+0xa8>
 800ea5e:	2240      	movs	r2, #64	; 0x40
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ea66:	6939      	ldr	r1, [r7, #16]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ea6e:	461a      	mov	r2, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f001 fdbf 	bl	80105f4 <USBD_CtlPrepareRx>
      break;
 800ea76:	e076      	b.n	800eb66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	33b0      	adds	r3, #176	; 0xb0
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	7850      	ldrb	r0, [r2, #1]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	6839      	ldr	r1, [r7, #0]
 800ea92:	4798      	blx	r3
      break;
 800ea94:	e067      	b.n	800eb66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	785b      	ldrb	r3, [r3, #1]
 800ea9a:	2b0b      	cmp	r3, #11
 800ea9c:	d851      	bhi.n	800eb42 <USBD_CDC_Setup+0x18a>
 800ea9e:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <USBD_CDC_Setup+0xec>)
 800eaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa4:	0800ead5 	.word	0x0800ead5
 800eaa8:	0800eb51 	.word	0x0800eb51
 800eaac:	0800eb43 	.word	0x0800eb43
 800eab0:	0800eb43 	.word	0x0800eb43
 800eab4:	0800eb43 	.word	0x0800eb43
 800eab8:	0800eb43 	.word	0x0800eb43
 800eabc:	0800eb43 	.word	0x0800eb43
 800eac0:	0800eb43 	.word	0x0800eb43
 800eac4:	0800eb43 	.word	0x0800eb43
 800eac8:	0800eb43 	.word	0x0800eb43
 800eacc:	0800eaff 	.word	0x0800eaff
 800ead0:	0800eb29 	.word	0x0800eb29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2b03      	cmp	r3, #3
 800eade:	d107      	bne.n	800eaf0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eae0:	f107 030a 	add.w	r3, r7, #10
 800eae4:	2202      	movs	r2, #2
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f001 fd57 	bl	801059c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eaee:	e032      	b.n	800eb56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f001 fce1 	bl	80104ba <USBD_CtlError>
            ret = USBD_FAIL;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	75fb      	strb	r3, [r7, #23]
          break;
 800eafc:	e02b      	b.n	800eb56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d107      	bne.n	800eb1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800eb0a:	f107 030d 	add.w	r3, r7, #13
 800eb0e:	2201      	movs	r2, #1
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 fd42 	bl	801059c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eb18:	e01d      	b.n	800eb56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f001 fccc 	bl	80104ba <USBD_CtlError>
            ret = USBD_FAIL;
 800eb22:	2303      	movs	r3, #3
 800eb24:	75fb      	strb	r3, [r7, #23]
          break;
 800eb26:	e016      	b.n	800eb56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d00f      	beq.n	800eb54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f001 fcbf 	bl	80104ba <USBD_CtlError>
            ret = USBD_FAIL;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800eb40:	e008      	b.n	800eb54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800eb42:	6839      	ldr	r1, [r7, #0]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f001 fcb8 	bl	80104ba <USBD_CtlError>
          ret = USBD_FAIL;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	75fb      	strb	r3, [r7, #23]
          break;
 800eb4e:	e002      	b.n	800eb56 <USBD_CDC_Setup+0x19e>
          break;
 800eb50:	bf00      	nop
 800eb52:	e008      	b.n	800eb66 <USBD_CDC_Setup+0x1ae>
          break;
 800eb54:	bf00      	nop
      }
      break;
 800eb56:	e006      	b.n	800eb66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f001 fcad 	bl	80104ba <USBD_CtlError>
      ret = USBD_FAIL;
 800eb60:	2303      	movs	r3, #3
 800eb62:	75fb      	strb	r3, [r7, #23]
      break;
 800eb64:	bf00      	nop
  }

  return (uint8_t)ret;
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	32b0      	adds	r2, #176	; 0xb0
 800eb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d101      	bne.n	800eb9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800eb96:	2303      	movs	r3, #3
 800eb98:	e065      	b.n	800ec66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	32b0      	adds	r2, #176	; 0xb0
 800eba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ebaa:	78fb      	ldrb	r3, [r7, #3]
 800ebac:	f003 020f 	and.w	r2, r3, #15
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4413      	add	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	440b      	add	r3, r1
 800ebbc:	3318      	adds	r3, #24
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d02f      	beq.n	800ec24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ebc4:	78fb      	ldrb	r3, [r7, #3]
 800ebc6:	f003 020f 	and.w	r2, r3, #15
 800ebca:	6879      	ldr	r1, [r7, #4]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4413      	add	r3, r2
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	440b      	add	r3, r1
 800ebd6:	3318      	adds	r3, #24
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	78fb      	ldrb	r3, [r7, #3]
 800ebdc:	f003 010f 	and.w	r1, r3, #15
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	00db      	lsls	r3, r3, #3
 800ebe6:	440b      	add	r3, r1
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4403      	add	r3, r0
 800ebec:	3348      	adds	r3, #72	; 0x48
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	fbb2 f1f3 	udiv	r1, r2, r3
 800ebf4:	fb01 f303 	mul.w	r3, r1, r3
 800ebf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d112      	bne.n	800ec24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ebfe:	78fb      	ldrb	r3, [r7, #3]
 800ec00:	f003 020f 	and.w	r2, r3, #15
 800ec04:	6879      	ldr	r1, [r7, #4]
 800ec06:	4613      	mov	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	440b      	add	r3, r1
 800ec10:	3318      	adds	r3, #24
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ec16:	78f9      	ldrb	r1, [r7, #3]
 800ec18:	2300      	movs	r3, #0
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f006 ffca 	bl	8015bb6 <USBD_LL_Transmit>
 800ec22:	e01f      	b.n	800ec64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	33b0      	adds	r3, #176	; 0xb0
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4413      	add	r3, r2
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d010      	beq.n	800ec64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	33b0      	adds	r3, #176	; 0xb0
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ec60:	78fa      	ldrb	r2, [r7, #3]
 800ec62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	460b      	mov	r3, r1
 800ec78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	32b0      	adds	r2, #176	; 0xb0
 800ec84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	32b0      	adds	r2, #176	; 0xb0
 800ec94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ec9c:	2303      	movs	r3, #3
 800ec9e:	e01a      	b.n	800ecd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f006 ffc8 	bl	8015c3a <USBD_LL_GetRxDataSize>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	33b0      	adds	r3, #176	; 0xb0
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	32b0      	adds	r2, #176	; 0xb0
 800ecf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	e025      	b.n	800ed4c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	33b0      	adds	r3, #176	; 0xb0
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d01a      	beq.n	800ed4a <USBD_CDC_EP0_RxReady+0x6c>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ed1a:	2bff      	cmp	r3, #255	; 0xff
 800ed1c:	d015      	beq.n	800ed4a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	33b0      	adds	r3, #176	; 0xb0
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ed36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ed3e:	b292      	uxth	r2, r2
 800ed40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	22ff      	movs	r2, #255	; 0xff
 800ed46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed5c:	2182      	movs	r1, #130	; 0x82
 800ed5e:	4818      	ldr	r0, [pc, #96]	; (800edc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed60:	f000 fd49 	bl	800f7f6 <USBD_GetEpDesc>
 800ed64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed66:	2101      	movs	r1, #1
 800ed68:	4815      	ldr	r0, [pc, #84]	; (800edc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed6a:	f000 fd44 	bl	800f7f6 <USBD_GetEpDesc>
 800ed6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed70:	2181      	movs	r1, #129	; 0x81
 800ed72:	4813      	ldr	r0, [pc, #76]	; (800edc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed74:	f000 fd3f 	bl	800f7f6 <USBD_GetEpDesc>
 800ed78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2210      	movs	r2, #16
 800ed84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed94:	711a      	strb	r2, [r3, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d006      	beq.n	800edae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eda8:	711a      	strb	r2, [r3, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2243      	movs	r2, #67	; 0x43
 800edb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800edb4:	4b02      	ldr	r3, [pc, #8]	; (800edc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	20000050 	.word	0x20000050

0800edc4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800edcc:	2182      	movs	r1, #130	; 0x82
 800edce:	4818      	ldr	r0, [pc, #96]	; (800ee30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800edd0:	f000 fd11 	bl	800f7f6 <USBD_GetEpDesc>
 800edd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800edd6:	2101      	movs	r1, #1
 800edd8:	4815      	ldr	r0, [pc, #84]	; (800ee30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800edda:	f000 fd0c 	bl	800f7f6 <USBD_GetEpDesc>
 800edde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ede0:	2181      	movs	r1, #129	; 0x81
 800ede2:	4813      	ldr	r0, [pc, #76]	; (800ee30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ede4:	f000 fd07 	bl	800f7f6 <USBD_GetEpDesc>
 800ede8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2210      	movs	r2, #16
 800edf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d006      	beq.n	800ee0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	2200      	movs	r2, #0
 800ee00:	711a      	strb	r2, [r3, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f042 0202 	orr.w	r2, r2, #2
 800ee08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d006      	beq.n	800ee1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	711a      	strb	r2, [r3, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f042 0202 	orr.w	r2, r2, #2
 800ee1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2243      	movs	r2, #67	; 0x43
 800ee22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ee24:	4b02      	ldr	r3, [pc, #8]	; (800ee30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3718      	adds	r7, #24
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20000050 	.word	0x20000050

0800ee34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee3c:	2182      	movs	r1, #130	; 0x82
 800ee3e:	4818      	ldr	r0, [pc, #96]	; (800eea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee40:	f000 fcd9 	bl	800f7f6 <USBD_GetEpDesc>
 800ee44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee46:	2101      	movs	r1, #1
 800ee48:	4815      	ldr	r0, [pc, #84]	; (800eea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee4a:	f000 fcd4 	bl	800f7f6 <USBD_GetEpDesc>
 800ee4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee50:	2181      	movs	r1, #129	; 0x81
 800ee52:	4813      	ldr	r0, [pc, #76]	; (800eea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee54:	f000 fccf 	bl	800f7f6 <USBD_GetEpDesc>
 800ee58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	2210      	movs	r2, #16
 800ee64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d006      	beq.n	800ee7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee74:	711a      	strb	r2, [r3, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d006      	beq.n	800ee8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee88:	711a      	strb	r2, [r3, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2243      	movs	r2, #67	; 0x43
 800ee92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ee94:	4b02      	ldr	r3, [pc, #8]	; (800eea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3718      	adds	r7, #24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	20000050 	.word	0x20000050

0800eea4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	220a      	movs	r2, #10
 800eeb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eeb2:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	2000000c 	.word	0x2000000c

0800eec4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	e009      	b.n	800eeec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	33b0      	adds	r3, #176	; 0xb0
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	683a      	ldr	r2, [r7, #0]
 800eee8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	32b0      	adds	r2, #176	; 0xb0
 800ef0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef12:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d101      	bne.n	800ef1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	e008      	b.n	800ef30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	371c      	adds	r7, #28
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	32b0      	adds	r2, #176	; 0xb0
 800ef50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d101      	bne.n	800ef60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	e004      	b.n	800ef6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3714      	adds	r7, #20
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr
	...

0800ef78 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	32b0      	adds	r2, #176	; 0xb0
 800ef8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef8e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ef90:	2301      	movs	r3, #1
 800ef92:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d101      	bne.n	800ef9e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	e025      	b.n	800efea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d11f      	bne.n	800efe8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2201      	movs	r2, #1
 800efac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800efb0:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <USBD_CDC_TransmitPacket+0x7c>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	f003 020f 	and.w	r2, r3, #15
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	4613      	mov	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4403      	add	r3, r0
 800efca:	3318      	adds	r3, #24
 800efcc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800efce:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <USBD_CDC_TransmitPacket+0x7c>)
 800efd0:	7819      	ldrb	r1, [r3, #0]
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f006 fde9 	bl	8015bb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	20000093 	.word	0x20000093

0800eff8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	32b0      	adds	r2, #176	; 0xb0
 800f00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	32b0      	adds	r2, #176	; 0xb0
 800f01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f022:	2303      	movs	r3, #3
 800f024:	e018      	b.n	800f058 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7c1b      	ldrb	r3, [r3, #16]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f02e:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <USBD_CDC_ReceivePacket+0x68>)
 800f030:	7819      	ldrb	r1, [r3, #0]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f006 fddb 	bl	8015bf8 <USBD_LL_PrepareReceive>
 800f042:	e008      	b.n	800f056 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f044:	4b06      	ldr	r3, [pc, #24]	; (800f060 <USBD_CDC_ReceivePacket+0x68>)
 800f046:	7819      	ldrb	r1, [r3, #0]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f04e:	2340      	movs	r3, #64	; 0x40
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f006 fdd1 	bl	8015bf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	20000094 	.word	0x20000094

0800f064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4613      	mov	r3, r2
 800f070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f078:	2303      	movs	r3, #3
 800f07a:	e01f      	b.n	800f0bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2200      	movs	r2, #0
 800f080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d003      	beq.n	800f0a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	79fa      	ldrb	r2, [r7, #7]
 800f0ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f006 fc45 	bl	8015940 <USBD_LL_Init>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3718      	adds	r7, #24
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e025      	b.n	800f128 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	32ae      	adds	r2, #174	; 0xae
 800f0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00f      	beq.n	800f118 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	32ae      	adds	r2, #174	; 0xae
 800f102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	f107 020e 	add.w	r2, r7, #14
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
 800f110:	4602      	mov	r2, r0
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f11e:	1c5a      	adds	r2, r3, #1
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f006 fc53 	bl	80159e4 <USBD_LL_Start>
 800f13e:	4603      	mov	r3, r0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f150:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f152:	4618      	mov	r0, r3
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	460b      	mov	r3, r1
 800f168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f174:	2b00      	cmp	r3, #0
 800f176:	d009      	beq.n	800f18c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	78fa      	ldrb	r2, [r7, #3]
 800f182:	4611      	mov	r1, r2
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	4798      	blx	r3
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b084      	sub	sp, #16
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	78fa      	ldrb	r2, [r7, #3]
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	4798      	blx	r3
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d001      	beq.n	800f1c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b084      	sub	sp, #16
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f001 f932 	bl	8010446 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1fe:	f003 031f 	and.w	r3, r3, #31
 800f202:	2b02      	cmp	r3, #2
 800f204:	d01a      	beq.n	800f23c <USBD_LL_SetupStage+0x72>
 800f206:	2b02      	cmp	r3, #2
 800f208:	d822      	bhi.n	800f250 <USBD_LL_SetupStage+0x86>
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <USBD_LL_SetupStage+0x4a>
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d00a      	beq.n	800f228 <USBD_LL_SetupStage+0x5e>
 800f212:	e01d      	b.n	800f250 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fb5f 	bl	800f8e0 <USBD_StdDevReq>
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]
      break;
 800f226:	e020      	b.n	800f26a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f22e:	4619      	mov	r1, r3
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fbc7 	bl	800f9c4 <USBD_StdItfReq>
 800f236:	4603      	mov	r3, r0
 800f238:	73fb      	strb	r3, [r7, #15]
      break;
 800f23a:	e016      	b.n	800f26a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f242:	4619      	mov	r1, r3
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fc29 	bl	800fa9c <USBD_StdEPReq>
 800f24a:	4603      	mov	r3, r0
 800f24c:	73fb      	strb	r3, [r7, #15]
      break;
 800f24e:	e00c      	b.n	800f26a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f006 fc20 	bl	8015aa4 <USBD_LL_StallEP>
 800f264:	4603      	mov	r3, r0
 800f266:	73fb      	strb	r3, [r7, #15]
      break;
 800f268:	bf00      	nop
  }

  return ret;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	460b      	mov	r3, r1
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f286:	7afb      	ldrb	r3, [r7, #11]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d16e      	bne.n	800f36a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	f040 8098 	bne.w	800f3d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d913      	bls.n	800f2d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	689a      	ldr	r2, [r3, #8]
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	1ad2      	subs	r2, r2, r3
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	68da      	ldr	r2, [r3, #12]
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	bf28      	it	cs
 800f2c6:	4613      	movcs	r3, r2
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f001 f9ae 	bl	801062e <USBD_CtlContinueRx>
 800f2d2:	e07d      	b.n	800f3d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f2da:	f003 031f 	and.w	r3, r3, #31
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d014      	beq.n	800f30c <USBD_LL_DataOutStage+0x98>
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d81d      	bhi.n	800f322 <USBD_LL_DataOutStage+0xae>
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <USBD_LL_DataOutStage+0x7c>
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d003      	beq.n	800f2f6 <USBD_LL_DataOutStage+0x82>
 800f2ee:	e018      	b.n	800f322 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	75bb      	strb	r3, [r7, #22]
            break;
 800f2f4:	e018      	b.n	800f328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	4619      	mov	r1, r3
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f000 fa5e 	bl	800f7c2 <USBD_CoreFindIF>
 800f306:	4603      	mov	r3, r0
 800f308:	75bb      	strb	r3, [r7, #22]
            break;
 800f30a:	e00d      	b.n	800f328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f312:	b2db      	uxtb	r3, r3
 800f314:	4619      	mov	r1, r3
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f000 fa60 	bl	800f7dc <USBD_CoreFindEP>
 800f31c:	4603      	mov	r3, r0
 800f31e:	75bb      	strb	r3, [r7, #22]
            break;
 800f320:	e002      	b.n	800f328 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f322:	2300      	movs	r3, #0
 800f324:	75bb      	strb	r3, [r7, #22]
            break;
 800f326:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f328:	7dbb      	ldrb	r3, [r7, #22]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d119      	bne.n	800f362 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b03      	cmp	r3, #3
 800f338:	d113      	bne.n	800f362 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f33a:	7dba      	ldrb	r2, [r7, #22]
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	32ae      	adds	r2, #174	; 0xae
 800f340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00b      	beq.n	800f362 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f34a:	7dba      	ldrb	r2, [r7, #22]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f352:	7dba      	ldrb	r2, [r7, #22]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	32ae      	adds	r2, #174	; 0xae
 800f358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f001 f974 	bl	8010650 <USBD_CtlSendStatus>
 800f368:	e032      	b.n	800f3d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f370:	b2db      	uxtb	r3, r3
 800f372:	4619      	mov	r1, r3
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 fa31 	bl	800f7dc <USBD_CoreFindEP>
 800f37a:	4603      	mov	r3, r0
 800f37c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f37e:	7dbb      	ldrb	r3, [r7, #22]
 800f380:	2bff      	cmp	r3, #255	; 0xff
 800f382:	d025      	beq.n	800f3d0 <USBD_LL_DataOutStage+0x15c>
 800f384:	7dbb      	ldrb	r3, [r7, #22]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d122      	bne.n	800f3d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f390:	b2db      	uxtb	r3, r3
 800f392:	2b03      	cmp	r3, #3
 800f394:	d117      	bne.n	800f3c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f396:	7dba      	ldrb	r2, [r7, #22]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	32ae      	adds	r2, #174	; 0xae
 800f39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a0:	699b      	ldr	r3, [r3, #24]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00f      	beq.n	800f3c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f3a6:	7dba      	ldrb	r2, [r7, #22]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f3ae:	7dba      	ldrb	r2, [r7, #22]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	32ae      	adds	r2, #174	; 0xae
 800f3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	7afa      	ldrb	r2, [r7, #11]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	4798      	blx	r3
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f3c6:	7dfb      	ldrb	r3, [r7, #23]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d001      	beq.n	800f3d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
 800f3ce:	e000      	b.n	800f3d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3718      	adds	r7, #24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b086      	sub	sp, #24
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	60f8      	str	r0, [r7, #12]
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f3e8:	7afb      	ldrb	r3, [r7, #11]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d16f      	bne.n	800f4ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3314      	adds	r3, #20
 800f3f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d15a      	bne.n	800f4b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	689a      	ldr	r2, [r3, #8]
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	429a      	cmp	r2, r3
 800f408:	d914      	bls.n	800f434 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	689a      	ldr	r2, [r3, #8]
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	1ad2      	subs	r2, r2, r3
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	461a      	mov	r2, r3
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f001 f8d6 	bl	80105d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f426:	2300      	movs	r3, #0
 800f428:	2200      	movs	r2, #0
 800f42a:	2100      	movs	r1, #0
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f006 fbe3 	bl	8015bf8 <USBD_LL_PrepareReceive>
 800f432:	e03f      	b.n	800f4b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	68da      	ldr	r2, [r3, #12]
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	689b      	ldr	r3, [r3, #8]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d11c      	bne.n	800f47a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f448:	429a      	cmp	r2, r3
 800f44a:	d316      	bcc.n	800f47a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f456:	429a      	cmp	r2, r3
 800f458:	d20f      	bcs.n	800f47a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f45a:	2200      	movs	r2, #0
 800f45c:	2100      	movs	r1, #0
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f001 f8b7 	bl	80105d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f46c:	2300      	movs	r3, #0
 800f46e:	2200      	movs	r2, #0
 800f470:	2100      	movs	r1, #0
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f006 fbc0 	bl	8015bf8 <USBD_LL_PrepareReceive>
 800f478:	e01c      	b.n	800f4b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b03      	cmp	r3, #3
 800f484:	d10f      	bne.n	800f4a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d009      	beq.n	800f4a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4a6:	2180      	movs	r1, #128	; 0x80
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f006 fafb 	bl	8015aa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f001 f8e1 	bl	8010676 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d03a      	beq.n	800f534 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f7ff fe42 	bl	800f148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f4cc:	e032      	b.n	800f534 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f4ce:	7afb      	ldrb	r3, [r7, #11]
 800f4d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 f97f 	bl	800f7dc <USBD_CoreFindEP>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	2bff      	cmp	r3, #255	; 0xff
 800f4e6:	d025      	beq.n	800f534 <USBD_LL_DataInStage+0x15a>
 800f4e8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d122      	bne.n	800f534 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d11c      	bne.n	800f534 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f4fa:	7dfa      	ldrb	r2, [r7, #23]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	32ae      	adds	r2, #174	; 0xae
 800f500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f504:	695b      	ldr	r3, [r3, #20]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f50a:	7dfa      	ldrb	r2, [r7, #23]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f512:	7dfa      	ldrb	r2, [r7, #23]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	32ae      	adds	r2, #174	; 0xae
 800f518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	7afa      	ldrb	r2, [r7, #11]
 800f520:	4611      	mov	r1, r2
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	4798      	blx	r3
 800f526:	4603      	mov	r3, r0
 800f528:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f52a:	7dbb      	ldrb	r3, [r7, #22]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f530:	7dbb      	ldrb	r3, [r7, #22]
 800f532:	e000      	b.n	800f536 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b084      	sub	sp, #16
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f546:	2300      	movs	r3, #0
 800f548:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f576:	2b00      	cmp	r3, #0
 800f578:	d014      	beq.n	800f5a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00e      	beq.n	800f5a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	6852      	ldr	r2, [r2, #4]
 800f592:	b2d2      	uxtb	r2, r2
 800f594:	4611      	mov	r1, r2
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	4798      	blx	r3
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d001      	beq.n	800f5a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5a4:	2340      	movs	r3, #64	; 0x40
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f006 fa35 	bl	8015a1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2240      	movs	r2, #64	; 0x40
 800f5bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5c0:	2340      	movs	r3, #64	; 0x40
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2180      	movs	r1, #128	; 0x80
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f006 fa27 	bl	8015a1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2240      	movs	r2, #64	; 0x40
 800f5d6:	621a      	str	r2, [r3, #32]

  return ret;
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f5e2:	b480      	push	{r7}
 800f5e4:	b083      	sub	sp, #12
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	78fa      	ldrb	r2, [r7, #3]
 800f5f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f610:	b2da      	uxtb	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2204      	movs	r2, #4
 800f61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f62e:	b480      	push	{r7}
 800f630:	b083      	sub	sp, #12
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b04      	cmp	r3, #4
 800f640:	d106      	bne.n	800f650 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f650:	2300      	movs	r3, #0
}
 800f652:	4618      	mov	r0, r3
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b03      	cmp	r3, #3
 800f670:	d110      	bne.n	800f694 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d005      	beq.n	800f694 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f68e:	69db      	ldr	r3, [r3, #28]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	32ae      	adds	r2, #174	; 0xae
 800f6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f6bc:	2303      	movs	r3, #3
 800f6be:	e01c      	b.n	800f6fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	2b03      	cmp	r3, #3
 800f6ca:	d115      	bne.n	800f6f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	32ae      	adds	r2, #174	; 0xae
 800f6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6da:	6a1b      	ldr	r3, [r3, #32]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00b      	beq.n	800f6f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	32ae      	adds	r2, #174	; 0xae
 800f6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ee:	6a1b      	ldr	r3, [r3, #32]
 800f6f0:	78fa      	ldrb	r2, [r7, #3]
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b082      	sub	sp, #8
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
 800f70a:	460b      	mov	r3, r1
 800f70c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	32ae      	adds	r2, #174	; 0xae
 800f718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d101      	bne.n	800f724 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f720:	2303      	movs	r3, #3
 800f722:	e01c      	b.n	800f75e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d115      	bne.n	800f75c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	32ae      	adds	r2, #174	; 0xae
 800f73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00b      	beq.n	800f75c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	32ae      	adds	r2, #174	; 0xae
 800f74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f754:	78fa      	ldrb	r2, [r7, #3]
 800f756:	4611      	mov	r1, r2
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f784:	2300      	movs	r3, #0
 800f786:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00e      	beq.n	800f7b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	6852      	ldr	r2, [r2, #4]
 800f7a6:	b2d2      	uxtb	r2, r2
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	4798      	blx	r3
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f7c2:	b480      	push	{r7}
 800f7c4:	b083      	sub	sp, #12
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f7ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f7e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b086      	sub	sp, #24
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	460b      	mov	r3, r1
 800f800:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	885b      	ldrh	r3, [r3, #2]
 800f812:	b29a      	uxth	r2, r3
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d920      	bls.n	800f860 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	b29b      	uxth	r3, r3
 800f824:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f826:	e013      	b.n	800f850 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f828:	f107 030a 	add.w	r3, r7, #10
 800f82c:	4619      	mov	r1, r3
 800f82e:	6978      	ldr	r0, [r7, #20]
 800f830:	f000 f81b 	bl	800f86a <USBD_GetNextDesc>
 800f834:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	785b      	ldrb	r3, [r3, #1]
 800f83a:	2b05      	cmp	r3, #5
 800f83c:	d108      	bne.n	800f850 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	789b      	ldrb	r3, [r3, #2]
 800f846:	78fa      	ldrb	r2, [r7, #3]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d008      	beq.n	800f85e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f84c:	2300      	movs	r3, #0
 800f84e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	885b      	ldrh	r3, [r3, #2]
 800f854:	b29a      	uxth	r2, r3
 800f856:	897b      	ldrh	r3, [r7, #10]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d8e5      	bhi.n	800f828 <USBD_GetEpDesc+0x32>
 800f85c:	e000      	b.n	800f860 <USBD_GetEpDesc+0x6a>
          break;
 800f85e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f860:	693b      	ldr	r3, [r7, #16]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3718      	adds	r7, #24
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f86a:	b480      	push	{r7}
 800f86c:	b085      	sub	sp, #20
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	881a      	ldrh	r2, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	b29b      	uxth	r3, r3
 800f882:	4413      	add	r3, r2
 800f884:	b29a      	uxth	r2, r3
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	461a      	mov	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4413      	add	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f896:	68fb      	ldr	r3, [r7, #12]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3714      	adds	r7, #20
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b087      	sub	sp, #28
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f8c2:	8a3b      	ldrh	r3, [r7, #16]
 800f8c4:	021b      	lsls	r3, r3, #8
 800f8c6:	b21a      	sxth	r2, r3
 800f8c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	b21b      	sxth	r3, r3
 800f8d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f8d2:	89fb      	ldrh	r3, [r7, #14]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	371c      	adds	r7, #28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8f6:	2b40      	cmp	r3, #64	; 0x40
 800f8f8:	d005      	beq.n	800f906 <USBD_StdDevReq+0x26>
 800f8fa:	2b40      	cmp	r3, #64	; 0x40
 800f8fc:	d857      	bhi.n	800f9ae <USBD_StdDevReq+0xce>
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00f      	beq.n	800f922 <USBD_StdDevReq+0x42>
 800f902:	2b20      	cmp	r3, #32
 800f904:	d153      	bne.n	800f9ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	32ae      	adds	r2, #174	; 0xae
 800f910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	4798      	blx	r3
 800f91c:	4603      	mov	r3, r0
 800f91e:	73fb      	strb	r3, [r7, #15]
      break;
 800f920:	e04a      	b.n	800f9b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	785b      	ldrb	r3, [r3, #1]
 800f926:	2b09      	cmp	r3, #9
 800f928:	d83b      	bhi.n	800f9a2 <USBD_StdDevReq+0xc2>
 800f92a:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <USBD_StdDevReq+0x50>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f985 	.word	0x0800f985
 800f934:	0800f999 	.word	0x0800f999
 800f938:	0800f9a3 	.word	0x0800f9a3
 800f93c:	0800f98f 	.word	0x0800f98f
 800f940:	0800f9a3 	.word	0x0800f9a3
 800f944:	0800f963 	.word	0x0800f963
 800f948:	0800f959 	.word	0x0800f959
 800f94c:	0800f9a3 	.word	0x0800f9a3
 800f950:	0800f97b 	.word	0x0800f97b
 800f954:	0800f96d 	.word	0x0800f96d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fa3c 	bl	800fdd8 <USBD_GetDescriptor>
          break;
 800f960:	e024      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f962:	6839      	ldr	r1, [r7, #0]
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fbcb 	bl	8010100 <USBD_SetAddress>
          break;
 800f96a:	e01f      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f96c:	6839      	ldr	r1, [r7, #0]
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 fc0a 	bl	8010188 <USBD_SetConfig>
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]
          break;
 800f978:	e018      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fcad 	bl	80102dc <USBD_GetConfig>
          break;
 800f982:	e013      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fcde 	bl	8010348 <USBD_GetStatus>
          break;
 800f98c:	e00e      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 fd0d 	bl	80103b0 <USBD_SetFeature>
          break;
 800f996:	e009      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f998:	6839      	ldr	r1, [r7, #0]
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fd31 	bl	8010402 <USBD_ClrFeature>
          break;
 800f9a0:	e004      	b.n	800f9ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f9a2:	6839      	ldr	r1, [r7, #0]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fd88 	bl	80104ba <USBD_CtlError>
          break;
 800f9aa:	bf00      	nop
      }
      break;
 800f9ac:	e004      	b.n	800f9b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fd82 	bl	80104ba <USBD_CtlError>
      break;
 800f9b6:	bf00      	nop
  }

  return ret;
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop

0800f9c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9da:	2b40      	cmp	r3, #64	; 0x40
 800f9dc:	d005      	beq.n	800f9ea <USBD_StdItfReq+0x26>
 800f9de:	2b40      	cmp	r3, #64	; 0x40
 800f9e0:	d852      	bhi.n	800fa88 <USBD_StdItfReq+0xc4>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d001      	beq.n	800f9ea <USBD_StdItfReq+0x26>
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	d14e      	bne.n	800fa88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d840      	bhi.n	800fa7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	889b      	ldrh	r3, [r3, #4]
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d836      	bhi.n	800fa70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	889b      	ldrh	r3, [r3, #4]
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff fed9 	bl	800f7c2 <USBD_CoreFindIF>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa14:	7bbb      	ldrb	r3, [r7, #14]
 800fa16:	2bff      	cmp	r3, #255	; 0xff
 800fa18:	d01d      	beq.n	800fa56 <USBD_StdItfReq+0x92>
 800fa1a:	7bbb      	ldrb	r3, [r7, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d11a      	bne.n	800fa56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fa20:	7bba      	ldrb	r2, [r7, #14]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	32ae      	adds	r2, #174	; 0xae
 800fa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00f      	beq.n	800fa50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fa30:	7bba      	ldrb	r2, [r7, #14]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fa38:	7bba      	ldrb	r2, [r7, #14]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	32ae      	adds	r2, #174	; 0xae
 800fa3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	6839      	ldr	r1, [r7, #0]
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	4798      	blx	r3
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fa4e:	e004      	b.n	800fa5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fa50:	2303      	movs	r3, #3
 800fa52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fa54:	e001      	b.n	800fa5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fa56:	2303      	movs	r3, #3
 800fa58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	88db      	ldrh	r3, [r3, #6]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d110      	bne.n	800fa84 <USBD_StdItfReq+0xc0>
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d10d      	bne.n	800fa84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fdf1 	bl	8010650 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fa6e:	e009      	b.n	800fa84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fd21 	bl	80104ba <USBD_CtlError>
          break;
 800fa78:	e004      	b.n	800fa84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fa7a:	6839      	ldr	r1, [r7, #0]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fd1c 	bl	80104ba <USBD_CtlError>
          break;
 800fa82:	e000      	b.n	800fa86 <USBD_StdItfReq+0xc2>
          break;
 800fa84:	bf00      	nop
      }
      break;
 800fa86:	e004      	b.n	800fa92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fd15 	bl	80104ba <USBD_CtlError>
      break;
 800fa90:	bf00      	nop
  }

  return ret;
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	889b      	ldrh	r3, [r3, #4]
 800faae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fab8:	2b40      	cmp	r3, #64	; 0x40
 800faba:	d007      	beq.n	800facc <USBD_StdEPReq+0x30>
 800fabc:	2b40      	cmp	r3, #64	; 0x40
 800fabe:	f200 817f 	bhi.w	800fdc0 <USBD_StdEPReq+0x324>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d02a      	beq.n	800fb1c <USBD_StdEPReq+0x80>
 800fac6:	2b20      	cmp	r3, #32
 800fac8:	f040 817a 	bne.w	800fdc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800facc:	7bbb      	ldrb	r3, [r7, #14]
 800face:	4619      	mov	r1, r3
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7ff fe83 	bl	800f7dc <USBD_CoreFindEP>
 800fad6:	4603      	mov	r3, r0
 800fad8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fada:	7b7b      	ldrb	r3, [r7, #13]
 800fadc:	2bff      	cmp	r3, #255	; 0xff
 800fade:	f000 8174 	beq.w	800fdca <USBD_StdEPReq+0x32e>
 800fae2:	7b7b      	ldrb	r3, [r7, #13]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f040 8170 	bne.w	800fdca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800faea:	7b7a      	ldrb	r2, [r7, #13]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800faf2:	7b7a      	ldrb	r2, [r7, #13]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	32ae      	adds	r2, #174	; 0xae
 800faf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 8163 	beq.w	800fdca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fb04:	7b7a      	ldrb	r2, [r7, #13]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	32ae      	adds	r2, #174	; 0xae
 800fb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	4798      	blx	r3
 800fb16:	4603      	mov	r3, r0
 800fb18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fb1a:	e156      	b.n	800fdca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	785b      	ldrb	r3, [r3, #1]
 800fb20:	2b03      	cmp	r3, #3
 800fb22:	d008      	beq.n	800fb36 <USBD_StdEPReq+0x9a>
 800fb24:	2b03      	cmp	r3, #3
 800fb26:	f300 8145 	bgt.w	800fdb4 <USBD_StdEPReq+0x318>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f000 809b 	beq.w	800fc66 <USBD_StdEPReq+0x1ca>
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d03c      	beq.n	800fbae <USBD_StdEPReq+0x112>
 800fb34:	e13e      	b.n	800fdb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	2b02      	cmp	r3, #2
 800fb40:	d002      	beq.n	800fb48 <USBD_StdEPReq+0xac>
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d016      	beq.n	800fb74 <USBD_StdEPReq+0xd8>
 800fb46:	e02c      	b.n	800fba2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb48:	7bbb      	ldrb	r3, [r7, #14]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00d      	beq.n	800fb6a <USBD_StdEPReq+0xce>
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
 800fb50:	2b80      	cmp	r3, #128	; 0x80
 800fb52:	d00a      	beq.n	800fb6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f005 ffa3 	bl	8015aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb5e:	2180      	movs	r1, #128	; 0x80
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f005 ff9f 	bl	8015aa4 <USBD_LL_StallEP>
 800fb66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb68:	e020      	b.n	800fbac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fca4 	bl	80104ba <USBD_CtlError>
              break;
 800fb72:	e01b      	b.n	800fbac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	885b      	ldrh	r3, [r3, #2]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d10e      	bne.n	800fb9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fb7c:	7bbb      	ldrb	r3, [r7, #14]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00b      	beq.n	800fb9a <USBD_StdEPReq+0xfe>
 800fb82:	7bbb      	ldrb	r3, [r7, #14]
 800fb84:	2b80      	cmp	r3, #128	; 0x80
 800fb86:	d008      	beq.n	800fb9a <USBD_StdEPReq+0xfe>
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	88db      	ldrh	r3, [r3, #6]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d104      	bne.n	800fb9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb90:	7bbb      	ldrb	r3, [r7, #14]
 800fb92:	4619      	mov	r1, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f005 ff85 	bl	8015aa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 fd58 	bl	8010650 <USBD_CtlSendStatus>

              break;
 800fba0:	e004      	b.n	800fbac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fba2:	6839      	ldr	r1, [r7, #0]
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 fc88 	bl	80104ba <USBD_CtlError>
              break;
 800fbaa:	bf00      	nop
          }
          break;
 800fbac:	e107      	b.n	800fdbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d002      	beq.n	800fbc0 <USBD_StdEPReq+0x124>
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d016      	beq.n	800fbec <USBD_StdEPReq+0x150>
 800fbbe:	e04b      	b.n	800fc58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbc0:	7bbb      	ldrb	r3, [r7, #14]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00d      	beq.n	800fbe2 <USBD_StdEPReq+0x146>
 800fbc6:	7bbb      	ldrb	r3, [r7, #14]
 800fbc8:	2b80      	cmp	r3, #128	; 0x80
 800fbca:	d00a      	beq.n	800fbe2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f005 ff67 	bl	8015aa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbd6:	2180      	movs	r1, #128	; 0x80
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f005 ff63 	bl	8015aa4 <USBD_LL_StallEP>
 800fbde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fbe0:	e040      	b.n	800fc64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fc68 	bl	80104ba <USBD_CtlError>
              break;
 800fbea:	e03b      	b.n	800fc64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	885b      	ldrh	r3, [r3, #2]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d136      	bne.n	800fc62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
 800fbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d004      	beq.n	800fc08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fbfe:	7bbb      	ldrb	r3, [r7, #14]
 800fc00:	4619      	mov	r1, r3
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f005 ff6d 	bl	8015ae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fd21 	bl	8010650 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fc0e:	7bbb      	ldrb	r3, [r7, #14]
 800fc10:	4619      	mov	r1, r3
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7ff fde2 	bl	800f7dc <USBD_CoreFindEP>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fc1c:	7b7b      	ldrb	r3, [r7, #13]
 800fc1e:	2bff      	cmp	r3, #255	; 0xff
 800fc20:	d01f      	beq.n	800fc62 <USBD_StdEPReq+0x1c6>
 800fc22:	7b7b      	ldrb	r3, [r7, #13]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d11c      	bne.n	800fc62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fc28:	7b7a      	ldrb	r2, [r7, #13]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fc30:	7b7a      	ldrb	r2, [r7, #13]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	32ae      	adds	r2, #174	; 0xae
 800fc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d010      	beq.n	800fc62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fc40:	7b7a      	ldrb	r2, [r7, #13]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	32ae      	adds	r2, #174	; 0xae
 800fc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	6839      	ldr	r1, [r7, #0]
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	4798      	blx	r3
 800fc52:	4603      	mov	r3, r0
 800fc54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fc56:	e004      	b.n	800fc62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fc2d 	bl	80104ba <USBD_CtlError>
              break;
 800fc60:	e000      	b.n	800fc64 <USBD_StdEPReq+0x1c8>
              break;
 800fc62:	bf00      	nop
          }
          break;
 800fc64:	e0ab      	b.n	800fdbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b02      	cmp	r3, #2
 800fc70:	d002      	beq.n	800fc78 <USBD_StdEPReq+0x1dc>
 800fc72:	2b03      	cmp	r3, #3
 800fc74:	d032      	beq.n	800fcdc <USBD_StdEPReq+0x240>
 800fc76:	e097      	b.n	800fda8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d007      	beq.n	800fc8e <USBD_StdEPReq+0x1f2>
 800fc7e:	7bbb      	ldrb	r3, [r7, #14]
 800fc80:	2b80      	cmp	r3, #128	; 0x80
 800fc82:	d004      	beq.n	800fc8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fc17 	bl	80104ba <USBD_CtlError>
                break;
 800fc8c:	e091      	b.n	800fdb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	da0b      	bge.n	800fcae <USBD_StdEPReq+0x212>
 800fc96:	7bbb      	ldrb	r3, [r7, #14]
 800fc98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	4413      	add	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	3310      	adds	r3, #16
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	4413      	add	r3, r2
 800fcaa:	3304      	adds	r3, #4
 800fcac:	e00b      	b.n	800fcc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fcae:	7bbb      	ldrb	r3, [r7, #14]
 800fcb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	2200      	movs	r2, #0
 800fccc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 fc61 	bl	801059c <USBD_CtlSendData>
              break;
 800fcda:	e06a      	b.n	800fdb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fcdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	da11      	bge.n	800fd08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fce4:	7bbb      	ldrb	r3, [r7, #14]
 800fce6:	f003 020f 	and.w	r2, r3, #15
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4613      	mov	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	4413      	add	r3, r2
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	440b      	add	r3, r1
 800fcf6:	3324      	adds	r3, #36	; 0x24
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d117      	bne.n	800fd2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fbda 	bl	80104ba <USBD_CtlError>
                  break;
 800fd06:	e054      	b.n	800fdb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fd08:	7bbb      	ldrb	r3, [r7, #14]
 800fd0a:	f003 020f 	and.w	r2, r3, #15
 800fd0e:	6879      	ldr	r1, [r7, #4]
 800fd10:	4613      	mov	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	440b      	add	r3, r1
 800fd1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d104      	bne.n	800fd2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fbc7 	bl	80104ba <USBD_CtlError>
                  break;
 800fd2c:	e041      	b.n	800fdb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	da0b      	bge.n	800fd4e <USBD_StdEPReq+0x2b2>
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
 800fd38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4413      	add	r3, r2
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	3310      	adds	r3, #16
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	4413      	add	r3, r2
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	e00b      	b.n	800fd66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd4e:	7bbb      	ldrb	r3, [r7, #14]
 800fd50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd54:	4613      	mov	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	3304      	adds	r3, #4
 800fd66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <USBD_StdEPReq+0x2d8>
 800fd6e:	7bbb      	ldrb	r3, [r7, #14]
 800fd70:	2b80      	cmp	r3, #128	; 0x80
 800fd72:	d103      	bne.n	800fd7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	2200      	movs	r2, #0
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	e00e      	b.n	800fd9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fd7c:	7bbb      	ldrb	r3, [r7, #14]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f005 fecd 	bl	8015b20 <USBD_LL_IsStallEP>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	e002      	b.n	800fd9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fbfb 	bl	801059c <USBD_CtlSendData>
              break;
 800fda6:	e004      	b.n	800fdb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fb85 	bl	80104ba <USBD_CtlError>
              break;
 800fdb0:	bf00      	nop
          }
          break;
 800fdb2:	e004      	b.n	800fdbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fdb4:	6839      	ldr	r1, [r7, #0]
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 fb7f 	bl	80104ba <USBD_CtlError>
          break;
 800fdbc:	bf00      	nop
      }
      break;
 800fdbe:	e005      	b.n	800fdcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 fb79 	bl	80104ba <USBD_CtlError>
      break;
 800fdc8:	e000      	b.n	800fdcc <USBD_StdEPReq+0x330>
      break;
 800fdca:	bf00      	nop
  }

  return ret;
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
	...

0800fdd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fde2:	2300      	movs	r3, #0
 800fde4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fdea:	2300      	movs	r3, #0
 800fdec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	885b      	ldrh	r3, [r3, #2]
 800fdf2:	0a1b      	lsrs	r3, r3, #8
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	2b0e      	cmp	r3, #14
 800fdfa:	f200 8152 	bhi.w	80100a2 <USBD_GetDescriptor+0x2ca>
 800fdfe:	a201      	add	r2, pc, #4	; (adr r2, 800fe04 <USBD_GetDescriptor+0x2c>)
 800fe00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe04:	0800fe75 	.word	0x0800fe75
 800fe08:	0800fe8d 	.word	0x0800fe8d
 800fe0c:	0800fecd 	.word	0x0800fecd
 800fe10:	080100a3 	.word	0x080100a3
 800fe14:	080100a3 	.word	0x080100a3
 800fe18:	08010043 	.word	0x08010043
 800fe1c:	0801006f 	.word	0x0801006f
 800fe20:	080100a3 	.word	0x080100a3
 800fe24:	080100a3 	.word	0x080100a3
 800fe28:	080100a3 	.word	0x080100a3
 800fe2c:	080100a3 	.word	0x080100a3
 800fe30:	080100a3 	.word	0x080100a3
 800fe34:	080100a3 	.word	0x080100a3
 800fe38:	080100a3 	.word	0x080100a3
 800fe3c:	0800fe41 	.word	0x0800fe41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe46:	69db      	ldr	r3, [r3, #28]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00b      	beq.n	800fe64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	7c12      	ldrb	r2, [r2, #16]
 800fe58:	f107 0108 	add.w	r1, r7, #8
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
 800fe60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe62:	e126      	b.n	80100b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fb27 	bl	80104ba <USBD_CtlError>
        err++;
 800fe6c:	7afb      	ldrb	r3, [r7, #11]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	72fb      	strb	r3, [r7, #11]
      break;
 800fe72:	e11e      	b.n	80100b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	7c12      	ldrb	r2, [r2, #16]
 800fe80:	f107 0108 	add.w	r1, r7, #8
 800fe84:	4610      	mov	r0, r2
 800fe86:	4798      	blx	r3
 800fe88:	60f8      	str	r0, [r7, #12]
      break;
 800fe8a:	e112      	b.n	80100b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	7c1b      	ldrb	r3, [r3, #16]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d10d      	bne.n	800feb0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe9c:	f107 0208 	add.w	r2, r7, #8
 800fea0:	4610      	mov	r0, r2
 800fea2:	4798      	blx	r3
 800fea4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	2202      	movs	r2, #2
 800feac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800feae:	e100      	b.n	80100b2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb8:	f107 0208 	add.w	r2, r7, #8
 800febc:	4610      	mov	r0, r2
 800febe:	4798      	blx	r3
 800fec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3301      	adds	r3, #1
 800fec6:	2202      	movs	r2, #2
 800fec8:	701a      	strb	r2, [r3, #0]
      break;
 800feca:	e0f2      	b.n	80100b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	885b      	ldrh	r3, [r3, #2]
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	f200 80ac 	bhi.w	8010030 <USBD_GetDescriptor+0x258>
 800fed8:	a201      	add	r2, pc, #4	; (adr r2, 800fee0 <USBD_GetDescriptor+0x108>)
 800feda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fede:	bf00      	nop
 800fee0:	0800fef9 	.word	0x0800fef9
 800fee4:	0800ff2d 	.word	0x0800ff2d
 800fee8:	0800ff61 	.word	0x0800ff61
 800feec:	0800ff95 	.word	0x0800ff95
 800fef0:	0800ffc9 	.word	0x0800ffc9
 800fef4:	0800fffd 	.word	0x0800fffd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00b      	beq.n	800ff1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	7c12      	ldrb	r2, [r2, #16]
 800ff10:	f107 0108 	add.w	r1, r7, #8
 800ff14:	4610      	mov	r0, r2
 800ff16:	4798      	blx	r3
 800ff18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff1a:	e091      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff1c:	6839      	ldr	r1, [r7, #0]
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 facb 	bl	80104ba <USBD_CtlError>
            err++;
 800ff24:	7afb      	ldrb	r3, [r7, #11]
 800ff26:	3301      	adds	r3, #1
 800ff28:	72fb      	strb	r3, [r7, #11]
          break;
 800ff2a:	e089      	b.n	8010040 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00b      	beq.n	800ff50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	7c12      	ldrb	r2, [r2, #16]
 800ff44:	f107 0108 	add.w	r1, r7, #8
 800ff48:	4610      	mov	r0, r2
 800ff4a:	4798      	blx	r3
 800ff4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff4e:	e077      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 fab1 	bl	80104ba <USBD_CtlError>
            err++;
 800ff58:	7afb      	ldrb	r3, [r7, #11]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ff5e:	e06f      	b.n	8010040 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00b      	beq.n	800ff84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	7c12      	ldrb	r2, [r2, #16]
 800ff78:	f107 0108 	add.w	r1, r7, #8
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	4798      	blx	r3
 800ff80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff82:	e05d      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff84:	6839      	ldr	r1, [r7, #0]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fa97 	bl	80104ba <USBD_CtlError>
            err++;
 800ff8c:	7afb      	ldrb	r3, [r7, #11]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	72fb      	strb	r3, [r7, #11]
          break;
 800ff92:	e055      	b.n	8010040 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00b      	beq.n	800ffb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffa6:	691b      	ldr	r3, [r3, #16]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	7c12      	ldrb	r2, [r2, #16]
 800ffac:	f107 0108 	add.w	r1, r7, #8
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	4798      	blx	r3
 800ffb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffb6:	e043      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ffb8:	6839      	ldr	r1, [r7, #0]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fa7d 	bl	80104ba <USBD_CtlError>
            err++;
 800ffc0:	7afb      	ldrb	r3, [r7, #11]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ffc6:	e03b      	b.n	8010040 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffce:	695b      	ldr	r3, [r3, #20]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00b      	beq.n	800ffec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffda:	695b      	ldr	r3, [r3, #20]
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	7c12      	ldrb	r2, [r2, #16]
 800ffe0:	f107 0108 	add.w	r1, r7, #8
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	4798      	blx	r3
 800ffe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffea:	e029      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ffec:	6839      	ldr	r1, [r7, #0]
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fa63 	bl	80104ba <USBD_CtlError>
            err++;
 800fff4:	7afb      	ldrb	r3, [r7, #11]
 800fff6:	3301      	adds	r3, #1
 800fff8:	72fb      	strb	r3, [r7, #11]
          break;
 800fffa:	e021      	b.n	8010040 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010002:	699b      	ldr	r3, [r3, #24]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00b      	beq.n	8010020 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	7c12      	ldrb	r2, [r2, #16]
 8010014:	f107 0108 	add.w	r1, r7, #8
 8010018:	4610      	mov	r0, r2
 801001a:	4798      	blx	r3
 801001c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801001e:	e00f      	b.n	8010040 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 fa49 	bl	80104ba <USBD_CtlError>
            err++;
 8010028:	7afb      	ldrb	r3, [r7, #11]
 801002a:	3301      	adds	r3, #1
 801002c:	72fb      	strb	r3, [r7, #11]
          break;
 801002e:	e007      	b.n	8010040 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 fa41 	bl	80104ba <USBD_CtlError>
          err++;
 8010038:	7afb      	ldrb	r3, [r7, #11]
 801003a:	3301      	adds	r3, #1
 801003c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801003e:	bf00      	nop
      }
      break;
 8010040:	e037      	b.n	80100b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7c1b      	ldrb	r3, [r3, #16]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d109      	bne.n	801005e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010052:	f107 0208 	add.w	r2, r7, #8
 8010056:	4610      	mov	r0, r2
 8010058:	4798      	blx	r3
 801005a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801005c:	e029      	b.n	80100b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801005e:	6839      	ldr	r1, [r7, #0]
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 fa2a 	bl	80104ba <USBD_CtlError>
        err++;
 8010066:	7afb      	ldrb	r3, [r7, #11]
 8010068:	3301      	adds	r3, #1
 801006a:	72fb      	strb	r3, [r7, #11]
      break;
 801006c:	e021      	b.n	80100b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	7c1b      	ldrb	r3, [r3, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10d      	bne.n	8010092 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801007c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007e:	f107 0208 	add.w	r2, r7, #8
 8010082:	4610      	mov	r0, r2
 8010084:	4798      	blx	r3
 8010086:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	3301      	adds	r3, #1
 801008c:	2207      	movs	r2, #7
 801008e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010090:	e00f      	b.n	80100b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 fa10 	bl	80104ba <USBD_CtlError>
        err++;
 801009a:	7afb      	ldrb	r3, [r7, #11]
 801009c:	3301      	adds	r3, #1
 801009e:	72fb      	strb	r3, [r7, #11]
      break;
 80100a0:	e007      	b.n	80100b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fa08 	bl	80104ba <USBD_CtlError>
      err++;
 80100aa:	7afb      	ldrb	r3, [r7, #11]
 80100ac:	3301      	adds	r3, #1
 80100ae:	72fb      	strb	r3, [r7, #11]
      break;
 80100b0:	bf00      	nop
  }

  if (err != 0U)
 80100b2:	7afb      	ldrb	r3, [r7, #11]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d11e      	bne.n	80100f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	88db      	ldrh	r3, [r3, #6]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d016      	beq.n	80100ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80100c0:	893b      	ldrh	r3, [r7, #8]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00e      	beq.n	80100e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	88da      	ldrh	r2, [r3, #6]
 80100ca:	893b      	ldrh	r3, [r7, #8]
 80100cc:	4293      	cmp	r3, r2
 80100ce:	bf28      	it	cs
 80100d0:	4613      	movcs	r3, r2
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80100d6:	893b      	ldrh	r3, [r7, #8]
 80100d8:	461a      	mov	r2, r3
 80100da:	68f9      	ldr	r1, [r7, #12]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fa5d 	bl	801059c <USBD_CtlSendData>
 80100e2:	e009      	b.n	80100f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f9e7 	bl	80104ba <USBD_CtlError>
 80100ec:	e004      	b.n	80100f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 faae 	bl	8010650 <USBD_CtlSendStatus>
 80100f4:	e000      	b.n	80100f8 <USBD_GetDescriptor+0x320>
    return;
 80100f6:	bf00      	nop
  }
}
 80100f8:	3710      	adds	r7, #16
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop

08010100 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	889b      	ldrh	r3, [r3, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d131      	bne.n	8010176 <USBD_SetAddress+0x76>
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	88db      	ldrh	r3, [r3, #6]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d12d      	bne.n	8010176 <USBD_SetAddress+0x76>
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	2b7f      	cmp	r3, #127	; 0x7f
 8010120:	d829      	bhi.n	8010176 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	885b      	ldrh	r3, [r3, #2]
 8010126:	b2db      	uxtb	r3, r3
 8010128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801012c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2b03      	cmp	r3, #3
 8010138:	d104      	bne.n	8010144 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801013a:	6839      	ldr	r1, [r7, #0]
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f9bc 	bl	80104ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010142:	e01d      	b.n	8010180 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	7bfa      	ldrb	r2, [r7, #15]
 8010148:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801014c:	7bfb      	ldrb	r3, [r7, #15]
 801014e:	4619      	mov	r1, r3
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f005 fd11 	bl	8015b78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 fa7a 	bl	8010650 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2202      	movs	r2, #2
 8010166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801016a:	e009      	b.n	8010180 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010174:	e004      	b.n	8010180 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f99e 	bl	80104ba <USBD_CtlError>
  }
}
 801017e:	bf00      	nop
 8010180:	bf00      	nop
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010192:	2300      	movs	r3, #0
 8010194:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	885b      	ldrh	r3, [r3, #2]
 801019a:	b2da      	uxtb	r2, r3
 801019c:	4b4e      	ldr	r3, [pc, #312]	; (80102d8 <USBD_SetConfig+0x150>)
 801019e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101a0:	4b4d      	ldr	r3, [pc, #308]	; (80102d8 <USBD_SetConfig+0x150>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d905      	bls.n	80101b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f985 	bl	80104ba <USBD_CtlError>
    return USBD_FAIL;
 80101b0:	2303      	movs	r3, #3
 80101b2:	e08c      	b.n	80102ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d002      	beq.n	80101c6 <USBD_SetConfig+0x3e>
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d029      	beq.n	8010218 <USBD_SetConfig+0x90>
 80101c4:	e075      	b.n	80102b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80101c6:	4b44      	ldr	r3, [pc, #272]	; (80102d8 <USBD_SetConfig+0x150>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d020      	beq.n	8010210 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80101ce:	4b42      	ldr	r3, [pc, #264]	; (80102d8 <USBD_SetConfig+0x150>)
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	461a      	mov	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80101d8:	4b3f      	ldr	r3, [pc, #252]	; (80102d8 <USBD_SetConfig+0x150>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	4619      	mov	r1, r3
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7fe ffbd 	bl	800f15e <USBD_SetClassConfig>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80101e8:	7bfb      	ldrb	r3, [r7, #15]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d008      	beq.n	8010200 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f962 	bl	80104ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2202      	movs	r2, #2
 80101fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80101fe:	e065      	b.n	80102cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 fa25 	bl	8010650 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2203      	movs	r2, #3
 801020a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801020e:	e05d      	b.n	80102cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fa1d 	bl	8010650 <USBD_CtlSendStatus>
      break;
 8010216:	e059      	b.n	80102cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010218:	4b2f      	ldr	r3, [pc, #188]	; (80102d8 <USBD_SetConfig+0x150>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d112      	bne.n	8010246 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2202      	movs	r2, #2
 8010224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010228:	4b2b      	ldr	r3, [pc, #172]	; (80102d8 <USBD_SetConfig+0x150>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	461a      	mov	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010232:	4b29      	ldr	r3, [pc, #164]	; (80102d8 <USBD_SetConfig+0x150>)
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	4619      	mov	r1, r3
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7fe ffac 	bl	800f196 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fa06 	bl	8010650 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010244:	e042      	b.n	80102cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010246:	4b24      	ldr	r3, [pc, #144]	; (80102d8 <USBD_SetConfig+0x150>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	429a      	cmp	r2, r3
 8010252:	d02a      	beq.n	80102aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	b2db      	uxtb	r3, r3
 801025a:	4619      	mov	r1, r3
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7fe ff9a 	bl	800f196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010262:	4b1d      	ldr	r3, [pc, #116]	; (80102d8 <USBD_SetConfig+0x150>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801026c:	4b1a      	ldr	r3, [pc, #104]	; (80102d8 <USBD_SetConfig+0x150>)
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7fe ff73 	bl	800f15e <USBD_SetClassConfig>
 8010278:	4603      	mov	r3, r0
 801027a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801027c:	7bfb      	ldrb	r3, [r7, #15]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00f      	beq.n	80102a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f918 	bl	80104ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	4619      	mov	r1, r3
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7fe ff7f 	bl	800f196 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2202      	movs	r2, #2
 801029c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80102a0:	e014      	b.n	80102cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f9d4 	bl	8010650 <USBD_CtlSendStatus>
      break;
 80102a8:	e010      	b.n	80102cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f9d0 	bl	8010650 <USBD_CtlSendStatus>
      break;
 80102b0:	e00c      	b.n	80102cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 f900 	bl	80104ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102ba:	4b07      	ldr	r3, [pc, #28]	; (80102d8 <USBD_SetConfig+0x150>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	4619      	mov	r1, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7fe ff68 	bl	800f196 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80102c6:	2303      	movs	r3, #3
 80102c8:	73fb      	strb	r3, [r7, #15]
      break;
 80102ca:	bf00      	nop
  }

  return ret;
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	20000f64 	.word	0x20000f64

080102dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	88db      	ldrh	r3, [r3, #6]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d004      	beq.n	80102f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f8e2 	bl	80104ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80102f6:	e023      	b.n	8010340 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b02      	cmp	r3, #2
 8010302:	dc02      	bgt.n	801030a <USBD_GetConfig+0x2e>
 8010304:	2b00      	cmp	r3, #0
 8010306:	dc03      	bgt.n	8010310 <USBD_GetConfig+0x34>
 8010308:	e015      	b.n	8010336 <USBD_GetConfig+0x5a>
 801030a:	2b03      	cmp	r3, #3
 801030c:	d00b      	beq.n	8010326 <USBD_GetConfig+0x4a>
 801030e:	e012      	b.n	8010336 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	3308      	adds	r3, #8
 801031a:	2201      	movs	r2, #1
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f93c 	bl	801059c <USBD_CtlSendData>
        break;
 8010324:	e00c      	b.n	8010340 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	3304      	adds	r3, #4
 801032a:	2201      	movs	r2, #1
 801032c:	4619      	mov	r1, r3
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f934 	bl	801059c <USBD_CtlSendData>
        break;
 8010334:	e004      	b.n	8010340 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 f8be 	bl	80104ba <USBD_CtlError>
        break;
 801033e:	bf00      	nop
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010358:	b2db      	uxtb	r3, r3
 801035a:	3b01      	subs	r3, #1
 801035c:	2b02      	cmp	r3, #2
 801035e:	d81e      	bhi.n	801039e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	88db      	ldrh	r3, [r3, #6]
 8010364:	2b02      	cmp	r3, #2
 8010366:	d004      	beq.n	8010372 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010368:	6839      	ldr	r1, [r7, #0]
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 f8a5 	bl	80104ba <USBD_CtlError>
        break;
 8010370:	e01a      	b.n	80103a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801037e:	2b00      	cmp	r3, #0
 8010380:	d005      	beq.n	801038e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	f043 0202 	orr.w	r2, r3, #2
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	330c      	adds	r3, #12
 8010392:	2202      	movs	r2, #2
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f900 	bl	801059c <USBD_CtlSendData>
      break;
 801039c:	e004      	b.n	80103a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f88a 	bl	80104ba <USBD_CtlError>
      break;
 80103a6:	bf00      	nop
  }
}
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	885b      	ldrh	r3, [r3, #2]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d107      	bne.n	80103d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 f940 	bl	8010650 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80103d0:	e013      	b.n	80103fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	885b      	ldrh	r3, [r3, #2]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d10b      	bne.n	80103f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	889b      	ldrh	r3, [r3, #4]
 80103de:	0a1b      	lsrs	r3, r3, #8
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	b2da      	uxtb	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f930 	bl	8010650 <USBD_CtlSendStatus>
}
 80103f0:	e003      	b.n	80103fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80103f2:	6839      	ldr	r1, [r7, #0]
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f860 	bl	80104ba <USBD_CtlError>
}
 80103fa:	bf00      	nop
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010402:	b580      	push	{r7, lr}
 8010404:	b082      	sub	sp, #8
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010412:	b2db      	uxtb	r3, r3
 8010414:	3b01      	subs	r3, #1
 8010416:	2b02      	cmp	r3, #2
 8010418:	d80b      	bhi.n	8010432 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	885b      	ldrh	r3, [r3, #2]
 801041e:	2b01      	cmp	r3, #1
 8010420:	d10c      	bne.n	801043c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f910 	bl	8010650 <USBD_CtlSendStatus>
      }
      break;
 8010430:	e004      	b.n	801043c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f840 	bl	80104ba <USBD_CtlError>
      break;
 801043a:	e000      	b.n	801043e <USBD_ClrFeature+0x3c>
      break;
 801043c:	bf00      	nop
  }
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	781a      	ldrb	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3301      	adds	r3, #1
 8010460:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	781a      	ldrb	r2, [r3, #0]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	3301      	adds	r3, #1
 801046e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010470:	68f8      	ldr	r0, [r7, #12]
 8010472:	f7ff fa17 	bl	800f8a4 <SWAPBYTE>
 8010476:	4603      	mov	r3, r0
 8010478:	461a      	mov	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	3301      	adds	r3, #1
 8010482:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	3301      	adds	r3, #1
 8010488:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff fa0a 	bl	800f8a4 <SWAPBYTE>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3301      	adds	r3, #1
 801049c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	3301      	adds	r3, #1
 80104a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f7ff f9fd 	bl	800f8a4 <SWAPBYTE>
 80104aa:	4603      	mov	r3, r0
 80104ac:	461a      	mov	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	80da      	strh	r2, [r3, #6]
}
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80104c4:	2180      	movs	r1, #128	; 0x80
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f005 faec 	bl	8015aa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80104cc:	2100      	movs	r1, #0
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f005 fae8 	bl	8015aa4 <USBD_LL_StallEP>
}
 80104d4:	bf00      	nop
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80104e8:	2300      	movs	r3, #0
 80104ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d036      	beq.n	8010560 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80104f6:	6938      	ldr	r0, [r7, #16]
 80104f8:	f000 f836 	bl	8010568 <USBD_GetLen>
 80104fc:	4603      	mov	r3, r0
 80104fe:	3301      	adds	r3, #1
 8010500:	b29b      	uxth	r3, r3
 8010502:	005b      	lsls	r3, r3, #1
 8010504:	b29a      	uxth	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	4413      	add	r3, r2
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	7812      	ldrb	r2, [r2, #0]
 8010514:	701a      	strb	r2, [r3, #0]
  idx++;
 8010516:	7dfb      	ldrb	r3, [r7, #23]
 8010518:	3301      	adds	r3, #1
 801051a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801051c:	7dfb      	ldrb	r3, [r7, #23]
 801051e:	68ba      	ldr	r2, [r7, #8]
 8010520:	4413      	add	r3, r2
 8010522:	2203      	movs	r2, #3
 8010524:	701a      	strb	r2, [r3, #0]
  idx++;
 8010526:	7dfb      	ldrb	r3, [r7, #23]
 8010528:	3301      	adds	r3, #1
 801052a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801052c:	e013      	b.n	8010556 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801052e:	7dfb      	ldrb	r3, [r7, #23]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	4413      	add	r3, r2
 8010534:	693a      	ldr	r2, [r7, #16]
 8010536:	7812      	ldrb	r2, [r2, #0]
 8010538:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	3301      	adds	r3, #1
 801053e:	613b      	str	r3, [r7, #16]
    idx++;
 8010540:	7dfb      	ldrb	r3, [r7, #23]
 8010542:	3301      	adds	r3, #1
 8010544:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010546:	7dfb      	ldrb	r3, [r7, #23]
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	4413      	add	r3, r2
 801054c:	2200      	movs	r2, #0
 801054e:	701a      	strb	r2, [r3, #0]
    idx++;
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	3301      	adds	r3, #1
 8010554:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1e7      	bne.n	801052e <USBD_GetString+0x52>
 801055e:	e000      	b.n	8010562 <USBD_GetString+0x86>
    return;
 8010560:	bf00      	nop
  }
}
 8010562:	3718      	adds	r7, #24
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010578:	e005      	b.n	8010586 <USBD_GetLen+0x1e>
  {
    len++;
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	3301      	adds	r3, #1
 801057e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	3301      	adds	r3, #1
 8010584:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1f5      	bne.n	801057a <USBD_GetLen+0x12>
  }

  return len;
 801058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2202      	movs	r2, #2
 80105ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	2100      	movs	r1, #0
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f005 faf7 	bl	8015bb6 <USBD_LL_Transmit>

  return USBD_OK;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b084      	sub	sp, #16
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	68ba      	ldr	r2, [r7, #8]
 80105e2:	2100      	movs	r1, #0
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f005 fae6 	bl	8015bb6 <USBD_LL_Transmit>

  return USBD_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2203      	movs	r2, #3
 8010604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	2100      	movs	r1, #0
 801061e:	68f8      	ldr	r0, [r7, #12]
 8010620:	f005 faea 	bl	8015bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b084      	sub	sp, #16
 8010632:	af00      	add	r7, sp, #0
 8010634:	60f8      	str	r0, [r7, #12]
 8010636:	60b9      	str	r1, [r7, #8]
 8010638:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68ba      	ldr	r2, [r7, #8]
 801063e:	2100      	movs	r1, #0
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f005 fad9 	bl	8015bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010646:	2300      	movs	r3, #0
}
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2204      	movs	r2, #4
 801065c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010660:	2300      	movs	r3, #0
 8010662:	2200      	movs	r2, #0
 8010664:	2100      	movs	r1, #0
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f005 faa5 	bl	8015bb6 <USBD_LL_Transmit>

  return USBD_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2205      	movs	r2, #5
 8010682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010686:	2300      	movs	r3, #0
 8010688:	2200      	movs	r2, #0
 801068a:	2100      	movs	r1, #0
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f005 fab3 	bl	8015bf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801069c:	b590      	push	{r4, r7, lr}
 801069e:	b089      	sub	sp, #36	; 0x24
 80106a0:	af04      	add	r7, sp, #16
 80106a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80106a4:	2301      	movs	r3, #1
 80106a6:	2202      	movs	r2, #2
 80106a8:	2102      	movs	r1, #2
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 fc85 	bl	8010fba <USBH_FindInterface>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	2bff      	cmp	r3, #255	; 0xff
 80106b8:	d002      	beq.n	80106c0 <USBH_CDC_InterfaceInit+0x24>
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d901      	bls.n	80106c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80106c0:	2302      	movs	r3, #2
 80106c2:	e13d      	b.n	8010940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	4619      	mov	r1, r3
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 fc5a 	bl	8010f82 <USBH_SelectInterface>
 80106ce:	4603      	mov	r3, r0
 80106d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d001      	beq.n	80106dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80106d8:	2302      	movs	r3, #2
 80106da:	e131      	b.n	8010940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80106e2:	2050      	movs	r0, #80	; 0x50
 80106e4:	f005 fe82 	bl	80163ec <malloc>
 80106e8:	4603      	mov	r3, r0
 80106ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80106f2:	69db      	ldr	r3, [r3, #28]
 80106f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80106fc:	2302      	movs	r3, #2
 80106fe:	e11f      	b.n	8010940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010700:	2250      	movs	r2, #80	; 0x50
 8010702:	2100      	movs	r1, #0
 8010704:	68b8      	ldr	r0, [r7, #8]
 8010706:	f005 fe9f 	bl	8016448 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	211a      	movs	r1, #26
 8010710:	fb01 f303 	mul.w	r3, r1, r3
 8010714:	4413      	add	r3, r2
 8010716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	b25b      	sxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	da15      	bge.n	801074e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	211a      	movs	r1, #26
 8010728:	fb01 f303 	mul.w	r3, r1, r3
 801072c:	4413      	add	r3, r2
 801072e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010732:	781a      	ldrb	r2, [r3, #0]
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	211a      	movs	r1, #26
 801073e:	fb01 f303 	mul.w	r3, r1, r3
 8010742:	4413      	add	r3, r2
 8010744:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010748:	881a      	ldrh	r2, [r3, #0]
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	785b      	ldrb	r3, [r3, #1]
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f001 ff26 	bl	80125a6 <USBH_AllocPipe>
 801075a:	4603      	mov	r3, r0
 801075c:	461a      	mov	r2, r3
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	7819      	ldrb	r1, [r3, #0]
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	7858      	ldrb	r0, [r3, #1]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	8952      	ldrh	r2, [r2, #10]
 801077a:	9202      	str	r2, [sp, #8]
 801077c:	2203      	movs	r2, #3
 801077e:	9201      	str	r2, [sp, #4]
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	4623      	mov	r3, r4
 8010784:	4602      	mov	r2, r0
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f001 fede 	bl	8012548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	2200      	movs	r2, #0
 8010792:	4619      	mov	r1, r3
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f005 fd77 	bl	8016288 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801079a:	2300      	movs	r3, #0
 801079c:	2200      	movs	r2, #0
 801079e:	210a      	movs	r1, #10
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fc0a 	bl	8010fba <USBH_FindInterface>
 80107a6:	4603      	mov	r3, r0
 80107a8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
 80107ac:	2bff      	cmp	r3, #255	; 0xff
 80107ae:	d002      	beq.n	80107b6 <USBH_CDC_InterfaceInit+0x11a>
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d901      	bls.n	80107ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80107b6:	2302      	movs	r3, #2
 80107b8:	e0c2      	b.n	8010940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	211a      	movs	r1, #26
 80107c0:	fb01 f303 	mul.w	r3, r1, r3
 80107c4:	4413      	add	r3, r2
 80107c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	b25b      	sxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	da16      	bge.n	8010800 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	211a      	movs	r1, #26
 80107d8:	fb01 f303 	mul.w	r3, r1, r3
 80107dc:	4413      	add	r3, r2
 80107de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80107e2:	781a      	ldrb	r2, [r3, #0]
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	211a      	movs	r1, #26
 80107ee:	fb01 f303 	mul.w	r3, r1, r3
 80107f2:	4413      	add	r3, r2
 80107f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80107f8:	881a      	ldrh	r2, [r3, #0]
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	835a      	strh	r2, [r3, #26]
 80107fe:	e015      	b.n	801082c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010800:	7bfb      	ldrb	r3, [r7, #15]
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	211a      	movs	r1, #26
 8010806:	fb01 f303 	mul.w	r3, r1, r3
 801080a:	4413      	add	r3, r2
 801080c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010810:	781a      	ldrb	r2, [r3, #0]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010816:	7bfb      	ldrb	r3, [r7, #15]
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	211a      	movs	r1, #26
 801081c:	fb01 f303 	mul.w	r3, r1, r3
 8010820:	4413      	add	r3, r2
 8010822:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010826:	881a      	ldrh	r2, [r3, #0]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 801082c:	7bfb      	ldrb	r3, [r7, #15]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	211a      	movs	r1, #26
 8010832:	fb01 f303 	mul.w	r3, r1, r3
 8010836:	4413      	add	r3, r2
 8010838:	f203 3356 	addw	r3, r3, #854	; 0x356
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	b25b      	sxtb	r3, r3
 8010840:	2b00      	cmp	r3, #0
 8010842:	da16      	bge.n	8010872 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010844:	7bfb      	ldrb	r3, [r7, #15]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	211a      	movs	r1, #26
 801084a:	fb01 f303 	mul.w	r3, r1, r3
 801084e:	4413      	add	r3, r2
 8010850:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010854:	781a      	ldrb	r2, [r3, #0]
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801085a:	7bfb      	ldrb	r3, [r7, #15]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	211a      	movs	r1, #26
 8010860:	fb01 f303 	mul.w	r3, r1, r3
 8010864:	4413      	add	r3, r2
 8010866:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801086a:	881a      	ldrh	r2, [r3, #0]
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	835a      	strh	r2, [r3, #26]
 8010870:	e015      	b.n	801089e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010872:	7bfb      	ldrb	r3, [r7, #15]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	211a      	movs	r1, #26
 8010878:	fb01 f303 	mul.w	r3, r1, r3
 801087c:	4413      	add	r3, r2
 801087e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010882:	781a      	ldrb	r2, [r3, #0]
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	211a      	movs	r1, #26
 801088e:	fb01 f303 	mul.w	r3, r1, r3
 8010892:	4413      	add	r3, r2
 8010894:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010898:	881a      	ldrh	r2, [r3, #0]
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	7b9b      	ldrb	r3, [r3, #14]
 80108a2:	4619      	mov	r1, r3
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f001 fe7e 	bl	80125a6 <USBH_AllocPipe>
 80108aa:	4603      	mov	r3, r0
 80108ac:	461a      	mov	r2, r3
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	7bdb      	ldrb	r3, [r3, #15]
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 fe74 	bl	80125a6 <USBH_AllocPipe>
 80108be:	4603      	mov	r3, r0
 80108c0:	461a      	mov	r2, r3
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	7b59      	ldrb	r1, [r3, #13]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	7b98      	ldrb	r0, [r3, #14]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	8b12      	ldrh	r2, [r2, #24]
 80108de:	9202      	str	r2, [sp, #8]
 80108e0:	2202      	movs	r2, #2
 80108e2:	9201      	str	r2, [sp, #4]
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	4623      	mov	r3, r4
 80108e8:	4602      	mov	r2, r0
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f001 fe2c 	bl	8012548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	7b19      	ldrb	r1, [r3, #12]
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	7bd8      	ldrb	r0, [r3, #15]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	8b52      	ldrh	r2, [r2, #26]
 8010908:	9202      	str	r2, [sp, #8]
 801090a:	2202      	movs	r2, #2
 801090c:	9201      	str	r2, [sp, #4]
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	4623      	mov	r3, r4
 8010912:	4602      	mov	r2, r0
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f001 fe17 	bl	8012548 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2200      	movs	r2, #0
 801091e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	7b5b      	ldrb	r3, [r3, #13]
 8010926:	2200      	movs	r2, #0
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f005 fcac 	bl	8016288 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	7b1b      	ldrb	r3, [r3, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	4619      	mov	r1, r3
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f005 fca5 	bl	8016288 <USBH_LL_SetToggle>

  return USBH_OK;
 801093e:	2300      	movs	r3, #0
}
 8010940:	4618      	mov	r0, r3
 8010942:	3714      	adds	r7, #20
 8010944:	46bd      	mov	sp, r7
 8010946:	bd90      	pop	{r4, r7, pc}

08010948 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010956:	69db      	ldr	r3, [r3, #28]
 8010958:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00e      	beq.n	8010980 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f001 fe0c 	bl	8012586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	4619      	mov	r1, r3
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f001 fe37 	bl	80125e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	7b1b      	ldrb	r3, [r3, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00e      	beq.n	80109a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	7b1b      	ldrb	r3, [r3, #12]
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f001 fdf9 	bl	8012586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	7b1b      	ldrb	r3, [r3, #12]
 8010998:	4619      	mov	r1, r3
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f001 fe24 	bl	80125e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	7b5b      	ldrb	r3, [r3, #13]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d00e      	beq.n	80109cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	7b5b      	ldrb	r3, [r3, #13]
 80109b2:	4619      	mov	r1, r3
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f001 fde6 	bl	8012586 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	7b5b      	ldrb	r3, [r3, #13]
 80109be:	4619      	mov	r1, r3
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f001 fe11 	bl	80125e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109d2:	69db      	ldr	r3, [r3, #28]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00b      	beq.n	80109f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109de:	69db      	ldr	r3, [r3, #28]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f005 fd0b 	bl	80163fc <free>
    phost->pActiveClass->pData = 0U;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109ec:	2200      	movs	r2, #0
 80109ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b084      	sub	sp, #16
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a08:	69db      	ldr	r3, [r3, #28]
 8010a0a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	3340      	adds	r3, #64	; 0x40
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f8b1 	bl	8010b7a <GetLineCoding>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010a1c:	7afb      	ldrb	r3, [r7, #11]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d105      	bne.n	8010a2e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a28:	2102      	movs	r1, #2
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010a40:	2301      	movs	r3, #1
 8010a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010a58:	2b04      	cmp	r3, #4
 8010a5a:	d877      	bhi.n	8010b4c <USBH_CDC_Process+0x114>
 8010a5c:	a201      	add	r2, pc, #4	; (adr r2, 8010a64 <USBH_CDC_Process+0x2c>)
 8010a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a62:	bf00      	nop
 8010a64:	08010a79 	.word	0x08010a79
 8010a68:	08010a7f 	.word	0x08010a7f
 8010a6c:	08010aaf 	.word	0x08010aaf
 8010a70:	08010b23 	.word	0x08010b23
 8010a74:	08010b31 	.word	0x08010b31
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a7c:	e06d      	b.n	8010b5a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f897 	bl	8010bb8 <SetLineCoding>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010a8e:	7bbb      	ldrb	r3, [r7, #14]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d104      	bne.n	8010a9e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	2202      	movs	r2, #2
 8010a98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010a9c:	e058      	b.n	8010b50 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8010a9e:	7bbb      	ldrb	r3, [r7, #14]
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d055      	beq.n	8010b50 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	2204      	movs	r2, #4
 8010aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010aac:	e050      	b.n	8010b50 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	3340      	adds	r3, #64	; 0x40
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f000 f860 	bl	8010b7a <GetLineCoding>
 8010aba:	4603      	mov	r3, r0
 8010abc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010abe:	7bbb      	ldrb	r3, [r7, #14]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d126      	bne.n	8010b12 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ad6:	791b      	ldrb	r3, [r3, #4]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d13b      	bne.n	8010b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ae6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d133      	bne.n	8010b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010af6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d12b      	bne.n	8010b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b04:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d124      	bne.n	8010b54 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f958 	bl	8010dc0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010b10:	e020      	b.n	8010b54 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010b12:	7bbb      	ldrb	r3, [r7, #14]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d01d      	beq.n	8010b54 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	2204      	movs	r2, #4
 8010b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010b20:	e018      	b.n	8010b54 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f867 	bl	8010bf6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f8da 	bl	8010ce2 <CDC_ProcessReception>
      break;
 8010b2e:	e014      	b.n	8010b5a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010b30:	2100      	movs	r1, #0
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f001 f80f 	bl	8011b56 <USBH_ClrFeature>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10a      	bne.n	8010b58 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010b4a:	e005      	b.n	8010b58 <USBH_CDC_Process+0x120>

    default:
      break;
 8010b4c:	bf00      	nop
 8010b4e:	e004      	b.n	8010b5a <USBH_CDC_Process+0x122>
      break;
 8010b50:	bf00      	nop
 8010b52:	e002      	b.n	8010b5a <USBH_CDC_Process+0x122>
      break;
 8010b54:	bf00      	nop
 8010b56:	e000      	b.n	8010b5a <USBH_CDC_Process+0x122>
      break;
 8010b58:	bf00      	nop

  }

  return status;
 8010b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	370c      	adds	r7, #12
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr

08010b7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b082      	sub	sp, #8
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	22a1      	movs	r2, #161	; 0xa1
 8010b88:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2221      	movs	r2, #33	; 0x21
 8010b8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2207      	movs	r2, #7
 8010ba0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2207      	movs	r2, #7
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f001 fa7b 	bl	80120a4 <USBH_CtlReq>
 8010bae:	4603      	mov	r3, r0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2221      	movs	r2, #33	; 0x21
 8010bc6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2220      	movs	r2, #32
 8010bcc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2207      	movs	r2, #7
 8010bde:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	2207      	movs	r2, #7
 8010be4:	4619      	mov	r1, r3
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f001 fa5c 	bl	80120a4 <USBH_CtlReq>
 8010bec:	4603      	mov	r3, r0
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3708      	adds	r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b086      	sub	sp, #24
 8010bfa:	af02      	add	r7, sp, #8
 8010bfc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c04:	69db      	ldr	r3, [r3, #28]
 8010c06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d002      	beq.n	8010c1c <CDC_ProcessTransmission+0x26>
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d023      	beq.n	8010c62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8010c1a:	e05e      	b.n	8010cda <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	8b12      	ldrh	r2, [r2, #24]
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d90b      	bls.n	8010c40 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	69d9      	ldr	r1, [r3, #28]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	8b1a      	ldrh	r2, [r3, #24]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	7b5b      	ldrb	r3, [r3, #13]
 8010c34:	2001      	movs	r0, #1
 8010c36:	9000      	str	r0, [sp, #0]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f001 fc42 	bl	80124c2 <USBH_BulkSendData>
 8010c3e:	e00b      	b.n	8010c58 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	7b5b      	ldrb	r3, [r3, #13]
 8010c4e:	2001      	movs	r0, #1
 8010c50:	9000      	str	r0, [sp, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f001 fc35 	bl	80124c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010c60:	e03b      	b.n	8010cda <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	7b5b      	ldrb	r3, [r3, #13]
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f005 fae3 	bl	8016234 <USBH_LL_GetURBState>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010c72:	7afb      	ldrb	r3, [r7, #11]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d128      	bne.n	8010cca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	8b12      	ldrh	r2, [r2, #24]
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d90e      	bls.n	8010ca2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	8b12      	ldrh	r2, [r2, #24]
 8010c8c:	1a9a      	subs	r2, r3, r2
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	69db      	ldr	r3, [r3, #28]
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	8b12      	ldrh	r2, [r2, #24]
 8010c9a:	441a      	add	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	61da      	str	r2, [r3, #28]
 8010ca0:	e002      	b.n	8010ca8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d004      	beq.n	8010cba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010cb8:	e00e      	b.n	8010cd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f868 	bl	8010d98 <USBH_CDC_TransmitCallback>
      break;
 8010cc8:	e006      	b.n	8010cd8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8010cca:	7afb      	ldrb	r3, [r7, #11]
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	d103      	bne.n	8010cd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010cd8:	bf00      	nop
  }
}
 8010cda:	bf00      	nop
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b086      	sub	sp, #24
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010cf0:	69db      	ldr	r3, [r3, #28]
 8010cf2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	d002      	beq.n	8010d08 <CDC_ProcessReception+0x26>
 8010d02:	2b04      	cmp	r3, #4
 8010d04:	d00e      	beq.n	8010d24 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010d06:	e043      	b.n	8010d90 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	6a19      	ldr	r1, [r3, #32]
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	8b5a      	ldrh	r2, [r3, #26]
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	7b1b      	ldrb	r3, [r3, #12]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f001 fbf9 	bl	801250c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2204      	movs	r2, #4
 8010d1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010d22:	e035      	b.n	8010d90 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	7b1b      	ldrb	r3, [r3, #12]
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f005 fa82 	bl	8016234 <USBH_LL_GetURBState>
 8010d30:	4603      	mov	r3, r0
 8010d32:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010d34:	7cfb      	ldrb	r3, [r7, #19]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d129      	bne.n	8010d8e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	7b1b      	ldrb	r3, [r3, #12]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f005 f9e5 	bl	8016110 <USBH_LL_GetLastXferSize>
 8010d46:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d016      	beq.n	8010d80 <CDC_ProcessReception+0x9e>
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	8b5b      	ldrh	r3, [r3, #26]
 8010d56:	461a      	mov	r2, r3
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d910      	bls.n	8010d80 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	1ad2      	subs	r2, r2, r3
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	6a1a      	ldr	r2, [r3, #32]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	441a      	add	r2, r3
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2203      	movs	r2, #3
 8010d7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010d7e:	e006      	b.n	8010d8e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f80f 	bl	8010dac <USBH_CDC_ReceiveCallback>
      break;
 8010d8e:	bf00      	nop
  }
}
 8010d90:	bf00      	nop
 8010d92:	3718      	adds	r7, #24
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	4613      	mov	r3, r2
 8010de0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d101      	bne.n	8010dec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010de8:	2302      	movs	r3, #2
 8010dea:	e029      	b.n	8010e40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	79fa      	ldrb	r2, [r7, #7]
 8010df0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010e04:	68f8      	ldr	r0, [r7, #12]
 8010e06:	f000 f81f 	bl	8010e48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f005 f8b5 	bl	8015fa8 <USBH_LL_Init>

  return USBH_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010e50:	2300      	movs	r3, #0
 8010e52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e54:	2300      	movs	r3, #0
 8010e56:	60fb      	str	r3, [r7, #12]
 8010e58:	e009      	b.n	8010e6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	33e0      	adds	r3, #224	; 0xe0
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	4413      	add	r3, r2
 8010e64:	2200      	movs	r2, #0
 8010e66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	60fb      	str	r3, [r7, #12]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2b0f      	cmp	r3, #15
 8010e72:	d9f2      	bls.n	8010e5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e74:	2300      	movs	r3, #0
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	e009      	b.n	8010e8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	4413      	add	r3, r2
 8010e80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010e84:	2200      	movs	r2, #0
 8010e86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e94:	d3f1      	bcc.n	8010e7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2240      	movs	r2, #64	; 0x40
 8010eba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	331c      	adds	r3, #28
 8010ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010eea:	2100      	movs	r1, #0
 8010eec:	4618      	mov	r0, r3
 8010eee:	f005 faab 	bl	8016448 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f005 faa2 	bl	8016448 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f203 3326 	addw	r3, r3, #806	; 0x326
 8010f0a:	2212      	movs	r2, #18
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f005 fa9a 	bl	8016448 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010f1a:	223e      	movs	r2, #62	; 0x3e
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f005 fa92 	bl	8016448 <memset>

  return USBH_OK;
 8010f24:	2300      	movs	r3, #0
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010f2e:	b480      	push	{r7}
 8010f30:	b085      	sub	sp, #20
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d016      	beq.n	8010f70 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d10e      	bne.n	8010f6a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010f52:	1c59      	adds	r1, r3, #1
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	33de      	adds	r3, #222	; 0xde
 8010f5e:	6839      	ldr	r1, [r7, #0]
 8010f60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010f64:	2300      	movs	r3, #0
 8010f66:	73fb      	strb	r3, [r7, #15]
 8010f68:	e004      	b.n	8010f74 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	73fb      	strb	r3, [r7, #15]
 8010f6e:	e001      	b.n	8010f74 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010f70:	2302      	movs	r3, #2
 8010f72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010f82:	b480      	push	{r7}
 8010f84:	b085      	sub	sp, #20
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010f98:	78fa      	ldrb	r2, [r7, #3]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d204      	bcs.n	8010fa8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	78fa      	ldrb	r2, [r7, #3]
 8010fa2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010fa6:	e001      	b.n	8010fac <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010fa8:	2302      	movs	r3, #2
 8010faa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3714      	adds	r7, #20
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr

08010fba <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b087      	sub	sp, #28
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
 8010fc2:	4608      	mov	r0, r1
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4603      	mov	r3, r0
 8010fca:	70fb      	strb	r3, [r7, #3]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	70bb      	strb	r3, [r7, #2]
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010fe2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010fe4:	e025      	b.n	8011032 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010fe6:	7dfb      	ldrb	r3, [r7, #23]
 8010fe8:	221a      	movs	r2, #26
 8010fea:	fb02 f303 	mul.w	r3, r2, r3
 8010fee:	3308      	adds	r3, #8
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	3302      	adds	r3, #2
 8010ff6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	795b      	ldrb	r3, [r3, #5]
 8010ffc:	78fa      	ldrb	r2, [r7, #3]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d002      	beq.n	8011008 <USBH_FindInterface+0x4e>
 8011002:	78fb      	ldrb	r3, [r7, #3]
 8011004:	2bff      	cmp	r3, #255	; 0xff
 8011006:	d111      	bne.n	801102c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801100c:	78ba      	ldrb	r2, [r7, #2]
 801100e:	429a      	cmp	r2, r3
 8011010:	d002      	beq.n	8011018 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011012:	78bb      	ldrb	r3, [r7, #2]
 8011014:	2bff      	cmp	r3, #255	; 0xff
 8011016:	d109      	bne.n	801102c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801101c:	787a      	ldrb	r2, [r7, #1]
 801101e:	429a      	cmp	r2, r3
 8011020:	d002      	beq.n	8011028 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011022:	787b      	ldrb	r3, [r7, #1]
 8011024:	2bff      	cmp	r3, #255	; 0xff
 8011026:	d101      	bne.n	801102c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011028:	7dfb      	ldrb	r3, [r7, #23]
 801102a:	e006      	b.n	801103a <USBH_FindInterface+0x80>
    }
    if_ix++;
 801102c:	7dfb      	ldrb	r3, [r7, #23]
 801102e:	3301      	adds	r3, #1
 8011030:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011032:	7dfb      	ldrb	r3, [r7, #23]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d9d6      	bls.n	8010fe6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011038:	23ff      	movs	r3, #255	; 0xff
}
 801103a:	4618      	mov	r0, r3
 801103c:	371c      	adds	r7, #28
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr

08011046 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8011046:	b580      	push	{r7, lr}
 8011048:	b082      	sub	sp, #8
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f004 ffe6 	bl	8016020 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8011054:	2101      	movs	r1, #1
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f005 f8ff 	bl	801625a <USBH_LL_DriverVBUS>

  return USBH_OK;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b088      	sub	sp, #32
 801106c:	af04      	add	r7, sp, #16
 801106e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8011070:	2302      	movs	r3, #2
 8011072:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011074:	2300      	movs	r3, #0
 8011076:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801107e:	b2db      	uxtb	r3, r3
 8011080:	2b01      	cmp	r3, #1
 8011082:	d102      	bne.n	801108a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2203      	movs	r2, #3
 8011088:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b0b      	cmp	r3, #11
 8011092:	f200 81be 	bhi.w	8011412 <USBH_Process+0x3aa>
 8011096:	a201      	add	r2, pc, #4	; (adr r2, 801109c <USBH_Process+0x34>)
 8011098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801109c:	080110cd 	.word	0x080110cd
 80110a0:	080110ff 	.word	0x080110ff
 80110a4:	08011167 	.word	0x08011167
 80110a8:	080113ad 	.word	0x080113ad
 80110ac:	08011413 	.word	0x08011413
 80110b0:	0801120b 	.word	0x0801120b
 80110b4:	08011353 	.word	0x08011353
 80110b8:	08011241 	.word	0x08011241
 80110bc:	08011261 	.word	0x08011261
 80110c0:	08011281 	.word	0x08011281
 80110c4:	080112c5 	.word	0x080112c5
 80110c8:	08011395 	.word	0x08011395
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	f000 819e 	beq.w	8011416 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2201      	movs	r2, #1
 80110de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80110e0:	20c8      	movs	r0, #200	; 0xc8
 80110e2:	f005 f901 	bl	80162e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f004 fff7 	bl	80160da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2200      	movs	r2, #0
 80110f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80110fc:	e18b      	b.n	8011416 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8011104:	2b01      	cmp	r3, #1
 8011106:	d107      	bne.n	8011118 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2202      	movs	r2, #2
 8011114:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011116:	e18d      	b.n	8011434 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011122:	d914      	bls.n	801114e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801112a:	3301      	adds	r3, #1
 801112c:	b2da      	uxtb	r2, r3
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801113a:	2b03      	cmp	r3, #3
 801113c:	d903      	bls.n	8011146 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	220d      	movs	r2, #13
 8011142:	701a      	strb	r2, [r3, #0]
      break;
 8011144:	e176      	b.n	8011434 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2200      	movs	r2, #0
 801114a:	701a      	strb	r2, [r3, #0]
      break;
 801114c:	e172      	b.n	8011434 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011154:	f103 020a 	add.w	r2, r3, #10
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801115e:	200a      	movs	r0, #10
 8011160:	f005 f8c2 	bl	80162e8 <USBH_Delay>
      break;
 8011164:	e166      	b.n	8011434 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011176:	2104      	movs	r1, #4
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801117c:	2064      	movs	r0, #100	; 0x64
 801117e:	f005 f8b3 	bl	80162e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f004 ff82 	bl	801608c <USBH_LL_GetSpeed>
 8011188:	4603      	mov	r3, r0
 801118a:	461a      	mov	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2205      	movs	r2, #5
 8011196:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8011198:	2100      	movs	r1, #0
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f001 fa03 	bl	80125a6 <USBH_AllocPipe>
 80111a0:	4603      	mov	r3, r0
 80111a2:	461a      	mov	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80111a8:	2180      	movs	r1, #128	; 0x80
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f001 f9fb 	bl	80125a6 <USBH_AllocPipe>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	7919      	ldrb	r1, [r3, #4]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80111cc:	b292      	uxth	r2, r2
 80111ce:	9202      	str	r2, [sp, #8]
 80111d0:	2200      	movs	r2, #0
 80111d2:	9201      	str	r2, [sp, #4]
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	4603      	mov	r3, r0
 80111d8:	2280      	movs	r2, #128	; 0x80
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f001 f9b4 	bl	8012548 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	7959      	ldrb	r1, [r3, #5]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80111f4:	b292      	uxth	r2, r2
 80111f6:	9202      	str	r2, [sp, #8]
 80111f8:	2200      	movs	r2, #0
 80111fa:	9201      	str	r2, [sp, #4]
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	4603      	mov	r3, r0
 8011200:	2200      	movs	r2, #0
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f001 f9a0 	bl	8012548 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011208:	e114      	b.n	8011434 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f918 	bl	8011440 <USBH_HandleEnum>
 8011210:	4603      	mov	r3, r0
 8011212:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011214:	7bbb      	ldrb	r3, [r7, #14]
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	f040 80fe 	bne.w	801141a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801122c:	2b01      	cmp	r3, #1
 801122e:	d103      	bne.n	8011238 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2208      	movs	r2, #8
 8011234:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011236:	e0f0      	b.n	801141a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2207      	movs	r2, #7
 801123c:	701a      	strb	r2, [r3, #0]
      break;
 801123e:	e0ec      	b.n	801141a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 80e9 	beq.w	801141e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011252:	2101      	movs	r1, #1
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2208      	movs	r2, #8
 801125c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801125e:	e0de      	b.n	801141e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8011266:	b29b      	uxth	r3, r3
 8011268:	4619      	mov	r1, r3
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fc2c 	bl	8011ac8 <USBH_SetCfg>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	f040 80d5 	bne.w	8011422 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2209      	movs	r2, #9
 801127c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801127e:	e0d0      	b.n	8011422 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8011286:	f003 0320 	and.w	r3, r3, #32
 801128a:	2b00      	cmp	r3, #0
 801128c:	d016      	beq.n	80112bc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801128e:	2101      	movs	r1, #1
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fc3c 	bl	8011b0e <USBH_SetFeature>
 8011296:	4603      	mov	r3, r0
 8011298:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801129a:	7bbb      	ldrb	r3, [r7, #14]
 801129c:	b2db      	uxtb	r3, r3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d103      	bne.n	80112aa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	220a      	movs	r2, #10
 80112a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80112a8:	e0bd      	b.n	8011426 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80112aa:	7bbb      	ldrb	r3, [r7, #14]
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	2b03      	cmp	r3, #3
 80112b0:	f040 80b9 	bne.w	8011426 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	220a      	movs	r2, #10
 80112b8:	701a      	strb	r2, [r3, #0]
      break;
 80112ba:	e0b4      	b.n	8011426 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	220a      	movs	r2, #10
 80112c0:	701a      	strb	r2, [r3, #0]
      break;
 80112c2:	e0b0      	b.n	8011426 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 80ad 	beq.w	801142a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80112d8:	2300      	movs	r3, #0
 80112da:	73fb      	strb	r3, [r7, #15]
 80112dc:	e016      	b.n	801130c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80112de:	7bfa      	ldrb	r2, [r7, #15]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	32de      	adds	r2, #222	; 0xde
 80112e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e8:	791a      	ldrb	r2, [r3, #4]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d108      	bne.n	8011306 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80112f4:	7bfa      	ldrb	r2, [r7, #15]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	32de      	adds	r2, #222	; 0xde
 80112fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8011304:	e005      	b.n	8011312 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011306:	7bfb      	ldrb	r3, [r7, #15]
 8011308:	3301      	adds	r3, #1
 801130a:	73fb      	strb	r3, [r7, #15]
 801130c:	7bfb      	ldrb	r3, [r7, #15]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d0e5      	beq.n	80112de <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011318:	2b00      	cmp	r3, #0
 801131a:	d016      	beq.n	801134a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	4798      	blx	r3
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2206      	movs	r2, #6
 8011332:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801133a:	2103      	movs	r1, #3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011340:	e073      	b.n	801142a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	220d      	movs	r2, #13
 8011346:	701a      	strb	r2, [r3, #0]
      break;
 8011348:	e06f      	b.n	801142a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	220d      	movs	r2, #13
 801134e:	701a      	strb	r2, [r3, #0]
      break;
 8011350:	e06b      	b.n	801142a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011358:	2b00      	cmp	r3, #0
 801135a:	d017      	beq.n	801138c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011362:	691b      	ldr	r3, [r3, #16]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	4798      	blx	r3
 8011368:	4603      	mov	r3, r0
 801136a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d103      	bne.n	801137c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	220b      	movs	r2, #11
 8011378:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801137a:	e058      	b.n	801142e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 801137c:	7bbb      	ldrb	r3, [r7, #14]
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b02      	cmp	r3, #2
 8011382:	d154      	bne.n	801142e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	220d      	movs	r2, #13
 8011388:	701a      	strb	r2, [r3, #0]
      break;
 801138a:	e050      	b.n	801142e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	220d      	movs	r2, #13
 8011390:	701a      	strb	r2, [r3, #0]
      break;
 8011392:	e04c      	b.n	801142e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801139a:	2b00      	cmp	r3, #0
 801139c:	d049      	beq.n	8011432 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	4798      	blx	r3
      }
      break;
 80113aa:	e042      	b.n	8011432 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f7ff fd47 	bl	8010e48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d009      	beq.n	80113d8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d005      	beq.n	80113ee <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80113e8:	2105      	movs	r1, #5
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d107      	bne.n	801140a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff fe1f 	bl	8011046 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011408:	e014      	b.n	8011434 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f004 fe08 	bl	8016020 <USBH_LL_Start>
      break;
 8011410:	e010      	b.n	8011434 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8011412:	bf00      	nop
 8011414:	e00e      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 8011416:	bf00      	nop
 8011418:	e00c      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 801141a:	bf00      	nop
 801141c:	e00a      	b.n	8011434 <USBH_Process+0x3cc>
    break;
 801141e:	bf00      	nop
 8011420:	e008      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 8011422:	bf00      	nop
 8011424:	e006      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 8011426:	bf00      	nop
 8011428:	e004      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 801142a:	bf00      	nop
 801142c:	e002      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 801142e:	bf00      	nop
 8011430:	e000      	b.n	8011434 <USBH_Process+0x3cc>
      break;
 8011432:	bf00      	nop
  }
  return USBH_OK;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop

08011440 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af04      	add	r7, sp, #16
 8011446:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011448:	2301      	movs	r3, #1
 801144a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801144c:	2301      	movs	r3, #1
 801144e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	785b      	ldrb	r3, [r3, #1]
 8011454:	2b07      	cmp	r3, #7
 8011456:	f200 81c1 	bhi.w	80117dc <USBH_HandleEnum+0x39c>
 801145a:	a201      	add	r2, pc, #4	; (adr r2, 8011460 <USBH_HandleEnum+0x20>)
 801145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011460:	08011481 	.word	0x08011481
 8011464:	0801153f 	.word	0x0801153f
 8011468:	080115a9 	.word	0x080115a9
 801146c:	08011637 	.word	0x08011637
 8011470:	080116a1 	.word	0x080116a1
 8011474:	08011711 	.word	0x08011711
 8011478:	08011757 	.word	0x08011757
 801147c:	0801179d 	.word	0x0801179d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011480:	2108      	movs	r1, #8
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 fa50 	bl	8011928 <USBH_Get_DevDesc>
 8011488:	4603      	mov	r3, r0
 801148a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801148c:	7bbb      	ldrb	r3, [r7, #14]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d130      	bne.n	80114f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2201      	movs	r2, #1
 80114a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	7919      	ldrb	r1, [r3, #4]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80114b6:	b292      	uxth	r2, r2
 80114b8:	9202      	str	r2, [sp, #8]
 80114ba:	2200      	movs	r2, #0
 80114bc:	9201      	str	r2, [sp, #4]
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	4603      	mov	r3, r0
 80114c2:	2280      	movs	r2, #128	; 0x80
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f001 f83f 	bl	8012548 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7959      	ldrb	r1, [r3, #5]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80114de:	b292      	uxth	r2, r2
 80114e0:	9202      	str	r2, [sp, #8]
 80114e2:	2200      	movs	r2, #0
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	4603      	mov	r3, r0
 80114ea:	2200      	movs	r2, #0
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f001 f82b 	bl	8012548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80114f2:	e175      	b.n	80117e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80114f4:	7bbb      	ldrb	r3, [r7, #14]
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	f040 8172 	bne.w	80117e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011502:	3301      	adds	r3, #1
 8011504:	b2da      	uxtb	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011512:	2b03      	cmp	r3, #3
 8011514:	d903      	bls.n	801151e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	220d      	movs	r2, #13
 801151a:	701a      	strb	r2, [r3, #0]
      break;
 801151c:	e160      	b.n	80117e0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	795b      	ldrb	r3, [r3, #5]
 8011522:	4619      	mov	r1, r3
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f001 f85f 	bl	80125e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	791b      	ldrb	r3, [r3, #4]
 801152e:	4619      	mov	r1, r3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f001 f859 	bl	80125e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	701a      	strb	r2, [r3, #0]
      break;
 801153c:	e150      	b.n	80117e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801153e:	2112      	movs	r1, #18
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f9f1 	bl	8011928 <USBH_Get_DevDesc>
 8011546:	4603      	mov	r3, r0
 8011548:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801154a:	7bbb      	ldrb	r3, [r7, #14]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d103      	bne.n	8011558 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2202      	movs	r2, #2
 8011554:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011556:	e145      	b.n	80117e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011558:	7bbb      	ldrb	r3, [r7, #14]
 801155a:	2b03      	cmp	r3, #3
 801155c:	f040 8142 	bne.w	80117e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011566:	3301      	adds	r3, #1
 8011568:	b2da      	uxtb	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011576:	2b03      	cmp	r3, #3
 8011578:	d903      	bls.n	8011582 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	220d      	movs	r2, #13
 801157e:	701a      	strb	r2, [r3, #0]
      break;
 8011580:	e130      	b.n	80117e4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	795b      	ldrb	r3, [r3, #5]
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f001 f82d 	bl	80125e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	791b      	ldrb	r3, [r3, #4]
 8011592:	4619      	mov	r1, r3
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f001 f827 	bl	80125e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
      break;
 80115a6:	e11d      	b.n	80117e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80115a8:	2101      	movs	r1, #1
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 fa68 	bl	8011a80 <USBH_SetAddress>
 80115b0:	4603      	mov	r3, r0
 80115b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80115b4:	7bbb      	ldrb	r3, [r7, #14]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d132      	bne.n	8011620 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80115ba:	2002      	movs	r0, #2
 80115bc:	f004 fe94 	bl	80162e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2201      	movs	r2, #1
 80115c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2203      	movs	r2, #3
 80115cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	7919      	ldrb	r1, [r3, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80115e2:	b292      	uxth	r2, r2
 80115e4:	9202      	str	r2, [sp, #8]
 80115e6:	2200      	movs	r2, #0
 80115e8:	9201      	str	r2, [sp, #4]
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	4603      	mov	r3, r0
 80115ee:	2280      	movs	r2, #128	; 0x80
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 ffa9 	bl	8012548 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	7959      	ldrb	r1, [r3, #5]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801160a:	b292      	uxth	r2, r2
 801160c:	9202      	str	r2, [sp, #8]
 801160e:	2200      	movs	r2, #0
 8011610:	9201      	str	r2, [sp, #4]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	4603      	mov	r3, r0
 8011616:	2200      	movs	r2, #0
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 ff95 	bl	8012548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801161e:	e0e3      	b.n	80117e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011620:	7bbb      	ldrb	r3, [r7, #14]
 8011622:	2b03      	cmp	r3, #3
 8011624:	f040 80e0 	bne.w	80117e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	220d      	movs	r2, #13
 801162c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	705a      	strb	r2, [r3, #1]
      break;
 8011634:	e0d8      	b.n	80117e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8011636:	2109      	movs	r1, #9
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 f99d 	bl	8011978 <USBH_Get_CfgDesc>
 801163e:	4603      	mov	r3, r0
 8011640:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011642:	7bbb      	ldrb	r3, [r7, #14]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d103      	bne.n	8011650 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2204      	movs	r2, #4
 801164c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801164e:	e0cd      	b.n	80117ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011650:	7bbb      	ldrb	r3, [r7, #14]
 8011652:	2b03      	cmp	r3, #3
 8011654:	f040 80ca 	bne.w	80117ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801165e:	3301      	adds	r3, #1
 8011660:	b2da      	uxtb	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801166e:	2b03      	cmp	r3, #3
 8011670:	d903      	bls.n	801167a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	220d      	movs	r2, #13
 8011676:	701a      	strb	r2, [r3, #0]
      break;
 8011678:	e0b8      	b.n	80117ec <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	795b      	ldrb	r3, [r3, #5]
 801167e:	4619      	mov	r1, r3
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 ffb1 	bl	80125e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	791b      	ldrb	r3, [r3, #4]
 801168a:	4619      	mov	r1, r3
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f000 ffab 	bl	80125e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	701a      	strb	r2, [r3, #0]
      break;
 801169e:	e0a5      	b.n	80117ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80116a6:	4619      	mov	r1, r3
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 f965 	bl	8011978 <USBH_Get_CfgDesc>
 80116ae:	4603      	mov	r3, r0
 80116b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80116b2:	7bbb      	ldrb	r3, [r7, #14]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d103      	bne.n	80116c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2205      	movs	r2, #5
 80116bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80116be:	e097      	b.n	80117f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80116c0:	7bbb      	ldrb	r3, [r7, #14]
 80116c2:	2b03      	cmp	r3, #3
 80116c4:	f040 8094 	bne.w	80117f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80116ce:	3301      	adds	r3, #1
 80116d0:	b2da      	uxtb	r2, r3
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d903      	bls.n	80116ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	220d      	movs	r2, #13
 80116e6:	701a      	strb	r2, [r3, #0]
      break;
 80116e8:	e082      	b.n	80117f0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	795b      	ldrb	r3, [r3, #5]
 80116ee:	4619      	mov	r1, r3
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f000 ff79 	bl	80125e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	791b      	ldrb	r3, [r3, #4]
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 ff73 	bl	80125e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	701a      	strb	r2, [r3, #0]
      break;
 801170e:	e06f      	b.n	80117f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8011716:	2b00      	cmp	r3, #0
 8011718:	d019      	beq.n	801174e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011726:	23ff      	movs	r3, #255	; 0xff
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 f949 	bl	80119c0 <USBH_Get_StringDesc>
 801172e:	4603      	mov	r3, r0
 8011730:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011732:	7bbb      	ldrb	r3, [r7, #14]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d103      	bne.n	8011740 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2206      	movs	r2, #6
 801173c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801173e:	e059      	b.n	80117f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011740:	7bbb      	ldrb	r3, [r7, #14]
 8011742:	2b03      	cmp	r3, #3
 8011744:	d156      	bne.n	80117f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2206      	movs	r2, #6
 801174a:	705a      	strb	r2, [r3, #1]
      break;
 801174c:	e052      	b.n	80117f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2206      	movs	r2, #6
 8011752:	705a      	strb	r2, [r3, #1]
      break;
 8011754:	e04e      	b.n	80117f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801175c:	2b00      	cmp	r3, #0
 801175e:	d019      	beq.n	8011794 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801176c:	23ff      	movs	r3, #255	; 0xff
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f926 	bl	80119c0 <USBH_Get_StringDesc>
 8011774:	4603      	mov	r3, r0
 8011776:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011778:	7bbb      	ldrb	r3, [r7, #14]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d103      	bne.n	8011786 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2207      	movs	r2, #7
 8011782:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011784:	e038      	b.n	80117f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011786:	7bbb      	ldrb	r3, [r7, #14]
 8011788:	2b03      	cmp	r3, #3
 801178a:	d135      	bne.n	80117f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2207      	movs	r2, #7
 8011790:	705a      	strb	r2, [r3, #1]
      break;
 8011792:	e031      	b.n	80117f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2207      	movs	r2, #7
 8011798:	705a      	strb	r2, [r3, #1]
      break;
 801179a:	e02d      	b.n	80117f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d017      	beq.n	80117d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117b2:	23ff      	movs	r3, #255	; 0xff
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f000 f903 	bl	80119c0 <USBH_Get_StringDesc>
 80117ba:	4603      	mov	r3, r0
 80117bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80117be:	7bbb      	ldrb	r3, [r7, #14]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d102      	bne.n	80117ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80117c4:	2300      	movs	r3, #0
 80117c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80117c8:	e018      	b.n	80117fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80117ca:	7bbb      	ldrb	r3, [r7, #14]
 80117cc:	2b03      	cmp	r3, #3
 80117ce:	d115      	bne.n	80117fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80117d0:	2300      	movs	r3, #0
 80117d2:	73fb      	strb	r3, [r7, #15]
      break;
 80117d4:	e012      	b.n	80117fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80117d6:	2300      	movs	r3, #0
 80117d8:	73fb      	strb	r3, [r7, #15]
      break;
 80117da:	e00f      	b.n	80117fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80117dc:	bf00      	nop
 80117de:	e00e      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117e0:	bf00      	nop
 80117e2:	e00c      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117e4:	bf00      	nop
 80117e6:	e00a      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117e8:	bf00      	nop
 80117ea:	e008      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117ec:	bf00      	nop
 80117ee:	e006      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117f0:	bf00      	nop
 80117f2:	e004      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117f4:	bf00      	nop
 80117f6:	e002      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117f8:	bf00      	nop
 80117fa:	e000      	b.n	80117fe <USBH_HandleEnum+0x3be>
      break;
 80117fc:	bf00      	nop
  }
  return Status;
 80117fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3710      	adds	r7, #16
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801181a:	bf00      	nop
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b082      	sub	sp, #8
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011834:	1c5a      	adds	r2, r3, #1
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f804 	bl	801184a <USBH_HandleSof>
}
 8011842:	bf00      	nop
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b082      	sub	sp, #8
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b0b      	cmp	r3, #11
 801185a:	d10a      	bne.n	8011872 <USBH_HandleSof+0x28>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011862:	2b00      	cmp	r3, #0
 8011864:	d005      	beq.n	8011872 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	4798      	blx	r3
  }
}
 8011872:	bf00      	nop
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801187a:	b480      	push	{r7}
 801187c:	b083      	sub	sp, #12
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2201      	movs	r2, #1
 8011886:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801188a:	bf00      	nop
}
 801188c:	370c      	adds	r7, #12
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011896:	b480      	push	{r7}
 8011898:	b083      	sub	sp, #12
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80118a6:	bf00      	nop
}
 80118a8:	370c      	adds	r7, #12
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr

080118b2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80118b2:	b480      	push	{r7}
 80118b4:	b083      	sub	sp, #12
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2201      	movs	r2, #1
 80118be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2200      	movs	r2, #0
 80118ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2201      	movs	r2, #1
 80118ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f004 fba8 	bl	8016056 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	791b      	ldrb	r3, [r3, #4]
 801190a:	4619      	mov	r1, r3
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 fe6b 	bl	80125e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	795b      	ldrb	r3, [r3, #5]
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fe65 	bl	80125e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801191e:	2300      	movs	r3, #0
}
 8011920:	4618      	mov	r0, r3
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af02      	add	r7, sp, #8
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	460b      	mov	r3, r1
 8011932:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801193a:	78fb      	ldrb	r3, [r7, #3]
 801193c:	b29b      	uxth	r3, r3
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	4613      	mov	r3, r2
 8011942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011946:	2100      	movs	r1, #0
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 f864 	bl	8011a16 <USBH_GetDescriptor>
 801194e:	4603      	mov	r3, r0
 8011950:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8011952:	7bfb      	ldrb	r3, [r7, #15]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d10a      	bne.n	801196e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011964:	78fa      	ldrb	r2, [r7, #3]
 8011966:	b292      	uxth	r2, r2
 8011968:	4619      	mov	r1, r3
 801196a:	f000 f919 	bl	8011ba0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af02      	add	r7, sp, #8
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	331c      	adds	r3, #28
 8011988:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801198a:	887b      	ldrh	r3, [r7, #2]
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011994:	2100      	movs	r1, #0
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f83d 	bl	8011a16 <USBH_GetDescriptor>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d107      	bne.n	80119b6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80119a6:	887b      	ldrh	r3, [r7, #2]
 80119a8:	461a      	mov	r2, r3
 80119aa:	68b9      	ldr	r1, [r7, #8]
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 f987 	bl	8011cc0 <USBH_ParseCfgDesc>
 80119b2:	4603      	mov	r3, r0
 80119b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80119b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	607a      	str	r2, [r7, #4]
 80119ca:	461a      	mov	r2, r3
 80119cc:	460b      	mov	r3, r1
 80119ce:	72fb      	strb	r3, [r7, #11]
 80119d0:	4613      	mov	r3, r2
 80119d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80119d4:	7afb      	ldrb	r3, [r7, #11]
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80119dc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80119e4:	893b      	ldrh	r3, [r7, #8]
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	460b      	mov	r3, r1
 80119ea:	2100      	movs	r1, #0
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 f812 	bl	8011a16 <USBH_GetDescriptor>
 80119f2:	4603      	mov	r3, r0
 80119f4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d107      	bne.n	8011a0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011a02:	893a      	ldrh	r2, [r7, #8]
 8011a04:	6879      	ldr	r1, [r7, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 fafe 	bl	8012008 <USBH_ParseStringDesc>
  }

  return status;
 8011a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b084      	sub	sp, #16
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	607b      	str	r3, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	72fb      	strb	r3, [r7, #11]
 8011a24:	4613      	mov	r3, r2
 8011a26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	789b      	ldrb	r3, [r3, #2]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d11c      	bne.n	8011a6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011a30:	7afb      	ldrb	r3, [r7, #11]
 8011a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2206      	movs	r2, #6
 8011a40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	893a      	ldrh	r2, [r7, #8]
 8011a46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011a48:	893b      	ldrh	r3, [r7, #8]
 8011a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a52:	d104      	bne.n	8011a5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f240 4209 	movw	r2, #1033	; 0x409
 8011a5a:	829a      	strh	r2, [r3, #20]
 8011a5c:	e002      	b.n	8011a64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2200      	movs	r2, #0
 8011a62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	8b3a      	ldrh	r2, [r7, #24]
 8011a68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011a6a:	8b3b      	ldrh	r3, [r7, #24]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	6879      	ldr	r1, [r7, #4]
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 fb17 	bl	80120a4 <USBH_CtlReq>
 8011a76:	4603      	mov	r3, r0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	789b      	ldrb	r3, [r3, #2]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d10f      	bne.n	8011ab4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2205      	movs	r2, #5
 8011a9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011aa0:	78fb      	ldrb	r3, [r7, #3]
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 faf3 	bl	80120a4 <USBH_CtlReq>
 8011abe:	4603      	mov	r3, r0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	789b      	ldrb	r3, [r3, #2]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d10e      	bne.n	8011afa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2209      	movs	r2, #9
 8011ae6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	887a      	ldrh	r2, [r7, #2]
 8011aec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011afa:	2200      	movs	r2, #0
 8011afc:	2100      	movs	r1, #0
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fad0 	bl	80120a4 <USBH_CtlReq>
 8011b04:	4603      	mov	r3, r0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	789b      	ldrb	r3, [r3, #2]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d10f      	bne.n	8011b42 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2203      	movs	r2, #3
 8011b2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011b2e:	78fb      	ldrb	r3, [r7, #3]
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011b42:	2200      	movs	r2, #0
 8011b44:	2100      	movs	r1, #0
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 faac 	bl	80120a4 <USBH_CtlReq>
 8011b4c:	4603      	mov	r3, r0
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3708      	adds	r7, #8
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}

08011b56 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b082      	sub	sp, #8
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
 8011b5e:	460b      	mov	r3, r1
 8011b60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	789b      	ldrb	r3, [r3, #2]
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d10f      	bne.n	8011b8a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2201      	movs	r2, #1
 8011b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011b7c:	78fb      	ldrb	r3, [r7, #3]
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fa88 	bl	80120a4 <USBH_CtlReq>
 8011b94:	4603      	mov	r3, r0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
	...

08011ba0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	4613      	mov	r3, r2
 8011bac:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	781a      	ldrb	r2, [r3, #0]
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	785a      	ldrb	r2, [r3, #1]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	3302      	adds	r3, #2
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	3303      	adds	r3, #3
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	021b      	lsls	r3, r3, #8
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	791a      	ldrb	r2, [r3, #4]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	795a      	ldrb	r2, [r3, #5]
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	799a      	ldrb	r2, [r3, #6]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	79da      	ldrb	r2, [r3, #7]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	79db      	ldrb	r3, [r3, #7]
 8011bfe:	2b20      	cmp	r3, #32
 8011c00:	dc0e      	bgt.n	8011c20 <USBH_ParseDevDesc+0x80>
 8011c02:	2b08      	cmp	r3, #8
 8011c04:	db13      	blt.n	8011c2e <USBH_ParseDevDesc+0x8e>
 8011c06:	3b08      	subs	r3, #8
 8011c08:	2201      	movs	r2, #1
 8011c0a:	409a      	lsls	r2, r3
 8011c0c:	4b2b      	ldr	r3, [pc, #172]	; (8011cbc <USBH_ParseDevDesc+0x11c>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	bf14      	ite	ne
 8011c14:	2301      	movne	r3, #1
 8011c16:	2300      	moveq	r3, #0
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d102      	bne.n	8011c24 <USBH_ParseDevDesc+0x84>
 8011c1e:	e006      	b.n	8011c2e <USBH_ParseDevDesc+0x8e>
 8011c20:	2b40      	cmp	r3, #64	; 0x40
 8011c22:	d104      	bne.n	8011c2e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	79da      	ldrb	r2, [r3, #7]
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	71da      	strb	r2, [r3, #7]
      break;
 8011c2c:	e003      	b.n	8011c36 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2240      	movs	r2, #64	; 0x40
 8011c32:	71da      	strb	r2, [r3, #7]
      break;
 8011c34:	bf00      	nop
  }

  if (length > 8U)
 8011c36:	88fb      	ldrh	r3, [r7, #6]
 8011c38:	2b08      	cmp	r3, #8
 8011c3a:	d939      	bls.n	8011cb0 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	3308      	adds	r3, #8
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	3309      	adds	r3, #9
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	021b      	lsls	r3, r3, #8
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4313      	orrs	r3, r2
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	330a      	adds	r3, #10
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	330b      	adds	r3, #11
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	021b      	lsls	r3, r3, #8
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	330c      	adds	r3, #12
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	330d      	adds	r3, #13
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	021b      	lsls	r3, r3, #8
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	7b9a      	ldrb	r2, [r3, #14]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	7bda      	ldrb	r2, [r3, #15]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	7c1a      	ldrb	r2, [r3, #16]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	7c5a      	ldrb	r2, [r3, #17]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	745a      	strb	r2, [r3, #17]
  }
}
 8011cb0:	bf00      	nop
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	01000101 	.word	0x01000101

08011cc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08c      	sub	sp, #48	; 0x30
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011cd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	781a      	ldrb	r2, [r3, #0]
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	785a      	ldrb	r2, [r3, #1]
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	3302      	adds	r3, #2
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	3303      	adds	r3, #3
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	021b      	lsls	r3, r3, #8
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4313      	orrs	r3, r2
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d1c:	bf28      	it	cs
 8011d1e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	791a      	ldrb	r2, [r3, #4]
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	795a      	ldrb	r2, [r3, #5]
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	799a      	ldrb	r2, [r3, #6]
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	79da      	ldrb	r2, [r3, #7]
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	7a1a      	ldrb	r2, [r3, #8]
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8011d50:	6a3b      	ldr	r3, [r7, #32]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	2b09      	cmp	r3, #9
 8011d56:	d002      	beq.n	8011d5e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	2209      	movs	r2, #9
 8011d5c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011d5e:	88fb      	ldrh	r3, [r7, #6]
 8011d60:	2b09      	cmp	r3, #9
 8011d62:	f240 8099 	bls.w	8011e98 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8011d66:	2309      	movs	r3, #9
 8011d68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011d6e:	e07d      	b.n	8011e6c <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011d70:	f107 0316 	add.w	r3, r7, #22
 8011d74:	4619      	mov	r1, r3
 8011d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d78:	f000 f979 	bl	801206e <USBH_GetNextDesc>
 8011d7c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	785b      	ldrb	r3, [r3, #1]
 8011d82:	2b04      	cmp	r3, #4
 8011d84:	d172      	bne.n	8011e6c <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	2b09      	cmp	r3, #9
 8011d8c:	d002      	beq.n	8011d94 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d90:	2209      	movs	r2, #9
 8011d92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d98:	221a      	movs	r2, #26
 8011d9a:	fb02 f303 	mul.w	r3, r2, r3
 8011d9e:	3308      	adds	r3, #8
 8011da0:	6a3a      	ldr	r2, [r7, #32]
 8011da2:	4413      	add	r3, r2
 8011da4:	3302      	adds	r3, #2
 8011da6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011daa:	69f8      	ldr	r0, [r7, #28]
 8011dac:	f000 f87a 	bl	8011ea4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011db0:	2300      	movs	r3, #0
 8011db2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011db6:	2300      	movs	r3, #0
 8011db8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011dba:	e03f      	b.n	8011e3c <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011dbc:	f107 0316 	add.w	r3, r7, #22
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dc4:	f000 f953 	bl	801206e <USBH_GetNextDesc>
 8011dc8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	785b      	ldrb	r3, [r3, #1]
 8011dce:	2b05      	cmp	r3, #5
 8011dd0:	d134      	bne.n	8011e3c <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	795b      	ldrb	r3, [r3, #5]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d10f      	bne.n	8011dfa <USBH_ParseCfgDesc+0x13a>
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	799b      	ldrb	r3, [r3, #6]
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d10b      	bne.n	8011dfa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	79db      	ldrb	r3, [r3, #7]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10b      	bne.n	8011e02 <USBH_ParseCfgDesc+0x142>
 8011dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	2b09      	cmp	r3, #9
 8011df0:	d007      	beq.n	8011e02 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	2209      	movs	r2, #9
 8011df6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011df8:	e003      	b.n	8011e02 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfc:	2207      	movs	r2, #7
 8011dfe:	701a      	strb	r2, [r3, #0]
 8011e00:	e000      	b.n	8011e04 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011e02:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011e0c:	3201      	adds	r2, #1
 8011e0e:	00d2      	lsls	r2, r2, #3
 8011e10:	211a      	movs	r1, #26
 8011e12:	fb01 f303 	mul.w	r3, r1, r3
 8011e16:	4413      	add	r3, r2
 8011e18:	3308      	adds	r3, #8
 8011e1a:	6a3a      	ldr	r2, [r7, #32]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	3304      	adds	r3, #4
 8011e20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e24:	69b9      	ldr	r1, [r7, #24]
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f000 f86c 	bl	8011f04 <USBH_ParseEPDesc>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8011e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e36:	3301      	adds	r3, #1
 8011e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	791b      	ldrb	r3, [r3, #4]
 8011e40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d204      	bcs.n	8011e52 <USBH_ParseCfgDesc+0x192>
 8011e48:	6a3b      	ldr	r3, [r7, #32]
 8011e4a:	885a      	ldrh	r2, [r3, #2]
 8011e4c:	8afb      	ldrh	r3, [r7, #22]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d8b4      	bhi.n	8011dbc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	791b      	ldrb	r3, [r3, #4]
 8011e56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d201      	bcs.n	8011e62 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8011e5e:	2303      	movs	r3, #3
 8011e60:	e01c      	b.n	8011e9c <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8011e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e66:	3301      	adds	r3, #1
 8011e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d805      	bhi.n	8011e80 <USBH_ParseCfgDesc+0x1c0>
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	885a      	ldrh	r2, [r3, #2]
 8011e78:	8afb      	ldrh	r3, [r7, #22]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	f63f af78 	bhi.w	8011d70 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011e80:	6a3b      	ldr	r3, [r7, #32]
 8011e82:	791b      	ldrb	r3, [r3, #4]
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	bf28      	it	cs
 8011e88:	2302      	movcs	r3, #2
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d201      	bcs.n	8011e98 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8011e94:	2303      	movs	r3, #3
 8011e96:	e001      	b.n	8011e9c <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8011e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3730      	adds	r7, #48	; 0x30
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	781a      	ldrb	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	785a      	ldrb	r2, [r3, #1]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	789a      	ldrb	r2, [r3, #2]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	78da      	ldrb	r2, [r3, #3]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	791a      	ldrb	r2, [r3, #4]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	795a      	ldrb	r2, [r3, #5]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	799a      	ldrb	r2, [r3, #6]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	79da      	ldrb	r2, [r3, #7]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	7a1a      	ldrb	r2, [r3, #8]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	721a      	strb	r2, [r3, #8]
}
 8011ef6:	bf00      	nop
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
	...

08011f04 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b087      	sub	sp, #28
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	781a      	ldrb	r2, [r3, #0]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	785a      	ldrb	r2, [r3, #1]
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	789a      	ldrb	r2, [r3, #2]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	78da      	ldrb	r2, [r3, #3]
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	3304      	adds	r3, #4
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	3305      	adds	r3, #5
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	021b      	lsls	r3, r3, #8
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	799a      	ldrb	r2, [r3, #6]
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	889b      	ldrh	r3, [r3, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8011f60:	2303      	movs	r3, #3
 8011f62:	75fb      	strb	r3, [r7, #23]
 8011f64:	e00d      	b.n	8011f82 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	889a      	ldrh	r2, [r3, #4]
 8011f6a:	4b26      	ldr	r3, [pc, #152]	; (8012004 <USBH_ParseEPDesc+0x100>)
 8011f6c:	4013      	ands	r3, r2
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	889b      	ldrh	r3, [r3, #4]
 8011f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d116      	bne.n	8011fba <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	78db      	ldrb	r3, [r3, #3]
 8011f90:	f003 0303 	and.w	r3, r3, #3
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d005      	beq.n	8011fa4 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	78db      	ldrb	r3, [r3, #3]
 8011f9c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011fa0:	2b03      	cmp	r3, #3
 8011fa2:	d127      	bne.n	8011ff4 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	799b      	ldrb	r3, [r3, #6]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d003      	beq.n	8011fb4 <USBH_ParseEPDesc+0xb0>
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	799b      	ldrb	r3, [r3, #6]
 8011fb0:	2b10      	cmp	r3, #16
 8011fb2:	d91f      	bls.n	8011ff4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011fb4:	2303      	movs	r3, #3
 8011fb6:	75fb      	strb	r3, [r7, #23]
 8011fb8:	e01c      	b.n	8011ff4 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	78db      	ldrb	r3, [r3, #3]
 8011fbe:	f003 0303 	and.w	r3, r3, #3
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d10a      	bne.n	8011fdc <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	799b      	ldrb	r3, [r3, #6]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d003      	beq.n	8011fd6 <USBH_ParseEPDesc+0xd2>
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	799b      	ldrb	r3, [r3, #6]
 8011fd2:	2b10      	cmp	r3, #16
 8011fd4:	d90e      	bls.n	8011ff4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	75fb      	strb	r3, [r7, #23]
 8011fda:	e00b      	b.n	8011ff4 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	78db      	ldrb	r3, [r3, #3]
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	2b03      	cmp	r3, #3
 8011fe6:	d105      	bne.n	8011ff4 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	799b      	ldrb	r3, [r3, #6]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8011ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	371c      	adds	r7, #28
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	fffff800 	.word	0xfffff800

08012008 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012008:	b480      	push	{r7}
 801200a:	b087      	sub	sp, #28
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	4613      	mov	r3, r2
 8012014:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	3301      	adds	r3, #1
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b03      	cmp	r3, #3
 801201e:	d120      	bne.n	8012062 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	1e9a      	subs	r2, r3, #2
 8012026:	88fb      	ldrh	r3, [r7, #6]
 8012028:	4293      	cmp	r3, r2
 801202a:	bf28      	it	cs
 801202c:	4613      	movcs	r3, r2
 801202e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	3302      	adds	r3, #2
 8012034:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8012036:	2300      	movs	r3, #0
 8012038:	82fb      	strh	r3, [r7, #22]
 801203a:	e00b      	b.n	8012054 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801203c:	8afb      	ldrh	r3, [r7, #22]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	4413      	add	r3, r2
 8012042:	781a      	ldrb	r2, [r3, #0]
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	3301      	adds	r3, #1
 801204c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801204e:	8afb      	ldrh	r3, [r7, #22]
 8012050:	3302      	adds	r3, #2
 8012052:	82fb      	strh	r3, [r7, #22]
 8012054:	8afa      	ldrh	r2, [r7, #22]
 8012056:	8abb      	ldrh	r3, [r7, #20]
 8012058:	429a      	cmp	r2, r3
 801205a:	d3ef      	bcc.n	801203c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2200      	movs	r2, #0
 8012060:	701a      	strb	r2, [r3, #0]
  }
}
 8012062:	bf00      	nop
 8012064:	371c      	adds	r7, #28
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr

0801206e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801206e:	b480      	push	{r7}
 8012070:	b085      	sub	sp, #20
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	881a      	ldrh	r2, [r3, #0]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	b29b      	uxth	r3, r3
 8012082:	4413      	add	r3, r2
 8012084:	b29a      	uxth	r2, r3
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4413      	add	r3, r2
 8012094:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012096:	68fb      	ldr	r3, [r7, #12]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	4613      	mov	r3, r2
 80120b0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80120b2:	2301      	movs	r3, #1
 80120b4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	789b      	ldrb	r3, [r3, #2]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d002      	beq.n	80120c4 <USBH_CtlReq+0x20>
 80120be:	2b02      	cmp	r3, #2
 80120c0:	d00f      	beq.n	80120e2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80120c2:	e027      	b.n	8012114 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	88fa      	ldrh	r2, [r7, #6]
 80120ce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2201      	movs	r2, #1
 80120d4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2202      	movs	r2, #2
 80120da:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80120dc:	2301      	movs	r3, #1
 80120de:	75fb      	strb	r3, [r7, #23]
      break;
 80120e0:	e018      	b.n	8012114 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80120e2:	68f8      	ldr	r0, [r7, #12]
 80120e4:	f000 f81c 	bl	8012120 <USBH_HandleControl>
 80120e8:	4603      	mov	r3, r0
 80120ea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80120ec:	7dfb      	ldrb	r3, [r7, #23]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <USBH_CtlReq+0x54>
 80120f2:	7dfb      	ldrb	r3, [r7, #23]
 80120f4:	2b03      	cmp	r3, #3
 80120f6:	d106      	bne.n	8012106 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2201      	movs	r2, #1
 80120fc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	761a      	strb	r2, [r3, #24]
      break;
 8012104:	e005      	b.n	8012112 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8012106:	7dfb      	ldrb	r3, [r7, #23]
 8012108:	2b02      	cmp	r3, #2
 801210a:	d102      	bne.n	8012112 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2201      	movs	r2, #1
 8012110:	709a      	strb	r2, [r3, #2]
      break;
 8012112:	bf00      	nop
  }
  return status;
 8012114:	7dfb      	ldrb	r3, [r7, #23]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af02      	add	r7, sp, #8
 8012126:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012128:	2301      	movs	r3, #1
 801212a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801212c:	2300      	movs	r3, #0
 801212e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	7e1b      	ldrb	r3, [r3, #24]
 8012134:	3b01      	subs	r3, #1
 8012136:	2b0a      	cmp	r3, #10
 8012138:	f200 8156 	bhi.w	80123e8 <USBH_HandleControl+0x2c8>
 801213c:	a201      	add	r2, pc, #4	; (adr r2, 8012144 <USBH_HandleControl+0x24>)
 801213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012142:	bf00      	nop
 8012144:	08012171 	.word	0x08012171
 8012148:	0801218b 	.word	0x0801218b
 801214c:	080121f5 	.word	0x080121f5
 8012150:	0801221b 	.word	0x0801221b
 8012154:	08012253 	.word	0x08012253
 8012158:	0801227d 	.word	0x0801227d
 801215c:	080122cf 	.word	0x080122cf
 8012160:	080122f1 	.word	0x080122f1
 8012164:	0801232d 	.word	0x0801232d
 8012168:	08012353 	.word	0x08012353
 801216c:	08012391 	.word	0x08012391
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f103 0110 	add.w	r1, r3, #16
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	795b      	ldrb	r3, [r3, #5]
 801217a:	461a      	mov	r2, r3
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 f943 	bl	8012408 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2202      	movs	r2, #2
 8012186:	761a      	strb	r2, [r3, #24]
      break;
 8012188:	e139      	b.n	80123fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	795b      	ldrb	r3, [r3, #5]
 801218e:	4619      	mov	r1, r3
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f004 f84f 	bl	8016234 <USBH_LL_GetURBState>
 8012196:	4603      	mov	r3, r0
 8012198:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801219a:	7bbb      	ldrb	r3, [r7, #14]
 801219c:	2b01      	cmp	r3, #1
 801219e:	d11e      	bne.n	80121de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	7c1b      	ldrb	r3, [r3, #16]
 80121a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80121a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8adb      	ldrh	r3, [r3, #22]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00a      	beq.n	80121c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80121b2:	7b7b      	ldrb	r3, [r7, #13]
 80121b4:	2b80      	cmp	r3, #128	; 0x80
 80121b6:	d103      	bne.n	80121c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2203      	movs	r2, #3
 80121bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80121be:	e115      	b.n	80123ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2205      	movs	r2, #5
 80121c4:	761a      	strb	r2, [r3, #24]
      break;
 80121c6:	e111      	b.n	80123ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80121c8:	7b7b      	ldrb	r3, [r7, #13]
 80121ca:	2b80      	cmp	r3, #128	; 0x80
 80121cc:	d103      	bne.n	80121d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2209      	movs	r2, #9
 80121d2:	761a      	strb	r2, [r3, #24]
      break;
 80121d4:	e10a      	b.n	80123ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2207      	movs	r2, #7
 80121da:	761a      	strb	r2, [r3, #24]
      break;
 80121dc:	e106      	b.n	80123ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80121de:	7bbb      	ldrb	r3, [r7, #14]
 80121e0:	2b04      	cmp	r3, #4
 80121e2:	d003      	beq.n	80121ec <USBH_HandleControl+0xcc>
 80121e4:	7bbb      	ldrb	r3, [r7, #14]
 80121e6:	2b02      	cmp	r3, #2
 80121e8:	f040 8100 	bne.w	80123ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	220b      	movs	r2, #11
 80121f0:	761a      	strb	r2, [r3, #24]
      break;
 80121f2:	e0fb      	b.n	80123ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6899      	ldr	r1, [r3, #8]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	899a      	ldrh	r2, [r3, #12]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	791b      	ldrb	r3, [r3, #4]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f93a 	bl	8012486 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2204      	movs	r2, #4
 8012216:	761a      	strb	r2, [r3, #24]
      break;
 8012218:	e0f1      	b.n	80123fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	791b      	ldrb	r3, [r3, #4]
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f004 f807 	bl	8016234 <USBH_LL_GetURBState>
 8012226:	4603      	mov	r3, r0
 8012228:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801222a:	7bbb      	ldrb	r3, [r7, #14]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d102      	bne.n	8012236 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2209      	movs	r2, #9
 8012234:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8012236:	7bbb      	ldrb	r3, [r7, #14]
 8012238:	2b05      	cmp	r3, #5
 801223a:	d102      	bne.n	8012242 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801223c:	2303      	movs	r3, #3
 801223e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012240:	e0d6      	b.n	80123f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8012242:	7bbb      	ldrb	r3, [r7, #14]
 8012244:	2b04      	cmp	r3, #4
 8012246:	f040 80d3 	bne.w	80123f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	220b      	movs	r2, #11
 801224e:	761a      	strb	r2, [r3, #24]
      break;
 8012250:	e0ce      	b.n	80123f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6899      	ldr	r1, [r3, #8]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	899a      	ldrh	r2, [r3, #12]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	795b      	ldrb	r3, [r3, #5]
 801225e:	2001      	movs	r0, #1
 8012260:	9000      	str	r0, [sp, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 f8ea 	bl	801243c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801226e:	b29a      	uxth	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2206      	movs	r2, #6
 8012278:	761a      	strb	r2, [r3, #24]
      break;
 801227a:	e0c0      	b.n	80123fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	795b      	ldrb	r3, [r3, #5]
 8012280:	4619      	mov	r1, r3
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f003 ffd6 	bl	8016234 <USBH_LL_GetURBState>
 8012288:	4603      	mov	r3, r0
 801228a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801228c:	7bbb      	ldrb	r3, [r7, #14]
 801228e:	2b01      	cmp	r3, #1
 8012290:	d103      	bne.n	801229a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2207      	movs	r2, #7
 8012296:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012298:	e0ac      	b.n	80123f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801229a:	7bbb      	ldrb	r3, [r7, #14]
 801229c:	2b05      	cmp	r3, #5
 801229e:	d105      	bne.n	80122ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	220c      	movs	r2, #12
 80122a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80122a6:	2303      	movs	r3, #3
 80122a8:	73fb      	strb	r3, [r7, #15]
      break;
 80122aa:	e0a3      	b.n	80123f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80122ac:	7bbb      	ldrb	r3, [r7, #14]
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d103      	bne.n	80122ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2205      	movs	r2, #5
 80122b6:	761a      	strb	r2, [r3, #24]
      break;
 80122b8:	e09c      	b.n	80123f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80122ba:	7bbb      	ldrb	r3, [r7, #14]
 80122bc:	2b04      	cmp	r3, #4
 80122be:	f040 8099 	bne.w	80123f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	220b      	movs	r2, #11
 80122c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80122c8:	2302      	movs	r3, #2
 80122ca:	73fb      	strb	r3, [r7, #15]
      break;
 80122cc:	e092      	b.n	80123f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	791b      	ldrb	r3, [r3, #4]
 80122d2:	2200      	movs	r2, #0
 80122d4:	2100      	movs	r1, #0
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f8d5 	bl	8012486 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2208      	movs	r2, #8
 80122ec:	761a      	strb	r2, [r3, #24]

      break;
 80122ee:	e086      	b.n	80123fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	791b      	ldrb	r3, [r3, #4]
 80122f4:	4619      	mov	r1, r3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f003 ff9c 	bl	8016234 <USBH_LL_GetURBState>
 80122fc:	4603      	mov	r3, r0
 80122fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012300:	7bbb      	ldrb	r3, [r7, #14]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d105      	bne.n	8012312 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	220d      	movs	r2, #13
 801230a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801230c:	2300      	movs	r3, #0
 801230e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012310:	e072      	b.n	80123f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8012312:	7bbb      	ldrb	r3, [r7, #14]
 8012314:	2b04      	cmp	r3, #4
 8012316:	d103      	bne.n	8012320 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	220b      	movs	r2, #11
 801231c:	761a      	strb	r2, [r3, #24]
      break;
 801231e:	e06b      	b.n	80123f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8012320:	7bbb      	ldrb	r3, [r7, #14]
 8012322:	2b05      	cmp	r3, #5
 8012324:	d168      	bne.n	80123f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8012326:	2303      	movs	r3, #3
 8012328:	73fb      	strb	r3, [r7, #15]
      break;
 801232a:	e065      	b.n	80123f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	795b      	ldrb	r3, [r3, #5]
 8012330:	2201      	movs	r2, #1
 8012332:	9200      	str	r2, [sp, #0]
 8012334:	2200      	movs	r2, #0
 8012336:	2100      	movs	r1, #0
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 f87f 	bl	801243c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012344:	b29a      	uxth	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	220a      	movs	r2, #10
 801234e:	761a      	strb	r2, [r3, #24]
      break;
 8012350:	e055      	b.n	80123fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	795b      	ldrb	r3, [r3, #5]
 8012356:	4619      	mov	r1, r3
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f003 ff6b 	bl	8016234 <USBH_LL_GetURBState>
 801235e:	4603      	mov	r3, r0
 8012360:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8012362:	7bbb      	ldrb	r3, [r7, #14]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d105      	bne.n	8012374 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	220d      	movs	r2, #13
 8012370:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012372:	e043      	b.n	80123fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012374:	7bbb      	ldrb	r3, [r7, #14]
 8012376:	2b02      	cmp	r3, #2
 8012378:	d103      	bne.n	8012382 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2209      	movs	r2, #9
 801237e:	761a      	strb	r2, [r3, #24]
      break;
 8012380:	e03c      	b.n	80123fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8012382:	7bbb      	ldrb	r3, [r7, #14]
 8012384:	2b04      	cmp	r3, #4
 8012386:	d139      	bne.n	80123fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	220b      	movs	r2, #11
 801238c:	761a      	strb	r2, [r3, #24]
      break;
 801238e:	e035      	b.n	80123fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	7e5b      	ldrb	r3, [r3, #25]
 8012394:	3301      	adds	r3, #1
 8012396:	b2da      	uxtb	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	765a      	strb	r2, [r3, #25]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	7e5b      	ldrb	r3, [r3, #25]
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d806      	bhi.n	80123b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2201      	movs	r2, #1
 80123ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80123b0:	e025      	b.n	80123fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80123b8:	2106      	movs	r1, #6
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	795b      	ldrb	r3, [r3, #5]
 80123c8:	4619      	mov	r1, r3
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f90c 	bl	80125e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	791b      	ldrb	r3, [r3, #4]
 80123d4:	4619      	mov	r1, r3
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f906 	bl	80125e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80123e2:	2302      	movs	r3, #2
 80123e4:	73fb      	strb	r3, [r7, #15]
      break;
 80123e6:	e00a      	b.n	80123fe <USBH_HandleControl+0x2de>

    default:
      break;
 80123e8:	bf00      	nop
 80123ea:	e008      	b.n	80123fe <USBH_HandleControl+0x2de>
      break;
 80123ec:	bf00      	nop
 80123ee:	e006      	b.n	80123fe <USBH_HandleControl+0x2de>
      break;
 80123f0:	bf00      	nop
 80123f2:	e004      	b.n	80123fe <USBH_HandleControl+0x2de>
      break;
 80123f4:	bf00      	nop
 80123f6:	e002      	b.n	80123fe <USBH_HandleControl+0x2de>
      break;
 80123f8:	bf00      	nop
 80123fa:	e000      	b.n	80123fe <USBH_HandleControl+0x2de>
      break;
 80123fc:	bf00      	nop
  }

  return status;
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b088      	sub	sp, #32
 801240c:	af04      	add	r7, sp, #16
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	4613      	mov	r3, r2
 8012414:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012416:	79f9      	ldrb	r1, [r7, #7]
 8012418:	2300      	movs	r3, #0
 801241a:	9303      	str	r3, [sp, #12]
 801241c:	2308      	movs	r3, #8
 801241e:	9302      	str	r3, [sp, #8]
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	9301      	str	r3, [sp, #4]
 8012424:	2300      	movs	r3, #0
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	2300      	movs	r3, #0
 801242a:	2200      	movs	r2, #0
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f003 fed0 	bl	80161d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b088      	sub	sp, #32
 8012440:	af04      	add	r7, sp, #16
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	4611      	mov	r1, r2
 8012448:	461a      	mov	r2, r3
 801244a:	460b      	mov	r3, r1
 801244c:	80fb      	strh	r3, [r7, #6]
 801244e:	4613      	mov	r3, r2
 8012450:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801245c:	2300      	movs	r3, #0
 801245e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012460:	7979      	ldrb	r1, [r7, #5]
 8012462:	7e3b      	ldrb	r3, [r7, #24]
 8012464:	9303      	str	r3, [sp, #12]
 8012466:	88fb      	ldrh	r3, [r7, #6]
 8012468:	9302      	str	r3, [sp, #8]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	9301      	str	r3, [sp, #4]
 801246e:	2301      	movs	r3, #1
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	2300      	movs	r3, #0
 8012474:	2200      	movs	r2, #0
 8012476:	68f8      	ldr	r0, [r7, #12]
 8012478:	f003 feab 	bl	80161d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801247c:	2300      	movs	r3, #0
}
 801247e:	4618      	mov	r0, r3
 8012480:	3710      	adds	r7, #16
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}

08012486 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012486:	b580      	push	{r7, lr}
 8012488:	b088      	sub	sp, #32
 801248a:	af04      	add	r7, sp, #16
 801248c:	60f8      	str	r0, [r7, #12]
 801248e:	60b9      	str	r1, [r7, #8]
 8012490:	4611      	mov	r1, r2
 8012492:	461a      	mov	r2, r3
 8012494:	460b      	mov	r3, r1
 8012496:	80fb      	strh	r3, [r7, #6]
 8012498:	4613      	mov	r3, r2
 801249a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801249c:	7979      	ldrb	r1, [r7, #5]
 801249e:	2300      	movs	r3, #0
 80124a0:	9303      	str	r3, [sp, #12]
 80124a2:	88fb      	ldrh	r3, [r7, #6]
 80124a4:	9302      	str	r3, [sp, #8]
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	9301      	str	r3, [sp, #4]
 80124aa:	2301      	movs	r3, #1
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	2300      	movs	r3, #0
 80124b0:	2201      	movs	r2, #1
 80124b2:	68f8      	ldr	r0, [r7, #12]
 80124b4:	f003 fe8d 	bl	80161d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80124b8:	2300      	movs	r3, #0

}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b088      	sub	sp, #32
 80124c6:	af04      	add	r7, sp, #16
 80124c8:	60f8      	str	r0, [r7, #12]
 80124ca:	60b9      	str	r1, [r7, #8]
 80124cc:	4611      	mov	r1, r2
 80124ce:	461a      	mov	r2, r3
 80124d0:	460b      	mov	r3, r1
 80124d2:	80fb      	strh	r3, [r7, #6]
 80124d4:	4613      	mov	r3, r2
 80124d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d001      	beq.n	80124e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80124e2:	2300      	movs	r3, #0
 80124e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80124e6:	7979      	ldrb	r1, [r7, #5]
 80124e8:	7e3b      	ldrb	r3, [r7, #24]
 80124ea:	9303      	str	r3, [sp, #12]
 80124ec:	88fb      	ldrh	r3, [r7, #6]
 80124ee:	9302      	str	r3, [sp, #8]
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	2301      	movs	r3, #1
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	2302      	movs	r3, #2
 80124fa:	2200      	movs	r2, #0
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f003 fe68 	bl	80161d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b088      	sub	sp, #32
 8012510:	af04      	add	r7, sp, #16
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	4611      	mov	r1, r2
 8012518:	461a      	mov	r2, r3
 801251a:	460b      	mov	r3, r1
 801251c:	80fb      	strh	r3, [r7, #6]
 801251e:	4613      	mov	r3, r2
 8012520:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012522:	7979      	ldrb	r1, [r7, #5]
 8012524:	2300      	movs	r3, #0
 8012526:	9303      	str	r3, [sp, #12]
 8012528:	88fb      	ldrh	r3, [r7, #6]
 801252a:	9302      	str	r3, [sp, #8]
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	9301      	str	r3, [sp, #4]
 8012530:	2301      	movs	r3, #1
 8012532:	9300      	str	r3, [sp, #0]
 8012534:	2302      	movs	r3, #2
 8012536:	2201      	movs	r2, #1
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f003 fe4a 	bl	80161d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b086      	sub	sp, #24
 801254c:	af04      	add	r7, sp, #16
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	4608      	mov	r0, r1
 8012552:	4611      	mov	r1, r2
 8012554:	461a      	mov	r2, r3
 8012556:	4603      	mov	r3, r0
 8012558:	70fb      	strb	r3, [r7, #3]
 801255a:	460b      	mov	r3, r1
 801255c:	70bb      	strb	r3, [r7, #2]
 801255e:	4613      	mov	r3, r2
 8012560:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8012562:	7878      	ldrb	r0, [r7, #1]
 8012564:	78ba      	ldrb	r2, [r7, #2]
 8012566:	78f9      	ldrb	r1, [r7, #3]
 8012568:	8b3b      	ldrh	r3, [r7, #24]
 801256a:	9302      	str	r3, [sp, #8]
 801256c:	7d3b      	ldrb	r3, [r7, #20]
 801256e:	9301      	str	r3, [sp, #4]
 8012570:	7c3b      	ldrb	r3, [r7, #16]
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	4603      	mov	r3, r0
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f003 fddd 	bl	8016136 <USBH_LL_OpenPipe>

  return USBH_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8012586:	b580      	push	{r7, lr}
 8012588:	b082      	sub	sp, #8
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
 801258e:	460b      	mov	r3, r1
 8012590:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8012592:	78fb      	ldrb	r3, [r7, #3]
 8012594:	4619      	mov	r1, r3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f003 fdfc 	bl	8016194 <USBH_LL_ClosePipe>

  return USBH_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	460b      	mov	r3, r1
 80125b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 f836 	bl	8012624 <USBH_GetFreePipe>
 80125b8:	4603      	mov	r3, r0
 80125ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80125bc:	89fb      	ldrh	r3, [r7, #14]
 80125be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d00a      	beq.n	80125dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80125c6:	78fa      	ldrb	r2, [r7, #3]
 80125c8:	89fb      	ldrh	r3, [r7, #14]
 80125ca:	f003 030f 	and.w	r3, r3, #15
 80125ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80125d2:	6879      	ldr	r1, [r7, #4]
 80125d4:	33e0      	adds	r3, #224	; 0xe0
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	440b      	add	r3, r1
 80125da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80125dc:	89fb      	ldrh	r3, [r7, #14]
 80125de:	b2db      	uxtb	r3, r3
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3710      	adds	r7, #16
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	460b      	mov	r3, r1
 80125f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	2b0f      	cmp	r3, #15
 80125f8:	d80d      	bhi.n	8012616 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	33e0      	adds	r3, #224	; 0xe0
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4413      	add	r3, r2
 8012604:	685a      	ldr	r2, [r3, #4]
 8012606:	78fb      	ldrb	r3, [r7, #3]
 8012608:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801260c:	6879      	ldr	r1, [r7, #4]
 801260e:	33e0      	adds	r3, #224	; 0xe0
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	440b      	add	r3, r1
 8012614:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012616:	2300      	movs	r3, #0
}
 8012618:	4618      	mov	r0, r3
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012624:	b480      	push	{r7}
 8012626:	b085      	sub	sp, #20
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801262c:	2300      	movs	r3, #0
 801262e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012630:	2300      	movs	r3, #0
 8012632:	73fb      	strb	r3, [r7, #15]
 8012634:	e00f      	b.n	8012656 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012636:	7bfb      	ldrb	r3, [r7, #15]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	33e0      	adds	r3, #224	; 0xe0
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	4413      	add	r3, r2
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012646:	2b00      	cmp	r3, #0
 8012648:	d102      	bne.n	8012650 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801264a:	7bfb      	ldrb	r3, [r7, #15]
 801264c:	b29b      	uxth	r3, r3
 801264e:	e007      	b.n	8012660 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012650:	7bfb      	ldrb	r3, [r7, #15]
 8012652:	3301      	adds	r3, #1
 8012654:	73fb      	strb	r3, [r7, #15]
 8012656:	7bfb      	ldrb	r3, [r7, #15]
 8012658:	2b0f      	cmp	r3, #15
 801265a:	d9ec      	bls.n	8012636 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801265c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8012660:	4618      	mov	r0, r3
 8012662:	3714      	adds	r7, #20
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr

0801266c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	4603      	mov	r3, r0
 8012674:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012676:	79fb      	ldrb	r3, [r7, #7]
 8012678:	4a08      	ldr	r2, [pc, #32]	; (801269c <disk_status+0x30>)
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	4413      	add	r3, r2
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	79fa      	ldrb	r2, [r7, #7]
 8012684:	4905      	ldr	r1, [pc, #20]	; (801269c <disk_status+0x30>)
 8012686:	440a      	add	r2, r1
 8012688:	7a12      	ldrb	r2, [r2, #8]
 801268a:	4610      	mov	r0, r2
 801268c:	4798      	blx	r3
 801268e:	4603      	mov	r3, r0
 8012690:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012692:	7bfb      	ldrb	r3, [r7, #15]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	20000f90 	.word	0x20000f90

080126a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	4603      	mov	r3, r0
 80126a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80126ae:	79fb      	ldrb	r3, [r7, #7]
 80126b0:	4a0d      	ldr	r2, [pc, #52]	; (80126e8 <disk_initialize+0x48>)
 80126b2:	5cd3      	ldrb	r3, [r2, r3]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d111      	bne.n	80126dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80126b8:	79fb      	ldrb	r3, [r7, #7]
 80126ba:	4a0b      	ldr	r2, [pc, #44]	; (80126e8 <disk_initialize+0x48>)
 80126bc:	2101      	movs	r1, #1
 80126be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80126c0:	79fb      	ldrb	r3, [r7, #7]
 80126c2:	4a09      	ldr	r2, [pc, #36]	; (80126e8 <disk_initialize+0x48>)
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	4413      	add	r3, r2
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	79fa      	ldrb	r2, [r7, #7]
 80126ce:	4906      	ldr	r1, [pc, #24]	; (80126e8 <disk_initialize+0x48>)
 80126d0:	440a      	add	r2, r1
 80126d2:	7a12      	ldrb	r2, [r2, #8]
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
 80126d8:	4603      	mov	r3, r0
 80126da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3710      	adds	r7, #16
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	bf00      	nop
 80126e8:	20000f90 	.word	0x20000f90

080126ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80126ec:	b590      	push	{r4, r7, lr}
 80126ee:	b087      	sub	sp, #28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60b9      	str	r1, [r7, #8]
 80126f4:	607a      	str	r2, [r7, #4]
 80126f6:	603b      	str	r3, [r7, #0]
 80126f8:	4603      	mov	r3, r0
 80126fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80126fc:	7bfb      	ldrb	r3, [r7, #15]
 80126fe:	4a0a      	ldr	r2, [pc, #40]	; (8012728 <disk_read+0x3c>)
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4413      	add	r3, r2
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	689c      	ldr	r4, [r3, #8]
 8012708:	7bfb      	ldrb	r3, [r7, #15]
 801270a:	4a07      	ldr	r2, [pc, #28]	; (8012728 <disk_read+0x3c>)
 801270c:	4413      	add	r3, r2
 801270e:	7a18      	ldrb	r0, [r3, #8]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	68b9      	ldr	r1, [r7, #8]
 8012716:	47a0      	blx	r4
 8012718:	4603      	mov	r3, r0
 801271a:	75fb      	strb	r3, [r7, #23]
  return res;
 801271c:	7dfb      	ldrb	r3, [r7, #23]
}
 801271e:	4618      	mov	r0, r3
 8012720:	371c      	adds	r7, #28
 8012722:	46bd      	mov	sp, r7
 8012724:	bd90      	pop	{r4, r7, pc}
 8012726:	bf00      	nop
 8012728:	20000f90 	.word	0x20000f90

0801272c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801272c:	b590      	push	{r4, r7, lr}
 801272e:	b087      	sub	sp, #28
 8012730:	af00      	add	r7, sp, #0
 8012732:	60b9      	str	r1, [r7, #8]
 8012734:	607a      	str	r2, [r7, #4]
 8012736:	603b      	str	r3, [r7, #0]
 8012738:	4603      	mov	r3, r0
 801273a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801273c:	7bfb      	ldrb	r3, [r7, #15]
 801273e:	4a0a      	ldr	r2, [pc, #40]	; (8012768 <disk_write+0x3c>)
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	4413      	add	r3, r2
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	68dc      	ldr	r4, [r3, #12]
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	4a07      	ldr	r2, [pc, #28]	; (8012768 <disk_write+0x3c>)
 801274c:	4413      	add	r3, r2
 801274e:	7a18      	ldrb	r0, [r3, #8]
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	68b9      	ldr	r1, [r7, #8]
 8012756:	47a0      	blx	r4
 8012758:	4603      	mov	r3, r0
 801275a:	75fb      	strb	r3, [r7, #23]
  return res;
 801275c:	7dfb      	ldrb	r3, [r7, #23]
}
 801275e:	4618      	mov	r0, r3
 8012760:	371c      	adds	r7, #28
 8012762:	46bd      	mov	sp, r7
 8012764:	bd90      	pop	{r4, r7, pc}
 8012766:	bf00      	nop
 8012768:	20000f90 	.word	0x20000f90

0801276c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	603a      	str	r2, [r7, #0]
 8012776:	71fb      	strb	r3, [r7, #7]
 8012778:	460b      	mov	r3, r1
 801277a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801277c:	79fb      	ldrb	r3, [r7, #7]
 801277e:	4a09      	ldr	r2, [pc, #36]	; (80127a4 <disk_ioctl+0x38>)
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	4413      	add	r3, r2
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	691b      	ldr	r3, [r3, #16]
 8012788:	79fa      	ldrb	r2, [r7, #7]
 801278a:	4906      	ldr	r1, [pc, #24]	; (80127a4 <disk_ioctl+0x38>)
 801278c:	440a      	add	r2, r1
 801278e:	7a10      	ldrb	r0, [r2, #8]
 8012790:	79b9      	ldrb	r1, [r7, #6]
 8012792:	683a      	ldr	r2, [r7, #0]
 8012794:	4798      	blx	r3
 8012796:	4603      	mov	r3, r0
 8012798:	73fb      	strb	r3, [r7, #15]
  return res;
 801279a:	7bfb      	ldrb	r3, [r7, #15]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3710      	adds	r7, #16
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	20000f90 	.word	0x20000f90

080127a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80127a8:	b480      	push	{r7}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	3301      	adds	r3, #1
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80127b8:	89fb      	ldrh	r3, [r7, #14]
 80127ba:	021b      	lsls	r3, r3, #8
 80127bc:	b21a      	sxth	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	b21b      	sxth	r3, r3
 80127c4:	4313      	orrs	r3, r2
 80127c6:	b21b      	sxth	r3, r3
 80127c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80127ca:	89fb      	ldrh	r3, [r7, #14]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3714      	adds	r7, #20
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr

080127d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	3303      	adds	r3, #3
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	021b      	lsls	r3, r3, #8
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	3202      	adds	r2, #2
 80127f0:	7812      	ldrb	r2, [r2, #0]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	021b      	lsls	r3, r3, #8
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	3201      	adds	r2, #1
 80127fe:	7812      	ldrb	r2, [r2, #0]
 8012800:	4313      	orrs	r3, r2
 8012802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	021b      	lsls	r3, r3, #8
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	7812      	ldrb	r2, [r2, #0]
 801280c:	4313      	orrs	r3, r2
 801280e:	60fb      	str	r3, [r7, #12]
	return rv;
 8012810:	68fb      	ldr	r3, [r7, #12]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3714      	adds	r7, #20
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801281e:	b480      	push	{r7}
 8012820:	b083      	sub	sp, #12
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
 8012826:	460b      	mov	r3, r1
 8012828:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	1c5a      	adds	r2, r3, #1
 801282e:	607a      	str	r2, [r7, #4]
 8012830:	887a      	ldrh	r2, [r7, #2]
 8012832:	b2d2      	uxtb	r2, r2
 8012834:	701a      	strb	r2, [r3, #0]
 8012836:	887b      	ldrh	r3, [r7, #2]
 8012838:	0a1b      	lsrs	r3, r3, #8
 801283a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	1c5a      	adds	r2, r3, #1
 8012840:	607a      	str	r2, [r7, #4]
 8012842:	887a      	ldrh	r2, [r7, #2]
 8012844:	b2d2      	uxtb	r2, r2
 8012846:	701a      	strb	r2, [r3, #0]
}
 8012848:	bf00      	nop
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr

08012854 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	1c5a      	adds	r2, r3, #1
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	683a      	ldr	r2, [r7, #0]
 8012866:	b2d2      	uxtb	r2, r2
 8012868:	701a      	strb	r2, [r3, #0]
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	0a1b      	lsrs	r3, r3, #8
 801286e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	1c5a      	adds	r2, r3, #1
 8012874:	607a      	str	r2, [r7, #4]
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	b2d2      	uxtb	r2, r2
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	0a1b      	lsrs	r3, r3, #8
 8012880:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	607a      	str	r2, [r7, #4]
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	b2d2      	uxtb	r2, r2
 801288c:	701a      	strb	r2, [r3, #0]
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	0a1b      	lsrs	r3, r3, #8
 8012892:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	1c5a      	adds	r2, r3, #1
 8012898:	607a      	str	r2, [r7, #4]
 801289a:	683a      	ldr	r2, [r7, #0]
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
}
 80128a0:	bf00      	nop
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80128ac:	b480      	push	{r7}
 80128ae:	b087      	sub	sp, #28
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d00d      	beq.n	80128e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80128c6:	693a      	ldr	r2, [r7, #16]
 80128c8:	1c53      	adds	r3, r2, #1
 80128ca:	613b      	str	r3, [r7, #16]
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	1c59      	adds	r1, r3, #1
 80128d0:	6179      	str	r1, [r7, #20]
 80128d2:	7812      	ldrb	r2, [r2, #0]
 80128d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	3b01      	subs	r3, #1
 80128da:	607b      	str	r3, [r7, #4]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d1f1      	bne.n	80128c6 <mem_cpy+0x1a>
	}
}
 80128e2:	bf00      	nop
 80128e4:	371c      	adds	r7, #28
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr

080128ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80128ee:	b480      	push	{r7}
 80128f0:	b087      	sub	sp, #28
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	60f8      	str	r0, [r7, #12]
 80128f6:	60b9      	str	r1, [r7, #8]
 80128f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	617a      	str	r2, [r7, #20]
 8012904:	68ba      	ldr	r2, [r7, #8]
 8012906:	b2d2      	uxtb	r2, r2
 8012908:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	3b01      	subs	r3, #1
 801290e:	607b      	str	r3, [r7, #4]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1f3      	bne.n	80128fe <mem_set+0x10>
}
 8012916:	bf00      	nop
 8012918:	bf00      	nop
 801291a:	371c      	adds	r7, #28
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012924:	b480      	push	{r7}
 8012926:	b089      	sub	sp, #36	; 0x24
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	61fb      	str	r3, [r7, #28]
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012938:	2300      	movs	r3, #0
 801293a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	61fa      	str	r2, [r7, #28]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	4619      	mov	r1, r3
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	1c5a      	adds	r2, r3, #1
 801294a:	61ba      	str	r2, [r7, #24]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	1acb      	subs	r3, r1, r3
 8012950:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3b01      	subs	r3, #1
 8012956:	607b      	str	r3, [r7, #4]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d002      	beq.n	8012964 <mem_cmp+0x40>
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d0eb      	beq.n	801293c <mem_cmp+0x18>

	return r;
 8012964:	697b      	ldr	r3, [r7, #20]
}
 8012966:	4618      	mov	r0, r3
 8012968:	3724      	adds	r7, #36	; 0x24
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr

08012972 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012972:	b480      	push	{r7}
 8012974:	b083      	sub	sp, #12
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801297c:	e002      	b.n	8012984 <chk_chr+0x12>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	3301      	adds	r3, #1
 8012982:	607b      	str	r3, [r7, #4]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d005      	beq.n	8012998 <chk_chr+0x26>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	461a      	mov	r2, r3
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	4293      	cmp	r3, r2
 8012996:	d1f2      	bne.n	801297e <chk_chr+0xc>
	return *str;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	781b      	ldrb	r3, [r3, #0]
}
 801299c:	4618      	mov	r0, r3
 801299e:	370c      	adds	r7, #12
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr

080129a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80129a8:	b480      	push	{r7}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80129b2:	2300      	movs	r3, #0
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	60fb      	str	r3, [r7, #12]
 80129ba:	e029      	b.n	8012a10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80129bc:	4a27      	ldr	r2, [pc, #156]	; (8012a5c <chk_lock+0xb4>)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	011b      	lsls	r3, r3, #4
 80129c2:	4413      	add	r3, r2
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d01d      	beq.n	8012a06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80129ca:	4a24      	ldr	r2, [pc, #144]	; (8012a5c <chk_lock+0xb4>)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	011b      	lsls	r3, r3, #4
 80129d0:	4413      	add	r3, r2
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d116      	bne.n	8012a0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80129dc:	4a1f      	ldr	r2, [pc, #124]	; (8012a5c <chk_lock+0xb4>)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	011b      	lsls	r3, r3, #4
 80129e2:	4413      	add	r3, r2
 80129e4:	3304      	adds	r3, #4
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d10c      	bne.n	8012a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80129f0:	4a1a      	ldr	r2, [pc, #104]	; (8012a5c <chk_lock+0xb4>)
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	011b      	lsls	r3, r3, #4
 80129f6:	4413      	add	r3, r2
 80129f8:	3308      	adds	r3, #8
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d102      	bne.n	8012a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a04:	e007      	b.n	8012a16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012a06:	2301      	movs	r3, #1
 8012a08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d9d2      	bls.n	80129bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d109      	bne.n	8012a30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <chk_lock+0x80>
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d101      	bne.n	8012a2c <chk_lock+0x84>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e010      	b.n	8012a4e <chk_lock+0xa6>
 8012a2c:	2312      	movs	r3, #18
 8012a2e:	e00e      	b.n	8012a4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d108      	bne.n	8012a48 <chk_lock+0xa0>
 8012a36:	4a09      	ldr	r2, [pc, #36]	; (8012a5c <chk_lock+0xb4>)
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	011b      	lsls	r3, r3, #4
 8012a3c:	4413      	add	r3, r2
 8012a3e:	330c      	adds	r3, #12
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a46:	d101      	bne.n	8012a4c <chk_lock+0xa4>
 8012a48:	2310      	movs	r3, #16
 8012a4a:	e000      	b.n	8012a4e <chk_lock+0xa6>
 8012a4c:	2300      	movs	r3, #0
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3714      	adds	r7, #20
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	20000f70 	.word	0x20000f70

08012a60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012a66:	2300      	movs	r3, #0
 8012a68:	607b      	str	r3, [r7, #4]
 8012a6a:	e002      	b.n	8012a72 <enq_lock+0x12>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	607b      	str	r3, [r7, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d806      	bhi.n	8012a86 <enq_lock+0x26>
 8012a78:	4a09      	ldr	r2, [pc, #36]	; (8012aa0 <enq_lock+0x40>)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	011b      	lsls	r3, r3, #4
 8012a7e:	4413      	add	r3, r2
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1f2      	bne.n	8012a6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	bf14      	ite	ne
 8012a8c:	2301      	movne	r3, #1
 8012a8e:	2300      	moveq	r3, #0
 8012a90:	b2db      	uxtb	r3, r3
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	370c      	adds	r7, #12
 8012a96:	46bd      	mov	sp, r7
 8012a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	20000f70 	.word	0x20000f70

08012aa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012aae:	2300      	movs	r3, #0
 8012ab0:	60fb      	str	r3, [r7, #12]
 8012ab2:	e01f      	b.n	8012af4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012ab4:	4a41      	ldr	r2, [pc, #260]	; (8012bbc <inc_lock+0x118>)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	011b      	lsls	r3, r3, #4
 8012aba:	4413      	add	r3, r2
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d113      	bne.n	8012aee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012ac6:	4a3d      	ldr	r2, [pc, #244]	; (8012bbc <inc_lock+0x118>)
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	011b      	lsls	r3, r3, #4
 8012acc:	4413      	add	r3, r2
 8012ace:	3304      	adds	r3, #4
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d109      	bne.n	8012aee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012ada:	4a38      	ldr	r2, [pc, #224]	; (8012bbc <inc_lock+0x118>)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	011b      	lsls	r3, r3, #4
 8012ae0:	4413      	add	r3, r2
 8012ae2:	3308      	adds	r3, #8
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d006      	beq.n	8012afc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	3301      	adds	r3, #1
 8012af2:	60fb      	str	r3, [r7, #12]
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d9dc      	bls.n	8012ab4 <inc_lock+0x10>
 8012afa:	e000      	b.n	8012afe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012afc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d132      	bne.n	8012b6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012b04:	2300      	movs	r3, #0
 8012b06:	60fb      	str	r3, [r7, #12]
 8012b08:	e002      	b.n	8012b10 <inc_lock+0x6c>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d806      	bhi.n	8012b24 <inc_lock+0x80>
 8012b16:	4a29      	ldr	r2, [pc, #164]	; (8012bbc <inc_lock+0x118>)
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	011b      	lsls	r3, r3, #4
 8012b1c:	4413      	add	r3, r2
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1f2      	bne.n	8012b0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2b02      	cmp	r3, #2
 8012b28:	d101      	bne.n	8012b2e <inc_lock+0x8a>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	e040      	b.n	8012bb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	4922      	ldr	r1, [pc, #136]	; (8012bbc <inc_lock+0x118>)
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	011b      	lsls	r3, r3, #4
 8012b38:	440b      	add	r3, r1
 8012b3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	689a      	ldr	r2, [r3, #8]
 8012b40:	491e      	ldr	r1, [pc, #120]	; (8012bbc <inc_lock+0x118>)
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	011b      	lsls	r3, r3, #4
 8012b46:	440b      	add	r3, r1
 8012b48:	3304      	adds	r3, #4
 8012b4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	695a      	ldr	r2, [r3, #20]
 8012b50:	491a      	ldr	r1, [pc, #104]	; (8012bbc <inc_lock+0x118>)
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	011b      	lsls	r3, r3, #4
 8012b56:	440b      	add	r3, r1
 8012b58:	3308      	adds	r3, #8
 8012b5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012b5c:	4a17      	ldr	r2, [pc, #92]	; (8012bbc <inc_lock+0x118>)
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	011b      	lsls	r3, r3, #4
 8012b62:	4413      	add	r3, r2
 8012b64:	330c      	adds	r3, #12
 8012b66:	2200      	movs	r2, #0
 8012b68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d009      	beq.n	8012b84 <inc_lock+0xe0>
 8012b70:	4a12      	ldr	r2, [pc, #72]	; (8012bbc <inc_lock+0x118>)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	011b      	lsls	r3, r3, #4
 8012b76:	4413      	add	r3, r2
 8012b78:	330c      	adds	r3, #12
 8012b7a:	881b      	ldrh	r3, [r3, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <inc_lock+0xe0>
 8012b80:	2300      	movs	r3, #0
 8012b82:	e015      	b.n	8012bb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d108      	bne.n	8012b9c <inc_lock+0xf8>
 8012b8a:	4a0c      	ldr	r2, [pc, #48]	; (8012bbc <inc_lock+0x118>)
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	011b      	lsls	r3, r3, #4
 8012b90:	4413      	add	r3, r2
 8012b92:	330c      	adds	r3, #12
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	3301      	adds	r3, #1
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	e001      	b.n	8012ba0 <inc_lock+0xfc>
 8012b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ba0:	4906      	ldr	r1, [pc, #24]	; (8012bbc <inc_lock+0x118>)
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	011b      	lsls	r3, r3, #4
 8012ba6:	440b      	add	r3, r1
 8012ba8:	330c      	adds	r3, #12
 8012baa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	3301      	adds	r3, #1
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3714      	adds	r7, #20
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	20000f70 	.word	0x20000f70

08012bc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b085      	sub	sp, #20
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	607b      	str	r3, [r7, #4]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d825      	bhi.n	8012c20 <dec_lock+0x60>
		n = Files[i].ctr;
 8012bd4:	4a17      	ldr	r2, [pc, #92]	; (8012c34 <dec_lock+0x74>)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	011b      	lsls	r3, r3, #4
 8012bda:	4413      	add	r3, r2
 8012bdc:	330c      	adds	r3, #12
 8012bde:	881b      	ldrh	r3, [r3, #0]
 8012be0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012be2:	89fb      	ldrh	r3, [r7, #14]
 8012be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012be8:	d101      	bne.n	8012bee <dec_lock+0x2e>
 8012bea:	2300      	movs	r3, #0
 8012bec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012bee:	89fb      	ldrh	r3, [r7, #14]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <dec_lock+0x3a>
 8012bf4:	89fb      	ldrh	r3, [r7, #14]
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012bfa:	4a0e      	ldr	r2, [pc, #56]	; (8012c34 <dec_lock+0x74>)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	011b      	lsls	r3, r3, #4
 8012c00:	4413      	add	r3, r2
 8012c02:	330c      	adds	r3, #12
 8012c04:	89fa      	ldrh	r2, [r7, #14]
 8012c06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012c08:	89fb      	ldrh	r3, [r7, #14]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d105      	bne.n	8012c1a <dec_lock+0x5a>
 8012c0e:	4a09      	ldr	r2, [pc, #36]	; (8012c34 <dec_lock+0x74>)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	011b      	lsls	r3, r3, #4
 8012c14:	4413      	add	r3, r2
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	737b      	strb	r3, [r7, #13]
 8012c1e:	e001      	b.n	8012c24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012c20:	2302      	movs	r3, #2
 8012c22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012c24:	7b7b      	ldrb	r3, [r7, #13]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3714      	adds	r7, #20
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	20000f70 	.word	0x20000f70

08012c38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012c40:	2300      	movs	r3, #0
 8012c42:	60fb      	str	r3, [r7, #12]
 8012c44:	e010      	b.n	8012c68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012c46:	4a0d      	ldr	r2, [pc, #52]	; (8012c7c <clear_lock+0x44>)
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	011b      	lsls	r3, r3, #4
 8012c4c:	4413      	add	r3, r2
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d105      	bne.n	8012c62 <clear_lock+0x2a>
 8012c56:	4a09      	ldr	r2, [pc, #36]	; (8012c7c <clear_lock+0x44>)
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	011b      	lsls	r3, r3, #4
 8012c5c:	4413      	add	r3, r2
 8012c5e:	2200      	movs	r2, #0
 8012c60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	3301      	adds	r3, #1
 8012c66:	60fb      	str	r3, [r7, #12]
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d9eb      	bls.n	8012c46 <clear_lock+0xe>
	}
}
 8012c6e:	bf00      	nop
 8012c70:	bf00      	nop
 8012c72:	3714      	adds	r7, #20
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	20000f70 	.word	0x20000f70

08012c80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	78db      	ldrb	r3, [r3, #3]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d034      	beq.n	8012cfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	7858      	ldrb	r0, [r3, #1]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	697a      	ldr	r2, [r7, #20]
 8012ca8:	f7ff fd40 	bl	801272c <disk_write>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d002      	beq.n	8012cb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	73fb      	strb	r3, [r7, #15]
 8012cb6:	e022      	b.n	8012cfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6a1b      	ldr	r3, [r3, #32]
 8012cc2:	697a      	ldr	r2, [r7, #20]
 8012cc4:	1ad2      	subs	r2, r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	699b      	ldr	r3, [r3, #24]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d217      	bcs.n	8012cfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	789b      	ldrb	r3, [r3, #2]
 8012cd2:	613b      	str	r3, [r7, #16]
 8012cd4:	e010      	b.n	8012cf8 <sync_window+0x78>
					wsect += fs->fsize;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	699b      	ldr	r3, [r3, #24]
 8012cda:	697a      	ldr	r2, [r7, #20]
 8012cdc:	4413      	add	r3, r2
 8012cde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	7858      	ldrb	r0, [r3, #1]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cea:	2301      	movs	r3, #1
 8012cec:	697a      	ldr	r2, [r7, #20]
 8012cee:	f7ff fd1d 	bl	801272c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	613b      	str	r3, [r7, #16]
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d8eb      	bhi.n	8012cd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3718      	adds	r7, #24
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1a:	683a      	ldr	r2, [r7, #0]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d01b      	beq.n	8012d58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7ff ffad 	bl	8012c80 <sync_window>
 8012d26:	4603      	mov	r3, r0
 8012d28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012d2a:	7bfb      	ldrb	r3, [r7, #15]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d113      	bne.n	8012d58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7858      	ldrb	r0, [r3, #1]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	683a      	ldr	r2, [r7, #0]
 8012d3e:	f7ff fcd5 	bl	80126ec <disk_read>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d004      	beq.n	8012d52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012d48:	f04f 33ff 	mov.w	r3, #4294967295
 8012d4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	683a      	ldr	r2, [r7, #0]
 8012d56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3710      	adds	r7, #16
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7ff ff87 	bl	8012c80 <sync_window>
 8012d72:	4603      	mov	r3, r0
 8012d74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012d76:	7bfb      	ldrb	r3, [r7, #15]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d158      	bne.n	8012e2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d148      	bne.n	8012e16 <sync_fs+0xb2>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	791b      	ldrb	r3, [r3, #4]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d144      	bne.n	8012e16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	3330      	adds	r3, #48	; 0x30
 8012d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d94:	2100      	movs	r1, #0
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fda9 	bl	80128ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3330      	adds	r3, #48	; 0x30
 8012da0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012da4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7ff fd38 	bl	801281e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	3330      	adds	r3, #48	; 0x30
 8012db2:	4921      	ldr	r1, [pc, #132]	; (8012e38 <sync_fs+0xd4>)
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fd4d 	bl	8012854 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	3330      	adds	r3, #48	; 0x30
 8012dbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012dc2:	491e      	ldr	r1, [pc, #120]	; (8012e3c <sync_fs+0xd8>)
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff fd45 	bl	8012854 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	3330      	adds	r3, #48	; 0x30
 8012dce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	691b      	ldr	r3, [r3, #16]
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	4610      	mov	r0, r2
 8012dda:	f7ff fd3b 	bl	8012854 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	3330      	adds	r3, #48	; 0x30
 8012de2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	4619      	mov	r1, r3
 8012dec:	4610      	mov	r0, r2
 8012dee:	f7ff fd31 	bl	8012854 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	69db      	ldr	r3, [r3, #28]
 8012df6:	1c5a      	adds	r2, r3, #1
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	7858      	ldrb	r0, [r3, #1]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	f7ff fc8e 	bl	801272c <disk_write>
			fs->fsi_flag = 0;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	785b      	ldrb	r3, [r3, #1]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fca4 	bl	801276c <disk_ioctl>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d001      	beq.n	8012e2e <sync_fs+0xca>
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	41615252 	.word	0x41615252
 8012e3c:	61417272 	.word	0x61417272

08012e40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	3b02      	subs	r3, #2
 8012e4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	695b      	ldr	r3, [r3, #20]
 8012e54:	3b02      	subs	r3, #2
 8012e56:	683a      	ldr	r2, [r7, #0]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d301      	bcc.n	8012e60 <clust2sect+0x20>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e008      	b.n	8012e72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	895b      	ldrh	r3, [r3, #10]
 8012e64:	461a      	mov	r2, r3
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	fb03 f202 	mul.w	r2, r3, r2
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e70:	4413      	add	r3, r2
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b086      	sub	sp, #24
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d904      	bls.n	8012e9e <get_fat+0x20>
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	695b      	ldr	r3, [r3, #20]
 8012e98:	683a      	ldr	r2, [r7, #0]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d302      	bcc.n	8012ea4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	617b      	str	r3, [r7, #20]
 8012ea2:	e08f      	b.n	8012fc4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b03      	cmp	r3, #3
 8012eb0:	d062      	beq.n	8012f78 <get_fat+0xfa>
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	dc7c      	bgt.n	8012fb0 <get_fat+0x132>
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d002      	beq.n	8012ec0 <get_fat+0x42>
 8012eba:	2b02      	cmp	r3, #2
 8012ebc:	d042      	beq.n	8012f44 <get_fat+0xc6>
 8012ebe:	e077      	b.n	8012fb0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	60fb      	str	r3, [r7, #12]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	085b      	lsrs	r3, r3, #1
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	4413      	add	r3, r2
 8012ecc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	6a1a      	ldr	r2, [r3, #32]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	0a5b      	lsrs	r3, r3, #9
 8012ed6:	4413      	add	r3, r2
 8012ed8:	4619      	mov	r1, r3
 8012eda:	6938      	ldr	r0, [r7, #16]
 8012edc:	f7ff ff14 	bl	8012d08 <move_window>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d167      	bne.n	8012fb6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	1c5a      	adds	r2, r3, #1
 8012eea:	60fa      	str	r2, [r7, #12]
 8012eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ef0:	693a      	ldr	r2, [r7, #16]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ef8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	6a1a      	ldr	r2, [r3, #32]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	0a5b      	lsrs	r3, r3, #9
 8012f02:	4413      	add	r3, r2
 8012f04:	4619      	mov	r1, r3
 8012f06:	6938      	ldr	r0, [r7, #16]
 8012f08:	f7ff fefe 	bl	8012d08 <move_window>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d153      	bne.n	8012fba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f18:	693a      	ldr	r2, [r7, #16]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f20:	021b      	lsls	r3, r3, #8
 8012f22:	461a      	mov	r2, r3
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	4313      	orrs	r3, r2
 8012f28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <get_fat+0xbc>
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	091b      	lsrs	r3, r3, #4
 8012f38:	e002      	b.n	8012f40 <get_fat+0xc2>
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f40:	617b      	str	r3, [r7, #20]
			break;
 8012f42:	e03f      	b.n	8012fc4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	6a1a      	ldr	r2, [r3, #32]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	0a1b      	lsrs	r3, r3, #8
 8012f4c:	4413      	add	r3, r2
 8012f4e:	4619      	mov	r1, r3
 8012f50:	6938      	ldr	r0, [r7, #16]
 8012f52:	f7ff fed9 	bl	8012d08 <move_window>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d130      	bne.n	8012fbe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012f6a:	4413      	add	r3, r2
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff fc1b 	bl	80127a8 <ld_word>
 8012f72:	4603      	mov	r3, r0
 8012f74:	617b      	str	r3, [r7, #20]
			break;
 8012f76:	e025      	b.n	8012fc4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	6a1a      	ldr	r2, [r3, #32]
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	09db      	lsrs	r3, r3, #7
 8012f80:	4413      	add	r3, r2
 8012f82:	4619      	mov	r1, r3
 8012f84:	6938      	ldr	r0, [r7, #16]
 8012f86:	f7ff febf 	bl	8012d08 <move_window>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d118      	bne.n	8012fc2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	009b      	lsls	r3, r3, #2
 8012f9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012f9e:	4413      	add	r3, r2
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fc19 	bl	80127d8 <ld_dword>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012fac:	617b      	str	r3, [r7, #20]
			break;
 8012fae:	e009      	b.n	8012fc4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	617b      	str	r3, [r7, #20]
 8012fb4:	e006      	b.n	8012fc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012fb6:	bf00      	nop
 8012fb8:	e004      	b.n	8012fc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012fba:	bf00      	nop
 8012fbc:	e002      	b.n	8012fc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012fbe:	bf00      	nop
 8012fc0:	e000      	b.n	8012fc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012fc2:	bf00      	nop
		}
	}

	return val;
 8012fc4:	697b      	ldr	r3, [r7, #20]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}

08012fce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012fce:	b590      	push	{r4, r7, lr}
 8012fd0:	b089      	sub	sp, #36	; 0x24
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	60f8      	str	r0, [r7, #12]
 8012fd6:	60b9      	str	r1, [r7, #8]
 8012fd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012fda:	2302      	movs	r3, #2
 8012fdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	2b01      	cmp	r3, #1
 8012fe2:	f240 80d2 	bls.w	801318a <put_fat+0x1bc>
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	695b      	ldr	r3, [r3, #20]
 8012fea:	68ba      	ldr	r2, [r7, #8]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	f080 80cc 	bcs.w	801318a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	2b03      	cmp	r3, #3
 8012ff8:	f000 8096 	beq.w	8013128 <put_fat+0x15a>
 8012ffc:	2b03      	cmp	r3, #3
 8012ffe:	f300 80cd 	bgt.w	801319c <put_fat+0x1ce>
 8013002:	2b01      	cmp	r3, #1
 8013004:	d002      	beq.n	801300c <put_fat+0x3e>
 8013006:	2b02      	cmp	r3, #2
 8013008:	d06e      	beq.n	80130e8 <put_fat+0x11a>
 801300a:	e0c7      	b.n	801319c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	61bb      	str	r3, [r7, #24]
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	085b      	lsrs	r3, r3, #1
 8013014:	69ba      	ldr	r2, [r7, #24]
 8013016:	4413      	add	r3, r2
 8013018:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	6a1a      	ldr	r2, [r3, #32]
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	0a5b      	lsrs	r3, r3, #9
 8013022:	4413      	add	r3, r2
 8013024:	4619      	mov	r1, r3
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f7ff fe6e 	bl	8012d08 <move_window>
 801302c:	4603      	mov	r3, r0
 801302e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013030:	7ffb      	ldrb	r3, [r7, #31]
 8013032:	2b00      	cmp	r3, #0
 8013034:	f040 80ab 	bne.w	801318e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	1c59      	adds	r1, r3, #1
 8013042:	61b9      	str	r1, [r7, #24]
 8013044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013048:	4413      	add	r3, r2
 801304a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	f003 0301 	and.w	r3, r3, #1
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00d      	beq.n	8013072 <put_fat+0xa4>
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	b25b      	sxtb	r3, r3
 801305c:	f003 030f 	and.w	r3, r3, #15
 8013060:	b25a      	sxtb	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	b2db      	uxtb	r3, r3
 8013066:	011b      	lsls	r3, r3, #4
 8013068:	b25b      	sxtb	r3, r3
 801306a:	4313      	orrs	r3, r2
 801306c:	b25b      	sxtb	r3, r3
 801306e:	b2db      	uxtb	r3, r3
 8013070:	e001      	b.n	8013076 <put_fat+0xa8>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	b2db      	uxtb	r3, r3
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2201      	movs	r2, #1
 801307e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6a1a      	ldr	r2, [r3, #32]
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	0a5b      	lsrs	r3, r3, #9
 8013088:	4413      	add	r3, r2
 801308a:	4619      	mov	r1, r3
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7ff fe3b 	bl	8012d08 <move_window>
 8013092:	4603      	mov	r3, r0
 8013094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013096:	7ffb      	ldrb	r3, [r7, #31]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d17a      	bne.n	8013192 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130a8:	4413      	add	r3, r2
 80130aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	f003 0301 	and.w	r3, r3, #1
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <put_fat+0xf0>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	091b      	lsrs	r3, r3, #4
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	e00e      	b.n	80130dc <put_fat+0x10e>
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	b25b      	sxtb	r3, r3
 80130c4:	f023 030f 	bic.w	r3, r3, #15
 80130c8:	b25a      	sxtb	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	0a1b      	lsrs	r3, r3, #8
 80130ce:	b25b      	sxtb	r3, r3
 80130d0:	f003 030f 	and.w	r3, r3, #15
 80130d4:	b25b      	sxtb	r3, r3
 80130d6:	4313      	orrs	r3, r2
 80130d8:	b25b      	sxtb	r3, r3
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2201      	movs	r2, #1
 80130e4:	70da      	strb	r2, [r3, #3]
			break;
 80130e6:	e059      	b.n	801319c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6a1a      	ldr	r2, [r3, #32]
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	0a1b      	lsrs	r3, r3, #8
 80130f0:	4413      	add	r3, r2
 80130f2:	4619      	mov	r1, r3
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f7ff fe07 	bl	8012d08 <move_window>
 80130fa:	4603      	mov	r3, r0
 80130fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130fe:	7ffb      	ldrb	r3, [r7, #31]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d148      	bne.n	8013196 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013112:	4413      	add	r3, r2
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	b292      	uxth	r2, r2
 8013118:	4611      	mov	r1, r2
 801311a:	4618      	mov	r0, r3
 801311c:	f7ff fb7f 	bl	801281e <st_word>
			fs->wflag = 1;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2201      	movs	r2, #1
 8013124:	70da      	strb	r2, [r3, #3]
			break;
 8013126:	e039      	b.n	801319c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	6a1a      	ldr	r2, [r3, #32]
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	09db      	lsrs	r3, r3, #7
 8013130:	4413      	add	r3, r2
 8013132:	4619      	mov	r1, r3
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f7ff fde7 	bl	8012d08 <move_window>
 801313a:	4603      	mov	r3, r0
 801313c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801313e:	7ffb      	ldrb	r3, [r7, #31]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d12a      	bne.n	801319a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013158:	4413      	add	r3, r2
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff fb3c 	bl	80127d8 <ld_dword>
 8013160:	4603      	mov	r3, r0
 8013162:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013166:	4323      	orrs	r3, r4
 8013168:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013178:	4413      	add	r3, r2
 801317a:	6879      	ldr	r1, [r7, #4]
 801317c:	4618      	mov	r0, r3
 801317e:	f7ff fb69 	bl	8012854 <st_dword>
			fs->wflag = 1;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2201      	movs	r2, #1
 8013186:	70da      	strb	r2, [r3, #3]
			break;
 8013188:	e008      	b.n	801319c <put_fat+0x1ce>
		}
	}
 801318a:	bf00      	nop
 801318c:	e006      	b.n	801319c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801318e:	bf00      	nop
 8013190:	e004      	b.n	801319c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013192:	bf00      	nop
 8013194:	e002      	b.n	801319c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013196:	bf00      	nop
 8013198:	e000      	b.n	801319c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801319a:	bf00      	nop
	return res;
 801319c:	7ffb      	ldrb	r3, [r7, #31]
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3724      	adds	r7, #36	; 0x24
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd90      	pop	{r4, r7, pc}

080131a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b088      	sub	sp, #32
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	60f8      	str	r0, [r7, #12]
 80131ae:	60b9      	str	r1, [r7, #8]
 80131b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80131b2:	2300      	movs	r3, #0
 80131b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d904      	bls.n	80131cc <remove_chain+0x26>
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	695b      	ldr	r3, [r3, #20]
 80131c6:	68ba      	ldr	r2, [r7, #8]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d301      	bcc.n	80131d0 <remove_chain+0x2a>
 80131cc:	2302      	movs	r3, #2
 80131ce:	e04b      	b.n	8013268 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00c      	beq.n	80131f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80131d6:	f04f 32ff 	mov.w	r2, #4294967295
 80131da:	6879      	ldr	r1, [r7, #4]
 80131dc:	69b8      	ldr	r0, [r7, #24]
 80131de:	f7ff fef6 	bl	8012fce <put_fat>
 80131e2:	4603      	mov	r3, r0
 80131e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80131e6:	7ffb      	ldrb	r3, [r7, #31]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d001      	beq.n	80131f0 <remove_chain+0x4a>
 80131ec:	7ffb      	ldrb	r3, [r7, #31]
 80131ee:	e03b      	b.n	8013268 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80131f0:	68b9      	ldr	r1, [r7, #8]
 80131f2:	68f8      	ldr	r0, [r7, #12]
 80131f4:	f7ff fe43 	bl	8012e7e <get_fat>
 80131f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d031      	beq.n	8013264 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	2b01      	cmp	r3, #1
 8013204:	d101      	bne.n	801320a <remove_chain+0x64>
 8013206:	2302      	movs	r3, #2
 8013208:	e02e      	b.n	8013268 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013210:	d101      	bne.n	8013216 <remove_chain+0x70>
 8013212:	2301      	movs	r3, #1
 8013214:	e028      	b.n	8013268 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013216:	2200      	movs	r2, #0
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	69b8      	ldr	r0, [r7, #24]
 801321c:	f7ff fed7 	bl	8012fce <put_fat>
 8013220:	4603      	mov	r3, r0
 8013222:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013224:	7ffb      	ldrb	r3, [r7, #31]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <remove_chain+0x88>
 801322a:	7ffb      	ldrb	r3, [r7, #31]
 801322c:	e01c      	b.n	8013268 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	691a      	ldr	r2, [r3, #16]
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	695b      	ldr	r3, [r3, #20]
 8013236:	3b02      	subs	r3, #2
 8013238:	429a      	cmp	r2, r3
 801323a:	d20b      	bcs.n	8013254 <remove_chain+0xae>
			fs->free_clst++;
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	691b      	ldr	r3, [r3, #16]
 8013240:	1c5a      	adds	r2, r3, #1
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	791b      	ldrb	r3, [r3, #4]
 801324a:	f043 0301 	orr.w	r3, r3, #1
 801324e:	b2da      	uxtb	r2, r3
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	695b      	ldr	r3, [r3, #20]
 801325c:	68ba      	ldr	r2, [r7, #8]
 801325e:	429a      	cmp	r2, r3
 8013260:	d3c6      	bcc.n	80131f0 <remove_chain+0x4a>
 8013262:	e000      	b.n	8013266 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013264:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013266:	2300      	movs	r3, #0
}
 8013268:	4618      	mov	r0, r3
 801326a:	3720      	adds	r7, #32
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b088      	sub	sp, #32
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10d      	bne.n	80132a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d004      	beq.n	801329c <create_chain+0x2c>
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	695b      	ldr	r3, [r3, #20]
 8013296:	69ba      	ldr	r2, [r7, #24]
 8013298:	429a      	cmp	r2, r3
 801329a:	d31b      	bcc.n	80132d4 <create_chain+0x64>
 801329c:	2301      	movs	r3, #1
 801329e:	61bb      	str	r3, [r7, #24]
 80132a0:	e018      	b.n	80132d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80132a2:	6839      	ldr	r1, [r7, #0]
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f7ff fdea 	bl	8012e7e <get_fat>
 80132aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d801      	bhi.n	80132b6 <create_chain+0x46>
 80132b2:	2301      	movs	r3, #1
 80132b4:	e070      	b.n	8013398 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132bc:	d101      	bne.n	80132c2 <create_chain+0x52>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	e06a      	b.n	8013398 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d201      	bcs.n	80132d0 <create_chain+0x60>
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	e063      	b.n	8013398 <create_chain+0x128>
		scl = clst;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	3301      	adds	r3, #1
 80132dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	695b      	ldr	r3, [r3, #20]
 80132e2:	69fa      	ldr	r2, [r7, #28]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d307      	bcc.n	80132f8 <create_chain+0x88>
				ncl = 2;
 80132e8:	2302      	movs	r3, #2
 80132ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80132ec:	69fa      	ldr	r2, [r7, #28]
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d901      	bls.n	80132f8 <create_chain+0x88>
 80132f4:	2300      	movs	r3, #0
 80132f6:	e04f      	b.n	8013398 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80132f8:	69f9      	ldr	r1, [r7, #28]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f7ff fdbf 	bl	8012e7e <get_fat>
 8013300:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00e      	beq.n	8013326 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2b01      	cmp	r3, #1
 801330c:	d003      	beq.n	8013316 <create_chain+0xa6>
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013314:	d101      	bne.n	801331a <create_chain+0xaa>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	e03e      	b.n	8013398 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801331a:	69fa      	ldr	r2, [r7, #28]
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	429a      	cmp	r2, r3
 8013320:	d1da      	bne.n	80132d8 <create_chain+0x68>
 8013322:	2300      	movs	r3, #0
 8013324:	e038      	b.n	8013398 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013326:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013328:	f04f 32ff 	mov.w	r2, #4294967295
 801332c:	69f9      	ldr	r1, [r7, #28]
 801332e:	6938      	ldr	r0, [r7, #16]
 8013330:	f7ff fe4d 	bl	8012fce <put_fat>
 8013334:	4603      	mov	r3, r0
 8013336:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013338:	7dfb      	ldrb	r3, [r7, #23]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d109      	bne.n	8013352 <create_chain+0xe2>
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013344:	69fa      	ldr	r2, [r7, #28]
 8013346:	6839      	ldr	r1, [r7, #0]
 8013348:	6938      	ldr	r0, [r7, #16]
 801334a:	f7ff fe40 	bl	8012fce <put_fat>
 801334e:	4603      	mov	r3, r0
 8013350:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013352:	7dfb      	ldrb	r3, [r7, #23]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d116      	bne.n	8013386 <create_chain+0x116>
		fs->last_clst = ncl;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	69fa      	ldr	r2, [r7, #28]
 801335c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	691a      	ldr	r2, [r3, #16]
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	695b      	ldr	r3, [r3, #20]
 8013366:	3b02      	subs	r3, #2
 8013368:	429a      	cmp	r2, r3
 801336a:	d804      	bhi.n	8013376 <create_chain+0x106>
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	691b      	ldr	r3, [r3, #16]
 8013370:	1e5a      	subs	r2, r3, #1
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	791b      	ldrb	r3, [r3, #4]
 801337a:	f043 0301 	orr.w	r3, r3, #1
 801337e:	b2da      	uxtb	r2, r3
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	711a      	strb	r2, [r3, #4]
 8013384:	e007      	b.n	8013396 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013386:	7dfb      	ldrb	r3, [r7, #23]
 8013388:	2b01      	cmp	r3, #1
 801338a:	d102      	bne.n	8013392 <create_chain+0x122>
 801338c:	f04f 33ff 	mov.w	r3, #4294967295
 8013390:	e000      	b.n	8013394 <create_chain+0x124>
 8013392:	2301      	movs	r3, #1
 8013394:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013396:	69fb      	ldr	r3, [r7, #28]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3720      	adds	r7, #32
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b087      	sub	sp, #28
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b4:	3304      	adds	r3, #4
 80133b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	0a5b      	lsrs	r3, r3, #9
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	8952      	ldrh	r2, [r2, #10]
 80133c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80133c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	1d1a      	adds	r2, r3, #4
 80133ca:	613a      	str	r2, [r7, #16]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d101      	bne.n	80133da <clmt_clust+0x3a>
 80133d6:	2300      	movs	r3, #0
 80133d8:	e010      	b.n	80133fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80133da:	697a      	ldr	r2, [r7, #20]
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d307      	bcc.n	80133f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80133e2:	697a      	ldr	r2, [r7, #20]
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	617b      	str	r3, [r7, #20]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	3304      	adds	r3, #4
 80133ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80133f0:	e7e9      	b.n	80133c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80133f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	4413      	add	r3, r2
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	371c      	adds	r7, #28
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801341e:	d204      	bcs.n	801342a <dir_sdi+0x22>
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	f003 031f 	and.w	r3, r3, #31
 8013426:	2b00      	cmp	r3, #0
 8013428:	d001      	beq.n	801342e <dir_sdi+0x26>
		return FR_INT_ERR;
 801342a:	2302      	movs	r3, #2
 801342c:	e063      	b.n	80134f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d106      	bne.n	801344e <dir_sdi+0x46>
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b02      	cmp	r3, #2
 8013446:	d902      	bls.n	801344e <dir_sdi+0x46>
		clst = fs->dirbase;
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10c      	bne.n	801346e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	095b      	lsrs	r3, r3, #5
 8013458:	693a      	ldr	r2, [r7, #16]
 801345a:	8912      	ldrh	r2, [r2, #8]
 801345c:	4293      	cmp	r3, r2
 801345e:	d301      	bcc.n	8013464 <dir_sdi+0x5c>
 8013460:	2302      	movs	r3, #2
 8013462:	e048      	b.n	80134f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	61da      	str	r2, [r3, #28]
 801346c:	e029      	b.n	80134c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	895b      	ldrh	r3, [r3, #10]
 8013472:	025b      	lsls	r3, r3, #9
 8013474:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013476:	e019      	b.n	80134ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6979      	ldr	r1, [r7, #20]
 801347c:	4618      	mov	r0, r3
 801347e:	f7ff fcfe 	bl	8012e7e <get_fat>
 8013482:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801348a:	d101      	bne.n	8013490 <dir_sdi+0x88>
 801348c:	2301      	movs	r3, #1
 801348e:	e032      	b.n	80134f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	2b01      	cmp	r3, #1
 8013494:	d904      	bls.n	80134a0 <dir_sdi+0x98>
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	695b      	ldr	r3, [r3, #20]
 801349a:	697a      	ldr	r2, [r7, #20]
 801349c:	429a      	cmp	r2, r3
 801349e:	d301      	bcc.n	80134a4 <dir_sdi+0x9c>
 80134a0:	2302      	movs	r3, #2
 80134a2:	e028      	b.n	80134f6 <dir_sdi+0xee>
			ofs -= csz;
 80134a4:	683a      	ldr	r2, [r7, #0]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	1ad3      	subs	r3, r2, r3
 80134aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d2e1      	bcs.n	8013478 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80134b4:	6979      	ldr	r1, [r7, #20]
 80134b6:	6938      	ldr	r0, [r7, #16]
 80134b8:	f7ff fcc2 	bl	8012e40 <clust2sect>
 80134bc:	4602      	mov	r2, r0
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	697a      	ldr	r2, [r7, #20]
 80134c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	69db      	ldr	r3, [r3, #28]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d101      	bne.n	80134d4 <dir_sdi+0xcc>
 80134d0:	2302      	movs	r3, #2
 80134d2:	e010      	b.n	80134f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	69da      	ldr	r2, [r3, #28]
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	0a5b      	lsrs	r3, r3, #9
 80134dc:	441a      	add	r2, r3
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134ee:	441a      	add	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3718      	adds	r7, #24
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b086      	sub	sp, #24
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
 8013506:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	695b      	ldr	r3, [r3, #20]
 8013512:	3320      	adds	r3, #32
 8013514:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	69db      	ldr	r3, [r3, #28]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d003      	beq.n	8013526 <dir_next+0x28>
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013524:	d301      	bcc.n	801352a <dir_next+0x2c>
 8013526:	2304      	movs	r3, #4
 8013528:	e0aa      	b.n	8013680 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013530:	2b00      	cmp	r3, #0
 8013532:	f040 8098 	bne.w	8013666 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	69db      	ldr	r3, [r3, #28]
 801353a:	1c5a      	adds	r2, r3, #1
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	699b      	ldr	r3, [r3, #24]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d10b      	bne.n	8013560 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	095b      	lsrs	r3, r3, #5
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	8912      	ldrh	r2, [r2, #8]
 8013550:	4293      	cmp	r3, r2
 8013552:	f0c0 8088 	bcc.w	8013666 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2200      	movs	r2, #0
 801355a:	61da      	str	r2, [r3, #28]
 801355c:	2304      	movs	r3, #4
 801355e:	e08f      	b.n	8013680 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	0a5b      	lsrs	r3, r3, #9
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	8952      	ldrh	r2, [r2, #10]
 8013568:	3a01      	subs	r2, #1
 801356a:	4013      	ands	r3, r2
 801356c:	2b00      	cmp	r3, #0
 801356e:	d17a      	bne.n	8013666 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	699b      	ldr	r3, [r3, #24]
 8013576:	4619      	mov	r1, r3
 8013578:	4610      	mov	r0, r2
 801357a:	f7ff fc80 	bl	8012e7e <get_fat>
 801357e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d801      	bhi.n	801358a <dir_next+0x8c>
 8013586:	2302      	movs	r3, #2
 8013588:	e07a      	b.n	8013680 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013590:	d101      	bne.n	8013596 <dir_next+0x98>
 8013592:	2301      	movs	r3, #1
 8013594:	e074      	b.n	8013680 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	429a      	cmp	r2, r3
 801359e:	d358      	bcc.n	8013652 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d104      	bne.n	80135b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2200      	movs	r2, #0
 80135aa:	61da      	str	r2, [r3, #28]
 80135ac:	2304      	movs	r3, #4
 80135ae:	e067      	b.n	8013680 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	4619      	mov	r1, r3
 80135b8:	4610      	mov	r0, r2
 80135ba:	f7ff fe59 	bl	8013270 <create_chain>
 80135be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d101      	bne.n	80135ca <dir_next+0xcc>
 80135c6:	2307      	movs	r3, #7
 80135c8:	e05a      	b.n	8013680 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	2b01      	cmp	r3, #1
 80135ce:	d101      	bne.n	80135d4 <dir_next+0xd6>
 80135d0:	2302      	movs	r3, #2
 80135d2:	e055      	b.n	8013680 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135da:	d101      	bne.n	80135e0 <dir_next+0xe2>
 80135dc:	2301      	movs	r3, #1
 80135de:	e04f      	b.n	8013680 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f7ff fb4d 	bl	8012c80 <sync_window>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <dir_next+0xf2>
 80135ec:	2301      	movs	r3, #1
 80135ee:	e047      	b.n	8013680 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	3330      	adds	r3, #48	; 0x30
 80135f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135f8:	2100      	movs	r1, #0
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7ff f977 	bl	80128ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013600:	2300      	movs	r3, #0
 8013602:	613b      	str	r3, [r7, #16]
 8013604:	6979      	ldr	r1, [r7, #20]
 8013606:	68f8      	ldr	r0, [r7, #12]
 8013608:	f7ff fc1a 	bl	8012e40 <clust2sect>
 801360c:	4602      	mov	r2, r0
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	62da      	str	r2, [r3, #44]	; 0x2c
 8013612:	e012      	b.n	801363a <dir_next+0x13c>
						fs->wflag = 1;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2201      	movs	r2, #1
 8013618:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f7ff fb30 	bl	8012c80 <sync_window>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <dir_next+0x12c>
 8013626:	2301      	movs	r3, #1
 8013628:	e02a      	b.n	8013680 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801362a:	693b      	ldr	r3, [r7, #16]
 801362c:	3301      	adds	r3, #1
 801362e:	613b      	str	r3, [r7, #16]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	62da      	str	r2, [r3, #44]	; 0x2c
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	895b      	ldrh	r3, [r3, #10]
 801363e:	461a      	mov	r2, r3
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	4293      	cmp	r3, r2
 8013644:	d3e6      	bcc.n	8013614 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	1ad2      	subs	r2, r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013658:	6979      	ldr	r1, [r7, #20]
 801365a:	68f8      	ldr	r0, [r7, #12]
 801365c:	f7ff fbf0 	bl	8012e40 <clust2sect>
 8013660:	4602      	mov	r2, r0
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013678:	441a      	add	r2, r3
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801367e:	2300      	movs	r3, #0
}
 8013680:	4618      	mov	r0, r3
 8013682:	3718      	adds	r7, #24
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b086      	sub	sp, #24
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013698:	2100      	movs	r1, #0
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7ff feb4 	bl	8013408 <dir_sdi>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d12b      	bne.n	8013702 <dir_alloc+0x7a>
		n = 0;
 80136aa:	2300      	movs	r3, #0
 80136ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	69db      	ldr	r3, [r3, #28]
 80136b2:	4619      	mov	r1, r3
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f7ff fb27 	bl	8012d08 <move_window>
 80136ba:	4603      	mov	r3, r0
 80136bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80136be:	7dfb      	ldrb	r3, [r7, #23]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d11d      	bne.n	8013700 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6a1b      	ldr	r3, [r3, #32]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	2be5      	cmp	r3, #229	; 0xe5
 80136cc:	d004      	beq.n	80136d8 <dir_alloc+0x50>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6a1b      	ldr	r3, [r3, #32]
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d107      	bne.n	80136e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	3301      	adds	r3, #1
 80136dc:	613b      	str	r3, [r7, #16]
 80136de:	693a      	ldr	r2, [r7, #16]
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d102      	bne.n	80136ec <dir_alloc+0x64>
 80136e6:	e00c      	b.n	8013702 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80136e8:	2300      	movs	r3, #0
 80136ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80136ec:	2101      	movs	r1, #1
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7ff ff05 	bl	80134fe <dir_next>
 80136f4:	4603      	mov	r3, r0
 80136f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80136f8:	7dfb      	ldrb	r3, [r7, #23]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d0d7      	beq.n	80136ae <dir_alloc+0x26>
 80136fe:	e000      	b.n	8013702 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013700:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013702:	7dfb      	ldrb	r3, [r7, #23]
 8013704:	2b04      	cmp	r3, #4
 8013706:	d101      	bne.n	801370c <dir_alloc+0x84>
 8013708:	2307      	movs	r3, #7
 801370a:	75fb      	strb	r3, [r7, #23]
	return res;
 801370c:	7dfb      	ldrb	r3, [r7, #23]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3718      	adds	r7, #24
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013716:	b580      	push	{r7, lr}
 8013718:	b084      	sub	sp, #16
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
 801371e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	331a      	adds	r3, #26
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff f83f 	bl	80127a8 <ld_word>
 801372a:	4603      	mov	r3, r0
 801372c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	2b03      	cmp	r3, #3
 8013734:	d109      	bne.n	801374a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	3314      	adds	r3, #20
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff f834 	bl	80127a8 <ld_word>
 8013740:	4603      	mov	r3, r0
 8013742:	041b      	lsls	r3, r3, #16
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	4313      	orrs	r3, r2
 8013748:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801374a:	68fb      	ldr	r3, [r7, #12]
}
 801374c:	4618      	mov	r0, r3
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	60f8      	str	r0, [r7, #12]
 801375c:	60b9      	str	r1, [r7, #8]
 801375e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	331a      	adds	r3, #26
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	b292      	uxth	r2, r2
 8013768:	4611      	mov	r1, r2
 801376a:	4618      	mov	r0, r3
 801376c:	f7ff f857 	bl	801281e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	2b03      	cmp	r3, #3
 8013776:	d109      	bne.n	801378c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	f103 0214 	add.w	r2, r3, #20
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	0c1b      	lsrs	r3, r3, #16
 8013782:	b29b      	uxth	r3, r3
 8013784:	4619      	mov	r1, r3
 8013786:	4610      	mov	r0, r2
 8013788:	f7ff f849 	bl	801281e <st_word>
	}
}
 801378c:	bf00      	nop
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b086      	sub	sp, #24
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801379e:	2304      	movs	r3, #4
 80137a0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80137a8:	e03c      	b.n	8013824 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	69db      	ldr	r3, [r3, #28]
 80137ae:	4619      	mov	r1, r3
 80137b0:	6938      	ldr	r0, [r7, #16]
 80137b2:	f7ff faa9 	bl	8012d08 <move_window>
 80137b6:	4603      	mov	r3, r0
 80137b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80137ba:	7dfb      	ldrb	r3, [r7, #23]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d136      	bne.n	801382e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6a1b      	ldr	r3, [r3, #32]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80137c8:	7bfb      	ldrb	r3, [r7, #15]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d102      	bne.n	80137d4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80137ce:	2304      	movs	r3, #4
 80137d0:	75fb      	strb	r3, [r7, #23]
 80137d2:	e031      	b.n	8013838 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6a1b      	ldr	r3, [r3, #32]
 80137d8:	330b      	adds	r3, #11
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137e0:	73bb      	strb	r3, [r7, #14]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	7bba      	ldrb	r2, [r7, #14]
 80137e6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80137e8:	7bfb      	ldrb	r3, [r7, #15]
 80137ea:	2be5      	cmp	r3, #229	; 0xe5
 80137ec:	d011      	beq.n	8013812 <dir_read+0x7e>
 80137ee:	7bfb      	ldrb	r3, [r7, #15]
 80137f0:	2b2e      	cmp	r3, #46	; 0x2e
 80137f2:	d00e      	beq.n	8013812 <dir_read+0x7e>
 80137f4:	7bbb      	ldrb	r3, [r7, #14]
 80137f6:	2b0f      	cmp	r3, #15
 80137f8:	d00b      	beq.n	8013812 <dir_read+0x7e>
 80137fa:	7bbb      	ldrb	r3, [r7, #14]
 80137fc:	f023 0320 	bic.w	r3, r3, #32
 8013800:	2b08      	cmp	r3, #8
 8013802:	bf0c      	ite	eq
 8013804:	2301      	moveq	r3, #1
 8013806:	2300      	movne	r3, #0
 8013808:	b2db      	uxtb	r3, r3
 801380a:	461a      	mov	r2, r3
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	4293      	cmp	r3, r2
 8013810:	d00f      	beq.n	8013832 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013812:	2100      	movs	r1, #0
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7ff fe72 	bl	80134fe <dir_next>
 801381a:	4603      	mov	r3, r0
 801381c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801381e:	7dfb      	ldrb	r3, [r7, #23]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d108      	bne.n	8013836 <dir_read+0xa2>
	while (dp->sect) {
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	69db      	ldr	r3, [r3, #28]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1be      	bne.n	80137aa <dir_read+0x16>
 801382c:	e004      	b.n	8013838 <dir_read+0xa4>
		if (res != FR_OK) break;
 801382e:	bf00      	nop
 8013830:	e002      	b.n	8013838 <dir_read+0xa4>
				break;
 8013832:	bf00      	nop
 8013834:	e000      	b.n	8013838 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013836:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013838:	7dfb      	ldrb	r3, [r7, #23]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <dir_read+0xb0>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2200      	movs	r2, #0
 8013842:	61da      	str	r2, [r3, #28]
	return res;
 8013844:	7dfb      	ldrb	r3, [r7, #23]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3718      	adds	r7, #24
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801384e:	b580      	push	{r7, lr}
 8013850:	b086      	sub	sp, #24
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801385c:	2100      	movs	r1, #0
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f7ff fdd2 	bl	8013408 <dir_sdi>
 8013864:	4603      	mov	r3, r0
 8013866:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013868:	7dfb      	ldrb	r3, [r7, #23]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d001      	beq.n	8013872 <dir_find+0x24>
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	e03e      	b.n	80138f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	69db      	ldr	r3, [r3, #28]
 8013876:	4619      	mov	r1, r3
 8013878:	6938      	ldr	r0, [r7, #16]
 801387a:	f7ff fa45 	bl	8012d08 <move_window>
 801387e:	4603      	mov	r3, r0
 8013880:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013882:	7dfb      	ldrb	r3, [r7, #23]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d12f      	bne.n	80138e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a1b      	ldr	r3, [r3, #32]
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013890:	7bfb      	ldrb	r3, [r7, #15]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <dir_find+0x4e>
 8013896:	2304      	movs	r3, #4
 8013898:	75fb      	strb	r3, [r7, #23]
 801389a:	e028      	b.n	80138ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6a1b      	ldr	r3, [r3, #32]
 80138a0:	330b      	adds	r3, #11
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6a1b      	ldr	r3, [r3, #32]
 80138b2:	330b      	adds	r3, #11
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	f003 0308 	and.w	r3, r3, #8
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d10a      	bne.n	80138d4 <dir_find+0x86>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6a18      	ldr	r0, [r3, #32]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3324      	adds	r3, #36	; 0x24
 80138c6:	220b      	movs	r2, #11
 80138c8:	4619      	mov	r1, r3
 80138ca:	f7ff f82b 	bl	8012924 <mem_cmp>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00b      	beq.n	80138ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80138d4:	2100      	movs	r1, #0
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f7ff fe11 	bl	80134fe <dir_next>
 80138dc:	4603      	mov	r3, r0
 80138de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d0c5      	beq.n	8013872 <dir_find+0x24>
 80138e6:	e002      	b.n	80138ee <dir_find+0xa0>
		if (res != FR_OK) break;
 80138e8:	bf00      	nop
 80138ea:	e000      	b.n	80138ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80138ec:	bf00      	nop

	return res;
 80138ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3718      	adds	r7, #24
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013906:	2101      	movs	r1, #1
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f7ff febd 	bl	8013688 <dir_alloc>
 801390e:	4603      	mov	r3, r0
 8013910:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013912:	7bfb      	ldrb	r3, [r7, #15]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d11c      	bne.n	8013952 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	69db      	ldr	r3, [r3, #28]
 801391c:	4619      	mov	r1, r3
 801391e:	68b8      	ldr	r0, [r7, #8]
 8013920:	f7ff f9f2 	bl	8012d08 <move_window>
 8013924:	4603      	mov	r3, r0
 8013926:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013928:	7bfb      	ldrb	r3, [r7, #15]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d111      	bne.n	8013952 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a1b      	ldr	r3, [r3, #32]
 8013932:	2220      	movs	r2, #32
 8013934:	2100      	movs	r1, #0
 8013936:	4618      	mov	r0, r3
 8013938:	f7fe ffd9 	bl	80128ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a18      	ldr	r0, [r3, #32]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	3324      	adds	r3, #36	; 0x24
 8013944:	220b      	movs	r2, #11
 8013946:	4619      	mov	r1, r3
 8013948:	f7fe ffb0 	bl	80128ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	2201      	movs	r2, #1
 8013950:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013952:	7bfb      	ldrb	r3, [r7, #15]
}
 8013954:	4618      	mov	r0, r3
 8013956:	3710      	adds	r7, #16
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	69db      	ldr	r3, [r3, #28]
 801396e:	4619      	mov	r1, r3
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7ff f9c9 	bl	8012d08 <move_window>
 8013976:	4603      	mov	r3, r0
 8013978:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801397a:	7afb      	ldrb	r3, [r7, #11]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d106      	bne.n	801398e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a1b      	ldr	r3, [r3, #32]
 8013984:	22e5      	movs	r2, #229	; 0xe5
 8013986:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2201      	movs	r2, #1
 801398c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801398e:	7afb      	ldrb	r3, [r7, #11]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	2200      	movs	r2, #0
 80139a6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	69db      	ldr	r3, [r3, #28]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d04e      	beq.n	8013a4e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80139b0:	2300      	movs	r3, #0
 80139b2:	613b      	str	r3, [r7, #16]
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80139b8:	e021      	b.n	80139fe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6a1a      	ldr	r2, [r3, #32]
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	1c59      	adds	r1, r3, #1
 80139c2:	6179      	str	r1, [r7, #20]
 80139c4:	4413      	add	r3, r2
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80139ca:	7bfb      	ldrb	r3, [r7, #15]
 80139cc:	2b20      	cmp	r3, #32
 80139ce:	d100      	bne.n	80139d2 <get_fileinfo+0x3a>
 80139d0:	e015      	b.n	80139fe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80139d2:	7bfb      	ldrb	r3, [r7, #15]
 80139d4:	2b05      	cmp	r3, #5
 80139d6:	d101      	bne.n	80139dc <get_fileinfo+0x44>
 80139d8:	23e5      	movs	r3, #229	; 0xe5
 80139da:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	2b09      	cmp	r3, #9
 80139e0:	d106      	bne.n	80139f0 <get_fileinfo+0x58>
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	1c5a      	adds	r2, r3, #1
 80139e6:	613a      	str	r2, [r7, #16]
 80139e8:	683a      	ldr	r2, [r7, #0]
 80139ea:	4413      	add	r3, r2
 80139ec:	222e      	movs	r2, #46	; 0x2e
 80139ee:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	1c5a      	adds	r2, r3, #1
 80139f4:	613a      	str	r2, [r7, #16]
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	4413      	add	r3, r2
 80139fa:	7bfa      	ldrb	r2, [r7, #15]
 80139fc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2b0a      	cmp	r3, #10
 8013a02:	d9da      	bls.n	80139ba <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	4413      	add	r3, r2
 8013a0a:	3309      	adds	r3, #9
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6a1b      	ldr	r3, [r3, #32]
 8013a14:	7ada      	ldrb	r2, [r3, #11]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a1b      	ldr	r3, [r3, #32]
 8013a1e:	331c      	adds	r3, #28
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fe fed9 	bl	80127d8 <ld_dword>
 8013a26:	4602      	mov	r2, r0
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6a1b      	ldr	r3, [r3, #32]
 8013a30:	3316      	adds	r3, #22
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fe fed0 	bl	80127d8 <ld_dword>
 8013a38:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	80da      	strh	r2, [r3, #6]
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	0c1b      	lsrs	r3, r3, #16
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	809a      	strh	r2, [r3, #4]
 8013a4c:	e000      	b.n	8013a50 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013a4e:	bf00      	nop
}
 8013a50:	3718      	adds	r7, #24
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
	...

08013a58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b088      	sub	sp, #32
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	60fb      	str	r3, [r7, #12]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3324      	adds	r3, #36	; 0x24
 8013a6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013a6e:	220b      	movs	r2, #11
 8013a70:	2120      	movs	r1, #32
 8013a72:	68b8      	ldr	r0, [r7, #8]
 8013a74:	f7fe ff3b 	bl	80128ee <mem_set>
	si = i = 0; ni = 8;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	613b      	str	r3, [r7, #16]
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	61fb      	str	r3, [r7, #28]
 8013a80:	2308      	movs	r3, #8
 8013a82:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	1c5a      	adds	r2, r3, #1
 8013a88:	61fa      	str	r2, [r7, #28]
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013a92:	7efb      	ldrb	r3, [r7, #27]
 8013a94:	2b20      	cmp	r3, #32
 8013a96:	d94e      	bls.n	8013b36 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013a98:	7efb      	ldrb	r3, [r7, #27]
 8013a9a:	2b2f      	cmp	r3, #47	; 0x2f
 8013a9c:	d006      	beq.n	8013aac <create_name+0x54>
 8013a9e:	7efb      	ldrb	r3, [r7, #27]
 8013aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8013aa2:	d110      	bne.n	8013ac6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013aa4:	e002      	b.n	8013aac <create_name+0x54>
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	61fb      	str	r3, [r7, #28]
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ab6:	d0f6      	beq.n	8013aa6 <create_name+0x4e>
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	4413      	add	r3, r2
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8013ac2:	d0f0      	beq.n	8013aa6 <create_name+0x4e>
			break;
 8013ac4:	e038      	b.n	8013b38 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013ac6:	7efb      	ldrb	r3, [r7, #27]
 8013ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8013aca:	d003      	beq.n	8013ad4 <create_name+0x7c>
 8013acc:	693a      	ldr	r2, [r7, #16]
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d30c      	bcc.n	8013aee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	2b0b      	cmp	r3, #11
 8013ad8:	d002      	beq.n	8013ae0 <create_name+0x88>
 8013ada:	7efb      	ldrb	r3, [r7, #27]
 8013adc:	2b2e      	cmp	r3, #46	; 0x2e
 8013ade:	d001      	beq.n	8013ae4 <create_name+0x8c>
 8013ae0:	2306      	movs	r3, #6
 8013ae2:	e044      	b.n	8013b6e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013ae4:	2308      	movs	r3, #8
 8013ae6:	613b      	str	r3, [r7, #16]
 8013ae8:	230b      	movs	r3, #11
 8013aea:	617b      	str	r3, [r7, #20]
			continue;
 8013aec:	e022      	b.n	8013b34 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013aee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	da04      	bge.n	8013b00 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013af6:	7efb      	ldrb	r3, [r7, #27]
 8013af8:	3b80      	subs	r3, #128	; 0x80
 8013afa:	4a1f      	ldr	r2, [pc, #124]	; (8013b78 <create_name+0x120>)
 8013afc:	5cd3      	ldrb	r3, [r2, r3]
 8013afe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013b00:	7efb      	ldrb	r3, [r7, #27]
 8013b02:	4619      	mov	r1, r3
 8013b04:	481d      	ldr	r0, [pc, #116]	; (8013b7c <create_name+0x124>)
 8013b06:	f7fe ff34 	bl	8012972 <chk_chr>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d001      	beq.n	8013b14 <create_name+0xbc>
 8013b10:	2306      	movs	r3, #6
 8013b12:	e02c      	b.n	8013b6e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013b14:	7efb      	ldrb	r3, [r7, #27]
 8013b16:	2b60      	cmp	r3, #96	; 0x60
 8013b18:	d905      	bls.n	8013b26 <create_name+0xce>
 8013b1a:	7efb      	ldrb	r3, [r7, #27]
 8013b1c:	2b7a      	cmp	r3, #122	; 0x7a
 8013b1e:	d802      	bhi.n	8013b26 <create_name+0xce>
 8013b20:	7efb      	ldrb	r3, [r7, #27]
 8013b22:	3b20      	subs	r3, #32
 8013b24:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	1c5a      	adds	r2, r3, #1
 8013b2a:	613a      	str	r2, [r7, #16]
 8013b2c:	68ba      	ldr	r2, [r7, #8]
 8013b2e:	4413      	add	r3, r2
 8013b30:	7efa      	ldrb	r2, [r7, #27]
 8013b32:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013b34:	e7a6      	b.n	8013a84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013b36:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	441a      	add	r2, r3
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <create_name+0xf4>
 8013b48:	2306      	movs	r3, #6
 8013b4a:	e010      	b.n	8013b6e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2be5      	cmp	r3, #229	; 0xe5
 8013b52:	d102      	bne.n	8013b5a <create_name+0x102>
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	2205      	movs	r2, #5
 8013b58:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b5a:	7efb      	ldrb	r3, [r7, #27]
 8013b5c:	2b20      	cmp	r3, #32
 8013b5e:	d801      	bhi.n	8013b64 <create_name+0x10c>
 8013b60:	2204      	movs	r2, #4
 8013b62:	e000      	b.n	8013b66 <create_name+0x10e>
 8013b64:	2200      	movs	r2, #0
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	330b      	adds	r3, #11
 8013b6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013b6c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3720      	adds	r7, #32
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	08019e8c 	.word	0x08019e8c
 8013b7c:	08019dcc 	.word	0x08019dcc

08013b80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013b94:	e002      	b.n	8013b9c <follow_path+0x1c>
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	603b      	str	r3, [r7, #0]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b2f      	cmp	r3, #47	; 0x2f
 8013ba2:	d0f8      	beq.n	8013b96 <follow_path+0x16>
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	2b5c      	cmp	r3, #92	; 0x5c
 8013baa:	d0f4      	beq.n	8013b96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013bac:	693b      	ldr	r3, [r7, #16]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	2b1f      	cmp	r3, #31
 8013bb8:	d80a      	bhi.n	8013bd0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2280      	movs	r2, #128	; 0x80
 8013bbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff fc1f 	bl	8013408 <dir_sdi>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	75fb      	strb	r3, [r7, #23]
 8013bce:	e043      	b.n	8013c58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013bd0:	463b      	mov	r3, r7
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7ff ff3f 	bl	8013a58 <create_name>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013bde:	7dfb      	ldrb	r3, [r7, #23]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d134      	bne.n	8013c4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f7ff fe32 	bl	801384e <dir_find>
 8013bea:	4603      	mov	r3, r0
 8013bec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013bf4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013bf6:	7dfb      	ldrb	r3, [r7, #23]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d00a      	beq.n	8013c12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
 8013bfe:	2b04      	cmp	r3, #4
 8013c00:	d127      	bne.n	8013c52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013c02:	7afb      	ldrb	r3, [r7, #11]
 8013c04:	f003 0304 	and.w	r3, r3, #4
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d122      	bne.n	8013c52 <follow_path+0xd2>
 8013c0c:	2305      	movs	r3, #5
 8013c0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013c10:	e01f      	b.n	8013c52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c12:	7afb      	ldrb	r3, [r7, #11]
 8013c14:	f003 0304 	and.w	r3, r3, #4
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d11c      	bne.n	8013c56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	799b      	ldrb	r3, [r3, #6]
 8013c20:	f003 0310 	and.w	r3, r3, #16
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d102      	bne.n	8013c2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013c28:	2305      	movs	r3, #5
 8013c2a:	75fb      	strb	r3, [r7, #23]
 8013c2c:	e014      	b.n	8013c58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	695b      	ldr	r3, [r3, #20]
 8013c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c3c:	4413      	add	r3, r2
 8013c3e:	4619      	mov	r1, r3
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f7ff fd68 	bl	8013716 <ld_clust>
 8013c46:	4602      	mov	r2, r0
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013c4c:	e7c0      	b.n	8013bd0 <follow_path+0x50>
			if (res != FR_OK) break;
 8013c4e:	bf00      	nop
 8013c50:	e002      	b.n	8013c58 <follow_path+0xd8>
				break;
 8013c52:	bf00      	nop
 8013c54:	e000      	b.n	8013c58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c56:	bf00      	nop
			}
		}
	}

	return res;
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b087      	sub	sp, #28
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d031      	beq.n	8013cdc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	617b      	str	r3, [r7, #20]
 8013c7e:	e002      	b.n	8013c86 <get_ldnumber+0x24>
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	3301      	adds	r3, #1
 8013c84:	617b      	str	r3, [r7, #20]
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	2b20      	cmp	r3, #32
 8013c8c:	d903      	bls.n	8013c96 <get_ldnumber+0x34>
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b3a      	cmp	r3, #58	; 0x3a
 8013c94:	d1f4      	bne.n	8013c80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	2b3a      	cmp	r3, #58	; 0x3a
 8013c9c:	d11c      	bne.n	8013cd8 <get_ldnumber+0x76>
			tp = *path;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	1c5a      	adds	r2, r3, #1
 8013ca8:	60fa      	str	r2, [r7, #12]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	3b30      	subs	r3, #48	; 0x30
 8013cae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2b09      	cmp	r3, #9
 8013cb4:	d80e      	bhi.n	8013cd4 <get_ldnumber+0x72>
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d10a      	bne.n	8013cd4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d107      	bne.n	8013cd4 <get_ldnumber+0x72>
					vol = (int)i;
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	617b      	str	r3, [r7, #20]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	e002      	b.n	8013cde <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013cd8:	2300      	movs	r3, #0
 8013cda:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013cdc:	693b      	ldr	r3, [r7, #16]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	371c      	adds	r7, #28
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce8:	4770      	bx	lr
	...

08013cec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	70da      	strb	r2, [r3, #3]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8013d02:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013d04:	6839      	ldr	r1, [r7, #0]
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7fe fffe 	bl	8012d08 <move_window>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d001      	beq.n	8013d16 <check_fs+0x2a>
 8013d12:	2304      	movs	r3, #4
 8013d14:	e038      	b.n	8013d88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	3330      	adds	r3, #48	; 0x30
 8013d1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7fe fd42 	bl	80127a8 <ld_word>
 8013d24:	4603      	mov	r3, r0
 8013d26:	461a      	mov	r2, r3
 8013d28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d001      	beq.n	8013d34 <check_fs+0x48>
 8013d30:	2303      	movs	r3, #3
 8013d32:	e029      	b.n	8013d88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d3a:	2be9      	cmp	r3, #233	; 0xe9
 8013d3c:	d009      	beq.n	8013d52 <check_fs+0x66>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d44:	2beb      	cmp	r3, #235	; 0xeb
 8013d46:	d11e      	bne.n	8013d86 <check_fs+0x9a>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013d4e:	2b90      	cmp	r3, #144	; 0x90
 8013d50:	d119      	bne.n	8013d86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	3330      	adds	r3, #48	; 0x30
 8013d56:	3336      	adds	r3, #54	; 0x36
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fe fd3d 	bl	80127d8 <ld_dword>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013d64:	4a0a      	ldr	r2, [pc, #40]	; (8013d90 <check_fs+0xa4>)
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d101      	bne.n	8013d6e <check_fs+0x82>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e00c      	b.n	8013d88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	3330      	adds	r3, #48	; 0x30
 8013d72:	3352      	adds	r3, #82	; 0x52
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fe fd2f 	bl	80127d8 <ld_dword>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	4a05      	ldr	r2, [pc, #20]	; (8013d94 <check_fs+0xa8>)
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d101      	bne.n	8013d86 <check_fs+0x9a>
 8013d82:	2300      	movs	r3, #0
 8013d84:	e000      	b.n	8013d88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013d86:	2302      	movs	r3, #2
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3708      	adds	r7, #8
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	00544146 	.word	0x00544146
 8013d94:	33544146 	.word	0x33544146

08013d98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b096      	sub	sp, #88	; 0x58
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	4613      	mov	r3, r2
 8013da4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2200      	movs	r2, #0
 8013daa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f7ff ff58 	bl	8013c62 <get_ldnumber>
 8013db2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	da01      	bge.n	8013dbe <find_volume+0x26>
 8013dba:	230b      	movs	r3, #11
 8013dbc:	e22d      	b.n	801421a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013dbe:	4aa1      	ldr	r2, [pc, #644]	; (8014044 <find_volume+0x2ac>)
 8013dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d101      	bne.n	8013dd2 <find_volume+0x3a>
 8013dce:	230c      	movs	r3, #12
 8013dd0:	e223      	b.n	801421a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013dd8:	79fb      	ldrb	r3, [r7, #7]
 8013dda:	f023 0301 	bic.w	r3, r3, #1
 8013dde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d01a      	beq.n	8013e1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dea:	785b      	ldrb	r3, [r3, #1]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fe fc3d 	bl	801266c <disk_status>
 8013df2:	4603      	mov	r3, r0
 8013df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013dfc:	f003 0301 	and.w	r3, r3, #1
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d10c      	bne.n	8013e1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013e04:	79fb      	ldrb	r3, [r7, #7]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d007      	beq.n	8013e1a <find_volume+0x82>
 8013e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e0e:	f003 0304 	and.w	r3, r3, #4
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d001      	beq.n	8013e1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013e16:	230a      	movs	r3, #10
 8013e18:	e1ff      	b.n	801421a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	e1fd      	b.n	801421a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e20:	2200      	movs	r2, #0
 8013e22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e26:	b2da      	uxtb	r2, r3
 8013e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2e:	785b      	ldrb	r3, [r3, #1]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fe fc35 	bl	80126a0 <disk_initialize>
 8013e36:	4603      	mov	r3, r0
 8013e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e40:	f003 0301 	and.w	r3, r3, #1
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d001      	beq.n	8013e4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013e48:	2303      	movs	r3, #3
 8013e4a:	e1e6      	b.n	801421a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013e4c:	79fb      	ldrb	r3, [r7, #7]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d007      	beq.n	8013e62 <find_volume+0xca>
 8013e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e56:	f003 0304 	and.w	r3, r3, #4
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d001      	beq.n	8013e62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013e5e:	230a      	movs	r3, #10
 8013e60:	e1db      	b.n	801421a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013e62:	2300      	movs	r3, #0
 8013e64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e6a:	f7ff ff3f 	bl	8013cec <check_fs>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e78:	2b02      	cmp	r3, #2
 8013e7a:	d149      	bne.n	8013f10 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8013e80:	e01e      	b.n	8013ec0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e8a:	011b      	lsls	r3, r3, #4
 8013e8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013e90:	4413      	add	r3, r2
 8013e92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e96:	3304      	adds	r3, #4
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d006      	beq.n	8013eac <find_volume+0x114>
 8013e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe fc98 	bl	80127d8 <ld_dword>
 8013ea8:	4602      	mov	r2, r0
 8013eaa:	e000      	b.n	8013eae <find_volume+0x116>
 8013eac:	2200      	movs	r2, #0
 8013eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eb0:	009b      	lsls	r3, r3, #2
 8013eb2:	3358      	adds	r3, #88	; 0x58
 8013eb4:	443b      	add	r3, r7
 8013eb6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8013ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d9dd      	bls.n	8013e82 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d002      	beq.n	8013ed6 <find_volume+0x13e>
 8013ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ed2:	3b01      	subs	r3, #1
 8013ed4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	3358      	adds	r3, #88	; 0x58
 8013edc:	443b      	add	r3, r7
 8013ede:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013ee2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d005      	beq.n	8013ef6 <find_volume+0x15e>
 8013eea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013eee:	f7ff fefd 	bl	8013cec <check_fs>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	e000      	b.n	8013ef8 <find_volume+0x160>
 8013ef6:	2303      	movs	r3, #3
 8013ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d905      	bls.n	8013f10 <find_volume+0x178>
 8013f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f06:	3301      	adds	r3, #1
 8013f08:	643b      	str	r3, [r7, #64]	; 0x40
 8013f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d9e2      	bls.n	8013ed6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f14:	2b04      	cmp	r3, #4
 8013f16:	d101      	bne.n	8013f1c <find_volume+0x184>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e17e      	b.n	801421a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d901      	bls.n	8013f28 <find_volume+0x190>
 8013f24:	230d      	movs	r3, #13
 8013f26:	e178      	b.n	801421a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2a:	3330      	adds	r3, #48	; 0x30
 8013f2c:	330b      	adds	r3, #11
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fe fc3a 	bl	80127a8 <ld_word>
 8013f34:	4603      	mov	r3, r0
 8013f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f3a:	d001      	beq.n	8013f40 <find_volume+0x1a8>
 8013f3c:	230d      	movs	r3, #13
 8013f3e:	e16c      	b.n	801421a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f42:	3330      	adds	r3, #48	; 0x30
 8013f44:	3316      	adds	r3, #22
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fe fc2e 	bl	80127a8 <ld_word>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <find_volume+0x1cc>
 8013f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f58:	3330      	adds	r3, #48	; 0x30
 8013f5a:	3324      	adds	r3, #36	; 0x24
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe fc3b 	bl	80127d8 <ld_dword>
 8013f62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f68:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f76:	789b      	ldrb	r3, [r3, #2]
 8013f78:	2b01      	cmp	r3, #1
 8013f7a:	d005      	beq.n	8013f88 <find_volume+0x1f0>
 8013f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7e:	789b      	ldrb	r3, [r3, #2]
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d001      	beq.n	8013f88 <find_volume+0x1f0>
 8013f84:	230d      	movs	r3, #13
 8013f86:	e148      	b.n	801421a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8a:	789b      	ldrb	r3, [r3, #2]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f90:	fb02 f303 	mul.w	r3, r2, r3
 8013f94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa4:	895b      	ldrh	r3, [r3, #10]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d008      	beq.n	8013fbc <find_volume+0x224>
 8013faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fac:	895b      	ldrh	r3, [r3, #10]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb2:	895b      	ldrh	r3, [r3, #10]
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	4013      	ands	r3, r2
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d001      	beq.n	8013fc0 <find_volume+0x228>
 8013fbc:	230d      	movs	r3, #13
 8013fbe:	e12c      	b.n	801421a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc2:	3330      	adds	r3, #48	; 0x30
 8013fc4:	3311      	adds	r3, #17
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fe fbee 	bl	80127a8 <ld_word>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	461a      	mov	r2, r3
 8013fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd6:	891b      	ldrh	r3, [r3, #8]
 8013fd8:	f003 030f 	and.w	r3, r3, #15
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d001      	beq.n	8013fe6 <find_volume+0x24e>
 8013fe2:	230d      	movs	r3, #13
 8013fe4:	e119      	b.n	801421a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe8:	3330      	adds	r3, #48	; 0x30
 8013fea:	3313      	adds	r3, #19
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7fe fbdb 	bl	80127a8 <ld_word>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d106      	bne.n	801400a <find_volume+0x272>
 8013ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffe:	3330      	adds	r3, #48	; 0x30
 8014000:	3320      	adds	r3, #32
 8014002:	4618      	mov	r0, r3
 8014004:	f7fe fbe8 	bl	80127d8 <ld_dword>
 8014008:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400c:	3330      	adds	r3, #48	; 0x30
 801400e:	330e      	adds	r3, #14
 8014010:	4618      	mov	r0, r3
 8014012:	f7fe fbc9 	bl	80127a8 <ld_word>
 8014016:	4603      	mov	r3, r0
 8014018:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801401a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801401c:	2b00      	cmp	r3, #0
 801401e:	d101      	bne.n	8014024 <find_volume+0x28c>
 8014020:	230d      	movs	r3, #13
 8014022:	e0fa      	b.n	801421a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014024:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014028:	4413      	add	r3, r2
 801402a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801402c:	8912      	ldrh	r2, [r2, #8]
 801402e:	0912      	lsrs	r2, r2, #4
 8014030:	b292      	uxth	r2, r2
 8014032:	4413      	add	r3, r2
 8014034:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403a:	429a      	cmp	r2, r3
 801403c:	d204      	bcs.n	8014048 <find_volume+0x2b0>
 801403e:	230d      	movs	r3, #13
 8014040:	e0eb      	b.n	801421a <find_volume+0x482>
 8014042:	bf00      	nop
 8014044:	20000f68 	.word	0x20000f68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014050:	8952      	ldrh	r2, [r2, #10]
 8014052:	fbb3 f3f2 	udiv	r3, r3, r2
 8014056:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	2b00      	cmp	r3, #0
 801405c:	d101      	bne.n	8014062 <find_volume+0x2ca>
 801405e:	230d      	movs	r3, #13
 8014060:	e0db      	b.n	801421a <find_volume+0x482>
		fmt = FS_FAT32;
 8014062:	2303      	movs	r3, #3
 8014064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801406e:	4293      	cmp	r3, r2
 8014070:	d802      	bhi.n	8014078 <find_volume+0x2e0>
 8014072:	2302      	movs	r3, #2
 8014074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801407e:	4293      	cmp	r3, r2
 8014080:	d802      	bhi.n	8014088 <find_volume+0x2f0>
 8014082:	2301      	movs	r3, #1
 8014084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408a:	1c9a      	adds	r2, r3, #2
 801408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014094:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014096:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801409a:	441a      	add	r2, r3
 801409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80140a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a4:	441a      	add	r2, r3
 80140a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80140aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140ae:	2b03      	cmp	r3, #3
 80140b0:	d11e      	bne.n	80140f0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80140b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b4:	3330      	adds	r3, #48	; 0x30
 80140b6:	332a      	adds	r3, #42	; 0x2a
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7fe fb75 	bl	80127a8 <ld_word>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d001      	beq.n	80140c8 <find_volume+0x330>
 80140c4:	230d      	movs	r3, #13
 80140c6:	e0a8      	b.n	801421a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80140c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ca:	891b      	ldrh	r3, [r3, #8]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <find_volume+0x33c>
 80140d0:	230d      	movs	r3, #13
 80140d2:	e0a2      	b.n	801421a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d6:	3330      	adds	r3, #48	; 0x30
 80140d8:	332c      	adds	r3, #44	; 0x2c
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fe fb7c 	bl	80127d8 <ld_dword>
 80140e0:	4602      	mov	r2, r0
 80140e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80140e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e8:	695b      	ldr	r3, [r3, #20]
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	647b      	str	r3, [r7, #68]	; 0x44
 80140ee:	e01f      	b.n	8014130 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80140f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f2:	891b      	ldrh	r3, [r3, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d101      	bne.n	80140fc <find_volume+0x364>
 80140f8:	230d      	movs	r3, #13
 80140fa:	e08e      	b.n	801421a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80140fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fe:	6a1a      	ldr	r2, [r3, #32]
 8014100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014102:	441a      	add	r2, r3
 8014104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014106:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801410c:	2b02      	cmp	r3, #2
 801410e:	d103      	bne.n	8014118 <find_volume+0x380>
 8014110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014112:	695b      	ldr	r3, [r3, #20]
 8014114:	005b      	lsls	r3, r3, #1
 8014116:	e00a      	b.n	801412e <find_volume+0x396>
 8014118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411a:	695a      	ldr	r2, [r3, #20]
 801411c:	4613      	mov	r3, r2
 801411e:	005b      	lsls	r3, r3, #1
 8014120:	4413      	add	r3, r2
 8014122:	085a      	lsrs	r2, r3, #1
 8014124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014126:	695b      	ldr	r3, [r3, #20]
 8014128:	f003 0301 	and.w	r3, r3, #1
 801412c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801412e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014132:	699a      	ldr	r2, [r3, #24]
 8014134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014136:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801413a:	0a5b      	lsrs	r3, r3, #9
 801413c:	429a      	cmp	r2, r3
 801413e:	d201      	bcs.n	8014144 <find_volume+0x3ac>
 8014140:	230d      	movs	r3, #13
 8014142:	e06a      	b.n	801421a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	f04f 32ff 	mov.w	r2, #4294967295
 801414a:	611a      	str	r2, [r3, #16]
 801414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414e:	691a      	ldr	r2, [r3, #16]
 8014150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014152:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014156:	2280      	movs	r2, #128	; 0x80
 8014158:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801415a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801415e:	2b03      	cmp	r3, #3
 8014160:	d149      	bne.n	80141f6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014164:	3330      	adds	r3, #48	; 0x30
 8014166:	3330      	adds	r3, #48	; 0x30
 8014168:	4618      	mov	r0, r3
 801416a:	f7fe fb1d 	bl	80127a8 <ld_word>
 801416e:	4603      	mov	r3, r0
 8014170:	2b01      	cmp	r3, #1
 8014172:	d140      	bne.n	80141f6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014176:	3301      	adds	r3, #1
 8014178:	4619      	mov	r1, r3
 801417a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801417c:	f7fe fdc4 	bl	8012d08 <move_window>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d137      	bne.n	80141f6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014188:	2200      	movs	r2, #0
 801418a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418e:	3330      	adds	r3, #48	; 0x30
 8014190:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe fb07 	bl	80127a8 <ld_word>
 801419a:	4603      	mov	r3, r0
 801419c:	461a      	mov	r2, r3
 801419e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d127      	bne.n	80141f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80141a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a8:	3330      	adds	r3, #48	; 0x30
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fe fb14 	bl	80127d8 <ld_dword>
 80141b0:	4603      	mov	r3, r0
 80141b2:	4a1c      	ldr	r2, [pc, #112]	; (8014224 <find_volume+0x48c>)
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d11e      	bne.n	80141f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80141b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ba:	3330      	adds	r3, #48	; 0x30
 80141bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fe fb09 	bl	80127d8 <ld_dword>
 80141c6:	4603      	mov	r3, r0
 80141c8:	4a17      	ldr	r2, [pc, #92]	; (8014228 <find_volume+0x490>)
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d113      	bne.n	80141f6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80141ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d0:	3330      	adds	r3, #48	; 0x30
 80141d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fe fafe 	bl	80127d8 <ld_dword>
 80141dc:	4602      	mov	r2, r0
 80141de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80141e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e4:	3330      	adds	r3, #48	; 0x30
 80141e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7fe faf4 	bl	80127d8 <ld_dword>
 80141f0:	4602      	mov	r2, r0
 80141f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80141f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80141fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80141fe:	4b0b      	ldr	r3, [pc, #44]	; (801422c <find_volume+0x494>)
 8014200:	881b      	ldrh	r3, [r3, #0]
 8014202:	3301      	adds	r3, #1
 8014204:	b29a      	uxth	r2, r3
 8014206:	4b09      	ldr	r3, [pc, #36]	; (801422c <find_volume+0x494>)
 8014208:	801a      	strh	r2, [r3, #0]
 801420a:	4b08      	ldr	r3, [pc, #32]	; (801422c <find_volume+0x494>)
 801420c:	881a      	ldrh	r2, [r3, #0]
 801420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014210:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014212:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014214:	f7fe fd10 	bl	8012c38 <clear_lock>
#endif
	return FR_OK;
 8014218:	2300      	movs	r3, #0
}
 801421a:	4618      	mov	r0, r3
 801421c:	3758      	adds	r7, #88	; 0x58
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	41615252 	.word	0x41615252
 8014228:	61417272 	.word	0x61417272
 801422c:	20000f6c 	.word	0x20000f6c

08014230 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801423a:	2309      	movs	r3, #9
 801423c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d01c      	beq.n	801427e <validate+0x4e>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d018      	beq.n	801427e <validate+0x4e>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d013      	beq.n	801427e <validate+0x4e>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	889a      	ldrh	r2, [r3, #4]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	88db      	ldrh	r3, [r3, #6]
 8014260:	429a      	cmp	r2, r3
 8014262:	d10c      	bne.n	801427e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	785b      	ldrb	r3, [r3, #1]
 801426a:	4618      	mov	r0, r3
 801426c:	f7fe f9fe 	bl	801266c <disk_status>
 8014270:	4603      	mov	r3, r0
 8014272:	f003 0301 	and.w	r3, r3, #1
 8014276:	2b00      	cmp	r3, #0
 8014278:	d101      	bne.n	801427e <validate+0x4e>
			res = FR_OK;
 801427a:	2300      	movs	r3, #0
 801427c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801427e:	7bfb      	ldrb	r3, [r7, #15]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d102      	bne.n	801428a <validate+0x5a>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	e000      	b.n	801428c <validate+0x5c>
 801428a:	2300      	movs	r3, #0
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	6013      	str	r3, [r2, #0]
	return res;
 8014290:	7bfb      	ldrb	r3, [r7, #15]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
	...

0801429c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b088      	sub	sp, #32
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	60f8      	str	r0, [r7, #12]
 80142a4:	60b9      	str	r1, [r7, #8]
 80142a6:	4613      	mov	r3, r2
 80142a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80142ae:	f107 0310 	add.w	r3, r7, #16
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff fcd5 	bl	8013c62 <get_ldnumber>
 80142b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	da01      	bge.n	80142c4 <f_mount+0x28>
 80142c0:	230b      	movs	r3, #11
 80142c2:	e02b      	b.n	801431c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80142c4:	4a17      	ldr	r2, [pc, #92]	; (8014324 <f_mount+0x88>)
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d005      	beq.n	80142e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80142d4:	69b8      	ldr	r0, [r7, #24]
 80142d6:	f7fe fcaf 	bl	8012c38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	2200      	movs	r2, #0
 80142de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d002      	beq.n	80142ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2200      	movs	r2, #0
 80142ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	490d      	ldr	r1, [pc, #52]	; (8014324 <f_mount+0x88>)
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d002      	beq.n	8014302 <f_mount+0x66>
 80142fc:	79fb      	ldrb	r3, [r7, #7]
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d001      	beq.n	8014306 <f_mount+0x6a>
 8014302:	2300      	movs	r3, #0
 8014304:	e00a      	b.n	801431c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014306:	f107 010c 	add.w	r1, r7, #12
 801430a:	f107 0308 	add.w	r3, r7, #8
 801430e:	2200      	movs	r2, #0
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fd41 	bl	8013d98 <find_volume>
 8014316:	4603      	mov	r3, r0
 8014318:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801431a:	7dfb      	ldrb	r3, [r7, #23]
}
 801431c:	4618      	mov	r0, r3
 801431e:	3720      	adds	r7, #32
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20000f68 	.word	0x20000f68

08014328 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b098      	sub	sp, #96	; 0x60
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	4613      	mov	r3, r2
 8014334:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d101      	bne.n	8014340 <f_open+0x18>
 801433c:	2309      	movs	r3, #9
 801433e:	e1ad      	b.n	801469c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014346:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014348:	79fa      	ldrb	r2, [r7, #7]
 801434a:	f107 0110 	add.w	r1, r7, #16
 801434e:	f107 0308 	add.w	r3, r7, #8
 8014352:	4618      	mov	r0, r3
 8014354:	f7ff fd20 	bl	8013d98 <find_volume>
 8014358:	4603      	mov	r3, r0
 801435a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801435e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014362:	2b00      	cmp	r3, #0
 8014364:	f040 8191 	bne.w	801468a <f_open+0x362>
		dj.obj.fs = fs;
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801436c:	68ba      	ldr	r2, [r7, #8]
 801436e:	f107 0314 	add.w	r3, r7, #20
 8014372:	4611      	mov	r1, r2
 8014374:	4618      	mov	r0, r3
 8014376:	f7ff fc03 	bl	8013b80 <follow_path>
 801437a:	4603      	mov	r3, r0
 801437c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014384:	2b00      	cmp	r3, #0
 8014386:	d11a      	bne.n	80143be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801438c:	b25b      	sxtb	r3, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	da03      	bge.n	801439a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014392:	2306      	movs	r3, #6
 8014394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014398:	e011      	b.n	80143be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801439a:	79fb      	ldrb	r3, [r7, #7]
 801439c:	f023 0301 	bic.w	r3, r3, #1
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	bf14      	ite	ne
 80143a4:	2301      	movne	r3, #1
 80143a6:	2300      	moveq	r3, #0
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	461a      	mov	r2, r3
 80143ac:	f107 0314 	add.w	r3, r7, #20
 80143b0:	4611      	mov	r1, r2
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7fe faf8 	bl	80129a8 <chk_lock>
 80143b8:	4603      	mov	r3, r0
 80143ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80143be:	79fb      	ldrb	r3, [r7, #7]
 80143c0:	f003 031c 	and.w	r3, r3, #28
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d07f      	beq.n	80144c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80143c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d017      	beq.n	8014400 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80143d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143d4:	2b04      	cmp	r3, #4
 80143d6:	d10e      	bne.n	80143f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80143d8:	f7fe fb42 	bl	8012a60 <enq_lock>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d006      	beq.n	80143f0 <f_open+0xc8>
 80143e2:	f107 0314 	add.w	r3, r7, #20
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7ff fa86 	bl	80138f8 <dir_register>
 80143ec:	4603      	mov	r3, r0
 80143ee:	e000      	b.n	80143f2 <f_open+0xca>
 80143f0:	2312      	movs	r3, #18
 80143f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	f043 0308 	orr.w	r3, r3, #8
 80143fc:	71fb      	strb	r3, [r7, #7]
 80143fe:	e010      	b.n	8014422 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014400:	7ebb      	ldrb	r3, [r7, #26]
 8014402:	f003 0311 	and.w	r3, r3, #17
 8014406:	2b00      	cmp	r3, #0
 8014408:	d003      	beq.n	8014412 <f_open+0xea>
					res = FR_DENIED;
 801440a:	2307      	movs	r3, #7
 801440c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014410:	e007      	b.n	8014422 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014412:	79fb      	ldrb	r3, [r7, #7]
 8014414:	f003 0304 	and.w	r3, r3, #4
 8014418:	2b00      	cmp	r3, #0
 801441a:	d002      	beq.n	8014422 <f_open+0xfa>
 801441c:	2308      	movs	r3, #8
 801441e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014426:	2b00      	cmp	r3, #0
 8014428:	d168      	bne.n	80144fc <f_open+0x1d4>
 801442a:	79fb      	ldrb	r3, [r7, #7]
 801442c:	f003 0308 	and.w	r3, r3, #8
 8014430:	2b00      	cmp	r3, #0
 8014432:	d063      	beq.n	80144fc <f_open+0x1d4>
				dw = GET_FATTIME();
 8014434:	f7f9 ff20 	bl	800e278 <get_fattime>
 8014438:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801443c:	330e      	adds	r3, #14
 801443e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014440:	4618      	mov	r0, r3
 8014442:	f7fe fa07 	bl	8012854 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014448:	3316      	adds	r3, #22
 801444a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801444c:	4618      	mov	r0, r3
 801444e:	f7fe fa01 	bl	8012854 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014454:	330b      	adds	r3, #11
 8014456:	2220      	movs	r2, #32
 8014458:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f7ff f958 	bl	8013716 <ld_clust>
 8014466:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801446c:	2200      	movs	r2, #0
 801446e:	4618      	mov	r0, r3
 8014470:	f7ff f970 	bl	8013754 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014476:	331c      	adds	r3, #28
 8014478:	2100      	movs	r1, #0
 801447a:	4618      	mov	r0, r3
 801447c:	f7fe f9ea 	bl	8012854 <st_dword>
					fs->wflag = 1;
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	2201      	movs	r2, #1
 8014484:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014488:	2b00      	cmp	r3, #0
 801448a:	d037      	beq.n	80144fc <f_open+0x1d4>
						dw = fs->winsect;
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014490:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014492:	f107 0314 	add.w	r3, r7, #20
 8014496:	2200      	movs	r2, #0
 8014498:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe fe83 	bl	80131a6 <remove_chain>
 80144a0:	4603      	mov	r3, r0
 80144a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80144a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d126      	bne.n	80144fc <f_open+0x1d4>
							res = move_window(fs, dw);
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fe fc28 	bl	8012d08 <move_window>
 80144b8:	4603      	mov	r3, r0
 80144ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80144c2:	3a01      	subs	r2, #1
 80144c4:	60da      	str	r2, [r3, #12]
 80144c6:	e019      	b.n	80144fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80144c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d115      	bne.n	80144fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80144d0:	7ebb      	ldrb	r3, [r7, #26]
 80144d2:	f003 0310 	and.w	r3, r3, #16
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d003      	beq.n	80144e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80144da:	2304      	movs	r3, #4
 80144dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80144e0:	e00c      	b.n	80144fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80144e2:	79fb      	ldrb	r3, [r7, #7]
 80144e4:	f003 0302 	and.w	r3, r3, #2
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d007      	beq.n	80144fc <f_open+0x1d4>
 80144ec:	7ebb      	ldrb	r3, [r7, #26]
 80144ee:	f003 0301 	and.w	r3, r3, #1
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d002      	beq.n	80144fc <f_open+0x1d4>
						res = FR_DENIED;
 80144f6:	2307      	movs	r3, #7
 80144f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80144fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014500:	2b00      	cmp	r3, #0
 8014502:	d128      	bne.n	8014556 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014504:	79fb      	ldrb	r3, [r7, #7]
 8014506:	f003 0308 	and.w	r3, r3, #8
 801450a:	2b00      	cmp	r3, #0
 801450c:	d003      	beq.n	8014516 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801450e:	79fb      	ldrb	r3, [r7, #7]
 8014510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014514:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801451e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014524:	79fb      	ldrb	r3, [r7, #7]
 8014526:	f023 0301 	bic.w	r3, r3, #1
 801452a:	2b00      	cmp	r3, #0
 801452c:	bf14      	ite	ne
 801452e:	2301      	movne	r3, #1
 8014530:	2300      	moveq	r3, #0
 8014532:	b2db      	uxtb	r3, r3
 8014534:	461a      	mov	r2, r3
 8014536:	f107 0314 	add.w	r3, r7, #20
 801453a:	4611      	mov	r1, r2
 801453c:	4618      	mov	r0, r3
 801453e:	f7fe fab1 	bl	8012aa4 <inc_lock>
 8014542:	4602      	mov	r2, r0
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	691b      	ldr	r3, [r3, #16]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d102      	bne.n	8014556 <f_open+0x22e>
 8014550:	2302      	movs	r3, #2
 8014552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801455a:	2b00      	cmp	r3, #0
 801455c:	f040 8095 	bne.w	801468a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014564:	4611      	mov	r1, r2
 8014566:	4618      	mov	r0, r3
 8014568:	f7ff f8d5 	bl	8013716 <ld_clust>
 801456c:	4602      	mov	r2, r0
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014574:	331c      	adds	r3, #28
 8014576:	4618      	mov	r0, r3
 8014578:	f7fe f92e 	bl	80127d8 <ld_dword>
 801457c:	4602      	mov	r2, r0
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	2200      	movs	r2, #0
 8014586:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014588:	693a      	ldr	r2, [r7, #16]
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	88da      	ldrh	r2, [r3, #6]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	79fa      	ldrb	r2, [r7, #7]
 801459a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2200      	movs	r2, #0
 80145a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	3330      	adds	r3, #48	; 0x30
 80145b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80145b6:	2100      	movs	r1, #0
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fe f998 	bl	80128ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80145be:	79fb      	ldrb	r3, [r7, #7]
 80145c0:	f003 0320 	and.w	r3, r3, #32
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d060      	beq.n	801468a <f_open+0x362>
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d05c      	beq.n	801468a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	68da      	ldr	r2, [r3, #12]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	895b      	ldrh	r3, [r3, #10]
 80145dc:	025b      	lsls	r3, r3, #9
 80145de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	689b      	ldr	r3, [r3, #8]
 80145e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	657b      	str	r3, [r7, #84]	; 0x54
 80145ec:	e016      	b.n	801461c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7fe fc43 	bl	8012e7e <get_fat>
 80145f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80145fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d802      	bhi.n	8014606 <f_open+0x2de>
 8014600:	2302      	movs	r3, #2
 8014602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801460c:	d102      	bne.n	8014614 <f_open+0x2ec>
 801460e:	2301      	movs	r3, #1
 8014610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014614:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014618:	1ad3      	subs	r3, r2, r3
 801461a:	657b      	str	r3, [r7, #84]	; 0x54
 801461c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014620:	2b00      	cmp	r3, #0
 8014622:	d103      	bne.n	801462c <f_open+0x304>
 8014624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014628:	429a      	cmp	r2, r3
 801462a:	d8e0      	bhi.n	80145ee <f_open+0x2c6>
				}
				fp->clust = clst;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014630:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014636:	2b00      	cmp	r3, #0
 8014638:	d127      	bne.n	801468a <f_open+0x362>
 801463a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014640:	2b00      	cmp	r3, #0
 8014642:	d022      	beq.n	801468a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014648:	4618      	mov	r0, r3
 801464a:	f7fe fbf9 	bl	8012e40 <clust2sect>
 801464e:	6478      	str	r0, [r7, #68]	; 0x44
 8014650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <f_open+0x336>
						res = FR_INT_ERR;
 8014656:	2302      	movs	r3, #2
 8014658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801465c:	e015      	b.n	801468a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801465e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014660:	0a5a      	lsrs	r2, r3, #9
 8014662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014664:	441a      	add	r2, r3
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	7858      	ldrb	r0, [r3, #1]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	6a1a      	ldr	r2, [r3, #32]
 8014678:	2301      	movs	r3, #1
 801467a:	f7fe f837 	bl	80126ec <disk_read>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d002      	beq.n	801468a <f_open+0x362>
 8014684:	2301      	movs	r3, #1
 8014686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801468a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801468e:	2b00      	cmp	r3, #0
 8014690:	d002      	beq.n	8014698 <f_open+0x370>
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2200      	movs	r2, #0
 8014696:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801469c:	4618      	mov	r0, r3
 801469e:	3760      	adds	r7, #96	; 0x60
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08e      	sub	sp, #56	; 0x38
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	607a      	str	r2, [r7, #4]
 80146b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	f107 0214 	add.w	r2, r7, #20
 80146c2:	4611      	mov	r1, r2
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7ff fdb3 	bl	8014230 <validate>
 80146ca:	4603      	mov	r3, r0
 80146cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80146d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d107      	bne.n	80146e8 <f_read+0x44>
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	7d5b      	ldrb	r3, [r3, #21]
 80146dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80146e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <f_read+0x4a>
 80146e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146ec:	e115      	b.n	801491a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	7d1b      	ldrb	r3, [r3, #20]
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d101      	bne.n	80146fe <f_read+0x5a>
 80146fa:	2307      	movs	r3, #7
 80146fc:	e10d      	b.n	801491a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	68da      	ldr	r2, [r3, #12]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	699b      	ldr	r3, [r3, #24]
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	6a3b      	ldr	r3, [r7, #32]
 801470e:	429a      	cmp	r2, r3
 8014710:	f240 80fe 	bls.w	8014910 <f_read+0x26c>
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014718:	e0fa      	b.n	8014910 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	699b      	ldr	r3, [r3, #24]
 801471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014722:	2b00      	cmp	r3, #0
 8014724:	f040 80c6 	bne.w	80148b4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	699b      	ldr	r3, [r3, #24]
 801472c:	0a5b      	lsrs	r3, r3, #9
 801472e:	697a      	ldr	r2, [r7, #20]
 8014730:	8952      	ldrh	r2, [r2, #10]
 8014732:	3a01      	subs	r2, #1
 8014734:	4013      	ands	r3, r2
 8014736:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014738:	69fb      	ldr	r3, [r7, #28]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d12f      	bne.n	801479e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	699b      	ldr	r3, [r3, #24]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d103      	bne.n	801474e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	633b      	str	r3, [r7, #48]	; 0x30
 801474c:	e013      	b.n	8014776 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014752:	2b00      	cmp	r3, #0
 8014754:	d007      	beq.n	8014766 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	699b      	ldr	r3, [r3, #24]
 801475a:	4619      	mov	r1, r3
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	f7fe fe1f 	bl	80133a0 <clmt_clust>
 8014762:	6338      	str	r0, [r7, #48]	; 0x30
 8014764:	e007      	b.n	8014776 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014766:	68fa      	ldr	r2, [r7, #12]
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	69db      	ldr	r3, [r3, #28]
 801476c:	4619      	mov	r1, r3
 801476e:	4610      	mov	r0, r2
 8014770:	f7fe fb85 	bl	8012e7e <get_fat>
 8014774:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014778:	2b01      	cmp	r3, #1
 801477a:	d804      	bhi.n	8014786 <f_read+0xe2>
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2202      	movs	r2, #2
 8014780:	755a      	strb	r2, [r3, #21]
 8014782:	2302      	movs	r3, #2
 8014784:	e0c9      	b.n	801491a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801478c:	d104      	bne.n	8014798 <f_read+0xf4>
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2201      	movs	r2, #1
 8014792:	755a      	strb	r2, [r3, #21]
 8014794:	2301      	movs	r3, #1
 8014796:	e0c0      	b.n	801491a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801479c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801479e:	697a      	ldr	r2, [r7, #20]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	69db      	ldr	r3, [r3, #28]
 80147a4:	4619      	mov	r1, r3
 80147a6:	4610      	mov	r0, r2
 80147a8:	f7fe fb4a 	bl	8012e40 <clust2sect>
 80147ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d104      	bne.n	80147be <f_read+0x11a>
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2202      	movs	r2, #2
 80147b8:	755a      	strb	r2, [r3, #21]
 80147ba:	2302      	movs	r3, #2
 80147bc:	e0ad      	b.n	801491a <f_read+0x276>
			sect += csect;
 80147be:	69ba      	ldr	r2, [r7, #24]
 80147c0:	69fb      	ldr	r3, [r7, #28]
 80147c2:	4413      	add	r3, r2
 80147c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	0a5b      	lsrs	r3, r3, #9
 80147ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80147cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d039      	beq.n	8014846 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80147d2:	69fa      	ldr	r2, [r7, #28]
 80147d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d6:	4413      	add	r3, r2
 80147d8:	697a      	ldr	r2, [r7, #20]
 80147da:	8952      	ldrh	r2, [r2, #10]
 80147dc:	4293      	cmp	r3, r2
 80147de:	d905      	bls.n	80147ec <f_read+0x148>
					cc = fs->csize - csect;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	895b      	ldrh	r3, [r3, #10]
 80147e4:	461a      	mov	r2, r3
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	1ad3      	subs	r3, r2, r3
 80147ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	7858      	ldrb	r0, [r3, #1]
 80147f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f2:	69ba      	ldr	r2, [r7, #24]
 80147f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80147f6:	f7fd ff79 	bl	80126ec <disk_read>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d004      	beq.n	801480a <f_read+0x166>
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2201      	movs	r2, #1
 8014804:	755a      	strb	r2, [r3, #21]
 8014806:	2301      	movs	r3, #1
 8014808:	e087      	b.n	801491a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	7d1b      	ldrb	r3, [r3, #20]
 801480e:	b25b      	sxtb	r3, r3
 8014810:	2b00      	cmp	r3, #0
 8014812:	da14      	bge.n	801483e <f_read+0x19a>
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	6a1a      	ldr	r2, [r3, #32]
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801481e:	429a      	cmp	r2, r3
 8014820:	d90d      	bls.n	801483e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	6a1a      	ldr	r2, [r3, #32]
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	025b      	lsls	r3, r3, #9
 801482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801482e:	18d0      	adds	r0, r2, r3
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	3330      	adds	r3, #48	; 0x30
 8014834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014838:	4619      	mov	r1, r3
 801483a:	f7fe f837 	bl	80128ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014840:	025b      	lsls	r3, r3, #9
 8014842:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014844:	e050      	b.n	80148e8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6a1b      	ldr	r3, [r3, #32]
 801484a:	69ba      	ldr	r2, [r7, #24]
 801484c:	429a      	cmp	r2, r3
 801484e:	d02e      	beq.n	80148ae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	7d1b      	ldrb	r3, [r3, #20]
 8014854:	b25b      	sxtb	r3, r3
 8014856:	2b00      	cmp	r3, #0
 8014858:	da18      	bge.n	801488c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	7858      	ldrb	r0, [r3, #1]
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6a1a      	ldr	r2, [r3, #32]
 8014868:	2301      	movs	r3, #1
 801486a:	f7fd ff5f 	bl	801272c <disk_write>
 801486e:	4603      	mov	r3, r0
 8014870:	2b00      	cmp	r3, #0
 8014872:	d004      	beq.n	801487e <f_read+0x1da>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2201      	movs	r2, #1
 8014878:	755a      	strb	r2, [r3, #21]
 801487a:	2301      	movs	r3, #1
 801487c:	e04d      	b.n	801491a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	7d1b      	ldrb	r3, [r3, #20]
 8014882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014886:	b2da      	uxtb	r2, r3
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	7858      	ldrb	r0, [r3, #1]
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014896:	2301      	movs	r3, #1
 8014898:	69ba      	ldr	r2, [r7, #24]
 801489a:	f7fd ff27 	bl	80126ec <disk_read>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d004      	beq.n	80148ae <f_read+0x20a>
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2201      	movs	r2, #1
 80148a8:	755a      	strb	r2, [r3, #21]
 80148aa:	2301      	movs	r3, #1
 80148ac:	e035      	b.n	801491a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	69ba      	ldr	r2, [r7, #24]
 80148b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	699b      	ldr	r3, [r3, #24]
 80148b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80148c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80148c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d901      	bls.n	80148ce <f_read+0x22a>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	699b      	ldr	r3, [r3, #24]
 80148d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148dc:	4413      	add	r3, r2
 80148de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148e0:	4619      	mov	r1, r3
 80148e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148e4:	f7fd ffe2 	bl	80128ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80148e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ec:	4413      	add	r3, r2
 80148ee:	627b      	str	r3, [r7, #36]	; 0x24
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	699a      	ldr	r2, [r3, #24]
 80148f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f6:	441a      	add	r2, r3
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	619a      	str	r2, [r3, #24]
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014902:	441a      	add	r2, r3
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	687a      	ldr	r2, [r7, #4]
 801490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490c:	1ad3      	subs	r3, r2, r3
 801490e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f47f af01 	bne.w	801471a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014918:	2300      	movs	r3, #0
}
 801491a:	4618      	mov	r0, r3
 801491c:	3738      	adds	r7, #56	; 0x38
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014922:	b580      	push	{r7, lr}
 8014924:	b08c      	sub	sp, #48	; 0x30
 8014926:	af00      	add	r7, sp, #0
 8014928:	60f8      	str	r0, [r7, #12]
 801492a:	60b9      	str	r1, [r7, #8]
 801492c:	607a      	str	r2, [r7, #4]
 801492e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	2200      	movs	r2, #0
 8014938:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f107 0210 	add.w	r2, r7, #16
 8014940:	4611      	mov	r1, r2
 8014942:	4618      	mov	r0, r3
 8014944:	f7ff fc74 	bl	8014230 <validate>
 8014948:	4603      	mov	r3, r0
 801494a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801494e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014952:	2b00      	cmp	r3, #0
 8014954:	d107      	bne.n	8014966 <f_write+0x44>
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	7d5b      	ldrb	r3, [r3, #21]
 801495a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801495e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014962:	2b00      	cmp	r3, #0
 8014964:	d002      	beq.n	801496c <f_write+0x4a>
 8014966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801496a:	e14b      	b.n	8014c04 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	7d1b      	ldrb	r3, [r3, #20]
 8014970:	f003 0302 	and.w	r3, r3, #2
 8014974:	2b00      	cmp	r3, #0
 8014976:	d101      	bne.n	801497c <f_write+0x5a>
 8014978:	2307      	movs	r3, #7
 801497a:	e143      	b.n	8014c04 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	699a      	ldr	r2, [r3, #24]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	441a      	add	r2, r3
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	699b      	ldr	r3, [r3, #24]
 8014988:	429a      	cmp	r2, r3
 801498a:	f080 812d 	bcs.w	8014be8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	699b      	ldr	r3, [r3, #24]
 8014992:	43db      	mvns	r3, r3
 8014994:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014996:	e127      	b.n	8014be8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	699b      	ldr	r3, [r3, #24]
 801499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f040 80e3 	bne.w	8014b6c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	699b      	ldr	r3, [r3, #24]
 80149aa:	0a5b      	lsrs	r3, r3, #9
 80149ac:	693a      	ldr	r2, [r7, #16]
 80149ae:	8952      	ldrh	r2, [r2, #10]
 80149b0:	3a01      	subs	r2, #1
 80149b2:	4013      	ands	r3, r2
 80149b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d143      	bne.n	8014a44 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	699b      	ldr	r3, [r3, #24]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d10c      	bne.n	80149de <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	689b      	ldr	r3, [r3, #8]
 80149c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80149ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d11a      	bne.n	8014a06 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	2100      	movs	r1, #0
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fe fc4b 	bl	8013270 <create_chain>
 80149da:	62b8      	str	r0, [r7, #40]	; 0x28
 80149dc:	e013      	b.n	8014a06 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d007      	beq.n	80149f6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	699b      	ldr	r3, [r3, #24]
 80149ea:	4619      	mov	r1, r3
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f7fe fcd7 	bl	80133a0 <clmt_clust>
 80149f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80149f4:	e007      	b.n	8014a06 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	69db      	ldr	r3, [r3, #28]
 80149fc:	4619      	mov	r1, r3
 80149fe:	4610      	mov	r0, r2
 8014a00:	f7fe fc36 	bl	8013270 <create_chain>
 8014a04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 80f2 	beq.w	8014bf2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	d104      	bne.n	8014a1e <f_write+0xfc>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2202      	movs	r2, #2
 8014a18:	755a      	strb	r2, [r3, #21]
 8014a1a:	2302      	movs	r3, #2
 8014a1c:	e0f2      	b.n	8014c04 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a24:	d104      	bne.n	8014a30 <f_write+0x10e>
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2201      	movs	r2, #1
 8014a2a:	755a      	strb	r2, [r3, #21]
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e0e9      	b.n	8014c04 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	689b      	ldr	r3, [r3, #8]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d102      	bne.n	8014a44 <f_write+0x122>
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	7d1b      	ldrb	r3, [r3, #20]
 8014a48:	b25b      	sxtb	r3, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	da18      	bge.n	8014a80 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	7858      	ldrb	r0, [r3, #1]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	6a1a      	ldr	r2, [r3, #32]
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	f7fd fe65 	bl	801272c <disk_write>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d004      	beq.n	8014a72 <f_write+0x150>
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	755a      	strb	r2, [r3, #21]
 8014a6e:	2301      	movs	r3, #1
 8014a70:	e0c8      	b.n	8014c04 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	7d1b      	ldrb	r3, [r3, #20]
 8014a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a7a:	b2da      	uxtb	r2, r3
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014a80:	693a      	ldr	r2, [r7, #16]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	69db      	ldr	r3, [r3, #28]
 8014a86:	4619      	mov	r1, r3
 8014a88:	4610      	mov	r0, r2
 8014a8a:	f7fe f9d9 	bl	8012e40 <clust2sect>
 8014a8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d104      	bne.n	8014aa0 <f_write+0x17e>
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2202      	movs	r2, #2
 8014a9a:	755a      	strb	r2, [r3, #21]
 8014a9c:	2302      	movs	r3, #2
 8014a9e:	e0b1      	b.n	8014c04 <f_write+0x2e2>
			sect += csect;
 8014aa0:	697a      	ldr	r2, [r7, #20]
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	4413      	add	r3, r2
 8014aa6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	0a5b      	lsrs	r3, r3, #9
 8014aac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014aae:	6a3b      	ldr	r3, [r7, #32]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d03c      	beq.n	8014b2e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014ab4:	69ba      	ldr	r2, [r7, #24]
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	4413      	add	r3, r2
 8014aba:	693a      	ldr	r2, [r7, #16]
 8014abc:	8952      	ldrh	r2, [r2, #10]
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d905      	bls.n	8014ace <f_write+0x1ac>
					cc = fs->csize - csect;
 8014ac2:	693b      	ldr	r3, [r7, #16]
 8014ac4:	895b      	ldrh	r3, [r3, #10]
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	7858      	ldrb	r0, [r3, #1]
 8014ad2:	6a3b      	ldr	r3, [r7, #32]
 8014ad4:	697a      	ldr	r2, [r7, #20]
 8014ad6:	69f9      	ldr	r1, [r7, #28]
 8014ad8:	f7fd fe28 	bl	801272c <disk_write>
 8014adc:	4603      	mov	r3, r0
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d004      	beq.n	8014aec <f_write+0x1ca>
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	755a      	strb	r2, [r3, #21]
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e08b      	b.n	8014c04 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6a1a      	ldr	r2, [r3, #32]
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	1ad3      	subs	r3, r2, r3
 8014af4:	6a3a      	ldr	r2, [r7, #32]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d915      	bls.n	8014b26 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6a1a      	ldr	r2, [r3, #32]
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	1ad3      	subs	r3, r2, r3
 8014b08:	025b      	lsls	r3, r3, #9
 8014b0a:	69fa      	ldr	r2, [r7, #28]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b12:	4619      	mov	r1, r3
 8014b14:	f7fd feca 	bl	80128ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	7d1b      	ldrb	r3, [r3, #20]
 8014b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b20:	b2da      	uxtb	r2, r3
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	025b      	lsls	r3, r3, #9
 8014b2a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014b2c:	e03f      	b.n	8014bae <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6a1b      	ldr	r3, [r3, #32]
 8014b32:	697a      	ldr	r2, [r7, #20]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d016      	beq.n	8014b66 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	699a      	ldr	r2, [r3, #24]
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d210      	bcs.n	8014b66 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	7858      	ldrb	r0, [r3, #1]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b4e:	2301      	movs	r3, #1
 8014b50:	697a      	ldr	r2, [r7, #20]
 8014b52:	f7fd fdcb 	bl	80126ec <disk_read>
 8014b56:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d004      	beq.n	8014b66 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2201      	movs	r2, #1
 8014b60:	755a      	strb	r2, [r3, #21]
 8014b62:	2301      	movs	r3, #1
 8014b64:	e04e      	b.n	8014c04 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	699b      	ldr	r3, [r3, #24]
 8014b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014b78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d901      	bls.n	8014b86 <f_write+0x264>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	699b      	ldr	r3, [r3, #24]
 8014b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b94:	4413      	add	r3, r2
 8014b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b98:	69f9      	ldr	r1, [r7, #28]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fd fe86 	bl	80128ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	7d1b      	ldrb	r3, [r3, #20]
 8014ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ba8:	b2da      	uxtb	r2, r3
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014bae:	69fa      	ldr	r2, [r7, #28]
 8014bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb2:	4413      	add	r3, r2
 8014bb4:	61fb      	str	r3, [r7, #28]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	699a      	ldr	r2, [r3, #24]
 8014bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbc:	441a      	add	r2, r3
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	619a      	str	r2, [r3, #24]
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	68da      	ldr	r2, [r3, #12]
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	699b      	ldr	r3, [r3, #24]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	bf38      	it	cc
 8014bce:	461a      	movcc	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	60da      	str	r2, [r3, #12]
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	681a      	ldr	r2, [r3, #0]
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	441a      	add	r2, r3
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	601a      	str	r2, [r3, #0]
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be4:	1ad3      	subs	r3, r2, r3
 8014be6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f47f aed4 	bne.w	8014998 <f_write+0x76>
 8014bf0:	e000      	b.n	8014bf4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014bf2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	7d1b      	ldrb	r3, [r3, #20]
 8014bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bfc:	b2da      	uxtb	r2, r3
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014c02:	2300      	movs	r3, #0
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3730      	adds	r7, #48	; 0x30
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f107 0208 	add.w	r2, r7, #8
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff fb07 	bl	8014230 <validate>
 8014c22:	4603      	mov	r3, r0
 8014c24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014c26:	7dfb      	ldrb	r3, [r7, #23]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d168      	bne.n	8014cfe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	7d1b      	ldrb	r3, [r3, #20]
 8014c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d062      	beq.n	8014cfe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	7d1b      	ldrb	r3, [r3, #20]
 8014c3c:	b25b      	sxtb	r3, r3
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	da15      	bge.n	8014c6e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	7858      	ldrb	r0, [r3, #1]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6a1a      	ldr	r2, [r3, #32]
 8014c50:	2301      	movs	r3, #1
 8014c52:	f7fd fd6b 	bl	801272c <disk_write>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d001      	beq.n	8014c60 <f_sync+0x54>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e04f      	b.n	8014d00 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	7d1b      	ldrb	r3, [r3, #20]
 8014c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c68:	b2da      	uxtb	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014c6e:	f7f9 fb03 	bl	800e278 <get_fattime>
 8014c72:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014c74:	68ba      	ldr	r2, [r7, #8]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	4610      	mov	r0, r2
 8014c7e:	f7fe f843 	bl	8012d08 <move_window>
 8014c82:	4603      	mov	r3, r0
 8014c84:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014c86:	7dfb      	ldrb	r3, [r7, #23]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d138      	bne.n	8014cfe <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c90:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	330b      	adds	r3, #11
 8014c96:	781a      	ldrb	r2, [r3, #0]
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	330b      	adds	r3, #11
 8014c9c:	f042 0220 	orr.w	r2, r2, #32
 8014ca0:	b2d2      	uxtb	r2, r2
 8014ca2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6818      	ldr	r0, [r3, #0]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	461a      	mov	r2, r3
 8014cae:	68f9      	ldr	r1, [r7, #12]
 8014cb0:	f7fe fd50 	bl	8013754 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f103 021c 	add.w	r2, r3, #28
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	f7fd fdc7 	bl	8012854 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	3316      	adds	r3, #22
 8014cca:	6939      	ldr	r1, [r7, #16]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fd fdc1 	bl	8012854 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	3312      	adds	r3, #18
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7fd fda0 	bl	801281e <st_word>
					fs->wflag = 1;
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fe f83c 	bl	8012d64 <sync_fs>
 8014cec:	4603      	mov	r3, r0
 8014cee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	7d1b      	ldrb	r3, [r3, #20]
 8014cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014cf8:	b2da      	uxtb	r2, r3
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3718      	adds	r7, #24
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7ff ff7b 	bl	8014c0c <f_sync>
 8014d16:	4603      	mov	r3, r0
 8014d18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014d1a:	7bfb      	ldrb	r3, [r7, #15]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d118      	bne.n	8014d52 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f107 0208 	add.w	r2, r7, #8
 8014d26:	4611      	mov	r1, r2
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff fa81 	bl	8014230 <validate>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014d32:	7bfb      	ldrb	r3, [r7, #15]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10c      	bne.n	8014d52 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	691b      	ldr	r3, [r3, #16]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fd ff3f 	bl	8012bc0 <dec_lock>
 8014d42:	4603      	mov	r3, r0
 8014d44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014d46:	7bfb      	ldrb	r3, [r7, #15]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d102      	bne.n	8014d52 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3710      	adds	r7, #16
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <f_opendir+0x14>
 8014d6c:	2309      	movs	r3, #9
 8014d6e:	e064      	b.n	8014e3a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014d74:	f107 010c 	add.w	r1, r7, #12
 8014d78:	463b      	mov	r3, r7
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7ff f80b 	bl	8013d98 <find_volume>
 8014d82:	4603      	mov	r3, r0
 8014d84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014d86:	7dfb      	ldrb	r3, [r7, #23]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d14f      	bne.n	8014e2c <f_opendir+0xd0>
		obj->fs = fs;
 8014d8c:	68fa      	ldr	r2, [r7, #12]
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	4619      	mov	r1, r3
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7fe fef2 	bl	8013b80 <follow_path>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014da0:	7dfb      	ldrb	r3, [r7, #23]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d13d      	bne.n	8014e22 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014dac:	b25b      	sxtb	r3, r3
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	db12      	blt.n	8014dd8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	799b      	ldrb	r3, [r3, #6]
 8014db6:	f003 0310 	and.w	r3, r3, #16
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00a      	beq.n	8014dd4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014dbe:	68fa      	ldr	r2, [r7, #12]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6a1b      	ldr	r3, [r3, #32]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	4610      	mov	r0, r2
 8014dc8:	f7fe fca5 	bl	8013716 <ld_clust>
 8014dcc:	4602      	mov	r2, r0
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	609a      	str	r2, [r3, #8]
 8014dd2:	e001      	b.n	8014dd8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014dd4:	2305      	movs	r3, #5
 8014dd6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014dd8:	7dfb      	ldrb	r3, [r7, #23]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d121      	bne.n	8014e22 <f_opendir+0xc6>
				obj->id = fs->id;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	88da      	ldrh	r2, [r3, #6]
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014de6:	2100      	movs	r1, #0
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7fe fb0d 	bl	8013408 <dir_sdi>
 8014dee:	4603      	mov	r3, r0
 8014df0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014df2:	7dfb      	ldrb	r3, [r7, #23]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d114      	bne.n	8014e22 <f_opendir+0xc6>
					if (obj->sclust) {
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	689b      	ldr	r3, [r3, #8]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00d      	beq.n	8014e1c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014e00:	2100      	movs	r1, #0
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7fd fe4e 	bl	8012aa4 <inc_lock>
 8014e08:	4602      	mov	r2, r0
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d105      	bne.n	8014e22 <f_opendir+0xc6>
 8014e16:	2312      	movs	r3, #18
 8014e18:	75fb      	strb	r3, [r7, #23]
 8014e1a:	e002      	b.n	8014e22 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014e22:	7dfb      	ldrb	r3, [r7, #23]
 8014e24:	2b04      	cmp	r3, #4
 8014e26:	d101      	bne.n	8014e2c <f_opendir+0xd0>
 8014e28:	2305      	movs	r3, #5
 8014e2a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014e2c:	7dfb      	ldrb	r3, [r7, #23]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d002      	beq.n	8014e38 <f_opendir+0xdc>
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	2200      	movs	r2, #0
 8014e36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3718      	adds	r7, #24
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b084      	sub	sp, #16
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f107 0208 	add.w	r2, r7, #8
 8014e50:	4611      	mov	r1, r2
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7ff f9ec 	bl	8014230 <validate>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d110      	bne.n	8014e84 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	691b      	ldr	r3, [r3, #16]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d006      	beq.n	8014e78 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fd fea6 	bl	8012bc0 <dec_lock>
 8014e74:	4603      	mov	r3, r0
 8014e76:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014e78:	7bfb      	ldrb	r3, [r7, #15]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d102      	bne.n	8014e84 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2200      	movs	r2, #0
 8014e82:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}

08014e8e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014e8e:	b580      	push	{r7, lr}
 8014e90:	b084      	sub	sp, #16
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
 8014e96:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f107 0208 	add.w	r2, r7, #8
 8014e9e:	4611      	mov	r1, r2
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff f9c5 	bl	8014230 <validate>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014eaa:	7bfb      	ldrb	r3, [r7, #15]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d126      	bne.n	8014efe <f_readdir+0x70>
		if (!fno) {
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7fe faa5 	bl	8013408 <dir_sdi>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	73fb      	strb	r3, [r7, #15]
 8014ec2:	e01c      	b.n	8014efe <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014ec4:	2100      	movs	r1, #0
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f7fe fc64 	bl	8013794 <dir_read>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014ed0:	7bfb      	ldrb	r3, [r7, #15]
 8014ed2:	2b04      	cmp	r3, #4
 8014ed4:	d101      	bne.n	8014eda <f_readdir+0x4c>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014eda:	7bfb      	ldrb	r3, [r7, #15]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d10e      	bne.n	8014efe <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014ee0:	6839      	ldr	r1, [r7, #0]
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7fe fd58 	bl	8013998 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014ee8:	2100      	movs	r1, #0
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f7fe fb07 	bl	80134fe <dir_next>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014ef4:	7bfb      	ldrb	r3, [r7, #15]
 8014ef6:	2b04      	cmp	r3, #4
 8014ef8:	d101      	bne.n	8014efe <f_readdir+0x70>
 8014efa:	2300      	movs	r3, #0
 8014efc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3710      	adds	r7, #16
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b090      	sub	sp, #64	; 0x40
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014f12:	f107 010c 	add.w	r1, r7, #12
 8014f16:	1d3b      	adds	r3, r7, #4
 8014f18:	2200      	movs	r2, #0
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7fe ff3c 	bl	8013d98 <find_volume>
 8014f20:	4603      	mov	r3, r0
 8014f22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8014f26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d11f      	bne.n	8014f6e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	f107 030c 	add.w	r3, r7, #12
 8014f34:	4611      	mov	r1, r2
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7fe fe22 	bl	8013b80 <follow_path>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8014f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d111      	bne.n	8014f6e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014f4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014f4e:	b25b      	sxtb	r3, r3
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	da03      	bge.n	8014f5c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014f54:	2306      	movs	r3, #6
 8014f56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014f5a:	e008      	b.n	8014f6e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d005      	beq.n	8014f6e <f_stat+0x66>
 8014f62:	f107 030c 	add.w	r3, r7, #12
 8014f66:	6839      	ldr	r1, [r7, #0]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7fe fd15 	bl	8013998 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3740      	adds	r7, #64	; 0x40
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b09e      	sub	sp, #120	; 0x78
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014f86:	f107 010c 	add.w	r1, r7, #12
 8014f8a:	1d3b      	adds	r3, r7, #4
 8014f8c:	2202      	movs	r2, #2
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fe ff02 	bl	8013d98 <find_volume>
 8014f94:	4603      	mov	r3, r0
 8014f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	f040 808e 	bne.w	80150c4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014fae:	4611      	mov	r1, r2
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7fe fde5 	bl	8013b80 <follow_path>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d108      	bne.n	8014fd6 <f_unlink+0x5c>
 8014fc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014fc8:	2102      	movs	r1, #2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fd fcec 	bl	80129a8 <chk_lock>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014fd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d172      	bne.n	80150c4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014fde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014fe2:	b25b      	sxtb	r3, r3
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	da03      	bge.n	8014ff0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014fe8:	2306      	movs	r3, #6
 8014fea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014fee:	e008      	b.n	8015002 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014ff0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014ff4:	f003 0301 	and.w	r3, r3, #1
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d002      	beq.n	8015002 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014ffc:	2307      	movs	r3, #7
 8014ffe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8015002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015006:	2b00      	cmp	r3, #0
 8015008:	d134      	bne.n	8015074 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801500e:	4611      	mov	r1, r2
 8015010:	4618      	mov	r0, r3
 8015012:	f7fe fb80 	bl	8013716 <ld_clust>
 8015016:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015018:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801501c:	f003 0310 	and.w	r3, r3, #16
 8015020:	2b00      	cmp	r3, #0
 8015022:	d027      	beq.n	8015074 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8015028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801502a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801502c:	f107 0310 	add.w	r3, r7, #16
 8015030:	2100      	movs	r1, #0
 8015032:	4618      	mov	r0, r3
 8015034:	f7fe f9e8 	bl	8013408 <dir_sdi>
 8015038:	4603      	mov	r3, r0
 801503a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801503e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015042:	2b00      	cmp	r3, #0
 8015044:	d116      	bne.n	8015074 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015046:	f107 0310 	add.w	r3, r7, #16
 801504a:	2100      	movs	r1, #0
 801504c:	4618      	mov	r0, r3
 801504e:	f7fe fba1 	bl	8013794 <dir_read>
 8015052:	4603      	mov	r3, r0
 8015054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801505c:	2b00      	cmp	r3, #0
 801505e:	d102      	bne.n	8015066 <f_unlink+0xec>
 8015060:	2307      	movs	r3, #7
 8015062:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015066:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801506a:	2b04      	cmp	r3, #4
 801506c:	d102      	bne.n	8015074 <f_unlink+0xfa>
 801506e:	2300      	movs	r3, #0
 8015070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015074:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015078:	2b00      	cmp	r3, #0
 801507a:	d123      	bne.n	80150c4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801507c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe fc6b 	bl	801395c <dir_remove>
 8015086:	4603      	mov	r3, r0
 8015088:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801508c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015090:	2b00      	cmp	r3, #0
 8015092:	d10c      	bne.n	80150ae <f_unlink+0x134>
 8015094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015096:	2b00      	cmp	r3, #0
 8015098:	d009      	beq.n	80150ae <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801509a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801509e:	2200      	movs	r2, #0
 80150a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fe f87f 	bl	80131a6 <remove_chain>
 80150a8:	4603      	mov	r3, r0
 80150aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80150ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d106      	bne.n	80150c4 <f_unlink+0x14a>
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7fd fe53 	bl	8012d64 <sync_fs>
 80150be:	4603      	mov	r3, r0
 80150c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80150c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3778      	adds	r7, #120	; 0x78
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b088      	sub	sp, #32
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
	int n = 0;
 80150dc:	2300      	movs	r3, #0
 80150de:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80150e4:	e01b      	b.n	801511e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80150e6:	f107 0310 	add.w	r3, r7, #16
 80150ea:	f107 0114 	add.w	r1, r7, #20
 80150ee:	2201      	movs	r2, #1
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f7ff fad7 	bl	80146a4 <f_read>
		if (rc != 1) break;
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	d116      	bne.n	801512a <f_gets+0x5a>
		c = s[0];
 80150fc:	7d3b      	ldrb	r3, [r7, #20]
 80150fe:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015100:	7dfb      	ldrb	r3, [r7, #23]
 8015102:	2b0d      	cmp	r3, #13
 8015104:	d100      	bne.n	8015108 <f_gets+0x38>
 8015106:	e00a      	b.n	801511e <f_gets+0x4e>
		*p++ = c;
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	1c5a      	adds	r2, r3, #1
 801510c:	61ba      	str	r2, [r7, #24]
 801510e:	7dfa      	ldrb	r2, [r7, #23]
 8015110:	701a      	strb	r2, [r3, #0]
		n++;
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	3301      	adds	r3, #1
 8015116:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8015118:	7dfb      	ldrb	r3, [r7, #23]
 801511a:	2b0a      	cmp	r3, #10
 801511c:	d007      	beq.n	801512e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	3b01      	subs	r3, #1
 8015122:	69fa      	ldr	r2, [r7, #28]
 8015124:	429a      	cmp	r2, r3
 8015126:	dbde      	blt.n	80150e6 <f_gets+0x16>
 8015128:	e002      	b.n	8015130 <f_gets+0x60>
		if (rc != 1) break;
 801512a:	bf00      	nop
 801512c:	e000      	b.n	8015130 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801512e:	bf00      	nop
	}
	*p = 0;
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	2200      	movs	r2, #0
 8015134:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d001      	beq.n	8015140 <f_gets+0x70>
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	e000      	b.n	8015142 <f_gets+0x72>
 8015140:	2300      	movs	r3, #0
}
 8015142:	4618      	mov	r0, r3
 8015144:	3720      	adds	r7, #32
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
	...

0801514c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801514c:	b480      	push	{r7}
 801514e:	b087      	sub	sp, #28
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	4613      	mov	r3, r2
 8015158:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801515a:	2301      	movs	r3, #1
 801515c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801515e:	2300      	movs	r3, #0
 8015160:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015162:	4b1f      	ldr	r3, [pc, #124]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 8015164:	7a5b      	ldrb	r3, [r3, #9]
 8015166:	b2db      	uxtb	r3, r3
 8015168:	2b00      	cmp	r3, #0
 801516a:	d131      	bne.n	80151d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801516c:	4b1c      	ldr	r3, [pc, #112]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 801516e:	7a5b      	ldrb	r3, [r3, #9]
 8015170:	b2db      	uxtb	r3, r3
 8015172:	461a      	mov	r2, r3
 8015174:	4b1a      	ldr	r3, [pc, #104]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 8015176:	2100      	movs	r1, #0
 8015178:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801517a:	4b19      	ldr	r3, [pc, #100]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 801517c:	7a5b      	ldrb	r3, [r3, #9]
 801517e:	b2db      	uxtb	r3, r3
 8015180:	4a17      	ldr	r2, [pc, #92]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	4413      	add	r3, r2
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801518a:	4b15      	ldr	r3, [pc, #84]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 801518c:	7a5b      	ldrb	r3, [r3, #9]
 801518e:	b2db      	uxtb	r3, r3
 8015190:	461a      	mov	r2, r3
 8015192:	4b13      	ldr	r3, [pc, #76]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 8015194:	4413      	add	r3, r2
 8015196:	79fa      	ldrb	r2, [r7, #7]
 8015198:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801519a:	4b11      	ldr	r3, [pc, #68]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 801519c:	7a5b      	ldrb	r3, [r3, #9]
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	b2d1      	uxtb	r1, r2
 80151a4:	4a0e      	ldr	r2, [pc, #56]	; (80151e0 <FATFS_LinkDriverEx+0x94>)
 80151a6:	7251      	strb	r1, [r2, #9]
 80151a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80151aa:	7dbb      	ldrb	r3, [r7, #22]
 80151ac:	3330      	adds	r3, #48	; 0x30
 80151ae:	b2da      	uxtb	r2, r3
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	3301      	adds	r3, #1
 80151b8:	223a      	movs	r2, #58	; 0x3a
 80151ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	3302      	adds	r3, #2
 80151c0:	222f      	movs	r2, #47	; 0x2f
 80151c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	3303      	adds	r3, #3
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80151d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	371c      	adds	r7, #28
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop
 80151e0:	20000f90 	.word	0x20000f90

080151e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80151ee:	2200      	movs	r2, #0
 80151f0:	6839      	ldr	r1, [r7, #0]
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f7ff ffaa 	bl	801514c <FATFS_LinkDriverEx>
 80151f8:	4603      	mov	r3, r0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
	...

08015204 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8015208:	2201      	movs	r2, #1
 801520a:	4912      	ldr	r1, [pc, #72]	; (8015254 <MX_USB_DEVICE_Init+0x50>)
 801520c:	4812      	ldr	r0, [pc, #72]	; (8015258 <MX_USB_DEVICE_Init+0x54>)
 801520e:	f7f9 ff29 	bl	800f064 <USBD_Init>
 8015212:	4603      	mov	r3, r0
 8015214:	2b00      	cmp	r3, #0
 8015216:	d001      	beq.n	801521c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015218:	f7ed fc18 	bl	8002a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801521c:	490f      	ldr	r1, [pc, #60]	; (801525c <MX_USB_DEVICE_Init+0x58>)
 801521e:	480e      	ldr	r0, [pc, #56]	; (8015258 <MX_USB_DEVICE_Init+0x54>)
 8015220:	f7f9 ff50 	bl	800f0c4 <USBD_RegisterClass>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d001      	beq.n	801522e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801522a:	f7ed fc0f 	bl	8002a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801522e:	490c      	ldr	r1, [pc, #48]	; (8015260 <MX_USB_DEVICE_Init+0x5c>)
 8015230:	4809      	ldr	r0, [pc, #36]	; (8015258 <MX_USB_DEVICE_Init+0x54>)
 8015232:	f7f9 fe47 	bl	800eec4 <USBD_CDC_RegisterInterface>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801523c:	f7ed fc06 	bl	8002a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015240:	4805      	ldr	r0, [pc, #20]	; (8015258 <MX_USB_DEVICE_Init+0x54>)
 8015242:	f7f9 ff75 	bl	800f130 <USBD_Start>
 8015246:	4603      	mov	r3, r0
 8015248:	2b00      	cmp	r3, #0
 801524a:	d001      	beq.n	8015250 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801524c:	f7ed fbfe 	bl	8002a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015250:	bf00      	nop
 8015252:	bd80      	pop	{r7, pc}
 8015254:	200000cc 	.word	0x200000cc
 8015258:	20000f9c 	.word	0x20000f9c
 801525c:	20000018 	.word	0x20000018
 8015260:	200000b8 	.word	0x200000b8

08015264 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8015268:	2200      	movs	r2, #0
 801526a:	4905      	ldr	r1, [pc, #20]	; (8015280 <CDC_Init_HS+0x1c>)
 801526c:	4805      	ldr	r0, [pc, #20]	; (8015284 <CDC_Init_HS+0x20>)
 801526e:	f7f9 fe43 	bl	800eef8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8015272:	4905      	ldr	r1, [pc, #20]	; (8015288 <CDC_Init_HS+0x24>)
 8015274:	4803      	ldr	r0, [pc, #12]	; (8015284 <CDC_Init_HS+0x20>)
 8015276:	f7f9 fe61 	bl	800ef3c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801527a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801527c:	4618      	mov	r0, r3
 801527e:	bd80      	pop	{r7, pc}
 8015280:	20001a78 	.word	0x20001a78
 8015284:	20000f9c 	.word	0x20000f9c
 8015288:	20001278 	.word	0x20001278

0801528c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801528c:	b480      	push	{r7}
 801528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 8015290:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8015292:	4618      	mov	r0, r3
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801529c:	b480      	push	{r7}
 801529e:	b085      	sub	sp, #20
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	6039      	str	r1, [r7, #0]
 80152a6:	71fb      	strb	r3, [r7, #7]
 80152a8:	4613      	mov	r3, r2
 80152aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*)pbuf;
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	60fb      	str	r3, [r7, #12]
	switch(cmd)
 80152b0:	79fb      	ldrb	r3, [r7, #7]
 80152b2:	2b23      	cmp	r3, #35	; 0x23
 80152b4:	d858      	bhi.n	8015368 <CDC_Control_HS+0xcc>
 80152b6:	a201      	add	r2, pc, #4	; (adr r2, 80152bc <CDC_Control_HS+0x20>)
 80152b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152bc:	08015369 	.word	0x08015369
 80152c0:	08015369 	.word	0x08015369
 80152c4:	08015369 	.word	0x08015369
 80152c8:	08015369 	.word	0x08015369
 80152cc:	08015369 	.word	0x08015369
 80152d0:	08015369 	.word	0x08015369
 80152d4:	08015369 	.word	0x08015369
 80152d8:	08015369 	.word	0x08015369
 80152dc:	08015369 	.word	0x08015369
 80152e0:	08015369 	.word	0x08015369
 80152e4:	08015369 	.word	0x08015369
 80152e8:	08015369 	.word	0x08015369
 80152ec:	08015369 	.word	0x08015369
 80152f0:	08015369 	.word	0x08015369
 80152f4:	08015369 	.word	0x08015369
 80152f8:	08015369 	.word	0x08015369
 80152fc:	08015369 	.word	0x08015369
 8015300:	08015369 	.word	0x08015369
 8015304:	08015369 	.word	0x08015369
 8015308:	08015369 	.word	0x08015369
 801530c:	08015369 	.word	0x08015369
 8015310:	08015369 	.word	0x08015369
 8015314:	08015369 	.word	0x08015369
 8015318:	08015369 	.word	0x08015369
 801531c:	08015369 	.word	0x08015369
 8015320:	08015369 	.word	0x08015369
 8015324:	08015369 	.word	0x08015369
 8015328:	08015369 	.word	0x08015369
 801532c:	08015369 	.word	0x08015369
 8015330:	08015369 	.word	0x08015369
 8015334:	08015369 	.word	0x08015369
 8015338:	08015369 	.word	0x08015369
 801533c:	08015369 	.word	0x08015369
 8015340:	08015369 	.word	0x08015369
 8015344:	0801534d 	.word	0x0801534d
 8015348:	08015369 	.word	0x08015369
	case CDC_GET_LINE_CODING:

		break;

	case CDC_SET_CONTROL_LINE_STATE:
		if((req->wValue & 0x0001) != 0)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	885b      	ldrh	r3, [r3, #2]
 8015350:	f003 0301 	and.w	r3, r3, #1
 8015354:	2b00      	cmp	r3, #0
 8015356:	d003      	beq.n	8015360 <CDC_Control_HS+0xc4>
			usb_connected = 1;
 8015358:	4b07      	ldr	r3, [pc, #28]	; (8015378 <CDC_Control_HS+0xdc>)
 801535a:	2201      	movs	r2, #1
 801535c:	701a      	strb	r2, [r3, #0]
		else
			usb_connected = 0;
		break;
 801535e:	e004      	b.n	801536a <CDC_Control_HS+0xce>
			usb_connected = 0;
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <CDC_Control_HS+0xdc>)
 8015362:	2200      	movs	r2, #0
 8015364:	701a      	strb	r2, [r3, #0]
		break;
 8015366:	e000      	b.n	801536a <CDC_Control_HS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8015368:	bf00      	nop
	}

	return (USBD_OK);
 801536a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801536c:	4618      	mov	r0, r3
 801536e:	3714      	adds	r7, #20
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr
 8015378:	20000ee3 	.word	0x20000ee3

0801537c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	memset(usb_rx_buffer, 0x00, 1024);
 8015386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801538a:	2100      	movs	r1, #0
 801538c:	480e      	ldr	r0, [pc, #56]	; (80153c8 <CDC_Receive_HS+0x4c>)
 801538e:	f001 f85b 	bl	8016448 <memset>
	memcpy(usb_rx_buffer, Buf, *Len);
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	461a      	mov	r2, r3
 8015398:	6879      	ldr	r1, [r7, #4]
 801539a:	480b      	ldr	r0, [pc, #44]	; (80153c8 <CDC_Receive_HS+0x4c>)
 801539c:	f001 f846 	bl	801642c <memcpy>
	usb_rx_length = *Len;
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	4b09      	ldr	r3, [pc, #36]	; (80153cc <CDC_Receive_HS+0x50>)
 80153a8:	801a      	strh	r2, [r3, #0]
	usb_rx_ready = 1;
 80153aa:	4b09      	ldr	r3, [pc, #36]	; (80153d0 <CDC_Receive_HS+0x54>)
 80153ac:	2201      	movs	r2, #1
 80153ae:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80153b0:	6879      	ldr	r1, [r7, #4]
 80153b2:	4808      	ldr	r0, [pc, #32]	; (80153d4 <CDC_Receive_HS+0x58>)
 80153b4:	f7f9 fdc2 	bl	800ef3c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80153b8:	4806      	ldr	r0, [pc, #24]	; (80153d4 <CDC_Receive_HS+0x58>)
 80153ba:	f7f9 fe1d 	bl	800eff8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80153be:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	20000ae0 	.word	0x20000ae0
 80153cc:	20000ee0 	.word	0x20000ee0
 80153d0:	20000ee2 	.word	0x20000ee2
 80153d4:	20000f9c 	.word	0x20000f9c

080153d8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	460b      	mov	r3, r1
 80153e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80153e8:	4b0d      	ldr	r3, [pc, #52]	; (8015420 <CDC_Transmit_HS+0x48>)
 80153ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80153ee:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d001      	beq.n	80153fe <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 80153fa:	2301      	movs	r3, #1
 80153fc:	e00b      	b.n	8015416 <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80153fe:	887b      	ldrh	r3, [r7, #2]
 8015400:	461a      	mov	r2, r3
 8015402:	6879      	ldr	r1, [r7, #4]
 8015404:	4806      	ldr	r0, [pc, #24]	; (8015420 <CDC_Transmit_HS+0x48>)
 8015406:	f7f9 fd77 	bl	800eef8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801540a:	4805      	ldr	r0, [pc, #20]	; (8015420 <CDC_Transmit_HS+0x48>)
 801540c:	f7f9 fdb4 	bl	800ef78 <USBD_CDC_TransmitPacket>
 8015410:	4603      	mov	r3, r0
 8015412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8015414:	7bfb      	ldrb	r3, [r7, #15]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3710      	adds	r7, #16
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	20000f9c 	.word	0x20000f9c

08015424 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015424:	b480      	push	{r7}
 8015426:	b087      	sub	sp, #28
 8015428:	af00      	add	r7, sp, #0
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	4613      	mov	r3, r2
 8015430:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015432:	2300      	movs	r3, #0
 8015434:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8015436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801543a:	4618      	mov	r0, r3
 801543c:	371c      	adds	r7, #28
 801543e:	46bd      	mov	sp, r7
 8015440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015444:	4770      	bx	lr
	...

08015448 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	6039      	str	r1, [r7, #0]
 8015452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	2212      	movs	r2, #18
 8015458:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801545a:	4b03      	ldr	r3, [pc, #12]	; (8015468 <USBD_HS_DeviceDescriptor+0x20>)
}
 801545c:	4618      	mov	r0, r3
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr
 8015468:	200000ec 	.word	0x200000ec

0801546c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	4603      	mov	r3, r0
 8015474:	6039      	str	r1, [r7, #0]
 8015476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	2204      	movs	r2, #4
 801547c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801547e:	4b03      	ldr	r3, [pc, #12]	; (801548c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8015480:	4618      	mov	r0, r3
 8015482:	370c      	adds	r7, #12
 8015484:	46bd      	mov	sp, r7
 8015486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548a:	4770      	bx	lr
 801548c:	2000010c 	.word	0x2000010c

08015490 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	4603      	mov	r3, r0
 8015498:	6039      	str	r1, [r7, #0]
 801549a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801549c:	79fb      	ldrb	r3, [r7, #7]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d105      	bne.n	80154ae <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80154a2:	683a      	ldr	r2, [r7, #0]
 80154a4:	4907      	ldr	r1, [pc, #28]	; (80154c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80154a6:	4808      	ldr	r0, [pc, #32]	; (80154c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80154a8:	f7fb f818 	bl	80104dc <USBD_GetString>
 80154ac:	e004      	b.n	80154b8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80154ae:	683a      	ldr	r2, [r7, #0]
 80154b0:	4904      	ldr	r1, [pc, #16]	; (80154c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80154b2:	4805      	ldr	r0, [pc, #20]	; (80154c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80154b4:	f7fb f812 	bl	80104dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80154b8:	4b02      	ldr	r3, [pc, #8]	; (80154c4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3708      	adds	r7, #8
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	20002278 	.word	0x20002278
 80154c8:	08019e10 	.word	0x08019e10

080154cc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	4603      	mov	r3, r0
 80154d4:	6039      	str	r1, [r7, #0]
 80154d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80154d8:	683a      	ldr	r2, [r7, #0]
 80154da:	4904      	ldr	r1, [pc, #16]	; (80154ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80154dc:	4804      	ldr	r0, [pc, #16]	; (80154f0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80154de:	f7fa fffd 	bl	80104dc <USBD_GetString>
  return USBD_StrDesc;
 80154e2:	4b02      	ldr	r3, [pc, #8]	; (80154ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	20002278 	.word	0x20002278
 80154f0:	08019e28 	.word	0x08019e28

080154f4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	4603      	mov	r3, r0
 80154fc:	6039      	str	r1, [r7, #0]
 80154fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	221a      	movs	r2, #26
 8015504:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015506:	f000 f855 	bl	80155b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801550a:	4b02      	ldr	r3, [pc, #8]	; (8015514 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801550c:	4618      	mov	r0, r3
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	20000110 	.word	0x20000110

08015518 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	6039      	str	r1, [r7, #0]
 8015522:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015524:	79fb      	ldrb	r3, [r7, #7]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d105      	bne.n	8015536 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4907      	ldr	r1, [pc, #28]	; (801554c <USBD_HS_ConfigStrDescriptor+0x34>)
 801552e:	4808      	ldr	r0, [pc, #32]	; (8015550 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015530:	f7fa ffd4 	bl	80104dc <USBD_GetString>
 8015534:	e004      	b.n	8015540 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	4904      	ldr	r1, [pc, #16]	; (801554c <USBD_HS_ConfigStrDescriptor+0x34>)
 801553a:	4805      	ldr	r0, [pc, #20]	; (8015550 <USBD_HS_ConfigStrDescriptor+0x38>)
 801553c:	f7fa ffce 	bl	80104dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8015540:	4b02      	ldr	r3, [pc, #8]	; (801554c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	20002278 	.word	0x20002278
 8015550:	08019e3c 	.word	0x08019e3c

08015554 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015560:	79fb      	ldrb	r3, [r7, #7]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d105      	bne.n	8015572 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015566:	683a      	ldr	r2, [r7, #0]
 8015568:	4907      	ldr	r1, [pc, #28]	; (8015588 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801556a:	4808      	ldr	r0, [pc, #32]	; (801558c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801556c:	f7fa ffb6 	bl	80104dc <USBD_GetString>
 8015570:	e004      	b.n	801557c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	4904      	ldr	r1, [pc, #16]	; (8015588 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015576:	4805      	ldr	r0, [pc, #20]	; (801558c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015578:	f7fa ffb0 	bl	80104dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801557c:	4b02      	ldr	r3, [pc, #8]	; (8015588 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801557e:	4618      	mov	r0, r3
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	20002278 	.word	0x20002278
 801558c:	08019e48 	.word	0x08019e48

08015590 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015590:	b480      	push	{r7}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	6039      	str	r1, [r7, #0]
 801559a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	220c      	movs	r2, #12
 80155a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 80155a2:	4b03      	ldr	r3, [pc, #12]	; (80155b0 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	370c      	adds	r7, #12
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr
 80155b0:	20000100 	.word	0x20000100

080155b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b084      	sub	sp, #16
 80155b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80155ba:	4b0f      	ldr	r3, [pc, #60]	; (80155f8 <Get_SerialNum+0x44>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80155c0:	4b0e      	ldr	r3, [pc, #56]	; (80155fc <Get_SerialNum+0x48>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80155c6:	4b0e      	ldr	r3, [pc, #56]	; (8015600 <Get_SerialNum+0x4c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	4413      	add	r3, r2
 80155d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d009      	beq.n	80155ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80155da:	2208      	movs	r2, #8
 80155dc:	4909      	ldr	r1, [pc, #36]	; (8015604 <Get_SerialNum+0x50>)
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f000 f814 	bl	801560c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80155e4:	2204      	movs	r2, #4
 80155e6:	4908      	ldr	r1, [pc, #32]	; (8015608 <Get_SerialNum+0x54>)
 80155e8:	68b8      	ldr	r0, [r7, #8]
 80155ea:	f000 f80f 	bl	801560c <IntToUnicode>
  }
}
 80155ee:	bf00      	nop
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	1ff0f420 	.word	0x1ff0f420
 80155fc:	1ff0f424 	.word	0x1ff0f424
 8015600:	1ff0f428 	.word	0x1ff0f428
 8015604:	20000112 	.word	0x20000112
 8015608:	20000122 	.word	0x20000122

0801560c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801560c:	b480      	push	{r7}
 801560e:	b087      	sub	sp, #28
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	4613      	mov	r3, r2
 8015618:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801561a:	2300      	movs	r3, #0
 801561c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801561e:	2300      	movs	r3, #0
 8015620:	75fb      	strb	r3, [r7, #23]
 8015622:	e027      	b.n	8015674 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	0f1b      	lsrs	r3, r3, #28
 8015628:	2b09      	cmp	r3, #9
 801562a:	d80b      	bhi.n	8015644 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	0f1b      	lsrs	r3, r3, #28
 8015630:	b2da      	uxtb	r2, r3
 8015632:	7dfb      	ldrb	r3, [r7, #23]
 8015634:	005b      	lsls	r3, r3, #1
 8015636:	4619      	mov	r1, r3
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	440b      	add	r3, r1
 801563c:	3230      	adds	r2, #48	; 0x30
 801563e:	b2d2      	uxtb	r2, r2
 8015640:	701a      	strb	r2, [r3, #0]
 8015642:	e00a      	b.n	801565a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	0f1b      	lsrs	r3, r3, #28
 8015648:	b2da      	uxtb	r2, r3
 801564a:	7dfb      	ldrb	r3, [r7, #23]
 801564c:	005b      	lsls	r3, r3, #1
 801564e:	4619      	mov	r1, r3
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	440b      	add	r3, r1
 8015654:	3237      	adds	r2, #55	; 0x37
 8015656:	b2d2      	uxtb	r2, r2
 8015658:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	011b      	lsls	r3, r3, #4
 801565e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015660:	7dfb      	ldrb	r3, [r7, #23]
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	3301      	adds	r3, #1
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	4413      	add	r3, r2
 801566a:	2200      	movs	r2, #0
 801566c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801566e:	7dfb      	ldrb	r3, [r7, #23]
 8015670:	3301      	adds	r3, #1
 8015672:	75fb      	strb	r3, [r7, #23]
 8015674:	7dfa      	ldrb	r2, [r7, #23]
 8015676:	79fb      	ldrb	r3, [r7, #7]
 8015678:	429a      	cmp	r2, r3
 801567a:	d3d3      	bcc.n	8015624 <IntToUnicode+0x18>
  }
}
 801567c:	bf00      	nop
 801567e:	bf00      	nop
 8015680:	371c      	adds	r7, #28
 8015682:	46bd      	mov	sp, r7
 8015684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015688:	4770      	bx	lr
	...

0801568c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b0aa      	sub	sp, #168	; 0xa8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015694:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015698:	2200      	movs	r2, #0
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	605a      	str	r2, [r3, #4]
 801569e:	609a      	str	r2, [r3, #8]
 80156a0:	60da      	str	r2, [r3, #12]
 80156a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80156a4:	f107 0310 	add.w	r3, r7, #16
 80156a8:	2284      	movs	r2, #132	; 0x84
 80156aa:	2100      	movs	r1, #0
 80156ac:	4618      	mov	r0, r3
 80156ae:	f000 fecb 	bl	8016448 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4a26      	ldr	r2, [pc, #152]	; (8015750 <HAL_PCD_MspInit+0xc4>)
 80156b8:	4293      	cmp	r3, r2
 80156ba:	d145      	bne.n	8015748 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80156bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80156c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80156c2:	2300      	movs	r3, #0
 80156c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80156c8:	f107 0310 	add.w	r3, r7, #16
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7f2 fd1b 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80156d2:	4603      	mov	r3, r0
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d001      	beq.n	80156dc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80156d8:	f7ed f9b8 	bl	8002a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80156dc:	4b1d      	ldr	r3, [pc, #116]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 80156de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156e0:	4a1c      	ldr	r2, [pc, #112]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 80156e2:	f043 0302 	orr.w	r3, r3, #2
 80156e6:	6313      	str	r3, [r2, #48]	; 0x30
 80156e8:	4b1a      	ldr	r3, [pc, #104]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 80156ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ec:	f003 0302 	and.w	r3, r3, #2
 80156f0:	60fb      	str	r3, [r7, #12]
 80156f2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80156f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80156f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156fc:	2302      	movs	r3, #2
 80156fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015702:	2300      	movs	r3, #0
 8015704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015708:	2303      	movs	r3, #3
 801570a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801570e:	230c      	movs	r3, #12
 8015710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015714:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015718:	4619      	mov	r1, r3
 801571a:	480f      	ldr	r0, [pc, #60]	; (8015758 <HAL_PCD_MspInit+0xcc>)
 801571c:	f7ee fdfa 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015720:	4b0c      	ldr	r3, [pc, #48]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 8015722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015724:	4a0b      	ldr	r2, [pc, #44]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 8015726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801572a:	6313      	str	r3, [r2, #48]	; 0x30
 801572c:	4b09      	ldr	r3, [pc, #36]	; (8015754 <HAL_PCD_MspInit+0xc8>)
 801572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015734:	60bb      	str	r3, [r7, #8]
 8015736:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015738:	2200      	movs	r2, #0
 801573a:	2100      	movs	r1, #0
 801573c:	204d      	movs	r0, #77	; 0x4d
 801573e:	f7ee fa0c 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015742:	204d      	movs	r0, #77	; 0x4d
 8015744:	f7ee fa25 	bl	8003b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8015748:	bf00      	nop
 801574a:	37a8      	adds	r7, #168	; 0xa8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	40040000 	.word	0x40040000
 8015754:	40023800 	.word	0x40023800
 8015758:	40020400 	.word	0x40020400

0801575c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015770:	4619      	mov	r1, r3
 8015772:	4610      	mov	r0, r2
 8015774:	f7f9 fd29 	bl	800f1ca <USBD_LL_SetupStage>
}
 8015778:	bf00      	nop
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	460b      	mov	r3, r1
 801578a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8015792:	78fa      	ldrb	r2, [r7, #3]
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	4613      	mov	r3, r2
 8015798:	00db      	lsls	r3, r3, #3
 801579a:	4413      	add	r3, r2
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	440b      	add	r3, r1
 80157a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	78fb      	ldrb	r3, [r7, #3]
 80157a8:	4619      	mov	r1, r3
 80157aa:	f7f9 fd63 	bl	800f274 <USBD_LL_DataOutStage>
}
 80157ae:	bf00      	nop
 80157b0:	3708      	adds	r7, #8
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}

080157b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157b6:	b580      	push	{r7, lr}
 80157b8:	b082      	sub	sp, #8
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	6078      	str	r0, [r7, #4]
 80157be:	460b      	mov	r3, r1
 80157c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80157c8:	78fa      	ldrb	r2, [r7, #3]
 80157ca:	6879      	ldr	r1, [r7, #4]
 80157cc:	4613      	mov	r3, r2
 80157ce:	00db      	lsls	r3, r3, #3
 80157d0:	4413      	add	r3, r2
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	440b      	add	r3, r1
 80157d6:	334c      	adds	r3, #76	; 0x4c
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	78fb      	ldrb	r3, [r7, #3]
 80157dc:	4619      	mov	r1, r3
 80157de:	f7f9 fdfc 	bl	800f3da <USBD_LL_DataInStage>
}
 80157e2:	bf00      	nop
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b082      	sub	sp, #8
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f9 ff30 	bl	800f65e <USBD_LL_SOF>
}
 80157fe:	bf00      	nop
 8015800:	3708      	adds	r7, #8
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b084      	sub	sp, #16
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801580e:	2301      	movs	r3, #1
 8015810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d102      	bne.n	8015820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801581a:	2300      	movs	r3, #0
 801581c:	73fb      	strb	r3, [r7, #15]
 801581e:	e008      	b.n	8015832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	2b02      	cmp	r3, #2
 8015826:	d102      	bne.n	801582e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015828:	2301      	movs	r3, #1
 801582a:	73fb      	strb	r3, [r7, #15]
 801582c:	e001      	b.n	8015832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801582e:	f7ed f90d 	bl	8002a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015838:	7bfa      	ldrb	r2, [r7, #15]
 801583a:	4611      	mov	r1, r2
 801583c:	4618      	mov	r0, r3
 801583e:	f7f9 fed0 	bl	800f5e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015848:	4618      	mov	r0, r3
 801584a:	f7f9 fe78 	bl	800f53e <USBD_LL_Reset>
}
 801584e:	bf00      	nop
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
	...

08015858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015866:	4618      	mov	r0, r3
 8015868:	f7f9 fecb 	bl	800f602 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	6812      	ldr	r2, [r2, #0]
 801587a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801587e:	f043 0301 	orr.w	r3, r3, #1
 8015882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6a1b      	ldr	r3, [r3, #32]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d005      	beq.n	8015898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801588c:	4b04      	ldr	r3, [pc, #16]	; (80158a0 <HAL_PCD_SuspendCallback+0x48>)
 801588e:	691b      	ldr	r3, [r3, #16]
 8015890:	4a03      	ldr	r2, [pc, #12]	; (80158a0 <HAL_PCD_SuspendCallback+0x48>)
 8015892:	f043 0306 	orr.w	r3, r3, #6
 8015896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015898:	bf00      	nop
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	e000ed00 	.word	0xe000ed00

080158a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7f9 febb 	bl	800f62e <USBD_LL_Resume>
}
 80158b8:	bf00      	nop
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	460b      	mov	r3, r1
 80158ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80158d2:	78fa      	ldrb	r2, [r7, #3]
 80158d4:	4611      	mov	r1, r2
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f9 ff13 	bl	800f702 <USBD_LL_IsoOUTIncomplete>
}
 80158dc:	bf00      	nop
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b082      	sub	sp, #8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	460b      	mov	r3, r1
 80158ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80158f6:	78fa      	ldrb	r2, [r7, #3]
 80158f8:	4611      	mov	r1, r2
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7f9 fecf 	bl	800f69e <USBD_LL_IsoINIncomplete>
}
 8015900:	bf00      	nop
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015916:	4618      	mov	r0, r3
 8015918:	f7f9 ff25 	bl	800f766 <USBD_LL_DevConnected>
}
 801591c:	bf00      	nop
 801591e:	3708      	adds	r7, #8
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015932:	4618      	mov	r0, r3
 8015934:	f7f9 ff22 	bl	800f77c <USBD_LL_DevDisconnected>
}
 8015938:	bf00      	nop
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b01      	cmp	r3, #1
 801594e:	d140      	bne.n	80159d2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015950:	4a22      	ldr	r2, [pc, #136]	; (80159dc <USBD_LL_Init+0x9c>)
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	4a20      	ldr	r2, [pc, #128]	; (80159dc <USBD_LL_Init+0x9c>)
 801595c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015960:	4b1e      	ldr	r3, [pc, #120]	; (80159dc <USBD_LL_Init+0x9c>)
 8015962:	4a1f      	ldr	r2, [pc, #124]	; (80159e0 <USBD_LL_Init+0xa0>)
 8015964:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8015966:	4b1d      	ldr	r3, [pc, #116]	; (80159dc <USBD_LL_Init+0x9c>)
 8015968:	2208      	movs	r2, #8
 801596a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801596c:	4b1b      	ldr	r3, [pc, #108]	; (80159dc <USBD_LL_Init+0x9c>)
 801596e:	2202      	movs	r2, #2
 8015970:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8015972:	4b1a      	ldr	r3, [pc, #104]	; (80159dc <USBD_LL_Init+0x9c>)
 8015974:	2200      	movs	r2, #0
 8015976:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015978:	4b18      	ldr	r3, [pc, #96]	; (80159dc <USBD_LL_Init+0x9c>)
 801597a:	2202      	movs	r2, #2
 801597c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801597e:	4b17      	ldr	r3, [pc, #92]	; (80159dc <USBD_LL_Init+0x9c>)
 8015980:	2200      	movs	r2, #0
 8015982:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015984:	4b15      	ldr	r3, [pc, #84]	; (80159dc <USBD_LL_Init+0x9c>)
 8015986:	2200      	movs	r2, #0
 8015988:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801598a:	4b14      	ldr	r3, [pc, #80]	; (80159dc <USBD_LL_Init+0x9c>)
 801598c:	2200      	movs	r2, #0
 801598e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015990:	4b12      	ldr	r3, [pc, #72]	; (80159dc <USBD_LL_Init+0x9c>)
 8015992:	2200      	movs	r2, #0
 8015994:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015996:	4b11      	ldr	r3, [pc, #68]	; (80159dc <USBD_LL_Init+0x9c>)
 8015998:	2200      	movs	r2, #0
 801599a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801599c:	4b0f      	ldr	r3, [pc, #60]	; (80159dc <USBD_LL_Init+0x9c>)
 801599e:	2200      	movs	r2, #0
 80159a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80159a2:	480e      	ldr	r0, [pc, #56]	; (80159dc <USBD_LL_Init+0x9c>)
 80159a4:	f7f0 fbd0 	bl	8006148 <HAL_PCD_Init>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d001      	beq.n	80159b2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80159ae:	f7ed f84d 	bl	8002a4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80159b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80159b6:	4809      	ldr	r0, [pc, #36]	; (80159dc <USBD_LL_Init+0x9c>)
 80159b8:	f7f1 fe49 	bl	800764e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80159bc:	2280      	movs	r2, #128	; 0x80
 80159be:	2100      	movs	r1, #0
 80159c0:	4806      	ldr	r0, [pc, #24]	; (80159dc <USBD_LL_Init+0x9c>)
 80159c2:	f7f1 fdfd 	bl	80075c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80159c6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80159ca:	2101      	movs	r1, #1
 80159cc:	4803      	ldr	r0, [pc, #12]	; (80159dc <USBD_LL_Init+0x9c>)
 80159ce:	f7f1 fdf7 	bl	80075c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3708      	adds	r7, #8
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	20002478 	.word	0x20002478
 80159e0:	40040000 	.word	0x40040000

080159e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ec:	2300      	movs	r3, #0
 80159ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159f0:	2300      	movs	r3, #0
 80159f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f0 fcc8 	bl	8006390 <HAL_PCD_Start>
 8015a00:	4603      	mov	r3, r0
 8015a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a04:	7bfb      	ldrb	r3, [r7, #15]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 f97e 	bl	8015d08 <USBD_Get_USB_Status>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3710      	adds	r7, #16
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b084      	sub	sp, #16
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
 8015a22:	4608      	mov	r0, r1
 8015a24:	4611      	mov	r1, r2
 8015a26:	461a      	mov	r2, r3
 8015a28:	4603      	mov	r3, r0
 8015a2a:	70fb      	strb	r3, [r7, #3]
 8015a2c:	460b      	mov	r3, r1
 8015a2e:	70bb      	strb	r3, [r7, #2]
 8015a30:	4613      	mov	r3, r2
 8015a32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a34:	2300      	movs	r3, #0
 8015a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015a42:	78bb      	ldrb	r3, [r7, #2]
 8015a44:	883a      	ldrh	r2, [r7, #0]
 8015a46:	78f9      	ldrb	r1, [r7, #3]
 8015a48:	f7f1 f9b5 	bl	8006db6 <HAL_PCD_EP_Open>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a50:	7bfb      	ldrb	r3, [r7, #15]
 8015a52:	4618      	mov	r0, r3
 8015a54:	f000 f958 	bl	8015d08 <USBD_Get_USB_Status>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3710      	adds	r7, #16
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}

08015a66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a66:	b580      	push	{r7, lr}
 8015a68:	b084      	sub	sp, #16
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
 8015a6e:	460b      	mov	r3, r1
 8015a70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a72:	2300      	movs	r3, #0
 8015a74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a76:	2300      	movs	r3, #0
 8015a78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a80:	78fa      	ldrb	r2, [r7, #3]
 8015a82:	4611      	mov	r1, r2
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7f1 f9fe 	bl	8006e86 <HAL_PCD_EP_Close>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a8e:	7bfb      	ldrb	r3, [r7, #15]
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 f939 	bl	8015d08 <USBD_Get_USB_Status>
 8015a96:	4603      	mov	r3, r0
 8015a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3710      	adds	r7, #16
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	460b      	mov	r3, r1
 8015aae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015abe:	78fa      	ldrb	r2, [r7, #3]
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7f1 fad6 	bl	8007074 <HAL_PCD_EP_SetStall>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015acc:	7bfb      	ldrb	r3, [r7, #15]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 f91a 	bl	8015d08 <USBD_Get_USB_Status>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}

08015ae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ae2:	b580      	push	{r7, lr}
 8015ae4:	b084      	sub	sp, #16
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	6078      	str	r0, [r7, #4]
 8015aea:	460b      	mov	r3, r1
 8015aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aee:	2300      	movs	r3, #0
 8015af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015af2:	2300      	movs	r3, #0
 8015af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015afc:	78fa      	ldrb	r2, [r7, #3]
 8015afe:	4611      	mov	r1, r2
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7f1 fb1b 	bl	800713c <HAL_PCD_EP_ClrStall>
 8015b06:	4603      	mov	r3, r0
 8015b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 f8fb 	bl	8015d08 <USBD_Get_USB_Status>
 8015b12:	4603      	mov	r3, r0
 8015b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b20:	b480      	push	{r7}
 8015b22:	b085      	sub	sp, #20
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	da0b      	bge.n	8015b54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015b3c:	78fb      	ldrb	r3, [r7, #3]
 8015b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b42:	68f9      	ldr	r1, [r7, #12]
 8015b44:	4613      	mov	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	4413      	add	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	440b      	add	r3, r1
 8015b4e:	333e      	adds	r3, #62	; 0x3e
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	e00b      	b.n	8015b6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015b54:	78fb      	ldrb	r3, [r7, #3]
 8015b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b5a:	68f9      	ldr	r1, [r7, #12]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	4413      	add	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	440b      	add	r3, r1
 8015b66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015b6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	3714      	adds	r7, #20
 8015b70:	46bd      	mov	sp, r7
 8015b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b76:	4770      	bx	lr

08015b78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	460b      	mov	r3, r1
 8015b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b84:	2300      	movs	r3, #0
 8015b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b92:	78fa      	ldrb	r2, [r7, #3]
 8015b94:	4611      	mov	r1, r2
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7f1 f8e8 	bl	8006d6c <HAL_PCD_SetAddress>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ba0:	7bfb      	ldrb	r3, [r7, #15]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f000 f8b0 	bl	8015d08 <USBD_Get_USB_Status>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b086      	sub	sp, #24
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	60f8      	str	r0, [r7, #12]
 8015bbe:	607a      	str	r2, [r7, #4]
 8015bc0:	603b      	str	r3, [r7, #0]
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015bd4:	7af9      	ldrb	r1, [r7, #11]
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	f7f1 fa01 	bl	8006fe0 <HAL_PCD_EP_Transmit>
 8015bde:	4603      	mov	r3, r0
 8015be0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f000 f88f 	bl	8015d08 <USBD_Get_USB_Status>
 8015bea:	4603      	mov	r3, r0
 8015bec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bee:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3718      	adds	r7, #24
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	607a      	str	r2, [r7, #4]
 8015c02:	603b      	str	r3, [r7, #0]
 8015c04:	460b      	mov	r3, r1
 8015c06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015c16:	7af9      	ldrb	r1, [r7, #11]
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	f7f1 f97d 	bl	8006f1a <HAL_PCD_EP_Receive>
 8015c20:	4603      	mov	r3, r0
 8015c22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c24:	7dfb      	ldrb	r3, [r7, #23]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f000 f86e 	bl	8015d08 <USBD_Get_USB_Status>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015c30:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3718      	adds	r7, #24
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}

08015c3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b082      	sub	sp, #8
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
 8015c42:	460b      	mov	r3, r1
 8015c44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015c4c:	78fa      	ldrb	r2, [r7, #3]
 8015c4e:	4611      	mov	r1, r2
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7f1 f9ad 	bl	8006fb0 <HAL_PCD_EP_GetRxCount>
 8015c56:	4603      	mov	r3, r0
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3708      	adds	r7, #8
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	460b      	mov	r3, r1
 8015c6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015c6c:	78fb      	ldrb	r3, [r7, #3]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <HAL_PCDEx_LPM_Callback+0x18>
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d01f      	beq.n	8015cb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015c76:	e03b      	b.n	8015cf0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6a1b      	ldr	r3, [r3, #32]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d007      	beq.n	8015c90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015c80:	f000 f83c 	bl	8015cfc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c84:	4b1c      	ldr	r3, [pc, #112]	; (8015cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8015c86:	691b      	ldr	r3, [r3, #16]
 8015c88:	4a1b      	ldr	r2, [pc, #108]	; (8015cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8015c8a:	f023 0306 	bic.w	r3, r3, #6
 8015c8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	6812      	ldr	r2, [r2, #0]
 8015c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ca2:	f023 0301 	bic.w	r3, r3, #1
 8015ca6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7f9 fcbd 	bl	800f62e <USBD_LL_Resume>
    break;
 8015cb4:	e01c      	b.n	8015cf0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	6812      	ldr	r2, [r2, #0]
 8015cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015cc8:	f043 0301 	orr.w	r3, r3, #1
 8015ccc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7f9 fc94 	bl	800f602 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6a1b      	ldr	r3, [r3, #32]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d005      	beq.n	8015cee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ce2:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8015ce4:	691b      	ldr	r3, [r3, #16]
 8015ce6:	4a04      	ldr	r2, [pc, #16]	; (8015cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8015ce8:	f043 0306 	orr.w	r3, r3, #6
 8015cec:	6113      	str	r3, [r2, #16]
    break;
 8015cee:	bf00      	nop
}
 8015cf0:	bf00      	nop
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	e000ed00 	.word	0xe000ed00

08015cfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015d00:	f7ec fb20 	bl	8002344 <SystemClock_Config>
}
 8015d04:	bf00      	nop
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	4603      	mov	r3, r0
 8015d10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d12:	2300      	movs	r3, #0
 8015d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d16:	79fb      	ldrb	r3, [r7, #7]
 8015d18:	2b03      	cmp	r3, #3
 8015d1a:	d817      	bhi.n	8015d4c <USBD_Get_USB_Status+0x44>
 8015d1c:	a201      	add	r2, pc, #4	; (adr r2, 8015d24 <USBD_Get_USB_Status+0x1c>)
 8015d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d22:	bf00      	nop
 8015d24:	08015d35 	.word	0x08015d35
 8015d28:	08015d3b 	.word	0x08015d3b
 8015d2c:	08015d41 	.word	0x08015d41
 8015d30:	08015d47 	.word	0x08015d47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015d34:	2300      	movs	r3, #0
 8015d36:	73fb      	strb	r3, [r7, #15]
    break;
 8015d38:	e00b      	b.n	8015d52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015d3a:	2303      	movs	r3, #3
 8015d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8015d3e:	e008      	b.n	8015d52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015d40:	2301      	movs	r3, #1
 8015d42:	73fb      	strb	r3, [r7, #15]
    break;
 8015d44:	e005      	b.n	8015d52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015d46:	2303      	movs	r3, #3
 8015d48:	73fb      	strb	r3, [r7, #15]
    break;
 8015d4a:	e002      	b.n	8015d52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015d4c:	2303      	movs	r3, #3
 8015d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8015d50:	bf00      	nop
  }
  return usb_status;
 8015d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3714      	adds	r7, #20
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5e:	4770      	bx	lr

08015d60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015d64:	2201      	movs	r2, #1
 8015d66:	490e      	ldr	r1, [pc, #56]	; (8015da0 <MX_USB_HOST_Init+0x40>)
 8015d68:	480e      	ldr	r0, [pc, #56]	; (8015da4 <MX_USB_HOST_Init+0x44>)
 8015d6a:	f7fb f833 	bl	8010dd4 <USBH_Init>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d001      	beq.n	8015d78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015d74:	f7ec fe6a 	bl	8002a4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015d78:	490b      	ldr	r1, [pc, #44]	; (8015da8 <MX_USB_HOST_Init+0x48>)
 8015d7a:	480a      	ldr	r0, [pc, #40]	; (8015da4 <MX_USB_HOST_Init+0x44>)
 8015d7c:	f7fb f8d7 	bl	8010f2e <USBH_RegisterClass>
 8015d80:	4603      	mov	r3, r0
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d001      	beq.n	8015d8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015d86:	f7ec fe61 	bl	8002a4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015d8a:	4806      	ldr	r0, [pc, #24]	; (8015da4 <MX_USB_HOST_Init+0x44>)
 8015d8c:	f7fb f95b 	bl	8011046 <USBH_Start>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d001      	beq.n	8015d9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015d96:	f7ec fe59 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015d9a:	bf00      	nop
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	08015dc1 	.word	0x08015dc1
 8015da4:	20002980 	.word	0x20002980
 8015da8:	20000098 	.word	0x20000098

08015dac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8015db0:	4802      	ldr	r0, [pc, #8]	; (8015dbc <MX_USB_HOST_Process+0x10>)
 8015db2:	f7fb f959 	bl	8011068 <USBH_Process>
}
 8015db6:	bf00      	nop
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	20002980 	.word	0x20002980

08015dc0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b083      	sub	sp, #12
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	460b      	mov	r3, r1
 8015dca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015dcc:	78fb      	ldrb	r3, [r7, #3]
 8015dce:	3b01      	subs	r3, #1
 8015dd0:	2b04      	cmp	r3, #4
 8015dd2:	d819      	bhi.n	8015e08 <USBH_UserProcess+0x48>
 8015dd4:	a201      	add	r2, pc, #4	; (adr r2, 8015ddc <USBH_UserProcess+0x1c>)
 8015dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dda:	bf00      	nop
 8015ddc:	08015e09 	.word	0x08015e09
 8015de0:	08015df9 	.word	0x08015df9
 8015de4:	08015e09 	.word	0x08015e09
 8015de8:	08015e01 	.word	0x08015e01
 8015dec:	08015df1 	.word	0x08015df1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015df0:	4b09      	ldr	r3, [pc, #36]	; (8015e18 <USBH_UserProcess+0x58>)
 8015df2:	2203      	movs	r2, #3
 8015df4:	701a      	strb	r2, [r3, #0]
  break;
 8015df6:	e008      	b.n	8015e0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015df8:	4b07      	ldr	r3, [pc, #28]	; (8015e18 <USBH_UserProcess+0x58>)
 8015dfa:	2202      	movs	r2, #2
 8015dfc:	701a      	strb	r2, [r3, #0]
  break;
 8015dfe:	e004      	b.n	8015e0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015e00:	4b05      	ldr	r3, [pc, #20]	; (8015e18 <USBH_UserProcess+0x58>)
 8015e02:	2201      	movs	r2, #1
 8015e04:	701a      	strb	r2, [r3, #0]
  break;
 8015e06:	e000      	b.n	8015e0a <USBH_UserProcess+0x4a>

  default:
  break;
 8015e08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015e0a:	bf00      	nop
 8015e0c:	370c      	adds	r7, #12
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	20002d58 	.word	0x20002d58

08015e1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b0ac      	sub	sp, #176	; 0xb0
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015e28:	2200      	movs	r2, #0
 8015e2a:	601a      	str	r2, [r3, #0]
 8015e2c:	605a      	str	r2, [r3, #4]
 8015e2e:	609a      	str	r2, [r3, #8]
 8015e30:	60da      	str	r2, [r3, #12]
 8015e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015e34:	f107 0318 	add.w	r3, r7, #24
 8015e38:	2284      	movs	r2, #132	; 0x84
 8015e3a:	2100      	movs	r1, #0
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f000 fb03 	bl	8016448 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015e4a:	d151      	bne.n	8015ef0 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8015e52:	2300      	movs	r3, #0
 8015e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015e58:	f107 0318 	add.w	r3, r7, #24
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7f2 f953 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d001      	beq.n	8015e6c <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8015e68:	f7ec fdf0 	bl	8002a4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e6c:	4b22      	ldr	r3, [pc, #136]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e70:	4a21      	ldr	r2, [pc, #132]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015e72:	f043 0301 	orr.w	r3, r3, #1
 8015e76:	6313      	str	r3, [r2, #48]	; 0x30
 8015e78:	4b1f      	ldr	r3, [pc, #124]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7c:	f003 0301 	and.w	r3, r3, #1
 8015e80:	617b      	str	r3, [r7, #20]
 8015e82:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8015e84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e8c:	2302      	movs	r3, #2
 8015e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e92:	2300      	movs	r3, #0
 8015e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e98:	2303      	movs	r3, #3
 8015e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015e9e:	230a      	movs	r3, #10
 8015ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ea4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	4814      	ldr	r0, [pc, #80]	; (8015efc <HAL_HCD_MspInit+0xe0>)
 8015eac:	f7ee fa32 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015eb0:	4b11      	ldr	r3, [pc, #68]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eb4:	4a10      	ldr	r2, [pc, #64]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015eba:	6353      	str	r3, [r2, #52]	; 0x34
 8015ebc:	4b0e      	ldr	r3, [pc, #56]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ec4:	613b      	str	r3, [r7, #16]
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	4b0b      	ldr	r3, [pc, #44]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ecc:	4a0a      	ldr	r2, [pc, #40]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8015ed4:	4b08      	ldr	r3, [pc, #32]	; (8015ef8 <HAL_HCD_MspInit+0xdc>)
 8015ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015edc:	60fb      	str	r3, [r7, #12]
 8015ede:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	2100      	movs	r1, #0
 8015ee4:	2043      	movs	r0, #67	; 0x43
 8015ee6:	f7ed fe38 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015eea:	2043      	movs	r0, #67	; 0x43
 8015eec:	f7ed fe51 	bl	8003b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015ef0:	bf00      	nop
 8015ef2:	37b0      	adds	r7, #176	; 0xb0
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}
 8015ef8:	40023800 	.word	0x40023800
 8015efc:	40020000 	.word	0x40020000

08015f00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fb fc89 	bl	8011826 <USBH_LL_IncTimer>
}
 8015f14:	bf00      	nop
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7fb fcc1 	bl	80118b2 <USBH_LL_Connect>
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}

08015f38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fb fcca 	bl	80118e0 <USBH_LL_Disconnect>
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	460b      	mov	r3, r1
 8015f5e:	70fb      	strb	r3, [r7, #3]
 8015f60:	4613      	mov	r3, r2
 8015f62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015f64:	bf00      	nop
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr

08015f70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fb fc7b 	bl	801187a <USBH_LL_PortEnabled>
}
 8015f84:	bf00      	nop
 8015f86:	3708      	adds	r7, #8
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7fb fc7b 	bl	8011896 <USBH_LL_PortDisabled>
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015fb6:	2b01      	cmp	r3, #1
 8015fb8:	d12a      	bne.n	8016010 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015fba:	4a18      	ldr	r2, [pc, #96]	; (801601c <USBH_LL_Init+0x74>)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4a15      	ldr	r2, [pc, #84]	; (801601c <USBH_LL_Init+0x74>)
 8015fc6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015fca:	4b14      	ldr	r3, [pc, #80]	; (801601c <USBH_LL_Init+0x74>)
 8015fcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015fd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015fd2:	4b12      	ldr	r3, [pc, #72]	; (801601c <USBH_LL_Init+0x74>)
 8015fd4:	2208      	movs	r2, #8
 8015fd6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015fd8:	4b10      	ldr	r3, [pc, #64]	; (801601c <USBH_LL_Init+0x74>)
 8015fda:	2201      	movs	r2, #1
 8015fdc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015fde:	4b0f      	ldr	r3, [pc, #60]	; (801601c <USBH_LL_Init+0x74>)
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015fe4:	4b0d      	ldr	r3, [pc, #52]	; (801601c <USBH_LL_Init+0x74>)
 8015fe6:	2202      	movs	r2, #2
 8015fe8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015fea:	4b0c      	ldr	r3, [pc, #48]	; (801601c <USBH_LL_Init+0x74>)
 8015fec:	2200      	movs	r2, #0
 8015fee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015ff0:	480a      	ldr	r0, [pc, #40]	; (801601c <USBH_LL_Init+0x74>)
 8015ff2:	f7ee fb6e 	bl	80046d2 <HAL_HCD_Init>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d001      	beq.n	8016000 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015ffc:	f7ec fd26 	bl	8002a4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8016000:	4806      	ldr	r0, [pc, #24]	; (801601c <USBH_LL_Init+0x74>)
 8016002:	f7ee ff52 	bl	8004eaa <HAL_HCD_GetCurrentFrame>
 8016006:	4603      	mov	r3, r0
 8016008:	4619      	mov	r1, r3
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7fb fbfc 	bl	8011808 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8016010:	2300      	movs	r3, #0
}
 8016012:	4618      	mov	r0, r3
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	20002d5c 	.word	0x20002d5c

08016020 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016028:	2300      	movs	r3, #0
 801602a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801602c:	2300      	movs	r3, #0
 801602e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016036:	4618      	mov	r0, r3
 8016038:	f7ee fec1 	bl	8004dbe <HAL_HCD_Start>
 801603c:	4603      	mov	r3, r0
 801603e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016040:	7bfb      	ldrb	r3, [r7, #15]
 8016042:	4618      	mov	r0, r3
 8016044:	f000 f95c 	bl	8016300 <USBH_Get_USB_Status>
 8016048:	4603      	mov	r3, r0
 801604a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801604c:	7bbb      	ldrb	r3, [r7, #14]
}
 801604e:	4618      	mov	r0, r3
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}

08016056 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8016056:	b580      	push	{r7, lr}
 8016058:	b084      	sub	sp, #16
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801605e:	2300      	movs	r3, #0
 8016060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016062:	2300      	movs	r3, #0
 8016064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801606c:	4618      	mov	r0, r3
 801606e:	f7ee fec9 	bl	8004e04 <HAL_HCD_Stop>
 8016072:	4603      	mov	r3, r0
 8016074:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016076:	7bfb      	ldrb	r3, [r7, #15]
 8016078:	4618      	mov	r0, r3
 801607a:	f000 f941 	bl	8016300 <USBH_Get_USB_Status>
 801607e:	4603      	mov	r3, r0
 8016080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016082:	7bbb      	ldrb	r3, [r7, #14]
}
 8016084:	4618      	mov	r0, r3
 8016086:	3710      	adds	r7, #16
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}

0801608c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8016094:	2301      	movs	r3, #1
 8016096:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ee ff11 	bl	8004ec6 <HAL_HCD_GetCurrentSpeed>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2b02      	cmp	r3, #2
 80160a8:	d00c      	beq.n	80160c4 <USBH_LL_GetSpeed+0x38>
 80160aa:	2b02      	cmp	r3, #2
 80160ac:	d80d      	bhi.n	80160ca <USBH_LL_GetSpeed+0x3e>
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d002      	beq.n	80160b8 <USBH_LL_GetSpeed+0x2c>
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d003      	beq.n	80160be <USBH_LL_GetSpeed+0x32>
 80160b6:	e008      	b.n	80160ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80160b8:	2300      	movs	r3, #0
 80160ba:	73fb      	strb	r3, [r7, #15]
    break;
 80160bc:	e008      	b.n	80160d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80160be:	2301      	movs	r3, #1
 80160c0:	73fb      	strb	r3, [r7, #15]
    break;
 80160c2:	e005      	b.n	80160d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80160c4:	2302      	movs	r3, #2
 80160c6:	73fb      	strb	r3, [r7, #15]
    break;
 80160c8:	e002      	b.n	80160d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80160ca:	2301      	movs	r3, #1
 80160cc:	73fb      	strb	r3, [r7, #15]
    break;
 80160ce:	bf00      	nop
  }
  return  speed;
 80160d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3710      	adds	r7, #16
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}

080160da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80160da:	b580      	push	{r7, lr}
 80160dc:	b084      	sub	sp, #16
 80160de:	af00      	add	r7, sp, #0
 80160e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160e2:	2300      	movs	r3, #0
 80160e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80160e6:	2300      	movs	r3, #0
 80160e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7ee fea4 	bl	8004e3e <HAL_HCD_ResetPort>
 80160f6:	4603      	mov	r3, r0
 80160f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80160fa:	7bfb      	ldrb	r3, [r7, #15]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f000 f8ff 	bl	8016300 <USBH_Get_USB_Status>
 8016102:	4603      	mov	r3, r0
 8016104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016106:	7bbb      	ldrb	r3, [r7, #14]
}
 8016108:	4618      	mov	r0, r3
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	460b      	mov	r3, r1
 801611a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016122:	78fa      	ldrb	r2, [r7, #3]
 8016124:	4611      	mov	r1, r2
 8016126:	4618      	mov	r0, r3
 8016128:	f7ee feab 	bl	8004e82 <HAL_HCD_HC_GetXferCount>
 801612c:	4603      	mov	r3, r0
}
 801612e:	4618      	mov	r0, r3
 8016130:	3708      	adds	r7, #8
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016136:	b590      	push	{r4, r7, lr}
 8016138:	b089      	sub	sp, #36	; 0x24
 801613a:	af04      	add	r7, sp, #16
 801613c:	6078      	str	r0, [r7, #4]
 801613e:	4608      	mov	r0, r1
 8016140:	4611      	mov	r1, r2
 8016142:	461a      	mov	r2, r3
 8016144:	4603      	mov	r3, r0
 8016146:	70fb      	strb	r3, [r7, #3]
 8016148:	460b      	mov	r3, r1
 801614a:	70bb      	strb	r3, [r7, #2]
 801614c:	4613      	mov	r3, r2
 801614e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016150:	2300      	movs	r3, #0
 8016152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016154:	2300      	movs	r3, #0
 8016156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801615e:	787c      	ldrb	r4, [r7, #1]
 8016160:	78ba      	ldrb	r2, [r7, #2]
 8016162:	78f9      	ldrb	r1, [r7, #3]
 8016164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016166:	9302      	str	r3, [sp, #8]
 8016168:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801616c:	9301      	str	r3, [sp, #4]
 801616e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	4623      	mov	r3, r4
 8016176:	f7ee fb0e 	bl	8004796 <HAL_HCD_HC_Init>
 801617a:	4603      	mov	r3, r0
 801617c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801617e:	7bfb      	ldrb	r3, [r7, #15]
 8016180:	4618      	mov	r0, r3
 8016182:	f000 f8bd 	bl	8016300 <USBH_Get_USB_Status>
 8016186:	4603      	mov	r3, r0
 8016188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801618a:	7bbb      	ldrb	r3, [r7, #14]
}
 801618c:	4618      	mov	r0, r3
 801618e:	3714      	adds	r7, #20
 8016190:	46bd      	mov	sp, r7
 8016192:	bd90      	pop	{r4, r7, pc}

08016194 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b084      	sub	sp, #16
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	460b      	mov	r3, r1
 801619e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161a0:	2300      	movs	r3, #0
 80161a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80161a4:	2300      	movs	r3, #0
 80161a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80161ae:	78fa      	ldrb	r2, [r7, #3]
 80161b0:	4611      	mov	r1, r2
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7ee fb7e 	bl	80048b4 <HAL_HCD_HC_Halt>
 80161b8:	4603      	mov	r3, r0
 80161ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80161bc:	7bfb      	ldrb	r3, [r7, #15]
 80161be:	4618      	mov	r0, r3
 80161c0:	f000 f89e 	bl	8016300 <USBH_Get_USB_Status>
 80161c4:	4603      	mov	r3, r0
 80161c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3710      	adds	r7, #16
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80161d2:	b590      	push	{r4, r7, lr}
 80161d4:	b089      	sub	sp, #36	; 0x24
 80161d6:	af04      	add	r7, sp, #16
 80161d8:	6078      	str	r0, [r7, #4]
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
 80161de:	461a      	mov	r2, r3
 80161e0:	4603      	mov	r3, r0
 80161e2:	70fb      	strb	r3, [r7, #3]
 80161e4:	460b      	mov	r3, r1
 80161e6:	70bb      	strb	r3, [r7, #2]
 80161e8:	4613      	mov	r3, r2
 80161ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161ec:	2300      	movs	r3, #0
 80161ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80161f0:	2300      	movs	r3, #0
 80161f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80161fa:	787c      	ldrb	r4, [r7, #1]
 80161fc:	78ba      	ldrb	r2, [r7, #2]
 80161fe:	78f9      	ldrb	r1, [r7, #3]
 8016200:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016204:	9303      	str	r3, [sp, #12]
 8016206:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016208:	9302      	str	r3, [sp, #8]
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	9301      	str	r3, [sp, #4]
 801620e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	4623      	mov	r3, r4
 8016216:	f7ee fb71 	bl	80048fc <HAL_HCD_HC_SubmitRequest>
 801621a:	4603      	mov	r3, r0
 801621c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801621e:	7bfb      	ldrb	r3, [r7, #15]
 8016220:	4618      	mov	r0, r3
 8016222:	f000 f86d 	bl	8016300 <USBH_Get_USB_Status>
 8016226:	4603      	mov	r3, r0
 8016228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801622a:	7bbb      	ldrb	r3, [r7, #14]
}
 801622c:	4618      	mov	r0, r3
 801622e:	3714      	adds	r7, #20
 8016230:	46bd      	mov	sp, r7
 8016232:	bd90      	pop	{r4, r7, pc}

08016234 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	460b      	mov	r3, r1
 801623e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016246:	78fa      	ldrb	r2, [r7, #3]
 8016248:	4611      	mov	r1, r2
 801624a:	4618      	mov	r0, r3
 801624c:	f7ee fe05 	bl	8004e5a <HAL_HCD_HC_GetURBState>
 8016250:	4603      	mov	r3, r0
}
 8016252:	4618      	mov	r0, r3
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b082      	sub	sp, #8
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	460b      	mov	r3, r1
 8016264:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801626c:	2b01      	cmp	r3, #1
 801626e:	d103      	bne.n	8016278 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	4618      	mov	r0, r3
 8016274:	f000 f870 	bl	8016358 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016278:	20c8      	movs	r0, #200	; 0xc8
 801627a:	f7ed f8db 	bl	8003434 <HAL_Delay>
  return USBH_OK;
 801627e:	2300      	movs	r3, #0
}
 8016280:	4618      	mov	r0, r3
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016288:	b480      	push	{r7}
 801628a:	b085      	sub	sp, #20
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	460b      	mov	r3, r1
 8016292:	70fb      	strb	r3, [r7, #3]
 8016294:	4613      	mov	r3, r2
 8016296:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801629e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80162a0:	78fb      	ldrb	r3, [r7, #3]
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	212c      	movs	r1, #44	; 0x2c
 80162a6:	fb01 f303 	mul.w	r3, r1, r3
 80162aa:	4413      	add	r3, r2
 80162ac:	333b      	adds	r3, #59	; 0x3b
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d009      	beq.n	80162c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80162b4:	78fb      	ldrb	r3, [r7, #3]
 80162b6:	68fa      	ldr	r2, [r7, #12]
 80162b8:	212c      	movs	r1, #44	; 0x2c
 80162ba:	fb01 f303 	mul.w	r3, r1, r3
 80162be:	4413      	add	r3, r2
 80162c0:	3354      	adds	r3, #84	; 0x54
 80162c2:	78ba      	ldrb	r2, [r7, #2]
 80162c4:	701a      	strb	r2, [r3, #0]
 80162c6:	e008      	b.n	80162da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80162c8:	78fb      	ldrb	r3, [r7, #3]
 80162ca:	68fa      	ldr	r2, [r7, #12]
 80162cc:	212c      	movs	r1, #44	; 0x2c
 80162ce:	fb01 f303 	mul.w	r3, r1, r3
 80162d2:	4413      	add	r3, r2
 80162d4:	3355      	adds	r3, #85	; 0x55
 80162d6:	78ba      	ldrb	r2, [r7, #2]
 80162d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80162da:	2300      	movs	r3, #0
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3714      	adds	r7, #20
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f7ed f89f 	bl	8003434 <HAL_Delay>
}
 80162f6:	bf00      	nop
 80162f8:	3708      	adds	r7, #8
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
	...

08016300 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016300:	b480      	push	{r7}
 8016302:	b085      	sub	sp, #20
 8016304:	af00      	add	r7, sp, #0
 8016306:	4603      	mov	r3, r0
 8016308:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801630a:	2300      	movs	r3, #0
 801630c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801630e:	79fb      	ldrb	r3, [r7, #7]
 8016310:	2b03      	cmp	r3, #3
 8016312:	d817      	bhi.n	8016344 <USBH_Get_USB_Status+0x44>
 8016314:	a201      	add	r2, pc, #4	; (adr r2, 801631c <USBH_Get_USB_Status+0x1c>)
 8016316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801631a:	bf00      	nop
 801631c:	0801632d 	.word	0x0801632d
 8016320:	08016333 	.word	0x08016333
 8016324:	08016339 	.word	0x08016339
 8016328:	0801633f 	.word	0x0801633f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801632c:	2300      	movs	r3, #0
 801632e:	73fb      	strb	r3, [r7, #15]
    break;
 8016330:	e00b      	b.n	801634a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016332:	2302      	movs	r3, #2
 8016334:	73fb      	strb	r3, [r7, #15]
    break;
 8016336:	e008      	b.n	801634a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016338:	2301      	movs	r3, #1
 801633a:	73fb      	strb	r3, [r7, #15]
    break;
 801633c:	e005      	b.n	801634a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801633e:	2302      	movs	r3, #2
 8016340:	73fb      	strb	r3, [r7, #15]
    break;
 8016342:	e002      	b.n	801634a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016344:	2302      	movs	r3, #2
 8016346:	73fb      	strb	r3, [r7, #15]
    break;
 8016348:	bf00      	nop
  }
  return usb_status;
 801634a:	7bfb      	ldrb	r3, [r7, #15]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3714      	adds	r7, #20
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr

08016358 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	4603      	mov	r3, r0
 8016360:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8016362:	79fb      	ldrb	r3, [r7, #7]
 8016364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016366:	79fb      	ldrb	r3, [r7, #7]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d102      	bne.n	8016372 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801636c:	2300      	movs	r3, #0
 801636e:	73fb      	strb	r3, [r7, #15]
 8016370:	e001      	b.n	8016376 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8016372:	2301      	movs	r3, #1
 8016374:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8016376:	7bfb      	ldrb	r3, [r7, #15]
 8016378:	461a      	mov	r2, r3
 801637a:	2104      	movs	r1, #4
 801637c:	4803      	ldr	r0, [pc, #12]	; (801638c <MX_DriverVbusFS+0x34>)
 801637e:	f7ee f975 	bl	800466c <HAL_GPIO_WritePin>
}
 8016382:	bf00      	nop
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	40022000 	.word	0x40022000

08016390 <atoi>:
 8016390:	220a      	movs	r2, #10
 8016392:	2100      	movs	r1, #0
 8016394:	f000 beb8 	b.w	8017108 <strtol>

08016398 <__errno>:
 8016398:	4b01      	ldr	r3, [pc, #4]	; (80163a0 <__errno+0x8>)
 801639a:	6818      	ldr	r0, [r3, #0]
 801639c:	4770      	bx	lr
 801639e:	bf00      	nop
 80163a0:	2000012c 	.word	0x2000012c

080163a4 <__libc_init_array>:
 80163a4:	b570      	push	{r4, r5, r6, lr}
 80163a6:	4d0d      	ldr	r5, [pc, #52]	; (80163dc <__libc_init_array+0x38>)
 80163a8:	4c0d      	ldr	r4, [pc, #52]	; (80163e0 <__libc_init_array+0x3c>)
 80163aa:	1b64      	subs	r4, r4, r5
 80163ac:	10a4      	asrs	r4, r4, #2
 80163ae:	2600      	movs	r6, #0
 80163b0:	42a6      	cmp	r6, r4
 80163b2:	d109      	bne.n	80163c8 <__libc_init_array+0x24>
 80163b4:	4d0b      	ldr	r5, [pc, #44]	; (80163e4 <__libc_init_array+0x40>)
 80163b6:	4c0c      	ldr	r4, [pc, #48]	; (80163e8 <__libc_init_array+0x44>)
 80163b8:	f003 f802 	bl	80193c0 <_init>
 80163bc:	1b64      	subs	r4, r4, r5
 80163be:	10a4      	asrs	r4, r4, #2
 80163c0:	2600      	movs	r6, #0
 80163c2:	42a6      	cmp	r6, r4
 80163c4:	d105      	bne.n	80163d2 <__libc_init_array+0x2e>
 80163c6:	bd70      	pop	{r4, r5, r6, pc}
 80163c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80163cc:	4798      	blx	r3
 80163ce:	3601      	adds	r6, #1
 80163d0:	e7ee      	b.n	80163b0 <__libc_init_array+0xc>
 80163d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80163d6:	4798      	blx	r3
 80163d8:	3601      	adds	r6, #1
 80163da:	e7f2      	b.n	80163c2 <__libc_init_array+0x1e>
 80163dc:	0801a354 	.word	0x0801a354
 80163e0:	0801a354 	.word	0x0801a354
 80163e4:	0801a354 	.word	0x0801a354
 80163e8:	0801a358 	.word	0x0801a358

080163ec <malloc>:
 80163ec:	4b02      	ldr	r3, [pc, #8]	; (80163f8 <malloc+0xc>)
 80163ee:	4601      	mov	r1, r0
 80163f0:	6818      	ldr	r0, [r3, #0]
 80163f2:	f000 b89d 	b.w	8016530 <_malloc_r>
 80163f6:	bf00      	nop
 80163f8:	2000012c 	.word	0x2000012c

080163fc <free>:
 80163fc:	4b02      	ldr	r3, [pc, #8]	; (8016408 <free+0xc>)
 80163fe:	4601      	mov	r1, r0
 8016400:	6818      	ldr	r0, [r3, #0]
 8016402:	f000 b829 	b.w	8016458 <_free_r>
 8016406:	bf00      	nop
 8016408:	2000012c 	.word	0x2000012c

0801640c <memcmp>:
 801640c:	b510      	push	{r4, lr}
 801640e:	3901      	subs	r1, #1
 8016410:	4402      	add	r2, r0
 8016412:	4290      	cmp	r0, r2
 8016414:	d101      	bne.n	801641a <memcmp+0xe>
 8016416:	2000      	movs	r0, #0
 8016418:	e005      	b.n	8016426 <memcmp+0x1a>
 801641a:	7803      	ldrb	r3, [r0, #0]
 801641c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016420:	42a3      	cmp	r3, r4
 8016422:	d001      	beq.n	8016428 <memcmp+0x1c>
 8016424:	1b18      	subs	r0, r3, r4
 8016426:	bd10      	pop	{r4, pc}
 8016428:	3001      	adds	r0, #1
 801642a:	e7f2      	b.n	8016412 <memcmp+0x6>

0801642c <memcpy>:
 801642c:	440a      	add	r2, r1
 801642e:	4291      	cmp	r1, r2
 8016430:	f100 33ff 	add.w	r3, r0, #4294967295
 8016434:	d100      	bne.n	8016438 <memcpy+0xc>
 8016436:	4770      	bx	lr
 8016438:	b510      	push	{r4, lr}
 801643a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801643e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016442:	4291      	cmp	r1, r2
 8016444:	d1f9      	bne.n	801643a <memcpy+0xe>
 8016446:	bd10      	pop	{r4, pc}

08016448 <memset>:
 8016448:	4402      	add	r2, r0
 801644a:	4603      	mov	r3, r0
 801644c:	4293      	cmp	r3, r2
 801644e:	d100      	bne.n	8016452 <memset+0xa>
 8016450:	4770      	bx	lr
 8016452:	f803 1b01 	strb.w	r1, [r3], #1
 8016456:	e7f9      	b.n	801644c <memset+0x4>

08016458 <_free_r>:
 8016458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801645a:	2900      	cmp	r1, #0
 801645c:	d044      	beq.n	80164e8 <_free_r+0x90>
 801645e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016462:	9001      	str	r0, [sp, #4]
 8016464:	2b00      	cmp	r3, #0
 8016466:	f1a1 0404 	sub.w	r4, r1, #4
 801646a:	bfb8      	it	lt
 801646c:	18e4      	addlt	r4, r4, r3
 801646e:	f001 fd03 	bl	8017e78 <__malloc_lock>
 8016472:	4a1e      	ldr	r2, [pc, #120]	; (80164ec <_free_r+0x94>)
 8016474:	9801      	ldr	r0, [sp, #4]
 8016476:	6813      	ldr	r3, [r2, #0]
 8016478:	b933      	cbnz	r3, 8016488 <_free_r+0x30>
 801647a:	6063      	str	r3, [r4, #4]
 801647c:	6014      	str	r4, [r2, #0]
 801647e:	b003      	add	sp, #12
 8016480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016484:	f001 bcfe 	b.w	8017e84 <__malloc_unlock>
 8016488:	42a3      	cmp	r3, r4
 801648a:	d908      	bls.n	801649e <_free_r+0x46>
 801648c:	6825      	ldr	r5, [r4, #0]
 801648e:	1961      	adds	r1, r4, r5
 8016490:	428b      	cmp	r3, r1
 8016492:	bf01      	itttt	eq
 8016494:	6819      	ldreq	r1, [r3, #0]
 8016496:	685b      	ldreq	r3, [r3, #4]
 8016498:	1949      	addeq	r1, r1, r5
 801649a:	6021      	streq	r1, [r4, #0]
 801649c:	e7ed      	b.n	801647a <_free_r+0x22>
 801649e:	461a      	mov	r2, r3
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	b10b      	cbz	r3, 80164a8 <_free_r+0x50>
 80164a4:	42a3      	cmp	r3, r4
 80164a6:	d9fa      	bls.n	801649e <_free_r+0x46>
 80164a8:	6811      	ldr	r1, [r2, #0]
 80164aa:	1855      	adds	r5, r2, r1
 80164ac:	42a5      	cmp	r5, r4
 80164ae:	d10b      	bne.n	80164c8 <_free_r+0x70>
 80164b0:	6824      	ldr	r4, [r4, #0]
 80164b2:	4421      	add	r1, r4
 80164b4:	1854      	adds	r4, r2, r1
 80164b6:	42a3      	cmp	r3, r4
 80164b8:	6011      	str	r1, [r2, #0]
 80164ba:	d1e0      	bne.n	801647e <_free_r+0x26>
 80164bc:	681c      	ldr	r4, [r3, #0]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	6053      	str	r3, [r2, #4]
 80164c2:	4421      	add	r1, r4
 80164c4:	6011      	str	r1, [r2, #0]
 80164c6:	e7da      	b.n	801647e <_free_r+0x26>
 80164c8:	d902      	bls.n	80164d0 <_free_r+0x78>
 80164ca:	230c      	movs	r3, #12
 80164cc:	6003      	str	r3, [r0, #0]
 80164ce:	e7d6      	b.n	801647e <_free_r+0x26>
 80164d0:	6825      	ldr	r5, [r4, #0]
 80164d2:	1961      	adds	r1, r4, r5
 80164d4:	428b      	cmp	r3, r1
 80164d6:	bf04      	itt	eq
 80164d8:	6819      	ldreq	r1, [r3, #0]
 80164da:	685b      	ldreq	r3, [r3, #4]
 80164dc:	6063      	str	r3, [r4, #4]
 80164de:	bf04      	itt	eq
 80164e0:	1949      	addeq	r1, r1, r5
 80164e2:	6021      	streq	r1, [r4, #0]
 80164e4:	6054      	str	r4, [r2, #4]
 80164e6:	e7ca      	b.n	801647e <_free_r+0x26>
 80164e8:	b003      	add	sp, #12
 80164ea:	bd30      	pop	{r4, r5, pc}
 80164ec:	20003060 	.word	0x20003060

080164f0 <sbrk_aligned>:
 80164f0:	b570      	push	{r4, r5, r6, lr}
 80164f2:	4e0e      	ldr	r6, [pc, #56]	; (801652c <sbrk_aligned+0x3c>)
 80164f4:	460c      	mov	r4, r1
 80164f6:	6831      	ldr	r1, [r6, #0]
 80164f8:	4605      	mov	r5, r0
 80164fa:	b911      	cbnz	r1, 8016502 <sbrk_aligned+0x12>
 80164fc:	f000 fcf6 	bl	8016eec <_sbrk_r>
 8016500:	6030      	str	r0, [r6, #0]
 8016502:	4621      	mov	r1, r4
 8016504:	4628      	mov	r0, r5
 8016506:	f000 fcf1 	bl	8016eec <_sbrk_r>
 801650a:	1c43      	adds	r3, r0, #1
 801650c:	d00a      	beq.n	8016524 <sbrk_aligned+0x34>
 801650e:	1cc4      	adds	r4, r0, #3
 8016510:	f024 0403 	bic.w	r4, r4, #3
 8016514:	42a0      	cmp	r0, r4
 8016516:	d007      	beq.n	8016528 <sbrk_aligned+0x38>
 8016518:	1a21      	subs	r1, r4, r0
 801651a:	4628      	mov	r0, r5
 801651c:	f000 fce6 	bl	8016eec <_sbrk_r>
 8016520:	3001      	adds	r0, #1
 8016522:	d101      	bne.n	8016528 <sbrk_aligned+0x38>
 8016524:	f04f 34ff 	mov.w	r4, #4294967295
 8016528:	4620      	mov	r0, r4
 801652a:	bd70      	pop	{r4, r5, r6, pc}
 801652c:	20003064 	.word	0x20003064

08016530 <_malloc_r>:
 8016530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016534:	1ccd      	adds	r5, r1, #3
 8016536:	f025 0503 	bic.w	r5, r5, #3
 801653a:	3508      	adds	r5, #8
 801653c:	2d0c      	cmp	r5, #12
 801653e:	bf38      	it	cc
 8016540:	250c      	movcc	r5, #12
 8016542:	2d00      	cmp	r5, #0
 8016544:	4607      	mov	r7, r0
 8016546:	db01      	blt.n	801654c <_malloc_r+0x1c>
 8016548:	42a9      	cmp	r1, r5
 801654a:	d905      	bls.n	8016558 <_malloc_r+0x28>
 801654c:	230c      	movs	r3, #12
 801654e:	603b      	str	r3, [r7, #0]
 8016550:	2600      	movs	r6, #0
 8016552:	4630      	mov	r0, r6
 8016554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016558:	4e2e      	ldr	r6, [pc, #184]	; (8016614 <_malloc_r+0xe4>)
 801655a:	f001 fc8d 	bl	8017e78 <__malloc_lock>
 801655e:	6833      	ldr	r3, [r6, #0]
 8016560:	461c      	mov	r4, r3
 8016562:	bb34      	cbnz	r4, 80165b2 <_malloc_r+0x82>
 8016564:	4629      	mov	r1, r5
 8016566:	4638      	mov	r0, r7
 8016568:	f7ff ffc2 	bl	80164f0 <sbrk_aligned>
 801656c:	1c43      	adds	r3, r0, #1
 801656e:	4604      	mov	r4, r0
 8016570:	d14d      	bne.n	801660e <_malloc_r+0xde>
 8016572:	6834      	ldr	r4, [r6, #0]
 8016574:	4626      	mov	r6, r4
 8016576:	2e00      	cmp	r6, #0
 8016578:	d140      	bne.n	80165fc <_malloc_r+0xcc>
 801657a:	6823      	ldr	r3, [r4, #0]
 801657c:	4631      	mov	r1, r6
 801657e:	4638      	mov	r0, r7
 8016580:	eb04 0803 	add.w	r8, r4, r3
 8016584:	f000 fcb2 	bl	8016eec <_sbrk_r>
 8016588:	4580      	cmp	r8, r0
 801658a:	d13a      	bne.n	8016602 <_malloc_r+0xd2>
 801658c:	6821      	ldr	r1, [r4, #0]
 801658e:	3503      	adds	r5, #3
 8016590:	1a6d      	subs	r5, r5, r1
 8016592:	f025 0503 	bic.w	r5, r5, #3
 8016596:	3508      	adds	r5, #8
 8016598:	2d0c      	cmp	r5, #12
 801659a:	bf38      	it	cc
 801659c:	250c      	movcc	r5, #12
 801659e:	4629      	mov	r1, r5
 80165a0:	4638      	mov	r0, r7
 80165a2:	f7ff ffa5 	bl	80164f0 <sbrk_aligned>
 80165a6:	3001      	adds	r0, #1
 80165a8:	d02b      	beq.n	8016602 <_malloc_r+0xd2>
 80165aa:	6823      	ldr	r3, [r4, #0]
 80165ac:	442b      	add	r3, r5
 80165ae:	6023      	str	r3, [r4, #0]
 80165b0:	e00e      	b.n	80165d0 <_malloc_r+0xa0>
 80165b2:	6822      	ldr	r2, [r4, #0]
 80165b4:	1b52      	subs	r2, r2, r5
 80165b6:	d41e      	bmi.n	80165f6 <_malloc_r+0xc6>
 80165b8:	2a0b      	cmp	r2, #11
 80165ba:	d916      	bls.n	80165ea <_malloc_r+0xba>
 80165bc:	1961      	adds	r1, r4, r5
 80165be:	42a3      	cmp	r3, r4
 80165c0:	6025      	str	r5, [r4, #0]
 80165c2:	bf18      	it	ne
 80165c4:	6059      	strne	r1, [r3, #4]
 80165c6:	6863      	ldr	r3, [r4, #4]
 80165c8:	bf08      	it	eq
 80165ca:	6031      	streq	r1, [r6, #0]
 80165cc:	5162      	str	r2, [r4, r5]
 80165ce:	604b      	str	r3, [r1, #4]
 80165d0:	4638      	mov	r0, r7
 80165d2:	f104 060b 	add.w	r6, r4, #11
 80165d6:	f001 fc55 	bl	8017e84 <__malloc_unlock>
 80165da:	f026 0607 	bic.w	r6, r6, #7
 80165de:	1d23      	adds	r3, r4, #4
 80165e0:	1af2      	subs	r2, r6, r3
 80165e2:	d0b6      	beq.n	8016552 <_malloc_r+0x22>
 80165e4:	1b9b      	subs	r3, r3, r6
 80165e6:	50a3      	str	r3, [r4, r2]
 80165e8:	e7b3      	b.n	8016552 <_malloc_r+0x22>
 80165ea:	6862      	ldr	r2, [r4, #4]
 80165ec:	42a3      	cmp	r3, r4
 80165ee:	bf0c      	ite	eq
 80165f0:	6032      	streq	r2, [r6, #0]
 80165f2:	605a      	strne	r2, [r3, #4]
 80165f4:	e7ec      	b.n	80165d0 <_malloc_r+0xa0>
 80165f6:	4623      	mov	r3, r4
 80165f8:	6864      	ldr	r4, [r4, #4]
 80165fa:	e7b2      	b.n	8016562 <_malloc_r+0x32>
 80165fc:	4634      	mov	r4, r6
 80165fe:	6876      	ldr	r6, [r6, #4]
 8016600:	e7b9      	b.n	8016576 <_malloc_r+0x46>
 8016602:	230c      	movs	r3, #12
 8016604:	603b      	str	r3, [r7, #0]
 8016606:	4638      	mov	r0, r7
 8016608:	f001 fc3c 	bl	8017e84 <__malloc_unlock>
 801660c:	e7a1      	b.n	8016552 <_malloc_r+0x22>
 801660e:	6025      	str	r5, [r4, #0]
 8016610:	e7de      	b.n	80165d0 <_malloc_r+0xa0>
 8016612:	bf00      	nop
 8016614:	20003060 	.word	0x20003060

08016618 <__cvt>:
 8016618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801661c:	ec55 4b10 	vmov	r4, r5, d0
 8016620:	2d00      	cmp	r5, #0
 8016622:	460e      	mov	r6, r1
 8016624:	4619      	mov	r1, r3
 8016626:	462b      	mov	r3, r5
 8016628:	bfbb      	ittet	lt
 801662a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801662e:	461d      	movlt	r5, r3
 8016630:	2300      	movge	r3, #0
 8016632:	232d      	movlt	r3, #45	; 0x2d
 8016634:	700b      	strb	r3, [r1, #0]
 8016636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801663c:	4691      	mov	r9, r2
 801663e:	f023 0820 	bic.w	r8, r3, #32
 8016642:	bfbc      	itt	lt
 8016644:	4622      	movlt	r2, r4
 8016646:	4614      	movlt	r4, r2
 8016648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801664c:	d005      	beq.n	801665a <__cvt+0x42>
 801664e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016652:	d100      	bne.n	8016656 <__cvt+0x3e>
 8016654:	3601      	adds	r6, #1
 8016656:	2102      	movs	r1, #2
 8016658:	e000      	b.n	801665c <__cvt+0x44>
 801665a:	2103      	movs	r1, #3
 801665c:	ab03      	add	r3, sp, #12
 801665e:	9301      	str	r3, [sp, #4]
 8016660:	ab02      	add	r3, sp, #8
 8016662:	9300      	str	r3, [sp, #0]
 8016664:	ec45 4b10 	vmov	d0, r4, r5
 8016668:	4653      	mov	r3, sl
 801666a:	4632      	mov	r2, r6
 801666c:	f000 fe00 	bl	8017270 <_dtoa_r>
 8016670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016674:	4607      	mov	r7, r0
 8016676:	d102      	bne.n	801667e <__cvt+0x66>
 8016678:	f019 0f01 	tst.w	r9, #1
 801667c:	d022      	beq.n	80166c4 <__cvt+0xac>
 801667e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016682:	eb07 0906 	add.w	r9, r7, r6
 8016686:	d110      	bne.n	80166aa <__cvt+0x92>
 8016688:	783b      	ldrb	r3, [r7, #0]
 801668a:	2b30      	cmp	r3, #48	; 0x30
 801668c:	d10a      	bne.n	80166a4 <__cvt+0x8c>
 801668e:	2200      	movs	r2, #0
 8016690:	2300      	movs	r3, #0
 8016692:	4620      	mov	r0, r4
 8016694:	4629      	mov	r1, r5
 8016696:	f7ea fa37 	bl	8000b08 <__aeabi_dcmpeq>
 801669a:	b918      	cbnz	r0, 80166a4 <__cvt+0x8c>
 801669c:	f1c6 0601 	rsb	r6, r6, #1
 80166a0:	f8ca 6000 	str.w	r6, [sl]
 80166a4:	f8da 3000 	ldr.w	r3, [sl]
 80166a8:	4499      	add	r9, r3
 80166aa:	2200      	movs	r2, #0
 80166ac:	2300      	movs	r3, #0
 80166ae:	4620      	mov	r0, r4
 80166b0:	4629      	mov	r1, r5
 80166b2:	f7ea fa29 	bl	8000b08 <__aeabi_dcmpeq>
 80166b6:	b108      	cbz	r0, 80166bc <__cvt+0xa4>
 80166b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80166bc:	2230      	movs	r2, #48	; 0x30
 80166be:	9b03      	ldr	r3, [sp, #12]
 80166c0:	454b      	cmp	r3, r9
 80166c2:	d307      	bcc.n	80166d4 <__cvt+0xbc>
 80166c4:	9b03      	ldr	r3, [sp, #12]
 80166c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166c8:	1bdb      	subs	r3, r3, r7
 80166ca:	4638      	mov	r0, r7
 80166cc:	6013      	str	r3, [r2, #0]
 80166ce:	b004      	add	sp, #16
 80166d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166d4:	1c59      	adds	r1, r3, #1
 80166d6:	9103      	str	r1, [sp, #12]
 80166d8:	701a      	strb	r2, [r3, #0]
 80166da:	e7f0      	b.n	80166be <__cvt+0xa6>

080166dc <__exponent>:
 80166dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166de:	4603      	mov	r3, r0
 80166e0:	2900      	cmp	r1, #0
 80166e2:	bfb8      	it	lt
 80166e4:	4249      	neglt	r1, r1
 80166e6:	f803 2b02 	strb.w	r2, [r3], #2
 80166ea:	bfb4      	ite	lt
 80166ec:	222d      	movlt	r2, #45	; 0x2d
 80166ee:	222b      	movge	r2, #43	; 0x2b
 80166f0:	2909      	cmp	r1, #9
 80166f2:	7042      	strb	r2, [r0, #1]
 80166f4:	dd2a      	ble.n	801674c <__exponent+0x70>
 80166f6:	f10d 0407 	add.w	r4, sp, #7
 80166fa:	46a4      	mov	ip, r4
 80166fc:	270a      	movs	r7, #10
 80166fe:	46a6      	mov	lr, r4
 8016700:	460a      	mov	r2, r1
 8016702:	fb91 f6f7 	sdiv	r6, r1, r7
 8016706:	fb07 1516 	mls	r5, r7, r6, r1
 801670a:	3530      	adds	r5, #48	; 0x30
 801670c:	2a63      	cmp	r2, #99	; 0x63
 801670e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016716:	4631      	mov	r1, r6
 8016718:	dcf1      	bgt.n	80166fe <__exponent+0x22>
 801671a:	3130      	adds	r1, #48	; 0x30
 801671c:	f1ae 0502 	sub.w	r5, lr, #2
 8016720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016724:	1c44      	adds	r4, r0, #1
 8016726:	4629      	mov	r1, r5
 8016728:	4561      	cmp	r1, ip
 801672a:	d30a      	bcc.n	8016742 <__exponent+0x66>
 801672c:	f10d 0209 	add.w	r2, sp, #9
 8016730:	eba2 020e 	sub.w	r2, r2, lr
 8016734:	4565      	cmp	r5, ip
 8016736:	bf88      	it	hi
 8016738:	2200      	movhi	r2, #0
 801673a:	4413      	add	r3, r2
 801673c:	1a18      	subs	r0, r3, r0
 801673e:	b003      	add	sp, #12
 8016740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016746:	f804 2f01 	strb.w	r2, [r4, #1]!
 801674a:	e7ed      	b.n	8016728 <__exponent+0x4c>
 801674c:	2330      	movs	r3, #48	; 0x30
 801674e:	3130      	adds	r1, #48	; 0x30
 8016750:	7083      	strb	r3, [r0, #2]
 8016752:	70c1      	strb	r1, [r0, #3]
 8016754:	1d03      	adds	r3, r0, #4
 8016756:	e7f1      	b.n	801673c <__exponent+0x60>

08016758 <_printf_float>:
 8016758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	ed2d 8b02 	vpush	{d8}
 8016760:	b08d      	sub	sp, #52	; 0x34
 8016762:	460c      	mov	r4, r1
 8016764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016768:	4616      	mov	r6, r2
 801676a:	461f      	mov	r7, r3
 801676c:	4605      	mov	r5, r0
 801676e:	f001 fb7f 	bl	8017e70 <_localeconv_r>
 8016772:	f8d0 a000 	ldr.w	sl, [r0]
 8016776:	4650      	mov	r0, sl
 8016778:	f7e9 fd4a 	bl	8000210 <strlen>
 801677c:	2300      	movs	r3, #0
 801677e:	930a      	str	r3, [sp, #40]	; 0x28
 8016780:	6823      	ldr	r3, [r4, #0]
 8016782:	9305      	str	r3, [sp, #20]
 8016784:	f8d8 3000 	ldr.w	r3, [r8]
 8016788:	f894 b018 	ldrb.w	fp, [r4, #24]
 801678c:	3307      	adds	r3, #7
 801678e:	f023 0307 	bic.w	r3, r3, #7
 8016792:	f103 0208 	add.w	r2, r3, #8
 8016796:	f8c8 2000 	str.w	r2, [r8]
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80167a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80167a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80167aa:	9307      	str	r3, [sp, #28]
 80167ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80167b0:	ee08 0a10 	vmov	s16, r0
 80167b4:	4b9f      	ldr	r3, [pc, #636]	; (8016a34 <_printf_float+0x2dc>)
 80167b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167ba:	f04f 32ff 	mov.w	r2, #4294967295
 80167be:	f7ea f9d5 	bl	8000b6c <__aeabi_dcmpun>
 80167c2:	bb88      	cbnz	r0, 8016828 <_printf_float+0xd0>
 80167c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167c8:	4b9a      	ldr	r3, [pc, #616]	; (8016a34 <_printf_float+0x2dc>)
 80167ca:	f04f 32ff 	mov.w	r2, #4294967295
 80167ce:	f7ea f9af 	bl	8000b30 <__aeabi_dcmple>
 80167d2:	bb48      	cbnz	r0, 8016828 <_printf_float+0xd0>
 80167d4:	2200      	movs	r2, #0
 80167d6:	2300      	movs	r3, #0
 80167d8:	4640      	mov	r0, r8
 80167da:	4649      	mov	r1, r9
 80167dc:	f7ea f99e 	bl	8000b1c <__aeabi_dcmplt>
 80167e0:	b110      	cbz	r0, 80167e8 <_printf_float+0x90>
 80167e2:	232d      	movs	r3, #45	; 0x2d
 80167e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167e8:	4b93      	ldr	r3, [pc, #588]	; (8016a38 <_printf_float+0x2e0>)
 80167ea:	4894      	ldr	r0, [pc, #592]	; (8016a3c <_printf_float+0x2e4>)
 80167ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80167f0:	bf94      	ite	ls
 80167f2:	4698      	movls	r8, r3
 80167f4:	4680      	movhi	r8, r0
 80167f6:	2303      	movs	r3, #3
 80167f8:	6123      	str	r3, [r4, #16]
 80167fa:	9b05      	ldr	r3, [sp, #20]
 80167fc:	f023 0204 	bic.w	r2, r3, #4
 8016800:	6022      	str	r2, [r4, #0]
 8016802:	f04f 0900 	mov.w	r9, #0
 8016806:	9700      	str	r7, [sp, #0]
 8016808:	4633      	mov	r3, r6
 801680a:	aa0b      	add	r2, sp, #44	; 0x2c
 801680c:	4621      	mov	r1, r4
 801680e:	4628      	mov	r0, r5
 8016810:	f000 f9d8 	bl	8016bc4 <_printf_common>
 8016814:	3001      	adds	r0, #1
 8016816:	f040 8090 	bne.w	801693a <_printf_float+0x1e2>
 801681a:	f04f 30ff 	mov.w	r0, #4294967295
 801681e:	b00d      	add	sp, #52	; 0x34
 8016820:	ecbd 8b02 	vpop	{d8}
 8016824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016828:	4642      	mov	r2, r8
 801682a:	464b      	mov	r3, r9
 801682c:	4640      	mov	r0, r8
 801682e:	4649      	mov	r1, r9
 8016830:	f7ea f99c 	bl	8000b6c <__aeabi_dcmpun>
 8016834:	b140      	cbz	r0, 8016848 <_printf_float+0xf0>
 8016836:	464b      	mov	r3, r9
 8016838:	2b00      	cmp	r3, #0
 801683a:	bfbc      	itt	lt
 801683c:	232d      	movlt	r3, #45	; 0x2d
 801683e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016842:	487f      	ldr	r0, [pc, #508]	; (8016a40 <_printf_float+0x2e8>)
 8016844:	4b7f      	ldr	r3, [pc, #508]	; (8016a44 <_printf_float+0x2ec>)
 8016846:	e7d1      	b.n	80167ec <_printf_float+0x94>
 8016848:	6863      	ldr	r3, [r4, #4]
 801684a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801684e:	9206      	str	r2, [sp, #24]
 8016850:	1c5a      	adds	r2, r3, #1
 8016852:	d13f      	bne.n	80168d4 <_printf_float+0x17c>
 8016854:	2306      	movs	r3, #6
 8016856:	6063      	str	r3, [r4, #4]
 8016858:	9b05      	ldr	r3, [sp, #20]
 801685a:	6861      	ldr	r1, [r4, #4]
 801685c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016860:	2300      	movs	r3, #0
 8016862:	9303      	str	r3, [sp, #12]
 8016864:	ab0a      	add	r3, sp, #40	; 0x28
 8016866:	e9cd b301 	strd	fp, r3, [sp, #4]
 801686a:	ab09      	add	r3, sp, #36	; 0x24
 801686c:	ec49 8b10 	vmov	d0, r8, r9
 8016870:	9300      	str	r3, [sp, #0]
 8016872:	6022      	str	r2, [r4, #0]
 8016874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016878:	4628      	mov	r0, r5
 801687a:	f7ff fecd 	bl	8016618 <__cvt>
 801687e:	9b06      	ldr	r3, [sp, #24]
 8016880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016882:	2b47      	cmp	r3, #71	; 0x47
 8016884:	4680      	mov	r8, r0
 8016886:	d108      	bne.n	801689a <_printf_float+0x142>
 8016888:	1cc8      	adds	r0, r1, #3
 801688a:	db02      	blt.n	8016892 <_printf_float+0x13a>
 801688c:	6863      	ldr	r3, [r4, #4]
 801688e:	4299      	cmp	r1, r3
 8016890:	dd41      	ble.n	8016916 <_printf_float+0x1be>
 8016892:	f1ab 0b02 	sub.w	fp, fp, #2
 8016896:	fa5f fb8b 	uxtb.w	fp, fp
 801689a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801689e:	d820      	bhi.n	80168e2 <_printf_float+0x18a>
 80168a0:	3901      	subs	r1, #1
 80168a2:	465a      	mov	r2, fp
 80168a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80168a8:	9109      	str	r1, [sp, #36]	; 0x24
 80168aa:	f7ff ff17 	bl	80166dc <__exponent>
 80168ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168b0:	1813      	adds	r3, r2, r0
 80168b2:	2a01      	cmp	r2, #1
 80168b4:	4681      	mov	r9, r0
 80168b6:	6123      	str	r3, [r4, #16]
 80168b8:	dc02      	bgt.n	80168c0 <_printf_float+0x168>
 80168ba:	6822      	ldr	r2, [r4, #0]
 80168bc:	07d2      	lsls	r2, r2, #31
 80168be:	d501      	bpl.n	80168c4 <_printf_float+0x16c>
 80168c0:	3301      	adds	r3, #1
 80168c2:	6123      	str	r3, [r4, #16]
 80168c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d09c      	beq.n	8016806 <_printf_float+0xae>
 80168cc:	232d      	movs	r3, #45	; 0x2d
 80168ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168d2:	e798      	b.n	8016806 <_printf_float+0xae>
 80168d4:	9a06      	ldr	r2, [sp, #24]
 80168d6:	2a47      	cmp	r2, #71	; 0x47
 80168d8:	d1be      	bne.n	8016858 <_printf_float+0x100>
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d1bc      	bne.n	8016858 <_printf_float+0x100>
 80168de:	2301      	movs	r3, #1
 80168e0:	e7b9      	b.n	8016856 <_printf_float+0xfe>
 80168e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80168e6:	d118      	bne.n	801691a <_printf_float+0x1c2>
 80168e8:	2900      	cmp	r1, #0
 80168ea:	6863      	ldr	r3, [r4, #4]
 80168ec:	dd0b      	ble.n	8016906 <_printf_float+0x1ae>
 80168ee:	6121      	str	r1, [r4, #16]
 80168f0:	b913      	cbnz	r3, 80168f8 <_printf_float+0x1a0>
 80168f2:	6822      	ldr	r2, [r4, #0]
 80168f4:	07d0      	lsls	r0, r2, #31
 80168f6:	d502      	bpl.n	80168fe <_printf_float+0x1a6>
 80168f8:	3301      	adds	r3, #1
 80168fa:	440b      	add	r3, r1
 80168fc:	6123      	str	r3, [r4, #16]
 80168fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8016900:	f04f 0900 	mov.w	r9, #0
 8016904:	e7de      	b.n	80168c4 <_printf_float+0x16c>
 8016906:	b913      	cbnz	r3, 801690e <_printf_float+0x1b6>
 8016908:	6822      	ldr	r2, [r4, #0]
 801690a:	07d2      	lsls	r2, r2, #31
 801690c:	d501      	bpl.n	8016912 <_printf_float+0x1ba>
 801690e:	3302      	adds	r3, #2
 8016910:	e7f4      	b.n	80168fc <_printf_float+0x1a4>
 8016912:	2301      	movs	r3, #1
 8016914:	e7f2      	b.n	80168fc <_printf_float+0x1a4>
 8016916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801691c:	4299      	cmp	r1, r3
 801691e:	db05      	blt.n	801692c <_printf_float+0x1d4>
 8016920:	6823      	ldr	r3, [r4, #0]
 8016922:	6121      	str	r1, [r4, #16]
 8016924:	07d8      	lsls	r0, r3, #31
 8016926:	d5ea      	bpl.n	80168fe <_printf_float+0x1a6>
 8016928:	1c4b      	adds	r3, r1, #1
 801692a:	e7e7      	b.n	80168fc <_printf_float+0x1a4>
 801692c:	2900      	cmp	r1, #0
 801692e:	bfd4      	ite	le
 8016930:	f1c1 0202 	rsble	r2, r1, #2
 8016934:	2201      	movgt	r2, #1
 8016936:	4413      	add	r3, r2
 8016938:	e7e0      	b.n	80168fc <_printf_float+0x1a4>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	055a      	lsls	r2, r3, #21
 801693e:	d407      	bmi.n	8016950 <_printf_float+0x1f8>
 8016940:	6923      	ldr	r3, [r4, #16]
 8016942:	4642      	mov	r2, r8
 8016944:	4631      	mov	r1, r6
 8016946:	4628      	mov	r0, r5
 8016948:	47b8      	blx	r7
 801694a:	3001      	adds	r0, #1
 801694c:	d12c      	bne.n	80169a8 <_printf_float+0x250>
 801694e:	e764      	b.n	801681a <_printf_float+0xc2>
 8016950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016954:	f240 80e0 	bls.w	8016b18 <_printf_float+0x3c0>
 8016958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801695c:	2200      	movs	r2, #0
 801695e:	2300      	movs	r3, #0
 8016960:	f7ea f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8016964:	2800      	cmp	r0, #0
 8016966:	d034      	beq.n	80169d2 <_printf_float+0x27a>
 8016968:	4a37      	ldr	r2, [pc, #220]	; (8016a48 <_printf_float+0x2f0>)
 801696a:	2301      	movs	r3, #1
 801696c:	4631      	mov	r1, r6
 801696e:	4628      	mov	r0, r5
 8016970:	47b8      	blx	r7
 8016972:	3001      	adds	r0, #1
 8016974:	f43f af51 	beq.w	801681a <_printf_float+0xc2>
 8016978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801697c:	429a      	cmp	r2, r3
 801697e:	db02      	blt.n	8016986 <_printf_float+0x22e>
 8016980:	6823      	ldr	r3, [r4, #0]
 8016982:	07d8      	lsls	r0, r3, #31
 8016984:	d510      	bpl.n	80169a8 <_printf_float+0x250>
 8016986:	ee18 3a10 	vmov	r3, s16
 801698a:	4652      	mov	r2, sl
 801698c:	4631      	mov	r1, r6
 801698e:	4628      	mov	r0, r5
 8016990:	47b8      	blx	r7
 8016992:	3001      	adds	r0, #1
 8016994:	f43f af41 	beq.w	801681a <_printf_float+0xc2>
 8016998:	f04f 0800 	mov.w	r8, #0
 801699c:	f104 091a 	add.w	r9, r4, #26
 80169a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169a2:	3b01      	subs	r3, #1
 80169a4:	4543      	cmp	r3, r8
 80169a6:	dc09      	bgt.n	80169bc <_printf_float+0x264>
 80169a8:	6823      	ldr	r3, [r4, #0]
 80169aa:	079b      	lsls	r3, r3, #30
 80169ac:	f100 8105 	bmi.w	8016bba <_printf_float+0x462>
 80169b0:	68e0      	ldr	r0, [r4, #12]
 80169b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169b4:	4298      	cmp	r0, r3
 80169b6:	bfb8      	it	lt
 80169b8:	4618      	movlt	r0, r3
 80169ba:	e730      	b.n	801681e <_printf_float+0xc6>
 80169bc:	2301      	movs	r3, #1
 80169be:	464a      	mov	r2, r9
 80169c0:	4631      	mov	r1, r6
 80169c2:	4628      	mov	r0, r5
 80169c4:	47b8      	blx	r7
 80169c6:	3001      	adds	r0, #1
 80169c8:	f43f af27 	beq.w	801681a <_printf_float+0xc2>
 80169cc:	f108 0801 	add.w	r8, r8, #1
 80169d0:	e7e6      	b.n	80169a0 <_printf_float+0x248>
 80169d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	dc39      	bgt.n	8016a4c <_printf_float+0x2f4>
 80169d8:	4a1b      	ldr	r2, [pc, #108]	; (8016a48 <_printf_float+0x2f0>)
 80169da:	2301      	movs	r3, #1
 80169dc:	4631      	mov	r1, r6
 80169de:	4628      	mov	r0, r5
 80169e0:	47b8      	blx	r7
 80169e2:	3001      	adds	r0, #1
 80169e4:	f43f af19 	beq.w	801681a <_printf_float+0xc2>
 80169e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80169ec:	4313      	orrs	r3, r2
 80169ee:	d102      	bne.n	80169f6 <_printf_float+0x29e>
 80169f0:	6823      	ldr	r3, [r4, #0]
 80169f2:	07d9      	lsls	r1, r3, #31
 80169f4:	d5d8      	bpl.n	80169a8 <_printf_float+0x250>
 80169f6:	ee18 3a10 	vmov	r3, s16
 80169fa:	4652      	mov	r2, sl
 80169fc:	4631      	mov	r1, r6
 80169fe:	4628      	mov	r0, r5
 8016a00:	47b8      	blx	r7
 8016a02:	3001      	adds	r0, #1
 8016a04:	f43f af09 	beq.w	801681a <_printf_float+0xc2>
 8016a08:	f04f 0900 	mov.w	r9, #0
 8016a0c:	f104 0a1a 	add.w	sl, r4, #26
 8016a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a12:	425b      	negs	r3, r3
 8016a14:	454b      	cmp	r3, r9
 8016a16:	dc01      	bgt.n	8016a1c <_printf_float+0x2c4>
 8016a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a1a:	e792      	b.n	8016942 <_printf_float+0x1ea>
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	4652      	mov	r2, sl
 8016a20:	4631      	mov	r1, r6
 8016a22:	4628      	mov	r0, r5
 8016a24:	47b8      	blx	r7
 8016a26:	3001      	adds	r0, #1
 8016a28:	f43f aef7 	beq.w	801681a <_printf_float+0xc2>
 8016a2c:	f109 0901 	add.w	r9, r9, #1
 8016a30:	e7ee      	b.n	8016a10 <_printf_float+0x2b8>
 8016a32:	bf00      	nop
 8016a34:	7fefffff 	.word	0x7fefffff
 8016a38:	08019f10 	.word	0x08019f10
 8016a3c:	08019f14 	.word	0x08019f14
 8016a40:	08019f1c 	.word	0x08019f1c
 8016a44:	08019f18 	.word	0x08019f18
 8016a48:	08019f20 	.word	0x08019f20
 8016a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016a50:	429a      	cmp	r2, r3
 8016a52:	bfa8      	it	ge
 8016a54:	461a      	movge	r2, r3
 8016a56:	2a00      	cmp	r2, #0
 8016a58:	4691      	mov	r9, r2
 8016a5a:	dc37      	bgt.n	8016acc <_printf_float+0x374>
 8016a5c:	f04f 0b00 	mov.w	fp, #0
 8016a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a64:	f104 021a 	add.w	r2, r4, #26
 8016a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016a6a:	9305      	str	r3, [sp, #20]
 8016a6c:	eba3 0309 	sub.w	r3, r3, r9
 8016a70:	455b      	cmp	r3, fp
 8016a72:	dc33      	bgt.n	8016adc <_printf_float+0x384>
 8016a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	db3b      	blt.n	8016af4 <_printf_float+0x39c>
 8016a7c:	6823      	ldr	r3, [r4, #0]
 8016a7e:	07da      	lsls	r2, r3, #31
 8016a80:	d438      	bmi.n	8016af4 <_printf_float+0x39c>
 8016a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a84:	9a05      	ldr	r2, [sp, #20]
 8016a86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a88:	1a9a      	subs	r2, r3, r2
 8016a8a:	eba3 0901 	sub.w	r9, r3, r1
 8016a8e:	4591      	cmp	r9, r2
 8016a90:	bfa8      	it	ge
 8016a92:	4691      	movge	r9, r2
 8016a94:	f1b9 0f00 	cmp.w	r9, #0
 8016a98:	dc35      	bgt.n	8016b06 <_printf_float+0x3ae>
 8016a9a:	f04f 0800 	mov.w	r8, #0
 8016a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016aa2:	f104 0a1a 	add.w	sl, r4, #26
 8016aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016aaa:	1a9b      	subs	r3, r3, r2
 8016aac:	eba3 0309 	sub.w	r3, r3, r9
 8016ab0:	4543      	cmp	r3, r8
 8016ab2:	f77f af79 	ble.w	80169a8 <_printf_float+0x250>
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	4652      	mov	r2, sl
 8016aba:	4631      	mov	r1, r6
 8016abc:	4628      	mov	r0, r5
 8016abe:	47b8      	blx	r7
 8016ac0:	3001      	adds	r0, #1
 8016ac2:	f43f aeaa 	beq.w	801681a <_printf_float+0xc2>
 8016ac6:	f108 0801 	add.w	r8, r8, #1
 8016aca:	e7ec      	b.n	8016aa6 <_printf_float+0x34e>
 8016acc:	4613      	mov	r3, r2
 8016ace:	4631      	mov	r1, r6
 8016ad0:	4642      	mov	r2, r8
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	47b8      	blx	r7
 8016ad6:	3001      	adds	r0, #1
 8016ad8:	d1c0      	bne.n	8016a5c <_printf_float+0x304>
 8016ada:	e69e      	b.n	801681a <_printf_float+0xc2>
 8016adc:	2301      	movs	r3, #1
 8016ade:	4631      	mov	r1, r6
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	9205      	str	r2, [sp, #20]
 8016ae4:	47b8      	blx	r7
 8016ae6:	3001      	adds	r0, #1
 8016ae8:	f43f ae97 	beq.w	801681a <_printf_float+0xc2>
 8016aec:	9a05      	ldr	r2, [sp, #20]
 8016aee:	f10b 0b01 	add.w	fp, fp, #1
 8016af2:	e7b9      	b.n	8016a68 <_printf_float+0x310>
 8016af4:	ee18 3a10 	vmov	r3, s16
 8016af8:	4652      	mov	r2, sl
 8016afa:	4631      	mov	r1, r6
 8016afc:	4628      	mov	r0, r5
 8016afe:	47b8      	blx	r7
 8016b00:	3001      	adds	r0, #1
 8016b02:	d1be      	bne.n	8016a82 <_printf_float+0x32a>
 8016b04:	e689      	b.n	801681a <_printf_float+0xc2>
 8016b06:	9a05      	ldr	r2, [sp, #20]
 8016b08:	464b      	mov	r3, r9
 8016b0a:	4442      	add	r2, r8
 8016b0c:	4631      	mov	r1, r6
 8016b0e:	4628      	mov	r0, r5
 8016b10:	47b8      	blx	r7
 8016b12:	3001      	adds	r0, #1
 8016b14:	d1c1      	bne.n	8016a9a <_printf_float+0x342>
 8016b16:	e680      	b.n	801681a <_printf_float+0xc2>
 8016b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b1a:	2a01      	cmp	r2, #1
 8016b1c:	dc01      	bgt.n	8016b22 <_printf_float+0x3ca>
 8016b1e:	07db      	lsls	r3, r3, #31
 8016b20:	d538      	bpl.n	8016b94 <_printf_float+0x43c>
 8016b22:	2301      	movs	r3, #1
 8016b24:	4642      	mov	r2, r8
 8016b26:	4631      	mov	r1, r6
 8016b28:	4628      	mov	r0, r5
 8016b2a:	47b8      	blx	r7
 8016b2c:	3001      	adds	r0, #1
 8016b2e:	f43f ae74 	beq.w	801681a <_printf_float+0xc2>
 8016b32:	ee18 3a10 	vmov	r3, s16
 8016b36:	4652      	mov	r2, sl
 8016b38:	4631      	mov	r1, r6
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	47b8      	blx	r7
 8016b3e:	3001      	adds	r0, #1
 8016b40:	f43f ae6b 	beq.w	801681a <_printf_float+0xc2>
 8016b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016b48:	2200      	movs	r2, #0
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	f7e9 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8016b50:	b9d8      	cbnz	r0, 8016b8a <_printf_float+0x432>
 8016b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b54:	f108 0201 	add.w	r2, r8, #1
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	4631      	mov	r1, r6
 8016b5c:	4628      	mov	r0, r5
 8016b5e:	47b8      	blx	r7
 8016b60:	3001      	adds	r0, #1
 8016b62:	d10e      	bne.n	8016b82 <_printf_float+0x42a>
 8016b64:	e659      	b.n	801681a <_printf_float+0xc2>
 8016b66:	2301      	movs	r3, #1
 8016b68:	4652      	mov	r2, sl
 8016b6a:	4631      	mov	r1, r6
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	47b8      	blx	r7
 8016b70:	3001      	adds	r0, #1
 8016b72:	f43f ae52 	beq.w	801681a <_printf_float+0xc2>
 8016b76:	f108 0801 	add.w	r8, r8, #1
 8016b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	4543      	cmp	r3, r8
 8016b80:	dcf1      	bgt.n	8016b66 <_printf_float+0x40e>
 8016b82:	464b      	mov	r3, r9
 8016b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016b88:	e6dc      	b.n	8016944 <_printf_float+0x1ec>
 8016b8a:	f04f 0800 	mov.w	r8, #0
 8016b8e:	f104 0a1a 	add.w	sl, r4, #26
 8016b92:	e7f2      	b.n	8016b7a <_printf_float+0x422>
 8016b94:	2301      	movs	r3, #1
 8016b96:	4642      	mov	r2, r8
 8016b98:	e7df      	b.n	8016b5a <_printf_float+0x402>
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	464a      	mov	r2, r9
 8016b9e:	4631      	mov	r1, r6
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	47b8      	blx	r7
 8016ba4:	3001      	adds	r0, #1
 8016ba6:	f43f ae38 	beq.w	801681a <_printf_float+0xc2>
 8016baa:	f108 0801 	add.w	r8, r8, #1
 8016bae:	68e3      	ldr	r3, [r4, #12]
 8016bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bb2:	1a5b      	subs	r3, r3, r1
 8016bb4:	4543      	cmp	r3, r8
 8016bb6:	dcf0      	bgt.n	8016b9a <_printf_float+0x442>
 8016bb8:	e6fa      	b.n	80169b0 <_printf_float+0x258>
 8016bba:	f04f 0800 	mov.w	r8, #0
 8016bbe:	f104 0919 	add.w	r9, r4, #25
 8016bc2:	e7f4      	b.n	8016bae <_printf_float+0x456>

08016bc4 <_printf_common>:
 8016bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bc8:	4616      	mov	r6, r2
 8016bca:	4699      	mov	r9, r3
 8016bcc:	688a      	ldr	r2, [r1, #8]
 8016bce:	690b      	ldr	r3, [r1, #16]
 8016bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	bfb8      	it	lt
 8016bd8:	4613      	movlt	r3, r2
 8016bda:	6033      	str	r3, [r6, #0]
 8016bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016be0:	4607      	mov	r7, r0
 8016be2:	460c      	mov	r4, r1
 8016be4:	b10a      	cbz	r2, 8016bea <_printf_common+0x26>
 8016be6:	3301      	adds	r3, #1
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	6823      	ldr	r3, [r4, #0]
 8016bec:	0699      	lsls	r1, r3, #26
 8016bee:	bf42      	ittt	mi
 8016bf0:	6833      	ldrmi	r3, [r6, #0]
 8016bf2:	3302      	addmi	r3, #2
 8016bf4:	6033      	strmi	r3, [r6, #0]
 8016bf6:	6825      	ldr	r5, [r4, #0]
 8016bf8:	f015 0506 	ands.w	r5, r5, #6
 8016bfc:	d106      	bne.n	8016c0c <_printf_common+0x48>
 8016bfe:	f104 0a19 	add.w	sl, r4, #25
 8016c02:	68e3      	ldr	r3, [r4, #12]
 8016c04:	6832      	ldr	r2, [r6, #0]
 8016c06:	1a9b      	subs	r3, r3, r2
 8016c08:	42ab      	cmp	r3, r5
 8016c0a:	dc26      	bgt.n	8016c5a <_printf_common+0x96>
 8016c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c10:	1e13      	subs	r3, r2, #0
 8016c12:	6822      	ldr	r2, [r4, #0]
 8016c14:	bf18      	it	ne
 8016c16:	2301      	movne	r3, #1
 8016c18:	0692      	lsls	r2, r2, #26
 8016c1a:	d42b      	bmi.n	8016c74 <_printf_common+0xb0>
 8016c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c20:	4649      	mov	r1, r9
 8016c22:	4638      	mov	r0, r7
 8016c24:	47c0      	blx	r8
 8016c26:	3001      	adds	r0, #1
 8016c28:	d01e      	beq.n	8016c68 <_printf_common+0xa4>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	68e5      	ldr	r5, [r4, #12]
 8016c2e:	6832      	ldr	r2, [r6, #0]
 8016c30:	f003 0306 	and.w	r3, r3, #6
 8016c34:	2b04      	cmp	r3, #4
 8016c36:	bf08      	it	eq
 8016c38:	1aad      	subeq	r5, r5, r2
 8016c3a:	68a3      	ldr	r3, [r4, #8]
 8016c3c:	6922      	ldr	r2, [r4, #16]
 8016c3e:	bf0c      	ite	eq
 8016c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c44:	2500      	movne	r5, #0
 8016c46:	4293      	cmp	r3, r2
 8016c48:	bfc4      	itt	gt
 8016c4a:	1a9b      	subgt	r3, r3, r2
 8016c4c:	18ed      	addgt	r5, r5, r3
 8016c4e:	2600      	movs	r6, #0
 8016c50:	341a      	adds	r4, #26
 8016c52:	42b5      	cmp	r5, r6
 8016c54:	d11a      	bne.n	8016c8c <_printf_common+0xc8>
 8016c56:	2000      	movs	r0, #0
 8016c58:	e008      	b.n	8016c6c <_printf_common+0xa8>
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	4652      	mov	r2, sl
 8016c5e:	4649      	mov	r1, r9
 8016c60:	4638      	mov	r0, r7
 8016c62:	47c0      	blx	r8
 8016c64:	3001      	adds	r0, #1
 8016c66:	d103      	bne.n	8016c70 <_printf_common+0xac>
 8016c68:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c70:	3501      	adds	r5, #1
 8016c72:	e7c6      	b.n	8016c02 <_printf_common+0x3e>
 8016c74:	18e1      	adds	r1, r4, r3
 8016c76:	1c5a      	adds	r2, r3, #1
 8016c78:	2030      	movs	r0, #48	; 0x30
 8016c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c7e:	4422      	add	r2, r4
 8016c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c88:	3302      	adds	r3, #2
 8016c8a:	e7c7      	b.n	8016c1c <_printf_common+0x58>
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	4622      	mov	r2, r4
 8016c90:	4649      	mov	r1, r9
 8016c92:	4638      	mov	r0, r7
 8016c94:	47c0      	blx	r8
 8016c96:	3001      	adds	r0, #1
 8016c98:	d0e6      	beq.n	8016c68 <_printf_common+0xa4>
 8016c9a:	3601      	adds	r6, #1
 8016c9c:	e7d9      	b.n	8016c52 <_printf_common+0x8e>
	...

08016ca0 <_printf_i>:
 8016ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ca4:	7e0f      	ldrb	r7, [r1, #24]
 8016ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ca8:	2f78      	cmp	r7, #120	; 0x78
 8016caa:	4691      	mov	r9, r2
 8016cac:	4680      	mov	r8, r0
 8016cae:	460c      	mov	r4, r1
 8016cb0:	469a      	mov	sl, r3
 8016cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016cb6:	d807      	bhi.n	8016cc8 <_printf_i+0x28>
 8016cb8:	2f62      	cmp	r7, #98	; 0x62
 8016cba:	d80a      	bhi.n	8016cd2 <_printf_i+0x32>
 8016cbc:	2f00      	cmp	r7, #0
 8016cbe:	f000 80d8 	beq.w	8016e72 <_printf_i+0x1d2>
 8016cc2:	2f58      	cmp	r7, #88	; 0x58
 8016cc4:	f000 80a3 	beq.w	8016e0e <_printf_i+0x16e>
 8016cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016cd0:	e03a      	b.n	8016d48 <_printf_i+0xa8>
 8016cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016cd6:	2b15      	cmp	r3, #21
 8016cd8:	d8f6      	bhi.n	8016cc8 <_printf_i+0x28>
 8016cda:	a101      	add	r1, pc, #4	; (adr r1, 8016ce0 <_printf_i+0x40>)
 8016cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016ce0:	08016d39 	.word	0x08016d39
 8016ce4:	08016d4d 	.word	0x08016d4d
 8016ce8:	08016cc9 	.word	0x08016cc9
 8016cec:	08016cc9 	.word	0x08016cc9
 8016cf0:	08016cc9 	.word	0x08016cc9
 8016cf4:	08016cc9 	.word	0x08016cc9
 8016cf8:	08016d4d 	.word	0x08016d4d
 8016cfc:	08016cc9 	.word	0x08016cc9
 8016d00:	08016cc9 	.word	0x08016cc9
 8016d04:	08016cc9 	.word	0x08016cc9
 8016d08:	08016cc9 	.word	0x08016cc9
 8016d0c:	08016e59 	.word	0x08016e59
 8016d10:	08016d7d 	.word	0x08016d7d
 8016d14:	08016e3b 	.word	0x08016e3b
 8016d18:	08016cc9 	.word	0x08016cc9
 8016d1c:	08016cc9 	.word	0x08016cc9
 8016d20:	08016e7b 	.word	0x08016e7b
 8016d24:	08016cc9 	.word	0x08016cc9
 8016d28:	08016d7d 	.word	0x08016d7d
 8016d2c:	08016cc9 	.word	0x08016cc9
 8016d30:	08016cc9 	.word	0x08016cc9
 8016d34:	08016e43 	.word	0x08016e43
 8016d38:	682b      	ldr	r3, [r5, #0]
 8016d3a:	1d1a      	adds	r2, r3, #4
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	602a      	str	r2, [r5, #0]
 8016d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d48:	2301      	movs	r3, #1
 8016d4a:	e0a3      	b.n	8016e94 <_printf_i+0x1f4>
 8016d4c:	6820      	ldr	r0, [r4, #0]
 8016d4e:	6829      	ldr	r1, [r5, #0]
 8016d50:	0606      	lsls	r6, r0, #24
 8016d52:	f101 0304 	add.w	r3, r1, #4
 8016d56:	d50a      	bpl.n	8016d6e <_printf_i+0xce>
 8016d58:	680e      	ldr	r6, [r1, #0]
 8016d5a:	602b      	str	r3, [r5, #0]
 8016d5c:	2e00      	cmp	r6, #0
 8016d5e:	da03      	bge.n	8016d68 <_printf_i+0xc8>
 8016d60:	232d      	movs	r3, #45	; 0x2d
 8016d62:	4276      	negs	r6, r6
 8016d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d68:	485e      	ldr	r0, [pc, #376]	; (8016ee4 <_printf_i+0x244>)
 8016d6a:	230a      	movs	r3, #10
 8016d6c:	e019      	b.n	8016da2 <_printf_i+0x102>
 8016d6e:	680e      	ldr	r6, [r1, #0]
 8016d70:	602b      	str	r3, [r5, #0]
 8016d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d76:	bf18      	it	ne
 8016d78:	b236      	sxthne	r6, r6
 8016d7a:	e7ef      	b.n	8016d5c <_printf_i+0xbc>
 8016d7c:	682b      	ldr	r3, [r5, #0]
 8016d7e:	6820      	ldr	r0, [r4, #0]
 8016d80:	1d19      	adds	r1, r3, #4
 8016d82:	6029      	str	r1, [r5, #0]
 8016d84:	0601      	lsls	r1, r0, #24
 8016d86:	d501      	bpl.n	8016d8c <_printf_i+0xec>
 8016d88:	681e      	ldr	r6, [r3, #0]
 8016d8a:	e002      	b.n	8016d92 <_printf_i+0xf2>
 8016d8c:	0646      	lsls	r6, r0, #25
 8016d8e:	d5fb      	bpl.n	8016d88 <_printf_i+0xe8>
 8016d90:	881e      	ldrh	r6, [r3, #0]
 8016d92:	4854      	ldr	r0, [pc, #336]	; (8016ee4 <_printf_i+0x244>)
 8016d94:	2f6f      	cmp	r7, #111	; 0x6f
 8016d96:	bf0c      	ite	eq
 8016d98:	2308      	moveq	r3, #8
 8016d9a:	230a      	movne	r3, #10
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016da2:	6865      	ldr	r5, [r4, #4]
 8016da4:	60a5      	str	r5, [r4, #8]
 8016da6:	2d00      	cmp	r5, #0
 8016da8:	bfa2      	ittt	ge
 8016daa:	6821      	ldrge	r1, [r4, #0]
 8016dac:	f021 0104 	bicge.w	r1, r1, #4
 8016db0:	6021      	strge	r1, [r4, #0]
 8016db2:	b90e      	cbnz	r6, 8016db8 <_printf_i+0x118>
 8016db4:	2d00      	cmp	r5, #0
 8016db6:	d04d      	beq.n	8016e54 <_printf_i+0x1b4>
 8016db8:	4615      	mov	r5, r2
 8016dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8016dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8016dc2:	5dc7      	ldrb	r7, [r0, r7]
 8016dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016dc8:	4637      	mov	r7, r6
 8016dca:	42bb      	cmp	r3, r7
 8016dcc:	460e      	mov	r6, r1
 8016dce:	d9f4      	bls.n	8016dba <_printf_i+0x11a>
 8016dd0:	2b08      	cmp	r3, #8
 8016dd2:	d10b      	bne.n	8016dec <_printf_i+0x14c>
 8016dd4:	6823      	ldr	r3, [r4, #0]
 8016dd6:	07de      	lsls	r6, r3, #31
 8016dd8:	d508      	bpl.n	8016dec <_printf_i+0x14c>
 8016dda:	6923      	ldr	r3, [r4, #16]
 8016ddc:	6861      	ldr	r1, [r4, #4]
 8016dde:	4299      	cmp	r1, r3
 8016de0:	bfde      	ittt	le
 8016de2:	2330      	movle	r3, #48	; 0x30
 8016de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016dec:	1b52      	subs	r2, r2, r5
 8016dee:	6122      	str	r2, [r4, #16]
 8016df0:	f8cd a000 	str.w	sl, [sp]
 8016df4:	464b      	mov	r3, r9
 8016df6:	aa03      	add	r2, sp, #12
 8016df8:	4621      	mov	r1, r4
 8016dfa:	4640      	mov	r0, r8
 8016dfc:	f7ff fee2 	bl	8016bc4 <_printf_common>
 8016e00:	3001      	adds	r0, #1
 8016e02:	d14c      	bne.n	8016e9e <_printf_i+0x1fe>
 8016e04:	f04f 30ff 	mov.w	r0, #4294967295
 8016e08:	b004      	add	sp, #16
 8016e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0e:	4835      	ldr	r0, [pc, #212]	; (8016ee4 <_printf_i+0x244>)
 8016e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016e14:	6829      	ldr	r1, [r5, #0]
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8016e1c:	6029      	str	r1, [r5, #0]
 8016e1e:	061d      	lsls	r5, r3, #24
 8016e20:	d514      	bpl.n	8016e4c <_printf_i+0x1ac>
 8016e22:	07df      	lsls	r7, r3, #31
 8016e24:	bf44      	itt	mi
 8016e26:	f043 0320 	orrmi.w	r3, r3, #32
 8016e2a:	6023      	strmi	r3, [r4, #0]
 8016e2c:	b91e      	cbnz	r6, 8016e36 <_printf_i+0x196>
 8016e2e:	6823      	ldr	r3, [r4, #0]
 8016e30:	f023 0320 	bic.w	r3, r3, #32
 8016e34:	6023      	str	r3, [r4, #0]
 8016e36:	2310      	movs	r3, #16
 8016e38:	e7b0      	b.n	8016d9c <_printf_i+0xfc>
 8016e3a:	6823      	ldr	r3, [r4, #0]
 8016e3c:	f043 0320 	orr.w	r3, r3, #32
 8016e40:	6023      	str	r3, [r4, #0]
 8016e42:	2378      	movs	r3, #120	; 0x78
 8016e44:	4828      	ldr	r0, [pc, #160]	; (8016ee8 <_printf_i+0x248>)
 8016e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e4a:	e7e3      	b.n	8016e14 <_printf_i+0x174>
 8016e4c:	0659      	lsls	r1, r3, #25
 8016e4e:	bf48      	it	mi
 8016e50:	b2b6      	uxthmi	r6, r6
 8016e52:	e7e6      	b.n	8016e22 <_printf_i+0x182>
 8016e54:	4615      	mov	r5, r2
 8016e56:	e7bb      	b.n	8016dd0 <_printf_i+0x130>
 8016e58:	682b      	ldr	r3, [r5, #0]
 8016e5a:	6826      	ldr	r6, [r4, #0]
 8016e5c:	6961      	ldr	r1, [r4, #20]
 8016e5e:	1d18      	adds	r0, r3, #4
 8016e60:	6028      	str	r0, [r5, #0]
 8016e62:	0635      	lsls	r5, r6, #24
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	d501      	bpl.n	8016e6c <_printf_i+0x1cc>
 8016e68:	6019      	str	r1, [r3, #0]
 8016e6a:	e002      	b.n	8016e72 <_printf_i+0x1d2>
 8016e6c:	0670      	lsls	r0, r6, #25
 8016e6e:	d5fb      	bpl.n	8016e68 <_printf_i+0x1c8>
 8016e70:	8019      	strh	r1, [r3, #0]
 8016e72:	2300      	movs	r3, #0
 8016e74:	6123      	str	r3, [r4, #16]
 8016e76:	4615      	mov	r5, r2
 8016e78:	e7ba      	b.n	8016df0 <_printf_i+0x150>
 8016e7a:	682b      	ldr	r3, [r5, #0]
 8016e7c:	1d1a      	adds	r2, r3, #4
 8016e7e:	602a      	str	r2, [r5, #0]
 8016e80:	681d      	ldr	r5, [r3, #0]
 8016e82:	6862      	ldr	r2, [r4, #4]
 8016e84:	2100      	movs	r1, #0
 8016e86:	4628      	mov	r0, r5
 8016e88:	f7e9 f9ca 	bl	8000220 <memchr>
 8016e8c:	b108      	cbz	r0, 8016e92 <_printf_i+0x1f2>
 8016e8e:	1b40      	subs	r0, r0, r5
 8016e90:	6060      	str	r0, [r4, #4]
 8016e92:	6863      	ldr	r3, [r4, #4]
 8016e94:	6123      	str	r3, [r4, #16]
 8016e96:	2300      	movs	r3, #0
 8016e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e9c:	e7a8      	b.n	8016df0 <_printf_i+0x150>
 8016e9e:	6923      	ldr	r3, [r4, #16]
 8016ea0:	462a      	mov	r2, r5
 8016ea2:	4649      	mov	r1, r9
 8016ea4:	4640      	mov	r0, r8
 8016ea6:	47d0      	blx	sl
 8016ea8:	3001      	adds	r0, #1
 8016eaa:	d0ab      	beq.n	8016e04 <_printf_i+0x164>
 8016eac:	6823      	ldr	r3, [r4, #0]
 8016eae:	079b      	lsls	r3, r3, #30
 8016eb0:	d413      	bmi.n	8016eda <_printf_i+0x23a>
 8016eb2:	68e0      	ldr	r0, [r4, #12]
 8016eb4:	9b03      	ldr	r3, [sp, #12]
 8016eb6:	4298      	cmp	r0, r3
 8016eb8:	bfb8      	it	lt
 8016eba:	4618      	movlt	r0, r3
 8016ebc:	e7a4      	b.n	8016e08 <_printf_i+0x168>
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	4632      	mov	r2, r6
 8016ec2:	4649      	mov	r1, r9
 8016ec4:	4640      	mov	r0, r8
 8016ec6:	47d0      	blx	sl
 8016ec8:	3001      	adds	r0, #1
 8016eca:	d09b      	beq.n	8016e04 <_printf_i+0x164>
 8016ecc:	3501      	adds	r5, #1
 8016ece:	68e3      	ldr	r3, [r4, #12]
 8016ed0:	9903      	ldr	r1, [sp, #12]
 8016ed2:	1a5b      	subs	r3, r3, r1
 8016ed4:	42ab      	cmp	r3, r5
 8016ed6:	dcf2      	bgt.n	8016ebe <_printf_i+0x21e>
 8016ed8:	e7eb      	b.n	8016eb2 <_printf_i+0x212>
 8016eda:	2500      	movs	r5, #0
 8016edc:	f104 0619 	add.w	r6, r4, #25
 8016ee0:	e7f5      	b.n	8016ece <_printf_i+0x22e>
 8016ee2:	bf00      	nop
 8016ee4:	08019f22 	.word	0x08019f22
 8016ee8:	08019f33 	.word	0x08019f33

08016eec <_sbrk_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4d06      	ldr	r5, [pc, #24]	; (8016f08 <_sbrk_r+0x1c>)
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	4608      	mov	r0, r1
 8016ef6:	602b      	str	r3, [r5, #0]
 8016ef8:	f7ec f9ce 	bl	8003298 <_sbrk>
 8016efc:	1c43      	adds	r3, r0, #1
 8016efe:	d102      	bne.n	8016f06 <_sbrk_r+0x1a>
 8016f00:	682b      	ldr	r3, [r5, #0]
 8016f02:	b103      	cbz	r3, 8016f06 <_sbrk_r+0x1a>
 8016f04:	6023      	str	r3, [r4, #0]
 8016f06:	bd38      	pop	{r3, r4, r5, pc}
 8016f08:	20003068 	.word	0x20003068

08016f0c <siprintf>:
 8016f0c:	b40e      	push	{r1, r2, r3}
 8016f0e:	b500      	push	{lr}
 8016f10:	b09c      	sub	sp, #112	; 0x70
 8016f12:	ab1d      	add	r3, sp, #116	; 0x74
 8016f14:	9002      	str	r0, [sp, #8]
 8016f16:	9006      	str	r0, [sp, #24]
 8016f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f1c:	4809      	ldr	r0, [pc, #36]	; (8016f44 <siprintf+0x38>)
 8016f1e:	9107      	str	r1, [sp, #28]
 8016f20:	9104      	str	r1, [sp, #16]
 8016f22:	4909      	ldr	r1, [pc, #36]	; (8016f48 <siprintf+0x3c>)
 8016f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f28:	9105      	str	r1, [sp, #20]
 8016f2a:	6800      	ldr	r0, [r0, #0]
 8016f2c:	9301      	str	r3, [sp, #4]
 8016f2e:	a902      	add	r1, sp, #8
 8016f30:	f001 fba4 	bl	801867c <_svfiprintf_r>
 8016f34:	9b02      	ldr	r3, [sp, #8]
 8016f36:	2200      	movs	r2, #0
 8016f38:	701a      	strb	r2, [r3, #0]
 8016f3a:	b01c      	add	sp, #112	; 0x70
 8016f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f40:	b003      	add	sp, #12
 8016f42:	4770      	bx	lr
 8016f44:	2000012c 	.word	0x2000012c
 8016f48:	ffff0208 	.word	0xffff0208

08016f4c <strtok>:
 8016f4c:	4b16      	ldr	r3, [pc, #88]	; (8016fa8 <strtok+0x5c>)
 8016f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f50:	681e      	ldr	r6, [r3, #0]
 8016f52:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016f54:	4605      	mov	r5, r0
 8016f56:	b9fc      	cbnz	r4, 8016f98 <strtok+0x4c>
 8016f58:	2050      	movs	r0, #80	; 0x50
 8016f5a:	9101      	str	r1, [sp, #4]
 8016f5c:	f7ff fa46 	bl	80163ec <malloc>
 8016f60:	9901      	ldr	r1, [sp, #4]
 8016f62:	65b0      	str	r0, [r6, #88]	; 0x58
 8016f64:	4602      	mov	r2, r0
 8016f66:	b920      	cbnz	r0, 8016f72 <strtok+0x26>
 8016f68:	4b10      	ldr	r3, [pc, #64]	; (8016fac <strtok+0x60>)
 8016f6a:	4811      	ldr	r0, [pc, #68]	; (8016fb0 <strtok+0x64>)
 8016f6c:	2157      	movs	r1, #87	; 0x57
 8016f6e:	f000 f8d5 	bl	801711c <__assert_func>
 8016f72:	e9c0 4400 	strd	r4, r4, [r0]
 8016f76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016f7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016f7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016f82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016f86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016f8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016f8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016f92:	6184      	str	r4, [r0, #24]
 8016f94:	7704      	strb	r4, [r0, #28]
 8016f96:	6244      	str	r4, [r0, #36]	; 0x24
 8016f98:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	b002      	add	sp, #8
 8016fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fa4:	f000 b806 	b.w	8016fb4 <__strtok_r>
 8016fa8:	2000012c 	.word	0x2000012c
 8016fac:	08019f44 	.word	0x08019f44
 8016fb0:	08019f5b 	.word	0x08019f5b

08016fb4 <__strtok_r>:
 8016fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fb6:	b908      	cbnz	r0, 8016fbc <__strtok_r+0x8>
 8016fb8:	6810      	ldr	r0, [r2, #0]
 8016fba:	b188      	cbz	r0, 8016fe0 <__strtok_r+0x2c>
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016fc4:	460f      	mov	r7, r1
 8016fc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016fca:	b91e      	cbnz	r6, 8016fd4 <__strtok_r+0x20>
 8016fcc:	b965      	cbnz	r5, 8016fe8 <__strtok_r+0x34>
 8016fce:	6015      	str	r5, [r2, #0]
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	e005      	b.n	8016fe0 <__strtok_r+0x2c>
 8016fd4:	42b5      	cmp	r5, r6
 8016fd6:	d1f6      	bne.n	8016fc6 <__strtok_r+0x12>
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d1f0      	bne.n	8016fbe <__strtok_r+0xa>
 8016fdc:	6014      	str	r4, [r2, #0]
 8016fde:	7003      	strb	r3, [r0, #0]
 8016fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe2:	461c      	mov	r4, r3
 8016fe4:	e00c      	b.n	8017000 <__strtok_r+0x4c>
 8016fe6:	b915      	cbnz	r5, 8016fee <__strtok_r+0x3a>
 8016fe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016fec:	460e      	mov	r6, r1
 8016fee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016ff2:	42ab      	cmp	r3, r5
 8016ff4:	d1f7      	bne.n	8016fe6 <__strtok_r+0x32>
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d0f3      	beq.n	8016fe2 <__strtok_r+0x2e>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017000:	6014      	str	r4, [r2, #0]
 8017002:	e7ed      	b.n	8016fe0 <__strtok_r+0x2c>

08017004 <_strtol_l.constprop.0>:
 8017004:	2b01      	cmp	r3, #1
 8017006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801700a:	d001      	beq.n	8017010 <_strtol_l.constprop.0+0xc>
 801700c:	2b24      	cmp	r3, #36	; 0x24
 801700e:	d906      	bls.n	801701e <_strtol_l.constprop.0+0x1a>
 8017010:	f7ff f9c2 	bl	8016398 <__errno>
 8017014:	2316      	movs	r3, #22
 8017016:	6003      	str	r3, [r0, #0]
 8017018:	2000      	movs	r0, #0
 801701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801701e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017104 <_strtol_l.constprop.0+0x100>
 8017022:	460d      	mov	r5, r1
 8017024:	462e      	mov	r6, r5
 8017026:	f815 4b01 	ldrb.w	r4, [r5], #1
 801702a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801702e:	f017 0708 	ands.w	r7, r7, #8
 8017032:	d1f7      	bne.n	8017024 <_strtol_l.constprop.0+0x20>
 8017034:	2c2d      	cmp	r4, #45	; 0x2d
 8017036:	d132      	bne.n	801709e <_strtol_l.constprop.0+0x9a>
 8017038:	782c      	ldrb	r4, [r5, #0]
 801703a:	2701      	movs	r7, #1
 801703c:	1cb5      	adds	r5, r6, #2
 801703e:	2b00      	cmp	r3, #0
 8017040:	d05b      	beq.n	80170fa <_strtol_l.constprop.0+0xf6>
 8017042:	2b10      	cmp	r3, #16
 8017044:	d109      	bne.n	801705a <_strtol_l.constprop.0+0x56>
 8017046:	2c30      	cmp	r4, #48	; 0x30
 8017048:	d107      	bne.n	801705a <_strtol_l.constprop.0+0x56>
 801704a:	782c      	ldrb	r4, [r5, #0]
 801704c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017050:	2c58      	cmp	r4, #88	; 0x58
 8017052:	d14d      	bne.n	80170f0 <_strtol_l.constprop.0+0xec>
 8017054:	786c      	ldrb	r4, [r5, #1]
 8017056:	2310      	movs	r3, #16
 8017058:	3502      	adds	r5, #2
 801705a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801705e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017062:	f04f 0c00 	mov.w	ip, #0
 8017066:	fbb8 f9f3 	udiv	r9, r8, r3
 801706a:	4666      	mov	r6, ip
 801706c:	fb03 8a19 	mls	sl, r3, r9, r8
 8017070:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017074:	f1be 0f09 	cmp.w	lr, #9
 8017078:	d816      	bhi.n	80170a8 <_strtol_l.constprop.0+0xa4>
 801707a:	4674      	mov	r4, lr
 801707c:	42a3      	cmp	r3, r4
 801707e:	dd24      	ble.n	80170ca <_strtol_l.constprop.0+0xc6>
 8017080:	f1bc 0f00 	cmp.w	ip, #0
 8017084:	db1e      	blt.n	80170c4 <_strtol_l.constprop.0+0xc0>
 8017086:	45b1      	cmp	r9, r6
 8017088:	d31c      	bcc.n	80170c4 <_strtol_l.constprop.0+0xc0>
 801708a:	d101      	bne.n	8017090 <_strtol_l.constprop.0+0x8c>
 801708c:	45a2      	cmp	sl, r4
 801708e:	db19      	blt.n	80170c4 <_strtol_l.constprop.0+0xc0>
 8017090:	fb06 4603 	mla	r6, r6, r3, r4
 8017094:	f04f 0c01 	mov.w	ip, #1
 8017098:	f815 4b01 	ldrb.w	r4, [r5], #1
 801709c:	e7e8      	b.n	8017070 <_strtol_l.constprop.0+0x6c>
 801709e:	2c2b      	cmp	r4, #43	; 0x2b
 80170a0:	bf04      	itt	eq
 80170a2:	782c      	ldrbeq	r4, [r5, #0]
 80170a4:	1cb5      	addeq	r5, r6, #2
 80170a6:	e7ca      	b.n	801703e <_strtol_l.constprop.0+0x3a>
 80170a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80170ac:	f1be 0f19 	cmp.w	lr, #25
 80170b0:	d801      	bhi.n	80170b6 <_strtol_l.constprop.0+0xb2>
 80170b2:	3c37      	subs	r4, #55	; 0x37
 80170b4:	e7e2      	b.n	801707c <_strtol_l.constprop.0+0x78>
 80170b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80170ba:	f1be 0f19 	cmp.w	lr, #25
 80170be:	d804      	bhi.n	80170ca <_strtol_l.constprop.0+0xc6>
 80170c0:	3c57      	subs	r4, #87	; 0x57
 80170c2:	e7db      	b.n	801707c <_strtol_l.constprop.0+0x78>
 80170c4:	f04f 3cff 	mov.w	ip, #4294967295
 80170c8:	e7e6      	b.n	8017098 <_strtol_l.constprop.0+0x94>
 80170ca:	f1bc 0f00 	cmp.w	ip, #0
 80170ce:	da05      	bge.n	80170dc <_strtol_l.constprop.0+0xd8>
 80170d0:	2322      	movs	r3, #34	; 0x22
 80170d2:	6003      	str	r3, [r0, #0]
 80170d4:	4646      	mov	r6, r8
 80170d6:	b942      	cbnz	r2, 80170ea <_strtol_l.constprop.0+0xe6>
 80170d8:	4630      	mov	r0, r6
 80170da:	e79e      	b.n	801701a <_strtol_l.constprop.0+0x16>
 80170dc:	b107      	cbz	r7, 80170e0 <_strtol_l.constprop.0+0xdc>
 80170de:	4276      	negs	r6, r6
 80170e0:	2a00      	cmp	r2, #0
 80170e2:	d0f9      	beq.n	80170d8 <_strtol_l.constprop.0+0xd4>
 80170e4:	f1bc 0f00 	cmp.w	ip, #0
 80170e8:	d000      	beq.n	80170ec <_strtol_l.constprop.0+0xe8>
 80170ea:	1e69      	subs	r1, r5, #1
 80170ec:	6011      	str	r1, [r2, #0]
 80170ee:	e7f3      	b.n	80170d8 <_strtol_l.constprop.0+0xd4>
 80170f0:	2430      	movs	r4, #48	; 0x30
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1b1      	bne.n	801705a <_strtol_l.constprop.0+0x56>
 80170f6:	2308      	movs	r3, #8
 80170f8:	e7af      	b.n	801705a <_strtol_l.constprop.0+0x56>
 80170fa:	2c30      	cmp	r4, #48	; 0x30
 80170fc:	d0a5      	beq.n	801704a <_strtol_l.constprop.0+0x46>
 80170fe:	230a      	movs	r3, #10
 8017100:	e7ab      	b.n	801705a <_strtol_l.constprop.0+0x56>
 8017102:	bf00      	nop
 8017104:	08019ff5 	.word	0x08019ff5

08017108 <strtol>:
 8017108:	4613      	mov	r3, r2
 801710a:	460a      	mov	r2, r1
 801710c:	4601      	mov	r1, r0
 801710e:	4802      	ldr	r0, [pc, #8]	; (8017118 <strtol+0x10>)
 8017110:	6800      	ldr	r0, [r0, #0]
 8017112:	f7ff bf77 	b.w	8017004 <_strtol_l.constprop.0>
 8017116:	bf00      	nop
 8017118:	2000012c 	.word	0x2000012c

0801711c <__assert_func>:
 801711c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801711e:	4614      	mov	r4, r2
 8017120:	461a      	mov	r2, r3
 8017122:	4b09      	ldr	r3, [pc, #36]	; (8017148 <__assert_func+0x2c>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	4605      	mov	r5, r0
 8017128:	68d8      	ldr	r0, [r3, #12]
 801712a:	b14c      	cbz	r4, 8017140 <__assert_func+0x24>
 801712c:	4b07      	ldr	r3, [pc, #28]	; (801714c <__assert_func+0x30>)
 801712e:	9100      	str	r1, [sp, #0]
 8017130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017134:	4906      	ldr	r1, [pc, #24]	; (8017150 <__assert_func+0x34>)
 8017136:	462b      	mov	r3, r5
 8017138:	f000 fe88 	bl	8017e4c <fiprintf>
 801713c:	f001 fdb8 	bl	8018cb0 <abort>
 8017140:	4b04      	ldr	r3, [pc, #16]	; (8017154 <__assert_func+0x38>)
 8017142:	461c      	mov	r4, r3
 8017144:	e7f3      	b.n	801712e <__assert_func+0x12>
 8017146:	bf00      	nop
 8017148:	2000012c 	.word	0x2000012c
 801714c:	08019fb8 	.word	0x08019fb8
 8017150:	08019fc5 	.word	0x08019fc5
 8017154:	08019ff3 	.word	0x08019ff3

08017158 <quorem>:
 8017158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	6903      	ldr	r3, [r0, #16]
 801715e:	690c      	ldr	r4, [r1, #16]
 8017160:	42a3      	cmp	r3, r4
 8017162:	4607      	mov	r7, r0
 8017164:	f2c0 8081 	blt.w	801726a <quorem+0x112>
 8017168:	3c01      	subs	r4, #1
 801716a:	f101 0814 	add.w	r8, r1, #20
 801716e:	f100 0514 	add.w	r5, r0, #20
 8017172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017176:	9301      	str	r3, [sp, #4]
 8017178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801717c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017180:	3301      	adds	r3, #1
 8017182:	429a      	cmp	r2, r3
 8017184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801718c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017190:	d331      	bcc.n	80171f6 <quorem+0x9e>
 8017192:	f04f 0e00 	mov.w	lr, #0
 8017196:	4640      	mov	r0, r8
 8017198:	46ac      	mov	ip, r5
 801719a:	46f2      	mov	sl, lr
 801719c:	f850 2b04 	ldr.w	r2, [r0], #4
 80171a0:	b293      	uxth	r3, r2
 80171a2:	fb06 e303 	mla	r3, r6, r3, lr
 80171a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80171aa:	b29b      	uxth	r3, r3
 80171ac:	ebaa 0303 	sub.w	r3, sl, r3
 80171b0:	f8dc a000 	ldr.w	sl, [ip]
 80171b4:	0c12      	lsrs	r2, r2, #16
 80171b6:	fa13 f38a 	uxtah	r3, r3, sl
 80171ba:	fb06 e202 	mla	r2, r6, r2, lr
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	9b00      	ldr	r3, [sp, #0]
 80171c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80171c6:	b292      	uxth	r2, r2
 80171c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80171cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80171d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80171d4:	4581      	cmp	r9, r0
 80171d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171da:	f84c 3b04 	str.w	r3, [ip], #4
 80171de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80171e2:	d2db      	bcs.n	801719c <quorem+0x44>
 80171e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80171e8:	b92b      	cbnz	r3, 80171f6 <quorem+0x9e>
 80171ea:	9b01      	ldr	r3, [sp, #4]
 80171ec:	3b04      	subs	r3, #4
 80171ee:	429d      	cmp	r5, r3
 80171f0:	461a      	mov	r2, r3
 80171f2:	d32e      	bcc.n	8017252 <quorem+0xfa>
 80171f4:	613c      	str	r4, [r7, #16]
 80171f6:	4638      	mov	r0, r7
 80171f8:	f001 f8cc 	bl	8018394 <__mcmp>
 80171fc:	2800      	cmp	r0, #0
 80171fe:	db24      	blt.n	801724a <quorem+0xf2>
 8017200:	3601      	adds	r6, #1
 8017202:	4628      	mov	r0, r5
 8017204:	f04f 0c00 	mov.w	ip, #0
 8017208:	f858 2b04 	ldr.w	r2, [r8], #4
 801720c:	f8d0 e000 	ldr.w	lr, [r0]
 8017210:	b293      	uxth	r3, r2
 8017212:	ebac 0303 	sub.w	r3, ip, r3
 8017216:	0c12      	lsrs	r2, r2, #16
 8017218:	fa13 f38e 	uxtah	r3, r3, lr
 801721c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017224:	b29b      	uxth	r3, r3
 8017226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801722a:	45c1      	cmp	r9, r8
 801722c:	f840 3b04 	str.w	r3, [r0], #4
 8017230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017234:	d2e8      	bcs.n	8017208 <quorem+0xb0>
 8017236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801723a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801723e:	b922      	cbnz	r2, 801724a <quorem+0xf2>
 8017240:	3b04      	subs	r3, #4
 8017242:	429d      	cmp	r5, r3
 8017244:	461a      	mov	r2, r3
 8017246:	d30a      	bcc.n	801725e <quorem+0x106>
 8017248:	613c      	str	r4, [r7, #16]
 801724a:	4630      	mov	r0, r6
 801724c:	b003      	add	sp, #12
 801724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017252:	6812      	ldr	r2, [r2, #0]
 8017254:	3b04      	subs	r3, #4
 8017256:	2a00      	cmp	r2, #0
 8017258:	d1cc      	bne.n	80171f4 <quorem+0x9c>
 801725a:	3c01      	subs	r4, #1
 801725c:	e7c7      	b.n	80171ee <quorem+0x96>
 801725e:	6812      	ldr	r2, [r2, #0]
 8017260:	3b04      	subs	r3, #4
 8017262:	2a00      	cmp	r2, #0
 8017264:	d1f0      	bne.n	8017248 <quorem+0xf0>
 8017266:	3c01      	subs	r4, #1
 8017268:	e7eb      	b.n	8017242 <quorem+0xea>
 801726a:	2000      	movs	r0, #0
 801726c:	e7ee      	b.n	801724c <quorem+0xf4>
	...

08017270 <_dtoa_r>:
 8017270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017274:	ed2d 8b04 	vpush	{d8-d9}
 8017278:	ec57 6b10 	vmov	r6, r7, d0
 801727c:	b093      	sub	sp, #76	; 0x4c
 801727e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017284:	9106      	str	r1, [sp, #24]
 8017286:	ee10 aa10 	vmov	sl, s0
 801728a:	4604      	mov	r4, r0
 801728c:	9209      	str	r2, [sp, #36]	; 0x24
 801728e:	930c      	str	r3, [sp, #48]	; 0x30
 8017290:	46bb      	mov	fp, r7
 8017292:	b975      	cbnz	r5, 80172b2 <_dtoa_r+0x42>
 8017294:	2010      	movs	r0, #16
 8017296:	f7ff f8a9 	bl	80163ec <malloc>
 801729a:	4602      	mov	r2, r0
 801729c:	6260      	str	r0, [r4, #36]	; 0x24
 801729e:	b920      	cbnz	r0, 80172aa <_dtoa_r+0x3a>
 80172a0:	4ba7      	ldr	r3, [pc, #668]	; (8017540 <_dtoa_r+0x2d0>)
 80172a2:	21ea      	movs	r1, #234	; 0xea
 80172a4:	48a7      	ldr	r0, [pc, #668]	; (8017544 <_dtoa_r+0x2d4>)
 80172a6:	f7ff ff39 	bl	801711c <__assert_func>
 80172aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80172ae:	6005      	str	r5, [r0, #0]
 80172b0:	60c5      	str	r5, [r0, #12]
 80172b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172b4:	6819      	ldr	r1, [r3, #0]
 80172b6:	b151      	cbz	r1, 80172ce <_dtoa_r+0x5e>
 80172b8:	685a      	ldr	r2, [r3, #4]
 80172ba:	604a      	str	r2, [r1, #4]
 80172bc:	2301      	movs	r3, #1
 80172be:	4093      	lsls	r3, r2
 80172c0:	608b      	str	r3, [r1, #8]
 80172c2:	4620      	mov	r0, r4
 80172c4:	f000 fe24 	bl	8017f10 <_Bfree>
 80172c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172ca:	2200      	movs	r2, #0
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	1e3b      	subs	r3, r7, #0
 80172d0:	bfaa      	itet	ge
 80172d2:	2300      	movge	r3, #0
 80172d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80172d8:	f8c8 3000 	strge.w	r3, [r8]
 80172dc:	4b9a      	ldr	r3, [pc, #616]	; (8017548 <_dtoa_r+0x2d8>)
 80172de:	bfbc      	itt	lt
 80172e0:	2201      	movlt	r2, #1
 80172e2:	f8c8 2000 	strlt.w	r2, [r8]
 80172e6:	ea33 030b 	bics.w	r3, r3, fp
 80172ea:	d11b      	bne.n	8017324 <_dtoa_r+0xb4>
 80172ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80172ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80172f2:	6013      	str	r3, [r2, #0]
 80172f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80172f8:	4333      	orrs	r3, r6
 80172fa:	f000 8592 	beq.w	8017e22 <_dtoa_r+0xbb2>
 80172fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017300:	b963      	cbnz	r3, 801731c <_dtoa_r+0xac>
 8017302:	4b92      	ldr	r3, [pc, #584]	; (801754c <_dtoa_r+0x2dc>)
 8017304:	e022      	b.n	801734c <_dtoa_r+0xdc>
 8017306:	4b92      	ldr	r3, [pc, #584]	; (8017550 <_dtoa_r+0x2e0>)
 8017308:	9301      	str	r3, [sp, #4]
 801730a:	3308      	adds	r3, #8
 801730c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801730e:	6013      	str	r3, [r2, #0]
 8017310:	9801      	ldr	r0, [sp, #4]
 8017312:	b013      	add	sp, #76	; 0x4c
 8017314:	ecbd 8b04 	vpop	{d8-d9}
 8017318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801731c:	4b8b      	ldr	r3, [pc, #556]	; (801754c <_dtoa_r+0x2dc>)
 801731e:	9301      	str	r3, [sp, #4]
 8017320:	3303      	adds	r3, #3
 8017322:	e7f3      	b.n	801730c <_dtoa_r+0x9c>
 8017324:	2200      	movs	r2, #0
 8017326:	2300      	movs	r3, #0
 8017328:	4650      	mov	r0, sl
 801732a:	4659      	mov	r1, fp
 801732c:	f7e9 fbec 	bl	8000b08 <__aeabi_dcmpeq>
 8017330:	ec4b ab19 	vmov	d9, sl, fp
 8017334:	4680      	mov	r8, r0
 8017336:	b158      	cbz	r0, 8017350 <_dtoa_r+0xe0>
 8017338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801733a:	2301      	movs	r3, #1
 801733c:	6013      	str	r3, [r2, #0]
 801733e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017340:	2b00      	cmp	r3, #0
 8017342:	f000 856b 	beq.w	8017e1c <_dtoa_r+0xbac>
 8017346:	4883      	ldr	r0, [pc, #524]	; (8017554 <_dtoa_r+0x2e4>)
 8017348:	6018      	str	r0, [r3, #0]
 801734a:	1e43      	subs	r3, r0, #1
 801734c:	9301      	str	r3, [sp, #4]
 801734e:	e7df      	b.n	8017310 <_dtoa_r+0xa0>
 8017350:	ec4b ab10 	vmov	d0, sl, fp
 8017354:	aa10      	add	r2, sp, #64	; 0x40
 8017356:	a911      	add	r1, sp, #68	; 0x44
 8017358:	4620      	mov	r0, r4
 801735a:	f001 f8c1 	bl	80184e0 <__d2b>
 801735e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017362:	ee08 0a10 	vmov	s16, r0
 8017366:	2d00      	cmp	r5, #0
 8017368:	f000 8084 	beq.w	8017474 <_dtoa_r+0x204>
 801736c:	ee19 3a90 	vmov	r3, s19
 8017370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017378:	4656      	mov	r6, sl
 801737a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801737e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017386:	4b74      	ldr	r3, [pc, #464]	; (8017558 <_dtoa_r+0x2e8>)
 8017388:	2200      	movs	r2, #0
 801738a:	4630      	mov	r0, r6
 801738c:	4639      	mov	r1, r7
 801738e:	f7e8 ff9b 	bl	80002c8 <__aeabi_dsub>
 8017392:	a365      	add	r3, pc, #404	; (adr r3, 8017528 <_dtoa_r+0x2b8>)
 8017394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017398:	f7e9 f94e 	bl	8000638 <__aeabi_dmul>
 801739c:	a364      	add	r3, pc, #400	; (adr r3, 8017530 <_dtoa_r+0x2c0>)
 801739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a2:	f7e8 ff93 	bl	80002cc <__adddf3>
 80173a6:	4606      	mov	r6, r0
 80173a8:	4628      	mov	r0, r5
 80173aa:	460f      	mov	r7, r1
 80173ac:	f7e9 f8da 	bl	8000564 <__aeabi_i2d>
 80173b0:	a361      	add	r3, pc, #388	; (adr r3, 8017538 <_dtoa_r+0x2c8>)
 80173b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b6:	f7e9 f93f 	bl	8000638 <__aeabi_dmul>
 80173ba:	4602      	mov	r2, r0
 80173bc:	460b      	mov	r3, r1
 80173be:	4630      	mov	r0, r6
 80173c0:	4639      	mov	r1, r7
 80173c2:	f7e8 ff83 	bl	80002cc <__adddf3>
 80173c6:	4606      	mov	r6, r0
 80173c8:	460f      	mov	r7, r1
 80173ca:	f7e9 fbe5 	bl	8000b98 <__aeabi_d2iz>
 80173ce:	2200      	movs	r2, #0
 80173d0:	9000      	str	r0, [sp, #0]
 80173d2:	2300      	movs	r3, #0
 80173d4:	4630      	mov	r0, r6
 80173d6:	4639      	mov	r1, r7
 80173d8:	f7e9 fba0 	bl	8000b1c <__aeabi_dcmplt>
 80173dc:	b150      	cbz	r0, 80173f4 <_dtoa_r+0x184>
 80173de:	9800      	ldr	r0, [sp, #0]
 80173e0:	f7e9 f8c0 	bl	8000564 <__aeabi_i2d>
 80173e4:	4632      	mov	r2, r6
 80173e6:	463b      	mov	r3, r7
 80173e8:	f7e9 fb8e 	bl	8000b08 <__aeabi_dcmpeq>
 80173ec:	b910      	cbnz	r0, 80173f4 <_dtoa_r+0x184>
 80173ee:	9b00      	ldr	r3, [sp, #0]
 80173f0:	3b01      	subs	r3, #1
 80173f2:	9300      	str	r3, [sp, #0]
 80173f4:	9b00      	ldr	r3, [sp, #0]
 80173f6:	2b16      	cmp	r3, #22
 80173f8:	d85a      	bhi.n	80174b0 <_dtoa_r+0x240>
 80173fa:	9a00      	ldr	r2, [sp, #0]
 80173fc:	4b57      	ldr	r3, [pc, #348]	; (801755c <_dtoa_r+0x2ec>)
 80173fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	ec51 0b19 	vmov	r0, r1, d9
 801740a:	f7e9 fb87 	bl	8000b1c <__aeabi_dcmplt>
 801740e:	2800      	cmp	r0, #0
 8017410:	d050      	beq.n	80174b4 <_dtoa_r+0x244>
 8017412:	9b00      	ldr	r3, [sp, #0]
 8017414:	3b01      	subs	r3, #1
 8017416:	9300      	str	r3, [sp, #0]
 8017418:	2300      	movs	r3, #0
 801741a:	930b      	str	r3, [sp, #44]	; 0x2c
 801741c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801741e:	1b5d      	subs	r5, r3, r5
 8017420:	1e6b      	subs	r3, r5, #1
 8017422:	9305      	str	r3, [sp, #20]
 8017424:	bf45      	ittet	mi
 8017426:	f1c5 0301 	rsbmi	r3, r5, #1
 801742a:	9304      	strmi	r3, [sp, #16]
 801742c:	2300      	movpl	r3, #0
 801742e:	2300      	movmi	r3, #0
 8017430:	bf4c      	ite	mi
 8017432:	9305      	strmi	r3, [sp, #20]
 8017434:	9304      	strpl	r3, [sp, #16]
 8017436:	9b00      	ldr	r3, [sp, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	db3d      	blt.n	80174b8 <_dtoa_r+0x248>
 801743c:	9b05      	ldr	r3, [sp, #20]
 801743e:	9a00      	ldr	r2, [sp, #0]
 8017440:	920a      	str	r2, [sp, #40]	; 0x28
 8017442:	4413      	add	r3, r2
 8017444:	9305      	str	r3, [sp, #20]
 8017446:	2300      	movs	r3, #0
 8017448:	9307      	str	r3, [sp, #28]
 801744a:	9b06      	ldr	r3, [sp, #24]
 801744c:	2b09      	cmp	r3, #9
 801744e:	f200 8089 	bhi.w	8017564 <_dtoa_r+0x2f4>
 8017452:	2b05      	cmp	r3, #5
 8017454:	bfc4      	itt	gt
 8017456:	3b04      	subgt	r3, #4
 8017458:	9306      	strgt	r3, [sp, #24]
 801745a:	9b06      	ldr	r3, [sp, #24]
 801745c:	f1a3 0302 	sub.w	r3, r3, #2
 8017460:	bfcc      	ite	gt
 8017462:	2500      	movgt	r5, #0
 8017464:	2501      	movle	r5, #1
 8017466:	2b03      	cmp	r3, #3
 8017468:	f200 8087 	bhi.w	801757a <_dtoa_r+0x30a>
 801746c:	e8df f003 	tbb	[pc, r3]
 8017470:	59383a2d 	.word	0x59383a2d
 8017474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017478:	441d      	add	r5, r3
 801747a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801747e:	2b20      	cmp	r3, #32
 8017480:	bfc1      	itttt	gt
 8017482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801748a:	fa0b f303 	lslgt.w	r3, fp, r3
 801748e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017492:	bfda      	itte	le
 8017494:	f1c3 0320 	rsble	r3, r3, #32
 8017498:	fa06 f003 	lslle.w	r0, r6, r3
 801749c:	4318      	orrgt	r0, r3
 801749e:	f7e9 f851 	bl	8000544 <__aeabi_ui2d>
 80174a2:	2301      	movs	r3, #1
 80174a4:	4606      	mov	r6, r0
 80174a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80174aa:	3d01      	subs	r5, #1
 80174ac:	930e      	str	r3, [sp, #56]	; 0x38
 80174ae:	e76a      	b.n	8017386 <_dtoa_r+0x116>
 80174b0:	2301      	movs	r3, #1
 80174b2:	e7b2      	b.n	801741a <_dtoa_r+0x1aa>
 80174b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80174b6:	e7b1      	b.n	801741c <_dtoa_r+0x1ac>
 80174b8:	9b04      	ldr	r3, [sp, #16]
 80174ba:	9a00      	ldr	r2, [sp, #0]
 80174bc:	1a9b      	subs	r3, r3, r2
 80174be:	9304      	str	r3, [sp, #16]
 80174c0:	4253      	negs	r3, r2
 80174c2:	9307      	str	r3, [sp, #28]
 80174c4:	2300      	movs	r3, #0
 80174c6:	930a      	str	r3, [sp, #40]	; 0x28
 80174c8:	e7bf      	b.n	801744a <_dtoa_r+0x1da>
 80174ca:	2300      	movs	r3, #0
 80174cc:	9308      	str	r3, [sp, #32]
 80174ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dc55      	bgt.n	8017580 <_dtoa_r+0x310>
 80174d4:	2301      	movs	r3, #1
 80174d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80174da:	461a      	mov	r2, r3
 80174dc:	9209      	str	r2, [sp, #36]	; 0x24
 80174de:	e00c      	b.n	80174fa <_dtoa_r+0x28a>
 80174e0:	2301      	movs	r3, #1
 80174e2:	e7f3      	b.n	80174cc <_dtoa_r+0x25c>
 80174e4:	2300      	movs	r3, #0
 80174e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174e8:	9308      	str	r3, [sp, #32]
 80174ea:	9b00      	ldr	r3, [sp, #0]
 80174ec:	4413      	add	r3, r2
 80174ee:	9302      	str	r3, [sp, #8]
 80174f0:	3301      	adds	r3, #1
 80174f2:	2b01      	cmp	r3, #1
 80174f4:	9303      	str	r3, [sp, #12]
 80174f6:	bfb8      	it	lt
 80174f8:	2301      	movlt	r3, #1
 80174fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80174fc:	2200      	movs	r2, #0
 80174fe:	6042      	str	r2, [r0, #4]
 8017500:	2204      	movs	r2, #4
 8017502:	f102 0614 	add.w	r6, r2, #20
 8017506:	429e      	cmp	r6, r3
 8017508:	6841      	ldr	r1, [r0, #4]
 801750a:	d93d      	bls.n	8017588 <_dtoa_r+0x318>
 801750c:	4620      	mov	r0, r4
 801750e:	f000 fcbf 	bl	8017e90 <_Balloc>
 8017512:	9001      	str	r0, [sp, #4]
 8017514:	2800      	cmp	r0, #0
 8017516:	d13b      	bne.n	8017590 <_dtoa_r+0x320>
 8017518:	4b11      	ldr	r3, [pc, #68]	; (8017560 <_dtoa_r+0x2f0>)
 801751a:	4602      	mov	r2, r0
 801751c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017520:	e6c0      	b.n	80172a4 <_dtoa_r+0x34>
 8017522:	2301      	movs	r3, #1
 8017524:	e7df      	b.n	80174e6 <_dtoa_r+0x276>
 8017526:	bf00      	nop
 8017528:	636f4361 	.word	0x636f4361
 801752c:	3fd287a7 	.word	0x3fd287a7
 8017530:	8b60c8b3 	.word	0x8b60c8b3
 8017534:	3fc68a28 	.word	0x3fc68a28
 8017538:	509f79fb 	.word	0x509f79fb
 801753c:	3fd34413 	.word	0x3fd34413
 8017540:	08019f44 	.word	0x08019f44
 8017544:	0801a102 	.word	0x0801a102
 8017548:	7ff00000 	.word	0x7ff00000
 801754c:	0801a0fe 	.word	0x0801a0fe
 8017550:	0801a0f5 	.word	0x0801a0f5
 8017554:	08019f21 	.word	0x08019f21
 8017558:	3ff80000 	.word	0x3ff80000
 801755c:	0801a1f8 	.word	0x0801a1f8
 8017560:	0801a15d 	.word	0x0801a15d
 8017564:	2501      	movs	r5, #1
 8017566:	2300      	movs	r3, #0
 8017568:	9306      	str	r3, [sp, #24]
 801756a:	9508      	str	r5, [sp, #32]
 801756c:	f04f 33ff 	mov.w	r3, #4294967295
 8017570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017574:	2200      	movs	r2, #0
 8017576:	2312      	movs	r3, #18
 8017578:	e7b0      	b.n	80174dc <_dtoa_r+0x26c>
 801757a:	2301      	movs	r3, #1
 801757c:	9308      	str	r3, [sp, #32]
 801757e:	e7f5      	b.n	801756c <_dtoa_r+0x2fc>
 8017580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017586:	e7b8      	b.n	80174fa <_dtoa_r+0x28a>
 8017588:	3101      	adds	r1, #1
 801758a:	6041      	str	r1, [r0, #4]
 801758c:	0052      	lsls	r2, r2, #1
 801758e:	e7b8      	b.n	8017502 <_dtoa_r+0x292>
 8017590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017592:	9a01      	ldr	r2, [sp, #4]
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	9b03      	ldr	r3, [sp, #12]
 8017598:	2b0e      	cmp	r3, #14
 801759a:	f200 809d 	bhi.w	80176d8 <_dtoa_r+0x468>
 801759e:	2d00      	cmp	r5, #0
 80175a0:	f000 809a 	beq.w	80176d8 <_dtoa_r+0x468>
 80175a4:	9b00      	ldr	r3, [sp, #0]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	dd32      	ble.n	8017610 <_dtoa_r+0x3a0>
 80175aa:	4ab7      	ldr	r2, [pc, #732]	; (8017888 <_dtoa_r+0x618>)
 80175ac:	f003 030f 	and.w	r3, r3, #15
 80175b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80175b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80175b8:	9b00      	ldr	r3, [sp, #0]
 80175ba:	05d8      	lsls	r0, r3, #23
 80175bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80175c0:	d516      	bpl.n	80175f0 <_dtoa_r+0x380>
 80175c2:	4bb2      	ldr	r3, [pc, #712]	; (801788c <_dtoa_r+0x61c>)
 80175c4:	ec51 0b19 	vmov	r0, r1, d9
 80175c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80175cc:	f7e9 f95e 	bl	800088c <__aeabi_ddiv>
 80175d0:	f007 070f 	and.w	r7, r7, #15
 80175d4:	4682      	mov	sl, r0
 80175d6:	468b      	mov	fp, r1
 80175d8:	2503      	movs	r5, #3
 80175da:	4eac      	ldr	r6, [pc, #688]	; (801788c <_dtoa_r+0x61c>)
 80175dc:	b957      	cbnz	r7, 80175f4 <_dtoa_r+0x384>
 80175de:	4642      	mov	r2, r8
 80175e0:	464b      	mov	r3, r9
 80175e2:	4650      	mov	r0, sl
 80175e4:	4659      	mov	r1, fp
 80175e6:	f7e9 f951 	bl	800088c <__aeabi_ddiv>
 80175ea:	4682      	mov	sl, r0
 80175ec:	468b      	mov	fp, r1
 80175ee:	e028      	b.n	8017642 <_dtoa_r+0x3d2>
 80175f0:	2502      	movs	r5, #2
 80175f2:	e7f2      	b.n	80175da <_dtoa_r+0x36a>
 80175f4:	07f9      	lsls	r1, r7, #31
 80175f6:	d508      	bpl.n	801760a <_dtoa_r+0x39a>
 80175f8:	4640      	mov	r0, r8
 80175fa:	4649      	mov	r1, r9
 80175fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017600:	f7e9 f81a 	bl	8000638 <__aeabi_dmul>
 8017604:	3501      	adds	r5, #1
 8017606:	4680      	mov	r8, r0
 8017608:	4689      	mov	r9, r1
 801760a:	107f      	asrs	r7, r7, #1
 801760c:	3608      	adds	r6, #8
 801760e:	e7e5      	b.n	80175dc <_dtoa_r+0x36c>
 8017610:	f000 809b 	beq.w	801774a <_dtoa_r+0x4da>
 8017614:	9b00      	ldr	r3, [sp, #0]
 8017616:	4f9d      	ldr	r7, [pc, #628]	; (801788c <_dtoa_r+0x61c>)
 8017618:	425e      	negs	r6, r3
 801761a:	4b9b      	ldr	r3, [pc, #620]	; (8017888 <_dtoa_r+0x618>)
 801761c:	f006 020f 	and.w	r2, r6, #15
 8017620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017628:	ec51 0b19 	vmov	r0, r1, d9
 801762c:	f7e9 f804 	bl	8000638 <__aeabi_dmul>
 8017630:	1136      	asrs	r6, r6, #4
 8017632:	4682      	mov	sl, r0
 8017634:	468b      	mov	fp, r1
 8017636:	2300      	movs	r3, #0
 8017638:	2502      	movs	r5, #2
 801763a:	2e00      	cmp	r6, #0
 801763c:	d17a      	bne.n	8017734 <_dtoa_r+0x4c4>
 801763e:	2b00      	cmp	r3, #0
 8017640:	d1d3      	bne.n	80175ea <_dtoa_r+0x37a>
 8017642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017644:	2b00      	cmp	r3, #0
 8017646:	f000 8082 	beq.w	801774e <_dtoa_r+0x4de>
 801764a:	4b91      	ldr	r3, [pc, #580]	; (8017890 <_dtoa_r+0x620>)
 801764c:	2200      	movs	r2, #0
 801764e:	4650      	mov	r0, sl
 8017650:	4659      	mov	r1, fp
 8017652:	f7e9 fa63 	bl	8000b1c <__aeabi_dcmplt>
 8017656:	2800      	cmp	r0, #0
 8017658:	d079      	beq.n	801774e <_dtoa_r+0x4de>
 801765a:	9b03      	ldr	r3, [sp, #12]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d076      	beq.n	801774e <_dtoa_r+0x4de>
 8017660:	9b02      	ldr	r3, [sp, #8]
 8017662:	2b00      	cmp	r3, #0
 8017664:	dd36      	ble.n	80176d4 <_dtoa_r+0x464>
 8017666:	9b00      	ldr	r3, [sp, #0]
 8017668:	4650      	mov	r0, sl
 801766a:	4659      	mov	r1, fp
 801766c:	1e5f      	subs	r7, r3, #1
 801766e:	2200      	movs	r2, #0
 8017670:	4b88      	ldr	r3, [pc, #544]	; (8017894 <_dtoa_r+0x624>)
 8017672:	f7e8 ffe1 	bl	8000638 <__aeabi_dmul>
 8017676:	9e02      	ldr	r6, [sp, #8]
 8017678:	4682      	mov	sl, r0
 801767a:	468b      	mov	fp, r1
 801767c:	3501      	adds	r5, #1
 801767e:	4628      	mov	r0, r5
 8017680:	f7e8 ff70 	bl	8000564 <__aeabi_i2d>
 8017684:	4652      	mov	r2, sl
 8017686:	465b      	mov	r3, fp
 8017688:	f7e8 ffd6 	bl	8000638 <__aeabi_dmul>
 801768c:	4b82      	ldr	r3, [pc, #520]	; (8017898 <_dtoa_r+0x628>)
 801768e:	2200      	movs	r2, #0
 8017690:	f7e8 fe1c 	bl	80002cc <__adddf3>
 8017694:	46d0      	mov	r8, sl
 8017696:	46d9      	mov	r9, fp
 8017698:	4682      	mov	sl, r0
 801769a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801769e:	2e00      	cmp	r6, #0
 80176a0:	d158      	bne.n	8017754 <_dtoa_r+0x4e4>
 80176a2:	4b7e      	ldr	r3, [pc, #504]	; (801789c <_dtoa_r+0x62c>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	4640      	mov	r0, r8
 80176a8:	4649      	mov	r1, r9
 80176aa:	f7e8 fe0d 	bl	80002c8 <__aeabi_dsub>
 80176ae:	4652      	mov	r2, sl
 80176b0:	465b      	mov	r3, fp
 80176b2:	4680      	mov	r8, r0
 80176b4:	4689      	mov	r9, r1
 80176b6:	f7e9 fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 80176ba:	2800      	cmp	r0, #0
 80176bc:	f040 8295 	bne.w	8017bea <_dtoa_r+0x97a>
 80176c0:	4652      	mov	r2, sl
 80176c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80176c6:	4640      	mov	r0, r8
 80176c8:	4649      	mov	r1, r9
 80176ca:	f7e9 fa27 	bl	8000b1c <__aeabi_dcmplt>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f040 8289 	bne.w	8017be6 <_dtoa_r+0x976>
 80176d4:	ec5b ab19 	vmov	sl, fp, d9
 80176d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176da:	2b00      	cmp	r3, #0
 80176dc:	f2c0 8148 	blt.w	8017970 <_dtoa_r+0x700>
 80176e0:	9a00      	ldr	r2, [sp, #0]
 80176e2:	2a0e      	cmp	r2, #14
 80176e4:	f300 8144 	bgt.w	8017970 <_dtoa_r+0x700>
 80176e8:	4b67      	ldr	r3, [pc, #412]	; (8017888 <_dtoa_r+0x618>)
 80176ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80176f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f280 80d5 	bge.w	80178a4 <_dtoa_r+0x634>
 80176fa:	9b03      	ldr	r3, [sp, #12]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f300 80d1 	bgt.w	80178a4 <_dtoa_r+0x634>
 8017702:	f040 826f 	bne.w	8017be4 <_dtoa_r+0x974>
 8017706:	4b65      	ldr	r3, [pc, #404]	; (801789c <_dtoa_r+0x62c>)
 8017708:	2200      	movs	r2, #0
 801770a:	4640      	mov	r0, r8
 801770c:	4649      	mov	r1, r9
 801770e:	f7e8 ff93 	bl	8000638 <__aeabi_dmul>
 8017712:	4652      	mov	r2, sl
 8017714:	465b      	mov	r3, fp
 8017716:	f7e9 fa15 	bl	8000b44 <__aeabi_dcmpge>
 801771a:	9e03      	ldr	r6, [sp, #12]
 801771c:	4637      	mov	r7, r6
 801771e:	2800      	cmp	r0, #0
 8017720:	f040 8245 	bne.w	8017bae <_dtoa_r+0x93e>
 8017724:	9d01      	ldr	r5, [sp, #4]
 8017726:	2331      	movs	r3, #49	; 0x31
 8017728:	f805 3b01 	strb.w	r3, [r5], #1
 801772c:	9b00      	ldr	r3, [sp, #0]
 801772e:	3301      	adds	r3, #1
 8017730:	9300      	str	r3, [sp, #0]
 8017732:	e240      	b.n	8017bb6 <_dtoa_r+0x946>
 8017734:	07f2      	lsls	r2, r6, #31
 8017736:	d505      	bpl.n	8017744 <_dtoa_r+0x4d4>
 8017738:	e9d7 2300 	ldrd	r2, r3, [r7]
 801773c:	f7e8 ff7c 	bl	8000638 <__aeabi_dmul>
 8017740:	3501      	adds	r5, #1
 8017742:	2301      	movs	r3, #1
 8017744:	1076      	asrs	r6, r6, #1
 8017746:	3708      	adds	r7, #8
 8017748:	e777      	b.n	801763a <_dtoa_r+0x3ca>
 801774a:	2502      	movs	r5, #2
 801774c:	e779      	b.n	8017642 <_dtoa_r+0x3d2>
 801774e:	9f00      	ldr	r7, [sp, #0]
 8017750:	9e03      	ldr	r6, [sp, #12]
 8017752:	e794      	b.n	801767e <_dtoa_r+0x40e>
 8017754:	9901      	ldr	r1, [sp, #4]
 8017756:	4b4c      	ldr	r3, [pc, #304]	; (8017888 <_dtoa_r+0x618>)
 8017758:	4431      	add	r1, r6
 801775a:	910d      	str	r1, [sp, #52]	; 0x34
 801775c:	9908      	ldr	r1, [sp, #32]
 801775e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017766:	2900      	cmp	r1, #0
 8017768:	d043      	beq.n	80177f2 <_dtoa_r+0x582>
 801776a:	494d      	ldr	r1, [pc, #308]	; (80178a0 <_dtoa_r+0x630>)
 801776c:	2000      	movs	r0, #0
 801776e:	f7e9 f88d 	bl	800088c <__aeabi_ddiv>
 8017772:	4652      	mov	r2, sl
 8017774:	465b      	mov	r3, fp
 8017776:	f7e8 fda7 	bl	80002c8 <__aeabi_dsub>
 801777a:	9d01      	ldr	r5, [sp, #4]
 801777c:	4682      	mov	sl, r0
 801777e:	468b      	mov	fp, r1
 8017780:	4649      	mov	r1, r9
 8017782:	4640      	mov	r0, r8
 8017784:	f7e9 fa08 	bl	8000b98 <__aeabi_d2iz>
 8017788:	4606      	mov	r6, r0
 801778a:	f7e8 feeb 	bl	8000564 <__aeabi_i2d>
 801778e:	4602      	mov	r2, r0
 8017790:	460b      	mov	r3, r1
 8017792:	4640      	mov	r0, r8
 8017794:	4649      	mov	r1, r9
 8017796:	f7e8 fd97 	bl	80002c8 <__aeabi_dsub>
 801779a:	3630      	adds	r6, #48	; 0x30
 801779c:	f805 6b01 	strb.w	r6, [r5], #1
 80177a0:	4652      	mov	r2, sl
 80177a2:	465b      	mov	r3, fp
 80177a4:	4680      	mov	r8, r0
 80177a6:	4689      	mov	r9, r1
 80177a8:	f7e9 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d163      	bne.n	8017878 <_dtoa_r+0x608>
 80177b0:	4642      	mov	r2, r8
 80177b2:	464b      	mov	r3, r9
 80177b4:	4936      	ldr	r1, [pc, #216]	; (8017890 <_dtoa_r+0x620>)
 80177b6:	2000      	movs	r0, #0
 80177b8:	f7e8 fd86 	bl	80002c8 <__aeabi_dsub>
 80177bc:	4652      	mov	r2, sl
 80177be:	465b      	mov	r3, fp
 80177c0:	f7e9 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	f040 80b5 	bne.w	8017934 <_dtoa_r+0x6c4>
 80177ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177cc:	429d      	cmp	r5, r3
 80177ce:	d081      	beq.n	80176d4 <_dtoa_r+0x464>
 80177d0:	4b30      	ldr	r3, [pc, #192]	; (8017894 <_dtoa_r+0x624>)
 80177d2:	2200      	movs	r2, #0
 80177d4:	4650      	mov	r0, sl
 80177d6:	4659      	mov	r1, fp
 80177d8:	f7e8 ff2e 	bl	8000638 <__aeabi_dmul>
 80177dc:	4b2d      	ldr	r3, [pc, #180]	; (8017894 <_dtoa_r+0x624>)
 80177de:	4682      	mov	sl, r0
 80177e0:	468b      	mov	fp, r1
 80177e2:	4640      	mov	r0, r8
 80177e4:	4649      	mov	r1, r9
 80177e6:	2200      	movs	r2, #0
 80177e8:	f7e8 ff26 	bl	8000638 <__aeabi_dmul>
 80177ec:	4680      	mov	r8, r0
 80177ee:	4689      	mov	r9, r1
 80177f0:	e7c6      	b.n	8017780 <_dtoa_r+0x510>
 80177f2:	4650      	mov	r0, sl
 80177f4:	4659      	mov	r1, fp
 80177f6:	f7e8 ff1f 	bl	8000638 <__aeabi_dmul>
 80177fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177fc:	9d01      	ldr	r5, [sp, #4]
 80177fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017800:	4682      	mov	sl, r0
 8017802:	468b      	mov	fp, r1
 8017804:	4649      	mov	r1, r9
 8017806:	4640      	mov	r0, r8
 8017808:	f7e9 f9c6 	bl	8000b98 <__aeabi_d2iz>
 801780c:	4606      	mov	r6, r0
 801780e:	f7e8 fea9 	bl	8000564 <__aeabi_i2d>
 8017812:	3630      	adds	r6, #48	; 0x30
 8017814:	4602      	mov	r2, r0
 8017816:	460b      	mov	r3, r1
 8017818:	4640      	mov	r0, r8
 801781a:	4649      	mov	r1, r9
 801781c:	f7e8 fd54 	bl	80002c8 <__aeabi_dsub>
 8017820:	f805 6b01 	strb.w	r6, [r5], #1
 8017824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017826:	429d      	cmp	r5, r3
 8017828:	4680      	mov	r8, r0
 801782a:	4689      	mov	r9, r1
 801782c:	f04f 0200 	mov.w	r2, #0
 8017830:	d124      	bne.n	801787c <_dtoa_r+0x60c>
 8017832:	4b1b      	ldr	r3, [pc, #108]	; (80178a0 <_dtoa_r+0x630>)
 8017834:	4650      	mov	r0, sl
 8017836:	4659      	mov	r1, fp
 8017838:	f7e8 fd48 	bl	80002cc <__adddf3>
 801783c:	4602      	mov	r2, r0
 801783e:	460b      	mov	r3, r1
 8017840:	4640      	mov	r0, r8
 8017842:	4649      	mov	r1, r9
 8017844:	f7e9 f988 	bl	8000b58 <__aeabi_dcmpgt>
 8017848:	2800      	cmp	r0, #0
 801784a:	d173      	bne.n	8017934 <_dtoa_r+0x6c4>
 801784c:	4652      	mov	r2, sl
 801784e:	465b      	mov	r3, fp
 8017850:	4913      	ldr	r1, [pc, #76]	; (80178a0 <_dtoa_r+0x630>)
 8017852:	2000      	movs	r0, #0
 8017854:	f7e8 fd38 	bl	80002c8 <__aeabi_dsub>
 8017858:	4602      	mov	r2, r0
 801785a:	460b      	mov	r3, r1
 801785c:	4640      	mov	r0, r8
 801785e:	4649      	mov	r1, r9
 8017860:	f7e9 f95c 	bl	8000b1c <__aeabi_dcmplt>
 8017864:	2800      	cmp	r0, #0
 8017866:	f43f af35 	beq.w	80176d4 <_dtoa_r+0x464>
 801786a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801786c:	1e6b      	subs	r3, r5, #1
 801786e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017874:	2b30      	cmp	r3, #48	; 0x30
 8017876:	d0f8      	beq.n	801786a <_dtoa_r+0x5fa>
 8017878:	9700      	str	r7, [sp, #0]
 801787a:	e049      	b.n	8017910 <_dtoa_r+0x6a0>
 801787c:	4b05      	ldr	r3, [pc, #20]	; (8017894 <_dtoa_r+0x624>)
 801787e:	f7e8 fedb 	bl	8000638 <__aeabi_dmul>
 8017882:	4680      	mov	r8, r0
 8017884:	4689      	mov	r9, r1
 8017886:	e7bd      	b.n	8017804 <_dtoa_r+0x594>
 8017888:	0801a1f8 	.word	0x0801a1f8
 801788c:	0801a1d0 	.word	0x0801a1d0
 8017890:	3ff00000 	.word	0x3ff00000
 8017894:	40240000 	.word	0x40240000
 8017898:	401c0000 	.word	0x401c0000
 801789c:	40140000 	.word	0x40140000
 80178a0:	3fe00000 	.word	0x3fe00000
 80178a4:	9d01      	ldr	r5, [sp, #4]
 80178a6:	4656      	mov	r6, sl
 80178a8:	465f      	mov	r7, fp
 80178aa:	4642      	mov	r2, r8
 80178ac:	464b      	mov	r3, r9
 80178ae:	4630      	mov	r0, r6
 80178b0:	4639      	mov	r1, r7
 80178b2:	f7e8 ffeb 	bl	800088c <__aeabi_ddiv>
 80178b6:	f7e9 f96f 	bl	8000b98 <__aeabi_d2iz>
 80178ba:	4682      	mov	sl, r0
 80178bc:	f7e8 fe52 	bl	8000564 <__aeabi_i2d>
 80178c0:	4642      	mov	r2, r8
 80178c2:	464b      	mov	r3, r9
 80178c4:	f7e8 feb8 	bl	8000638 <__aeabi_dmul>
 80178c8:	4602      	mov	r2, r0
 80178ca:	460b      	mov	r3, r1
 80178cc:	4630      	mov	r0, r6
 80178ce:	4639      	mov	r1, r7
 80178d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80178d4:	f7e8 fcf8 	bl	80002c8 <__aeabi_dsub>
 80178d8:	f805 6b01 	strb.w	r6, [r5], #1
 80178dc:	9e01      	ldr	r6, [sp, #4]
 80178de:	9f03      	ldr	r7, [sp, #12]
 80178e0:	1bae      	subs	r6, r5, r6
 80178e2:	42b7      	cmp	r7, r6
 80178e4:	4602      	mov	r2, r0
 80178e6:	460b      	mov	r3, r1
 80178e8:	d135      	bne.n	8017956 <_dtoa_r+0x6e6>
 80178ea:	f7e8 fcef 	bl	80002cc <__adddf3>
 80178ee:	4642      	mov	r2, r8
 80178f0:	464b      	mov	r3, r9
 80178f2:	4606      	mov	r6, r0
 80178f4:	460f      	mov	r7, r1
 80178f6:	f7e9 f92f 	bl	8000b58 <__aeabi_dcmpgt>
 80178fa:	b9d0      	cbnz	r0, 8017932 <_dtoa_r+0x6c2>
 80178fc:	4642      	mov	r2, r8
 80178fe:	464b      	mov	r3, r9
 8017900:	4630      	mov	r0, r6
 8017902:	4639      	mov	r1, r7
 8017904:	f7e9 f900 	bl	8000b08 <__aeabi_dcmpeq>
 8017908:	b110      	cbz	r0, 8017910 <_dtoa_r+0x6a0>
 801790a:	f01a 0f01 	tst.w	sl, #1
 801790e:	d110      	bne.n	8017932 <_dtoa_r+0x6c2>
 8017910:	4620      	mov	r0, r4
 8017912:	ee18 1a10 	vmov	r1, s16
 8017916:	f000 fafb 	bl	8017f10 <_Bfree>
 801791a:	2300      	movs	r3, #0
 801791c:	9800      	ldr	r0, [sp, #0]
 801791e:	702b      	strb	r3, [r5, #0]
 8017920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017922:	3001      	adds	r0, #1
 8017924:	6018      	str	r0, [r3, #0]
 8017926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017928:	2b00      	cmp	r3, #0
 801792a:	f43f acf1 	beq.w	8017310 <_dtoa_r+0xa0>
 801792e:	601d      	str	r5, [r3, #0]
 8017930:	e4ee      	b.n	8017310 <_dtoa_r+0xa0>
 8017932:	9f00      	ldr	r7, [sp, #0]
 8017934:	462b      	mov	r3, r5
 8017936:	461d      	mov	r5, r3
 8017938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801793c:	2a39      	cmp	r2, #57	; 0x39
 801793e:	d106      	bne.n	801794e <_dtoa_r+0x6de>
 8017940:	9a01      	ldr	r2, [sp, #4]
 8017942:	429a      	cmp	r2, r3
 8017944:	d1f7      	bne.n	8017936 <_dtoa_r+0x6c6>
 8017946:	9901      	ldr	r1, [sp, #4]
 8017948:	2230      	movs	r2, #48	; 0x30
 801794a:	3701      	adds	r7, #1
 801794c:	700a      	strb	r2, [r1, #0]
 801794e:	781a      	ldrb	r2, [r3, #0]
 8017950:	3201      	adds	r2, #1
 8017952:	701a      	strb	r2, [r3, #0]
 8017954:	e790      	b.n	8017878 <_dtoa_r+0x608>
 8017956:	4ba6      	ldr	r3, [pc, #664]	; (8017bf0 <_dtoa_r+0x980>)
 8017958:	2200      	movs	r2, #0
 801795a:	f7e8 fe6d 	bl	8000638 <__aeabi_dmul>
 801795e:	2200      	movs	r2, #0
 8017960:	2300      	movs	r3, #0
 8017962:	4606      	mov	r6, r0
 8017964:	460f      	mov	r7, r1
 8017966:	f7e9 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 801796a:	2800      	cmp	r0, #0
 801796c:	d09d      	beq.n	80178aa <_dtoa_r+0x63a>
 801796e:	e7cf      	b.n	8017910 <_dtoa_r+0x6a0>
 8017970:	9a08      	ldr	r2, [sp, #32]
 8017972:	2a00      	cmp	r2, #0
 8017974:	f000 80d7 	beq.w	8017b26 <_dtoa_r+0x8b6>
 8017978:	9a06      	ldr	r2, [sp, #24]
 801797a:	2a01      	cmp	r2, #1
 801797c:	f300 80ba 	bgt.w	8017af4 <_dtoa_r+0x884>
 8017980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017982:	2a00      	cmp	r2, #0
 8017984:	f000 80b2 	beq.w	8017aec <_dtoa_r+0x87c>
 8017988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801798c:	9e07      	ldr	r6, [sp, #28]
 801798e:	9d04      	ldr	r5, [sp, #16]
 8017990:	9a04      	ldr	r2, [sp, #16]
 8017992:	441a      	add	r2, r3
 8017994:	9204      	str	r2, [sp, #16]
 8017996:	9a05      	ldr	r2, [sp, #20]
 8017998:	2101      	movs	r1, #1
 801799a:	441a      	add	r2, r3
 801799c:	4620      	mov	r0, r4
 801799e:	9205      	str	r2, [sp, #20]
 80179a0:	f000 fb6e 	bl	8018080 <__i2b>
 80179a4:	4607      	mov	r7, r0
 80179a6:	2d00      	cmp	r5, #0
 80179a8:	dd0c      	ble.n	80179c4 <_dtoa_r+0x754>
 80179aa:	9b05      	ldr	r3, [sp, #20]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dd09      	ble.n	80179c4 <_dtoa_r+0x754>
 80179b0:	42ab      	cmp	r3, r5
 80179b2:	9a04      	ldr	r2, [sp, #16]
 80179b4:	bfa8      	it	ge
 80179b6:	462b      	movge	r3, r5
 80179b8:	1ad2      	subs	r2, r2, r3
 80179ba:	9204      	str	r2, [sp, #16]
 80179bc:	9a05      	ldr	r2, [sp, #20]
 80179be:	1aed      	subs	r5, r5, r3
 80179c0:	1ad3      	subs	r3, r2, r3
 80179c2:	9305      	str	r3, [sp, #20]
 80179c4:	9b07      	ldr	r3, [sp, #28]
 80179c6:	b31b      	cbz	r3, 8017a10 <_dtoa_r+0x7a0>
 80179c8:	9b08      	ldr	r3, [sp, #32]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	f000 80af 	beq.w	8017b2e <_dtoa_r+0x8be>
 80179d0:	2e00      	cmp	r6, #0
 80179d2:	dd13      	ble.n	80179fc <_dtoa_r+0x78c>
 80179d4:	4639      	mov	r1, r7
 80179d6:	4632      	mov	r2, r6
 80179d8:	4620      	mov	r0, r4
 80179da:	f000 fc11 	bl	8018200 <__pow5mult>
 80179de:	ee18 2a10 	vmov	r2, s16
 80179e2:	4601      	mov	r1, r0
 80179e4:	4607      	mov	r7, r0
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 fb60 	bl	80180ac <__multiply>
 80179ec:	ee18 1a10 	vmov	r1, s16
 80179f0:	4680      	mov	r8, r0
 80179f2:	4620      	mov	r0, r4
 80179f4:	f000 fa8c 	bl	8017f10 <_Bfree>
 80179f8:	ee08 8a10 	vmov	s16, r8
 80179fc:	9b07      	ldr	r3, [sp, #28]
 80179fe:	1b9a      	subs	r2, r3, r6
 8017a00:	d006      	beq.n	8017a10 <_dtoa_r+0x7a0>
 8017a02:	ee18 1a10 	vmov	r1, s16
 8017a06:	4620      	mov	r0, r4
 8017a08:	f000 fbfa 	bl	8018200 <__pow5mult>
 8017a0c:	ee08 0a10 	vmov	s16, r0
 8017a10:	2101      	movs	r1, #1
 8017a12:	4620      	mov	r0, r4
 8017a14:	f000 fb34 	bl	8018080 <__i2b>
 8017a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	4606      	mov	r6, r0
 8017a1e:	f340 8088 	ble.w	8017b32 <_dtoa_r+0x8c2>
 8017a22:	461a      	mov	r2, r3
 8017a24:	4601      	mov	r1, r0
 8017a26:	4620      	mov	r0, r4
 8017a28:	f000 fbea 	bl	8018200 <__pow5mult>
 8017a2c:	9b06      	ldr	r3, [sp, #24]
 8017a2e:	2b01      	cmp	r3, #1
 8017a30:	4606      	mov	r6, r0
 8017a32:	f340 8081 	ble.w	8017b38 <_dtoa_r+0x8c8>
 8017a36:	f04f 0800 	mov.w	r8, #0
 8017a3a:	6933      	ldr	r3, [r6, #16]
 8017a3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017a40:	6918      	ldr	r0, [r3, #16]
 8017a42:	f000 facd 	bl	8017fe0 <__hi0bits>
 8017a46:	f1c0 0020 	rsb	r0, r0, #32
 8017a4a:	9b05      	ldr	r3, [sp, #20]
 8017a4c:	4418      	add	r0, r3
 8017a4e:	f010 001f 	ands.w	r0, r0, #31
 8017a52:	f000 8092 	beq.w	8017b7a <_dtoa_r+0x90a>
 8017a56:	f1c0 0320 	rsb	r3, r0, #32
 8017a5a:	2b04      	cmp	r3, #4
 8017a5c:	f340 808a 	ble.w	8017b74 <_dtoa_r+0x904>
 8017a60:	f1c0 001c 	rsb	r0, r0, #28
 8017a64:	9b04      	ldr	r3, [sp, #16]
 8017a66:	4403      	add	r3, r0
 8017a68:	9304      	str	r3, [sp, #16]
 8017a6a:	9b05      	ldr	r3, [sp, #20]
 8017a6c:	4403      	add	r3, r0
 8017a6e:	4405      	add	r5, r0
 8017a70:	9305      	str	r3, [sp, #20]
 8017a72:	9b04      	ldr	r3, [sp, #16]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	dd07      	ble.n	8017a88 <_dtoa_r+0x818>
 8017a78:	ee18 1a10 	vmov	r1, s16
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f000 fc18 	bl	80182b4 <__lshift>
 8017a84:	ee08 0a10 	vmov	s16, r0
 8017a88:	9b05      	ldr	r3, [sp, #20]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	dd05      	ble.n	8017a9a <_dtoa_r+0x82a>
 8017a8e:	4631      	mov	r1, r6
 8017a90:	461a      	mov	r2, r3
 8017a92:	4620      	mov	r0, r4
 8017a94:	f000 fc0e 	bl	80182b4 <__lshift>
 8017a98:	4606      	mov	r6, r0
 8017a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d06e      	beq.n	8017b7e <_dtoa_r+0x90e>
 8017aa0:	ee18 0a10 	vmov	r0, s16
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	f000 fc75 	bl	8018394 <__mcmp>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	da67      	bge.n	8017b7e <_dtoa_r+0x90e>
 8017aae:	9b00      	ldr	r3, [sp, #0]
 8017ab0:	3b01      	subs	r3, #1
 8017ab2:	ee18 1a10 	vmov	r1, s16
 8017ab6:	9300      	str	r3, [sp, #0]
 8017ab8:	220a      	movs	r2, #10
 8017aba:	2300      	movs	r3, #0
 8017abc:	4620      	mov	r0, r4
 8017abe:	f000 fa49 	bl	8017f54 <__multadd>
 8017ac2:	9b08      	ldr	r3, [sp, #32]
 8017ac4:	ee08 0a10 	vmov	s16, r0
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f000 81b1 	beq.w	8017e30 <_dtoa_r+0xbc0>
 8017ace:	2300      	movs	r3, #0
 8017ad0:	4639      	mov	r1, r7
 8017ad2:	220a      	movs	r2, #10
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f000 fa3d 	bl	8017f54 <__multadd>
 8017ada:	9b02      	ldr	r3, [sp, #8]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	4607      	mov	r7, r0
 8017ae0:	f300 808e 	bgt.w	8017c00 <_dtoa_r+0x990>
 8017ae4:	9b06      	ldr	r3, [sp, #24]
 8017ae6:	2b02      	cmp	r3, #2
 8017ae8:	dc51      	bgt.n	8017b8e <_dtoa_r+0x91e>
 8017aea:	e089      	b.n	8017c00 <_dtoa_r+0x990>
 8017aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017af2:	e74b      	b.n	801798c <_dtoa_r+0x71c>
 8017af4:	9b03      	ldr	r3, [sp, #12]
 8017af6:	1e5e      	subs	r6, r3, #1
 8017af8:	9b07      	ldr	r3, [sp, #28]
 8017afa:	42b3      	cmp	r3, r6
 8017afc:	bfbf      	itttt	lt
 8017afe:	9b07      	ldrlt	r3, [sp, #28]
 8017b00:	9607      	strlt	r6, [sp, #28]
 8017b02:	1af2      	sublt	r2, r6, r3
 8017b04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017b06:	bfb6      	itet	lt
 8017b08:	189b      	addlt	r3, r3, r2
 8017b0a:	1b9e      	subge	r6, r3, r6
 8017b0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8017b0e:	9b03      	ldr	r3, [sp, #12]
 8017b10:	bfb8      	it	lt
 8017b12:	2600      	movlt	r6, #0
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	bfb7      	itett	lt
 8017b18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017b1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017b20:	1a9d      	sublt	r5, r3, r2
 8017b22:	2300      	movlt	r3, #0
 8017b24:	e734      	b.n	8017990 <_dtoa_r+0x720>
 8017b26:	9e07      	ldr	r6, [sp, #28]
 8017b28:	9d04      	ldr	r5, [sp, #16]
 8017b2a:	9f08      	ldr	r7, [sp, #32]
 8017b2c:	e73b      	b.n	80179a6 <_dtoa_r+0x736>
 8017b2e:	9a07      	ldr	r2, [sp, #28]
 8017b30:	e767      	b.n	8017a02 <_dtoa_r+0x792>
 8017b32:	9b06      	ldr	r3, [sp, #24]
 8017b34:	2b01      	cmp	r3, #1
 8017b36:	dc18      	bgt.n	8017b6a <_dtoa_r+0x8fa>
 8017b38:	f1ba 0f00 	cmp.w	sl, #0
 8017b3c:	d115      	bne.n	8017b6a <_dtoa_r+0x8fa>
 8017b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b42:	b993      	cbnz	r3, 8017b6a <_dtoa_r+0x8fa>
 8017b44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017b48:	0d1b      	lsrs	r3, r3, #20
 8017b4a:	051b      	lsls	r3, r3, #20
 8017b4c:	b183      	cbz	r3, 8017b70 <_dtoa_r+0x900>
 8017b4e:	9b04      	ldr	r3, [sp, #16]
 8017b50:	3301      	adds	r3, #1
 8017b52:	9304      	str	r3, [sp, #16]
 8017b54:	9b05      	ldr	r3, [sp, #20]
 8017b56:	3301      	adds	r3, #1
 8017b58:	9305      	str	r3, [sp, #20]
 8017b5a:	f04f 0801 	mov.w	r8, #1
 8017b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f47f af6a 	bne.w	8017a3a <_dtoa_r+0x7ca>
 8017b66:	2001      	movs	r0, #1
 8017b68:	e76f      	b.n	8017a4a <_dtoa_r+0x7da>
 8017b6a:	f04f 0800 	mov.w	r8, #0
 8017b6e:	e7f6      	b.n	8017b5e <_dtoa_r+0x8ee>
 8017b70:	4698      	mov	r8, r3
 8017b72:	e7f4      	b.n	8017b5e <_dtoa_r+0x8ee>
 8017b74:	f43f af7d 	beq.w	8017a72 <_dtoa_r+0x802>
 8017b78:	4618      	mov	r0, r3
 8017b7a:	301c      	adds	r0, #28
 8017b7c:	e772      	b.n	8017a64 <_dtoa_r+0x7f4>
 8017b7e:	9b03      	ldr	r3, [sp, #12]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	dc37      	bgt.n	8017bf4 <_dtoa_r+0x984>
 8017b84:	9b06      	ldr	r3, [sp, #24]
 8017b86:	2b02      	cmp	r3, #2
 8017b88:	dd34      	ble.n	8017bf4 <_dtoa_r+0x984>
 8017b8a:	9b03      	ldr	r3, [sp, #12]
 8017b8c:	9302      	str	r3, [sp, #8]
 8017b8e:	9b02      	ldr	r3, [sp, #8]
 8017b90:	b96b      	cbnz	r3, 8017bae <_dtoa_r+0x93e>
 8017b92:	4631      	mov	r1, r6
 8017b94:	2205      	movs	r2, #5
 8017b96:	4620      	mov	r0, r4
 8017b98:	f000 f9dc 	bl	8017f54 <__multadd>
 8017b9c:	4601      	mov	r1, r0
 8017b9e:	4606      	mov	r6, r0
 8017ba0:	ee18 0a10 	vmov	r0, s16
 8017ba4:	f000 fbf6 	bl	8018394 <__mcmp>
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	f73f adbb 	bgt.w	8017724 <_dtoa_r+0x4b4>
 8017bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bb0:	9d01      	ldr	r5, [sp, #4]
 8017bb2:	43db      	mvns	r3, r3
 8017bb4:	9300      	str	r3, [sp, #0]
 8017bb6:	f04f 0800 	mov.w	r8, #0
 8017bba:	4631      	mov	r1, r6
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	f000 f9a7 	bl	8017f10 <_Bfree>
 8017bc2:	2f00      	cmp	r7, #0
 8017bc4:	f43f aea4 	beq.w	8017910 <_dtoa_r+0x6a0>
 8017bc8:	f1b8 0f00 	cmp.w	r8, #0
 8017bcc:	d005      	beq.n	8017bda <_dtoa_r+0x96a>
 8017bce:	45b8      	cmp	r8, r7
 8017bd0:	d003      	beq.n	8017bda <_dtoa_r+0x96a>
 8017bd2:	4641      	mov	r1, r8
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f000 f99b 	bl	8017f10 <_Bfree>
 8017bda:	4639      	mov	r1, r7
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f000 f997 	bl	8017f10 <_Bfree>
 8017be2:	e695      	b.n	8017910 <_dtoa_r+0x6a0>
 8017be4:	2600      	movs	r6, #0
 8017be6:	4637      	mov	r7, r6
 8017be8:	e7e1      	b.n	8017bae <_dtoa_r+0x93e>
 8017bea:	9700      	str	r7, [sp, #0]
 8017bec:	4637      	mov	r7, r6
 8017bee:	e599      	b.n	8017724 <_dtoa_r+0x4b4>
 8017bf0:	40240000 	.word	0x40240000
 8017bf4:	9b08      	ldr	r3, [sp, #32]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	f000 80ca 	beq.w	8017d90 <_dtoa_r+0xb20>
 8017bfc:	9b03      	ldr	r3, [sp, #12]
 8017bfe:	9302      	str	r3, [sp, #8]
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	dd05      	ble.n	8017c10 <_dtoa_r+0x9a0>
 8017c04:	4639      	mov	r1, r7
 8017c06:	462a      	mov	r2, r5
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f000 fb53 	bl	80182b4 <__lshift>
 8017c0e:	4607      	mov	r7, r0
 8017c10:	f1b8 0f00 	cmp.w	r8, #0
 8017c14:	d05b      	beq.n	8017cce <_dtoa_r+0xa5e>
 8017c16:	6879      	ldr	r1, [r7, #4]
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f000 f939 	bl	8017e90 <_Balloc>
 8017c1e:	4605      	mov	r5, r0
 8017c20:	b928      	cbnz	r0, 8017c2e <_dtoa_r+0x9be>
 8017c22:	4b87      	ldr	r3, [pc, #540]	; (8017e40 <_dtoa_r+0xbd0>)
 8017c24:	4602      	mov	r2, r0
 8017c26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017c2a:	f7ff bb3b 	b.w	80172a4 <_dtoa_r+0x34>
 8017c2e:	693a      	ldr	r2, [r7, #16]
 8017c30:	3202      	adds	r2, #2
 8017c32:	0092      	lsls	r2, r2, #2
 8017c34:	f107 010c 	add.w	r1, r7, #12
 8017c38:	300c      	adds	r0, #12
 8017c3a:	f7fe fbf7 	bl	801642c <memcpy>
 8017c3e:	2201      	movs	r2, #1
 8017c40:	4629      	mov	r1, r5
 8017c42:	4620      	mov	r0, r4
 8017c44:	f000 fb36 	bl	80182b4 <__lshift>
 8017c48:	9b01      	ldr	r3, [sp, #4]
 8017c4a:	f103 0901 	add.w	r9, r3, #1
 8017c4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017c52:	4413      	add	r3, r2
 8017c54:	9305      	str	r3, [sp, #20]
 8017c56:	f00a 0301 	and.w	r3, sl, #1
 8017c5a:	46b8      	mov	r8, r7
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	4607      	mov	r7, r0
 8017c60:	4631      	mov	r1, r6
 8017c62:	ee18 0a10 	vmov	r0, s16
 8017c66:	f7ff fa77 	bl	8017158 <quorem>
 8017c6a:	4641      	mov	r1, r8
 8017c6c:	9002      	str	r0, [sp, #8]
 8017c6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017c72:	ee18 0a10 	vmov	r0, s16
 8017c76:	f000 fb8d 	bl	8018394 <__mcmp>
 8017c7a:	463a      	mov	r2, r7
 8017c7c:	9003      	str	r0, [sp, #12]
 8017c7e:	4631      	mov	r1, r6
 8017c80:	4620      	mov	r0, r4
 8017c82:	f000 fba3 	bl	80183cc <__mdiff>
 8017c86:	68c2      	ldr	r2, [r0, #12]
 8017c88:	f109 3bff 	add.w	fp, r9, #4294967295
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	bb02      	cbnz	r2, 8017cd2 <_dtoa_r+0xa62>
 8017c90:	4601      	mov	r1, r0
 8017c92:	ee18 0a10 	vmov	r0, s16
 8017c96:	f000 fb7d 	bl	8018394 <__mcmp>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	4629      	mov	r1, r5
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	9207      	str	r2, [sp, #28]
 8017ca2:	f000 f935 	bl	8017f10 <_Bfree>
 8017ca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017caa:	ea43 0102 	orr.w	r1, r3, r2
 8017cae:	9b04      	ldr	r3, [sp, #16]
 8017cb0:	430b      	orrs	r3, r1
 8017cb2:	464d      	mov	r5, r9
 8017cb4:	d10f      	bne.n	8017cd6 <_dtoa_r+0xa66>
 8017cb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017cba:	d02a      	beq.n	8017d12 <_dtoa_r+0xaa2>
 8017cbc:	9b03      	ldr	r3, [sp, #12]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	dd02      	ble.n	8017cc8 <_dtoa_r+0xa58>
 8017cc2:	9b02      	ldr	r3, [sp, #8]
 8017cc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017cc8:	f88b a000 	strb.w	sl, [fp]
 8017ccc:	e775      	b.n	8017bba <_dtoa_r+0x94a>
 8017cce:	4638      	mov	r0, r7
 8017cd0:	e7ba      	b.n	8017c48 <_dtoa_r+0x9d8>
 8017cd2:	2201      	movs	r2, #1
 8017cd4:	e7e2      	b.n	8017c9c <_dtoa_r+0xa2c>
 8017cd6:	9b03      	ldr	r3, [sp, #12]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	db04      	blt.n	8017ce6 <_dtoa_r+0xa76>
 8017cdc:	9906      	ldr	r1, [sp, #24]
 8017cde:	430b      	orrs	r3, r1
 8017ce0:	9904      	ldr	r1, [sp, #16]
 8017ce2:	430b      	orrs	r3, r1
 8017ce4:	d122      	bne.n	8017d2c <_dtoa_r+0xabc>
 8017ce6:	2a00      	cmp	r2, #0
 8017ce8:	ddee      	ble.n	8017cc8 <_dtoa_r+0xa58>
 8017cea:	ee18 1a10 	vmov	r1, s16
 8017cee:	2201      	movs	r2, #1
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f000 fadf 	bl	80182b4 <__lshift>
 8017cf6:	4631      	mov	r1, r6
 8017cf8:	ee08 0a10 	vmov	s16, r0
 8017cfc:	f000 fb4a 	bl	8018394 <__mcmp>
 8017d00:	2800      	cmp	r0, #0
 8017d02:	dc03      	bgt.n	8017d0c <_dtoa_r+0xa9c>
 8017d04:	d1e0      	bne.n	8017cc8 <_dtoa_r+0xa58>
 8017d06:	f01a 0f01 	tst.w	sl, #1
 8017d0a:	d0dd      	beq.n	8017cc8 <_dtoa_r+0xa58>
 8017d0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017d10:	d1d7      	bne.n	8017cc2 <_dtoa_r+0xa52>
 8017d12:	2339      	movs	r3, #57	; 0x39
 8017d14:	f88b 3000 	strb.w	r3, [fp]
 8017d18:	462b      	mov	r3, r5
 8017d1a:	461d      	mov	r5, r3
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d22:	2a39      	cmp	r2, #57	; 0x39
 8017d24:	d071      	beq.n	8017e0a <_dtoa_r+0xb9a>
 8017d26:	3201      	adds	r2, #1
 8017d28:	701a      	strb	r2, [r3, #0]
 8017d2a:	e746      	b.n	8017bba <_dtoa_r+0x94a>
 8017d2c:	2a00      	cmp	r2, #0
 8017d2e:	dd07      	ble.n	8017d40 <_dtoa_r+0xad0>
 8017d30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017d34:	d0ed      	beq.n	8017d12 <_dtoa_r+0xaa2>
 8017d36:	f10a 0301 	add.w	r3, sl, #1
 8017d3a:	f88b 3000 	strb.w	r3, [fp]
 8017d3e:	e73c      	b.n	8017bba <_dtoa_r+0x94a>
 8017d40:	9b05      	ldr	r3, [sp, #20]
 8017d42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017d46:	4599      	cmp	r9, r3
 8017d48:	d047      	beq.n	8017dda <_dtoa_r+0xb6a>
 8017d4a:	ee18 1a10 	vmov	r1, s16
 8017d4e:	2300      	movs	r3, #0
 8017d50:	220a      	movs	r2, #10
 8017d52:	4620      	mov	r0, r4
 8017d54:	f000 f8fe 	bl	8017f54 <__multadd>
 8017d58:	45b8      	cmp	r8, r7
 8017d5a:	ee08 0a10 	vmov	s16, r0
 8017d5e:	f04f 0300 	mov.w	r3, #0
 8017d62:	f04f 020a 	mov.w	r2, #10
 8017d66:	4641      	mov	r1, r8
 8017d68:	4620      	mov	r0, r4
 8017d6a:	d106      	bne.n	8017d7a <_dtoa_r+0xb0a>
 8017d6c:	f000 f8f2 	bl	8017f54 <__multadd>
 8017d70:	4680      	mov	r8, r0
 8017d72:	4607      	mov	r7, r0
 8017d74:	f109 0901 	add.w	r9, r9, #1
 8017d78:	e772      	b.n	8017c60 <_dtoa_r+0x9f0>
 8017d7a:	f000 f8eb 	bl	8017f54 <__multadd>
 8017d7e:	4639      	mov	r1, r7
 8017d80:	4680      	mov	r8, r0
 8017d82:	2300      	movs	r3, #0
 8017d84:	220a      	movs	r2, #10
 8017d86:	4620      	mov	r0, r4
 8017d88:	f000 f8e4 	bl	8017f54 <__multadd>
 8017d8c:	4607      	mov	r7, r0
 8017d8e:	e7f1      	b.n	8017d74 <_dtoa_r+0xb04>
 8017d90:	9b03      	ldr	r3, [sp, #12]
 8017d92:	9302      	str	r3, [sp, #8]
 8017d94:	9d01      	ldr	r5, [sp, #4]
 8017d96:	ee18 0a10 	vmov	r0, s16
 8017d9a:	4631      	mov	r1, r6
 8017d9c:	f7ff f9dc 	bl	8017158 <quorem>
 8017da0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017da4:	9b01      	ldr	r3, [sp, #4]
 8017da6:	f805 ab01 	strb.w	sl, [r5], #1
 8017daa:	1aea      	subs	r2, r5, r3
 8017dac:	9b02      	ldr	r3, [sp, #8]
 8017dae:	4293      	cmp	r3, r2
 8017db0:	dd09      	ble.n	8017dc6 <_dtoa_r+0xb56>
 8017db2:	ee18 1a10 	vmov	r1, s16
 8017db6:	2300      	movs	r3, #0
 8017db8:	220a      	movs	r2, #10
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f000 f8ca 	bl	8017f54 <__multadd>
 8017dc0:	ee08 0a10 	vmov	s16, r0
 8017dc4:	e7e7      	b.n	8017d96 <_dtoa_r+0xb26>
 8017dc6:	9b02      	ldr	r3, [sp, #8]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	bfc8      	it	gt
 8017dcc:	461d      	movgt	r5, r3
 8017dce:	9b01      	ldr	r3, [sp, #4]
 8017dd0:	bfd8      	it	le
 8017dd2:	2501      	movle	r5, #1
 8017dd4:	441d      	add	r5, r3
 8017dd6:	f04f 0800 	mov.w	r8, #0
 8017dda:	ee18 1a10 	vmov	r1, s16
 8017dde:	2201      	movs	r2, #1
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 fa67 	bl	80182b4 <__lshift>
 8017de6:	4631      	mov	r1, r6
 8017de8:	ee08 0a10 	vmov	s16, r0
 8017dec:	f000 fad2 	bl	8018394 <__mcmp>
 8017df0:	2800      	cmp	r0, #0
 8017df2:	dc91      	bgt.n	8017d18 <_dtoa_r+0xaa8>
 8017df4:	d102      	bne.n	8017dfc <_dtoa_r+0xb8c>
 8017df6:	f01a 0f01 	tst.w	sl, #1
 8017dfa:	d18d      	bne.n	8017d18 <_dtoa_r+0xaa8>
 8017dfc:	462b      	mov	r3, r5
 8017dfe:	461d      	mov	r5, r3
 8017e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e04:	2a30      	cmp	r2, #48	; 0x30
 8017e06:	d0fa      	beq.n	8017dfe <_dtoa_r+0xb8e>
 8017e08:	e6d7      	b.n	8017bba <_dtoa_r+0x94a>
 8017e0a:	9a01      	ldr	r2, [sp, #4]
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d184      	bne.n	8017d1a <_dtoa_r+0xaaa>
 8017e10:	9b00      	ldr	r3, [sp, #0]
 8017e12:	3301      	adds	r3, #1
 8017e14:	9300      	str	r3, [sp, #0]
 8017e16:	2331      	movs	r3, #49	; 0x31
 8017e18:	7013      	strb	r3, [r2, #0]
 8017e1a:	e6ce      	b.n	8017bba <_dtoa_r+0x94a>
 8017e1c:	4b09      	ldr	r3, [pc, #36]	; (8017e44 <_dtoa_r+0xbd4>)
 8017e1e:	f7ff ba95 	b.w	801734c <_dtoa_r+0xdc>
 8017e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	f47f aa6e 	bne.w	8017306 <_dtoa_r+0x96>
 8017e2a:	4b07      	ldr	r3, [pc, #28]	; (8017e48 <_dtoa_r+0xbd8>)
 8017e2c:	f7ff ba8e 	b.w	801734c <_dtoa_r+0xdc>
 8017e30:	9b02      	ldr	r3, [sp, #8]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	dcae      	bgt.n	8017d94 <_dtoa_r+0xb24>
 8017e36:	9b06      	ldr	r3, [sp, #24]
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	f73f aea8 	bgt.w	8017b8e <_dtoa_r+0x91e>
 8017e3e:	e7a9      	b.n	8017d94 <_dtoa_r+0xb24>
 8017e40:	0801a15d 	.word	0x0801a15d
 8017e44:	08019f20 	.word	0x08019f20
 8017e48:	0801a0f5 	.word	0x0801a0f5

08017e4c <fiprintf>:
 8017e4c:	b40e      	push	{r1, r2, r3}
 8017e4e:	b503      	push	{r0, r1, lr}
 8017e50:	4601      	mov	r1, r0
 8017e52:	ab03      	add	r3, sp, #12
 8017e54:	4805      	ldr	r0, [pc, #20]	; (8017e6c <fiprintf+0x20>)
 8017e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e5a:	6800      	ldr	r0, [r0, #0]
 8017e5c:	9301      	str	r3, [sp, #4]
 8017e5e:	f000 fd37 	bl	80188d0 <_vfiprintf_r>
 8017e62:	b002      	add	sp, #8
 8017e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e68:	b003      	add	sp, #12
 8017e6a:	4770      	bx	lr
 8017e6c:	2000012c 	.word	0x2000012c

08017e70 <_localeconv_r>:
 8017e70:	4800      	ldr	r0, [pc, #0]	; (8017e74 <_localeconv_r+0x4>)
 8017e72:	4770      	bx	lr
 8017e74:	20000280 	.word	0x20000280

08017e78 <__malloc_lock>:
 8017e78:	4801      	ldr	r0, [pc, #4]	; (8017e80 <__malloc_lock+0x8>)
 8017e7a:	f001 b8d9 	b.w	8019030 <__retarget_lock_acquire_recursive>
 8017e7e:	bf00      	nop
 8017e80:	2000306c 	.word	0x2000306c

08017e84 <__malloc_unlock>:
 8017e84:	4801      	ldr	r0, [pc, #4]	; (8017e8c <__malloc_unlock+0x8>)
 8017e86:	f001 b8d4 	b.w	8019032 <__retarget_lock_release_recursive>
 8017e8a:	bf00      	nop
 8017e8c:	2000306c 	.word	0x2000306c

08017e90 <_Balloc>:
 8017e90:	b570      	push	{r4, r5, r6, lr}
 8017e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017e94:	4604      	mov	r4, r0
 8017e96:	460d      	mov	r5, r1
 8017e98:	b976      	cbnz	r6, 8017eb8 <_Balloc+0x28>
 8017e9a:	2010      	movs	r0, #16
 8017e9c:	f7fe faa6 	bl	80163ec <malloc>
 8017ea0:	4602      	mov	r2, r0
 8017ea2:	6260      	str	r0, [r4, #36]	; 0x24
 8017ea4:	b920      	cbnz	r0, 8017eb0 <_Balloc+0x20>
 8017ea6:	4b18      	ldr	r3, [pc, #96]	; (8017f08 <_Balloc+0x78>)
 8017ea8:	4818      	ldr	r0, [pc, #96]	; (8017f0c <_Balloc+0x7c>)
 8017eaa:	2166      	movs	r1, #102	; 0x66
 8017eac:	f7ff f936 	bl	801711c <__assert_func>
 8017eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017eb4:	6006      	str	r6, [r0, #0]
 8017eb6:	60c6      	str	r6, [r0, #12]
 8017eb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017eba:	68f3      	ldr	r3, [r6, #12]
 8017ebc:	b183      	cbz	r3, 8017ee0 <_Balloc+0x50>
 8017ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec0:	68db      	ldr	r3, [r3, #12]
 8017ec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017ec6:	b9b8      	cbnz	r0, 8017ef8 <_Balloc+0x68>
 8017ec8:	2101      	movs	r1, #1
 8017eca:	fa01 f605 	lsl.w	r6, r1, r5
 8017ece:	1d72      	adds	r2, r6, #5
 8017ed0:	0092      	lsls	r2, r2, #2
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f000 fb60 	bl	8018598 <_calloc_r>
 8017ed8:	b160      	cbz	r0, 8017ef4 <_Balloc+0x64>
 8017eda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017ede:	e00e      	b.n	8017efe <_Balloc+0x6e>
 8017ee0:	2221      	movs	r2, #33	; 0x21
 8017ee2:	2104      	movs	r1, #4
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	f000 fb57 	bl	8018598 <_calloc_r>
 8017eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017eec:	60f0      	str	r0, [r6, #12]
 8017eee:	68db      	ldr	r3, [r3, #12]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d1e4      	bne.n	8017ebe <_Balloc+0x2e>
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	bd70      	pop	{r4, r5, r6, pc}
 8017ef8:	6802      	ldr	r2, [r0, #0]
 8017efa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017efe:	2300      	movs	r3, #0
 8017f00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f04:	e7f7      	b.n	8017ef6 <_Balloc+0x66>
 8017f06:	bf00      	nop
 8017f08:	08019f44 	.word	0x08019f44
 8017f0c:	0801a16e 	.word	0x0801a16e

08017f10 <_Bfree>:
 8017f10:	b570      	push	{r4, r5, r6, lr}
 8017f12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017f14:	4605      	mov	r5, r0
 8017f16:	460c      	mov	r4, r1
 8017f18:	b976      	cbnz	r6, 8017f38 <_Bfree+0x28>
 8017f1a:	2010      	movs	r0, #16
 8017f1c:	f7fe fa66 	bl	80163ec <malloc>
 8017f20:	4602      	mov	r2, r0
 8017f22:	6268      	str	r0, [r5, #36]	; 0x24
 8017f24:	b920      	cbnz	r0, 8017f30 <_Bfree+0x20>
 8017f26:	4b09      	ldr	r3, [pc, #36]	; (8017f4c <_Bfree+0x3c>)
 8017f28:	4809      	ldr	r0, [pc, #36]	; (8017f50 <_Bfree+0x40>)
 8017f2a:	218a      	movs	r1, #138	; 0x8a
 8017f2c:	f7ff f8f6 	bl	801711c <__assert_func>
 8017f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f34:	6006      	str	r6, [r0, #0]
 8017f36:	60c6      	str	r6, [r0, #12]
 8017f38:	b13c      	cbz	r4, 8017f4a <_Bfree+0x3a>
 8017f3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017f3c:	6862      	ldr	r2, [r4, #4]
 8017f3e:	68db      	ldr	r3, [r3, #12]
 8017f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017f44:	6021      	str	r1, [r4, #0]
 8017f46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017f4a:	bd70      	pop	{r4, r5, r6, pc}
 8017f4c:	08019f44 	.word	0x08019f44
 8017f50:	0801a16e 	.word	0x0801a16e

08017f54 <__multadd>:
 8017f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f58:	690d      	ldr	r5, [r1, #16]
 8017f5a:	4607      	mov	r7, r0
 8017f5c:	460c      	mov	r4, r1
 8017f5e:	461e      	mov	r6, r3
 8017f60:	f101 0c14 	add.w	ip, r1, #20
 8017f64:	2000      	movs	r0, #0
 8017f66:	f8dc 3000 	ldr.w	r3, [ip]
 8017f6a:	b299      	uxth	r1, r3
 8017f6c:	fb02 6101 	mla	r1, r2, r1, r6
 8017f70:	0c1e      	lsrs	r6, r3, #16
 8017f72:	0c0b      	lsrs	r3, r1, #16
 8017f74:	fb02 3306 	mla	r3, r2, r6, r3
 8017f78:	b289      	uxth	r1, r1
 8017f7a:	3001      	adds	r0, #1
 8017f7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f80:	4285      	cmp	r5, r0
 8017f82:	f84c 1b04 	str.w	r1, [ip], #4
 8017f86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f8a:	dcec      	bgt.n	8017f66 <__multadd+0x12>
 8017f8c:	b30e      	cbz	r6, 8017fd2 <__multadd+0x7e>
 8017f8e:	68a3      	ldr	r3, [r4, #8]
 8017f90:	42ab      	cmp	r3, r5
 8017f92:	dc19      	bgt.n	8017fc8 <__multadd+0x74>
 8017f94:	6861      	ldr	r1, [r4, #4]
 8017f96:	4638      	mov	r0, r7
 8017f98:	3101      	adds	r1, #1
 8017f9a:	f7ff ff79 	bl	8017e90 <_Balloc>
 8017f9e:	4680      	mov	r8, r0
 8017fa0:	b928      	cbnz	r0, 8017fae <__multadd+0x5a>
 8017fa2:	4602      	mov	r2, r0
 8017fa4:	4b0c      	ldr	r3, [pc, #48]	; (8017fd8 <__multadd+0x84>)
 8017fa6:	480d      	ldr	r0, [pc, #52]	; (8017fdc <__multadd+0x88>)
 8017fa8:	21b5      	movs	r1, #181	; 0xb5
 8017faa:	f7ff f8b7 	bl	801711c <__assert_func>
 8017fae:	6922      	ldr	r2, [r4, #16]
 8017fb0:	3202      	adds	r2, #2
 8017fb2:	f104 010c 	add.w	r1, r4, #12
 8017fb6:	0092      	lsls	r2, r2, #2
 8017fb8:	300c      	adds	r0, #12
 8017fba:	f7fe fa37 	bl	801642c <memcpy>
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	4638      	mov	r0, r7
 8017fc2:	f7ff ffa5 	bl	8017f10 <_Bfree>
 8017fc6:	4644      	mov	r4, r8
 8017fc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017fcc:	3501      	adds	r5, #1
 8017fce:	615e      	str	r6, [r3, #20]
 8017fd0:	6125      	str	r5, [r4, #16]
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fd8:	0801a15d 	.word	0x0801a15d
 8017fdc:	0801a16e 	.word	0x0801a16e

08017fe0 <__hi0bits>:
 8017fe0:	0c03      	lsrs	r3, r0, #16
 8017fe2:	041b      	lsls	r3, r3, #16
 8017fe4:	b9d3      	cbnz	r3, 801801c <__hi0bits+0x3c>
 8017fe6:	0400      	lsls	r0, r0, #16
 8017fe8:	2310      	movs	r3, #16
 8017fea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017fee:	bf04      	itt	eq
 8017ff0:	0200      	lsleq	r0, r0, #8
 8017ff2:	3308      	addeq	r3, #8
 8017ff4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017ff8:	bf04      	itt	eq
 8017ffa:	0100      	lsleq	r0, r0, #4
 8017ffc:	3304      	addeq	r3, #4
 8017ffe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018002:	bf04      	itt	eq
 8018004:	0080      	lsleq	r0, r0, #2
 8018006:	3302      	addeq	r3, #2
 8018008:	2800      	cmp	r0, #0
 801800a:	db05      	blt.n	8018018 <__hi0bits+0x38>
 801800c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018010:	f103 0301 	add.w	r3, r3, #1
 8018014:	bf08      	it	eq
 8018016:	2320      	moveq	r3, #32
 8018018:	4618      	mov	r0, r3
 801801a:	4770      	bx	lr
 801801c:	2300      	movs	r3, #0
 801801e:	e7e4      	b.n	8017fea <__hi0bits+0xa>

08018020 <__lo0bits>:
 8018020:	6803      	ldr	r3, [r0, #0]
 8018022:	f013 0207 	ands.w	r2, r3, #7
 8018026:	4601      	mov	r1, r0
 8018028:	d00b      	beq.n	8018042 <__lo0bits+0x22>
 801802a:	07da      	lsls	r2, r3, #31
 801802c:	d423      	bmi.n	8018076 <__lo0bits+0x56>
 801802e:	0798      	lsls	r0, r3, #30
 8018030:	bf49      	itett	mi
 8018032:	085b      	lsrmi	r3, r3, #1
 8018034:	089b      	lsrpl	r3, r3, #2
 8018036:	2001      	movmi	r0, #1
 8018038:	600b      	strmi	r3, [r1, #0]
 801803a:	bf5c      	itt	pl
 801803c:	600b      	strpl	r3, [r1, #0]
 801803e:	2002      	movpl	r0, #2
 8018040:	4770      	bx	lr
 8018042:	b298      	uxth	r0, r3
 8018044:	b9a8      	cbnz	r0, 8018072 <__lo0bits+0x52>
 8018046:	0c1b      	lsrs	r3, r3, #16
 8018048:	2010      	movs	r0, #16
 801804a:	b2da      	uxtb	r2, r3
 801804c:	b90a      	cbnz	r2, 8018052 <__lo0bits+0x32>
 801804e:	3008      	adds	r0, #8
 8018050:	0a1b      	lsrs	r3, r3, #8
 8018052:	071a      	lsls	r2, r3, #28
 8018054:	bf04      	itt	eq
 8018056:	091b      	lsreq	r3, r3, #4
 8018058:	3004      	addeq	r0, #4
 801805a:	079a      	lsls	r2, r3, #30
 801805c:	bf04      	itt	eq
 801805e:	089b      	lsreq	r3, r3, #2
 8018060:	3002      	addeq	r0, #2
 8018062:	07da      	lsls	r2, r3, #31
 8018064:	d403      	bmi.n	801806e <__lo0bits+0x4e>
 8018066:	085b      	lsrs	r3, r3, #1
 8018068:	f100 0001 	add.w	r0, r0, #1
 801806c:	d005      	beq.n	801807a <__lo0bits+0x5a>
 801806e:	600b      	str	r3, [r1, #0]
 8018070:	4770      	bx	lr
 8018072:	4610      	mov	r0, r2
 8018074:	e7e9      	b.n	801804a <__lo0bits+0x2a>
 8018076:	2000      	movs	r0, #0
 8018078:	4770      	bx	lr
 801807a:	2020      	movs	r0, #32
 801807c:	4770      	bx	lr
	...

08018080 <__i2b>:
 8018080:	b510      	push	{r4, lr}
 8018082:	460c      	mov	r4, r1
 8018084:	2101      	movs	r1, #1
 8018086:	f7ff ff03 	bl	8017e90 <_Balloc>
 801808a:	4602      	mov	r2, r0
 801808c:	b928      	cbnz	r0, 801809a <__i2b+0x1a>
 801808e:	4b05      	ldr	r3, [pc, #20]	; (80180a4 <__i2b+0x24>)
 8018090:	4805      	ldr	r0, [pc, #20]	; (80180a8 <__i2b+0x28>)
 8018092:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018096:	f7ff f841 	bl	801711c <__assert_func>
 801809a:	2301      	movs	r3, #1
 801809c:	6144      	str	r4, [r0, #20]
 801809e:	6103      	str	r3, [r0, #16]
 80180a0:	bd10      	pop	{r4, pc}
 80180a2:	bf00      	nop
 80180a4:	0801a15d 	.word	0x0801a15d
 80180a8:	0801a16e 	.word	0x0801a16e

080180ac <__multiply>:
 80180ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b0:	4691      	mov	r9, r2
 80180b2:	690a      	ldr	r2, [r1, #16]
 80180b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80180b8:	429a      	cmp	r2, r3
 80180ba:	bfb8      	it	lt
 80180bc:	460b      	movlt	r3, r1
 80180be:	460c      	mov	r4, r1
 80180c0:	bfbc      	itt	lt
 80180c2:	464c      	movlt	r4, r9
 80180c4:	4699      	movlt	r9, r3
 80180c6:	6927      	ldr	r7, [r4, #16]
 80180c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80180cc:	68a3      	ldr	r3, [r4, #8]
 80180ce:	6861      	ldr	r1, [r4, #4]
 80180d0:	eb07 060a 	add.w	r6, r7, sl
 80180d4:	42b3      	cmp	r3, r6
 80180d6:	b085      	sub	sp, #20
 80180d8:	bfb8      	it	lt
 80180da:	3101      	addlt	r1, #1
 80180dc:	f7ff fed8 	bl	8017e90 <_Balloc>
 80180e0:	b930      	cbnz	r0, 80180f0 <__multiply+0x44>
 80180e2:	4602      	mov	r2, r0
 80180e4:	4b44      	ldr	r3, [pc, #272]	; (80181f8 <__multiply+0x14c>)
 80180e6:	4845      	ldr	r0, [pc, #276]	; (80181fc <__multiply+0x150>)
 80180e8:	f240 115d 	movw	r1, #349	; 0x15d
 80180ec:	f7ff f816 	bl	801711c <__assert_func>
 80180f0:	f100 0514 	add.w	r5, r0, #20
 80180f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80180f8:	462b      	mov	r3, r5
 80180fa:	2200      	movs	r2, #0
 80180fc:	4543      	cmp	r3, r8
 80180fe:	d321      	bcc.n	8018144 <__multiply+0x98>
 8018100:	f104 0314 	add.w	r3, r4, #20
 8018104:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018108:	f109 0314 	add.w	r3, r9, #20
 801810c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018110:	9202      	str	r2, [sp, #8]
 8018112:	1b3a      	subs	r2, r7, r4
 8018114:	3a15      	subs	r2, #21
 8018116:	f022 0203 	bic.w	r2, r2, #3
 801811a:	3204      	adds	r2, #4
 801811c:	f104 0115 	add.w	r1, r4, #21
 8018120:	428f      	cmp	r7, r1
 8018122:	bf38      	it	cc
 8018124:	2204      	movcc	r2, #4
 8018126:	9201      	str	r2, [sp, #4]
 8018128:	9a02      	ldr	r2, [sp, #8]
 801812a:	9303      	str	r3, [sp, #12]
 801812c:	429a      	cmp	r2, r3
 801812e:	d80c      	bhi.n	801814a <__multiply+0x9e>
 8018130:	2e00      	cmp	r6, #0
 8018132:	dd03      	ble.n	801813c <__multiply+0x90>
 8018134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018138:	2b00      	cmp	r3, #0
 801813a:	d05a      	beq.n	80181f2 <__multiply+0x146>
 801813c:	6106      	str	r6, [r0, #16]
 801813e:	b005      	add	sp, #20
 8018140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018144:	f843 2b04 	str.w	r2, [r3], #4
 8018148:	e7d8      	b.n	80180fc <__multiply+0x50>
 801814a:	f8b3 a000 	ldrh.w	sl, [r3]
 801814e:	f1ba 0f00 	cmp.w	sl, #0
 8018152:	d024      	beq.n	801819e <__multiply+0xf2>
 8018154:	f104 0e14 	add.w	lr, r4, #20
 8018158:	46a9      	mov	r9, r5
 801815a:	f04f 0c00 	mov.w	ip, #0
 801815e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018162:	f8d9 1000 	ldr.w	r1, [r9]
 8018166:	fa1f fb82 	uxth.w	fp, r2
 801816a:	b289      	uxth	r1, r1
 801816c:	fb0a 110b 	mla	r1, sl, fp, r1
 8018170:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018174:	f8d9 2000 	ldr.w	r2, [r9]
 8018178:	4461      	add	r1, ip
 801817a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801817e:	fb0a c20b 	mla	r2, sl, fp, ip
 8018182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018186:	b289      	uxth	r1, r1
 8018188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801818c:	4577      	cmp	r7, lr
 801818e:	f849 1b04 	str.w	r1, [r9], #4
 8018192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018196:	d8e2      	bhi.n	801815e <__multiply+0xb2>
 8018198:	9a01      	ldr	r2, [sp, #4]
 801819a:	f845 c002 	str.w	ip, [r5, r2]
 801819e:	9a03      	ldr	r2, [sp, #12]
 80181a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80181a4:	3304      	adds	r3, #4
 80181a6:	f1b9 0f00 	cmp.w	r9, #0
 80181aa:	d020      	beq.n	80181ee <__multiply+0x142>
 80181ac:	6829      	ldr	r1, [r5, #0]
 80181ae:	f104 0c14 	add.w	ip, r4, #20
 80181b2:	46ae      	mov	lr, r5
 80181b4:	f04f 0a00 	mov.w	sl, #0
 80181b8:	f8bc b000 	ldrh.w	fp, [ip]
 80181bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80181c0:	fb09 220b 	mla	r2, r9, fp, r2
 80181c4:	4492      	add	sl, r2
 80181c6:	b289      	uxth	r1, r1
 80181c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80181cc:	f84e 1b04 	str.w	r1, [lr], #4
 80181d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80181d4:	f8be 1000 	ldrh.w	r1, [lr]
 80181d8:	0c12      	lsrs	r2, r2, #16
 80181da:	fb09 1102 	mla	r1, r9, r2, r1
 80181de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80181e2:	4567      	cmp	r7, ip
 80181e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80181e8:	d8e6      	bhi.n	80181b8 <__multiply+0x10c>
 80181ea:	9a01      	ldr	r2, [sp, #4]
 80181ec:	50a9      	str	r1, [r5, r2]
 80181ee:	3504      	adds	r5, #4
 80181f0:	e79a      	b.n	8018128 <__multiply+0x7c>
 80181f2:	3e01      	subs	r6, #1
 80181f4:	e79c      	b.n	8018130 <__multiply+0x84>
 80181f6:	bf00      	nop
 80181f8:	0801a15d 	.word	0x0801a15d
 80181fc:	0801a16e 	.word	0x0801a16e

08018200 <__pow5mult>:
 8018200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018204:	4615      	mov	r5, r2
 8018206:	f012 0203 	ands.w	r2, r2, #3
 801820a:	4606      	mov	r6, r0
 801820c:	460f      	mov	r7, r1
 801820e:	d007      	beq.n	8018220 <__pow5mult+0x20>
 8018210:	4c25      	ldr	r4, [pc, #148]	; (80182a8 <__pow5mult+0xa8>)
 8018212:	3a01      	subs	r2, #1
 8018214:	2300      	movs	r3, #0
 8018216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801821a:	f7ff fe9b 	bl	8017f54 <__multadd>
 801821e:	4607      	mov	r7, r0
 8018220:	10ad      	asrs	r5, r5, #2
 8018222:	d03d      	beq.n	80182a0 <__pow5mult+0xa0>
 8018224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018226:	b97c      	cbnz	r4, 8018248 <__pow5mult+0x48>
 8018228:	2010      	movs	r0, #16
 801822a:	f7fe f8df 	bl	80163ec <malloc>
 801822e:	4602      	mov	r2, r0
 8018230:	6270      	str	r0, [r6, #36]	; 0x24
 8018232:	b928      	cbnz	r0, 8018240 <__pow5mult+0x40>
 8018234:	4b1d      	ldr	r3, [pc, #116]	; (80182ac <__pow5mult+0xac>)
 8018236:	481e      	ldr	r0, [pc, #120]	; (80182b0 <__pow5mult+0xb0>)
 8018238:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801823c:	f7fe ff6e 	bl	801711c <__assert_func>
 8018240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018244:	6004      	str	r4, [r0, #0]
 8018246:	60c4      	str	r4, [r0, #12]
 8018248:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801824c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018250:	b94c      	cbnz	r4, 8018266 <__pow5mult+0x66>
 8018252:	f240 2171 	movw	r1, #625	; 0x271
 8018256:	4630      	mov	r0, r6
 8018258:	f7ff ff12 	bl	8018080 <__i2b>
 801825c:	2300      	movs	r3, #0
 801825e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018262:	4604      	mov	r4, r0
 8018264:	6003      	str	r3, [r0, #0]
 8018266:	f04f 0900 	mov.w	r9, #0
 801826a:	07eb      	lsls	r3, r5, #31
 801826c:	d50a      	bpl.n	8018284 <__pow5mult+0x84>
 801826e:	4639      	mov	r1, r7
 8018270:	4622      	mov	r2, r4
 8018272:	4630      	mov	r0, r6
 8018274:	f7ff ff1a 	bl	80180ac <__multiply>
 8018278:	4639      	mov	r1, r7
 801827a:	4680      	mov	r8, r0
 801827c:	4630      	mov	r0, r6
 801827e:	f7ff fe47 	bl	8017f10 <_Bfree>
 8018282:	4647      	mov	r7, r8
 8018284:	106d      	asrs	r5, r5, #1
 8018286:	d00b      	beq.n	80182a0 <__pow5mult+0xa0>
 8018288:	6820      	ldr	r0, [r4, #0]
 801828a:	b938      	cbnz	r0, 801829c <__pow5mult+0x9c>
 801828c:	4622      	mov	r2, r4
 801828e:	4621      	mov	r1, r4
 8018290:	4630      	mov	r0, r6
 8018292:	f7ff ff0b 	bl	80180ac <__multiply>
 8018296:	6020      	str	r0, [r4, #0]
 8018298:	f8c0 9000 	str.w	r9, [r0]
 801829c:	4604      	mov	r4, r0
 801829e:	e7e4      	b.n	801826a <__pow5mult+0x6a>
 80182a0:	4638      	mov	r0, r7
 80182a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182a6:	bf00      	nop
 80182a8:	0801a2c0 	.word	0x0801a2c0
 80182ac:	08019f44 	.word	0x08019f44
 80182b0:	0801a16e 	.word	0x0801a16e

080182b4 <__lshift>:
 80182b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182b8:	460c      	mov	r4, r1
 80182ba:	6849      	ldr	r1, [r1, #4]
 80182bc:	6923      	ldr	r3, [r4, #16]
 80182be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80182c2:	68a3      	ldr	r3, [r4, #8]
 80182c4:	4607      	mov	r7, r0
 80182c6:	4691      	mov	r9, r2
 80182c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80182cc:	f108 0601 	add.w	r6, r8, #1
 80182d0:	42b3      	cmp	r3, r6
 80182d2:	db0b      	blt.n	80182ec <__lshift+0x38>
 80182d4:	4638      	mov	r0, r7
 80182d6:	f7ff fddb 	bl	8017e90 <_Balloc>
 80182da:	4605      	mov	r5, r0
 80182dc:	b948      	cbnz	r0, 80182f2 <__lshift+0x3e>
 80182de:	4602      	mov	r2, r0
 80182e0:	4b2a      	ldr	r3, [pc, #168]	; (801838c <__lshift+0xd8>)
 80182e2:	482b      	ldr	r0, [pc, #172]	; (8018390 <__lshift+0xdc>)
 80182e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80182e8:	f7fe ff18 	bl	801711c <__assert_func>
 80182ec:	3101      	adds	r1, #1
 80182ee:	005b      	lsls	r3, r3, #1
 80182f0:	e7ee      	b.n	80182d0 <__lshift+0x1c>
 80182f2:	2300      	movs	r3, #0
 80182f4:	f100 0114 	add.w	r1, r0, #20
 80182f8:	f100 0210 	add.w	r2, r0, #16
 80182fc:	4618      	mov	r0, r3
 80182fe:	4553      	cmp	r3, sl
 8018300:	db37      	blt.n	8018372 <__lshift+0xbe>
 8018302:	6920      	ldr	r0, [r4, #16]
 8018304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018308:	f104 0314 	add.w	r3, r4, #20
 801830c:	f019 091f 	ands.w	r9, r9, #31
 8018310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018314:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018318:	d02f      	beq.n	801837a <__lshift+0xc6>
 801831a:	f1c9 0e20 	rsb	lr, r9, #32
 801831e:	468a      	mov	sl, r1
 8018320:	f04f 0c00 	mov.w	ip, #0
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	fa02 f209 	lsl.w	r2, r2, r9
 801832a:	ea42 020c 	orr.w	r2, r2, ip
 801832e:	f84a 2b04 	str.w	r2, [sl], #4
 8018332:	f853 2b04 	ldr.w	r2, [r3], #4
 8018336:	4298      	cmp	r0, r3
 8018338:	fa22 fc0e 	lsr.w	ip, r2, lr
 801833c:	d8f2      	bhi.n	8018324 <__lshift+0x70>
 801833e:	1b03      	subs	r3, r0, r4
 8018340:	3b15      	subs	r3, #21
 8018342:	f023 0303 	bic.w	r3, r3, #3
 8018346:	3304      	adds	r3, #4
 8018348:	f104 0215 	add.w	r2, r4, #21
 801834c:	4290      	cmp	r0, r2
 801834e:	bf38      	it	cc
 8018350:	2304      	movcc	r3, #4
 8018352:	f841 c003 	str.w	ip, [r1, r3]
 8018356:	f1bc 0f00 	cmp.w	ip, #0
 801835a:	d001      	beq.n	8018360 <__lshift+0xac>
 801835c:	f108 0602 	add.w	r6, r8, #2
 8018360:	3e01      	subs	r6, #1
 8018362:	4638      	mov	r0, r7
 8018364:	612e      	str	r6, [r5, #16]
 8018366:	4621      	mov	r1, r4
 8018368:	f7ff fdd2 	bl	8017f10 <_Bfree>
 801836c:	4628      	mov	r0, r5
 801836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018372:	f842 0f04 	str.w	r0, [r2, #4]!
 8018376:	3301      	adds	r3, #1
 8018378:	e7c1      	b.n	80182fe <__lshift+0x4a>
 801837a:	3904      	subs	r1, #4
 801837c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018380:	f841 2f04 	str.w	r2, [r1, #4]!
 8018384:	4298      	cmp	r0, r3
 8018386:	d8f9      	bhi.n	801837c <__lshift+0xc8>
 8018388:	e7ea      	b.n	8018360 <__lshift+0xac>
 801838a:	bf00      	nop
 801838c:	0801a15d 	.word	0x0801a15d
 8018390:	0801a16e 	.word	0x0801a16e

08018394 <__mcmp>:
 8018394:	b530      	push	{r4, r5, lr}
 8018396:	6902      	ldr	r2, [r0, #16]
 8018398:	690c      	ldr	r4, [r1, #16]
 801839a:	1b12      	subs	r2, r2, r4
 801839c:	d10e      	bne.n	80183bc <__mcmp+0x28>
 801839e:	f100 0314 	add.w	r3, r0, #20
 80183a2:	3114      	adds	r1, #20
 80183a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80183a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80183ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80183b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80183b4:	42a5      	cmp	r5, r4
 80183b6:	d003      	beq.n	80183c0 <__mcmp+0x2c>
 80183b8:	d305      	bcc.n	80183c6 <__mcmp+0x32>
 80183ba:	2201      	movs	r2, #1
 80183bc:	4610      	mov	r0, r2
 80183be:	bd30      	pop	{r4, r5, pc}
 80183c0:	4283      	cmp	r3, r0
 80183c2:	d3f3      	bcc.n	80183ac <__mcmp+0x18>
 80183c4:	e7fa      	b.n	80183bc <__mcmp+0x28>
 80183c6:	f04f 32ff 	mov.w	r2, #4294967295
 80183ca:	e7f7      	b.n	80183bc <__mcmp+0x28>

080183cc <__mdiff>:
 80183cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d0:	460c      	mov	r4, r1
 80183d2:	4606      	mov	r6, r0
 80183d4:	4611      	mov	r1, r2
 80183d6:	4620      	mov	r0, r4
 80183d8:	4690      	mov	r8, r2
 80183da:	f7ff ffdb 	bl	8018394 <__mcmp>
 80183de:	1e05      	subs	r5, r0, #0
 80183e0:	d110      	bne.n	8018404 <__mdiff+0x38>
 80183e2:	4629      	mov	r1, r5
 80183e4:	4630      	mov	r0, r6
 80183e6:	f7ff fd53 	bl	8017e90 <_Balloc>
 80183ea:	b930      	cbnz	r0, 80183fa <__mdiff+0x2e>
 80183ec:	4b3a      	ldr	r3, [pc, #232]	; (80184d8 <__mdiff+0x10c>)
 80183ee:	4602      	mov	r2, r0
 80183f0:	f240 2132 	movw	r1, #562	; 0x232
 80183f4:	4839      	ldr	r0, [pc, #228]	; (80184dc <__mdiff+0x110>)
 80183f6:	f7fe fe91 	bl	801711c <__assert_func>
 80183fa:	2301      	movs	r3, #1
 80183fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018404:	bfa4      	itt	ge
 8018406:	4643      	movge	r3, r8
 8018408:	46a0      	movge	r8, r4
 801840a:	4630      	mov	r0, r6
 801840c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018410:	bfa6      	itte	ge
 8018412:	461c      	movge	r4, r3
 8018414:	2500      	movge	r5, #0
 8018416:	2501      	movlt	r5, #1
 8018418:	f7ff fd3a 	bl	8017e90 <_Balloc>
 801841c:	b920      	cbnz	r0, 8018428 <__mdiff+0x5c>
 801841e:	4b2e      	ldr	r3, [pc, #184]	; (80184d8 <__mdiff+0x10c>)
 8018420:	4602      	mov	r2, r0
 8018422:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018426:	e7e5      	b.n	80183f4 <__mdiff+0x28>
 8018428:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801842c:	6926      	ldr	r6, [r4, #16]
 801842e:	60c5      	str	r5, [r0, #12]
 8018430:	f104 0914 	add.w	r9, r4, #20
 8018434:	f108 0514 	add.w	r5, r8, #20
 8018438:	f100 0e14 	add.w	lr, r0, #20
 801843c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018440:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018444:	f108 0210 	add.w	r2, r8, #16
 8018448:	46f2      	mov	sl, lr
 801844a:	2100      	movs	r1, #0
 801844c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018450:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018454:	fa1f f883 	uxth.w	r8, r3
 8018458:	fa11 f18b 	uxtah	r1, r1, fp
 801845c:	0c1b      	lsrs	r3, r3, #16
 801845e:	eba1 0808 	sub.w	r8, r1, r8
 8018462:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018466:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801846a:	fa1f f888 	uxth.w	r8, r8
 801846e:	1419      	asrs	r1, r3, #16
 8018470:	454e      	cmp	r6, r9
 8018472:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018476:	f84a 3b04 	str.w	r3, [sl], #4
 801847a:	d8e7      	bhi.n	801844c <__mdiff+0x80>
 801847c:	1b33      	subs	r3, r6, r4
 801847e:	3b15      	subs	r3, #21
 8018480:	f023 0303 	bic.w	r3, r3, #3
 8018484:	3304      	adds	r3, #4
 8018486:	3415      	adds	r4, #21
 8018488:	42a6      	cmp	r6, r4
 801848a:	bf38      	it	cc
 801848c:	2304      	movcc	r3, #4
 801848e:	441d      	add	r5, r3
 8018490:	4473      	add	r3, lr
 8018492:	469e      	mov	lr, r3
 8018494:	462e      	mov	r6, r5
 8018496:	4566      	cmp	r6, ip
 8018498:	d30e      	bcc.n	80184b8 <__mdiff+0xec>
 801849a:	f10c 0203 	add.w	r2, ip, #3
 801849e:	1b52      	subs	r2, r2, r5
 80184a0:	f022 0203 	bic.w	r2, r2, #3
 80184a4:	3d03      	subs	r5, #3
 80184a6:	45ac      	cmp	ip, r5
 80184a8:	bf38      	it	cc
 80184aa:	2200      	movcc	r2, #0
 80184ac:	441a      	add	r2, r3
 80184ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80184b2:	b17b      	cbz	r3, 80184d4 <__mdiff+0x108>
 80184b4:	6107      	str	r7, [r0, #16]
 80184b6:	e7a3      	b.n	8018400 <__mdiff+0x34>
 80184b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80184bc:	fa11 f288 	uxtah	r2, r1, r8
 80184c0:	1414      	asrs	r4, r2, #16
 80184c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80184c6:	b292      	uxth	r2, r2
 80184c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80184cc:	f84e 2b04 	str.w	r2, [lr], #4
 80184d0:	1421      	asrs	r1, r4, #16
 80184d2:	e7e0      	b.n	8018496 <__mdiff+0xca>
 80184d4:	3f01      	subs	r7, #1
 80184d6:	e7ea      	b.n	80184ae <__mdiff+0xe2>
 80184d8:	0801a15d 	.word	0x0801a15d
 80184dc:	0801a16e 	.word	0x0801a16e

080184e0 <__d2b>:
 80184e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80184e4:	4689      	mov	r9, r1
 80184e6:	2101      	movs	r1, #1
 80184e8:	ec57 6b10 	vmov	r6, r7, d0
 80184ec:	4690      	mov	r8, r2
 80184ee:	f7ff fccf 	bl	8017e90 <_Balloc>
 80184f2:	4604      	mov	r4, r0
 80184f4:	b930      	cbnz	r0, 8018504 <__d2b+0x24>
 80184f6:	4602      	mov	r2, r0
 80184f8:	4b25      	ldr	r3, [pc, #148]	; (8018590 <__d2b+0xb0>)
 80184fa:	4826      	ldr	r0, [pc, #152]	; (8018594 <__d2b+0xb4>)
 80184fc:	f240 310a 	movw	r1, #778	; 0x30a
 8018500:	f7fe fe0c 	bl	801711c <__assert_func>
 8018504:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801850c:	bb35      	cbnz	r5, 801855c <__d2b+0x7c>
 801850e:	2e00      	cmp	r6, #0
 8018510:	9301      	str	r3, [sp, #4]
 8018512:	d028      	beq.n	8018566 <__d2b+0x86>
 8018514:	4668      	mov	r0, sp
 8018516:	9600      	str	r6, [sp, #0]
 8018518:	f7ff fd82 	bl	8018020 <__lo0bits>
 801851c:	9900      	ldr	r1, [sp, #0]
 801851e:	b300      	cbz	r0, 8018562 <__d2b+0x82>
 8018520:	9a01      	ldr	r2, [sp, #4]
 8018522:	f1c0 0320 	rsb	r3, r0, #32
 8018526:	fa02 f303 	lsl.w	r3, r2, r3
 801852a:	430b      	orrs	r3, r1
 801852c:	40c2      	lsrs	r2, r0
 801852e:	6163      	str	r3, [r4, #20]
 8018530:	9201      	str	r2, [sp, #4]
 8018532:	9b01      	ldr	r3, [sp, #4]
 8018534:	61a3      	str	r3, [r4, #24]
 8018536:	2b00      	cmp	r3, #0
 8018538:	bf14      	ite	ne
 801853a:	2202      	movne	r2, #2
 801853c:	2201      	moveq	r2, #1
 801853e:	6122      	str	r2, [r4, #16]
 8018540:	b1d5      	cbz	r5, 8018578 <__d2b+0x98>
 8018542:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018546:	4405      	add	r5, r0
 8018548:	f8c9 5000 	str.w	r5, [r9]
 801854c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018550:	f8c8 0000 	str.w	r0, [r8]
 8018554:	4620      	mov	r0, r4
 8018556:	b003      	add	sp, #12
 8018558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801855c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018560:	e7d5      	b.n	801850e <__d2b+0x2e>
 8018562:	6161      	str	r1, [r4, #20]
 8018564:	e7e5      	b.n	8018532 <__d2b+0x52>
 8018566:	a801      	add	r0, sp, #4
 8018568:	f7ff fd5a 	bl	8018020 <__lo0bits>
 801856c:	9b01      	ldr	r3, [sp, #4]
 801856e:	6163      	str	r3, [r4, #20]
 8018570:	2201      	movs	r2, #1
 8018572:	6122      	str	r2, [r4, #16]
 8018574:	3020      	adds	r0, #32
 8018576:	e7e3      	b.n	8018540 <__d2b+0x60>
 8018578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801857c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018580:	f8c9 0000 	str.w	r0, [r9]
 8018584:	6918      	ldr	r0, [r3, #16]
 8018586:	f7ff fd2b 	bl	8017fe0 <__hi0bits>
 801858a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801858e:	e7df      	b.n	8018550 <__d2b+0x70>
 8018590:	0801a15d 	.word	0x0801a15d
 8018594:	0801a16e 	.word	0x0801a16e

08018598 <_calloc_r>:
 8018598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801859a:	fba1 2402 	umull	r2, r4, r1, r2
 801859e:	b94c      	cbnz	r4, 80185b4 <_calloc_r+0x1c>
 80185a0:	4611      	mov	r1, r2
 80185a2:	9201      	str	r2, [sp, #4]
 80185a4:	f7fd ffc4 	bl	8016530 <_malloc_r>
 80185a8:	9a01      	ldr	r2, [sp, #4]
 80185aa:	4605      	mov	r5, r0
 80185ac:	b930      	cbnz	r0, 80185bc <_calloc_r+0x24>
 80185ae:	4628      	mov	r0, r5
 80185b0:	b003      	add	sp, #12
 80185b2:	bd30      	pop	{r4, r5, pc}
 80185b4:	220c      	movs	r2, #12
 80185b6:	6002      	str	r2, [r0, #0]
 80185b8:	2500      	movs	r5, #0
 80185ba:	e7f8      	b.n	80185ae <_calloc_r+0x16>
 80185bc:	4621      	mov	r1, r4
 80185be:	f7fd ff43 	bl	8016448 <memset>
 80185c2:	e7f4      	b.n	80185ae <_calloc_r+0x16>

080185c4 <__ssputs_r>:
 80185c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185c8:	688e      	ldr	r6, [r1, #8]
 80185ca:	429e      	cmp	r6, r3
 80185cc:	4682      	mov	sl, r0
 80185ce:	460c      	mov	r4, r1
 80185d0:	4690      	mov	r8, r2
 80185d2:	461f      	mov	r7, r3
 80185d4:	d838      	bhi.n	8018648 <__ssputs_r+0x84>
 80185d6:	898a      	ldrh	r2, [r1, #12]
 80185d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80185dc:	d032      	beq.n	8018644 <__ssputs_r+0x80>
 80185de:	6825      	ldr	r5, [r4, #0]
 80185e0:	6909      	ldr	r1, [r1, #16]
 80185e2:	eba5 0901 	sub.w	r9, r5, r1
 80185e6:	6965      	ldr	r5, [r4, #20]
 80185e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80185f0:	3301      	adds	r3, #1
 80185f2:	444b      	add	r3, r9
 80185f4:	106d      	asrs	r5, r5, #1
 80185f6:	429d      	cmp	r5, r3
 80185f8:	bf38      	it	cc
 80185fa:	461d      	movcc	r5, r3
 80185fc:	0553      	lsls	r3, r2, #21
 80185fe:	d531      	bpl.n	8018664 <__ssputs_r+0xa0>
 8018600:	4629      	mov	r1, r5
 8018602:	f7fd ff95 	bl	8016530 <_malloc_r>
 8018606:	4606      	mov	r6, r0
 8018608:	b950      	cbnz	r0, 8018620 <__ssputs_r+0x5c>
 801860a:	230c      	movs	r3, #12
 801860c:	f8ca 3000 	str.w	r3, [sl]
 8018610:	89a3      	ldrh	r3, [r4, #12]
 8018612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018616:	81a3      	strh	r3, [r4, #12]
 8018618:	f04f 30ff 	mov.w	r0, #4294967295
 801861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018620:	6921      	ldr	r1, [r4, #16]
 8018622:	464a      	mov	r2, r9
 8018624:	f7fd ff02 	bl	801642c <memcpy>
 8018628:	89a3      	ldrh	r3, [r4, #12]
 801862a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801862e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018632:	81a3      	strh	r3, [r4, #12]
 8018634:	6126      	str	r6, [r4, #16]
 8018636:	6165      	str	r5, [r4, #20]
 8018638:	444e      	add	r6, r9
 801863a:	eba5 0509 	sub.w	r5, r5, r9
 801863e:	6026      	str	r6, [r4, #0]
 8018640:	60a5      	str	r5, [r4, #8]
 8018642:	463e      	mov	r6, r7
 8018644:	42be      	cmp	r6, r7
 8018646:	d900      	bls.n	801864a <__ssputs_r+0x86>
 8018648:	463e      	mov	r6, r7
 801864a:	6820      	ldr	r0, [r4, #0]
 801864c:	4632      	mov	r2, r6
 801864e:	4641      	mov	r1, r8
 8018650:	f000 fd68 	bl	8019124 <memmove>
 8018654:	68a3      	ldr	r3, [r4, #8]
 8018656:	1b9b      	subs	r3, r3, r6
 8018658:	60a3      	str	r3, [r4, #8]
 801865a:	6823      	ldr	r3, [r4, #0]
 801865c:	4433      	add	r3, r6
 801865e:	6023      	str	r3, [r4, #0]
 8018660:	2000      	movs	r0, #0
 8018662:	e7db      	b.n	801861c <__ssputs_r+0x58>
 8018664:	462a      	mov	r2, r5
 8018666:	f000 fd77 	bl	8019158 <_realloc_r>
 801866a:	4606      	mov	r6, r0
 801866c:	2800      	cmp	r0, #0
 801866e:	d1e1      	bne.n	8018634 <__ssputs_r+0x70>
 8018670:	6921      	ldr	r1, [r4, #16]
 8018672:	4650      	mov	r0, sl
 8018674:	f7fd fef0 	bl	8016458 <_free_r>
 8018678:	e7c7      	b.n	801860a <__ssputs_r+0x46>
	...

0801867c <_svfiprintf_r>:
 801867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018680:	4698      	mov	r8, r3
 8018682:	898b      	ldrh	r3, [r1, #12]
 8018684:	061b      	lsls	r3, r3, #24
 8018686:	b09d      	sub	sp, #116	; 0x74
 8018688:	4607      	mov	r7, r0
 801868a:	460d      	mov	r5, r1
 801868c:	4614      	mov	r4, r2
 801868e:	d50e      	bpl.n	80186ae <_svfiprintf_r+0x32>
 8018690:	690b      	ldr	r3, [r1, #16]
 8018692:	b963      	cbnz	r3, 80186ae <_svfiprintf_r+0x32>
 8018694:	2140      	movs	r1, #64	; 0x40
 8018696:	f7fd ff4b 	bl	8016530 <_malloc_r>
 801869a:	6028      	str	r0, [r5, #0]
 801869c:	6128      	str	r0, [r5, #16]
 801869e:	b920      	cbnz	r0, 80186aa <_svfiprintf_r+0x2e>
 80186a0:	230c      	movs	r3, #12
 80186a2:	603b      	str	r3, [r7, #0]
 80186a4:	f04f 30ff 	mov.w	r0, #4294967295
 80186a8:	e0d1      	b.n	801884e <_svfiprintf_r+0x1d2>
 80186aa:	2340      	movs	r3, #64	; 0x40
 80186ac:	616b      	str	r3, [r5, #20]
 80186ae:	2300      	movs	r3, #0
 80186b0:	9309      	str	r3, [sp, #36]	; 0x24
 80186b2:	2320      	movs	r3, #32
 80186b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80186bc:	2330      	movs	r3, #48	; 0x30
 80186be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018868 <_svfiprintf_r+0x1ec>
 80186c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186c6:	f04f 0901 	mov.w	r9, #1
 80186ca:	4623      	mov	r3, r4
 80186cc:	469a      	mov	sl, r3
 80186ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186d2:	b10a      	cbz	r2, 80186d8 <_svfiprintf_r+0x5c>
 80186d4:	2a25      	cmp	r2, #37	; 0x25
 80186d6:	d1f9      	bne.n	80186cc <_svfiprintf_r+0x50>
 80186d8:	ebba 0b04 	subs.w	fp, sl, r4
 80186dc:	d00b      	beq.n	80186f6 <_svfiprintf_r+0x7a>
 80186de:	465b      	mov	r3, fp
 80186e0:	4622      	mov	r2, r4
 80186e2:	4629      	mov	r1, r5
 80186e4:	4638      	mov	r0, r7
 80186e6:	f7ff ff6d 	bl	80185c4 <__ssputs_r>
 80186ea:	3001      	adds	r0, #1
 80186ec:	f000 80aa 	beq.w	8018844 <_svfiprintf_r+0x1c8>
 80186f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186f2:	445a      	add	r2, fp
 80186f4:	9209      	str	r2, [sp, #36]	; 0x24
 80186f6:	f89a 3000 	ldrb.w	r3, [sl]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	f000 80a2 	beq.w	8018844 <_svfiprintf_r+0x1c8>
 8018700:	2300      	movs	r3, #0
 8018702:	f04f 32ff 	mov.w	r2, #4294967295
 8018706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801870a:	f10a 0a01 	add.w	sl, sl, #1
 801870e:	9304      	str	r3, [sp, #16]
 8018710:	9307      	str	r3, [sp, #28]
 8018712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018716:	931a      	str	r3, [sp, #104]	; 0x68
 8018718:	4654      	mov	r4, sl
 801871a:	2205      	movs	r2, #5
 801871c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018720:	4851      	ldr	r0, [pc, #324]	; (8018868 <_svfiprintf_r+0x1ec>)
 8018722:	f7e7 fd7d 	bl	8000220 <memchr>
 8018726:	9a04      	ldr	r2, [sp, #16]
 8018728:	b9d8      	cbnz	r0, 8018762 <_svfiprintf_r+0xe6>
 801872a:	06d0      	lsls	r0, r2, #27
 801872c:	bf44      	itt	mi
 801872e:	2320      	movmi	r3, #32
 8018730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018734:	0711      	lsls	r1, r2, #28
 8018736:	bf44      	itt	mi
 8018738:	232b      	movmi	r3, #43	; 0x2b
 801873a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801873e:	f89a 3000 	ldrb.w	r3, [sl]
 8018742:	2b2a      	cmp	r3, #42	; 0x2a
 8018744:	d015      	beq.n	8018772 <_svfiprintf_r+0xf6>
 8018746:	9a07      	ldr	r2, [sp, #28]
 8018748:	4654      	mov	r4, sl
 801874a:	2000      	movs	r0, #0
 801874c:	f04f 0c0a 	mov.w	ip, #10
 8018750:	4621      	mov	r1, r4
 8018752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018756:	3b30      	subs	r3, #48	; 0x30
 8018758:	2b09      	cmp	r3, #9
 801875a:	d94e      	bls.n	80187fa <_svfiprintf_r+0x17e>
 801875c:	b1b0      	cbz	r0, 801878c <_svfiprintf_r+0x110>
 801875e:	9207      	str	r2, [sp, #28]
 8018760:	e014      	b.n	801878c <_svfiprintf_r+0x110>
 8018762:	eba0 0308 	sub.w	r3, r0, r8
 8018766:	fa09 f303 	lsl.w	r3, r9, r3
 801876a:	4313      	orrs	r3, r2
 801876c:	9304      	str	r3, [sp, #16]
 801876e:	46a2      	mov	sl, r4
 8018770:	e7d2      	b.n	8018718 <_svfiprintf_r+0x9c>
 8018772:	9b03      	ldr	r3, [sp, #12]
 8018774:	1d19      	adds	r1, r3, #4
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	9103      	str	r1, [sp, #12]
 801877a:	2b00      	cmp	r3, #0
 801877c:	bfbb      	ittet	lt
 801877e:	425b      	neglt	r3, r3
 8018780:	f042 0202 	orrlt.w	r2, r2, #2
 8018784:	9307      	strge	r3, [sp, #28]
 8018786:	9307      	strlt	r3, [sp, #28]
 8018788:	bfb8      	it	lt
 801878a:	9204      	strlt	r2, [sp, #16]
 801878c:	7823      	ldrb	r3, [r4, #0]
 801878e:	2b2e      	cmp	r3, #46	; 0x2e
 8018790:	d10c      	bne.n	80187ac <_svfiprintf_r+0x130>
 8018792:	7863      	ldrb	r3, [r4, #1]
 8018794:	2b2a      	cmp	r3, #42	; 0x2a
 8018796:	d135      	bne.n	8018804 <_svfiprintf_r+0x188>
 8018798:	9b03      	ldr	r3, [sp, #12]
 801879a:	1d1a      	adds	r2, r3, #4
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	9203      	str	r2, [sp, #12]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	bfb8      	it	lt
 80187a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80187a8:	3402      	adds	r4, #2
 80187aa:	9305      	str	r3, [sp, #20]
 80187ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018878 <_svfiprintf_r+0x1fc>
 80187b0:	7821      	ldrb	r1, [r4, #0]
 80187b2:	2203      	movs	r2, #3
 80187b4:	4650      	mov	r0, sl
 80187b6:	f7e7 fd33 	bl	8000220 <memchr>
 80187ba:	b140      	cbz	r0, 80187ce <_svfiprintf_r+0x152>
 80187bc:	2340      	movs	r3, #64	; 0x40
 80187be:	eba0 000a 	sub.w	r0, r0, sl
 80187c2:	fa03 f000 	lsl.w	r0, r3, r0
 80187c6:	9b04      	ldr	r3, [sp, #16]
 80187c8:	4303      	orrs	r3, r0
 80187ca:	3401      	adds	r4, #1
 80187cc:	9304      	str	r3, [sp, #16]
 80187ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187d2:	4826      	ldr	r0, [pc, #152]	; (801886c <_svfiprintf_r+0x1f0>)
 80187d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187d8:	2206      	movs	r2, #6
 80187da:	f7e7 fd21 	bl	8000220 <memchr>
 80187de:	2800      	cmp	r0, #0
 80187e0:	d038      	beq.n	8018854 <_svfiprintf_r+0x1d8>
 80187e2:	4b23      	ldr	r3, [pc, #140]	; (8018870 <_svfiprintf_r+0x1f4>)
 80187e4:	bb1b      	cbnz	r3, 801882e <_svfiprintf_r+0x1b2>
 80187e6:	9b03      	ldr	r3, [sp, #12]
 80187e8:	3307      	adds	r3, #7
 80187ea:	f023 0307 	bic.w	r3, r3, #7
 80187ee:	3308      	adds	r3, #8
 80187f0:	9303      	str	r3, [sp, #12]
 80187f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187f4:	4433      	add	r3, r6
 80187f6:	9309      	str	r3, [sp, #36]	; 0x24
 80187f8:	e767      	b.n	80186ca <_svfiprintf_r+0x4e>
 80187fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80187fe:	460c      	mov	r4, r1
 8018800:	2001      	movs	r0, #1
 8018802:	e7a5      	b.n	8018750 <_svfiprintf_r+0xd4>
 8018804:	2300      	movs	r3, #0
 8018806:	3401      	adds	r4, #1
 8018808:	9305      	str	r3, [sp, #20]
 801880a:	4619      	mov	r1, r3
 801880c:	f04f 0c0a 	mov.w	ip, #10
 8018810:	4620      	mov	r0, r4
 8018812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018816:	3a30      	subs	r2, #48	; 0x30
 8018818:	2a09      	cmp	r2, #9
 801881a:	d903      	bls.n	8018824 <_svfiprintf_r+0x1a8>
 801881c:	2b00      	cmp	r3, #0
 801881e:	d0c5      	beq.n	80187ac <_svfiprintf_r+0x130>
 8018820:	9105      	str	r1, [sp, #20]
 8018822:	e7c3      	b.n	80187ac <_svfiprintf_r+0x130>
 8018824:	fb0c 2101 	mla	r1, ip, r1, r2
 8018828:	4604      	mov	r4, r0
 801882a:	2301      	movs	r3, #1
 801882c:	e7f0      	b.n	8018810 <_svfiprintf_r+0x194>
 801882e:	ab03      	add	r3, sp, #12
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	462a      	mov	r2, r5
 8018834:	4b0f      	ldr	r3, [pc, #60]	; (8018874 <_svfiprintf_r+0x1f8>)
 8018836:	a904      	add	r1, sp, #16
 8018838:	4638      	mov	r0, r7
 801883a:	f7fd ff8d 	bl	8016758 <_printf_float>
 801883e:	1c42      	adds	r2, r0, #1
 8018840:	4606      	mov	r6, r0
 8018842:	d1d6      	bne.n	80187f2 <_svfiprintf_r+0x176>
 8018844:	89ab      	ldrh	r3, [r5, #12]
 8018846:	065b      	lsls	r3, r3, #25
 8018848:	f53f af2c 	bmi.w	80186a4 <_svfiprintf_r+0x28>
 801884c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801884e:	b01d      	add	sp, #116	; 0x74
 8018850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018854:	ab03      	add	r3, sp, #12
 8018856:	9300      	str	r3, [sp, #0]
 8018858:	462a      	mov	r2, r5
 801885a:	4b06      	ldr	r3, [pc, #24]	; (8018874 <_svfiprintf_r+0x1f8>)
 801885c:	a904      	add	r1, sp, #16
 801885e:	4638      	mov	r0, r7
 8018860:	f7fe fa1e 	bl	8016ca0 <_printf_i>
 8018864:	e7eb      	b.n	801883e <_svfiprintf_r+0x1c2>
 8018866:	bf00      	nop
 8018868:	0801a2cc 	.word	0x0801a2cc
 801886c:	0801a2d6 	.word	0x0801a2d6
 8018870:	08016759 	.word	0x08016759
 8018874:	080185c5 	.word	0x080185c5
 8018878:	0801a2d2 	.word	0x0801a2d2

0801887c <__sfputc_r>:
 801887c:	6893      	ldr	r3, [r2, #8]
 801887e:	3b01      	subs	r3, #1
 8018880:	2b00      	cmp	r3, #0
 8018882:	b410      	push	{r4}
 8018884:	6093      	str	r3, [r2, #8]
 8018886:	da08      	bge.n	801889a <__sfputc_r+0x1e>
 8018888:	6994      	ldr	r4, [r2, #24]
 801888a:	42a3      	cmp	r3, r4
 801888c:	db01      	blt.n	8018892 <__sfputc_r+0x16>
 801888e:	290a      	cmp	r1, #10
 8018890:	d103      	bne.n	801889a <__sfputc_r+0x1e>
 8018892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018896:	f000 b94b 	b.w	8018b30 <__swbuf_r>
 801889a:	6813      	ldr	r3, [r2, #0]
 801889c:	1c58      	adds	r0, r3, #1
 801889e:	6010      	str	r0, [r2, #0]
 80188a0:	7019      	strb	r1, [r3, #0]
 80188a2:	4608      	mov	r0, r1
 80188a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188a8:	4770      	bx	lr

080188aa <__sfputs_r>:
 80188aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ac:	4606      	mov	r6, r0
 80188ae:	460f      	mov	r7, r1
 80188b0:	4614      	mov	r4, r2
 80188b2:	18d5      	adds	r5, r2, r3
 80188b4:	42ac      	cmp	r4, r5
 80188b6:	d101      	bne.n	80188bc <__sfputs_r+0x12>
 80188b8:	2000      	movs	r0, #0
 80188ba:	e007      	b.n	80188cc <__sfputs_r+0x22>
 80188bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188c0:	463a      	mov	r2, r7
 80188c2:	4630      	mov	r0, r6
 80188c4:	f7ff ffda 	bl	801887c <__sfputc_r>
 80188c8:	1c43      	adds	r3, r0, #1
 80188ca:	d1f3      	bne.n	80188b4 <__sfputs_r+0xa>
 80188cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080188d0 <_vfiprintf_r>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	460d      	mov	r5, r1
 80188d6:	b09d      	sub	sp, #116	; 0x74
 80188d8:	4614      	mov	r4, r2
 80188da:	4698      	mov	r8, r3
 80188dc:	4606      	mov	r6, r0
 80188de:	b118      	cbz	r0, 80188e8 <_vfiprintf_r+0x18>
 80188e0:	6983      	ldr	r3, [r0, #24]
 80188e2:	b90b      	cbnz	r3, 80188e8 <_vfiprintf_r+0x18>
 80188e4:	f000 fb06 	bl	8018ef4 <__sinit>
 80188e8:	4b89      	ldr	r3, [pc, #548]	; (8018b10 <_vfiprintf_r+0x240>)
 80188ea:	429d      	cmp	r5, r3
 80188ec:	d11b      	bne.n	8018926 <_vfiprintf_r+0x56>
 80188ee:	6875      	ldr	r5, [r6, #4]
 80188f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80188f2:	07d9      	lsls	r1, r3, #31
 80188f4:	d405      	bmi.n	8018902 <_vfiprintf_r+0x32>
 80188f6:	89ab      	ldrh	r3, [r5, #12]
 80188f8:	059a      	lsls	r2, r3, #22
 80188fa:	d402      	bmi.n	8018902 <_vfiprintf_r+0x32>
 80188fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80188fe:	f000 fb97 	bl	8019030 <__retarget_lock_acquire_recursive>
 8018902:	89ab      	ldrh	r3, [r5, #12]
 8018904:	071b      	lsls	r3, r3, #28
 8018906:	d501      	bpl.n	801890c <_vfiprintf_r+0x3c>
 8018908:	692b      	ldr	r3, [r5, #16]
 801890a:	b9eb      	cbnz	r3, 8018948 <_vfiprintf_r+0x78>
 801890c:	4629      	mov	r1, r5
 801890e:	4630      	mov	r0, r6
 8018910:	f000 f960 	bl	8018bd4 <__swsetup_r>
 8018914:	b1c0      	cbz	r0, 8018948 <_vfiprintf_r+0x78>
 8018916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018918:	07dc      	lsls	r4, r3, #31
 801891a:	d50e      	bpl.n	801893a <_vfiprintf_r+0x6a>
 801891c:	f04f 30ff 	mov.w	r0, #4294967295
 8018920:	b01d      	add	sp, #116	; 0x74
 8018922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018926:	4b7b      	ldr	r3, [pc, #492]	; (8018b14 <_vfiprintf_r+0x244>)
 8018928:	429d      	cmp	r5, r3
 801892a:	d101      	bne.n	8018930 <_vfiprintf_r+0x60>
 801892c:	68b5      	ldr	r5, [r6, #8]
 801892e:	e7df      	b.n	80188f0 <_vfiprintf_r+0x20>
 8018930:	4b79      	ldr	r3, [pc, #484]	; (8018b18 <_vfiprintf_r+0x248>)
 8018932:	429d      	cmp	r5, r3
 8018934:	bf08      	it	eq
 8018936:	68f5      	ldreq	r5, [r6, #12]
 8018938:	e7da      	b.n	80188f0 <_vfiprintf_r+0x20>
 801893a:	89ab      	ldrh	r3, [r5, #12]
 801893c:	0598      	lsls	r0, r3, #22
 801893e:	d4ed      	bmi.n	801891c <_vfiprintf_r+0x4c>
 8018940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018942:	f000 fb76 	bl	8019032 <__retarget_lock_release_recursive>
 8018946:	e7e9      	b.n	801891c <_vfiprintf_r+0x4c>
 8018948:	2300      	movs	r3, #0
 801894a:	9309      	str	r3, [sp, #36]	; 0x24
 801894c:	2320      	movs	r3, #32
 801894e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018952:	f8cd 800c 	str.w	r8, [sp, #12]
 8018956:	2330      	movs	r3, #48	; 0x30
 8018958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018b1c <_vfiprintf_r+0x24c>
 801895c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018960:	f04f 0901 	mov.w	r9, #1
 8018964:	4623      	mov	r3, r4
 8018966:	469a      	mov	sl, r3
 8018968:	f813 2b01 	ldrb.w	r2, [r3], #1
 801896c:	b10a      	cbz	r2, 8018972 <_vfiprintf_r+0xa2>
 801896e:	2a25      	cmp	r2, #37	; 0x25
 8018970:	d1f9      	bne.n	8018966 <_vfiprintf_r+0x96>
 8018972:	ebba 0b04 	subs.w	fp, sl, r4
 8018976:	d00b      	beq.n	8018990 <_vfiprintf_r+0xc0>
 8018978:	465b      	mov	r3, fp
 801897a:	4622      	mov	r2, r4
 801897c:	4629      	mov	r1, r5
 801897e:	4630      	mov	r0, r6
 8018980:	f7ff ff93 	bl	80188aa <__sfputs_r>
 8018984:	3001      	adds	r0, #1
 8018986:	f000 80aa 	beq.w	8018ade <_vfiprintf_r+0x20e>
 801898a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801898c:	445a      	add	r2, fp
 801898e:	9209      	str	r2, [sp, #36]	; 0x24
 8018990:	f89a 3000 	ldrb.w	r3, [sl]
 8018994:	2b00      	cmp	r3, #0
 8018996:	f000 80a2 	beq.w	8018ade <_vfiprintf_r+0x20e>
 801899a:	2300      	movs	r3, #0
 801899c:	f04f 32ff 	mov.w	r2, #4294967295
 80189a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189a4:	f10a 0a01 	add.w	sl, sl, #1
 80189a8:	9304      	str	r3, [sp, #16]
 80189aa:	9307      	str	r3, [sp, #28]
 80189ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189b0:	931a      	str	r3, [sp, #104]	; 0x68
 80189b2:	4654      	mov	r4, sl
 80189b4:	2205      	movs	r2, #5
 80189b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189ba:	4858      	ldr	r0, [pc, #352]	; (8018b1c <_vfiprintf_r+0x24c>)
 80189bc:	f7e7 fc30 	bl	8000220 <memchr>
 80189c0:	9a04      	ldr	r2, [sp, #16]
 80189c2:	b9d8      	cbnz	r0, 80189fc <_vfiprintf_r+0x12c>
 80189c4:	06d1      	lsls	r1, r2, #27
 80189c6:	bf44      	itt	mi
 80189c8:	2320      	movmi	r3, #32
 80189ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189ce:	0713      	lsls	r3, r2, #28
 80189d0:	bf44      	itt	mi
 80189d2:	232b      	movmi	r3, #43	; 0x2b
 80189d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189d8:	f89a 3000 	ldrb.w	r3, [sl]
 80189dc:	2b2a      	cmp	r3, #42	; 0x2a
 80189de:	d015      	beq.n	8018a0c <_vfiprintf_r+0x13c>
 80189e0:	9a07      	ldr	r2, [sp, #28]
 80189e2:	4654      	mov	r4, sl
 80189e4:	2000      	movs	r0, #0
 80189e6:	f04f 0c0a 	mov.w	ip, #10
 80189ea:	4621      	mov	r1, r4
 80189ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189f0:	3b30      	subs	r3, #48	; 0x30
 80189f2:	2b09      	cmp	r3, #9
 80189f4:	d94e      	bls.n	8018a94 <_vfiprintf_r+0x1c4>
 80189f6:	b1b0      	cbz	r0, 8018a26 <_vfiprintf_r+0x156>
 80189f8:	9207      	str	r2, [sp, #28]
 80189fa:	e014      	b.n	8018a26 <_vfiprintf_r+0x156>
 80189fc:	eba0 0308 	sub.w	r3, r0, r8
 8018a00:	fa09 f303 	lsl.w	r3, r9, r3
 8018a04:	4313      	orrs	r3, r2
 8018a06:	9304      	str	r3, [sp, #16]
 8018a08:	46a2      	mov	sl, r4
 8018a0a:	e7d2      	b.n	80189b2 <_vfiprintf_r+0xe2>
 8018a0c:	9b03      	ldr	r3, [sp, #12]
 8018a0e:	1d19      	adds	r1, r3, #4
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	9103      	str	r1, [sp, #12]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	bfbb      	ittet	lt
 8018a18:	425b      	neglt	r3, r3
 8018a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8018a1e:	9307      	strge	r3, [sp, #28]
 8018a20:	9307      	strlt	r3, [sp, #28]
 8018a22:	bfb8      	it	lt
 8018a24:	9204      	strlt	r2, [sp, #16]
 8018a26:	7823      	ldrb	r3, [r4, #0]
 8018a28:	2b2e      	cmp	r3, #46	; 0x2e
 8018a2a:	d10c      	bne.n	8018a46 <_vfiprintf_r+0x176>
 8018a2c:	7863      	ldrb	r3, [r4, #1]
 8018a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8018a30:	d135      	bne.n	8018a9e <_vfiprintf_r+0x1ce>
 8018a32:	9b03      	ldr	r3, [sp, #12]
 8018a34:	1d1a      	adds	r2, r3, #4
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	9203      	str	r2, [sp, #12]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	bfb8      	it	lt
 8018a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a42:	3402      	adds	r4, #2
 8018a44:	9305      	str	r3, [sp, #20]
 8018a46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018b2c <_vfiprintf_r+0x25c>
 8018a4a:	7821      	ldrb	r1, [r4, #0]
 8018a4c:	2203      	movs	r2, #3
 8018a4e:	4650      	mov	r0, sl
 8018a50:	f7e7 fbe6 	bl	8000220 <memchr>
 8018a54:	b140      	cbz	r0, 8018a68 <_vfiprintf_r+0x198>
 8018a56:	2340      	movs	r3, #64	; 0x40
 8018a58:	eba0 000a 	sub.w	r0, r0, sl
 8018a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8018a60:	9b04      	ldr	r3, [sp, #16]
 8018a62:	4303      	orrs	r3, r0
 8018a64:	3401      	adds	r4, #1
 8018a66:	9304      	str	r3, [sp, #16]
 8018a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a6c:	482c      	ldr	r0, [pc, #176]	; (8018b20 <_vfiprintf_r+0x250>)
 8018a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a72:	2206      	movs	r2, #6
 8018a74:	f7e7 fbd4 	bl	8000220 <memchr>
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d03f      	beq.n	8018afc <_vfiprintf_r+0x22c>
 8018a7c:	4b29      	ldr	r3, [pc, #164]	; (8018b24 <_vfiprintf_r+0x254>)
 8018a7e:	bb1b      	cbnz	r3, 8018ac8 <_vfiprintf_r+0x1f8>
 8018a80:	9b03      	ldr	r3, [sp, #12]
 8018a82:	3307      	adds	r3, #7
 8018a84:	f023 0307 	bic.w	r3, r3, #7
 8018a88:	3308      	adds	r3, #8
 8018a8a:	9303      	str	r3, [sp, #12]
 8018a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a8e:	443b      	add	r3, r7
 8018a90:	9309      	str	r3, [sp, #36]	; 0x24
 8018a92:	e767      	b.n	8018964 <_vfiprintf_r+0x94>
 8018a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8018a98:	460c      	mov	r4, r1
 8018a9a:	2001      	movs	r0, #1
 8018a9c:	e7a5      	b.n	80189ea <_vfiprintf_r+0x11a>
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	3401      	adds	r4, #1
 8018aa2:	9305      	str	r3, [sp, #20]
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	f04f 0c0a 	mov.w	ip, #10
 8018aaa:	4620      	mov	r0, r4
 8018aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ab0:	3a30      	subs	r2, #48	; 0x30
 8018ab2:	2a09      	cmp	r2, #9
 8018ab4:	d903      	bls.n	8018abe <_vfiprintf_r+0x1ee>
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d0c5      	beq.n	8018a46 <_vfiprintf_r+0x176>
 8018aba:	9105      	str	r1, [sp, #20]
 8018abc:	e7c3      	b.n	8018a46 <_vfiprintf_r+0x176>
 8018abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ac2:	4604      	mov	r4, r0
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	e7f0      	b.n	8018aaa <_vfiprintf_r+0x1da>
 8018ac8:	ab03      	add	r3, sp, #12
 8018aca:	9300      	str	r3, [sp, #0]
 8018acc:	462a      	mov	r2, r5
 8018ace:	4b16      	ldr	r3, [pc, #88]	; (8018b28 <_vfiprintf_r+0x258>)
 8018ad0:	a904      	add	r1, sp, #16
 8018ad2:	4630      	mov	r0, r6
 8018ad4:	f7fd fe40 	bl	8016758 <_printf_float>
 8018ad8:	4607      	mov	r7, r0
 8018ada:	1c78      	adds	r0, r7, #1
 8018adc:	d1d6      	bne.n	8018a8c <_vfiprintf_r+0x1bc>
 8018ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ae0:	07d9      	lsls	r1, r3, #31
 8018ae2:	d405      	bmi.n	8018af0 <_vfiprintf_r+0x220>
 8018ae4:	89ab      	ldrh	r3, [r5, #12]
 8018ae6:	059a      	lsls	r2, r3, #22
 8018ae8:	d402      	bmi.n	8018af0 <_vfiprintf_r+0x220>
 8018aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018aec:	f000 faa1 	bl	8019032 <__retarget_lock_release_recursive>
 8018af0:	89ab      	ldrh	r3, [r5, #12]
 8018af2:	065b      	lsls	r3, r3, #25
 8018af4:	f53f af12 	bmi.w	801891c <_vfiprintf_r+0x4c>
 8018af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018afa:	e711      	b.n	8018920 <_vfiprintf_r+0x50>
 8018afc:	ab03      	add	r3, sp, #12
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	462a      	mov	r2, r5
 8018b02:	4b09      	ldr	r3, [pc, #36]	; (8018b28 <_vfiprintf_r+0x258>)
 8018b04:	a904      	add	r1, sp, #16
 8018b06:	4630      	mov	r0, r6
 8018b08:	f7fe f8ca 	bl	8016ca0 <_printf_i>
 8018b0c:	e7e4      	b.n	8018ad8 <_vfiprintf_r+0x208>
 8018b0e:	bf00      	nop
 8018b10:	0801a300 	.word	0x0801a300
 8018b14:	0801a320 	.word	0x0801a320
 8018b18:	0801a2e0 	.word	0x0801a2e0
 8018b1c:	0801a2cc 	.word	0x0801a2cc
 8018b20:	0801a2d6 	.word	0x0801a2d6
 8018b24:	08016759 	.word	0x08016759
 8018b28:	080188ab 	.word	0x080188ab
 8018b2c:	0801a2d2 	.word	0x0801a2d2

08018b30 <__swbuf_r>:
 8018b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b32:	460e      	mov	r6, r1
 8018b34:	4614      	mov	r4, r2
 8018b36:	4605      	mov	r5, r0
 8018b38:	b118      	cbz	r0, 8018b42 <__swbuf_r+0x12>
 8018b3a:	6983      	ldr	r3, [r0, #24]
 8018b3c:	b90b      	cbnz	r3, 8018b42 <__swbuf_r+0x12>
 8018b3e:	f000 f9d9 	bl	8018ef4 <__sinit>
 8018b42:	4b21      	ldr	r3, [pc, #132]	; (8018bc8 <__swbuf_r+0x98>)
 8018b44:	429c      	cmp	r4, r3
 8018b46:	d12b      	bne.n	8018ba0 <__swbuf_r+0x70>
 8018b48:	686c      	ldr	r4, [r5, #4]
 8018b4a:	69a3      	ldr	r3, [r4, #24]
 8018b4c:	60a3      	str	r3, [r4, #8]
 8018b4e:	89a3      	ldrh	r3, [r4, #12]
 8018b50:	071a      	lsls	r2, r3, #28
 8018b52:	d52f      	bpl.n	8018bb4 <__swbuf_r+0x84>
 8018b54:	6923      	ldr	r3, [r4, #16]
 8018b56:	b36b      	cbz	r3, 8018bb4 <__swbuf_r+0x84>
 8018b58:	6923      	ldr	r3, [r4, #16]
 8018b5a:	6820      	ldr	r0, [r4, #0]
 8018b5c:	1ac0      	subs	r0, r0, r3
 8018b5e:	6963      	ldr	r3, [r4, #20]
 8018b60:	b2f6      	uxtb	r6, r6
 8018b62:	4283      	cmp	r3, r0
 8018b64:	4637      	mov	r7, r6
 8018b66:	dc04      	bgt.n	8018b72 <__swbuf_r+0x42>
 8018b68:	4621      	mov	r1, r4
 8018b6a:	4628      	mov	r0, r5
 8018b6c:	f000 f92e 	bl	8018dcc <_fflush_r>
 8018b70:	bb30      	cbnz	r0, 8018bc0 <__swbuf_r+0x90>
 8018b72:	68a3      	ldr	r3, [r4, #8]
 8018b74:	3b01      	subs	r3, #1
 8018b76:	60a3      	str	r3, [r4, #8]
 8018b78:	6823      	ldr	r3, [r4, #0]
 8018b7a:	1c5a      	adds	r2, r3, #1
 8018b7c:	6022      	str	r2, [r4, #0]
 8018b7e:	701e      	strb	r6, [r3, #0]
 8018b80:	6963      	ldr	r3, [r4, #20]
 8018b82:	3001      	adds	r0, #1
 8018b84:	4283      	cmp	r3, r0
 8018b86:	d004      	beq.n	8018b92 <__swbuf_r+0x62>
 8018b88:	89a3      	ldrh	r3, [r4, #12]
 8018b8a:	07db      	lsls	r3, r3, #31
 8018b8c:	d506      	bpl.n	8018b9c <__swbuf_r+0x6c>
 8018b8e:	2e0a      	cmp	r6, #10
 8018b90:	d104      	bne.n	8018b9c <__swbuf_r+0x6c>
 8018b92:	4621      	mov	r1, r4
 8018b94:	4628      	mov	r0, r5
 8018b96:	f000 f919 	bl	8018dcc <_fflush_r>
 8018b9a:	b988      	cbnz	r0, 8018bc0 <__swbuf_r+0x90>
 8018b9c:	4638      	mov	r0, r7
 8018b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ba0:	4b0a      	ldr	r3, [pc, #40]	; (8018bcc <__swbuf_r+0x9c>)
 8018ba2:	429c      	cmp	r4, r3
 8018ba4:	d101      	bne.n	8018baa <__swbuf_r+0x7a>
 8018ba6:	68ac      	ldr	r4, [r5, #8]
 8018ba8:	e7cf      	b.n	8018b4a <__swbuf_r+0x1a>
 8018baa:	4b09      	ldr	r3, [pc, #36]	; (8018bd0 <__swbuf_r+0xa0>)
 8018bac:	429c      	cmp	r4, r3
 8018bae:	bf08      	it	eq
 8018bb0:	68ec      	ldreq	r4, [r5, #12]
 8018bb2:	e7ca      	b.n	8018b4a <__swbuf_r+0x1a>
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	f000 f80c 	bl	8018bd4 <__swsetup_r>
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	d0cb      	beq.n	8018b58 <__swbuf_r+0x28>
 8018bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8018bc4:	e7ea      	b.n	8018b9c <__swbuf_r+0x6c>
 8018bc6:	bf00      	nop
 8018bc8:	0801a300 	.word	0x0801a300
 8018bcc:	0801a320 	.word	0x0801a320
 8018bd0:	0801a2e0 	.word	0x0801a2e0

08018bd4 <__swsetup_r>:
 8018bd4:	4b32      	ldr	r3, [pc, #200]	; (8018ca0 <__swsetup_r+0xcc>)
 8018bd6:	b570      	push	{r4, r5, r6, lr}
 8018bd8:	681d      	ldr	r5, [r3, #0]
 8018bda:	4606      	mov	r6, r0
 8018bdc:	460c      	mov	r4, r1
 8018bde:	b125      	cbz	r5, 8018bea <__swsetup_r+0x16>
 8018be0:	69ab      	ldr	r3, [r5, #24]
 8018be2:	b913      	cbnz	r3, 8018bea <__swsetup_r+0x16>
 8018be4:	4628      	mov	r0, r5
 8018be6:	f000 f985 	bl	8018ef4 <__sinit>
 8018bea:	4b2e      	ldr	r3, [pc, #184]	; (8018ca4 <__swsetup_r+0xd0>)
 8018bec:	429c      	cmp	r4, r3
 8018bee:	d10f      	bne.n	8018c10 <__swsetup_r+0x3c>
 8018bf0:	686c      	ldr	r4, [r5, #4]
 8018bf2:	89a3      	ldrh	r3, [r4, #12]
 8018bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018bf8:	0719      	lsls	r1, r3, #28
 8018bfa:	d42c      	bmi.n	8018c56 <__swsetup_r+0x82>
 8018bfc:	06dd      	lsls	r5, r3, #27
 8018bfe:	d411      	bmi.n	8018c24 <__swsetup_r+0x50>
 8018c00:	2309      	movs	r3, #9
 8018c02:	6033      	str	r3, [r6, #0]
 8018c04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018c08:	81a3      	strh	r3, [r4, #12]
 8018c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c0e:	e03e      	b.n	8018c8e <__swsetup_r+0xba>
 8018c10:	4b25      	ldr	r3, [pc, #148]	; (8018ca8 <__swsetup_r+0xd4>)
 8018c12:	429c      	cmp	r4, r3
 8018c14:	d101      	bne.n	8018c1a <__swsetup_r+0x46>
 8018c16:	68ac      	ldr	r4, [r5, #8]
 8018c18:	e7eb      	b.n	8018bf2 <__swsetup_r+0x1e>
 8018c1a:	4b24      	ldr	r3, [pc, #144]	; (8018cac <__swsetup_r+0xd8>)
 8018c1c:	429c      	cmp	r4, r3
 8018c1e:	bf08      	it	eq
 8018c20:	68ec      	ldreq	r4, [r5, #12]
 8018c22:	e7e6      	b.n	8018bf2 <__swsetup_r+0x1e>
 8018c24:	0758      	lsls	r0, r3, #29
 8018c26:	d512      	bpl.n	8018c4e <__swsetup_r+0x7a>
 8018c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c2a:	b141      	cbz	r1, 8018c3e <__swsetup_r+0x6a>
 8018c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c30:	4299      	cmp	r1, r3
 8018c32:	d002      	beq.n	8018c3a <__swsetup_r+0x66>
 8018c34:	4630      	mov	r0, r6
 8018c36:	f7fd fc0f 	bl	8016458 <_free_r>
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8018c3e:	89a3      	ldrh	r3, [r4, #12]
 8018c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018c44:	81a3      	strh	r3, [r4, #12]
 8018c46:	2300      	movs	r3, #0
 8018c48:	6063      	str	r3, [r4, #4]
 8018c4a:	6923      	ldr	r3, [r4, #16]
 8018c4c:	6023      	str	r3, [r4, #0]
 8018c4e:	89a3      	ldrh	r3, [r4, #12]
 8018c50:	f043 0308 	orr.w	r3, r3, #8
 8018c54:	81a3      	strh	r3, [r4, #12]
 8018c56:	6923      	ldr	r3, [r4, #16]
 8018c58:	b94b      	cbnz	r3, 8018c6e <__swsetup_r+0x9a>
 8018c5a:	89a3      	ldrh	r3, [r4, #12]
 8018c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c64:	d003      	beq.n	8018c6e <__swsetup_r+0x9a>
 8018c66:	4621      	mov	r1, r4
 8018c68:	4630      	mov	r0, r6
 8018c6a:	f000 fa09 	bl	8019080 <__smakebuf_r>
 8018c6e:	89a0      	ldrh	r0, [r4, #12]
 8018c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c74:	f010 0301 	ands.w	r3, r0, #1
 8018c78:	d00a      	beq.n	8018c90 <__swsetup_r+0xbc>
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	60a3      	str	r3, [r4, #8]
 8018c7e:	6963      	ldr	r3, [r4, #20]
 8018c80:	425b      	negs	r3, r3
 8018c82:	61a3      	str	r3, [r4, #24]
 8018c84:	6923      	ldr	r3, [r4, #16]
 8018c86:	b943      	cbnz	r3, 8018c9a <__swsetup_r+0xc6>
 8018c88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018c8c:	d1ba      	bne.n	8018c04 <__swsetup_r+0x30>
 8018c8e:	bd70      	pop	{r4, r5, r6, pc}
 8018c90:	0781      	lsls	r1, r0, #30
 8018c92:	bf58      	it	pl
 8018c94:	6963      	ldrpl	r3, [r4, #20]
 8018c96:	60a3      	str	r3, [r4, #8]
 8018c98:	e7f4      	b.n	8018c84 <__swsetup_r+0xb0>
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	e7f7      	b.n	8018c8e <__swsetup_r+0xba>
 8018c9e:	bf00      	nop
 8018ca0:	2000012c 	.word	0x2000012c
 8018ca4:	0801a300 	.word	0x0801a300
 8018ca8:	0801a320 	.word	0x0801a320
 8018cac:	0801a2e0 	.word	0x0801a2e0

08018cb0 <abort>:
 8018cb0:	b508      	push	{r3, lr}
 8018cb2:	2006      	movs	r0, #6
 8018cb4:	f000 faa8 	bl	8019208 <raise>
 8018cb8:	2001      	movs	r0, #1
 8018cba:	f7ea fa75 	bl	80031a8 <_exit>
	...

08018cc0 <__sflush_r>:
 8018cc0:	898a      	ldrh	r2, [r1, #12]
 8018cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc6:	4605      	mov	r5, r0
 8018cc8:	0710      	lsls	r0, r2, #28
 8018cca:	460c      	mov	r4, r1
 8018ccc:	d458      	bmi.n	8018d80 <__sflush_r+0xc0>
 8018cce:	684b      	ldr	r3, [r1, #4]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	dc05      	bgt.n	8018ce0 <__sflush_r+0x20>
 8018cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	dc02      	bgt.n	8018ce0 <__sflush_r+0x20>
 8018cda:	2000      	movs	r0, #0
 8018cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ce2:	2e00      	cmp	r6, #0
 8018ce4:	d0f9      	beq.n	8018cda <__sflush_r+0x1a>
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018cec:	682f      	ldr	r7, [r5, #0]
 8018cee:	602b      	str	r3, [r5, #0]
 8018cf0:	d032      	beq.n	8018d58 <__sflush_r+0x98>
 8018cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018cf4:	89a3      	ldrh	r3, [r4, #12]
 8018cf6:	075a      	lsls	r2, r3, #29
 8018cf8:	d505      	bpl.n	8018d06 <__sflush_r+0x46>
 8018cfa:	6863      	ldr	r3, [r4, #4]
 8018cfc:	1ac0      	subs	r0, r0, r3
 8018cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d00:	b10b      	cbz	r3, 8018d06 <__sflush_r+0x46>
 8018d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d04:	1ac0      	subs	r0, r0, r3
 8018d06:	2300      	movs	r3, #0
 8018d08:	4602      	mov	r2, r0
 8018d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d0c:	6a21      	ldr	r1, [r4, #32]
 8018d0e:	4628      	mov	r0, r5
 8018d10:	47b0      	blx	r6
 8018d12:	1c43      	adds	r3, r0, #1
 8018d14:	89a3      	ldrh	r3, [r4, #12]
 8018d16:	d106      	bne.n	8018d26 <__sflush_r+0x66>
 8018d18:	6829      	ldr	r1, [r5, #0]
 8018d1a:	291d      	cmp	r1, #29
 8018d1c:	d82c      	bhi.n	8018d78 <__sflush_r+0xb8>
 8018d1e:	4a2a      	ldr	r2, [pc, #168]	; (8018dc8 <__sflush_r+0x108>)
 8018d20:	40ca      	lsrs	r2, r1
 8018d22:	07d6      	lsls	r6, r2, #31
 8018d24:	d528      	bpl.n	8018d78 <__sflush_r+0xb8>
 8018d26:	2200      	movs	r2, #0
 8018d28:	6062      	str	r2, [r4, #4]
 8018d2a:	04d9      	lsls	r1, r3, #19
 8018d2c:	6922      	ldr	r2, [r4, #16]
 8018d2e:	6022      	str	r2, [r4, #0]
 8018d30:	d504      	bpl.n	8018d3c <__sflush_r+0x7c>
 8018d32:	1c42      	adds	r2, r0, #1
 8018d34:	d101      	bne.n	8018d3a <__sflush_r+0x7a>
 8018d36:	682b      	ldr	r3, [r5, #0]
 8018d38:	b903      	cbnz	r3, 8018d3c <__sflush_r+0x7c>
 8018d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8018d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d3e:	602f      	str	r7, [r5, #0]
 8018d40:	2900      	cmp	r1, #0
 8018d42:	d0ca      	beq.n	8018cda <__sflush_r+0x1a>
 8018d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d48:	4299      	cmp	r1, r3
 8018d4a:	d002      	beq.n	8018d52 <__sflush_r+0x92>
 8018d4c:	4628      	mov	r0, r5
 8018d4e:	f7fd fb83 	bl	8016458 <_free_r>
 8018d52:	2000      	movs	r0, #0
 8018d54:	6360      	str	r0, [r4, #52]	; 0x34
 8018d56:	e7c1      	b.n	8018cdc <__sflush_r+0x1c>
 8018d58:	6a21      	ldr	r1, [r4, #32]
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	47b0      	blx	r6
 8018d60:	1c41      	adds	r1, r0, #1
 8018d62:	d1c7      	bne.n	8018cf4 <__sflush_r+0x34>
 8018d64:	682b      	ldr	r3, [r5, #0]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d0c4      	beq.n	8018cf4 <__sflush_r+0x34>
 8018d6a:	2b1d      	cmp	r3, #29
 8018d6c:	d001      	beq.n	8018d72 <__sflush_r+0xb2>
 8018d6e:	2b16      	cmp	r3, #22
 8018d70:	d101      	bne.n	8018d76 <__sflush_r+0xb6>
 8018d72:	602f      	str	r7, [r5, #0]
 8018d74:	e7b1      	b.n	8018cda <__sflush_r+0x1a>
 8018d76:	89a3      	ldrh	r3, [r4, #12]
 8018d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d7c:	81a3      	strh	r3, [r4, #12]
 8018d7e:	e7ad      	b.n	8018cdc <__sflush_r+0x1c>
 8018d80:	690f      	ldr	r7, [r1, #16]
 8018d82:	2f00      	cmp	r7, #0
 8018d84:	d0a9      	beq.n	8018cda <__sflush_r+0x1a>
 8018d86:	0793      	lsls	r3, r2, #30
 8018d88:	680e      	ldr	r6, [r1, #0]
 8018d8a:	bf08      	it	eq
 8018d8c:	694b      	ldreq	r3, [r1, #20]
 8018d8e:	600f      	str	r7, [r1, #0]
 8018d90:	bf18      	it	ne
 8018d92:	2300      	movne	r3, #0
 8018d94:	eba6 0807 	sub.w	r8, r6, r7
 8018d98:	608b      	str	r3, [r1, #8]
 8018d9a:	f1b8 0f00 	cmp.w	r8, #0
 8018d9e:	dd9c      	ble.n	8018cda <__sflush_r+0x1a>
 8018da0:	6a21      	ldr	r1, [r4, #32]
 8018da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018da4:	4643      	mov	r3, r8
 8018da6:	463a      	mov	r2, r7
 8018da8:	4628      	mov	r0, r5
 8018daa:	47b0      	blx	r6
 8018dac:	2800      	cmp	r0, #0
 8018dae:	dc06      	bgt.n	8018dbe <__sflush_r+0xfe>
 8018db0:	89a3      	ldrh	r3, [r4, #12]
 8018db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018db6:	81a3      	strh	r3, [r4, #12]
 8018db8:	f04f 30ff 	mov.w	r0, #4294967295
 8018dbc:	e78e      	b.n	8018cdc <__sflush_r+0x1c>
 8018dbe:	4407      	add	r7, r0
 8018dc0:	eba8 0800 	sub.w	r8, r8, r0
 8018dc4:	e7e9      	b.n	8018d9a <__sflush_r+0xda>
 8018dc6:	bf00      	nop
 8018dc8:	20400001 	.word	0x20400001

08018dcc <_fflush_r>:
 8018dcc:	b538      	push	{r3, r4, r5, lr}
 8018dce:	690b      	ldr	r3, [r1, #16]
 8018dd0:	4605      	mov	r5, r0
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	b913      	cbnz	r3, 8018ddc <_fflush_r+0x10>
 8018dd6:	2500      	movs	r5, #0
 8018dd8:	4628      	mov	r0, r5
 8018dda:	bd38      	pop	{r3, r4, r5, pc}
 8018ddc:	b118      	cbz	r0, 8018de6 <_fflush_r+0x1a>
 8018dde:	6983      	ldr	r3, [r0, #24]
 8018de0:	b90b      	cbnz	r3, 8018de6 <_fflush_r+0x1a>
 8018de2:	f000 f887 	bl	8018ef4 <__sinit>
 8018de6:	4b14      	ldr	r3, [pc, #80]	; (8018e38 <_fflush_r+0x6c>)
 8018de8:	429c      	cmp	r4, r3
 8018dea:	d11b      	bne.n	8018e24 <_fflush_r+0x58>
 8018dec:	686c      	ldr	r4, [r5, #4]
 8018dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d0ef      	beq.n	8018dd6 <_fflush_r+0xa>
 8018df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018df8:	07d0      	lsls	r0, r2, #31
 8018dfa:	d404      	bmi.n	8018e06 <_fflush_r+0x3a>
 8018dfc:	0599      	lsls	r1, r3, #22
 8018dfe:	d402      	bmi.n	8018e06 <_fflush_r+0x3a>
 8018e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e02:	f000 f915 	bl	8019030 <__retarget_lock_acquire_recursive>
 8018e06:	4628      	mov	r0, r5
 8018e08:	4621      	mov	r1, r4
 8018e0a:	f7ff ff59 	bl	8018cc0 <__sflush_r>
 8018e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e10:	07da      	lsls	r2, r3, #31
 8018e12:	4605      	mov	r5, r0
 8018e14:	d4e0      	bmi.n	8018dd8 <_fflush_r+0xc>
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	059b      	lsls	r3, r3, #22
 8018e1a:	d4dd      	bmi.n	8018dd8 <_fflush_r+0xc>
 8018e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e1e:	f000 f908 	bl	8019032 <__retarget_lock_release_recursive>
 8018e22:	e7d9      	b.n	8018dd8 <_fflush_r+0xc>
 8018e24:	4b05      	ldr	r3, [pc, #20]	; (8018e3c <_fflush_r+0x70>)
 8018e26:	429c      	cmp	r4, r3
 8018e28:	d101      	bne.n	8018e2e <_fflush_r+0x62>
 8018e2a:	68ac      	ldr	r4, [r5, #8]
 8018e2c:	e7df      	b.n	8018dee <_fflush_r+0x22>
 8018e2e:	4b04      	ldr	r3, [pc, #16]	; (8018e40 <_fflush_r+0x74>)
 8018e30:	429c      	cmp	r4, r3
 8018e32:	bf08      	it	eq
 8018e34:	68ec      	ldreq	r4, [r5, #12]
 8018e36:	e7da      	b.n	8018dee <_fflush_r+0x22>
 8018e38:	0801a300 	.word	0x0801a300
 8018e3c:	0801a320 	.word	0x0801a320
 8018e40:	0801a2e0 	.word	0x0801a2e0

08018e44 <std>:
 8018e44:	2300      	movs	r3, #0
 8018e46:	b510      	push	{r4, lr}
 8018e48:	4604      	mov	r4, r0
 8018e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8018e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e52:	6083      	str	r3, [r0, #8]
 8018e54:	8181      	strh	r1, [r0, #12]
 8018e56:	6643      	str	r3, [r0, #100]	; 0x64
 8018e58:	81c2      	strh	r2, [r0, #14]
 8018e5a:	6183      	str	r3, [r0, #24]
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	2208      	movs	r2, #8
 8018e60:	305c      	adds	r0, #92	; 0x5c
 8018e62:	f7fd faf1 	bl	8016448 <memset>
 8018e66:	4b05      	ldr	r3, [pc, #20]	; (8018e7c <std+0x38>)
 8018e68:	6263      	str	r3, [r4, #36]	; 0x24
 8018e6a:	4b05      	ldr	r3, [pc, #20]	; (8018e80 <std+0x3c>)
 8018e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e6e:	4b05      	ldr	r3, [pc, #20]	; (8018e84 <std+0x40>)
 8018e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e72:	4b05      	ldr	r3, [pc, #20]	; (8018e88 <std+0x44>)
 8018e74:	6224      	str	r4, [r4, #32]
 8018e76:	6323      	str	r3, [r4, #48]	; 0x30
 8018e78:	bd10      	pop	{r4, pc}
 8018e7a:	bf00      	nop
 8018e7c:	08019241 	.word	0x08019241
 8018e80:	08019263 	.word	0x08019263
 8018e84:	0801929b 	.word	0x0801929b
 8018e88:	080192bf 	.word	0x080192bf

08018e8c <_cleanup_r>:
 8018e8c:	4901      	ldr	r1, [pc, #4]	; (8018e94 <_cleanup_r+0x8>)
 8018e8e:	f000 b8af 	b.w	8018ff0 <_fwalk_reent>
 8018e92:	bf00      	nop
 8018e94:	08018dcd 	.word	0x08018dcd

08018e98 <__sfmoreglue>:
 8018e98:	b570      	push	{r4, r5, r6, lr}
 8018e9a:	2268      	movs	r2, #104	; 0x68
 8018e9c:	1e4d      	subs	r5, r1, #1
 8018e9e:	4355      	muls	r5, r2
 8018ea0:	460e      	mov	r6, r1
 8018ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ea6:	f7fd fb43 	bl	8016530 <_malloc_r>
 8018eaa:	4604      	mov	r4, r0
 8018eac:	b140      	cbz	r0, 8018ec0 <__sfmoreglue+0x28>
 8018eae:	2100      	movs	r1, #0
 8018eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8018eb4:	300c      	adds	r0, #12
 8018eb6:	60a0      	str	r0, [r4, #8]
 8018eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ebc:	f7fd fac4 	bl	8016448 <memset>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}

08018ec4 <__sfp_lock_acquire>:
 8018ec4:	4801      	ldr	r0, [pc, #4]	; (8018ecc <__sfp_lock_acquire+0x8>)
 8018ec6:	f000 b8b3 	b.w	8019030 <__retarget_lock_acquire_recursive>
 8018eca:	bf00      	nop
 8018ecc:	2000306d 	.word	0x2000306d

08018ed0 <__sfp_lock_release>:
 8018ed0:	4801      	ldr	r0, [pc, #4]	; (8018ed8 <__sfp_lock_release+0x8>)
 8018ed2:	f000 b8ae 	b.w	8019032 <__retarget_lock_release_recursive>
 8018ed6:	bf00      	nop
 8018ed8:	2000306d 	.word	0x2000306d

08018edc <__sinit_lock_acquire>:
 8018edc:	4801      	ldr	r0, [pc, #4]	; (8018ee4 <__sinit_lock_acquire+0x8>)
 8018ede:	f000 b8a7 	b.w	8019030 <__retarget_lock_acquire_recursive>
 8018ee2:	bf00      	nop
 8018ee4:	2000306e 	.word	0x2000306e

08018ee8 <__sinit_lock_release>:
 8018ee8:	4801      	ldr	r0, [pc, #4]	; (8018ef0 <__sinit_lock_release+0x8>)
 8018eea:	f000 b8a2 	b.w	8019032 <__retarget_lock_release_recursive>
 8018eee:	bf00      	nop
 8018ef0:	2000306e 	.word	0x2000306e

08018ef4 <__sinit>:
 8018ef4:	b510      	push	{r4, lr}
 8018ef6:	4604      	mov	r4, r0
 8018ef8:	f7ff fff0 	bl	8018edc <__sinit_lock_acquire>
 8018efc:	69a3      	ldr	r3, [r4, #24]
 8018efe:	b11b      	cbz	r3, 8018f08 <__sinit+0x14>
 8018f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f04:	f7ff bff0 	b.w	8018ee8 <__sinit_lock_release>
 8018f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8018f0e:	4b13      	ldr	r3, [pc, #76]	; (8018f5c <__sinit+0x68>)
 8018f10:	4a13      	ldr	r2, [pc, #76]	; (8018f60 <__sinit+0x6c>)
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8018f16:	42a3      	cmp	r3, r4
 8018f18:	bf04      	itt	eq
 8018f1a:	2301      	moveq	r3, #1
 8018f1c:	61a3      	streq	r3, [r4, #24]
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f000 f820 	bl	8018f64 <__sfp>
 8018f24:	6060      	str	r0, [r4, #4]
 8018f26:	4620      	mov	r0, r4
 8018f28:	f000 f81c 	bl	8018f64 <__sfp>
 8018f2c:	60a0      	str	r0, [r4, #8]
 8018f2e:	4620      	mov	r0, r4
 8018f30:	f000 f818 	bl	8018f64 <__sfp>
 8018f34:	2200      	movs	r2, #0
 8018f36:	60e0      	str	r0, [r4, #12]
 8018f38:	2104      	movs	r1, #4
 8018f3a:	6860      	ldr	r0, [r4, #4]
 8018f3c:	f7ff ff82 	bl	8018e44 <std>
 8018f40:	68a0      	ldr	r0, [r4, #8]
 8018f42:	2201      	movs	r2, #1
 8018f44:	2109      	movs	r1, #9
 8018f46:	f7ff ff7d 	bl	8018e44 <std>
 8018f4a:	68e0      	ldr	r0, [r4, #12]
 8018f4c:	2202      	movs	r2, #2
 8018f4e:	2112      	movs	r1, #18
 8018f50:	f7ff ff78 	bl	8018e44 <std>
 8018f54:	2301      	movs	r3, #1
 8018f56:	61a3      	str	r3, [r4, #24]
 8018f58:	e7d2      	b.n	8018f00 <__sinit+0xc>
 8018f5a:	bf00      	nop
 8018f5c:	08019f0c 	.word	0x08019f0c
 8018f60:	08018e8d 	.word	0x08018e8d

08018f64 <__sfp>:
 8018f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f66:	4607      	mov	r7, r0
 8018f68:	f7ff ffac 	bl	8018ec4 <__sfp_lock_acquire>
 8018f6c:	4b1e      	ldr	r3, [pc, #120]	; (8018fe8 <__sfp+0x84>)
 8018f6e:	681e      	ldr	r6, [r3, #0]
 8018f70:	69b3      	ldr	r3, [r6, #24]
 8018f72:	b913      	cbnz	r3, 8018f7a <__sfp+0x16>
 8018f74:	4630      	mov	r0, r6
 8018f76:	f7ff ffbd 	bl	8018ef4 <__sinit>
 8018f7a:	3648      	adds	r6, #72	; 0x48
 8018f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018f80:	3b01      	subs	r3, #1
 8018f82:	d503      	bpl.n	8018f8c <__sfp+0x28>
 8018f84:	6833      	ldr	r3, [r6, #0]
 8018f86:	b30b      	cbz	r3, 8018fcc <__sfp+0x68>
 8018f88:	6836      	ldr	r6, [r6, #0]
 8018f8a:	e7f7      	b.n	8018f7c <__sfp+0x18>
 8018f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018f90:	b9d5      	cbnz	r5, 8018fc8 <__sfp+0x64>
 8018f92:	4b16      	ldr	r3, [pc, #88]	; (8018fec <__sfp+0x88>)
 8018f94:	60e3      	str	r3, [r4, #12]
 8018f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8018f9c:	f000 f847 	bl	801902e <__retarget_lock_init_recursive>
 8018fa0:	f7ff ff96 	bl	8018ed0 <__sfp_lock_release>
 8018fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018fac:	6025      	str	r5, [r4, #0]
 8018fae:	61a5      	str	r5, [r4, #24]
 8018fb0:	2208      	movs	r2, #8
 8018fb2:	4629      	mov	r1, r5
 8018fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018fb8:	f7fd fa46 	bl	8016448 <memset>
 8018fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fc8:	3468      	adds	r4, #104	; 0x68
 8018fca:	e7d9      	b.n	8018f80 <__sfp+0x1c>
 8018fcc:	2104      	movs	r1, #4
 8018fce:	4638      	mov	r0, r7
 8018fd0:	f7ff ff62 	bl	8018e98 <__sfmoreglue>
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	6030      	str	r0, [r6, #0]
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	d1d5      	bne.n	8018f88 <__sfp+0x24>
 8018fdc:	f7ff ff78 	bl	8018ed0 <__sfp_lock_release>
 8018fe0:	230c      	movs	r3, #12
 8018fe2:	603b      	str	r3, [r7, #0]
 8018fe4:	e7ee      	b.n	8018fc4 <__sfp+0x60>
 8018fe6:	bf00      	nop
 8018fe8:	08019f0c 	.word	0x08019f0c
 8018fec:	ffff0001 	.word	0xffff0001

08018ff0 <_fwalk_reent>:
 8018ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ff4:	4606      	mov	r6, r0
 8018ff6:	4688      	mov	r8, r1
 8018ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018ffc:	2700      	movs	r7, #0
 8018ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019002:	f1b9 0901 	subs.w	r9, r9, #1
 8019006:	d505      	bpl.n	8019014 <_fwalk_reent+0x24>
 8019008:	6824      	ldr	r4, [r4, #0]
 801900a:	2c00      	cmp	r4, #0
 801900c:	d1f7      	bne.n	8018ffe <_fwalk_reent+0xe>
 801900e:	4638      	mov	r0, r7
 8019010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019014:	89ab      	ldrh	r3, [r5, #12]
 8019016:	2b01      	cmp	r3, #1
 8019018:	d907      	bls.n	801902a <_fwalk_reent+0x3a>
 801901a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801901e:	3301      	adds	r3, #1
 8019020:	d003      	beq.n	801902a <_fwalk_reent+0x3a>
 8019022:	4629      	mov	r1, r5
 8019024:	4630      	mov	r0, r6
 8019026:	47c0      	blx	r8
 8019028:	4307      	orrs	r7, r0
 801902a:	3568      	adds	r5, #104	; 0x68
 801902c:	e7e9      	b.n	8019002 <_fwalk_reent+0x12>

0801902e <__retarget_lock_init_recursive>:
 801902e:	4770      	bx	lr

08019030 <__retarget_lock_acquire_recursive>:
 8019030:	4770      	bx	lr

08019032 <__retarget_lock_release_recursive>:
 8019032:	4770      	bx	lr

08019034 <__swhatbuf_r>:
 8019034:	b570      	push	{r4, r5, r6, lr}
 8019036:	460e      	mov	r6, r1
 8019038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801903c:	2900      	cmp	r1, #0
 801903e:	b096      	sub	sp, #88	; 0x58
 8019040:	4614      	mov	r4, r2
 8019042:	461d      	mov	r5, r3
 8019044:	da08      	bge.n	8019058 <__swhatbuf_r+0x24>
 8019046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801904a:	2200      	movs	r2, #0
 801904c:	602a      	str	r2, [r5, #0]
 801904e:	061a      	lsls	r2, r3, #24
 8019050:	d410      	bmi.n	8019074 <__swhatbuf_r+0x40>
 8019052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019056:	e00e      	b.n	8019076 <__swhatbuf_r+0x42>
 8019058:	466a      	mov	r2, sp
 801905a:	f000 f963 	bl	8019324 <_fstat_r>
 801905e:	2800      	cmp	r0, #0
 8019060:	dbf1      	blt.n	8019046 <__swhatbuf_r+0x12>
 8019062:	9a01      	ldr	r2, [sp, #4]
 8019064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801906c:	425a      	negs	r2, r3
 801906e:	415a      	adcs	r2, r3
 8019070:	602a      	str	r2, [r5, #0]
 8019072:	e7ee      	b.n	8019052 <__swhatbuf_r+0x1e>
 8019074:	2340      	movs	r3, #64	; 0x40
 8019076:	2000      	movs	r0, #0
 8019078:	6023      	str	r3, [r4, #0]
 801907a:	b016      	add	sp, #88	; 0x58
 801907c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019080 <__smakebuf_r>:
 8019080:	898b      	ldrh	r3, [r1, #12]
 8019082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019084:	079d      	lsls	r5, r3, #30
 8019086:	4606      	mov	r6, r0
 8019088:	460c      	mov	r4, r1
 801908a:	d507      	bpl.n	801909c <__smakebuf_r+0x1c>
 801908c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019090:	6023      	str	r3, [r4, #0]
 8019092:	6123      	str	r3, [r4, #16]
 8019094:	2301      	movs	r3, #1
 8019096:	6163      	str	r3, [r4, #20]
 8019098:	b002      	add	sp, #8
 801909a:	bd70      	pop	{r4, r5, r6, pc}
 801909c:	ab01      	add	r3, sp, #4
 801909e:	466a      	mov	r2, sp
 80190a0:	f7ff ffc8 	bl	8019034 <__swhatbuf_r>
 80190a4:	9900      	ldr	r1, [sp, #0]
 80190a6:	4605      	mov	r5, r0
 80190a8:	4630      	mov	r0, r6
 80190aa:	f7fd fa41 	bl	8016530 <_malloc_r>
 80190ae:	b948      	cbnz	r0, 80190c4 <__smakebuf_r+0x44>
 80190b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190b4:	059a      	lsls	r2, r3, #22
 80190b6:	d4ef      	bmi.n	8019098 <__smakebuf_r+0x18>
 80190b8:	f023 0303 	bic.w	r3, r3, #3
 80190bc:	f043 0302 	orr.w	r3, r3, #2
 80190c0:	81a3      	strh	r3, [r4, #12]
 80190c2:	e7e3      	b.n	801908c <__smakebuf_r+0xc>
 80190c4:	4b0d      	ldr	r3, [pc, #52]	; (80190fc <__smakebuf_r+0x7c>)
 80190c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80190c8:	89a3      	ldrh	r3, [r4, #12]
 80190ca:	6020      	str	r0, [r4, #0]
 80190cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190d0:	81a3      	strh	r3, [r4, #12]
 80190d2:	9b00      	ldr	r3, [sp, #0]
 80190d4:	6163      	str	r3, [r4, #20]
 80190d6:	9b01      	ldr	r3, [sp, #4]
 80190d8:	6120      	str	r0, [r4, #16]
 80190da:	b15b      	cbz	r3, 80190f4 <__smakebuf_r+0x74>
 80190dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190e0:	4630      	mov	r0, r6
 80190e2:	f000 f931 	bl	8019348 <_isatty_r>
 80190e6:	b128      	cbz	r0, 80190f4 <__smakebuf_r+0x74>
 80190e8:	89a3      	ldrh	r3, [r4, #12]
 80190ea:	f023 0303 	bic.w	r3, r3, #3
 80190ee:	f043 0301 	orr.w	r3, r3, #1
 80190f2:	81a3      	strh	r3, [r4, #12]
 80190f4:	89a0      	ldrh	r0, [r4, #12]
 80190f6:	4305      	orrs	r5, r0
 80190f8:	81a5      	strh	r5, [r4, #12]
 80190fa:	e7cd      	b.n	8019098 <__smakebuf_r+0x18>
 80190fc:	08018e8d 	.word	0x08018e8d

08019100 <__ascii_mbtowc>:
 8019100:	b082      	sub	sp, #8
 8019102:	b901      	cbnz	r1, 8019106 <__ascii_mbtowc+0x6>
 8019104:	a901      	add	r1, sp, #4
 8019106:	b142      	cbz	r2, 801911a <__ascii_mbtowc+0x1a>
 8019108:	b14b      	cbz	r3, 801911e <__ascii_mbtowc+0x1e>
 801910a:	7813      	ldrb	r3, [r2, #0]
 801910c:	600b      	str	r3, [r1, #0]
 801910e:	7812      	ldrb	r2, [r2, #0]
 8019110:	1e10      	subs	r0, r2, #0
 8019112:	bf18      	it	ne
 8019114:	2001      	movne	r0, #1
 8019116:	b002      	add	sp, #8
 8019118:	4770      	bx	lr
 801911a:	4610      	mov	r0, r2
 801911c:	e7fb      	b.n	8019116 <__ascii_mbtowc+0x16>
 801911e:	f06f 0001 	mvn.w	r0, #1
 8019122:	e7f8      	b.n	8019116 <__ascii_mbtowc+0x16>

08019124 <memmove>:
 8019124:	4288      	cmp	r0, r1
 8019126:	b510      	push	{r4, lr}
 8019128:	eb01 0402 	add.w	r4, r1, r2
 801912c:	d902      	bls.n	8019134 <memmove+0x10>
 801912e:	4284      	cmp	r4, r0
 8019130:	4623      	mov	r3, r4
 8019132:	d807      	bhi.n	8019144 <memmove+0x20>
 8019134:	1e43      	subs	r3, r0, #1
 8019136:	42a1      	cmp	r1, r4
 8019138:	d008      	beq.n	801914c <memmove+0x28>
 801913a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801913e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019142:	e7f8      	b.n	8019136 <memmove+0x12>
 8019144:	4402      	add	r2, r0
 8019146:	4601      	mov	r1, r0
 8019148:	428a      	cmp	r2, r1
 801914a:	d100      	bne.n	801914e <memmove+0x2a>
 801914c:	bd10      	pop	{r4, pc}
 801914e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019156:	e7f7      	b.n	8019148 <memmove+0x24>

08019158 <_realloc_r>:
 8019158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801915c:	4680      	mov	r8, r0
 801915e:	4614      	mov	r4, r2
 8019160:	460e      	mov	r6, r1
 8019162:	b921      	cbnz	r1, 801916e <_realloc_r+0x16>
 8019164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019168:	4611      	mov	r1, r2
 801916a:	f7fd b9e1 	b.w	8016530 <_malloc_r>
 801916e:	b92a      	cbnz	r2, 801917c <_realloc_r+0x24>
 8019170:	f7fd f972 	bl	8016458 <_free_r>
 8019174:	4625      	mov	r5, r4
 8019176:	4628      	mov	r0, r5
 8019178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801917c:	f000 f906 	bl	801938c <_malloc_usable_size_r>
 8019180:	4284      	cmp	r4, r0
 8019182:	4607      	mov	r7, r0
 8019184:	d802      	bhi.n	801918c <_realloc_r+0x34>
 8019186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801918a:	d812      	bhi.n	80191b2 <_realloc_r+0x5a>
 801918c:	4621      	mov	r1, r4
 801918e:	4640      	mov	r0, r8
 8019190:	f7fd f9ce 	bl	8016530 <_malloc_r>
 8019194:	4605      	mov	r5, r0
 8019196:	2800      	cmp	r0, #0
 8019198:	d0ed      	beq.n	8019176 <_realloc_r+0x1e>
 801919a:	42bc      	cmp	r4, r7
 801919c:	4622      	mov	r2, r4
 801919e:	4631      	mov	r1, r6
 80191a0:	bf28      	it	cs
 80191a2:	463a      	movcs	r2, r7
 80191a4:	f7fd f942 	bl	801642c <memcpy>
 80191a8:	4631      	mov	r1, r6
 80191aa:	4640      	mov	r0, r8
 80191ac:	f7fd f954 	bl	8016458 <_free_r>
 80191b0:	e7e1      	b.n	8019176 <_realloc_r+0x1e>
 80191b2:	4635      	mov	r5, r6
 80191b4:	e7df      	b.n	8019176 <_realloc_r+0x1e>

080191b6 <_raise_r>:
 80191b6:	291f      	cmp	r1, #31
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	4604      	mov	r4, r0
 80191bc:	460d      	mov	r5, r1
 80191be:	d904      	bls.n	80191ca <_raise_r+0x14>
 80191c0:	2316      	movs	r3, #22
 80191c2:	6003      	str	r3, [r0, #0]
 80191c4:	f04f 30ff 	mov.w	r0, #4294967295
 80191c8:	bd38      	pop	{r3, r4, r5, pc}
 80191ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80191cc:	b112      	cbz	r2, 80191d4 <_raise_r+0x1e>
 80191ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80191d2:	b94b      	cbnz	r3, 80191e8 <_raise_r+0x32>
 80191d4:	4620      	mov	r0, r4
 80191d6:	f000 f831 	bl	801923c <_getpid_r>
 80191da:	462a      	mov	r2, r5
 80191dc:	4601      	mov	r1, r0
 80191de:	4620      	mov	r0, r4
 80191e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191e4:	f000 b818 	b.w	8019218 <_kill_r>
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d00a      	beq.n	8019202 <_raise_r+0x4c>
 80191ec:	1c59      	adds	r1, r3, #1
 80191ee:	d103      	bne.n	80191f8 <_raise_r+0x42>
 80191f0:	2316      	movs	r3, #22
 80191f2:	6003      	str	r3, [r0, #0]
 80191f4:	2001      	movs	r0, #1
 80191f6:	e7e7      	b.n	80191c8 <_raise_r+0x12>
 80191f8:	2400      	movs	r4, #0
 80191fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80191fe:	4628      	mov	r0, r5
 8019200:	4798      	blx	r3
 8019202:	2000      	movs	r0, #0
 8019204:	e7e0      	b.n	80191c8 <_raise_r+0x12>
	...

08019208 <raise>:
 8019208:	4b02      	ldr	r3, [pc, #8]	; (8019214 <raise+0xc>)
 801920a:	4601      	mov	r1, r0
 801920c:	6818      	ldr	r0, [r3, #0]
 801920e:	f7ff bfd2 	b.w	80191b6 <_raise_r>
 8019212:	bf00      	nop
 8019214:	2000012c 	.word	0x2000012c

08019218 <_kill_r>:
 8019218:	b538      	push	{r3, r4, r5, lr}
 801921a:	4d07      	ldr	r5, [pc, #28]	; (8019238 <_kill_r+0x20>)
 801921c:	2300      	movs	r3, #0
 801921e:	4604      	mov	r4, r0
 8019220:	4608      	mov	r0, r1
 8019222:	4611      	mov	r1, r2
 8019224:	602b      	str	r3, [r5, #0]
 8019226:	f7e9 ffaf 	bl	8003188 <_kill>
 801922a:	1c43      	adds	r3, r0, #1
 801922c:	d102      	bne.n	8019234 <_kill_r+0x1c>
 801922e:	682b      	ldr	r3, [r5, #0]
 8019230:	b103      	cbz	r3, 8019234 <_kill_r+0x1c>
 8019232:	6023      	str	r3, [r4, #0]
 8019234:	bd38      	pop	{r3, r4, r5, pc}
 8019236:	bf00      	nop
 8019238:	20003068 	.word	0x20003068

0801923c <_getpid_r>:
 801923c:	f7e9 bf9c 	b.w	8003178 <_getpid>

08019240 <__sread>:
 8019240:	b510      	push	{r4, lr}
 8019242:	460c      	mov	r4, r1
 8019244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019248:	f000 f8a8 	bl	801939c <_read_r>
 801924c:	2800      	cmp	r0, #0
 801924e:	bfab      	itete	ge
 8019250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019252:	89a3      	ldrhlt	r3, [r4, #12]
 8019254:	181b      	addge	r3, r3, r0
 8019256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801925a:	bfac      	ite	ge
 801925c:	6563      	strge	r3, [r4, #84]	; 0x54
 801925e:	81a3      	strhlt	r3, [r4, #12]
 8019260:	bd10      	pop	{r4, pc}

08019262 <__swrite>:
 8019262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019266:	461f      	mov	r7, r3
 8019268:	898b      	ldrh	r3, [r1, #12]
 801926a:	05db      	lsls	r3, r3, #23
 801926c:	4605      	mov	r5, r0
 801926e:	460c      	mov	r4, r1
 8019270:	4616      	mov	r6, r2
 8019272:	d505      	bpl.n	8019280 <__swrite+0x1e>
 8019274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019278:	2302      	movs	r3, #2
 801927a:	2200      	movs	r2, #0
 801927c:	f000 f874 	bl	8019368 <_lseek_r>
 8019280:	89a3      	ldrh	r3, [r4, #12]
 8019282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801928a:	81a3      	strh	r3, [r4, #12]
 801928c:	4632      	mov	r2, r6
 801928e:	463b      	mov	r3, r7
 8019290:	4628      	mov	r0, r5
 8019292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019296:	f000 b823 	b.w	80192e0 <_write_r>

0801929a <__sseek>:
 801929a:	b510      	push	{r4, lr}
 801929c:	460c      	mov	r4, r1
 801929e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192a2:	f000 f861 	bl	8019368 <_lseek_r>
 80192a6:	1c43      	adds	r3, r0, #1
 80192a8:	89a3      	ldrh	r3, [r4, #12]
 80192aa:	bf15      	itete	ne
 80192ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80192ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80192b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80192b6:	81a3      	strheq	r3, [r4, #12]
 80192b8:	bf18      	it	ne
 80192ba:	81a3      	strhne	r3, [r4, #12]
 80192bc:	bd10      	pop	{r4, pc}

080192be <__sclose>:
 80192be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192c2:	f000 b81f 	b.w	8019304 <_close_r>

080192c6 <__ascii_wctomb>:
 80192c6:	b149      	cbz	r1, 80192dc <__ascii_wctomb+0x16>
 80192c8:	2aff      	cmp	r2, #255	; 0xff
 80192ca:	bf85      	ittet	hi
 80192cc:	238a      	movhi	r3, #138	; 0x8a
 80192ce:	6003      	strhi	r3, [r0, #0]
 80192d0:	700a      	strbls	r2, [r1, #0]
 80192d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80192d6:	bf98      	it	ls
 80192d8:	2001      	movls	r0, #1
 80192da:	4770      	bx	lr
 80192dc:	4608      	mov	r0, r1
 80192de:	4770      	bx	lr

080192e0 <_write_r>:
 80192e0:	b538      	push	{r3, r4, r5, lr}
 80192e2:	4d07      	ldr	r5, [pc, #28]	; (8019300 <_write_r+0x20>)
 80192e4:	4604      	mov	r4, r0
 80192e6:	4608      	mov	r0, r1
 80192e8:	4611      	mov	r1, r2
 80192ea:	2200      	movs	r2, #0
 80192ec:	602a      	str	r2, [r5, #0]
 80192ee:	461a      	mov	r2, r3
 80192f0:	f7e9 ff81 	bl	80031f6 <_write>
 80192f4:	1c43      	adds	r3, r0, #1
 80192f6:	d102      	bne.n	80192fe <_write_r+0x1e>
 80192f8:	682b      	ldr	r3, [r5, #0]
 80192fa:	b103      	cbz	r3, 80192fe <_write_r+0x1e>
 80192fc:	6023      	str	r3, [r4, #0]
 80192fe:	bd38      	pop	{r3, r4, r5, pc}
 8019300:	20003068 	.word	0x20003068

08019304 <_close_r>:
 8019304:	b538      	push	{r3, r4, r5, lr}
 8019306:	4d06      	ldr	r5, [pc, #24]	; (8019320 <_close_r+0x1c>)
 8019308:	2300      	movs	r3, #0
 801930a:	4604      	mov	r4, r0
 801930c:	4608      	mov	r0, r1
 801930e:	602b      	str	r3, [r5, #0]
 8019310:	f7e9 ff8d 	bl	800322e <_close>
 8019314:	1c43      	adds	r3, r0, #1
 8019316:	d102      	bne.n	801931e <_close_r+0x1a>
 8019318:	682b      	ldr	r3, [r5, #0]
 801931a:	b103      	cbz	r3, 801931e <_close_r+0x1a>
 801931c:	6023      	str	r3, [r4, #0]
 801931e:	bd38      	pop	{r3, r4, r5, pc}
 8019320:	20003068 	.word	0x20003068

08019324 <_fstat_r>:
 8019324:	b538      	push	{r3, r4, r5, lr}
 8019326:	4d07      	ldr	r5, [pc, #28]	; (8019344 <_fstat_r+0x20>)
 8019328:	2300      	movs	r3, #0
 801932a:	4604      	mov	r4, r0
 801932c:	4608      	mov	r0, r1
 801932e:	4611      	mov	r1, r2
 8019330:	602b      	str	r3, [r5, #0]
 8019332:	f7e9 ff88 	bl	8003246 <_fstat>
 8019336:	1c43      	adds	r3, r0, #1
 8019338:	d102      	bne.n	8019340 <_fstat_r+0x1c>
 801933a:	682b      	ldr	r3, [r5, #0]
 801933c:	b103      	cbz	r3, 8019340 <_fstat_r+0x1c>
 801933e:	6023      	str	r3, [r4, #0]
 8019340:	bd38      	pop	{r3, r4, r5, pc}
 8019342:	bf00      	nop
 8019344:	20003068 	.word	0x20003068

08019348 <_isatty_r>:
 8019348:	b538      	push	{r3, r4, r5, lr}
 801934a:	4d06      	ldr	r5, [pc, #24]	; (8019364 <_isatty_r+0x1c>)
 801934c:	2300      	movs	r3, #0
 801934e:	4604      	mov	r4, r0
 8019350:	4608      	mov	r0, r1
 8019352:	602b      	str	r3, [r5, #0]
 8019354:	f7e9 ff87 	bl	8003266 <_isatty>
 8019358:	1c43      	adds	r3, r0, #1
 801935a:	d102      	bne.n	8019362 <_isatty_r+0x1a>
 801935c:	682b      	ldr	r3, [r5, #0]
 801935e:	b103      	cbz	r3, 8019362 <_isatty_r+0x1a>
 8019360:	6023      	str	r3, [r4, #0]
 8019362:	bd38      	pop	{r3, r4, r5, pc}
 8019364:	20003068 	.word	0x20003068

08019368 <_lseek_r>:
 8019368:	b538      	push	{r3, r4, r5, lr}
 801936a:	4d07      	ldr	r5, [pc, #28]	; (8019388 <_lseek_r+0x20>)
 801936c:	4604      	mov	r4, r0
 801936e:	4608      	mov	r0, r1
 8019370:	4611      	mov	r1, r2
 8019372:	2200      	movs	r2, #0
 8019374:	602a      	str	r2, [r5, #0]
 8019376:	461a      	mov	r2, r3
 8019378:	f7e9 ff80 	bl	800327c <_lseek>
 801937c:	1c43      	adds	r3, r0, #1
 801937e:	d102      	bne.n	8019386 <_lseek_r+0x1e>
 8019380:	682b      	ldr	r3, [r5, #0]
 8019382:	b103      	cbz	r3, 8019386 <_lseek_r+0x1e>
 8019384:	6023      	str	r3, [r4, #0]
 8019386:	bd38      	pop	{r3, r4, r5, pc}
 8019388:	20003068 	.word	0x20003068

0801938c <_malloc_usable_size_r>:
 801938c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019390:	1f18      	subs	r0, r3, #4
 8019392:	2b00      	cmp	r3, #0
 8019394:	bfbc      	itt	lt
 8019396:	580b      	ldrlt	r3, [r1, r0]
 8019398:	18c0      	addlt	r0, r0, r3
 801939a:	4770      	bx	lr

0801939c <_read_r>:
 801939c:	b538      	push	{r3, r4, r5, lr}
 801939e:	4d07      	ldr	r5, [pc, #28]	; (80193bc <_read_r+0x20>)
 80193a0:	4604      	mov	r4, r0
 80193a2:	4608      	mov	r0, r1
 80193a4:	4611      	mov	r1, r2
 80193a6:	2200      	movs	r2, #0
 80193a8:	602a      	str	r2, [r5, #0]
 80193aa:	461a      	mov	r2, r3
 80193ac:	f7e9 ff06 	bl	80031bc <_read>
 80193b0:	1c43      	adds	r3, r0, #1
 80193b2:	d102      	bne.n	80193ba <_read_r+0x1e>
 80193b4:	682b      	ldr	r3, [r5, #0]
 80193b6:	b103      	cbz	r3, 80193ba <_read_r+0x1e>
 80193b8:	6023      	str	r3, [r4, #0]
 80193ba:	bd38      	pop	{r3, r4, r5, pc}
 80193bc:	20003068 	.word	0x20003068

080193c0 <_init>:
 80193c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193c2:	bf00      	nop
 80193c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193c6:	bc08      	pop	{r3}
 80193c8:	469e      	mov	lr, r3
 80193ca:	4770      	bx	lr

080193cc <_fini>:
 80193cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ce:	bf00      	nop
 80193d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193d2:	bc08      	pop	{r3}
 80193d4:	469e      	mov	lr, r3
 80193d6:	4770      	bx	lr
