
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  08015890  08015890  00025890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801614c  0801614c  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801614c  0801614c  0002614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016154  08016154  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016154  08016154  00026154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016158  08016158  00026158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0801615c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004708  200002fc  08016458  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a04  08016458  00034a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b58  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d25  00000000  00000000  00060e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b0  00000000  00000000  00067bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b8  00000000  00000000  0006a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd7d  00000000  00000000  0006c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000335ac  00000000  00000000  00077f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001072ba  00000000  00000000  000ab541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b27fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa34  00000000  00000000  001b284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015878 	.word	0x08015878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	08015878 	.word	0x08015878

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f001 f943 	bl	800217a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f82c 	bl	8000f50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef8:	f000 fa7c 	bl	80013f4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000efc:	f000 f9ea 	bl	80012d4 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000f00:	f000 f8f4 	bl	80010ec <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f04:	f00b fe6a 	bl	800cbdc <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000f08:	f010 fcfe 	bl	8011908 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8000f0c:	f011 fa7e 	bl	801240c <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8000f10:	f000 f9b0 	bl	8001274 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f14:	f000 f90c 	bl	8001130 <MX_TIM1_Init>
	MX_TIM11_Init();
 8000f18:	f000 f95e 	bl	80011d8 <MX_TIM11_Init>
	MX_ADC1_Init();
 8000f1c:	f000 f886 	bl	800102c <MX_ADC1_Init>
	MX_FMC_Init();
 8000f20:	f000 fa06 	bl	8001330 <MX_FMC_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f001 f984 	bl	8002234 <HAL_Delay>

	// system startup
	System_init(&system_state);
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <main+0x60>)
 8000f2e:	f000 fff1 	bl	8001f14 <System_init>

	// system state log
	System_initLog(&system_state);
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <main+0x60>)
 8000f34:	f001 f85a 	bl	8001fec <System_initLog>
	System_selfTestLog(&system_state);
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <main+0x60>)
 8000f3a:	f001 f877 	bl	800202c <System_selfTestLog>


	HAL_Delay(1000);
 8000f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f42:	f001 f977 	bl	8002234 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000f46:	f011 fa87 	bl	8012458 <MX_USB_HOST_Process>
 8000f4a:	e7fc      	b.n	8000f46 <main+0x5a>
 8000f4c:	20000670 	.word	0x20000670

08000f50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f011 fda6 	bl	8012ab0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000f74:	f005 f9fc 	bl	8006370 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <SystemClock_Config+0xd4>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a29      	ldr	r2, [pc, #164]	; (8001024 <SystemClock_Config+0xd4>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <SystemClock_Config+0xd4>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xd8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <SystemClock_Config+0xd8>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xd8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000fc0:	23d8      	movs	r3, #216	; 0xd8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 fa2d 	bl	8006430 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000fdc:	f000 fb3c 	bl	8001658 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe0:	f005 f9d6 	bl	8006390 <HAL_PWREx_EnableOverDrive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000fea:	f000 fb35 	bl	8001658 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2107      	movs	r1, #7
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fcb3 	bl	8006978 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xcc>
	{
		Error_Handler();
 8001018:	f000 fb1e 	bl	8001658 <Error_Handler>
	}
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <MX_ADC1_Init+0xb8>)
 8001042:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001046:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800104a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_ADC1_Init+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001054:	2201      	movs	r2, #1
 8001056:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0xb4>)
 800105a:	2201      	movs	r2, #1
 800105c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0xb4>)
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0xb4>)
 800107a:	2202      	movs	r2, #2
 800107c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0xb4>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	4814      	ldr	r0, [pc, #80]	; (80010e0 <MX_ADC1_Init+0xb4>)
 800108e:	f001 f8f5 	bl	800227c <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001098:	f000 fade 	bl	8001658 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010a4:	2306      	movs	r3, #6
 80010a6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_ADC1_Init+0xb4>)
 80010ae:	f001 f929 	bl	8002304 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80010b8:	f000 face 	bl	8001658 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80010bc:	2302      	movs	r3, #2
 80010be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC1_Init+0xb4>)
 80010ca:	f001 f91b 	bl	8002304 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 80010d4:	f000 fac0 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000318 	.word	0x20000318
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <MX_SDMMC1_SD_Init+0x40>)
 80010f4:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 8001110:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001114:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 8001118:	2204      	movs	r2, #4
 800111a:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <MX_SDMMC1_SD_Init+0x3c>)
 800111e:	f006 fa07 	bl	8007530 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003c0 	.word	0x200003c0
 800112c:	40012c00 	.word	0x40012c00

08001130 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <MX_TIM1_Init+0xa4>)
 8001152:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM1_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001166:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM1_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <MX_TIM1_Init+0xa0>)
 800117c:	f007 f9b0 	bl	80084e0 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 8001186:	f000 fa67 	bl	8001658 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_TIM1_Init+0xa0>)
 8001198:	f007 fb6e 	bl	8008878 <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80011a2:	f000 fa59 	bl	8001658 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM1_Init+0xa0>)
 80011b8:	f007 ffc0 	bl	800913c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80011c2:	f000 fa49 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000504 	.word	0x20000504
 80011d4:	40010000 	.word	0x40010000

080011d8 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM11_Init+0x94>)
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <MX_TIM11_Init+0x98>)
 80011f4:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_TIM11_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_TIM11_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM11_Init+0x94>)
 8001204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001208:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_TIM11_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_TIM11_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <MX_TIM11_Init+0x94>)
 8001218:	f007 f962 	bl	80084e0 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 8001222:	f000 fa19 	bl	8001658 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_TIM11_Init+0x94>)
 8001228:	f007 f9b1 	bl	800858e <HAL_TIM_PWM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 8001232:	f000 fa11 	bl	8001658 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001236:	2360      	movs	r3, #96	; 0x60
 8001238:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <MX_TIM11_Init+0x94>)
 800124e:	f007 f9ff 	bl	8008650 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 8001258:	f000 f9fe 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <MX_TIM11_Init+0x94>)
 800125e:	f000 fc17 	bl	8001a90 <HAL_TIM_MspPostInit>

}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000550 	.word	0x20000550
 8001270:	40014800 	.word	0x40014800

08001274 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART1_UART_Init+0x58>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_USART1_UART_Init+0x5c>)
 800127c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART1_UART_Init+0x58>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART1_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART1_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART1_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART1_UART_Init+0x58>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART1_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART1_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART1_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART1_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART1_UART_Init+0x58>)
 80012b8:	f007 ffce 	bl	8009258 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80012c2:	f000 f9c9 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000059c 	.word	0x2000059c
 80012d0:	40011000 	.word	0x40011000

080012d4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_DMA_Init+0x58>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <MX_DMA_Init+0x58>)
 80012e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_DMA_Init+0x58>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2038      	movs	r0, #56	; 0x38
 80012f8:	f001 fb2f 	bl	800295a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012fc:	2038      	movs	r0, #56	; 0x38
 80012fe:	f001 fb48 	bl	8002992 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	203b      	movs	r0, #59	; 0x3b
 8001308:	f001 fb27 	bl	800295a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800130c:	203b      	movs	r0, #59	; 0x3b
 800130e:	f001 fb40 	bl	8002992 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2045      	movs	r0, #69	; 0x45
 8001318:	f001 fb1f 	bl	800295a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800131c:	2045      	movs	r0, #69	; 0x45
 800131e:	f001 fb38 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_FMC_Init+0xbc>)
 800134a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800134e:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_FMC_Init+0xbc>)
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <MX_FMC_Init+0xc0>)
 8001354:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_FMC_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_FMC_Init+0xbc>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_FMC_Init+0xbc>)
 8001364:	2204      	movs	r2, #4
 8001366:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_FMC_Init+0xbc>)
 800136a:	2210      	movs	r2, #16
 800136c:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_FMC_Init+0xbc>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_FMC_Init+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_FMC_Init+0xbc>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_FMC_Init+0xbc>)
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_FMC_Init+0xbc>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_FMC_Init+0xbc>)
 8001390:	2200      	movs	r2, #0
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_FMC_Init+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_FMC_Init+0xbc>)
 800139c:	2200      	movs	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_FMC_Init+0xbc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_FMC_Init+0xbc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_FMC_Init+0xbc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 80013b2:	2305      	movs	r3, #5
 80013b4:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80013b6:	230f      	movs	r3, #15
 80013b8:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 80013ba:	2308      	movs	r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80013c2:	2310      	movs	r3, #16
 80013c4:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80013c6:	2311      	movs	r3, #17
 80013c8:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_FMC_Init+0xbc>)
 80013d6:	f007 f83b 	bl	8008450 <HAL_SRAM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 80013e0:	f000 f93a 	bl	8001658 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000624 	.word	0x20000624
 80013f0:	a0000104 	.word	0xa0000104

080013f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800140a:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <MX_GPIO_Init+0x244>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a8a      	ldr	r2, [pc, #552]	; (8001638 <MX_GPIO_Init+0x244>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b88      	ldr	r3, [pc, #544]	; (8001638 <MX_GPIO_Init+0x244>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b85      	ldr	r3, [pc, #532]	; (8001638 <MX_GPIO_Init+0x244>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a84      	ldr	r2, [pc, #528]	; (8001638 <MX_GPIO_Init+0x244>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <MX_GPIO_Init+0x244>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <MX_GPIO_Init+0x244>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <MX_GPIO_Init+0x244>)
 8001440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <MX_GPIO_Init+0x244>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b79      	ldr	r3, [pc, #484]	; (8001638 <MX_GPIO_Init+0x244>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a78      	ldr	r2, [pc, #480]	; (8001638 <MX_GPIO_Init+0x244>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <MX_GPIO_Init+0x244>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b73      	ldr	r3, [pc, #460]	; (8001638 <MX_GPIO_Init+0x244>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a72      	ldr	r2, [pc, #456]	; (8001638 <MX_GPIO_Init+0x244>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b70      	ldr	r3, [pc, #448]	; (8001638 <MX_GPIO_Init+0x244>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <MX_GPIO_Init+0x244>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a6c      	ldr	r2, [pc, #432]	; (8001638 <MX_GPIO_Init+0x244>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <MX_GPIO_Init+0x244>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <MX_GPIO_Init+0x244>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a66      	ldr	r2, [pc, #408]	; (8001638 <MX_GPIO_Init+0x244>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b64      	ldr	r3, [pc, #400]	; (8001638 <MX_GPIO_Init+0x244>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	4b61      	ldr	r3, [pc, #388]	; (8001638 <MX_GPIO_Init+0x244>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a60      	ldr	r2, [pc, #384]	; (8001638 <MX_GPIO_Init+0x244>)
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b5e      	ldr	r3, [pc, #376]	; (8001638 <MX_GPIO_Init+0x244>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <MX_GPIO_Init+0x244>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a5a      	ldr	r2, [pc, #360]	; (8001638 <MX_GPIO_Init+0x244>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b58      	ldr	r3, [pc, #352]	; (8001638 <MX_GPIO_Init+0x244>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	4854      	ldr	r0, [pc, #336]	; (800163c <MX_GPIO_Init+0x248>)
 80014ea:	f001 ff1b 	bl	8003324 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	4853      	ldr	r0, [pc, #332]	; (8001640 <MX_GPIO_Init+0x24c>)
 80014f4:	f001 ff16 	bl	8003324 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4851      	ldr	r0, [pc, #324]	; (8001644 <MX_GPIO_Init+0x250>)
 80014fe:	f001 ff11 	bl	8003324 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	21c0      	movs	r1, #192	; 0xc0
 8001506:	4850      	ldr	r0, [pc, #320]	; (8001648 <MX_GPIO_Init+0x254>)
 8001508:	f001 ff0c 	bl	8003324 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	4845      	ldr	r0, [pc, #276]	; (800163c <MX_GPIO_Init+0x248>)
 8001526:	f001 fd39 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800152a:	f643 4333 	movw	r3, #15411	; 0x3c33
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	483f      	ldr	r0, [pc, #252]	; (800163c <MX_GPIO_Init+0x248>)
 8001540:	f001 fd2c 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8001544:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	483b      	ldr	r0, [pc, #236]	; (8001648 <MX_GPIO_Init+0x254>)
 800155a:	f001 fd1f 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 800155e:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4836      	ldr	r0, [pc, #216]	; (800164c <MX_GPIO_Init+0x258>)
 8001574:	f001 fd12 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4831      	ldr	r0, [pc, #196]	; (8001650 <MX_GPIO_Init+0x25c>)
 800158c:	f001 fd06 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8001590:	230b      	movs	r3, #11
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4827      	ldr	r0, [pc, #156]	; (8001640 <MX_GPIO_Init+0x24c>)
 80015a4:	f001 fcfa 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 80015a8:	2304      	movs	r3, #4
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4820      	ldr	r0, [pc, #128]	; (8001640 <MX_GPIO_Init+0x24c>)
 80015c0:	f001 fcec 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <MX_GPIO_Init+0x250>)
 80015d8:	f001 fce0 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <MX_GPIO_Init+0x250>)
 80015f4:	f001 fcd2 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80015f8:	23c0      	movs	r3, #192	; 0xc0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <MX_GPIO_Init+0x254>)
 8001610:	f001 fcc4 	bl	8002f9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <MX_GPIO_Init+0x260>)
 800162a:	f001 fcb7 	bl	8002f9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800162e:	bf00      	nop
 8001630:	3738      	adds	r7, #56	; 0x38
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40022000 	.word	0x40022000
 8001644:	40020800 	.word	0x40020800
 8001648:	40021800 	.word	0x40021800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021400 	.word	0x40021400

08001658 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165e:	b672      	cpsid	i
}
 8001660:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	481d      	ldr	r0, [pc, #116]	; (80016dc <Error_Handler+0x84>)
 8001668:	f001 fe5c 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	481a      	ldr	r0, [pc, #104]	; (80016dc <Error_Handler+0x84>)
 8001672:	f001 fe57 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	4819      	ldr	r0, [pc, #100]	; (80016e0 <Error_Handler+0x88>)
 800167c:	f001 fe52 	bl	8003324 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <Error_Handler+0x8c>)
 8001682:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001686:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800168a:	2b02      	cmp	r3, #2
 800168c:	d010      	beq.n	80016b0 <Error_Handler+0x58>
 800168e:	2b02      	cmp	r3, #2
 8001690:	dc17      	bgt.n	80016c2 <Error_Handler+0x6a>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <Error_Handler+0x44>
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <Error_Handler+0x4e>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 800169a:	e012      	b.n	80016c2 <Error_Handler+0x6a>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <Error_Handler+0x84>)
 80016a0:	f001 fe59 	bl	8003356 <HAL_GPIO_TogglePin>
			break;
 80016a4:	e00e      	b.n	80016c4 <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <Error_Handler+0x84>)
 80016aa:	f001 fe54 	bl	8003356 <HAL_GPIO_TogglePin>
			break;
 80016ae:	e009      	b.n	80016c4 <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <Error_Handler+0x84>)
 80016b4:	f001 fe4f 	bl	8003356 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <Error_Handler+0x84>)
 80016bc:	f001 fe4b 	bl	8003356 <HAL_GPIO_TogglePin>
			break;
 80016c0:	e000      	b.n	80016c4 <Error_Handler+0x6c>
			break;
 80016c2:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e002      	b.n	80016d0 <Error_Handler+0x78>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <Error_Handler+0x90>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d9f8      	bls.n	80016ca <Error_Handler+0x72>
		switch(system_state.error)
 80016d8:	e7d2      	b.n	8001680 <Error_Handler+0x28>
 80016da:	bf00      	nop
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	20000670 	.word	0x20000670
 80016e8:	001e847f 	.word	0x001e847f

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_MspInit+0x44>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_MspInit+0x44>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_MspInit+0x44>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x44>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x44>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x44>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <HAL_ADC_MspInit+0xd4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d153      	bne.n	80017fe <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_ADC_MspInit+0xd8>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a2c      	ldr	r2, [pc, #176]	; (800180c <HAL_ADC_MspInit+0xd8>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_ADC_MspInit+0xd8>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_ADC_MspInit+0xd8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_ADC_MspInit+0xd8>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_ADC_MspInit+0xd8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001786:	2305      	movs	r3, #5
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	2303      	movs	r3, #3
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <HAL_ADC_MspInit+0xdc>)
 800179a:	f001 fbff 	bl	8002f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_ADC_MspInit+0xe4>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017e4:	f001 f8f0 	bl	80029c8 <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80017ee:	f7ff ff33 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017f6:	639a      	str	r2, [r3, #56]	; 0x38
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_ADC_MspInit+0xe0>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40012000 	.word	0x40012000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	20000360 	.word	0x20000360
 8001818:	40026410 	.word	0x40026410

0800181c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0ac      	sub	sp, #176	; 0xb0
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	2284      	movs	r2, #132	; 0x84
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f011 f937 	bl	8012ab0 <memset>
  if(hsd->Instance==SDMMC1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a70      	ldr	r2, [pc, #448]	; (8001a08 <HAL_SD_MspInit+0x1ec>)
 8001848:	4293      	cmp	r3, r2
 800184a:	f040 80d8 	bne.w	80019fe <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800184e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001852:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f005 faab 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001870:	f7ff fef2 	bl	8001658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001874:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	4a64      	ldr	r2, [pc, #400]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 800187a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800187e:	6453      	str	r3, [r2, #68]	; 0x44
 8001880:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_SD_MspInit+0x1f0>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80018bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018d6:	230c      	movs	r3, #12
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018e0:	4619      	mov	r1, r3
 80018e2:	484b      	ldr	r0, [pc, #300]	; (8001a10 <HAL_SD_MspInit+0x1f4>)
 80018e4:	f001 fb5a 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018e8:	2304      	movs	r3, #4
 80018ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001900:	230c      	movs	r3, #12
 8001902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800190a:	4619      	mov	r1, r3
 800190c:	4841      	ldr	r0, [pc, #260]	; (8001a14 <HAL_SD_MspInit+0x1f8>)
 800190e:	f001 fb45 	bl	8002f9c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001914:	4a41      	ldr	r2, [pc, #260]	; (8001a1c <HAL_SD_MspInit+0x200>)
 8001916:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800191a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800192e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001932:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800193e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001942:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001946:	2220      	movs	r2, #32
 8001948:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001952:	2204      	movs	r2, #4
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001958:	2203      	movs	r2, #3
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800195e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001966:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800196c:	482a      	ldr	r0, [pc, #168]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 800196e:	f001 f82b 	bl	80029c8 <HAL_DMA_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001978:	f7ff fe6e 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <HAL_SD_MspInit+0x1fc>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_SD_MspInit+0x204>)
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_SD_MspInit+0x208>)
 800198c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_SD_MspInit+0x204>)
 8001990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001994:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_SD_MspInit+0x204>)
 8001998:	2240      	movs	r2, #64	; 0x40
 800199a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_SD_MspInit+0x204>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019c8:	2204      	movs	r2, #4
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80019e2:	480f      	ldr	r0, [pc, #60]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019e4:	f000 fff0 	bl	80029c8 <HAL_DMA_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80019ee:	f7ff fe33 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_SD_MspInit+0x204>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	37b0      	adds	r7, #176	; 0xb0
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	20000444 	.word	0x20000444
 8001a1c:	40026458 	.word	0x40026458
 8001a20:	200004a4 	.word	0x200004a4
 8001a24:	400264a0 	.word	0x400264a0

08001a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_TIM_Base_MspInit+0x5c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10c      	bne.n	8001a54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001a52:	e010      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_TIM_Base_MspInit+0x64>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10b      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_TIM_Base_MspInit+0x60>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40014800 	.word	0x40014800

08001a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_TIM_MspPostInit+0x64>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d11b      	bne.n	8001aea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_TIM_MspPostInit+0x68>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_TIM_MspPostInit+0x68>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ada:	2303      	movs	r3, #3
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_TIM_MspPostInit+0x6c>)
 8001ae6:	f001 fa59 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40014800 	.word	0x40014800
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021400 	.word	0x40021400

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0aa      	sub	sp, #168	; 0xa8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2284      	movs	r2, #132	; 0x84
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f010 ffc5 	bl	8012ab0 <memset>
  if(huart->Instance==USART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_UART_MspInit+0xb0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d13a      	bne.n	8001ba6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b34:	2300      	movs	r3, #0
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 f93f 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b48:	f7ff fd86 	bl	8001658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6453      	str	r3, [r2, #68]	; 0x44
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_UART_MspInit+0xb4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b94:	2307      	movs	r3, #7
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_UART_MspInit+0xb8>)
 8001ba2:	f001 f9fb 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	37a8      	adds	r7, #168	; 0xa8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_FMC_MspInit+0xc4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d14e      	bne.n	8001c76 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_FMC_MspInit+0xc4>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_FMC_MspInit+0xc8>)
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_FMC_MspInit+0xc8>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6393      	str	r3, [r2, #56]	; 0x38
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_FMC_MspInit+0xc8>)
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001bf6:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001bfa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481d      	ldr	r0, [pc, #116]	; (8001c88 <HAL_FMC_MspInit+0xcc>)
 8001c12:	f001 f9c3 	bl	8002f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8001c16:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001c1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4816      	ldr	r0, [pc, #88]	; (8001c8c <HAL_FMC_MspInit+0xd0>)
 8001c32:	f001 f9b3 	bl	8002f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001c36:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001c3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480f      	ldr	r0, [pc, #60]	; (8001c90 <HAL_FMC_MspInit+0xd4>)
 8001c52:	f001 f9a3 	bl	8002f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001c56:	233f      	movs	r3, #63	; 0x3f
 8001c58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c66:	230c      	movs	r3, #12
 8001c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_FMC_MspInit+0xd8>)
 8001c70:	f001 f994 	bl	8002f9c <HAL_GPIO_Init>
 8001c74:	e000      	b.n	8001c78 <HAL_FMC_MspInit+0xbc>
    return;
 8001c76:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200026e4 	.word	0x200026e4
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800

08001c98 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ca0:	f7ff ff8c 	bl	8001bbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 fa7c 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA2_Stream0_IRQHandler+0x10>)
 8001d06:	f000 ff0d 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000360 	.word	0x20000360

08001d14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA2_Stream3_IRQHandler+0x10>)
 8001d1a:	f000 ff03 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000444 	.word	0x20000444

08001d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <OTG_FS_IRQHandler+0x10>)
 8001d2e:	f001 fd97 	bl	8003860 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200046f0 	.word	0x200046f0

08001d3c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA2_Stream6_IRQHandler+0x10>)
 8001d42:	f000 feef 	bl	8002b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200004a4 	.word	0x200004a4

08001d50 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <OTG_HS_IRQHandler+0x10>)
 8001d56:	f003 f999 	bl	800508c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20003e0c 	.word	0x20003e0c

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7e:	f010 fe5d 	bl	8012a3c <__errno>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2216      	movs	r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
  return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_exit>:

void _exit (int status)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da6:	e7fe      	b.n	8001da6 <_exit+0x12>

08001da8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e00a      	b.n	8001dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dba:	f3af 8000 	nop.w
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf0      	blt.n	8001dba <_read+0x12>
  }

  return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e009      	b.n	8001e08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	60ba      	str	r2, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf1      	blt.n	8001df4 <_write+0x12>
  }
  return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_close>:

int _close(int file)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e42:	605a      	str	r2, [r3, #4]
  return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_isatty>:

int _isatty(int file)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f010 fdc2 	bl	8012a3c <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20050000 	.word	0x20050000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	200026e8 	.word	0x200026e8
 8001eec:	20004a08 	.word	0x20004a08

08001ef0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f805 	bl	8001f44 <System_selfTest>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <System_selfTest>:

void System_selfTest(System_t *state)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = SRAM_ADDRESS + 1000000ul;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <System_selfTest+0x9c>)
 8001f4e:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e00a      	b.n	8001f6c <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0919      	lsrs	r1, r3, #4
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	b28a      	uxth	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <System_selfTest+0xa0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d9f0      	bls.n	8001f56 <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e00f      	b.n	8001f9a <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d002      	beq.n	8001f94 <System_selfTest+0x50>
			state->sram_working = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <System_selfTest+0xa0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d9eb      	bls.n	8001f7a <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	f241 0334 	movw	r3, #4148	; 0x1034
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <System_selfTest+0xa4>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00f fc08 	bl	80117c4 <f_mount>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fbe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if(state->sdio.file_result != FR_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fc8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <System_selfTest+0x92>
		state->sdio_working = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	603d0900 	.word	0x603d0900
 8001fe4:	000f423f 	.word	0x000f423f
 8001fe8:	200026f4 	.word	0x200026f4

08001fec <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	char *logo = "________________________________________________________________________________\n"
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <System_initLog+0x38>)
 8001ff6:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001ff8:	bf00      	nop
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <System_initLog+0x3c>)
 8001ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f8      	bne.n	8001ffa <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe f901 	bl	8000210 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	b29b      	uxth	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f00f fd35 	bl	8011a84 <CDC_Transmit_HS>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	08015890 	.word	0x08015890
 8002028:	20002930 	.word	0x20002930

0800202c <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b0d3      	sub	sp, #332	; 0x14c
 8002030:	af02      	add	r7, sp, #8
 8002032:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002036:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800203a:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <System_selfTestLog+0xe8>)
 800203e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 8002042:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002046:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 8002052:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002056:	4a30      	ldr	r2, [pc, #192]	; (8002118 <System_selfTestLog+0xec>)
 8002058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800205c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002060:	e005      	b.n	800206e <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 8002062:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002066:	4a2d      	ldr	r2, [pc, #180]	; (800211c <System_selfTestLog+0xf0>)
 8002068:	ca07      	ldmia	r2, {r0, r1, r2}
 800206a:	c303      	stmia	r3!, {r0, r1}
 800206c:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 800206e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002072:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	789b      	ldrb	r3, [r3, #2]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 800207e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002082:	4a25      	ldr	r2, [pc, #148]	; (8002118 <System_selfTestLog+0xec>)
 8002084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
 800208c:	e005      	b.n	800209a <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 800208e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002092:	4a22      	ldr	r2, [pc, #136]	; (800211c <System_selfTestLog+0xf0>)
 8002094:	ca07      	ldmia	r2, {r0, r1, r2}
 8002096:	c303      	stmia	r3!, {r0, r1}
 8002098:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 800209a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800209e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	78db      	ldrb	r3, [r3, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <System_selfTestLog+0xf4>)
 80020ac:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80020b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020b6:	e005      	b.n	80020c4 <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 80020b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <System_selfTestLog+0xf0>)
 80020be:	ca07      	ldmia	r2, {r0, r1, r2}
 80020c0:	c303      	stmia	r3!, {r0, r1}
 80020c2:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 80020c4:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80020c8:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80020cc:	f107 000c 	add.w	r0, r7, #12
 80020d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	460b      	mov	r3, r1
 80020d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80020dc:	f011 fa4a 	bl	8013574 <siprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 80020e0:	bf00      	nop
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <System_selfTestLog+0xf8>)
 80020e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80020e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f8      	bne.n	80020e2 <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f88b 	bl	8000210 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f00f fcbd 	bl	8011a84 <CDC_Transmit_HS>
}
 800210a:	bf00      	nop
 800210c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	08015c2c 	.word	0x08015c2c
 8002118:	08015ccc 	.word	0x08015ccc
 800211c:	08015cd4 	.word	0x08015cd4
 8002120:	08015ce0 	.word	0x08015ce0
 8002124:	20002930 	.word	0x20002930

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800212e:	490e      	ldr	r1, [pc, #56]	; (8002168 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002144:	4c0b      	ldr	r4, [pc, #44]	; (8002174 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002152:	f7ff fecd 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f010 fc77 	bl	8012a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7fe fec7 	bl	8000eec <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002160:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 800216c:	0801615c 	.word	0x0801615c
  ldr r2, =_sbss
 8002170:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002174:	20004a04 	.word	0x20004a04

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>

0800217a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217e:	2003      	movs	r0, #3
 8002180:	f000 fbe0 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002184:	200f      	movs	r0, #15
 8002186:	f000 f805 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218a:	f7ff faaf 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fbfb 	bl	80029ae <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f000 fbc3 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	200026ec 	.word	0x200026ec

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200026ec 	.word	0x200026ec

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e031      	b.n	80022f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fa4a 	bl	8001734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_ADC_Init+0x84>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	f043 0202 	orr.w	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f970 	bl	80025b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
 80022e6:	e001      	b.n	80022ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	ffffeefd 	.word	0xffffeefd

08002304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1c>
 800231c:	2302      	movs	r3, #2
 800231e:	e136      	b.n	800258e <HAL_ADC_ConfigChannel+0x28a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b09      	cmp	r3, #9
 800232e:	d93a      	bls.n	80023a6 <HAL_ADC_ConfigChannel+0xa2>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002338:	d035      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	3b1e      	subs	r3, #30
 8002350:	2207      	movs	r2, #7
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	400a      	ands	r2, r1
 800235e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a8d      	ldr	r2, [pc, #564]	; (800259c <HAL_ADC_ConfigChannel+0x298>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68d9      	ldr	r1, [r3, #12]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	061a      	lsls	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237e:	e035      	b.n	80023ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68d9      	ldr	r1, [r3, #12]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	4603      	mov	r3, r0
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4403      	add	r3, r0
 8002398:	3b1e      	subs	r3, #30
 800239a:	409a      	lsls	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a4:	e022      	b.n	80023ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	2207      	movs	r2, #7
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6919      	ldr	r1, [r3, #16]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	4603      	mov	r3, r0
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4403      	add	r3, r0
 80023e2:	409a      	lsls	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d824      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b05      	subs	r3, #5
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b05      	subs	r3, #5
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	635a      	str	r2, [r3, #52]	; 0x34
 800243c:	e04c      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d824      	bhi.n	8002490 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b23      	subs	r3, #35	; 0x23
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b23      	subs	r3, #35	; 0x23
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	e023      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b41      	subs	r3, #65	; 0x41
 80024a2:	221f      	movs	r2, #31
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43da      	mvns	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	400a      	ands	r2, r1
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	; 0x41
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_ADC_ConfigChannel+0x29c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1f4>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80024f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_ADC_ConfigChannel+0x29c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10f      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x21e>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b12      	cmp	r3, #18
 8002508:	d10b      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002510:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002514:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800251c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002520:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1e      	ldr	r2, [pc, #120]	; (80025a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d12b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x280>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_ADC_ConfigChannel+0x298>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d003      	beq.n	800253e <HAL_ADC_ConfigChannel+0x23a>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b11      	cmp	r3, #17
 800253c:	d122      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002544:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002548:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002554:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_ADC_ConfigChannel+0x298>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d111      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0c9a      	lsrs	r2, r3, #18
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002576:	e002      	b.n	800257e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	10000012 	.word	0x10000012
 80025a0:	40012000 	.word	0x40012000
 80025a4:	40012300 	.word	0x40012300
 80025a8:	20000000 	.word	0x20000000
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025b8:	4b78      	ldr	r3, [pc, #480]	; (800279c <ADC_Init+0x1ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a77      	ldr	r2, [pc, #476]	; (800279c <ADC_Init+0x1ec>)
 80025be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025c4:	4b75      	ldr	r3, [pc, #468]	; (800279c <ADC_Init+0x1ec>)
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4973      	ldr	r1, [pc, #460]	; (800279c <ADC_Init+0x1ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <ADC_Init+0x1f0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e00f      	b.n	80026aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0202 	bic.w	r2, r2, #2
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	3b01      	subs	r3, #1
 8002704:	035a      	lsls	r2, r3, #13
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e007      	b.n	8002720 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	3b01      	subs	r3, #1
 800273c:	051a      	lsls	r2, r3, #20
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002762:	025a      	lsls	r2, r3, #9
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	029a      	lsls	r2, r3, #10
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40012300 	.word	0x40012300
 80027a0:	0f000001 	.word	0x0f000001

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	05fa0000 	.word	0x05fa0000

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fc22 	bl	800221c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fc09 	bl	800221c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f9e9 	bl	8002ea4 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9a0 	bl	8002e38 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b30:	4b8e      	ldr	r3, [pc, #568]	; (8002d6c <HAL_DMA_IRQHandler+0x248>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8e      	ldr	r2, [pc, #568]	; (8002d70 <HAL_DMA_IRQHandler+0x24c>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0a9b      	lsrs	r3, r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2208      	movs	r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01a      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2204      	movs	r2, #4
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2204      	movs	r2, #4
 8002bea:	409a      	lsls	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f043 0204 	orr.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2210      	movs	r2, #16
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d043      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03c      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	2210      	movs	r2, #16
 8002c20:	409a      	lsls	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d024      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
 8002c52:	e01f      	b.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e016      	b.n	8002c94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0208 	bic.w	r2, r2, #8
 8002c82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2220      	movs	r2, #32
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 808f 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8087 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2220      	movs	r2, #32
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d136      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0216 	bic.w	r2, r2, #22
 8002cdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x1da>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0208 	bic.w	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	223f      	movs	r2, #63	; 0x3f
 8002d14:	409a      	lsls	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07e      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
        }
        return;
 8002d3a:	e079      	b.n	8002e30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
 8002d68:	e02c      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e01e      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d032      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d022      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2205      	movs	r2, #5
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d307      	bcc.n	8002e0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f2      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x2cc>
 8002e0a:	e000      	b.n	8002e0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
 8002e2e:	e000      	b.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e30:	bf00      	nop
    }
  }
}
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3b10      	subs	r3, #16
 8002e48:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <DMA_CalcBaseAndBitshift+0x60>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <DMA_CalcBaseAndBitshift+0x64>)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d908      	bls.n	8002e78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	1d1a      	adds	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58
 8002e76:	e006      	b.n	8002e86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	aaaaaaab 	.word	0xaaaaaaab
 8002e9c:	08015d54 	.word	0x08015d54
 8002ea0:	fffffc00 	.word	0xfffffc00

08002ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11f      	bne.n	8002efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d856      	bhi.n	8002f72 <DMA_CheckFifoParam+0xce>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x28>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002eef 	.word	0x08002eef
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002f73 	.word	0x08002f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d046      	beq.n	8002f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e043      	b.n	8002f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef6:	d140      	bne.n	8002f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efc:	e03d      	b.n	8002f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	d121      	bne.n	8002f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d837      	bhi.n	8002f7e <DMA_CheckFifoParam+0xda>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <DMA_CheckFifoParam+0x70>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f2b 	.word	0x08002f2b
 8002f1c:	08002f25 	.word	0x08002f25
 8002f20:	08002f3d 	.word	0x08002f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e030      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d025      	beq.n	8002f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3a:	e022      	b.n	8002f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f44:	d11f      	bne.n	8002f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f4a:	e01c      	b.n	8002f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d903      	bls.n	8002f5a <DMA_CheckFifoParam+0xb6>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d003      	beq.n	8002f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f58:	e018      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5e:	e015      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f70:	e00b      	b.n	8002f8a <DMA_CheckFifoParam+0xe6>
      break;
 8002f72:	bf00      	nop
 8002f74:	e00a      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f76:	bf00      	nop
 8002f78:	e008      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e006      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e175      	b.n	80032a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f040 8164 	bne.w	80032a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d005      	beq.n	8002ff2 <HAL_GPIO_Init+0x56>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d130      	bne.n	8003054 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 0201 	and.w	r2, r3, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b03      	cmp	r3, #3
 800305e:	d017      	beq.n	8003090 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d123      	bne.n	80030e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80be 	beq.w	80032a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_GPIO_Init+0x324>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800313e:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_GPIO_Init+0x328>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_GPIO_Init+0x32c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d037      	beq.n	80031da <HAL_GPIO_Init+0x23e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_GPIO_Init+0x330>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_GPIO_Init+0x23a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <HAL_GPIO_Init+0x236>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a55      	ldr	r2, [pc, #340]	; (80032d4 <HAL_GPIO_Init+0x338>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x232>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_GPIO_Init+0x33c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x22e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x340>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x22a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_GPIO_Init+0x344>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a51      	ldr	r2, [pc, #324]	; (80032e4 <HAL_GPIO_Init+0x348>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x222>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <HAL_GPIO_Init+0x34c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x21e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <HAL_GPIO_Init+0x350>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x21a>
 80031b2:	2309      	movs	r3, #9
 80031b4:	e012      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031b6:	230a      	movs	r3, #10
 80031b8:	e010      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e00e      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031da:	2300      	movs	r3, #0
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031ec:	4935      	ldr	r1, [pc, #212]	; (80032c4 <HAL_GPIO_Init+0x328>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_GPIO_Init+0x354>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f ae86 	bls.w	8002fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40021400 	.word	0x40021400
 80032e0:	40021800 	.word	0x40021800
 80032e4:	40021c00 	.word	0x40021c00
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022400 	.word	0x40022400
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43d9      	mvns	r1, r3
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800338a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338c:	b08f      	sub	sp, #60	; 0x3c
 800338e:	af0a      	add	r7, sp, #40	; 0x28
 8003390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e054      	b.n	8003446 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f00f f886 	bl	80124c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2203      	movs	r2, #3
 80033c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f007 fae3 	bl	800a9a6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	687e      	ldr	r6, [r7, #4]
 80033e8:	466d      	mov	r5, sp
 80033ea:	f106 0410 	add.w	r4, r6, #16
 80033ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80033fe:	1d33      	adds	r3, r6, #4
 8003400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f007 f9c4 	bl	800a790 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f007 fada 	bl	800a9c8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	687e      	ldr	r6, [r7, #4]
 800341c:	466d      	mov	r5, sp
 800341e:	f106 0410 	add.w	r4, r6, #16
 8003422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800342e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003432:	1d33      	adds	r3, r6, #4
 8003434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	f008 fe16 	bl	800c068 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800344e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	b089      	sub	sp, #36	; 0x24
 8003452:	af04      	add	r7, sp, #16
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	461a      	mov	r2, r3
 800345c:	4603      	mov	r3, r0
 800345e:	70fb      	strb	r3, [r7, #3]
 8003460:	460b      	mov	r3, r1
 8003462:	70bb      	strb	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_HCD_HC_Init+0x28>
 8003472:	2302      	movs	r3, #2
 8003474:	e076      	b.n	8003564 <HAL_HCD_HC_Init+0x116>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	333d      	adds	r3, #61	; 0x3d
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	787a      	ldrb	r2, [r7, #1]
 80034a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3340      	adds	r3, #64	; 0x40
 80034b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3339      	adds	r3, #57	; 0x39
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	333f      	adds	r3, #63	; 0x3f
 80034d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	78ba      	ldrb	r2, [r7, #2]
 80034de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034e2:	b2d0      	uxtb	r0, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	333a      	adds	r3, #58	; 0x3a
 80034f0:	4602      	mov	r2, r0
 80034f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da09      	bge.n	8003510 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	333b      	adds	r3, #59	; 0x3b
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e008      	b.n	8003522 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	333b      	adds	r3, #59	; 0x3b
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	333c      	adds	r3, #60	; 0x3c
 8003530:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003534:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	787c      	ldrb	r4, [r7, #1]
 800353c:	78ba      	ldrb	r2, [r7, #2]
 800353e:	78f9      	ldrb	r1, [r7, #3]
 8003540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003542:	9302      	str	r3, [sp, #8]
 8003544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4623      	mov	r3, r4
 8003552:	f008 ff03 	bl	800c35c <USB_HC_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}

0800356c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_HCD_HC_Halt+0x1e>
 8003586:	2302      	movs	r3, #2
 8003588:	e00f      	b.n	80035aa <HAL_HCD_HC_Halt+0x3e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f009 f953 	bl	800c846 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	70fb      	strb	r3, [r7, #3]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70bb      	strb	r3, [r7, #2]
 80035ca:	4613      	mov	r3, r2
 80035cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	333b      	adds	r3, #59	; 0x3b
 80035dc:	78ba      	ldrb	r2, [r7, #2]
 80035de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	333f      	adds	r3, #63	; 0x3f
 80035ee:	787a      	ldrb	r2, [r7, #1]
 80035f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035f2:	7c3b      	ldrb	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d112      	bne.n	800361e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	3342      	adds	r3, #66	; 0x42
 8003606:	2203      	movs	r2, #3
 8003608:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	333d      	adds	r3, #61	; 0x3d
 8003618:	7f3a      	ldrb	r2, [r7, #28]
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e008      	b.n	8003630 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3342      	adds	r3, #66	; 0x42
 800362c:	2202      	movs	r2, #2
 800362e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b03      	cmp	r3, #3
 8003634:	f200 80c6 	bhi.w	80037c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003651 	.word	0x08003651
 8003644:	080037b1 	.word	0x080037b1
 8003648:	080036b5 	.word	0x080036b5
 800364c:	08003733 	.word	0x08003733
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003650:	7c3b      	ldrb	r3, [r7, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	f040 80b8 	bne.w	80037c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003658:	78bb      	ldrb	r3, [r7, #2]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 80b4 	bne.w	80037c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003660:	8b3b      	ldrh	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3355      	adds	r3, #85	; 0x55
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3355      	adds	r3, #85	; 0x55
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3342      	adds	r3, #66	; 0x42
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800369e:	e093      	b.n	80037c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3342      	adds	r3, #66	; 0x42
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e089      	b.n	80037c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036b4:	78bb      	ldrb	r3, [r7, #2]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11d      	bne.n	80036f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3355      	adds	r3, #85	; 0x55
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3342      	adds	r3, #66	; 0x42
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036e0:	e073      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3342      	adds	r3, #66	; 0x42
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]
      break;
 80036f4:	e069      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3354      	adds	r3, #84	; 0x54
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3342      	adds	r3, #66	; 0x42
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
      break;
 800371c:	e055      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3342      	adds	r3, #66	; 0x42
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
      break;
 8003730:	e04b      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003732:	78bb      	ldrb	r3, [r7, #2]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11d      	bne.n	8003774 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3355      	adds	r3, #85	; 0x55
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3342      	adds	r3, #66	; 0x42
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800375e:	e034      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3342      	adds	r3, #66	; 0x42
 800376e:	2202      	movs	r2, #2
 8003770:	701a      	strb	r2, [r3, #0]
      break;
 8003772:	e02a      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3354      	adds	r3, #84	; 0x54
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3342      	adds	r3, #66	; 0x42
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
      break;
 800379a:	e016      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3342      	adds	r3, #66	; 0x42
 80037aa:	2202      	movs	r2, #2
 80037ac:	701a      	strb	r2, [r3, #0]
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3342      	adds	r3, #66	; 0x42
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3344      	adds	r3, #68	; 0x44
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	8b3a      	ldrh	r2, [r7, #24]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	202c      	movs	r0, #44	; 0x2c
 80037e4:	fb00 f303 	mul.w	r3, r0, r3
 80037e8:	440b      	add	r3, r1
 80037ea:	334c      	adds	r3, #76	; 0x4c
 80037ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3360      	adds	r3, #96	; 0x60
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3350      	adds	r3, #80	; 0x50
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	3339      	adds	r3, #57	; 0x39
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	222c      	movs	r2, #44	; 0x2c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	3338      	adds	r3, #56	; 0x38
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	18d1      	adds	r1, r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	f008 fea6 	bl	800c5a0 <USB_HC_StartXfer>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f008 fb32 	bl	800bee0 <USB_GetMode>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	f040 80f6 	bne.w	8003a70 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f008 fa75 	bl	800bd78 <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80ec 	beq.w	8003a6e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f008 fa6c 	bl	800bd78 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038aa:	d104      	bne.n	80038b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f008 fa5c 	bl	800bd78 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ca:	d104      	bne.n	80038d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f008 fa4c 	bl	800bd78 <USB_ReadInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ea:	d104      	bne.n	80038f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f008 fa3c 	bl	800bd78 <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d103      	bne.n	8003912 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2202      	movs	r2, #2
 8003910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f008 fa2e 	bl	800bd78 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003926:	d11c      	bne.n	8003962 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003930:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003942:	2110      	movs	r1, #16
 8003944:	6938      	ldr	r0, [r7, #16]
 8003946:	f007 f9e9 	bl	800ad1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800394a:	6938      	ldr	r0, [r7, #16]
 800394c:	f007 fa1a 	bl	800ad84 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f008 fc3a 	bl	800c1d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f00e fe41 	bl	80125e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f008 fa06 	bl	800bd78 <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003972:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003976:	d102      	bne.n	800397e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f001 f9ce 	bl	8004d1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f008 f9f8 	bl	800bd78 <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d106      	bne.n	80039a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00e fe0a 	bl	80125ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f008 f9e7 	bl	800bd78 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d101      	bne.n	80039b8 <HAL_HCD_IRQHandler+0x158>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_HCD_IRQHandler+0x15a>
 80039b8:	2300      	movs	r3, #0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0210 	bic.w	r2, r2, #16
 80039cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 f8d1 	bl	8004b76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0210 	orr.w	r2, r2, #16
 80039e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f008 f9c5 	bl	800bd78 <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f8:	d13a      	bne.n	8003a70 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f008 ff10 	bl	800c824 <USB_HC_ReadInterrupt>
 8003a04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e025      	b.n	8003a58 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d018      	beq.n	8003a52 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d106      	bne.n	8003a46 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8ab 	bl	8003b9a <HCD_HC_IN_IRQHandler>
 8003a44:	e005      	b.n	8003a52 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fcc6 	bl	80043de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d3d4      	bcc.n	8003a0c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6a:	615a      	str	r2, [r3, #20]
 8003a6c:	e000      	b.n	8003a70 <HAL_HCD_IRQHandler+0x210>
      return;
 8003a6e:	bf00      	nop
    }
  }
}
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_HCD_Start+0x16>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e013      	b.n	8003ab4 <HAL_HCD_Start+0x3e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f008 fbfc 	bl	800c298 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f006 ff6d 	bl	800a984 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_HCD_Stop+0x16>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e00d      	b.n	8003aee <HAL_HCD_Stop+0x32>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 ffea 	bl	800cab8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f008 fb9e 	bl	800c244 <USB_ResetPort>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3360      	adds	r3, #96	; 0x60
 8003b2c:	781b      	ldrb	r3, [r3, #0]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	681b      	ldr	r3, [r3, #0]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f008 fbe2 	bl	800c338 <USB_GetCurrentFrame>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f008 fbbd 	bl	800c30a <USB_GetHostSpeed>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f008 f8ed 	bl	800bd9e <USB_ReadChInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d11a      	bne.n	8003c04 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2304      	movs	r3, #4
 8003bde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3361      	adds	r3, #97	; 0x61
 8003bee:	2207      	movs	r2, #7
 8003bf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f008 fe22 	bl	800c846 <USB_HC_Halt>
 8003c02:	e0a2      	b.n	8003d4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f008 f8c5 	bl	800bd9e <USB_ReadChInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d11b      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	2208      	movs	r2, #8
 8003c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f008 fdf8 	bl	800c846 <USB_HC_Halt>
 8003c56:	e078      	b.n	8003d4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f008 f89b 	bl	800bd9e <USB_ReadChInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11a      	bne.n	8003ca8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2308      	movs	r3, #8
 8003c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3361      	adds	r3, #97	; 0x61
 8003c92:	2206      	movs	r2, #6
 8003c94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f008 fdd0 	bl	800c846 <USB_HC_Halt>
 8003ca6:	e050      	b.n	8003d4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f008 f873 	bl	800bd9e <USB_ReadChInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d11b      	bne.n	8003cfc <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3361      	adds	r3, #97	; 0x61
 8003ce6:	2209      	movs	r2, #9
 8003ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f008 fda6 	bl	800c846 <USB_HC_Halt>
 8003cfa:	e026      	b.n	8003d4a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f008 f849 	bl	800bd9e <USB_ReadChInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d119      	bne.n	8003d4a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3361      	adds	r3, #97	; 0x61
 8003d36:	2207      	movs	r2, #7
 8003d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f008 fd7e 	bl	800c846 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f008 f822 	bl	800bd9e <USB_ReadChInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d112      	bne.n	8003d8c <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f008 fd68 	bl	800c846 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	461a      	mov	r2, r3
 8003d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d88:	6093      	str	r3, [r2, #8]
 8003d8a:	e325      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f008 f801 	bl	800bd9e <USB_ReadChInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 80e8 	bne.w	8003f78 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3348      	adds	r3, #72	; 0x48
 8003dd0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0159      	lsls	r1, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	440b      	add	r3, r1
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	202c      	movs	r0, #44	; 0x2c
 8003dec:	fb00 f303 	mul.w	r3, r0, r3
 8003df0:	440b      	add	r3, r1
 8003df2:	3350      	adds	r3, #80	; 0x50
 8003df4:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3361      	adds	r3, #97	; 0x61
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	335c      	adds	r3, #92	; 0x5c
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	461a      	mov	r2, r3
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	333f      	adds	r3, #63	; 0x3f
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	333f      	adds	r3, #63	; 0x3f
 8003e4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d111      	bne.n	8003e78 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f008 fcf1 	bl	800c846 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	461a      	mov	r2, r3
 8003e72:	2310      	movs	r3, #16
 8003e74:	6093      	str	r3, [r2, #8]
 8003e76:	e03a      	b.n	8003eee <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	333f      	adds	r3, #63	; 0x3f
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d009      	beq.n	8003ea0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	333f      	adds	r3, #63	; 0x3f
 8003e9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d126      	bne.n	8003eee <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ebe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3360      	adds	r3, #96	; 0x60
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	b2d9      	uxtb	r1, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	202c      	movs	r0, #44	; 0x2c
 8003edc:	fb00 f303 	mul.w	r3, r0, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3360      	adds	r3, #96	; 0x60
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f00e fb89 	bl	8012600 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d12b      	bne.n	8003f4e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	3348      	adds	r3, #72	; 0x48
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	202c      	movs	r0, #44	; 0x2c
 8003f0c:	fb00 f202 	mul.w	r2, r0, r2
 8003f10:	440a      	add	r2, r1
 8003f12:	3240      	adds	r2, #64	; 0x40
 8003f14:	8812      	ldrh	r2, [r2, #0]
 8003f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 825a 	beq.w	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3354      	adds	r3, #84	; 0x54
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f083 0301 	eor.w	r3, r3, #1
 8003f38:	b2d8      	uxtb	r0, r3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3354      	adds	r3, #84	; 0x54
 8003f48:	4602      	mov	r2, r0
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e244      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3354      	adds	r3, #84	; 0x54
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f083 0301 	eor.w	r3, r3, #1
 8003f62:	b2d8      	uxtb	r0, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3354      	adds	r3, #84	; 0x54
 8003f72:	4602      	mov	r2, r0
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e22f      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f007 ff0b 	bl	800bd9e <USB_ReadChInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d109      	bne.n	8003fa6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	6093      	str	r3, [r2, #8]
 8003fa4:	e218      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f007 fef4 	bl	800bd9e <USB_ReadChInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	f040 816b 	bne.w	8004298 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3361      	adds	r3, #97	; 0x61
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d112      	bne.n	800400e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3361      	adds	r3, #97	; 0x61
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3360      	adds	r3, #96	; 0x60
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e135      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3361      	adds	r3, #97	; 0x61
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d112      	bne.n	8004048 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3361      	adds	r3, #97	; 0x61
 8004030:	2202      	movs	r2, #2
 8004032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3360      	adds	r3, #96	; 0x60
 8004042:	2205      	movs	r2, #5
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e118      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3361      	adds	r3, #97	; 0x61
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b07      	cmp	r3, #7
 800405a:	d009      	beq.n	8004070 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3361      	adds	r3, #97	; 0x61
 800406a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800406c:	2b09      	cmp	r3, #9
 800406e:	d159      	bne.n	8004124 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3361      	adds	r3, #97	; 0x61
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	335c      	adds	r3, #92	; 0x5c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	202c      	movs	r0, #44	; 0x2c
 800409a:	fb00 f303 	mul.w	r3, r0, r3
 800409e:	440b      	add	r3, r1
 80040a0:	335c      	adds	r3, #92	; 0x5c
 80040a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	335c      	adds	r3, #92	; 0x5c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d912      	bls.n	80040de <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	335c      	adds	r3, #92	; 0x5c
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3360      	adds	r3, #96	; 0x60
 80040d8:	2204      	movs	r2, #4
 80040da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040dc:	e0cd      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	3360      	adds	r3, #96	; 0x60
 80040ec:	2202      	movs	r2, #2
 80040ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004106:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800410e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004122:	e0aa      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3361      	adds	r3, #97	; 0x61
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d109      	bne.n	800414c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3361      	adds	r3, #97	; 0x61
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e096      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3361      	adds	r3, #97	; 0x61
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d109      	bne.n	8004174 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3361      	adds	r3, #97	; 0x61
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e082      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3361      	adds	r3, #97	; 0x61
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d13f      	bne.n	8004208 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3361      	adds	r3, #97	; 0x61
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3360      	adds	r3, #96	; 0x60
 80041a8:	2202      	movs	r2, #2
 80041aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	333f      	adds	r3, #63	; 0x3f
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	333f      	adds	r3, #63	; 0x3f
 80041ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d152      	bne.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ea:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004200:	461a      	mov	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e038      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3361      	adds	r3, #97	; 0x61
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d123      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3361      	adds	r3, #97	; 0x61
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	335c      	adds	r3, #92	; 0x5c
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	202c      	movs	r0, #44	; 0x2c
 8004246:	fb00 f303 	mul.w	r3, r0, r3
 800424a:	440b      	add	r3, r1
 800424c:	335c      	adds	r3, #92	; 0x5c
 800424e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3360      	adds	r3, #96	; 0x60
 800425e:	2204      	movs	r2, #4
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e00a      	b.n	800427a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3361      	adds	r3, #97	; 0x61
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f000 80ae 	beq.w	80043d6 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	b2d9      	uxtb	r1, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	202c      	movs	r0, #44	; 0x2c
 8004284:	fb00 f303 	mul.w	r3, r0, r3
 8004288:	4413      	add	r3, r2
 800428a:	3360      	adds	r3, #96	; 0x60
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f00e f9b5 	bl	8012600 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004296:	e09f      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 fd7b 	bl	800bd9e <USB_ReadChInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d123      	bne.n	80042fa <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3361      	adds	r3, #97	; 0x61
 80042d2:	2205      	movs	r2, #5
 80042d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	335c      	adds	r3, #92	; 0x5c
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f008 faa7 	bl	800c846 <USB_HC_Halt>
 80042f8:	e06e      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f007 fd4a 	bl	800bd9e <USB_ReadChInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d161      	bne.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	333f      	adds	r3, #63	; 0x3f
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d11a      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	335c      	adds	r3, #92	; 0x5c
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	3361      	adds	r3, #97	; 0x61
 8004348:	2204      	movs	r2, #4
 800434a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f008 fa75 	bl	800c846 <USB_HC_Halt>
 800435c:	e031      	b.n	80043c2 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	333f      	adds	r3, #63	; 0x3f
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	333f      	adds	r3, #63	; 0x3f
 8004380:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004382:	2b02      	cmp	r3, #2
 8004384:	d11d      	bne.n	80043c2 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	335c      	adds	r3, #92	; 0x5c
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d110      	bne.n	80043c2 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3361      	adds	r3, #97	; 0x61
 80043ae:	2204      	movs	r2, #4
 80043b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f008 fa42 	bl	800c846 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	461a      	mov	r2, r3
 80043d0:	2310      	movs	r3, #16
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	e000      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80043d6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f007 fccb 	bl	800bd9e <USB_ReadChInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d11a      	bne.n	8004448 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	461a      	mov	r2, r3
 8004420:	2304      	movs	r3, #4
 8004422:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3361      	adds	r3, #97	; 0x61
 8004432:	2207      	movs	r2, #7
 8004434:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f008 fa00 	bl	800c846 <USB_HC_Halt>
 8004446:	e393      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f007 fca3 	bl	800bd9e <USB_ReadChInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d137      	bne.n	80044d2 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2320      	movs	r3, #32
 8004472:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	333d      	adds	r3, #61	; 0x3d
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 8373 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	333d      	adds	r3, #61	; 0x3d
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3360      	adds	r3, #96	; 0x60
 80044aa:	2202      	movs	r2, #2
 80044ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	3361      	adds	r3, #97	; 0x61
 80044bc:	2203      	movs	r2, #3
 80044be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f008 f9bb 	bl	800c846 <USB_HC_Halt>
 80044d0:	e34e      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f007 fc5e 	bl	800bd9e <USB_ReadChInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ec:	d112      	bne.n	8004514 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fa:	461a      	mov	r2, r3
 80044fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004500:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f008 f99a 	bl	800c846 <USB_HC_Halt>
 8004512:	e32d      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f007 fc3d 	bl	800bd9e <USB_ReadChInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d142      	bne.n	80045b4 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	335c      	adds	r3, #92	; 0x5c
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f007 fc27 	bl	800bd9e <USB_ReadChInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d111      	bne.n	800457e <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	212c      	movs	r1, #44	; 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	333d      	adds	r3, #61	; 0x3d
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	461a      	mov	r2, r3
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	2301      	movs	r3, #1
 800458e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3361      	adds	r3, #97	; 0x61
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f008 f94a 	bl	800c846 <USB_HC_Halt>
 80045b2:	e2dd      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f007 fbed 	bl	800bd9e <USB_ReadChInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d12c      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3361      	adds	r3, #97	; 0x61
 80045dc:	2205      	movs	r2, #5
 80045de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	333d      	adds	r3, #61	; 0x3d
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	212c      	movs	r1, #44	; 0x2c
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	4413      	add	r3, r2
 80045fe:	335c      	adds	r3, #92	; 0x5c
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f008 f919 	bl	800c846 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	2340      	movs	r3, #64	; 0x40
 8004624:	6093      	str	r3, [r2, #8]
 8004626:	e2a3      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f007 fbb3 	bl	800bd9e <USB_ReadChInterrupts>
 8004638:	4603      	mov	r3, r0
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11a      	bne.n	8004678 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2308      	movs	r3, #8
 8004652:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3361      	adds	r3, #97	; 0x61
 8004662:	2206      	movs	r2, #6
 8004664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f008 f8e8 	bl	800c846 <USB_HC_Halt>
 8004676:	e27b      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f007 fb8b 	bl	800bd9e <USB_ReadChInterrupts>
 8004688:	4603      	mov	r3, r0
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b10      	cmp	r3, #16
 8004690:	d140      	bne.n	8004714 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	335c      	adds	r3, #92	; 0x5c
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	212c      	movs	r1, #44	; 0x2c
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	3361      	adds	r3, #97	; 0x61
 80046b2:	2204      	movs	r2, #4
 80046b4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	333d      	adds	r3, #61	; 0x3d
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d112      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	333c      	adds	r3, #60	; 0x3c
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	333d      	adds	r3, #61	; 0x3d
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f008 f8a3 	bl	800c846 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470c:	461a      	mov	r2, r3
 800470e:	2310      	movs	r3, #16
 8004710:	6093      	str	r3, [r2, #8]
 8004712:	e22d      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f007 fb3d 	bl	800bd9e <USB_ReadChInterrupts>
 8004724:	4603      	mov	r3, r0
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d164      	bne.n	80047f8 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d111      	bne.n	800475a <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	3361      	adds	r3, #97	; 0x61
 8004744:	2207      	movs	r2, #7
 8004746:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f008 f877 	bl	800c846 <USB_HC_Halt>
 8004758:	e044      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	335c      	adds	r3, #92	; 0x5c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	202c      	movs	r0, #44	; 0x2c
 8004772:	fb00 f303 	mul.w	r3, r0, r3
 8004776:	440b      	add	r3, r1
 8004778:	335c      	adds	r3, #92	; 0x5c
 800477a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	335c      	adds	r3, #92	; 0x5c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d920      	bls.n	80047d2 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	335c      	adds	r3, #92	; 0x5c
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3360      	adds	r3, #96	; 0x60
 80047b0:	2204      	movs	r2, #4
 80047b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	b2d9      	uxtb	r1, r3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	202c      	movs	r0, #44	; 0x2c
 80047be:	fb00 f303 	mul.w	r3, r0, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f00d ff18 	bl	8012600 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047d0:	e008      	b.n	80047e4 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	3360      	adds	r3, #96	; 0x60
 80047e0:	2202      	movs	r2, #2
 80047e2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	6093      	str	r3, [r2, #8]
 80047f6:	e1bb      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f007 facb 	bl	800bd9e <USB_ReadChInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d11b      	bne.n	800484c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3361      	adds	r3, #97	; 0x61
 8004822:	2209      	movs	r2, #9
 8004824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f008 f808 	bl	800c846 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	461a      	mov	r2, r3
 8004844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004848:	6093      	str	r3, [r2, #8]
 800484a:	e191      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f007 faa1 	bl	800bd9e <USB_ReadChInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	f040 8184 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	461a      	mov	r2, r3
 8004876:	2302      	movs	r3, #2
 8004878:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	3361      	adds	r3, #97	; 0x61
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	f040 8087 	bne.w	800499e <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3361      	adds	r3, #97	; 0x61
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3360      	adds	r3, #96	; 0x60
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	333f      	adds	r3, #63	; 0x3f
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d00a      	beq.n	80048de <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	333f      	adds	r3, #63	; 0x3f
 80048d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048d8:	2b03      	cmp	r3, #3
 80048da:	f040 8139 	bne.w	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d113      	bne.n	800490e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	3355      	adds	r3, #85	; 0x55
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f083 0301 	eor.w	r3, r3, #1
 80048fa:	b2d8      	uxtb	r0, r3
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3355      	adds	r3, #85	; 0x55
 800490a:	4602      	mov	r2, r0
 800490c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	f040 811c 	bne.w	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	334c      	adds	r3, #76	; 0x4c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8111 	beq.w	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	212c      	movs	r1, #44	; 0x2c
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	4413      	add	r3, r2
 800493a:	334c      	adds	r3, #76	; 0x4c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	202c      	movs	r0, #44	; 0x2c
 8004944:	fb00 f202 	mul.w	r2, r0, r2
 8004948:	440a      	add	r2, r1
 800494a:	3240      	adds	r2, #64	; 0x40
 800494c:	8812      	ldrh	r2, [r2, #0]
 800494e:	4413      	add	r3, r2
 8004950:	3b01      	subs	r3, #1
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	202c      	movs	r0, #44	; 0x2c
 8004958:	fb00 f202 	mul.w	r2, r0, r2
 800495c:	440a      	add	r2, r1
 800495e:	3240      	adds	r2, #64	; 0x40
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	fbb3 f3f2 	udiv	r3, r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80ee 	beq.w	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	3355      	adds	r3, #85	; 0x55
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2d8      	uxtb	r0, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	3355      	adds	r3, #85	; 0x55
 8004998:	4602      	mov	r2, r0
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e0d8      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3361      	adds	r3, #97	; 0x61
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d109      	bne.n	80049c6 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	3361      	adds	r3, #97	; 0x61
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e0c4      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3361      	adds	r3, #97	; 0x61
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d112      	bne.n	8004a00 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3361      	adds	r3, #97	; 0x61
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	212c      	movs	r1, #44	; 0x2c
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	3360      	adds	r3, #96	; 0x60
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	e0a7      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3361      	adds	r3, #97	; 0x61
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d112      	bne.n	8004a3a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3361      	adds	r3, #97	; 0x61
 8004a22:	2202      	movs	r2, #2
 8004a24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3360      	adds	r3, #96	; 0x60
 8004a34:	2202      	movs	r2, #2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e08a      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3361      	adds	r3, #97	; 0x61
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d112      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3361      	adds	r3, #97	; 0x61
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3360      	adds	r3, #96	; 0x60
 8004a6e:	2205      	movs	r2, #5
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e06d      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3361      	adds	r3, #97	; 0x61
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	d009      	beq.n	8004a9c <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3361      	adds	r3, #97	; 0x61
 8004a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a98:	2b09      	cmp	r3, #9
 8004a9a:	d168      	bne.n	8004b6e <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3361      	adds	r3, #97	; 0x61
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	335c      	adds	r3, #92	; 0x5c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	202c      	movs	r0, #44	; 0x2c
 8004ac6:	fb00 f303 	mul.w	r3, r0, r3
 8004aca:	440b      	add	r3, r1
 8004acc:	335c      	adds	r3, #92	; 0x5c
 8004ace:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	212c      	movs	r1, #44	; 0x2c
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	335c      	adds	r3, #92	; 0x5c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d912      	bls.n	8004b0a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	335c      	adds	r3, #92	; 0x5c
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3360      	adds	r3, #96	; 0x60
 8004b04:	2204      	movs	r2, #4
 8004b06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b08:	e021      	b.n	8004b4e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3360      	adds	r3, #96	; 0x60
 8004b18:	2202      	movs	r2, #2
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b32:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	461a      	mov	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b4e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	b2d9      	uxtb	r1, r3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	202c      	movs	r0, #44	; 0x2c
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3360      	adds	r3, #96	; 0x60
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f00d fd4a 	bl	8012600 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b6c:	e000      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8004b6e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08a      	sub	sp, #40	; 0x28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004baa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d004      	beq.n	8004bbc <HCD_RXQLVL_IRQHandler+0x46>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	f000 80a9 	beq.w	8004d0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bba:	e0aa      	b.n	8004d12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80a6 	beq.w	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	212c      	movs	r1, #44	; 0x2c
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3344      	adds	r3, #68	; 0x44
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809b 	beq.w	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3350      	adds	r3, #80	; 0x50
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	441a      	add	r2, r3
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	202c      	movs	r0, #44	; 0x2c
 8004bf4:	fb00 f303 	mul.w	r3, r0, r3
 8004bf8:	440b      	add	r3, r1
 8004bfa:	334c      	adds	r3, #76	; 0x4c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d87a      	bhi.n	8004cf8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3344      	adds	r3, #68	; 0x44
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f006 ff18 	bl	800ba50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	212c      	movs	r1, #44	; 0x2c
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3344      	adds	r3, #68	; 0x44
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	441a      	add	r2, r3
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	202c      	movs	r0, #44	; 0x2c
 8004c3a:	fb00 f303 	mul.w	r3, r0, r3
 8004c3e:	440b      	add	r3, r1
 8004c40:	3344      	adds	r3, #68	; 0x44
 8004c42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3350      	adds	r3, #80	; 0x50
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	441a      	add	r2, r3
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	202c      	movs	r0, #44	; 0x2c
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	440b      	add	r3, r1
 8004c64:	3350      	adds	r3, #80	; 0x50
 8004c66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	0cdb      	lsrs	r3, r3, #19
 8004c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3340      	adds	r3, #64	; 0x40
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d13c      	bne.n	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d039      	beq.n	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3354      	adds	r3, #84	; 0x54
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f083 0301 	eor.w	r3, r3, #1
 8004ce2:	b2d8      	uxtb	r0, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3354      	adds	r3, #84	; 0x54
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	701a      	strb	r2, [r3, #0]
      break;
 8004cf6:	e00b      	b.n	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	3360      	adds	r3, #96	; 0x60
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e001      	b.n	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d10:	bf00      	nop
  }
}
 8004d12:	bf00      	nop
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d10b      	bne.n	8004d6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f00d fc33 	bl	80125c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d132      	bne.n	8004dda <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f043 0308 	orr.w	r3, r3, #8
 8004d7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d126      	bne.n	8004dd4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d113      	bne.n	8004db6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d98:	d106      	bne.n	8004da8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2102      	movs	r1, #2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f007 fa15 	bl	800c1d0 <USB_InitFSLSPClkSel>
 8004da6:	e011      	b.n	8004dcc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f007 fa0e 	bl	800c1d0 <USB_InitFSLSPClkSel>
 8004db4:	e00a      	b.n	8004dcc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d106      	bne.n	8004dcc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004dca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f00d fc25 	bl	801261c <HAL_HCD_PortEnabled_Callback>
 8004dd2:	e002      	b.n	8004dda <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f00d fc2f 	bl	8012638 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d103      	bne.n	8004dec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f043 0320 	orr.w	r3, r3, #32
 8004dea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6013      	str	r3, [r2, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e02:	b08f      	sub	sp, #60	; 0x3c
 8004e04:	af0a      	add	r7, sp, #40	; 0x28
 8004e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e116      	b.n	8005040 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f00c ff83 	bl	8011d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2203      	movs	r2, #3
 8004e36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f005 fda8 	bl	800a9a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	687e      	ldr	r6, [r7, #4]
 8004e5e:	466d      	mov	r5, sp
 8004e60:	f106 0410 	add.w	r4, r6, #16
 8004e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e70:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e74:	1d33      	adds	r3, r6, #4
 8004e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e78:	6838      	ldr	r0, [r7, #0]
 8004e7a:	f005 fc89 	bl	800a790 <USB_CoreInit>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0d7      	b.n	8005040 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 fd96 	bl	800a9c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e04a      	b.n	8004f38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	333d      	adds	r3, #61	; 0x3d
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	333c      	adds	r3, #60	; 0x3c
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	b298      	uxth	r0, r3
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3344      	adds	r3, #68	; 0x44
 8004ede:	4602      	mov	r2, r0
 8004ee0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3340      	adds	r3, #64	; 0x40
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3348      	adds	r3, #72	; 0x48
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	334c      	adds	r3, #76	; 0x4c
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3354      	adds	r3, #84	; 0x54
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3af      	bcc.n	8004ea2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
 8004f46:	e044      	b.n	8004fd2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3b5      	bcc.n	8004f48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	687e      	ldr	r6, [r7, #4]
 8004fe4:	466d      	mov	r5, sp
 8004fe6:	f106 0410 	add.w	r4, r6, #16
 8004fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ffa:	1d33      	adds	r3, r6, #4
 8004ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f005 fd2e 	bl	800aa60 <USB_DevInit>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e014      	b.n	8005040 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b01      	cmp	r3, #1
 800502c:	d102      	bne.n	8005034 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 f97a 	bl	8006328 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f006 fe7c 	bl	800bd36 <USB_DevDisconnect>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005048 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_PCD_Start+0x16>
 800505a:	2302      	movs	r3, #2
 800505c:	e012      	b.n	8005084 <HAL_PCD_Start+0x3c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f005 fc8a 	bl	800a984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f006 fe3d 	bl	800bcf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b08d      	sub	sp, #52	; 0x34
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f006 ff1c 	bl	800bee0 <USB_GetMode>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 84b7 	bne.w	8005a1e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f006 fe5f 	bl	800bd78 <USB_ReadInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 84ad 	beq.w	8005a1c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f006 fe4c 	bl	800bd78 <USB_ReadInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d107      	bne.n	80050fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f002 0202 	and.w	r2, r2, #2
 80050f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f006 fe3a 	bl	800bd78 <USB_ReadInterrupts>
 8005104:	4603      	mov	r3, r0
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d161      	bne.n	80051d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0210 	bic.w	r2, r2, #16
 800511c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3304      	adds	r3, #4
 800513c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	0c5b      	lsrs	r3, r3, #17
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	2b02      	cmp	r3, #2
 8005148:	d124      	bne.n	8005194 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d035      	beq.n	80051c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005164:	b29b      	uxth	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	6a38      	ldr	r0, [r7, #32]
 800516a:	f006 fc71 	bl	800ba50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517a:	441a      	add	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518c:	441a      	add	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
 8005192:	e016      	b.n	80051c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	0c5b      	lsrs	r3, r3, #17
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	2b06      	cmp	r3, #6
 800519e:	d110      	bne.n	80051c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051a6:	2208      	movs	r2, #8
 80051a8:	4619      	mov	r1, r3
 80051aa:	6a38      	ldr	r0, [r7, #32]
 80051ac:	f006 fc50 	bl	800ba50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051bc:	441a      	add	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0210 	orr.w	r2, r2, #16
 80051d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f006 fdce 	bl	800bd78 <USB_ReadInterrupts>
 80051dc:	4603      	mov	r3, r0
 80051de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051e6:	f040 80a7 	bne.w	8005338 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f006 fdf4 	bl	800bde0 <USB_ReadDevAllOutEpInterrupt>
 80051f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051fa:	e099      	b.n	8005330 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 808e 	beq.w	8005324 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f006 fe18 	bl	800be48 <USB_ReadDevOutEPInterrupt>
 8005218:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	2301      	movs	r3, #1
 8005234:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 feef 	bl	800601c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00c      	beq.n	8005262 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	2308      	movs	r3, #8
 8005258:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800525a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 ffc5 	bl	80061ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	2310      	movs	r3, #16
 800527c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d030      	beq.n	80052ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d109      	bne.n	80052a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	4613      	mov	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3304      	adds	r3, #4
 80052bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	78db      	ldrb	r3, [r3, #3]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d108      	bne.n	80052d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f00c fe4a 	bl	8011f6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2302      	movs	r3, #2
 80052e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	2320      	movs	r3, #32
 8005304:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	461a      	mov	r2, r3
 800531e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005322:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	3301      	adds	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	f47f af62 	bne.w	80051fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f006 fd1b 	bl	800bd78 <USB_ReadInterrupts>
 8005342:	4603      	mov	r3, r0
 8005344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534c:	f040 80db 	bne.w	8005506 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f006 fd5d 	bl	800be14 <USB_ReadDevAllInEpInterrupt>
 800535a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005360:	e0cd      	b.n	80054fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80c2 	beq.w	80054f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f006 fd83 	bl	800be84 <USB_ReadDevInEPInterrupt>
 800537e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d057      	beq.n	800543a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	2201      	movs	r2, #1
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69f9      	ldr	r1, [r7, #28]
 80053a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053aa:	4013      	ands	r3, r2
 80053ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	2301      	movs	r3, #1
 80053be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d132      	bne.n	800542e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	334c      	adds	r3, #76	; 0x4c
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4403      	add	r3, r0
 80053e8:	3348      	adds	r3, #72	; 0x48
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4419      	add	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4403      	add	r3, r0
 80053fc:	334c      	adds	r3, #76	; 0x4c
 80053fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d113      	bne.n	800542e <HAL_PCD_IRQHandler+0x3a2>
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	3354      	adds	r3, #84	; 0x54
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d108      	bne.n	800542e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005426:	461a      	mov	r2, r3
 8005428:	2101      	movs	r1, #1
 800542a:	f006 fd8b 	bl	800bf44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f00c fd14 	bl	8011e62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	461a      	mov	r2, r3
 8005452:	2308      	movs	r3, #8
 8005454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	2310      	movs	r3, #16
 8005470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d023      	beq.n	80054e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549a:	6a38      	ldr	r0, [r7, #32]
 800549c:	f005 fc3e 	bl	800ad1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	4613      	mov	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	3338      	adds	r3, #56	; 0x38
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	3304      	adds	r3, #4
 80054b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	78db      	ldrb	r3, [r3, #3]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d108      	bne.n	80054ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f00c fd61 	bl	8011f90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	2302      	movs	r3, #2
 80054de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fd08 	bl	8005f02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	3301      	adds	r3, #1
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af2e 	bne.w	8005362 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f006 fc34 	bl	800bd78 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551a:	d122      	bne.n	8005562 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005536:	2b01      	cmp	r3, #1
 8005538:	d108      	bne.n	800554c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f00c fee1 	bl	801230c <HAL_PCDEx_LPM_Callback>
 800554a:	e002      	b.n	8005552 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f00c fcff 	bl	8011f50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f006 fc06 	bl	800bd78 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005576:	d112      	bne.n	800559e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d102      	bne.n	800558e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f00c fcbb 	bl	8011f04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800559c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f006 fbe8 	bl	800bd78 <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b2:	d121      	bne.n	80055f8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80055c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d111      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	f003 020f 	and.w	r2, r3, #15
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80055e8:	2101      	movs	r1, #1
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f00c fe8e 	bl	801230c <HAL_PCDEx_LPM_Callback>
 80055f0:	e002      	b.n	80055f8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f00c fc86 	bl	8011f04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f006 fbbb 	bl	800bd78 <USB_ReadInterrupts>
 8005602:	4603      	mov	r3, r0
 8005604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	f040 80b7 	bne.w	800577e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2110      	movs	r1, #16
 800562a:	4618      	mov	r0, r3
 800562c:	f005 fb76 	bl	800ad1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005634:	e046      	b.n	80056c4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	461a      	mov	r2, r3
 8005644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005648:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005668:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800567c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005698:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800569c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	3301      	adds	r3, #1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3b3      	bcc.n	8005636 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80056e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f043 030b 	orr.w	r3, r3, #11
 80056fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005710:	f043 030b 	orr.w	r3, r3, #11
 8005714:	6453      	str	r3, [r2, #68]	; 0x44
 8005716:	e015      	b.n	8005744 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	4619      	mov	r1, r3
 8005728:	f242 032b 	movw	r3, #8235	; 0x202b
 800572c:	4313      	orrs	r3, r2
 800572e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f043 030b 	orr.w	r3, r3, #11
 8005742:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005752:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005756:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005768:	461a      	mov	r2, r3
 800576a:	f006 fbeb 	bl	800bf44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695a      	ldr	r2, [r3, #20]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800577c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f006 faf8 	bl	800bd78 <USB_ReadInterrupts>
 8005788:	4603      	mov	r3, r0
 800578a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	d124      	bne.n	80057de <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f006 fbaf 	bl	800befc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f005 fb37 	bl	800ae16 <USB_GetDevSpeed>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681c      	ldr	r4, [r3, #0]
 80057b4:	f001 fad0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 80057b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	4620      	mov	r0, r4
 80057c4:	f005 f83c 	bl	800a840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f00c fb72 	bl	8011eb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80057dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f006 fac8 	bl	800bd78 <USB_ReadInterrupts>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d10a      	bne.n	8005808 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f00c fb4f 	bl	8011e96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f002 0208 	and.w	r2, r2, #8
 8005806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f006 fab3 	bl	800bd78 <USB_ReadInterrupts>
 8005812:	4603      	mov	r3, r0
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d122      	bne.n	8005862 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
 800582c:	e014      	b.n	8005858 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d105      	bne.n	8005852 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	b2db      	uxtb	r3, r3
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb27 	bl	8005ea0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	3301      	adds	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	429a      	cmp	r2, r3
 8005860:	d3e5      	bcc.n	800582e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f006 fa86 	bl	800bd78 <USB_ReadInterrupts>
 800586c:	4603      	mov	r3, r0
 800586e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d13b      	bne.n	80058f0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005878:	2301      	movs	r3, #1
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	e02b      	b.n	80058d6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3340      	adds	r3, #64	; 0x40
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d115      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80058a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da12      	bge.n	80058d0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	333f      	adds	r3, #63	; 0x3f
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fae8 	bl	8005ea0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058dc:	429a      	cmp	r2, r3
 80058de:	d3ce      	bcc.n	800587e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f006 fa3f 	bl	800bd78 <USB_ReadInterrupts>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005904:	d155      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005906:	2301      	movs	r3, #1
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	e045      	b.n	8005998 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d12e      	bne.n	8005992 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005934:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	da2b      	bge.n	8005992 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005946:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800594a:	429a      	cmp	r2, r3
 800594c:	d121      	bne.n	8005992 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800598e:	6053      	str	r3, [r2, #4]
            break;
 8005990:	e007      	b.n	80059a2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	3301      	adds	r3, #1
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3b4      	bcc.n	800590c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80059b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f006 f9de 	bl	800bd78 <USB_ReadInterrupts>
 80059bc:	4603      	mov	r3, r0
 80059be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d10a      	bne.n	80059de <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f00c faf3 	bl	8011fb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f006 f9c8 	bl	800bd78 <USB_ReadInterrupts>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d115      	bne.n	8005a1e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f00c fae3 	bl	8011fd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	e000      	b.n	8005a1e <HAL_PCD_IRQHandler+0x992>
      return;
 8005a1c:	bf00      	nop
    }
  }
}
 8005a1e:	3734      	adds	r7, #52	; 0x34
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}

08005a24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_PCD_SetAddress+0x1a>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e013      	b.n	8005a66 <HAL_PCD_SetAddress+0x42>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f006 f926 	bl	800bca8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	70fb      	strb	r3, [r7, #3]
 8005a80:	460b      	mov	r3, r1
 8005a82:	803b      	strh	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da0f      	bge.n	8005ab4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 020f 	and.w	r2, r3, #15
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3338      	adds	r3, #56	; 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	705a      	strb	r2, [r3, #1]
 8005ab2:	e00f      	b.n	8005ad4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	4613      	mov	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	3304      	adds	r3, #4
 8005acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ae0:	883a      	ldrh	r2, [r7, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	78ba      	ldrb	r2, [r7, #2]
 8005aea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005afe:	78bb      	ldrb	r3, [r7, #2]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d102      	bne.n	8005b0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_PCD_EP_Open+0xaa>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e00e      	b.n	8005b36 <HAL_PCD_EP_Open+0xc8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f005 f99a 	bl	800ae60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005b34:	7afb      	ldrb	r3, [r7, #11]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da0f      	bge.n	8005b72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3338      	adds	r3, #56	; 0x38
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	705a      	strb	r2, [r3, #1]
 8005b70:	e00f      	b.n	8005b92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	3304      	adds	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_PCD_EP_Close+0x6e>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e00e      	b.n	8005bca <HAL_PCD_EP_Close+0x8c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f005 f9d8 	bl	800af70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	460b      	mov	r3, r1
 8005be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c14:	7afb      	ldrb	r3, [r7, #11]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d102      	bne.n	8005c2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6979      	ldr	r1, [r7, #20]
 8005c46:	f005 fcbf 	bl	800b5c8 <USB_EP0StartXfer>
 8005c4a:	e008      	b.n	8005c5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	f005 fa65 	bl	800b128 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	f003 020f 	and.w	r2, r3, #15
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	f003 020f 	and.w	r2, r3, #15
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	3338      	adds	r3, #56	; 0x38
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	f005 fc5d 	bl	800b5c8 <USB_EP0StartXfer>
 8005d0e:	e008      	b.n	8005d22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	f005 fa03 	bl	800b128 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d901      	bls.n	8005d4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e050      	b.n	8005dec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da0f      	bge.n	8005d72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	3338      	adds	r3, #56	; 0x38
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	3304      	adds	r3, #4
 8005d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]
 8005d70:	e00d      	b.n	8005d8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_PCD_EP_SetStall+0x82>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e01e      	b.n	8005dec <HAL_PCD_EP_SetStall+0xc0>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f005 fe9f 	bl	800bb00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	b2d9      	uxtb	r1, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f006 f8b1 	bl	800bf44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d901      	bls.n	8005e12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e042      	b.n	8005e98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da0f      	bge.n	8005e3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	3338      	adds	r3, #56	; 0x38
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3304      	adds	r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	705a      	strb	r2, [r3, #1]
 8005e38:	e00f      	b.n	8005e5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_PCD_EP_ClrStall+0x86>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e00e      	b.n	8005e98 <HAL_PCD_EP_ClrStall+0xa4>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f005 fea7 	bl	800bbdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da0c      	bge.n	8005ece <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e00c      	b.n	8005ee8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f005 fcc6 	bl	800b880 <USB_EPStopXfer>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b08a      	sub	sp, #40	; 0x28
 8005f06:	af02      	add	r7, sp, #8
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	3338      	adds	r3, #56	; 0x38
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	3304      	adds	r3, #4
 8005f28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d901      	bls.n	8005f3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e06c      	b.n	8006014 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d902      	bls.n	8005f56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5e:	e02b      	b.n	8005fb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d902      	bls.n	8005f7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	3303      	adds	r3, #3
 8005f80:	089b      	lsrs	r3, r3, #2
 8005f82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6919      	ldr	r1, [r3, #16]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f005 fd1a 	bl	800b9d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	441a      	add	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d809      	bhi.n	8005fe2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d203      	bcs.n	8005fe2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1be      	bne.n	8005f60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d811      	bhi.n	8006012 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	43db      	mvns	r3, r3
 8006008:	6939      	ldr	r1, [r7, #16]
 800600a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600e:	4013      	ands	r3, r2
 8006010:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	333c      	adds	r3, #60	; 0x3c
 8006034:	3304      	adds	r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d17b      	bne.n	800614a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4a61      	ldr	r2, [pc, #388]	; (80061e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	f240 80b9 	bls.w	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80b3 	beq.w	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006084:	6093      	str	r3, [r2, #8]
 8006086:	e0a7      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	461a      	mov	r2, r3
 80060a0:	2320      	movs	r3, #32
 80060a2:	6093      	str	r3, [r2, #8]
 80060a4:	e098      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 8093 	bne.w	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4a4b      	ldr	r2, [pc, #300]	; (80061e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d90f      	bls.n	80060da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	461a      	mov	r2, r3
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	e07e      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	3304      	adds	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	0159      	lsls	r1, r3, #5
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	440b      	add	r3, r1
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d114      	bne.n	800613c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006124:	461a      	mov	r2, r3
 8006126:	2101      	movs	r1, #1
 8006128:	f005 ff0c 	bl	800bf44 <USB_EP0_OutStart>
 800612c:	e006      	b.n	800613c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	441a      	add	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f00b fe72 	bl	8011e2c <HAL_PCD_DataOutStageCallback>
 8006148:	e046      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d124      	bne.n	800619c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	461a      	mov	r2, r3
 800616a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616e:	6093      	str	r3, [r2, #8]
 8006170:	e032      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	461a      	mov	r2, r3
 800618a:	2320      	movs	r3, #32
 800618c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f00b fe49 	bl	8011e2c <HAL_PCD_DataOutStageCallback>
 800619a:	e01d      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d114      	bne.n	80061cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d108      	bne.n	80061cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061c4:	461a      	mov	r2, r3
 80061c6:	2100      	movs	r1, #0
 80061c8:	f005 febc 	bl	800bf44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f00b fe2a 	bl	8011e2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	4f54300a 	.word	0x4f54300a
 80061e8:	4f54310a 	.word	0x4f54310a

080061ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	333c      	adds	r3, #60	; 0x3c
 8006204:	3304      	adds	r3, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a15      	ldr	r2, [pc, #84]	; (8006274 <PCD_EP_OutSetupPacket_int+0x88>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d90e      	bls.n	8006240 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f00b fde1 	bl	8011e08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <PCD_EP_OutSetupPacket_int+0x88>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d90c      	bls.n	8006268 <PCD_EP_OutSetupPacket_int+0x7c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d108      	bne.n	8006268 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006260:	461a      	mov	r2, r3
 8006262:	2101      	movs	r1, #1
 8006264:	f005 fe6e 	bl	800bf44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	4f54300a 	.word	0x4f54300a

08006278 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
 8006284:	4613      	mov	r3, r2
 8006286:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006296:	883b      	ldrh	r3, [r7, #0]
 8006298:	0419      	lsls	r1, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	629a      	str	r2, [r3, #40]	; 0x28
 80062a4:	e028      	b.n	80062f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e00d      	b.n	80062d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	3301      	adds	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	3b01      	subs	r3, #1
 80062dc:	429a      	cmp	r2, r3
 80062de:	d3ec      	bcc.n	80062ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062e0:	883b      	ldrh	r3, [r7, #0]
 80062e2:	0418      	lsls	r0, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6819      	ldr	r1, [r3, #0]
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4302      	orrs	r2, r0
 80062f0:	3340      	adds	r3, #64	; 0x40
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_PCDEx_ActivateLPM+0x44>)
 8006358:	4313      	orrs	r3, r2
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	10000003 	.word	0x10000003

08006370 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a04      	ldr	r2, [pc, #16]	; (800638c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800637a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637e:	6013      	str	r3, [r2, #0]
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40007000 	.word	0x40007000

08006390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <HAL_PWREx_EnableOverDrive+0x98>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a22      	ldr	r2, [pc, #136]	; (8006428 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063b2:	4b1e      	ldr	r3, [pc, #120]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1d      	ldr	r2, [pc, #116]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063be:	f7fb ff2d 	bl	800221c <HAL_GetTick>
 80063c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063c4:	e009      	b.n	80063da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063c6:	f7fb ff29 	bl	800221c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d4:	d901      	bls.n	80063da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e022      	b.n	8006420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e6:	d1ee      	bne.n	80063c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a0f      	ldr	r2, [pc, #60]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f4:	f7fb ff12 	bl	800221c <HAL_GetTick>
 80063f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063fa:	e009      	b.n	8006410 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063fc:	f7fb ff0e 	bl	800221c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800640a:	d901      	bls.n	8006410 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e007      	b.n	8006420 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006410:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641c:	d1ee      	bne.n	80063fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40023800 	.word	0x40023800
 800642c:	40007000 	.word	0x40007000

08006430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006438:	2300      	movs	r3, #0
 800643a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e291      	b.n	800696a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 8087 	beq.w	8006562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006454:	4b96      	ldr	r3, [pc, #600]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b04      	cmp	r3, #4
 800645e:	d00c      	beq.n	800647a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006460:	4b93      	ldr	r3, [pc, #588]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	2b08      	cmp	r3, #8
 800646a:	d112      	bne.n	8006492 <HAL_RCC_OscConfig+0x62>
 800646c:	4b90      	ldr	r3, [pc, #576]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006478:	d10b      	bne.n	8006492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647a:	4b8d      	ldr	r3, [pc, #564]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d06c      	beq.n	8006560 <HAL_RCC_OscConfig+0x130>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d168      	bne.n	8006560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e26b      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649a:	d106      	bne.n	80064aa <HAL_RCC_OscConfig+0x7a>
 800649c:	4b84      	ldr	r3, [pc, #528]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a83      	ldr	r2, [pc, #524]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e02e      	b.n	8006508 <HAL_RCC_OscConfig+0xd8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <HAL_RCC_OscConfig+0x9c>
 80064b2:	4b7f      	ldr	r3, [pc, #508]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a7e      	ldr	r2, [pc, #504]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	4b7c      	ldr	r3, [pc, #496]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a7b      	ldr	r2, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e01d      	b.n	8006508 <HAL_RCC_OscConfig+0xd8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d4:	d10c      	bne.n	80064f0 <HAL_RCC_OscConfig+0xc0>
 80064d6:	4b76      	ldr	r3, [pc, #472]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a75      	ldr	r2, [pc, #468]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	4b73      	ldr	r3, [pc, #460]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a72      	ldr	r2, [pc, #456]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e00b      	b.n	8006508 <HAL_RCC_OscConfig+0xd8>
 80064f0:	4b6f      	ldr	r3, [pc, #444]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a6e      	ldr	r2, [pc, #440]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	4b6c      	ldr	r3, [pc, #432]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a6b      	ldr	r2, [pc, #428]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d013      	beq.n	8006538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fb fe84 	bl	800221c <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006518:	f7fb fe80 	bl	800221c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e21f      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652a:	4b61      	ldr	r3, [pc, #388]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0xe8>
 8006536:	e014      	b.n	8006562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fb fe70 	bl	800221c <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fb fe6c 	bl	800221c <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	; 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e20b      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006552:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x110>
 800655e:	e000      	b.n	8006562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d069      	beq.n	8006642 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800656e:	4b50      	ldr	r3, [pc, #320]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800657a:	4b4d      	ldr	r3, [pc, #308]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b08      	cmp	r3, #8
 8006584:	d11c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x190>
 8006586:	4b4a      	ldr	r3, [pc, #296]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d116      	bne.n	80065c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006592:	4b47      	ldr	r3, [pc, #284]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_RCC_OscConfig+0x17a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d001      	beq.n	80065aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e1df      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065aa:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	493d      	ldr	r1, [pc, #244]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065be:	e040      	b.n	8006642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d023      	beq.n	8006610 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c8:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a38      	ldr	r2, [pc, #224]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fb fe22 	bl	800221c <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065dc:	f7fb fe1e 	bl	800221c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e1bd      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ee:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fa:	4b2d      	ldr	r3, [pc, #180]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	4929      	ldr	r1, [pc, #164]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	e018      	b.n	8006642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006616:	f023 0301 	bic.w	r3, r3, #1
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb fdfe 	bl	800221c <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006624:	f7fb fdfa 	bl	800221c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e199      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d038      	beq.n	80066c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d019      	beq.n	800668a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006656:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fb fddb 	bl	800221c <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666a:	f7fb fdd7 	bl	800221c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e176      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x23a>
 8006688:	e01a      	b.n	80066c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 800668c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <HAL_RCC_OscConfig+0x280>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006696:	f7fb fdc1 	bl	800221c <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669e:	f7fb fdbd 	bl	800221c <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d903      	bls.n	80066b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e15c      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
 80066b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b4:	4b91      	ldr	r3, [pc, #580]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ee      	bne.n	800669e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80a4 	beq.w	8006816 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ce:	4b8b      	ldr	r3, [pc, #556]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	4a87      	ldr	r2, [pc, #540]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40
 80066e6:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f6:	4b82      	ldr	r3, [pc, #520]	; (8006900 <HAL_RCC_OscConfig+0x4d0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d118      	bne.n	8006734 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006702:	4b7f      	ldr	r3, [pc, #508]	; (8006900 <HAL_RCC_OscConfig+0x4d0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a7e      	ldr	r2, [pc, #504]	; (8006900 <HAL_RCC_OscConfig+0x4d0>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670e:	f7fb fd85 	bl	800221c <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fb fd81 	bl	800221c <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b64      	cmp	r3, #100	; 0x64
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e120      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006728:	4b75      	ldr	r3, [pc, #468]	; (8006900 <HAL_RCC_OscConfig+0x4d0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <HAL_RCC_OscConfig+0x31a>
 800673c:	4b6f      	ldr	r3, [pc, #444]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	4a6e      	ldr	r2, [pc, #440]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	; 0x70
 8006748:	e02d      	b.n	80067a6 <HAL_RCC_OscConfig+0x376>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x33c>
 8006752:	4b6a      	ldr	r3, [pc, #424]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a69      	ldr	r2, [pc, #420]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b67      	ldr	r3, [pc, #412]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a66      	ldr	r2, [pc, #408]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
 800676a:	e01c      	b.n	80067a6 <HAL_RCC_OscConfig+0x376>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b05      	cmp	r3, #5
 8006772:	d10c      	bne.n	800678e <HAL_RCC_OscConfig+0x35e>
 8006774:	4b61      	ldr	r3, [pc, #388]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	4a60      	ldr	r2, [pc, #384]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800677a:	f043 0304 	orr.w	r3, r3, #4
 800677e:	6713      	str	r3, [r2, #112]	; 0x70
 8006780:	4b5e      	ldr	r3, [pc, #376]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	4a5d      	ldr	r2, [pc, #372]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6713      	str	r3, [r2, #112]	; 0x70
 800678c:	e00b      	b.n	80067a6 <HAL_RCC_OscConfig+0x376>
 800678e:	4b5b      	ldr	r3, [pc, #364]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	4a5a      	ldr	r2, [pc, #360]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	6713      	str	r3, [r2, #112]	; 0x70
 800679a:	4b58      	ldr	r3, [pc, #352]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	4a57      	ldr	r2, [pc, #348]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	f023 0304 	bic.w	r3, r3, #4
 80067a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d015      	beq.n	80067da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ae:	f7fb fd35 	bl	800221c <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b4:	e00a      	b.n	80067cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b6:	f7fb fd31 	bl	800221c <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e0ce      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0ee      	beq.n	80067b6 <HAL_RCC_OscConfig+0x386>
 80067d8:	e014      	b.n	8006804 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067da:	f7fb fd1f 	bl	800221c <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fb fd1b 	bl	800221c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e0b8      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f8:	4b40      	ldr	r3, [pc, #256]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ee      	bne.n	80067e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800680a:	4b3c      	ldr	r3, [pc, #240]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a4 	beq.w	8006968 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b08      	cmp	r3, #8
 800682a:	d06b      	beq.n	8006904 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d149      	bne.n	80068c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006834:	4b31      	ldr	r3, [pc, #196]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a30      	ldr	r2, [pc, #192]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800683a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fb fcec 	bl	800221c <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006848:	f7fb fce8 	bl	800221c <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e087      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685a:	4b28      	ldr	r3, [pc, #160]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	3b01      	subs	r3, #1
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	4313      	orrs	r3, r2
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800688e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006892:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a18      	ldr	r2, [pc, #96]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 800689a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800689e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fb fcbc 	bl	800221c <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a8:	f7fb fcb8 	bl	800221c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e057      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x478>
 80068c6:	e04f      	b.n	8006968 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c8:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80068ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fb fca2 	bl	800221c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fb fc9e 	bl	800221c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e03d      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ee:	4b03      	ldr	r3, [pc, #12]	; (80068fc <HAL_RCC_OscConfig+0x4cc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x4ac>
 80068fa:	e035      	b.n	8006968 <HAL_RCC_OscConfig+0x538>
 80068fc:	40023800 	.word	0x40023800
 8006900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006904:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <HAL_RCC_OscConfig+0x544>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d028      	beq.n	8006964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d121      	bne.n	8006964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d11a      	bne.n	8006964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006934:	4013      	ands	r3, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800693a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800693c:	4293      	cmp	r3, r2
 800693e:	d111      	bne.n	8006964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	3b01      	subs	r3, #1
 800694e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d107      	bne.n	8006964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800

08006978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0d0      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006990:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d910      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	4b67      	ldr	r3, [pc, #412]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 020f 	bic.w	r2, r3, #15
 80069a6:	4965      	ldr	r1, [pc, #404]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b63      	ldr	r3, [pc, #396]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0b8      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d020      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069d8:	4b59      	ldr	r3, [pc, #356]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a58      	ldr	r2, [pc, #352]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f0:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a52      	ldr	r2, [pc, #328]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 80069f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fc:	4b50      	ldr	r3, [pc, #320]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	494d      	ldr	r1, [pc, #308]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d040      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	4b47      	ldr	r3, [pc, #284]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d115      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e07f      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a3a:	4b41      	ldr	r3, [pc, #260]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e073      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4a:	4b3d      	ldr	r3, [pc, #244]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e06b      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a5a:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f023 0203 	bic.w	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	4936      	ldr	r1, [pc, #216]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6c:	f7fb fbd6 	bl	800221c <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	e00a      	b.n	8006a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a74:	f7fb fbd2 	bl	800221c <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e053      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8a:	4b2d      	ldr	r3, [pc, #180]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 020c 	and.w	r2, r3, #12
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d1eb      	bne.n	8006a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d210      	bcs.n	8006acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aaa:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f023 020f 	bic.w	r2, r3, #15
 8006ab2:	4922      	ldr	r1, [pc, #136]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aba:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <HAL_RCC_ClockConfig+0x1c4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e032      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad8:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4916      	ldr	r1, [pc, #88]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	490e      	ldr	r1, [pc, #56]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b0a:	f000 f821 	bl	8006b50 <HAL_RCC_GetSysClockFreq>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	490a      	ldr	r1, [pc, #40]	; (8006b44 <HAL_RCC_ClockConfig+0x1cc>)
 8006b1c:	5ccb      	ldrb	r3, [r1, r3]
 8006b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <HAL_RCC_ClockConfig+0x1d0>)
 8006b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <HAL_RCC_ClockConfig+0x1d4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fb fb32 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023c00 	.word	0x40023c00
 8006b40:	40023800 	.word	0x40023800
 8006b44:	08015d3c 	.word	0x08015d3c
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	20000004 	.word	0x20000004

08006b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b54:	b094      	sub	sp, #80	; 0x50
 8006b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b60:	2300      	movs	r3, #0
 8006b62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b68:	4b79      	ldr	r3, [pc, #484]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 030c 	and.w	r3, r3, #12
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d00d      	beq.n	8006b90 <HAL_RCC_GetSysClockFreq+0x40>
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	f200 80e1 	bhi.w	8006d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_RCC_GetSysClockFreq+0x34>
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d003      	beq.n	8006b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b82:	e0db      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b84:	4b73      	ldr	r3, [pc, #460]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b88:	e0db      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b8a:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b8e:	e0d8      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b90:	4b6f      	ldr	r3, [pc, #444]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b98:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b9a:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d063      	beq.n	8006c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	099b      	lsrs	r3, r3, #6
 8006bac:	2200      	movs	r2, #0
 8006bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	f04f 0000 	mov.w	r0, #0
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	0159      	lsls	r1, r3, #5
 8006bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bd4:	0150      	lsls	r0, r2, #5
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4621      	mov	r1, r4
 8006bdc:	1a51      	subs	r1, r2, r1
 8006bde:	6139      	str	r1, [r7, #16]
 8006be0:	4629      	mov	r1, r5
 8006be2:	eb63 0301 	sbc.w	r3, r3, r1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	018b      	lsls	r3, r1, #6
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bfe:	4651      	mov	r1, sl
 8006c00:	018a      	lsls	r2, r1, #6
 8006c02:	4651      	mov	r1, sl
 8006c04:	ebb2 0801 	subs.w	r8, r2, r1
 8006c08:	4659      	mov	r1, fp
 8006c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c22:	4690      	mov	r8, r2
 8006c24:	4699      	mov	r9, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	eb18 0303 	adds.w	r3, r8, r3
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	462b      	mov	r3, r5
 8006c30:	eb49 0303 	adc.w	r3, r9, r3
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c42:	4629      	mov	r1, r5
 8006c44:	028b      	lsls	r3, r1, #10
 8006c46:	4621      	mov	r1, r4
 8006c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	028a      	lsls	r2, r1, #10
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c56:	2200      	movs	r2, #0
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c60:	f7f9 ffc2 	bl	8000be8 <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4613      	mov	r3, r2
 8006c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c6c:	e058      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6e:	4b38      	ldr	r3, [pc, #224]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	2200      	movs	r2, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	4611      	mov	r1, r2
 8006c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c7e:	623b      	str	r3, [r7, #32]
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
 8006c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	f04f 0000 	mov.w	r0, #0
 8006c90:	f04f 0100 	mov.w	r1, #0
 8006c94:	0159      	lsls	r1, r3, #5
 8006c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c9a:	0150      	lsls	r0, r2, #5
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8006cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	00eb      	lsls	r3, r5, #3
 8006cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd6:	00e2      	lsls	r2, r4, #3
 8006cd8:	4614      	mov	r4, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	4643      	mov	r3, r8
 8006cde:	18e3      	adds	r3, r4, r3
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	eb45 0303 	adc.w	r3, r5, r3
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	028b      	lsls	r3, r1, #10
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d00:	4621      	mov	r1, r4
 8006d02:	028a      	lsls	r2, r1, #10
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	61fa      	str	r2, [r7, #28]
 8006d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d14:	f7f9 ff68 	bl	8000be8 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3750      	adds	r7, #80	; 0x50
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000000 	.word	0x20000000

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0a9b      	lsrs	r3, r3, #10
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4903      	ldr	r1, [pc, #12]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40023800 	.word	0x40023800
 8006d94:	08015d4c 	.word	0x08015d4c

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffdc 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	; (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	08015d4c 	.word	0x08015d4c

08006dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006de8:	4b69      	ldr	r3, [pc, #420]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a68      	ldr	r2, [pc, #416]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006df2:	6093      	str	r3, [r2, #8]
 8006df4:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	4964      	ldr	r1, [pc, #400]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d017      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1a:	4b5d      	ldr	r3, [pc, #372]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	4959      	ldr	r1, [pc, #356]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e38:	d101      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d017      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	494a      	ldr	r1, [pc, #296]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e74:	d101      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 808b 	beq.w	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eae:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb0:	4b37      	ldr	r3, [pc, #220]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a34      	ldr	r2, [pc, #208]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec8:	f7fb f9a8 	bl	800221c <HAL_GetTick>
 8006ecc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed0:	f7fb f9a4 	bl	800221c <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	; 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e31f      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ee2:	4b2c      	ldr	r3, [pc, #176]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eee:	4b28      	ldr	r3, [pc, #160]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d035      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d02e      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f0c:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f2e:	4a18      	ldr	r2, [pc, #96]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d114      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fb f96c 	bl	800221c <HAL_GetTick>
 8006f44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f46:	e00a      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f48:	f7fb f968 	bl	800221c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e2e1      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ee      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d111      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f86:	400b      	ands	r3, r1
 8006f88:	4901      	ldr	r1, [pc, #4]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
 8006f8e:	e00b      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40007000 	.word	0x40007000
 8006f98:	0ffffcff 	.word	0x0ffffcff
 8006f9c:	4ba8      	ldr	r3, [pc, #672]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4aa7      	ldr	r2, [pc, #668]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fa6:	6093      	str	r3, [r2, #8]
 8006fa8:	4ba5      	ldr	r3, [pc, #660]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb4:	49a2      	ldr	r1, [pc, #648]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d010      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fc6:	4b9e      	ldr	r3, [pc, #632]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fcc:	4a9c      	ldr	r2, [pc, #624]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fd6:	4b9a      	ldr	r3, [pc, #616]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	4997      	ldr	r1, [pc, #604]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff4:	4b92      	ldr	r3, [pc, #584]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	498f      	ldr	r1, [pc, #572]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007016:	4b8a      	ldr	r3, [pc, #552]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007024:	4986      	ldr	r1, [pc, #536]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007038:	4b81      	ldr	r3, [pc, #516]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007046:	497e      	ldr	r1, [pc, #504]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800705a:	4b79      	ldr	r3, [pc, #484]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	4975      	ldr	r1, [pc, #468]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800707c:	4b70      	ldr	r3, [pc, #448]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007082:	f023 0203 	bic.w	r2, r3, #3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	496d      	ldr	r1, [pc, #436]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800709e:	4b68      	ldr	r3, [pc, #416]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	f023 020c 	bic.w	r2, r3, #12
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	4964      	ldr	r1, [pc, #400]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070c0:	4b5f      	ldr	r3, [pc, #380]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	495c      	ldr	r1, [pc, #368]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e2:	4b57      	ldr	r3, [pc, #348]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	4953      	ldr	r1, [pc, #332]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	494b      	ldr	r1, [pc, #300]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007126:	4b46      	ldr	r3, [pc, #280]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007134:	4942      	ldr	r1, [pc, #264]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007148:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	493a      	ldr	r1, [pc, #232]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800716a:	4b35      	ldr	r3, [pc, #212]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	4931      	ldr	r1, [pc, #196]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800718c:	4b2c      	ldr	r3, [pc, #176]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800719a:	4929      	ldr	r1, [pc, #164]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071bc:	4920      	ldr	r1, [pc, #128]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071cc:	d101      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071de:	4b18      	ldr	r3, [pc, #96]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ec:	4914      	ldr	r1, [pc, #80]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007210:	490b      	ldr	r1, [pc, #44]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d006      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80d8 	beq.w	80073dc <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a03      	ldr	r2, [pc, #12]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007238:	f7fa fff0 	bl	800221c <HAL_GetTick>
 800723c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800723e:	e00a      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007240:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007244:	f7fa ffea 	bl	800221c <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b64      	cmp	r3, #100	; 0x64
 8007250:	d901      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e165      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007256:	4ba9      	ldr	r3, [pc, #676]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d021      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	2b00      	cmp	r3, #0
 8007274:	d11d      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007276:	4ba1      	ldr	r3, [pc, #644]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007284:	4b9d      	ldr	r3, [pc, #628]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728a:	0e1b      	lsrs	r3, r3, #24
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	019a      	lsls	r2, r3, #6
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	431a      	orrs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	061b      	lsls	r3, r3, #24
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	071b      	lsls	r3, r3, #28
 80072aa:	4994      	ldr	r1, [pc, #592]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02e      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072dc:	d129      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072de:	4b87      	ldr	r3, [pc, #540]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072ec:	4b83      	ldr	r3, [pc, #524]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f2:	0f1b      	lsrs	r3, r3, #28
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	019a      	lsls	r2, r3, #6
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	061b      	lsls	r3, r3, #24
 800730c:	431a      	orrs	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	071b      	lsls	r3, r3, #28
 8007312:	497a      	ldr	r1, [pc, #488]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800731a:	4b78      	ldr	r3, [pc, #480]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800731c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007320:	f023 021f 	bic.w	r2, r3, #31
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	3b01      	subs	r3, #1
 800732a:	4974      	ldr	r1, [pc, #464]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01d      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800733e:	4b6f      	ldr	r3, [pc, #444]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800734c:	4b6b      	ldr	r3, [pc, #428]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800734e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007352:	0f1b      	lsrs	r3, r3, #28
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	019a      	lsls	r2, r3, #6
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	431a      	orrs	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	431a      	orrs	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	071b      	lsls	r3, r3, #28
 8007372:	4962      	ldr	r1, [pc, #392]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d011      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	019a      	lsls	r2, r3, #6
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	061b      	lsls	r3, r3, #24
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	071b      	lsls	r3, r3, #28
 80073a2:	4956      	ldr	r1, [pc, #344]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073aa:	4b54      	ldr	r3, [pc, #336]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a53      	ldr	r2, [pc, #332]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b6:	f7fa ff31 	bl	800221c <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073be:	f7fa ff2d 	bl	800221c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b64      	cmp	r3, #100	; 0x64
 80073ca:	d901      	bls.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e0a8      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073d0:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	f040 809e 	bne.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073e4:	4b45      	ldr	r3, [pc, #276]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a44      	ldr	r2, [pc, #272]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80073ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f0:	f7fa ff14 	bl	800221c <HAL_GetTick>
 80073f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073f8:	f7fa ff10 	bl	800221c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	; 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e08b      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800740a:	4b3c      	ldr	r3, [pc, #240]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007416:	d0ef      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02e      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d12a      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007440:	4b2e      	ldr	r3, [pc, #184]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800744e:	4b2b      	ldr	r3, [pc, #172]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	0f1b      	lsrs	r3, r3, #28
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	019a      	lsls	r2, r3, #6
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	431a      	orrs	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	071b      	lsls	r3, r3, #28
 8007474:	4921      	ldr	r1, [pc, #132]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800747c:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800747e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007482:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	3b01      	subs	r3, #1
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	491b      	ldr	r1, [pc, #108]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d022      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074aa:	d11d      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074ac:	4b13      	ldr	r3, [pc, #76]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	0e1b      	lsrs	r3, r3, #24
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	0f1b      	lsrs	r3, r3, #28
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	019a      	lsls	r2, r3, #6
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	431a      	orrs	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	071b      	lsls	r3, r3, #28
 80074e0:	4906      	ldr	r1, [pc, #24]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a03      	ldr	r2, [pc, #12]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f4:	f7fa fe92 	bl	800221c <HAL_GetTick>
 80074f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074fa:	e00a      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x752>
 80074fc:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007500:	f7fa fe8c 	bl	800221c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b64      	cmp	r3, #100	; 0x64
 800750c:	d901      	bls.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e007      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800751a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800751e:	d1ef      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800

08007530 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e022      	b.n	8007588 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fa f961 	bl	800181c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f814 	bl	8007590 <HAL_SD_InitCard>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e00a      	b.n	8007588 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007590:	b5b0      	push	{r4, r5, r7, lr}
 8007592:	b08e      	sub	sp, #56	; 0x38
 8007594:	af04      	add	r7, sp, #16
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007598:	2300      	movs	r3, #0
 800759a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80075ac:	2376      	movs	r3, #118	; 0x76
 80075ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681d      	ldr	r5, [r3, #0]
 80075b4:	466c      	mov	r4, sp
 80075b6:	f107 0314 	add.w	r3, r7, #20
 80075ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075c2:	f107 0308 	add.w	r3, r7, #8
 80075c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075c8:	4628      	mov	r0, r5
 80075ca:	f002 fbaf 	bl	8009d2c <SDMMC_Init>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e059      	b.n	8007694 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ee:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f002 fbe3 	bl	8009dc0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007608:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800760a:	2002      	movs	r0, #2
 800760c:	f7fa fe12 	bl	8002234 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fe67 	bl	80082e4 <SD_PowerON>
 8007616:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e02e      	b.n	8007694 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fd86 	bl	8008148 <SD_InitCard>
 800763c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e01b      	b.n	8007694 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007664:	4618      	mov	r0, r3
 8007666:	f002 fc3d 	bl	8009ee4 <SDMMC_CmdBlockLength>
 800766a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <HAL_SD_InitCard+0x10c>)
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bdb0      	pop	{r4, r5, r7, pc}
 800769c:	004005ff 	.word	0x004005ff

080076a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b092      	sub	sp, #72	; 0x48
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80076ae:	f7fa fdb5 	bl	800221c <HAL_GetTick>
 80076b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e1bd      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	f040 81b0 	bne.w	8007a40 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d907      	bls.n	8007704 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e1a4      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2203      	movs	r2, #3
 8007708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007718:	2b01      	cmp	r3, #1
 800771a:	d002      	beq.n	8007722 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	025b      	lsls	r3, r3, #9
 8007720:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	025b      	lsls	r3, r3, #9
 800772c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800772e:	2390      	movs	r3, #144	; 0x90
 8007730:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007732:	2302      	movs	r3, #2
 8007734:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800773a:	2301      	movs	r3, #1
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f107 0214 	add.w	r2, r7, #20
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f002 fb9f 	bl	8009e8c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d90a      	bls.n	800776a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2202      	movs	r2, #2
 8007758:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007760:	4618      	mov	r0, r3
 8007762:	f002 fc03 	bl	8009f6c <SDMMC_CmdReadMultiBlock>
 8007766:	6478      	str	r0, [r7, #68]	; 0x44
 8007768:	e009      	b.n	800777e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007776:	4618      	mov	r0, r3
 8007778:	f002 fbd6 	bl	8009f28 <SDMMC_CmdReadSingleBlock>
 800777c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800777e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a7a      	ldr	r2, [pc, #488]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007792:	431a      	orrs	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e151      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80077ae:	e061      	b.n	8007874 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d03c      	beq.n	8007838 <HAL_SD_ReadBlocks+0x198>
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d039      	beq.n	8007838 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	643b      	str	r3, [r7, #64]	; 0x40
 80077c8:	e033      	b.n	8007832 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f002 fad8 	bl	8009d84 <SDMMC_ReadFIFO>
 80077d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e0:	3301      	adds	r3, #1
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e6:	3b01      	subs	r3, #1
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	3301      	adds	r3, #1
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fc:	3b01      	subs	r3, #1
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	b2da      	uxtb	r2, r3
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007808:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800780a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780c:	3301      	adds	r3, #1
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007812:	3b01      	subs	r3, #1
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	0e1b      	lsrs	r3, r3, #24
 800781a:	b2da      	uxtb	r2, r3
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	3301      	adds	r3, #1
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007828:	3b01      	subs	r3, #1
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	3301      	adds	r3, #1
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
 8007832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007834:	2b07      	cmp	r3, #7
 8007836:	d9c8      	bls.n	80077ca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007838:	f7fa fcf0 	bl	800221c <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007844:	429a      	cmp	r2, r3
 8007846:	d902      	bls.n	800784e <HAL_SD_ReadBlocks+0x1ae>
 8007848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d112      	bne.n	8007874 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a48      	ldr	r2, [pc, #288]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e0ec      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800787e:	2b00      	cmp	r3, #0
 8007880:	d096      	beq.n	80077b0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d022      	beq.n	80078d6 <HAL_SD_ReadBlocks+0x236>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d91f      	bls.n	80078d6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	2b03      	cmp	r3, #3
 800789c:	d01b      	beq.n	80078d6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f002 fbc8 	bl	800a038 <SDMMC_CmdStopTransfer>
 80078a8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2f      	ldr	r2, [pc, #188]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078be:	431a      	orrs	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e0bb      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d012      	beq.n	800790a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a22      	ldr	r2, [pc, #136]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	f043 0208 	orr.w	r2, r3, #8
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e0a1      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a15      	ldr	r2, [pc, #84]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	f043 0202 	orr.w	r2, r3, #2
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e087      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b00      	cmp	r3, #0
 800794a:	d064      	beq.n	8007a16 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a08      	ldr	r2, [pc, #32]	; (8007974 <HAL_SD_ReadBlocks+0x2d4>)
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f043 0220 	orr.w	r2, r3, #32
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e06d      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
 8007972:	bf00      	nop
 8007974:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f002 fa01 	bl	8009d84 <SDMMC_ReadFIFO>
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	3301      	adds	r3, #1
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	3b01      	subs	r3, #1
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	0a1b      	lsrs	r3, r3, #8
 800799c:	b2da      	uxtb	r2, r3
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	3301      	adds	r3, #1
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	3b01      	subs	r3, #1
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	3301      	adds	r3, #1
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	3b01      	subs	r3, #1
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	3301      	adds	r3, #1
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d6:	3b01      	subs	r3, #1
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80079da:	f7fa fc1f 	bl	800221c <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d902      	bls.n	80079f0 <HAL_SD_ReadBlocks+0x350>
 80079ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d112      	bne.n	8007a16 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a18      	ldr	r2, [pc, #96]	; (8007a58 <HAL_SD_ReadBlocks+0x3b8>)
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e01b      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_SD_ReadBlocks+0x38a>
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1a6      	bne.n	8007978 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e006      	b.n	8007a4e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3748      	adds	r7, #72	; 0x48
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	004005ff 	.word	0x004005ff

08007a5c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b092      	sub	sp, #72	; 0x48
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a6a:	f7fa fbd7 	bl	800221c <HAL_GetTick>
 8007a6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d107      	bne.n	8007a8e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e165      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	f040 8158 	bne.w	8007d4c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	441a      	add	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d907      	bls.n	8007ac0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e14c      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d002      	beq.n	8007ade <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	025b      	lsls	r3, r3, #9
 8007adc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	025b      	lsls	r3, r3, #9
 8007ae8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007aea:	2390      	movs	r3, #144	; 0x90
 8007aec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f107 0218 	add.w	r2, r7, #24
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f002 f9c1 	bl	8009e8c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d90a      	bls.n	8007b26 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f002 fa69 	bl	8009ff4 <SDMMC_CmdWriteMultiBlock>
 8007b22:	6478      	str	r0, [r7, #68]	; 0x44
 8007b24:	e009      	b.n	8007b3a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2210      	movs	r2, #16
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 fa3c 	bl	8009fb0 <SDMMC_CmdWriteSingleBlock>
 8007b38:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a87      	ldr	r2, [pc, #540]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0f9      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b6a:	e065      	b.n	8007c38 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d040      	beq.n	8007bfc <HAL_SD_WriteBlocks+0x1a0>
 8007b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d03d      	beq.n	8007bfc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	643b      	str	r3, [r7, #64]	; 0x40
 8007b84:	e037      	b.n	8007bf6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	3301      	adds	r3, #1
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b94:	3b01      	subs	r3, #1
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	021a      	lsls	r2, r3, #8
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	3b01      	subs	r3, #1
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	041a      	lsls	r2, r3, #16
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	061a      	lsls	r2, r3, #24
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f107 0214 	add.w	r2, r7, #20
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f002 f8d7 	bl	8009d9e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d9c4      	bls.n	8007b86 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007bfc:	f7fa fb0e 	bl	800221c <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d902      	bls.n	8007c12 <HAL_SD_WriteBlocks+0x1b6>
 8007c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d112      	bne.n	8007c38 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a53      	ldr	r2, [pc, #332]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e090      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d092      	beq.n	8007b6c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d022      	beq.n	8007c9a <HAL_SD_WriteBlocks+0x23e>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d91f      	bls.n	8007c9a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d01b      	beq.n	8007c9a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 f9e6 	bl	800a038 <SDMMC_CmdStopTransfer>
 8007c6c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d012      	beq.n	8007c9a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3a      	ldr	r2, [pc, #232]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e05f      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d012      	beq.n	8007cce <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a2d      	ldr	r2, [pc, #180]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	f043 0208 	orr.w	r2, r3, #8
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e045      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d012      	beq.n	8007d02 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	f043 0202 	orr.w	r2, r3, #2
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e02b      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d012      	beq.n	8007d36 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <HAL_SD_WriteBlocks+0x308>)
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	f043 0210 	orr.w	r2, r3, #16
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e011      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e006      	b.n	8007d5a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3748      	adds	r7, #72	; 0x48
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	004005ff 	.word	0x004005ff

08007d68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d76:	0f9b      	lsrs	r3, r3, #30
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d82:	0e9b      	lsrs	r3, r3, #26
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d94:	0e1b      	lsrs	r3, r3, #24
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc8:	0d1b      	lsrs	r3, r3, #20
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de6:	0bdb      	lsrs	r3, r3, #15
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df8:	0b9b      	lsrs	r3, r3, #14
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e0a:	0b5b      	lsrs	r3, r3, #13
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e1c:	0b1b      	lsrs	r3, r3, #12
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d163      	bne.n	8007f00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e3c:	009a      	lsls	r2, r3, #2
 8007e3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e42:	4013      	ands	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e48:	0f92      	lsrs	r2, r2, #30
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e54:	0edb      	lsrs	r3, r3, #27
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e78:	0d5b      	lsrs	r3, r3, #21
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8a:	0c9b      	lsrs	r3, r3, #18
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9c:	0bdb      	lsrs	r3, r3, #15
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	7e1b      	ldrb	r3, [r3, #24]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007eca:	fb03 f202 	mul.w	r2, r3, r2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	7a1b      	ldrb	r3, [r3, #8]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	2201      	movs	r2, #1
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007eec:	0a52      	lsrs	r2, r2, #9
 8007eee:	fb03 f202 	mul.w	r2, r3, r2
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efc:	661a      	str	r2, [r3, #96]	; 0x60
 8007efe:	e031      	b.n	8007f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d11d      	bne.n	8007f44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	3301      	adds	r3, #1
 8007f24:	029a      	lsls	r2, r3, #10
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	661a      	str	r2, [r3, #96]	; 0x60
 8007f42:	e00f      	b.n	8007f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a58      	ldr	r2, [pc, #352]	; (80080ac <HAL_SD_GetCardCSD+0x344>)
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e09d      	b.n	80080a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f68:	0b9b      	lsrs	r3, r3, #14
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	09db      	lsrs	r3, r3, #7
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9c:	0fdb      	lsrs	r3, r3, #31
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	0f5b      	lsrs	r3, r3, #29
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	0e9b      	lsrs	r3, r3, #26
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	0d9b      	lsrs	r3, r3, #22
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	0d5b      	lsrs	r3, r3, #21
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	0bdb      	lsrs	r3, r3, #15
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	0b9b      	lsrs	r3, r3, #14
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	0b5b      	lsrs	r3, r3, #13
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	0b1b      	lsrs	r3, r3, #12
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	0a9b      	lsrs	r3, r3, #10
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	b2da      	uxtb	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	085b      	lsrs	r3, r3, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	004005ff 	.word	0x004005ff

080080b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f970 	bl	8008400 <SD_SendStatus>
 8008120:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	0a5b      	lsrs	r3, r3, #9
 8008138:	f003 030f 	and.w	r3, r3, #15
 800813c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800813e:	693b      	ldr	r3, [r7, #16]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008148:	b5b0      	push	{r4, r5, r7, lr}
 800814a:	b094      	sub	sp, #80	; 0x50
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008150:	2301      	movs	r3, #1
 8008152:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f001 fe3f 	bl	8009ddc <SDMMC_GetPowerState>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008164:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008168:	e0b8      	b.n	80082dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816e:	2b03      	cmp	r3, #3
 8008170:	d02f      	beq.n	80081d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f002 f826 	bl	800a1c8 <SDMMC_CmdSendCID>
 800817c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800817e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <SD_InitCard+0x40>
    {
      return errorstate;
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	e0a9      	b.n	80082dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fe69 	bl	8009e66 <SDMMC_GetResponse>
 8008194:	4602      	mov	r2, r0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2104      	movs	r1, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 fe60 	bl	8009e66 <SDMMC_GetResponse>
 80081a6:	4602      	mov	r2, r0
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2108      	movs	r1, #8
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fe57 	bl	8009e66 <SDMMC_GetResponse>
 80081b8:	4602      	mov	r2, r0
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	210c      	movs	r1, #12
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fe4e 	bl	8009e66 <SDMMC_GetResponse>
 80081ca:	4602      	mov	r2, r0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d00d      	beq.n	80081f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f107 020e 	add.w	r2, r7, #14
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f002 f82c 	bl	800a242 <SDMMC_CmdSetRelAdd>
 80081ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80081f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f4:	e072      	b.n	80082dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d036      	beq.n	800826c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081fe:	89fb      	ldrh	r3, [r7, #14]
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f001 fff6 	bl	800a204 <SDMMC_CmdSendCSD>
 8008218:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008222:	e05b      	b.n	80082dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f001 fe1b 	bl	8009e66 <SDMMC_GetResponse>
 8008230:	4602      	mov	r2, r0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2104      	movs	r1, #4
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fe12 	bl	8009e66 <SDMMC_GetResponse>
 8008242:	4602      	mov	r2, r0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2108      	movs	r1, #8
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fe09 	bl	8009e66 <SDMMC_GetResponse>
 8008254:	4602      	mov	r2, r0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	210c      	movs	r1, #12
 8008260:	4618      	mov	r0, r3
 8008262:	f001 fe00 	bl	8009e66 <SDMMC_GetResponse>
 8008266:	4602      	mov	r2, r0
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2104      	movs	r1, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fdf7 	bl	8009e66 <SDMMC_GetResponse>
 8008278:	4603      	mov	r3, r0
 800827a:	0d1a      	lsrs	r2, r3, #20
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008280:	f107 0310 	add.w	r3, r7, #16
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fd6e 	bl	8007d68 <HAL_SD_GetCardCSD>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008292:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008296:	e021      	b.n	80082dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	2200      	movs	r2, #0
 80082a4:	461c      	mov	r4, r3
 80082a6:	4615      	mov	r5, r2
 80082a8:	4622      	mov	r2, r4
 80082aa:	462b      	mov	r3, r5
 80082ac:	4608      	mov	r0, r1
 80082ae:	f001 fee5 	bl	800a07c <SDMMC_CmdSelDesel>
 80082b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <SD_InitCard+0x176>
  {
    return errorstate;
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	e00e      	b.n	80082dc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	466c      	mov	r4, sp
 80082c6:	f103 0210 	add.w	r2, r3, #16
 80082ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80082cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082d0:	3304      	adds	r3, #4
 80082d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d4:	4628      	mov	r0, r5
 80082d6:	f001 fd29 	bl	8009d2c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3740      	adds	r7, #64	; 0x40
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bdb0      	pop	{r4, r5, r7, pc}

080082e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fee0 	bl	800a0c2 <SDMMC_CmdGoIdleState>
 8008302:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <SD_PowerON+0x2a>
  {
    return errorstate;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	e072      	b.n	80083f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fef3 	bl	800a0fe <SDMMC_CmdOperCond>
 8008318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00d      	beq.n	800833c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fec9 	bl	800a0c2 <SDMMC_CmdGoIdleState>
 8008330:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	e05b      	b.n	80083f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008346:	2b01      	cmp	r3, #1
 8008348:	d137      	bne.n	80083ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fef3 	bl	800a13c <SDMMC_CmdAppCommand>
 8008356:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d02d      	beq.n	80083ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800835e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008362:	e047      	b.n	80083f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f001 fee6 	bl	800a13c <SDMMC_CmdAppCommand>
 8008370:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <SD_PowerON+0x98>
    {
      return errorstate;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	e03b      	b.n	80083f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	491e      	ldr	r1, [pc, #120]	; (80083fc <SD_PowerON+0x118>)
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fefc 	bl	800a180 <SDMMC_CmdAppOperCommand>
 8008388:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008394:	e02e      	b.n	80083f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f001 fd62 	bl	8009e66 <SDMMC_GetResponse>
 80083a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	0fdb      	lsrs	r3, r3, #31
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <SD_PowerON+0xcc>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <SD_PowerON+0xce>
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]

    count++;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d802      	bhi.n	80083ca <SD_PowerON+0xe6>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0cc      	beq.n	8008364 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d902      	bls.n	80083da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083d8:	e00c      	b.n	80083f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	645a      	str	r2, [r3, #68]	; 0x44
 80083ea:	e002      	b.n	80083f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	c1100000 	.word	0xc1100000

08008400 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008414:	e018      	b.n	8008448 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841e:	041b      	lsls	r3, r3, #16
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f001 ff2e 	bl	800a284 <SDMMC_CmdSendStatus>
 8008428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	e009      	b.n	8008448 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f001 fd13 	bl	8009e66 <SDMMC_GetResponse>
 8008440:	4602      	mov	r2, r0
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e038      	b.n	80084d8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7f9 fc0c 	bl	8001c98 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3308      	adds	r3, #8
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f001 fb36 	bl	8009afc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	461a      	mov	r2, r3
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	f001 fbbe 	bl	8009c1c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6858      	ldr	r0, [r3, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	f001 fc05 	bl	8009cbc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	6892      	ldr	r2, [r2, #8]
 80084ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	6892      	ldr	r2, [r2, #8]
 80084c6:	f041 0101 	orr.w	r1, r1, #1
 80084ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e049      	b.n	8008586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f9 fa8e 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f000 fa74 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e049      	b.n	8008634 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f841 	bl	800863c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f000 fa1d 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800866a:	2302      	movs	r3, #2
 800866c:	e0ff      	b.n	800886e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b14      	cmp	r3, #20
 800867a:	f200 80f0 	bhi.w	800885e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086d9 	.word	0x080086d9
 8008688:	0800885f 	.word	0x0800885f
 800868c:	0800885f 	.word	0x0800885f
 8008690:	0800885f 	.word	0x0800885f
 8008694:	08008719 	.word	0x08008719
 8008698:	0800885f 	.word	0x0800885f
 800869c:	0800885f 	.word	0x0800885f
 80086a0:	0800885f 	.word	0x0800885f
 80086a4:	0800875b 	.word	0x0800875b
 80086a8:	0800885f 	.word	0x0800885f
 80086ac:	0800885f 	.word	0x0800885f
 80086b0:	0800885f 	.word	0x0800885f
 80086b4:	0800879b 	.word	0x0800879b
 80086b8:	0800885f 	.word	0x0800885f
 80086bc:	0800885f 	.word	0x0800885f
 80086c0:	0800885f 	.word	0x0800885f
 80086c4:	080087dd 	.word	0x080087dd
 80086c8:	0800885f 	.word	0x0800885f
 80086cc:	0800885f 	.word	0x0800885f
 80086d0:	0800885f 	.word	0x0800885f
 80086d4:	0800881d 	.word	0x0800881d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fa34 	bl	8008b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0208 	orr.w	r2, r2, #8
 80086f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0204 	bic.w	r2, r2, #4
 8008702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6999      	ldr	r1, [r3, #24]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	619a      	str	r2, [r3, #24]
      break;
 8008716:	e0a5      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fa86 	bl	8008c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6999      	ldr	r1, [r3, #24]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	619a      	str	r2, [r3, #24]
      break;
 8008758:	e084      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68b9      	ldr	r1, [r7, #8]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fadd 	bl	8008d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69da      	ldr	r2, [r3, #28]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0208 	orr.w	r2, r2, #8
 8008774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69da      	ldr	r2, [r3, #28]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0204 	bic.w	r2, r2, #4
 8008784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69d9      	ldr	r1, [r3, #28]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	61da      	str	r2, [r3, #28]
      break;
 8008798:	e064      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fb33 	bl	8008e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69d9      	ldr	r1, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	021a      	lsls	r2, r3, #8
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	61da      	str	r2, [r3, #28]
      break;
 80087da:	e043      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fb6a 	bl	8008ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0208 	orr.w	r2, r2, #8
 80087f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0204 	bic.w	r2, r2, #4
 8008806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800881a:	e023      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fb9c 	bl	8008f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	021a      	lsls	r2, r3, #8
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800885c:	e002      	b.n	8008864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
      break;
 8008862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop

08008878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <HAL_TIM_ConfigClockSource+0x1c>
 8008890:	2302      	movs	r3, #2
 8008892:	e0b4      	b.n	80089fe <HAL_TIM_ConfigClockSource+0x186>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	4b56      	ldr	r3, [pc, #344]	; (8008a08 <HAL_TIM_ConfigClockSource+0x190>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088cc:	d03e      	beq.n	800894c <HAL_TIM_ConfigClockSource+0xd4>
 80088ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d2:	f200 8087 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 80088d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088da:	f000 8086 	beq.w	80089ea <HAL_TIM_ConfigClockSource+0x172>
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d87f      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 80088e4:	2b70      	cmp	r3, #112	; 0x70
 80088e6:	d01a      	beq.n	800891e <HAL_TIM_ConfigClockSource+0xa6>
 80088e8:	2b70      	cmp	r3, #112	; 0x70
 80088ea:	d87b      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 80088ec:	2b60      	cmp	r3, #96	; 0x60
 80088ee:	d050      	beq.n	8008992 <HAL_TIM_ConfigClockSource+0x11a>
 80088f0:	2b60      	cmp	r3, #96	; 0x60
 80088f2:	d877      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 80088f4:	2b50      	cmp	r3, #80	; 0x50
 80088f6:	d03c      	beq.n	8008972 <HAL_TIM_ConfigClockSource+0xfa>
 80088f8:	2b50      	cmp	r3, #80	; 0x50
 80088fa:	d873      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d058      	beq.n	80089b2 <HAL_TIM_ConfigClockSource+0x13a>
 8008900:	2b40      	cmp	r3, #64	; 0x40
 8008902:	d86f      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008904:	2b30      	cmp	r3, #48	; 0x30
 8008906:	d064      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008908:	2b30      	cmp	r3, #48	; 0x30
 800890a:	d86b      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 800890c:	2b20      	cmp	r3, #32
 800890e:	d060      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d867      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d05c      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008918:	2b10      	cmp	r3, #16
 800891a:	d05a      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x15a>
 800891c:	e062      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6899      	ldr	r1, [r3, #8]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f000 fbe5 	bl	80090fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	609a      	str	r2, [r3, #8]
      break;
 800894a:	e04f      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	6899      	ldr	r1, [r3, #8]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f000 fbce 	bl	80090fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800896e:	609a      	str	r2, [r3, #8]
      break;
 8008970:	e03c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6859      	ldr	r1, [r3, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	461a      	mov	r2, r3
 8008980:	f000 fb42 	bl	8009008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2150      	movs	r1, #80	; 0x50
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fb9b 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 8008990:	e02c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	6859      	ldr	r1, [r3, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	461a      	mov	r2, r3
 80089a0:	f000 fb61 	bl	8009066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2160      	movs	r1, #96	; 0x60
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fb8b 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 80089b0:	e01c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6859      	ldr	r1, [r3, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	461a      	mov	r2, r3
 80089c0:	f000 fb22 	bl	8009008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2140      	movs	r1, #64	; 0x40
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fb7b 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 80089d0:	e00c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f000 fb72 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 80089e2:	e003      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	e000      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	fffeff88 	.word	0xfffeff88

08008a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a40      	ldr	r2, [pc, #256]	; (8008b20 <TIM_Base_SetConfig+0x114>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2a:	d00f      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a3d      	ldr	r2, [pc, #244]	; (8008b24 <TIM_Base_SetConfig+0x118>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00b      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a3c      	ldr	r2, [pc, #240]	; (8008b28 <TIM_Base_SetConfig+0x11c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a3b      	ldr	r2, [pc, #236]	; (8008b2c <TIM_Base_SetConfig+0x120>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a3a      	ldr	r2, [pc, #232]	; (8008b30 <TIM_Base_SetConfig+0x124>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d108      	bne.n	8008a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a2f      	ldr	r2, [pc, #188]	; (8008b20 <TIM_Base_SetConfig+0x114>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d02b      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6c:	d027      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2c      	ldr	r2, [pc, #176]	; (8008b24 <TIM_Base_SetConfig+0x118>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d023      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2b      	ldr	r2, [pc, #172]	; (8008b28 <TIM_Base_SetConfig+0x11c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d01f      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a2a      	ldr	r2, [pc, #168]	; (8008b2c <TIM_Base_SetConfig+0x120>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01b      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <TIM_Base_SetConfig+0x124>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d017      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a28      	ldr	r2, [pc, #160]	; (8008b34 <TIM_Base_SetConfig+0x128>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d013      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a27      	ldr	r2, [pc, #156]	; (8008b38 <TIM_Base_SetConfig+0x12c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d00f      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a26      	ldr	r2, [pc, #152]	; (8008b3c <TIM_Base_SetConfig+0x130>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a25      	ldr	r2, [pc, #148]	; (8008b40 <TIM_Base_SetConfig+0x134>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a24      	ldr	r2, [pc, #144]	; (8008b44 <TIM_Base_SetConfig+0x138>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_Base_SetConfig+0xb2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a23      	ldr	r2, [pc, #140]	; (8008b48 <TIM_Base_SetConfig+0x13c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d108      	bne.n	8008ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a0a      	ldr	r2, [pc, #40]	; (8008b20 <TIM_Base_SetConfig+0x114>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d003      	beq.n	8008b04 <TIM_Base_SetConfig+0xf8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <TIM_Base_SetConfig+0x124>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d103      	bne.n	8008b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	615a      	str	r2, [r3, #20]
}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40000400 	.word	0x40000400
 8008b28:	40000800 	.word	0x40000800
 8008b2c:	40000c00 	.word	0x40000c00
 8008b30:	40010400 	.word	0x40010400
 8008b34:	40014000 	.word	0x40014000
 8008b38:	40014400 	.word	0x40014400
 8008b3c:	40014800 	.word	0x40014800
 8008b40:	40001800 	.word	0x40001800
 8008b44:	40001c00 	.word	0x40001c00
 8008b48:	40002000 	.word	0x40002000

08008b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f023 0201 	bic.w	r2, r3, #1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4b2b      	ldr	r3, [pc, #172]	; (8008c24 <TIM_OC1_SetConfig+0xd8>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f023 0302 	bic.w	r3, r3, #2
 8008b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <TIM_OC1_SetConfig+0xdc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_OC1_SetConfig+0x64>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <TIM_OC1_SetConfig+0xe0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d10c      	bne.n	8008bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 0308 	bic.w	r3, r3, #8
 8008bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f023 0304 	bic.w	r3, r3, #4
 8008bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a16      	ldr	r2, [pc, #88]	; (8008c28 <TIM_OC1_SetConfig+0xdc>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_OC1_SetConfig+0x8e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <TIM_OC1_SetConfig+0xe0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d111      	bne.n	8008bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	621a      	str	r2, [r3, #32]
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	fffeff8f 	.word	0xfffeff8f
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40010400 	.word	0x40010400

08008c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f023 0210 	bic.w	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <TIM_OC2_SetConfig+0xe4>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f023 0320 	bic.w	r3, r3, #32
 8008c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a23      	ldr	r2, [pc, #140]	; (8008d18 <TIM_OC2_SetConfig+0xe8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d003      	beq.n	8008c98 <TIM_OC2_SetConfig+0x68>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a22      	ldr	r2, [pc, #136]	; (8008d1c <TIM_OC2_SetConfig+0xec>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10d      	bne.n	8008cb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <TIM_OC2_SetConfig+0xe8>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d003      	beq.n	8008cc4 <TIM_OC2_SetConfig+0x94>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <TIM_OC2_SetConfig+0xec>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d113      	bne.n	8008cec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	feff8fff 	.word	0xfeff8fff
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400

08008d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <TIM_OC3_SetConfig+0xe0>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a22      	ldr	r2, [pc, #136]	; (8008e04 <TIM_OC3_SetConfig+0xe4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC3_SetConfig+0x66>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a21      	ldr	r2, [pc, #132]	; (8008e08 <TIM_OC3_SetConfig+0xe8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d10d      	bne.n	8008da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <TIM_OC3_SetConfig+0xe4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d003      	beq.n	8008db2 <TIM_OC3_SetConfig+0x92>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <TIM_OC3_SetConfig+0xe8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d113      	bne.n	8008dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	621a      	str	r2, [r3, #32]
}
 8008df4:	bf00      	nop
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	fffeff8f 	.word	0xfffeff8f
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010400 	.word	0x40010400

08008e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <TIM_OC4_SetConfig+0xa4>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	031b      	lsls	r3, r3, #12
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <TIM_OC4_SetConfig+0xa8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d003      	beq.n	8008e74 <TIM_OC4_SetConfig+0x68>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a12      	ldr	r2, [pc, #72]	; (8008eb8 <TIM_OC4_SetConfig+0xac>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d109      	bne.n	8008e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	019b      	lsls	r3, r3, #6
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	feff8fff 	.word	0xfeff8fff
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40010400 	.word	0x40010400

08008ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <TIM_OC5_SetConfig+0x98>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	041b      	lsls	r3, r3, #16
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <TIM_OC5_SetConfig+0x9c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_OC5_SetConfig+0x5e>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a11      	ldr	r2, [pc, #68]	; (8008f5c <TIM_OC5_SetConfig+0xa0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d109      	bne.n	8008f2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	621a      	str	r2, [r3, #32]
}
 8008f48:	bf00      	nop
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	fffeff8f 	.word	0xfffeff8f
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40010400 	.word	0x40010400

08008f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <TIM_OC6_SetConfig+0x9c>)
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	051b      	lsls	r3, r3, #20
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a13      	ldr	r2, [pc, #76]	; (8009000 <TIM_OC6_SetConfig+0xa0>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_OC6_SetConfig+0x60>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a12      	ldr	r2, [pc, #72]	; (8009004 <TIM_OC6_SetConfig+0xa4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d109      	bne.n	8008fd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	029b      	lsls	r3, r3, #10
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	feff8fff 	.word	0xfeff8fff
 8009000:	40010000 	.word	0x40010000
 8009004:	40010400 	.word	0x40010400

08009008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f023 0201 	bic.w	r2, r3, #1
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	4313      	orrs	r3, r2
 800903c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f023 030a 	bic.w	r3, r3, #10
 8009044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4313      	orrs	r3, r2
 800904c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	621a      	str	r2, [r3, #32]
}
 800905a:	bf00      	nop
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009066:	b480      	push	{r7}
 8009068:	b087      	sub	sp, #28
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	f023 0210 	bic.w	r2, r3, #16
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	031b      	lsls	r3, r3, #12
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f043 0307 	orr.w	r3, r3, #7
 80090e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	609a      	str	r2, [r3, #8]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	021a      	lsls	r2, r3, #8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	431a      	orrs	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4313      	orrs	r3, r2
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	609a      	str	r2, [r3, #8]
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009150:	2302      	movs	r3, #2
 8009152:	e06d      	b.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a30      	ldr	r2, [pc, #192]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d004      	beq.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a2f      	ldr	r2, [pc, #188]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d108      	bne.n	800919a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800918e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a20      	ldr	r2, [pc, #128]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d022      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c6:	d01d      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1a      	ldr	r2, [pc, #104]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a15      	ldr	r2, [pc, #84]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a16      	ldr	r2, [pc, #88]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d10c      	bne.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800920a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4313      	orrs	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40010000 	.word	0x40010000
 8009240:	40010400 	.word	0x40010400
 8009244:	40000400 	.word	0x40000400
 8009248:	40000800 	.word	0x40000800
 800924c:	40000c00 	.word	0x40000c00
 8009250:	40014000 	.word	0x40014000
 8009254:	40001800 	.word	0x40001800

08009258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e040      	b.n	80092ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 fc40 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2224      	movs	r2, #36	; 0x24
 8009284:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f82c 	bl	80092f4 <UART_SetConfig>
 800929c:	4603      	mov	r3, r0
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e022      	b.n	80092ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa84 	bl	80097bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fb0b 	bl	8009900 <UART_CheckIdleState>
 80092ea:	4603      	mov	r3, r0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4ba6      	ldr	r3, [pc, #664]	; (80095b8 <UART_SetConfig+0x2c4>)
 8009320:	4013      	ands	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	6979      	ldr	r1, [r7, #20]
 8009328:	430b      	orrs	r3, r1
 800932a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a94      	ldr	r2, [pc, #592]	; (80095bc <UART_SetConfig+0x2c8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d120      	bne.n	80093b2 <UART_SetConfig+0xbe>
 8009370:	4b93      	ldr	r3, [pc, #588]	; (80095c0 <UART_SetConfig+0x2cc>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d816      	bhi.n	80093ac <UART_SetConfig+0xb8>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <UART_SetConfig+0x90>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	08009395 	.word	0x08009395
 8009388:	080093a1 	.word	0x080093a1
 800938c:	0800939b 	.word	0x0800939b
 8009390:	080093a7 	.word	0x080093a7
 8009394:	2301      	movs	r3, #1
 8009396:	77fb      	strb	r3, [r7, #31]
 8009398:	e150      	b.n	800963c <UART_SetConfig+0x348>
 800939a:	2302      	movs	r3, #2
 800939c:	77fb      	strb	r3, [r7, #31]
 800939e:	e14d      	b.n	800963c <UART_SetConfig+0x348>
 80093a0:	2304      	movs	r3, #4
 80093a2:	77fb      	strb	r3, [r7, #31]
 80093a4:	e14a      	b.n	800963c <UART_SetConfig+0x348>
 80093a6:	2308      	movs	r3, #8
 80093a8:	77fb      	strb	r3, [r7, #31]
 80093aa:	e147      	b.n	800963c <UART_SetConfig+0x348>
 80093ac:	2310      	movs	r3, #16
 80093ae:	77fb      	strb	r3, [r7, #31]
 80093b0:	e144      	b.n	800963c <UART_SetConfig+0x348>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a83      	ldr	r2, [pc, #524]	; (80095c4 <UART_SetConfig+0x2d0>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d132      	bne.n	8009422 <UART_SetConfig+0x12e>
 80093bc:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <UART_SetConfig+0x2cc>)
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c2:	f003 030c 	and.w	r3, r3, #12
 80093c6:	2b0c      	cmp	r3, #12
 80093c8:	d828      	bhi.n	800941c <UART_SetConfig+0x128>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0xdc>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009405 	.word	0x08009405
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	0800941d 	.word	0x0800941d
 80093dc:	0800941d 	.word	0x0800941d
 80093e0:	08009411 	.word	0x08009411
 80093e4:	0800941d 	.word	0x0800941d
 80093e8:	0800941d 	.word	0x0800941d
 80093ec:	0800941d 	.word	0x0800941d
 80093f0:	0800940b 	.word	0x0800940b
 80093f4:	0800941d 	.word	0x0800941d
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	08009417 	.word	0x08009417
 8009404:	2300      	movs	r3, #0
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e118      	b.n	800963c <UART_SetConfig+0x348>
 800940a:	2302      	movs	r3, #2
 800940c:	77fb      	strb	r3, [r7, #31]
 800940e:	e115      	b.n	800963c <UART_SetConfig+0x348>
 8009410:	2304      	movs	r3, #4
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e112      	b.n	800963c <UART_SetConfig+0x348>
 8009416:	2308      	movs	r3, #8
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e10f      	b.n	800963c <UART_SetConfig+0x348>
 800941c:	2310      	movs	r3, #16
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e10c      	b.n	800963c <UART_SetConfig+0x348>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a68      	ldr	r2, [pc, #416]	; (80095c8 <UART_SetConfig+0x2d4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d120      	bne.n	800946e <UART_SetConfig+0x17a>
 800942c:	4b64      	ldr	r3, [pc, #400]	; (80095c0 <UART_SetConfig+0x2cc>)
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009436:	2b30      	cmp	r3, #48	; 0x30
 8009438:	d013      	beq.n	8009462 <UART_SetConfig+0x16e>
 800943a:	2b30      	cmp	r3, #48	; 0x30
 800943c:	d814      	bhi.n	8009468 <UART_SetConfig+0x174>
 800943e:	2b20      	cmp	r3, #32
 8009440:	d009      	beq.n	8009456 <UART_SetConfig+0x162>
 8009442:	2b20      	cmp	r3, #32
 8009444:	d810      	bhi.n	8009468 <UART_SetConfig+0x174>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <UART_SetConfig+0x15c>
 800944a:	2b10      	cmp	r3, #16
 800944c:	d006      	beq.n	800945c <UART_SetConfig+0x168>
 800944e:	e00b      	b.n	8009468 <UART_SetConfig+0x174>
 8009450:	2300      	movs	r3, #0
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e0f2      	b.n	800963c <UART_SetConfig+0x348>
 8009456:	2302      	movs	r3, #2
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e0ef      	b.n	800963c <UART_SetConfig+0x348>
 800945c:	2304      	movs	r3, #4
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e0ec      	b.n	800963c <UART_SetConfig+0x348>
 8009462:	2308      	movs	r3, #8
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e0e9      	b.n	800963c <UART_SetConfig+0x348>
 8009468:	2310      	movs	r3, #16
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e0e6      	b.n	800963c <UART_SetConfig+0x348>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a56      	ldr	r2, [pc, #344]	; (80095cc <UART_SetConfig+0x2d8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d120      	bne.n	80094ba <UART_SetConfig+0x1c6>
 8009478:	4b51      	ldr	r3, [pc, #324]	; (80095c0 <UART_SetConfig+0x2cc>)
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009482:	2bc0      	cmp	r3, #192	; 0xc0
 8009484:	d013      	beq.n	80094ae <UART_SetConfig+0x1ba>
 8009486:	2bc0      	cmp	r3, #192	; 0xc0
 8009488:	d814      	bhi.n	80094b4 <UART_SetConfig+0x1c0>
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d009      	beq.n	80094a2 <UART_SetConfig+0x1ae>
 800948e:	2b80      	cmp	r3, #128	; 0x80
 8009490:	d810      	bhi.n	80094b4 <UART_SetConfig+0x1c0>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <UART_SetConfig+0x1a8>
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d006      	beq.n	80094a8 <UART_SetConfig+0x1b4>
 800949a:	e00b      	b.n	80094b4 <UART_SetConfig+0x1c0>
 800949c:	2300      	movs	r3, #0
 800949e:	77fb      	strb	r3, [r7, #31]
 80094a0:	e0cc      	b.n	800963c <UART_SetConfig+0x348>
 80094a2:	2302      	movs	r3, #2
 80094a4:	77fb      	strb	r3, [r7, #31]
 80094a6:	e0c9      	b.n	800963c <UART_SetConfig+0x348>
 80094a8:	2304      	movs	r3, #4
 80094aa:	77fb      	strb	r3, [r7, #31]
 80094ac:	e0c6      	b.n	800963c <UART_SetConfig+0x348>
 80094ae:	2308      	movs	r3, #8
 80094b0:	77fb      	strb	r3, [r7, #31]
 80094b2:	e0c3      	b.n	800963c <UART_SetConfig+0x348>
 80094b4:	2310      	movs	r3, #16
 80094b6:	77fb      	strb	r3, [r7, #31]
 80094b8:	e0c0      	b.n	800963c <UART_SetConfig+0x348>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a44      	ldr	r2, [pc, #272]	; (80095d0 <UART_SetConfig+0x2dc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d125      	bne.n	8009510 <UART_SetConfig+0x21c>
 80094c4:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <UART_SetConfig+0x2cc>)
 80094c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d2:	d017      	beq.n	8009504 <UART_SetConfig+0x210>
 80094d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d8:	d817      	bhi.n	800950a <UART_SetConfig+0x216>
 80094da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094de:	d00b      	beq.n	80094f8 <UART_SetConfig+0x204>
 80094e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e4:	d811      	bhi.n	800950a <UART_SetConfig+0x216>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <UART_SetConfig+0x1fe>
 80094ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ee:	d006      	beq.n	80094fe <UART_SetConfig+0x20a>
 80094f0:	e00b      	b.n	800950a <UART_SetConfig+0x216>
 80094f2:	2300      	movs	r3, #0
 80094f4:	77fb      	strb	r3, [r7, #31]
 80094f6:	e0a1      	b.n	800963c <UART_SetConfig+0x348>
 80094f8:	2302      	movs	r3, #2
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e09e      	b.n	800963c <UART_SetConfig+0x348>
 80094fe:	2304      	movs	r3, #4
 8009500:	77fb      	strb	r3, [r7, #31]
 8009502:	e09b      	b.n	800963c <UART_SetConfig+0x348>
 8009504:	2308      	movs	r3, #8
 8009506:	77fb      	strb	r3, [r7, #31]
 8009508:	e098      	b.n	800963c <UART_SetConfig+0x348>
 800950a:	2310      	movs	r3, #16
 800950c:	77fb      	strb	r3, [r7, #31]
 800950e:	e095      	b.n	800963c <UART_SetConfig+0x348>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2f      	ldr	r2, [pc, #188]	; (80095d4 <UART_SetConfig+0x2e0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d125      	bne.n	8009566 <UART_SetConfig+0x272>
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <UART_SetConfig+0x2cc>)
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009528:	d017      	beq.n	800955a <UART_SetConfig+0x266>
 800952a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800952e:	d817      	bhi.n	8009560 <UART_SetConfig+0x26c>
 8009530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009534:	d00b      	beq.n	800954e <UART_SetConfig+0x25a>
 8009536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953a:	d811      	bhi.n	8009560 <UART_SetConfig+0x26c>
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <UART_SetConfig+0x254>
 8009540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009544:	d006      	beq.n	8009554 <UART_SetConfig+0x260>
 8009546:	e00b      	b.n	8009560 <UART_SetConfig+0x26c>
 8009548:	2301      	movs	r3, #1
 800954a:	77fb      	strb	r3, [r7, #31]
 800954c:	e076      	b.n	800963c <UART_SetConfig+0x348>
 800954e:	2302      	movs	r3, #2
 8009550:	77fb      	strb	r3, [r7, #31]
 8009552:	e073      	b.n	800963c <UART_SetConfig+0x348>
 8009554:	2304      	movs	r3, #4
 8009556:	77fb      	strb	r3, [r7, #31]
 8009558:	e070      	b.n	800963c <UART_SetConfig+0x348>
 800955a:	2308      	movs	r3, #8
 800955c:	77fb      	strb	r3, [r7, #31]
 800955e:	e06d      	b.n	800963c <UART_SetConfig+0x348>
 8009560:	2310      	movs	r3, #16
 8009562:	77fb      	strb	r3, [r7, #31]
 8009564:	e06a      	b.n	800963c <UART_SetConfig+0x348>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1b      	ldr	r2, [pc, #108]	; (80095d8 <UART_SetConfig+0x2e4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d138      	bne.n	80095e2 <UART_SetConfig+0x2ee>
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <UART_SetConfig+0x2cc>)
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009576:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800957a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800957e:	d017      	beq.n	80095b0 <UART_SetConfig+0x2bc>
 8009580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009584:	d82a      	bhi.n	80095dc <UART_SetConfig+0x2e8>
 8009586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800958a:	d00b      	beq.n	80095a4 <UART_SetConfig+0x2b0>
 800958c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009590:	d824      	bhi.n	80095dc <UART_SetConfig+0x2e8>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <UART_SetConfig+0x2aa>
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959a:	d006      	beq.n	80095aa <UART_SetConfig+0x2b6>
 800959c:	e01e      	b.n	80095dc <UART_SetConfig+0x2e8>
 800959e:	2300      	movs	r3, #0
 80095a0:	77fb      	strb	r3, [r7, #31]
 80095a2:	e04b      	b.n	800963c <UART_SetConfig+0x348>
 80095a4:	2302      	movs	r3, #2
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e048      	b.n	800963c <UART_SetConfig+0x348>
 80095aa:	2304      	movs	r3, #4
 80095ac:	77fb      	strb	r3, [r7, #31]
 80095ae:	e045      	b.n	800963c <UART_SetConfig+0x348>
 80095b0:	2308      	movs	r3, #8
 80095b2:	77fb      	strb	r3, [r7, #31]
 80095b4:	e042      	b.n	800963c <UART_SetConfig+0x348>
 80095b6:	bf00      	nop
 80095b8:	efff69f3 	.word	0xefff69f3
 80095bc:	40011000 	.word	0x40011000
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40004400 	.word	0x40004400
 80095c8:	40004800 	.word	0x40004800
 80095cc:	40004c00 	.word	0x40004c00
 80095d0:	40005000 	.word	0x40005000
 80095d4:	40011400 	.word	0x40011400
 80095d8:	40007800 	.word	0x40007800
 80095dc:	2310      	movs	r3, #16
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e02c      	b.n	800963c <UART_SetConfig+0x348>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a72      	ldr	r2, [pc, #456]	; (80097b0 <UART_SetConfig+0x4bc>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d125      	bne.n	8009638 <UART_SetConfig+0x344>
 80095ec:	4b71      	ldr	r3, [pc, #452]	; (80097b4 <UART_SetConfig+0x4c0>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095fa:	d017      	beq.n	800962c <UART_SetConfig+0x338>
 80095fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009600:	d817      	bhi.n	8009632 <UART_SetConfig+0x33e>
 8009602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009606:	d00b      	beq.n	8009620 <UART_SetConfig+0x32c>
 8009608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800960c:	d811      	bhi.n	8009632 <UART_SetConfig+0x33e>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <UART_SetConfig+0x326>
 8009612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009616:	d006      	beq.n	8009626 <UART_SetConfig+0x332>
 8009618:	e00b      	b.n	8009632 <UART_SetConfig+0x33e>
 800961a:	2300      	movs	r3, #0
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e00d      	b.n	800963c <UART_SetConfig+0x348>
 8009620:	2302      	movs	r3, #2
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e00a      	b.n	800963c <UART_SetConfig+0x348>
 8009626:	2304      	movs	r3, #4
 8009628:	77fb      	strb	r3, [r7, #31]
 800962a:	e007      	b.n	800963c <UART_SetConfig+0x348>
 800962c:	2308      	movs	r3, #8
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	e004      	b.n	800963c <UART_SetConfig+0x348>
 8009632:	2310      	movs	r3, #16
 8009634:	77fb      	strb	r3, [r7, #31]
 8009636:	e001      	b.n	800963c <UART_SetConfig+0x348>
 8009638:	2310      	movs	r3, #16
 800963a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009644:	d15b      	bne.n	80096fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009646:	7ffb      	ldrb	r3, [r7, #31]
 8009648:	2b08      	cmp	r3, #8
 800964a:	d828      	bhi.n	800969e <UART_SetConfig+0x3aa>
 800964c:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0x360>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	0800969f 	.word	0x0800969f
 8009664:	0800968f 	.word	0x0800968f
 8009668:	0800969f 	.word	0x0800969f
 800966c:	0800969f 	.word	0x0800969f
 8009670:	0800969f 	.word	0x0800969f
 8009674:	08009697 	.word	0x08009697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fd fb7a 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 800967c:	61b8      	str	r0, [r7, #24]
        break;
 800967e:	e013      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009680:	f7fd fb8a 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 8009684:	61b8      	str	r0, [r7, #24]
        break;
 8009686:	e00f      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009688:	4b4b      	ldr	r3, [pc, #300]	; (80097b8 <UART_SetConfig+0x4c4>)
 800968a:	61bb      	str	r3, [r7, #24]
        break;
 800968c:	e00c      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800968e:	f7fd fa5f 	bl	8006b50 <HAL_RCC_GetSysClockFreq>
 8009692:	61b8      	str	r0, [r7, #24]
        break;
 8009694:	e008      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969a:	61bb      	str	r3, [r7, #24]
        break;
 800969c:	e004      	b.n	80096a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	77bb      	strb	r3, [r7, #30]
        break;
 80096a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d074      	beq.n	8009798 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	005a      	lsls	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	441a      	add	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d916      	bls.n	80096f8 <UART_SetConfig+0x404>
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d0:	d212      	bcs.n	80096f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	085b      	lsrs	r3, r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	89fa      	ldrh	r2, [r7, #14]
 80096f4:	60da      	str	r2, [r3, #12]
 80096f6:	e04f      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	77bb      	strb	r3, [r7, #30]
 80096fc:	e04c      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096fe:	7ffb      	ldrb	r3, [r7, #31]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d828      	bhi.n	8009756 <UART_SetConfig+0x462>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x418>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009731 	.word	0x08009731
 8009710:	08009739 	.word	0x08009739
 8009714:	08009741 	.word	0x08009741
 8009718:	08009757 	.word	0x08009757
 800971c:	08009747 	.word	0x08009747
 8009720:	08009757 	.word	0x08009757
 8009724:	08009757 	.word	0x08009757
 8009728:	08009757 	.word	0x08009757
 800972c:	0800974f 	.word	0x0800974f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fd fb1e 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8009734:	61b8      	str	r0, [r7, #24]
        break;
 8009736:	e013      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fd fb2e 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 800973c:	61b8      	str	r0, [r7, #24]
        break;
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009740:	4b1d      	ldr	r3, [pc, #116]	; (80097b8 <UART_SetConfig+0x4c4>)
 8009742:	61bb      	str	r3, [r7, #24]
        break;
 8009744:	e00c      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009746:	f7fd fa03 	bl	8006b50 <HAL_RCC_GetSysClockFreq>
 800974a:	61b8      	str	r0, [r7, #24]
        break;
 800974c:	e008      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009752:	61bb      	str	r3, [r7, #24]
        break;
 8009754:	e004      	b.n	8009760 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	77bb      	strb	r3, [r7, #30]
        break;
 800975e:	bf00      	nop
    }

    if (pclk != 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d018      	beq.n	8009798 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	085a      	lsrs	r2, r3, #1
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	441a      	add	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b0f      	cmp	r3, #15
 800977e:	d909      	bls.n	8009794 <UART_SetConfig+0x4a0>
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009786:	d205      	bcs.n	8009794 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e001      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80097a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40007c00 	.word	0x40007c00
 80097b4:	40023800 	.word	0x40023800
 80097b8:	00f42400 	.word	0x00f42400

080097bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ba:	d10a      	bne.n	80098d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009910:	f7f8 fc84 	bl	800221c <HAL_GetTick>
 8009914:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d10e      	bne.n	8009942 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f81b 	bl	800996e <UART_WaitOnFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e011      	b.n	8009966 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2220      	movs	r2, #32
 800994c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b09c      	sub	sp, #112	; 0x70
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	603b      	str	r3, [r7, #0]
 800997a:	4613      	mov	r3, r2
 800997c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800997e:	e0a7      	b.n	8009ad0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009986:	f000 80a3 	beq.w	8009ad0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998a:	f7f8 fc47 	bl	800221c <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009996:	429a      	cmp	r2, r3
 8009998:	d302      	bcc.n	80099a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800999a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800999c:	2b00      	cmp	r3, #0
 800999e:	d13f      	bne.n	8009a20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099b4:	667b      	str	r3, [r7, #100]	; 0x64
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e6      	bne.n	80099a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	663b      	str	r3, [r7, #96]	; 0x60
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80099f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e5      	bne.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e068      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d050      	beq.n	8009ad0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a3c:	d148      	bne.n	8009ad0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
 8009a68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a9a:	623a      	str	r2, [r7, #32]
 8009a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	69f9      	ldr	r1, [r7, #28]
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e010      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69da      	ldr	r2, [r3, #28]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	bf0c      	ite	eq
 8009ae0:	2301      	moveq	r3, #1
 8009ae2:	2300      	movne	r3, #0
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	f43f af48 	beq.w	8009980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3770      	adds	r7, #112	; 0x70
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	f023 0101 	bic.w	r1, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d102      	bne.n	8009b2c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009b26:	2340      	movs	r3, #64	; 0x40
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e001      	b.n	8009b30 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009b3c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009b42:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009b48:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009b4e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009b54:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009b5a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009b60:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009b66:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009b6c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009b94:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <FMC_NORSRAM_Init+0x11c>)
 8009b96:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b9e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ba6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009bae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	ea02 0103 	and.w	r1, r2, r3
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	4319      	orrs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd8:	d10c      	bne.n	8009bf4 <FMC_NORSRAM_Init+0xf8>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d008      	beq.n	8009bf4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	0008fb7f 	.word	0x0008fb7f

08009c1c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c32:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	431a      	orrs	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	431a      	orrs	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	051b      	lsls	r3, r3, #20
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	3b02      	subs	r3, #2
 8009c62:	061b      	lsls	r3, r3, #24
 8009c64:	431a      	orrs	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	3201      	adds	r2, #1
 8009c70:	4319      	orrs	r1, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c84:	d113      	bne.n	8009cae <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c8e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	051b      	lsls	r3, r3, #20
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	371c      	adds	r7, #28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cd0:	d11d      	bne.n	8009d0e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	6811      	ldr	r1, [r2, #0]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	6852      	ldr	r2, [r2, #4]
 8009ce6:	0112      	lsls	r2, r2, #4
 8009ce8:	4311      	orrs	r1, r2
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	6892      	ldr	r2, [r2, #8]
 8009cee:	0212      	lsls	r2, r2, #8
 8009cf0:	4311      	orrs	r1, r2
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	6992      	ldr	r2, [r2, #24]
 8009cf6:	4311      	orrs	r1, r2
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	68d2      	ldr	r2, [r2, #12]
 8009cfc:	0412      	lsls	r2, r2, #16
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	ea43 0102 	orr.w	r1, r3, r2
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d0c:	e005      	b.n	8009d1a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	cff00000 	.word	0xcff00000

08009d2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	b480      	push	{r7}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	f107 001c 	add.w	r0, r7, #28
 8009d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009d4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <SDMMC_Init+0x54>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	b004      	add	sp, #16
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	ffff8100 	.word	0xffff8100

08009d84 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0303 	and.w	r3, r3, #3
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e16:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e1c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <SDMMC_SendCommand+0x50>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	fffff000 	.word	0xfffff000

08009e4c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	b2db      	uxtb	r3, r3
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3314      	adds	r3, #20
 8009e74:	461a      	mov	r2, r3
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	4413      	add	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
}  
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009eb2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009eb8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009ebe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	431a      	orrs	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0

}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ef2:	2310      	movs	r3, #16
 8009ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ef6:	2340      	movs	r3, #64	; 0x40
 8009ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f04:	f107 0308 	add.w	r3, r7, #8
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff ff74 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f14:	2110      	movs	r1, #16
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f9d6 	bl	800a2c8 <SDMMC_GetCmdResp1>
 8009f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f36:	2311      	movs	r3, #17
 8009f38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f3a:	2340      	movs	r3, #64	; 0x40
 8009f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f48:	f107 0308 	add.w	r3, r7, #8
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff ff52 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f58:	2111      	movs	r1, #17
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9b4 	bl	800a2c8 <SDMMC_GetCmdResp1>
 8009f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f62:	69fb      	ldr	r3, [r7, #28]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3720      	adds	r7, #32
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009f7a:	2312      	movs	r3, #18
 8009f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f7e:	2340      	movs	r3, #64	; 0x40
 8009f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f8c:	f107 0308 	add.w	r3, r7, #8
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff ff30 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9c:	2112      	movs	r1, #18
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f992 	bl	800a2c8 <SDMMC_GetCmdResp1>
 8009fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009fbe:	2318      	movs	r3, #24
 8009fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fc2:	2340      	movs	r3, #64	; 0x40
 8009fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff ff0e 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe0:	2118      	movs	r1, #24
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f970 	bl	800a2c8 <SDMMC_GetCmdResp1>
 8009fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fea:	69fb      	ldr	r3, [r7, #28]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a002:	2319      	movs	r3, #25
 800a004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a014:	f107 0308 	add.w	r3, r7, #8
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff feec 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a020:	f241 3288 	movw	r2, #5000	; 0x1388
 800a024:	2119      	movs	r1, #25
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f94e 	bl	800a2c8 <SDMMC_GetCmdResp1>
 800a02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a02e:	69fb      	ldr	r3, [r7, #28]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a044:	230c      	movs	r3, #12
 800a046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a048:	2340      	movs	r3, #64	; 0x40
 800a04a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a054:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a056:	f107 0308 	add.w	r3, r7, #8
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fecb 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a062:	4a05      	ldr	r2, [pc, #20]	; (800a078 <SDMMC_CmdStopTransfer+0x40>)
 800a064:	210c      	movs	r1, #12
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f92e 	bl	800a2c8 <SDMMC_GetCmdResp1>
 800a06c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a06e:	69fb      	ldr	r3, [r7, #28]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	05f5e100 	.word	0x05f5e100

0800a07c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08a      	sub	sp, #40	; 0x28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a08c:	2307      	movs	r3, #7
 800a08e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a09e:	f107 0310 	add.w	r3, r7, #16
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7ff fea7 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a0aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ae:	2107      	movs	r1, #7
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f909 	bl	800a2c8 <SDMMC_GetCmdResp1>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3728      	adds	r7, #40	; 0x28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0e0:	f107 0308 	add.w	r3, r7, #8
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fe86 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb23 	bl	800a738 <SDMMC_GetCmdError>
 800a0f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f4:	69fb      	ldr	r3, [r7, #28]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b088      	sub	sp, #32
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a106:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a10a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a10c:	2308      	movs	r3, #8
 800a10e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a11c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fe67 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fab6 	bl	800a69c <SDMMC_GetCmdResp7>
 800a130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a132:	69fb      	ldr	r3, [r7, #28]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3720      	adds	r7, #32
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a14a:	2337      	movs	r3, #55	; 0x37
 800a14c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a15c:	f107 0308 	add.w	r3, r7, #8
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff fe48 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	2137      	movs	r1, #55	; 0x37
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f8aa 	bl	800a2c8 <SDMMC_GetCmdResp1>
 800a174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a176:	69fb      	ldr	r3, [r7, #28]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3720      	adds	r7, #32
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <SDMMC_CmdAppOperCommand+0x44>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a192:	2329      	movs	r3, #41	; 0x29
 800a194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1a4:	f107 0308 	add.w	r3, r7, #8
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fe24 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f9bf 	bl	800a534 <SDMMC_GetCmdResp3>
 800a1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	80100000 	.word	0x80100000

0800a1c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1d8:	23c0      	movs	r3, #192	; 0xc0
 800a1da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1e6:	f107 0308 	add.w	r3, r7, #8
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff fe03 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f956 	bl	800a4a4 <SDMMC_GetCmdResp2>
 800a1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a212:	2309      	movs	r3, #9
 800a214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a216:	23c0      	movs	r3, #192	; 0xc0
 800a218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a21a:	2300      	movs	r3, #0
 800a21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a224:	f107 0308 	add.w	r3, r7, #8
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff fde4 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f937 	bl	800a4a4 <SDMMC_GetCmdResp2>
 800a236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a238:	69fb      	ldr	r3, [r7, #28]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b088      	sub	sp, #32
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a250:	2303      	movs	r3, #3
 800a252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff fdc5 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	2103      	movs	r1, #3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f99c 	bl	800a5b0 <SDMMC_GetCmdResp6>
 800a278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27a:	69fb      	ldr	r3, [r7, #28]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a292:	230d      	movs	r3, #13
 800a294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a296:	2340      	movs	r3, #64	; 0x40
 800a298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2a4:	f107 0308 	add.w	r3, r7, #8
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff fda4 	bl	8009df8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b4:	210d      	movs	r1, #13
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f806 	bl	800a2c8 <SDMMC_GetCmdResp1>
 800a2bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2be:	69fb      	ldr	r3, [r7, #28]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a2d6:	4b70      	ldr	r3, [pc, #448]	; (800a498 <SDMMC_GetCmdResp1+0x1d0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a70      	ldr	r2, [pc, #448]	; (800a49c <SDMMC_GetCmdResp1+0x1d4>)
 800a2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e0:	0a5a      	lsrs	r2, r3, #9
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	fb02 f303 	mul.w	r3, r2, r3
 800a2e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	1e5a      	subs	r2, r3, #1
 800a2ee:	61fa      	str	r2, [r7, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2f8:	e0c9      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0ef      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x22>
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1ea      	bne.n	800a2ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2204      	movs	r2, #4
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a326:	2304      	movs	r3, #4
 800a328:	e0b1      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0a6      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	22c5      	movs	r2, #197	; 0xc5
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7ff fd80 	bl	8009e4c <SDMMC_GetCommandResponse>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	4293      	cmp	r3, r2
 800a354:	d001      	beq.n	800a35a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a356:	2301      	movs	r3, #1
 800a358:	e099      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a35a:	2100      	movs	r1, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fd82 	bl	8009e66 <SDMMC_GetResponse>
 800a362:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4b4e      	ldr	r3, [pc, #312]	; (800a4a0 <SDMMC_GetCmdResp1+0x1d8>)
 800a368:	4013      	ands	r3, r2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a36e:	2300      	movs	r3, #0
 800a370:	e08d      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	da02      	bge.n	800a37e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a37c:	e087      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	e080      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a396:	2380      	movs	r3, #128	; 0x80
 800a398:	e079      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3a8:	e071      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3b8:	e069      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c8:	e061      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3d8:	e059      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e8:	e051      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3f8:	e049      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a408:	e041      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a418:	e039      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a428:	e031      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a438:	e029      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a444:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a448:	e021      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a454:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a458:	e019      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a468:	e011      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a474:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a478:	e009      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a484:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a488:	e001      	b.n	800a48e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a48a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20000000 	.word	0x20000000
 800a49c:	10624dd3 	.word	0x10624dd3
 800a4a0:	fdffe008 	.word	0xfdffe008

0800a4a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4ac:	4b1f      	ldr	r3, [pc, #124]	; (800a52c <SDMMC_GetCmdResp2+0x88>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a1f      	ldr	r2, [pc, #124]	; (800a530 <SDMMC_GetCmdResp2+0x8c>)
 800a4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b6:	0a5b      	lsrs	r3, r3, #9
 800a4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4bc:	fb02 f303 	mul.w	r3, r2, r3
 800a4c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1e5a      	subs	r2, r3, #1
 800a4c6:	60fa      	str	r2, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4d0:	e026      	b.n	800a520 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0ef      	beq.n	800a4c2 <SDMMC_GetCmdResp2+0x1e>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1ea      	bne.n	800a4c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d004      	beq.n	800a502 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4fe:	2304      	movs	r3, #4
 800a500:	e00e      	b.n	800a520 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a514:	2301      	movs	r3, #1
 800a516:	e003      	b.n	800a520 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	22c5      	movs	r2, #197	; 0xc5
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	20000000 	.word	0x20000000
 800a530:	10624dd3 	.word	0x10624dd3

0800a534 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a53c:	4b1a      	ldr	r3, [pc, #104]	; (800a5a8 <SDMMC_GetCmdResp3+0x74>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1a      	ldr	r2, [pc, #104]	; (800a5ac <SDMMC_GetCmdResp3+0x78>)
 800a542:	fba2 2303 	umull	r2, r3, r2, r3
 800a546:	0a5b      	lsrs	r3, r3, #9
 800a548:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54c:	fb02 f303 	mul.w	r3, r2, r3
 800a550:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1e5a      	subs	r2, r3, #1
 800a556:	60fa      	str	r2, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a560:	e01b      	b.n	800a59a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0ef      	beq.n	800a552 <SDMMC_GetCmdResp3+0x1e>
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1ea      	bne.n	800a552 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2204      	movs	r2, #4
 800a58c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a58e:	2304      	movs	r3, #4
 800a590:	e003      	b.n	800a59a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	22c5      	movs	r2, #197	; 0xc5
 800a596:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000000 	.word	0x20000000
 800a5ac:	10624dd3 	.word	0x10624dd3

0800a5b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5be:	4b35      	ldr	r3, [pc, #212]	; (800a694 <SDMMC_GetCmdResp6+0xe4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a35      	ldr	r2, [pc, #212]	; (800a698 <SDMMC_GetCmdResp6+0xe8>)
 800a5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c8:	0a5b      	lsrs	r3, r3, #9
 800a5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ce:	fb02 f303 	mul.w	r3, r2, r3
 800a5d2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	1e5a      	subs	r2, r3, #1
 800a5d8:	61fa      	str	r2, [r7, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5e2:	e052      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0ef      	beq.n	800a5d4 <SDMMC_GetCmdResp6+0x24>
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1ea      	bne.n	800a5d4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2204      	movs	r2, #4
 800a60e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a610:	2304      	movs	r3, #4
 800a612:	e03a      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2201      	movs	r2, #1
 800a624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a626:	2301      	movs	r3, #1
 800a628:	e02f      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff fc0e 	bl	8009e4c <SDMMC_GetCommandResponse>
 800a630:	4603      	mov	r3, r0
 800a632:	461a      	mov	r2, r3
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	4293      	cmp	r3, r2
 800a638:	d001      	beq.n	800a63e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e025      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	22c5      	movs	r2, #197	; 0xc5
 800a642:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a644:	2100      	movs	r1, #0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fc0d 	bl	8009e66 <SDMMC_GetResponse>
 800a64c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a662:	2300      	movs	r3, #0
 800a664:	e011      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a674:	e009      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a684:	e001      	b.n	800a68a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000000 	.word	0x20000000
 800a698:	10624dd3 	.word	0x10624dd3

0800a69c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6a4:	4b22      	ldr	r3, [pc, #136]	; (800a730 <SDMMC_GetCmdResp7+0x94>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a22      	ldr	r2, [pc, #136]	; (800a734 <SDMMC_GetCmdResp7+0x98>)
 800a6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ae:	0a5b      	lsrs	r3, r3, #9
 800a6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b4:	fb02 f303 	mul.w	r3, r2, r3
 800a6b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	60fa      	str	r2, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6c8:	e02c      	b.n	800a724 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0ef      	beq.n	800a6ba <SDMMC_GetCmdResp7+0x1e>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1ea      	bne.n	800a6ba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d004      	beq.n	800a6fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6f6:	2304      	movs	r3, #4
 800a6f8:	e014      	b.n	800a724 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e009      	b.n	800a724 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2240      	movs	r2, #64	; 0x40
 800a720:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a722:	2300      	movs	r3, #0
  
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	20000000 	.word	0x20000000
 800a734:	10624dd3 	.word	0x10624dd3

0800a738 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a740:	4b11      	ldr	r3, [pc, #68]	; (800a788 <SDMMC_GetCmdError+0x50>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a11      	ldr	r2, [pc, #68]	; (800a78c <SDMMC_GetCmdError+0x54>)
 800a746:	fba2 2303 	umull	r2, r3, r2, r3
 800a74a:	0a5b      	lsrs	r3, r3, #9
 800a74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a750:	fb02 f303 	mul.w	r3, r2, r3
 800a754:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	1e5a      	subs	r2, r3, #1
 800a75a:	60fa      	str	r2, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a764:	e009      	b.n	800a77a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0f1      	beq.n	800a756 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	22c5      	movs	r2, #197	; 0xc5
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000000 	.word	0x20000000
 800a78c:	10624dd3 	.word	0x10624dd3

0800a790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a790:	b084      	sub	sp, #16
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 001c 	add.w	r0, r7, #28
 800a79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d120      	bne.n	800a7ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	4b20      	ldr	r3, [pc, #128]	; (800a83c <USB_CoreInit+0xac>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d105      	bne.n	800a7de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 fc0e 	bl	800c000 <USB_CoreReset>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
 800a7e8:	e010      	b.n	800a80c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 fc02 	bl	800c000 <USB_CoreReset>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d10b      	bne.n	800a82a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f043 0206 	orr.w	r2, r3, #6
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f043 0220 	orr.w	r2, r3, #32
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a836:	b004      	add	sp, #16
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	ffbdffbf 	.word	0xffbdffbf

0800a840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	4613      	mov	r3, r2
 800a84c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d165      	bne.n	800a920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4a41      	ldr	r2, [pc, #260]	; (800a95c <USB_SetTurnaroundTime+0x11c>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d906      	bls.n	800a86a <USB_SetTurnaroundTime+0x2a>
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4a40      	ldr	r2, [pc, #256]	; (800a960 <USB_SetTurnaroundTime+0x120>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d202      	bcs.n	800a86a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a864:	230f      	movs	r3, #15
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e062      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4a3c      	ldr	r2, [pc, #240]	; (800a960 <USB_SetTurnaroundTime+0x120>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d306      	bcc.n	800a880 <USB_SetTurnaroundTime+0x40>
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	4a3b      	ldr	r2, [pc, #236]	; (800a964 <USB_SetTurnaroundTime+0x124>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d202      	bcs.n	800a880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a87a:	230e      	movs	r3, #14
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	e057      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	4a38      	ldr	r2, [pc, #224]	; (800a964 <USB_SetTurnaroundTime+0x124>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d306      	bcc.n	800a896 <USB_SetTurnaroundTime+0x56>
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	4a37      	ldr	r2, [pc, #220]	; (800a968 <USB_SetTurnaroundTime+0x128>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d202      	bcs.n	800a896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a890:	230d      	movs	r3, #13
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	e04c      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	4a33      	ldr	r2, [pc, #204]	; (800a968 <USB_SetTurnaroundTime+0x128>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d306      	bcc.n	800a8ac <USB_SetTurnaroundTime+0x6c>
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	4a32      	ldr	r2, [pc, #200]	; (800a96c <USB_SetTurnaroundTime+0x12c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d802      	bhi.n	800a8ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8a6:	230c      	movs	r3, #12
 800a8a8:	617b      	str	r3, [r7, #20]
 800a8aa:	e041      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	4a2f      	ldr	r2, [pc, #188]	; (800a96c <USB_SetTurnaroundTime+0x12c>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d906      	bls.n	800a8c2 <USB_SetTurnaroundTime+0x82>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4a2e      	ldr	r2, [pc, #184]	; (800a970 <USB_SetTurnaroundTime+0x130>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d802      	bhi.n	800a8c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8bc:	230b      	movs	r3, #11
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	e036      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	4a2a      	ldr	r2, [pc, #168]	; (800a970 <USB_SetTurnaroundTime+0x130>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d906      	bls.n	800a8d8 <USB_SetTurnaroundTime+0x98>
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	4a29      	ldr	r2, [pc, #164]	; (800a974 <USB_SetTurnaroundTime+0x134>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d802      	bhi.n	800a8d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8d2:	230a      	movs	r3, #10
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	e02b      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4a26      	ldr	r2, [pc, #152]	; (800a974 <USB_SetTurnaroundTime+0x134>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d906      	bls.n	800a8ee <USB_SetTurnaroundTime+0xae>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4a25      	ldr	r2, [pc, #148]	; (800a978 <USB_SetTurnaroundTime+0x138>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d202      	bcs.n	800a8ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8e8:	2309      	movs	r3, #9
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e020      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4a21      	ldr	r2, [pc, #132]	; (800a978 <USB_SetTurnaroundTime+0x138>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d306      	bcc.n	800a904 <USB_SetTurnaroundTime+0xc4>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4a20      	ldr	r2, [pc, #128]	; (800a97c <USB_SetTurnaroundTime+0x13c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d802      	bhi.n	800a904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a8fe:	2308      	movs	r3, #8
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e015      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	4a1d      	ldr	r2, [pc, #116]	; (800a97c <USB_SetTurnaroundTime+0x13c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d906      	bls.n	800a91a <USB_SetTurnaroundTime+0xda>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4a1c      	ldr	r2, [pc, #112]	; (800a980 <USB_SetTurnaroundTime+0x140>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d202      	bcs.n	800a91a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a914:	2307      	movs	r3, #7
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	e00a      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a91a:	2306      	movs	r3, #6
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	e007      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a926:	2309      	movs	r3, #9
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	e001      	b.n	800a930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a92c:	2309      	movs	r3, #9
 800a92e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	029b      	lsls	r3, r3, #10
 800a944:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a948:	431a      	orrs	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	371c      	adds	r7, #28
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	00d8acbf 	.word	0x00d8acbf
 800a960:	00e4e1c0 	.word	0x00e4e1c0
 800a964:	00f42400 	.word	0x00f42400
 800a968:	01067380 	.word	0x01067380
 800a96c:	011a499f 	.word	0x011a499f
 800a970:	01312cff 	.word	0x01312cff
 800a974:	014ca43f 	.word	0x014ca43f
 800a978:	016e3600 	.word	0x016e3600
 800a97c:	01a6ab1f 	.word	0x01a6ab1f
 800a980:	01e84800 	.word	0x01e84800

0800a984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f043 0201 	orr.w	r2, r3, #1
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f023 0201 	bic.w	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d115      	bne.n	800aa16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f7f7 fc1c 	bl	8002234 <HAL_Delay>
      ms++;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 fa6c 	bl	800bee0 <USB_GetMode>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d01e      	beq.n	800aa4c <USB_SetCurrentMode+0x84>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b31      	cmp	r3, #49	; 0x31
 800aa12:	d9f0      	bls.n	800a9f6 <USB_SetCurrentMode+0x2e>
 800aa14:	e01a      	b.n	800aa4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d115      	bne.n	800aa48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa28:	2001      	movs	r0, #1
 800aa2a:	f7f7 fc03 	bl	8002234 <HAL_Delay>
      ms++;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fa53 	bl	800bee0 <USB_GetMode>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <USB_SetCurrentMode+0x84>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b31      	cmp	r3, #49	; 0x31
 800aa44:	d9f0      	bls.n	800aa28 <USB_SetCurrentMode+0x60>
 800aa46:	e001      	b.n	800aa4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e005      	b.n	800aa58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b32      	cmp	r3, #50	; 0x32
 800aa50:	d101      	bne.n	800aa56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa60:	b084      	sub	sp, #16
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b086      	sub	sp, #24
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	e009      	b.n	800aa94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	3340      	adds	r3, #64	; 0x40
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	3301      	adds	r3, #1
 800aa92:	613b      	str	r3, [r7, #16]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2b0e      	cmp	r3, #14
 800aa98:	d9f2      	bls.n	800aa80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d11c      	bne.n	800aada <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaae:	f043 0302 	orr.w	r3, r3, #2
 800aab2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e005      	b.n	800aae6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaec:	461a      	mov	r2, r3
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf8:	4619      	mov	r1, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	461a      	mov	r2, r3
 800ab02:	680b      	ldr	r3, [r1, #0]
 800ab04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d10c      	bne.n	800ab26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab12:	2100      	movs	r1, #0
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f965 	bl	800ade4 <USB_SetDevSpeed>
 800ab1a:	e008      	b.n	800ab2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f960 	bl	800ade4 <USB_SetDevSpeed>
 800ab24:	e003      	b.n	800ab2e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab26:	2103      	movs	r1, #3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f95b 	bl	800ade4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab2e:	2110      	movs	r1, #16
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8f3 	bl	800ad1c <USB_FlushTxFifo>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f91f 	bl	800ad84 <USB_FlushRxFifo>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab56:	461a      	mov	r2, r3
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab62:	461a      	mov	r2, r3
 800ab64:	2300      	movs	r3, #0
 800ab66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	461a      	mov	r2, r3
 800ab70:	2300      	movs	r3, #0
 800ab72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	e043      	b.n	800ac02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab90:	d118      	bne.n	800abc4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	461a      	mov	r2, r3
 800aba6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	e013      	b.n	800abd6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abba:	461a      	mov	r2, r3
 800abbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	e008      	b.n	800abd6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd0:	461a      	mov	r2, r3
 800abd2:	2300      	movs	r3, #0
 800abd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe2:	461a      	mov	r2, r3
 800abe4:	2300      	movs	r3, #0
 800abe6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf4:	461a      	mov	r2, r3
 800abf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3301      	adds	r3, #1
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3b7      	bcc.n	800ab7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	e043      	b.n	800ac98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac26:	d118      	bne.n	800ac5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	e013      	b.n	800ac6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	461a      	mov	r2, r3
 800ac52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e008      	b.n	800ac6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac66:	461a      	mov	r2, r3
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	461a      	mov	r2, r3
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	3301      	adds	r3, #1
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d3b7      	bcc.n	800ac10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800acc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	f043 0210 	orr.w	r2, r3, #16
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	4b0e      	ldr	r3, [pc, #56]	; (800ad14 <USB_DevInit+0x2b4>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d005      	beq.n	800acf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f043 0208 	orr.w	r2, r3, #8
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d105      	bne.n	800ad04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	699a      	ldr	r2, [r3, #24]
 800acfc:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <USB_DevInit+0x2b8>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad10:	b004      	add	sp, #16
 800ad12:	4770      	bx	lr
 800ad14:	803c3800 	.word	0x803c3800
 800ad18:	40000004 	.word	0x40000004

0800ad1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4a13      	ldr	r2, [pc, #76]	; (800ad80 <USB_FlushTxFifo+0x64>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d901      	bls.n	800ad3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e01b      	b.n	800ad74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	daf2      	bge.n	800ad2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	019b      	lsls	r3, r3, #6
 800ad4c:	f043 0220 	orr.w	r2, r3, #32
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <USB_FlushTxFifo+0x64>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d901      	bls.n	800ad66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e006      	b.n	800ad74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d0f0      	beq.n	800ad54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	00030d40 	.word	0x00030d40

0800ad84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4a11      	ldr	r2, [pc, #68]	; (800ade0 <USB_FlushRxFifo+0x5c>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d901      	bls.n	800ada2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e018      	b.n	800add4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	daf2      	bge.n	800ad90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2210      	movs	r2, #16
 800adb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3301      	adds	r3, #1
 800adb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <USB_FlushRxFifo+0x5c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d901      	bls.n	800adc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e006      	b.n	800add4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b10      	cmp	r3, #16
 800add0:	d0f0      	beq.n	800adb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	00030d40 	.word	0x00030d40

0800ade4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	78fb      	ldrb	r3, [r7, #3]
 800adfe:	68f9      	ldr	r1, [r7, #12]
 800ae00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae04:	4313      	orrs	r3, r2
 800ae06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b087      	sub	sp, #28
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f003 0306 	and.w	r3, r3, #6
 800ae2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae36:	2300      	movs	r3, #0
 800ae38:	75fb      	strb	r3, [r7, #23]
 800ae3a:	e00a      	b.n	800ae52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d002      	beq.n	800ae48 <USB_GetDevSpeed+0x32>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b06      	cmp	r3, #6
 800ae46:	d102      	bne.n	800ae4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	75fb      	strb	r3, [r7, #23]
 800ae4c:	e001      	b.n	800ae52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae4e:	230f      	movs	r3, #15
 800ae50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	371c      	adds	r7, #28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d139      	bne.n	800aef0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	68f9      	ldr	r1, [r7, #12]
 800ae96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d153      	bne.n	800af5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	791b      	ldrb	r3, [r3, #4]
 800aece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	059b      	lsls	r3, r3, #22
 800aed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aed8:	431a      	orrs	r2, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	0159      	lsls	r1, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	440b      	add	r3, r1
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	4619      	mov	r1, r3
 800aee8:	4b20      	ldr	r3, [pc, #128]	; (800af6c <USB_ActivateEndpoint+0x10c>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	600b      	str	r3, [r1, #0]
 800aeee:	e035      	b.n	800af5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	69da      	ldr	r2, [r3, #28]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	68f9      	ldr	r1, [r7, #12]
 800af0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af0e:	4313      	orrs	r3, r2
 800af10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d119      	bne.n	800af5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	791b      	ldrb	r3, [r3, #4]
 800af42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af44:	430b      	orrs	r3, r1
 800af46:	431a      	orrs	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	0159      	lsls	r1, r3, #5
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	440b      	add	r3, r1
 800af50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af54:	4619      	mov	r1, r3
 800af56:	4b05      	ldr	r3, [pc, #20]	; (800af6c <USB_ActivateEndpoint+0x10c>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	10008000 	.word	0x10008000

0800af70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	785b      	ldrb	r3, [r3, #1]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d161      	bne.n	800b050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afa2:	d11f      	bne.n	800afe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	0151      	lsls	r1, r2, #5
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	440a      	add	r2, r1
 800afba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	0151      	lsls	r1, r2, #5
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	440a      	add	r2, r1
 800afda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	2101      	movs	r1, #1
 800aff6:	fa01 f303 	lsl.w	r3, r1, r3
 800affa:	b29b      	uxth	r3, r3
 800affc:	43db      	mvns	r3, r3
 800affe:	68f9      	ldr	r1, [r7, #12]
 800b000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b004:	4013      	ands	r3, r2
 800b006:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00e:	69da      	ldr	r2, [r3, #28]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f003 030f 	and.w	r3, r3, #15
 800b018:	2101      	movs	r1, #1
 800b01a:	fa01 f303 	lsl.w	r3, r1, r3
 800b01e:	b29b      	uxth	r3, r3
 800b020:	43db      	mvns	r3, r3
 800b022:	68f9      	ldr	r1, [r7, #12]
 800b024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b028:	4013      	ands	r3, r2
 800b02a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	0159      	lsls	r1, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	440b      	add	r3, r1
 800b042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b046:	4619      	mov	r1, r3
 800b048:	4b35      	ldr	r3, [pc, #212]	; (800b120 <USB_DeactivateEndpoint+0x1b0>)
 800b04a:	4013      	ands	r3, r2
 800b04c:	600b      	str	r3, [r1, #0]
 800b04e:	e060      	b.n	800b112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b066:	d11f      	bne.n	800b0a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b0be:	041b      	lsls	r3, r3, #16
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	68f9      	ldr	r1, [r7, #12]
 800b0c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d2:	69da      	ldr	r2, [r3, #28]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	2101      	movs	r1, #1
 800b0de:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e2:	041b      	lsls	r3, r3, #16
 800b0e4:	43db      	mvns	r3, r3
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	0159      	lsls	r1, r3, #5
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	440b      	add	r3, r1
 800b106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10a:	4619      	mov	r1, r3
 800b10c:	4b05      	ldr	r3, [pc, #20]	; (800b124 <USB_DeactivateEndpoint+0x1b4>)
 800b10e:	4013      	ands	r3, r2
 800b110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	ec337800 	.word	0xec337800
 800b124:	eff37800 	.word	0xeff37800

0800b128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	2b01      	cmp	r3, #1
 800b146:	f040 8163 	bne.w	800b410 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d132      	bne.n	800b1b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15e:	691a      	ldr	r2, [r3, #16]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	0159      	lsls	r1, r3, #5
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	440b      	add	r3, r1
 800b168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16c:	4619      	mov	r1, r3
 800b16e:	4ba5      	ldr	r3, [pc, #660]	; (800b404 <USB_EPStartXfer+0x2dc>)
 800b170:	4013      	ands	r3, r2
 800b172:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	69ba      	ldr	r2, [r7, #24]
 800b184:	0151      	lsls	r1, r2, #5
 800b186:	69fa      	ldr	r2, [r7, #28]
 800b188:	440a      	add	r2, r1
 800b18a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b18e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a0:	691a      	ldr	r2, [r3, #16]
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	0159      	lsls	r1, r3, #5
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	440b      	add	r3, r1
 800b1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4b95      	ldr	r3, [pc, #596]	; (800b408 <USB_EPStartXfer+0x2e0>)
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	610b      	str	r3, [r1, #16]
 800b1b6:	e074      	b.n	800b2a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	691a      	ldr	r2, [r3, #16]
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	0159      	lsls	r1, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	440b      	add	r3, r1
 800b1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4b8c      	ldr	r3, [pc, #560]	; (800b408 <USB_EPStartXfer+0x2e0>)
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	0159      	lsls	r1, r3, #5
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4b83      	ldr	r3, [pc, #524]	; (800b404 <USB_EPStartXfer+0x2dc>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	015a      	lsls	r2, r3, #5
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	4413      	add	r3, r2
 800b204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b208:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6999      	ldr	r1, [r3, #24]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	440b      	add	r3, r1
 800b214:	1e59      	subs	r1, r3, #1
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b21e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b220:	4b7a      	ldr	r3, [pc, #488]	; (800b40c <USB_EPStartXfer+0x2e4>)
 800b222:	400b      	ands	r3, r1
 800b224:	69b9      	ldr	r1, [r7, #24]
 800b226:	0148      	lsls	r0, r1, #5
 800b228:	69f9      	ldr	r1, [r7, #28]
 800b22a:	4401      	add	r1, r0
 800b22c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b230:	4313      	orrs	r3, r2
 800b232:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b240:	691a      	ldr	r2, [r3, #16]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b24a:	69b9      	ldr	r1, [r7, #24]
 800b24c:	0148      	lsls	r0, r1, #5
 800b24e:	69f9      	ldr	r1, [r7, #28]
 800b250:	4401      	add	r1, r0
 800b252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b256:	4313      	orrs	r3, r2
 800b258:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	791b      	ldrb	r3, [r3, #4]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d11f      	bne.n	800b2a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	0151      	lsls	r1, r2, #5
 800b274:	69fa      	ldr	r2, [r7, #28]
 800b276:	440a      	add	r2, r1
 800b278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b280:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b29c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d14b      	bne.n	800b340 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d009      	beq.n	800b2c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	791b      	ldrb	r3, [r3, #4]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d128      	bne.n	800b31e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d110      	bne.n	800b2fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	0151      	lsls	r1, r2, #5
 800b2ee:	69fa      	ldr	r2, [r7, #28]
 800b2f0:	440a      	add	r2, r1
 800b2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	e00f      	b.n	800b31e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	0151      	lsls	r1, r2, #5
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	440a      	add	r2, r1
 800b314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b31c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	4413      	add	r3, r2
 800b326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	0151      	lsls	r1, r2, #5
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	440a      	add	r2, r1
 800b334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	e137      	b.n	800b5b0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	0151      	lsls	r1, r2, #5
 800b352:	69fa      	ldr	r2, [r7, #28]
 800b354:	440a      	add	r2, r1
 800b356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b35a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b35e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	791b      	ldrb	r3, [r3, #4]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d015      	beq.n	800b394 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 811f 	beq.w	800b5b0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	2101      	movs	r1, #1
 800b384:	fa01 f303 	lsl.w	r3, r1, r3
 800b388:	69f9      	ldr	r1, [r7, #28]
 800b38a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b38e:	4313      	orrs	r3, r2
 800b390:	634b      	str	r3, [r1, #52]	; 0x34
 800b392:	e10d      	b.n	800b5b0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d110      	bne.n	800b3c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	0151      	lsls	r1, r2, #5
 800b3b6:	69fa      	ldr	r2, [r7, #28]
 800b3b8:	440a      	add	r2, r1
 800b3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	e00f      	b.n	800b3e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	69fa      	ldr	r2, [r7, #28]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	6919      	ldr	r1, [r3, #16]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	781a      	ldrb	r2, [r3, #0]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	b298      	uxth	r0, r3
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 faea 	bl	800b9d4 <USB_WritePacket>
 800b400:	e0d6      	b.n	800b5b0 <USB_EPStartXfer+0x488>
 800b402:	bf00      	nop
 800b404:	e007ffff 	.word	0xe007ffff
 800b408:	fff80000 	.word	0xfff80000
 800b40c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	691a      	ldr	r2, [r3, #16]
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	0159      	lsls	r1, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	440b      	add	r3, r1
 800b426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42a:	4619      	mov	r1, r3
 800b42c:	4b63      	ldr	r3, [pc, #396]	; (800b5bc <USB_EPStartXfer+0x494>)
 800b42e:	4013      	ands	r3, r2
 800b430:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	0159      	lsls	r1, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	440b      	add	r3, r1
 800b448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44c:	4619      	mov	r1, r3
 800b44e:	4b5c      	ldr	r3, [pc, #368]	; (800b5c0 <USB_EPStartXfer+0x498>)
 800b450:	4013      	ands	r3, r2
 800b452:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d123      	bne.n	800b4a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b472:	69b9      	ldr	r1, [r7, #24]
 800b474:	0148      	lsls	r0, r1, #5
 800b476:	69f9      	ldr	r1, [r7, #28]
 800b478:	4401      	add	r1, r0
 800b47a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b47e:	4313      	orrs	r3, r2
 800b480:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	0151      	lsls	r1, r2, #5
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	440a      	add	r2, r1
 800b498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4a0:	6113      	str	r3, [r2, #16]
 800b4a2:	e037      	b.n	800b514 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	699a      	ldr	r2, [r3, #24]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	1e5a      	subs	r2, r3, #1
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	8afa      	ldrh	r2, [r7, #22]
 800b4c0:	fb03 f202 	mul.w	r2, r3, r2
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d4:	691a      	ldr	r2, [r3, #16]
 800b4d6:	8afb      	ldrh	r3, [r7, #22]
 800b4d8:	04d9      	lsls	r1, r3, #19
 800b4da:	4b3a      	ldr	r3, [pc, #232]	; (800b5c4 <USB_EPStartXfer+0x49c>)
 800b4dc:	400b      	ands	r3, r1
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	0148      	lsls	r0, r1, #5
 800b4e2:	69f9      	ldr	r1, [r7, #28]
 800b4e4:	4401      	add	r1, r0
 800b4e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b504:	69b9      	ldr	r1, [r7, #24]
 800b506:	0148      	lsls	r0, r1, #5
 800b508:	69f9      	ldr	r1, [r7, #28]
 800b50a:	4401      	add	r1, r0
 800b50c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b510:	4313      	orrs	r3, r2
 800b512:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d10d      	bne.n	800b536 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d009      	beq.n	800b536 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6919      	ldr	r1, [r3, #16]
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b532:	460a      	mov	r2, r1
 800b534:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	791b      	ldrb	r3, [r3, #4]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d128      	bne.n	800b590 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d110      	bne.n	800b570 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	0151      	lsls	r1, r2, #5
 800b560:	69fa      	ldr	r2, [r7, #28]
 800b562:	440a      	add	r2, r1
 800b564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e00f      	b.n	800b590 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	440a      	add	r2, r1
 800b586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b58a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b58e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	015a      	lsls	r2, r3, #5
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	4413      	add	r3, r2
 800b598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	0151      	lsls	r1, r2, #5
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	440a      	add	r2, r1
 800b5a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	fff80000 	.word	0xfff80000
 800b5c0:	e007ffff 	.word	0xe007ffff
 800b5c4:	1ff80000 	.word	0x1ff80000

0800b5c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	f040 80ce 	bne.w	800b786 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d132      	bne.n	800b658 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	0159      	lsls	r1, r3, #5
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	440b      	add	r3, r1
 800b608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60c:	4619      	mov	r1, r3
 800b60e:	4b9a      	ldr	r3, [pc, #616]	; (800b878 <USB_EP0StartXfer+0x2b0>)
 800b610:	4013      	ands	r3, r2
 800b612:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	0151      	lsls	r1, r2, #5
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	440a      	add	r2, r1
 800b62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b62e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b640:	691a      	ldr	r2, [r3, #16]
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	0159      	lsls	r1, r3, #5
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	440b      	add	r3, r1
 800b64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b64e:	4619      	mov	r1, r3
 800b650:	4b8a      	ldr	r3, [pc, #552]	; (800b87c <USB_EP0StartXfer+0x2b4>)
 800b652:	4013      	ands	r3, r2
 800b654:	610b      	str	r3, [r1, #16]
 800b656:	e04e      	b.n	800b6f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	015a      	lsls	r2, r3, #5
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b664:	691a      	ldr	r2, [r3, #16]
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	0159      	lsls	r1, r3, #5
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	440b      	add	r3, r1
 800b66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b672:	4619      	mov	r1, r3
 800b674:	4b81      	ldr	r3, [pc, #516]	; (800b87c <USB_EP0StartXfer+0x2b4>)
 800b676:	4013      	ands	r3, r2
 800b678:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	0159      	lsls	r1, r3, #5
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	440b      	add	r3, r1
 800b690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b694:	4619      	mov	r1, r3
 800b696:	4b78      	ldr	r3, [pc, #480]	; (800b878 <USB_EP0StartXfer+0x2b0>)
 800b698:	4013      	ands	r3, r2
 800b69a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d903      	bls.n	800b6b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	68da      	ldr	r2, [r3, #12]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	0151      	lsls	r1, r2, #5
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	440a      	add	r2, r1
 800b6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6dc:	691a      	ldr	r2, [r3, #16]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6e6:	6939      	ldr	r1, [r7, #16]
 800b6e8:	0148      	lsls	r0, r1, #5
 800b6ea:	6979      	ldr	r1, [r7, #20]
 800b6ec:	4401      	add	r1, r0
 800b6ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d11e      	bne.n	800b73a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d009      	beq.n	800b718 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	0151      	lsls	r1, r2, #5
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	440a      	add	r2, r1
 800b72e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	e097      	b.n	800b86a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	015a      	lsls	r2, r3, #5
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	4413      	add	r3, r2
 800b742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	0151      	lsls	r1, r2, #5
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	440a      	add	r2, r1
 800b750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b758:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8083 	beq.w	800b86a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f003 030f 	and.w	r3, r3, #15
 800b774:	2101      	movs	r1, #1
 800b776:	fa01 f303 	lsl.w	r3, r1, r3
 800b77a:	6979      	ldr	r1, [r7, #20]
 800b77c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b780:	4313      	orrs	r3, r2
 800b782:	634b      	str	r3, [r1, #52]	; 0x34
 800b784:	e071      	b.n	800b86a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	0159      	lsls	r1, r3, #5
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	440b      	add	r3, r1
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4b36      	ldr	r3, [pc, #216]	; (800b87c <USB_EP0StartXfer+0x2b4>)
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b4:	691a      	ldr	r2, [r3, #16]
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	0159      	lsls	r1, r3, #5
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	440b      	add	r3, r1
 800b7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4b2c      	ldr	r3, [pc, #176]	; (800b878 <USB_EP0StartXfer+0x2b0>)
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	68da      	ldr	r2, [r3, #12]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80e:	691a      	ldr	r2, [r3, #16]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b818:	6939      	ldr	r1, [r7, #16]
 800b81a:	0148      	lsls	r0, r1, #5
 800b81c:	6979      	ldr	r1, [r7, #20]
 800b81e:	4401      	add	r1, r0
 800b820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b824:	4313      	orrs	r3, r2
 800b826:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d10d      	bne.n	800b84a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6919      	ldr	r1, [r3, #16]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	015a      	lsls	r2, r3, #5
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	4413      	add	r3, r2
 800b842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b846:	460a      	mov	r2, r1
 800b848:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	4413      	add	r3, r2
 800b852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	0151      	lsls	r1, r2, #5
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	440a      	add	r2, r1
 800b860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	e007ffff 	.word	0xe007ffff
 800b87c:	fff80000 	.word	0xfff80000

0800b880 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d14a      	bne.n	800b934 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8b6:	f040 8086 	bne.w	800b9c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	7812      	ldrb	r2, [r2, #0]
 800b8ce:	0151      	lsls	r1, r2, #5
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	440a      	add	r2, r1
 800b8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	7812      	ldrb	r2, [r2, #0]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3301      	adds	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b90e:	4293      	cmp	r3, r2
 800b910:	d902      	bls.n	800b918 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	75fb      	strb	r3, [r7, #23]
          break;
 800b916:	e056      	b.n	800b9c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b930:	d0e7      	beq.n	800b902 <USB_EPStopXfer+0x82>
 800b932:	e048      	b.n	800b9c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	015a      	lsls	r2, r3, #5
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	4413      	add	r3, r2
 800b93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b94c:	d13b      	bne.n	800b9c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	015a      	lsls	r2, r3, #5
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	4413      	add	r3, r2
 800b958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	7812      	ldrb	r2, [r2, #0]
 800b962:	0151      	lsls	r1, r2, #5
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	440a      	add	r2, r1
 800b968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b96c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b970:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	015a      	lsls	r2, r3, #5
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	7812      	ldrb	r2, [r2, #0]
 800b986:	0151      	lsls	r1, r2, #5
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	440a      	add	r2, r1
 800b98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d902      	bls.n	800b9ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b9aa:	e00c      	b.n	800b9c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9c4:	d0e7      	beq.n	800b996 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b089      	sub	sp, #36	; 0x24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	71fb      	strb	r3, [r7, #7]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b9f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d123      	bne.n	800ba42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b9fa:	88bb      	ldrh	r3, [r7, #4]
 800b9fc:	3303      	adds	r3, #3
 800b9fe:	089b      	lsrs	r3, r3, #2
 800ba00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ba02:	2300      	movs	r3, #0
 800ba04:	61bb      	str	r3, [r7, #24]
 800ba06:	e018      	b.n	800ba3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ba08:	79fb      	ldrb	r3, [r7, #7]
 800ba0a:	031a      	lsls	r2, r3, #12
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba14:	461a      	mov	r2, r3
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	3301      	adds	r3, #1
 800ba26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	3301      	adds	r3, #1
 800ba32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	3301      	adds	r3, #1
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d3e2      	bcc.n	800ba08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3724      	adds	r7, #36	; 0x24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b08b      	sub	sp, #44	; 0x2c
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	089b      	lsrs	r3, r3, #2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ba6e:	88fb      	ldrh	r3, [r7, #6]
 800ba70:	f003 0303 	and.w	r3, r3, #3
 800ba74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	623b      	str	r3, [r7, #32]
 800ba7a:	e014      	b.n	800baa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	601a      	str	r2, [r3, #0]
    pDest++;
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	3301      	adds	r3, #1
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	3301      	adds	r3, #1
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	3301      	adds	r3, #1
 800baa4:	623b      	str	r3, [r7, #32]
 800baa6:	6a3a      	ldr	r2, [r7, #32]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d3e6      	bcc.n	800ba7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800baae:	8bfb      	ldrh	r3, [r7, #30]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01e      	beq.n	800baf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800babe:	461a      	mov	r2, r3
 800bac0:	f107 0310 	add.w	r3, r7, #16
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	fa22 f303 	lsr.w	r3, r2, r3
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	701a      	strb	r2, [r3, #0]
      i++;
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	3301      	adds	r3, #1
 800bade:	623b      	str	r3, [r7, #32]
      pDest++;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	3301      	adds	r3, #1
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bae6:	8bfb      	ldrh	r3, [r7, #30]
 800bae8:	3b01      	subs	r3, #1
 800baea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800baec:	8bfb      	ldrh	r3, [r7, #30]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1ea      	bne.n	800bac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	372c      	adds	r7, #44	; 0x2c
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d12c      	bne.n	800bb76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	db12      	blt.n	800bb54 <USB_EPSetStall+0x54>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00f      	beq.n	800bb54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	0151      	lsls	r1, r2, #5
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	440a      	add	r2, r1
 800bb4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	0151      	lsls	r1, r2, #5
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	440a      	add	r2, r1
 800bb6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	e02b      	b.n	800bbce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	db12      	blt.n	800bbae <USB_EPSetStall+0xae>
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00f      	beq.n	800bbae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	0151      	lsls	r1, r2, #5
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	440a      	add	r2, r1
 800bba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d128      	bne.n	800bc4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	0151      	lsls	r1, r2, #5
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	440a      	add	r2, r1
 800bc0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	791b      	ldrb	r3, [r3, #4]
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d003      	beq.n	800bc28 <USB_EPClearStall+0x4c>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	791b      	ldrb	r3, [r3, #4]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d138      	bne.n	800bc9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	0151      	lsls	r1, r2, #5
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	440a      	add	r2, r1
 800bc3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	e027      	b.n	800bc9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	015a      	lsls	r2, r3, #5
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	4413      	add	r3, r2
 800bc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	0151      	lsls	r1, r2, #5
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	440a      	add	r2, r1
 800bc60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	791b      	ldrb	r3, [r3, #4]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d003      	beq.n	800bc7a <USB_EPClearStall+0x9e>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	791b      	ldrb	r3, [r3, #4]
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d10f      	bne.n	800bc9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	0151      	lsls	r1, r2, #5
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	440a      	add	r2, r1
 800bc90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bcca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	011b      	lsls	r3, r3, #4
 800bcd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bcdc:	68f9      	ldr	r1, [r7, #12]
 800bcde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bce2:	4313      	orrs	r3, r2
 800bce4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd0e:	f023 0303 	bic.w	r3, r3, #3
 800bd12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd22:	f023 0302 	bic.w	r3, r3, #2
 800bd26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b085      	sub	sp, #20
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd50:	f023 0303 	bic.w	r3, r3, #3
 800bd54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd64:	f043 0302 	orr.w	r3, r3, #2
 800bd68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bd90:	68fb      	ldr	r3, [r7, #12]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	015a      	lsls	r2, r3, #5
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	4013      	ands	r3, r2
 800bdd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	4013      	ands	r3, r2
 800be02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	0c1b      	lsrs	r3, r3, #16
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	4013      	ands	r3, r2
 800be36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	b29b      	uxth	r3, r3
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	4013      	ands	r3, r2
 800be74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be76:	68bb      	ldr	r3, [r7, #8]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	f003 030f 	and.w	r3, r3, #15
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	fa22 f303 	lsr.w	r3, r2, r3
 800beb4:	01db      	lsls	r3, r3, #7
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	4313      	orrs	r3, r2
 800bebc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	015a      	lsls	r2, r3, #5
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	4013      	ands	r3, r2
 800bed0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bed2:	68bb      	ldr	r3, [r7, #8]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	371c      	adds	r7, #28
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	f003 0301 	and.w	r3, r3, #1
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf16:	4619      	mov	r1, r3
 800bf18:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <USB_ActivateSetup+0x44>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	fffff800 	.word	0xfffff800

0800bf44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	333c      	adds	r3, #60	; 0x3c
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	4a26      	ldr	r2, [pc, #152]	; (800bffc <USB_EP0_OutStart+0xb8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d90a      	bls.n	800bf7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf78:	d101      	bne.n	800bf7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e037      	b.n	800bfee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf84:	461a      	mov	r2, r3
 800bf86:	2300      	movs	r3, #0
 800bf88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfac:	f043 0318 	orr.w	r3, r3, #24
 800bfb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bfc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bfc6:	7afb      	ldrb	r3, [r7, #11]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d10f      	bne.n	800bfec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bfea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	4f54300a 	.word	0x4f54300a

0800c000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4a13      	ldr	r2, [pc, #76]	; (800c064 <USB_CoreReset+0x64>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d901      	bls.n	800c01e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e01b      	b.n	800c056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	daf2      	bge.n	800c00c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	f043 0201 	orr.w	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <USB_CoreReset+0x64>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d901      	bls.n	800c048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e006      	b.n	800c056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b01      	cmp	r3, #1
 800c052:	d0f0      	beq.n	800c036 <USB_CoreReset+0x36>

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	00030d40 	.word	0x00030d40

0800c068 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c068:	b084      	sub	sp, #16
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b086      	sub	sp, #24
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c088:	461a      	mov	r2, r3
 800c08a:	2300      	movs	r3, #0
 800c08c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c092:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d018      	beq.n	800c0d8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d10a      	bne.n	800c0c2 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0ba:	f043 0304 	orr.w	r3, r3, #4
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	e014      	b.n	800c0ec <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0d0:	f023 0304 	bic.w	r3, r3, #4
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	e009      	b.n	800c0ec <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0e6:	f023 0304 	bic.w	r3, r3, #4
 800c0ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0ec:	2110      	movs	r1, #16
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7fe fe14 	bl	800ad1c <USB_FlushTxFifo>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7fe fe40 	bl	800ad84 <USB_FlushRxFifo>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	e015      	b.n	800c140 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c120:	461a      	mov	r2, r3
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
 800c126:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c134:	461a      	mov	r2, r3
 800c136:	2300      	movs	r3, #0
 800c138:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	3301      	adds	r3, #1
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	429a      	cmp	r2, r3
 800c146:	d3e5      	bcc.n	800c114 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f04f 32ff 	mov.w	r2, #4294967295
 800c154:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c168:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a13      	ldr	r2, [pc, #76]	; (800c1bc <USB_HostInit+0x154>)
 800c16e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a13      	ldr	r2, [pc, #76]	; (800c1c0 <USB_HostInit+0x158>)
 800c174:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c178:	e009      	b.n	800c18e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2280      	movs	r2, #128	; 0x80
 800c17e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a10      	ldr	r2, [pc, #64]	; (800c1c4 <USB_HostInit+0x15c>)
 800c184:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a0f      	ldr	r2, [pc, #60]	; (800c1c8 <USB_HostInit+0x160>)
 800c18a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	f043 0210 	orr.w	r2, r3, #16
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699a      	ldr	r2, [r3, #24]
 800c1a4:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <USB_HostInit+0x164>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1b8:	b004      	add	sp, #16
 800c1ba:	4770      	bx	lr
 800c1bc:	01000200 	.word	0x01000200
 800c1c0:	00e00300 	.word	0x00e00300
 800c1c4:	00600080 	.word	0x00600080
 800c1c8:	004000e0 	.word	0x004000e0
 800c1cc:	a3200008 	.word	0xa3200008

0800c1d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	78fb      	ldrb	r3, [r7, #3]
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c208:	4313      	orrs	r3, r2
 800c20a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d107      	bne.n	800c222 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c218:	461a      	mov	r2, r3
 800c21a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c21e:	6053      	str	r3, [r2, #4]
 800c220:	e009      	b.n	800c236 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	2b02      	cmp	r3, #2
 800c226:	d106      	bne.n	800c236 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c22e:	461a      	mov	r2, r3
 800c230:	f241 7370 	movw	r3, #6000	; 0x1770
 800c234:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c250:	2300      	movs	r3, #0
 800c252:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c264:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c26e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c272:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c274:	2064      	movs	r0, #100	; 0x64
 800c276:	f7f5 ffdd 	bl	8002234 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c286:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c288:	200a      	movs	r0, #10
 800c28a:	f7f5 ffd3 	bl	8002234 <HAL_Delay>

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c2bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d109      	bne.n	800c2dc <USB_DriveVbus+0x44>
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d106      	bne.n	800c2dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c2da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e6:	d109      	bne.n	800c2fc <USB_DriveVbus+0x64>
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b085      	sub	sp, #20
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c316:	2300      	movs	r3, #0
 800c318:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	0c5b      	lsrs	r3, r3, #17
 800c328:	f003 0303 	and.w	r3, r3, #3
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	b29b      	uxth	r3, r3
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
	...

0800c35c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	4608      	mov	r0, r1
 800c366:	4611      	mov	r1, r2
 800c368:	461a      	mov	r2, r3
 800c36a:	4603      	mov	r3, r0
 800c36c:	70fb      	strb	r3, [r7, #3]
 800c36e:	460b      	mov	r3, r1
 800c370:	70bb      	strb	r3, [r7, #2]
 800c372:	4613      	mov	r3, r2
 800c374:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c37e:	78fb      	ldrb	r3, [r7, #3]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	4413      	add	r3, r2
 800c386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c38a:	461a      	mov	r2, r3
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
 800c390:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c392:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c396:	2b03      	cmp	r3, #3
 800c398:	d87e      	bhi.n	800c498 <USB_HC_Init+0x13c>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USB_HC_Init+0x44>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3b1 	.word	0x0800c3b1
 800c3a4:	0800c45b 	.word	0x0800c45b
 800c3a8:	0800c3b1 	.word	0x0800c3b1
 800c3ac:	0800c41d 	.word	0x0800c41d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3bc:	461a      	mov	r2, r3
 800c3be:	f240 439d 	movw	r3, #1181	; 0x49d
 800c3c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c3c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	da10      	bge.n	800c3ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c3cc:	78fb      	ldrb	r3, [r7, #3]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	78fa      	ldrb	r2, [r7, #3]
 800c3dc:	0151      	lsls	r1, r2, #5
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c3ec:	e057      	b.n	800c49e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d051      	beq.n	800c49e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	4413      	add	r3, r2
 800c402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	78fa      	ldrb	r2, [r7, #3]
 800c40a:	0151      	lsls	r1, r2, #5
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	440a      	add	r2, r1
 800c410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c414:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c418:	60d3      	str	r3, [r2, #12]
      break;
 800c41a:	e040      	b.n	800c49e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	015a      	lsls	r2, r3, #5
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	4413      	add	r3, r2
 800c424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c428:	461a      	mov	r2, r3
 800c42a:	f240 639d 	movw	r3, #1693	; 0x69d
 800c42e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c430:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c434:	2b00      	cmp	r3, #0
 800c436:	da34      	bge.n	800c4a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	78fa      	ldrb	r2, [r7, #3]
 800c448:	0151      	lsls	r1, r2, #5
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	440a      	add	r2, r1
 800c44e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c456:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c458:	e023      	b.n	800c4a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	4413      	add	r3, r2
 800c462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c466:	461a      	mov	r2, r3
 800c468:	f240 2325 	movw	r3, #549	; 0x225
 800c46c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c46e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c472:	2b00      	cmp	r3, #0
 800c474:	da17      	bge.n	800c4a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	78fa      	ldrb	r2, [r7, #3]
 800c486:	0151      	lsls	r1, r2, #5
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	440a      	add	r2, r1
 800c48c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c490:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c494:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c496:	e006      	b.n	800c4a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	77fb      	strb	r3, [r7, #31]
      break;
 800c49c:	e004      	b.n	800c4a8 <USB_HC_Init+0x14c>
      break;
 800c49e:	bf00      	nop
 800c4a0:	e002      	b.n	800c4a8 <USB_HC_Init+0x14c>
      break;
 800c4a2:	bf00      	nop
 800c4a4:	e000      	b.n	800c4a8 <USB_HC_Init+0x14c>
      break;
 800c4a6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	78fa      	ldrb	r2, [r7, #3]
 800c4b8:	0151      	lsls	r1, r2, #5
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	440a      	add	r2, r1
 800c4be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4c2:	f043 0302 	orr.w	r3, r3, #2
 800c4c6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4ce:	699a      	ldr	r2, [r3, #24]
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	f003 030f 	and.w	r3, r3, #15
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4dc:	6939      	ldr	r1, [r7, #16]
 800c4de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c4f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	da03      	bge.n	800c502 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4fe:	61bb      	str	r3, [r7, #24]
 800c500:	e001      	b.n	800c506 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff feff 	bl	800c30a <USB_GetHostSpeed>
 800c50c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c50e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c512:	2b02      	cmp	r3, #2
 800c514:	d106      	bne.n	800c524 <USB_HC_Init+0x1c8>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d003      	beq.n	800c524 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c51c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e001      	b.n	800c528 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c528:	787b      	ldrb	r3, [r7, #1]
 800c52a:	059b      	lsls	r3, r3, #22
 800c52c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c530:	78bb      	ldrb	r3, [r7, #2]
 800c532:	02db      	lsls	r3, r3, #11
 800c534:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c538:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c53a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c53e:	049b      	lsls	r3, r3, #18
 800c540:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c544:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c548:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c54c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c552:	78fb      	ldrb	r3, [r7, #3]
 800c554:	0159      	lsls	r1, r3, #5
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	440b      	add	r3, r1
 800c55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c55e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c564:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d003      	beq.n	800c576 <USB_HC_Init+0x21a>
 800c56e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c572:	2b01      	cmp	r3, #1
 800c574:	d10f      	bne.n	800c596 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c576:	78fb      	ldrb	r3, [r7, #3]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	78fa      	ldrb	r2, [r7, #3]
 800c586:	0151      	lsls	r1, r2, #5
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	440a      	add	r2, r1
 800c58c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c590:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c594:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c596:	7ffb      	ldrb	r3, [r7, #31]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08c      	sub	sp, #48	; 0x30
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5bc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d02d      	beq.n	800c626 <USB_HC_StartXfer+0x86>
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	791b      	ldrb	r3, [r3, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d129      	bne.n	800c626 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d117      	bne.n	800c608 <USB_HC_StartXfer+0x68>
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	79db      	ldrb	r3, [r3, #7]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <USB_HC_StartXfer+0x48>
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	79db      	ldrb	r3, [r3, #7]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d10f      	bne.n	800c608 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	69fa      	ldr	r2, [r7, #28]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	6a3a      	ldr	r2, [r7, #32]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c606:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10b      	bne.n	800c626 <USB_HC_StartXfer+0x86>
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	795b      	ldrb	r3, [r3, #5]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d107      	bne.n	800c626 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	4619      	mov	r1, r3
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fa0f 	bl	800ca40 <USB_DoPing>
      return HAL_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	e0f8      	b.n	800c818 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d018      	beq.n	800c660 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	8912      	ldrh	r2, [r2, #8]
 800c636:	4413      	add	r3, r2
 800c638:	3b01      	subs	r3, #1
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	8912      	ldrh	r2, [r2, #8]
 800c63e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c642:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c646:	8b7b      	ldrh	r3, [r7, #26]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d90b      	bls.n	800c664 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c64c:	8b7b      	ldrh	r3, [r7, #26]
 800c64e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	8912      	ldrh	r2, [r2, #8]
 800c656:	fb03 f202 	mul.w	r2, r3, r2
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	611a      	str	r2, [r3, #16]
 800c65e:	e001      	b.n	800c664 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c660:	2301      	movs	r3, #1
 800c662:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	78db      	ldrb	r3, [r3, #3]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c66c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	8912      	ldrh	r2, [r2, #8]
 800c672:	fb03 f202 	mul.w	r2, r3, r2
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	611a      	str	r2, [r3, #16]
 800c67a:	e003      	b.n	800c684 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	695a      	ldr	r2, [r3, #20]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c68c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c68e:	04d9      	lsls	r1, r3, #19
 800c690:	4b63      	ldr	r3, [pc, #396]	; (800c820 <USB_HC_StartXfer+0x280>)
 800c692:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c694:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	7a9b      	ldrb	r3, [r3, #10]
 800c69a:	075b      	lsls	r3, r3, #29
 800c69c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6a0:	69f9      	ldr	r1, [r7, #28]
 800c6a2:	0148      	lsls	r0, r1, #5
 800c6a4:	6a39      	ldr	r1, [r7, #32]
 800c6a6:	4401      	add	r1, r0
 800c6a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d009      	beq.n	800c6ca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	68d9      	ldr	r1, [r3, #12]
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	6a3b      	ldr	r3, [r7, #32]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6c6:	460a      	mov	r2, r1
 800c6c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	bf0c      	ite	eq
 800c6da:	2301      	moveq	r3, #1
 800c6dc:	2300      	movne	r3, #0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	0151      	lsls	r1, r2, #5
 800c6f4:	6a3a      	ldr	r2, [r7, #32]
 800c6f6:	440a      	add	r2, r1
 800c6f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c700:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	7e7b      	ldrb	r3, [r7, #25]
 800c712:	075b      	lsls	r3, r3, #29
 800c714:	69f9      	ldr	r1, [r7, #28]
 800c716:	0148      	lsls	r0, r1, #5
 800c718:	6a39      	ldr	r1, [r7, #32]
 800c71a:	4401      	add	r1, r0
 800c71c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c720:	4313      	orrs	r3, r2
 800c722:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c73a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	78db      	ldrb	r3, [r3, #3]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d004      	beq.n	800c74e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	e003      	b.n	800c756 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c754:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c75c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	015a      	lsls	r2, r3, #5
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	4413      	add	r3, r2
 800c766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c76a:	461a      	mov	r2, r3
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	e04e      	b.n	800c818 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	78db      	ldrb	r3, [r3, #3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d149      	bne.n	800c816 <USB_HC_StartXfer+0x276>
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d045      	beq.n	800c816 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	79db      	ldrb	r3, [r3, #7]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d830      	bhi.n	800c7f4 <USB_HC_StartXfer+0x254>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <USB_HC_StartXfer+0x1f8>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c7a9 	.word	0x0800c7a9
 800c79c:	0800c7cd 	.word	0x0800c7cd
 800c7a0:	0800c7a9 	.word	0x0800c7a9
 800c7a4:	0800c7cd 	.word	0x0800c7cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	3303      	adds	r3, #3
 800c7ae:	089b      	lsrs	r3, r3, #2
 800c7b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c7b2:	8afa      	ldrh	r2, [r7, #22]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d91c      	bls.n	800c7f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	f043 0220 	orr.w	r2, r3, #32
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	619a      	str	r2, [r3, #24]
        }
        break;
 800c7ca:	e015      	b.n	800c7f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	3303      	adds	r3, #3
 800c7d2:	089b      	lsrs	r3, r3, #2
 800c7d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c7d6:	8afa      	ldrh	r2, [r7, #22]
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d90a      	bls.n	800c7fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	619a      	str	r2, [r3, #24]
        }
        break;
 800c7f2:	e003      	b.n	800c7fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c7f4:	bf00      	nop
 800c7f6:	e002      	b.n	800c7fe <USB_HC_StartXfer+0x25e>
        break;
 800c7f8:	bf00      	nop
 800c7fa:	e000      	b.n	800c7fe <USB_HC_StartXfer+0x25e>
        break;
 800c7fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	68d9      	ldr	r1, [r3, #12]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	785a      	ldrb	r2, [r3, #1]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	2000      	movs	r0, #0
 800c80e:	9000      	str	r0, [sp, #0]
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f7ff f8df 	bl	800b9d4 <USB_WritePacket>
  }

  return HAL_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3728      	adds	r7, #40	; 0x28
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	1ff80000 	.word	0x1ff80000

0800c824 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	b29b      	uxth	r3, r3
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c846:	b480      	push	{r7}
 800c848:	b089      	sub	sp, #36	; 0x24
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	460b      	mov	r3, r1
 800c850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c856:	78fb      	ldrb	r3, [r7, #3]
 800c858:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c85a:	2300      	movs	r3, #0
 800c85c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	4413      	add	r3, r2
 800c866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	0c9b      	lsrs	r3, r3, #18
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	0fdb      	lsrs	r3, r3, #31
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f003 0320 	and.w	r3, r3, #32
 800c892:	2b20      	cmp	r3, #32
 800c894:	d104      	bne.n	800c8a0 <USB_HC_Halt+0x5a>
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e0c8      	b.n	800ca32 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <USB_HC_Halt+0x66>
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d163      	bne.n	800c974 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	0151      	lsls	r1, r2, #5
 800c8be:	69fa      	ldr	r2, [r7, #28]
 800c8c0:	440a      	add	r2, r1
 800c8c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f040 80ab 	bne.w	800ca30 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d133      	bne.n	800c94e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	69ba      	ldr	r2, [r7, #24]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	69fa      	ldr	r2, [r7, #28]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c904:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	69ba      	ldr	r2, [r7, #24]
 800c916:	0151      	lsls	r1, r2, #5
 800c918:	69fa      	ldr	r2, [r7, #28]
 800c91a:	440a      	add	r2, r1
 800c91c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c924:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c932:	d81d      	bhi.n	800c970 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c94a:	d0ec      	beq.n	800c926 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c94c:	e070      	b.n	800ca30 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	015a      	lsls	r2, r3, #5
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	4413      	add	r3, r2
 800c956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	0151      	lsls	r1, r2, #5
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	440a      	add	r2, r1
 800c964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c96c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c96e:	e05f      	b.n	800ca30 <USB_HC_Halt+0x1ea>
            break;
 800c970:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c972:	e05d      	b.n	800ca30 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	015a      	lsls	r2, r3, #5
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	0151      	lsls	r1, r2, #5
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	440a      	add	r2, r1
 800c98a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c98e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c992:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d133      	bne.n	800ca0c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	015a      	lsls	r2, r3, #5
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69ba      	ldr	r2, [r7, #24]
 800c9b4:	0151      	lsls	r1, r2, #5
 800c9b6:	69fa      	ldr	r2, [r7, #28]
 800c9b8:	440a      	add	r2, r1
 800c9ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	015a      	lsls	r2, r3, #5
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	0151      	lsls	r1, r2, #5
 800c9d6:	69fa      	ldr	r2, [r7, #28]
 800c9d8:	440a      	add	r2, r1
 800c9da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9f0:	d81d      	bhi.n	800ca2e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca08:	d0ec      	beq.n	800c9e4 <USB_HC_Halt+0x19e>
 800ca0a:	e011      	b.n	800ca30 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69ba      	ldr	r2, [r7, #24]
 800ca1c:	0151      	lsls	r1, r2, #5
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	440a      	add	r2, r1
 800ca22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca2a:	6013      	str	r3, [r2, #0]
 800ca2c:	e000      	b.n	800ca30 <USB_HC_Halt+0x1ea>
          break;
 800ca2e:	bf00      	nop
    }
  }

  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3724      	adds	r7, #36	; 0x24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
	...

0800ca40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ca54:	2301      	movs	r3, #1
 800ca56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	04da      	lsls	r2, r3, #19
 800ca5c:	4b15      	ldr	r3, [pc, #84]	; (800cab4 <USB_DoPing+0x74>)
 800ca5e:	4013      	ands	r3, r2
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	0151      	lsls	r1, r2, #5
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	440a      	add	r2, r1
 800ca68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	015a      	lsls	r2, r3, #5
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	4413      	add	r3, r2
 800ca9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca9e:	461a      	mov	r2, r3
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	1ff80000 	.word	0x1ff80000

0800cab8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7fd ff6a 	bl	800a9a6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cad2:	2110      	movs	r1, #16
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7fe f921 	bl	800ad1c <USB_FlushTxFifo>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fe f94d 	bl	800ad84 <USB_FlushRxFifo>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800caf4:	2300      	movs	r3, #0
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	e01f      	b.n	800cb3a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	015a      	lsls	r2, r3, #5
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	4413      	add	r3, r2
 800cb02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb2e:	461a      	mov	r2, r3
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	3301      	adds	r3, #1
 800cb38:	61bb      	str	r3, [r7, #24]
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2b0f      	cmp	r3, #15
 800cb3e:	d9dc      	bls.n	800cafa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cb40:	2300      	movs	r3, #0
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	e034      	b.n	800cbb0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3301      	adds	r3, #1
 800cb84:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb8c:	d80c      	bhi.n	800cba8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	015a      	lsls	r2, r3, #5
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4413      	add	r3, r2
 800cb96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cba4:	d0ec      	beq.n	800cb80 <USB_StopHost+0xc8>
 800cba6:	e000      	b.n	800cbaa <USB_StopHost+0xf2>
        break;
 800cba8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	3301      	adds	r3, #1
 800cbae:	61bb      	str	r3, [r7, #24]
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	2b0f      	cmp	r3, #15
 800cbb4:	d9c7      	bls.n	800cb46 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7fd fed9 	bl	800a984 <USB_EnableGlobalInt>

  return ret;
 800cbd2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3720      	adds	r7, #32
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cbe0:	4904      	ldr	r1, [pc, #16]	; (800cbf4 <MX_FATFS_Init+0x18>)
 800cbe2:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <MX_FATFS_Init+0x1c>)
 800cbe4:	f004 fe80 	bl	80118e8 <FATFS_LinkDriver>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <MX_FATFS_Init+0x20>)
 800cbee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200026f4 	.word	0x200026f4
 800cbf8:	08015d5c 	.word	0x08015d5c
 800cbfc:	200026f0 	.word	0x200026f0

0800cc00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc0a:	f000 f86b 	bl	800cce4 <BSP_SD_IsDetected>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d001      	beq.n	800cc18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cc14:	2302      	movs	r3, #2
 800cc16:	e005      	b.n	800cc24 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cc18:	4804      	ldr	r0, [pc, #16]	; (800cc2c <BSP_SD_Init+0x2c>)
 800cc1a:	f7fa fc89 	bl	8007530 <HAL_SD_Init>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cc22:	79fb      	ldrb	r3, [r7, #7]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	200003c0 	.word	0x200003c0

0800cc30 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	4806      	ldr	r0, [pc, #24]	; (800cc68 <BSP_SD_ReadBlocks+0x38>)
 800cc4e:	f7fa fd27 	bl	80076a0 <HAL_SD_ReadBlocks>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200003c0 	.word	0x200003c0

0800cc6c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af02      	add	r7, sp, #8
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	68f9      	ldr	r1, [r7, #12]
 800cc88:	4806      	ldr	r0, [pc, #24]	; (800cca4 <BSP_SD_WriteBlocks+0x38>)
 800cc8a:	f7fa fee7 	bl	8007a5c <HAL_SD_WriteBlocks>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	200003c0 	.word	0x200003c0

0800cca8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ccac:	4805      	ldr	r0, [pc, #20]	; (800ccc4 <BSP_SD_GetCardState+0x1c>)
 800ccae:	f7fb fa2b 	bl	8008108 <HAL_SD_GetCardState>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	bf14      	ite	ne
 800ccb8:	2301      	movne	r3, #1
 800ccba:	2300      	moveq	r3, #0
 800ccbc:	b2db      	uxtb	r3, r3
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200003c0 	.word	0x200003c0

0800ccc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	4803      	ldr	r0, [pc, #12]	; (800cce0 <BSP_SD_GetCardInfo+0x18>)
 800ccd4:	f7fb f9ec 	bl	80080b0 <HAL_SD_GetCardInfo>
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	200003c0 	.word	0x200003c0

0800cce4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ccea:	2301      	movs	r3, #1
 800ccec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ccee:	f000 f80b 	bl	800cd08 <BSP_PlatformIsDetected>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	b2db      	uxtb	r3, r3
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cd12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd16:	4806      	ldr	r0, [pc, #24]	; (800cd30 <BSP_PlatformIsDetected+0x28>)
 800cd18:	f7f6 faec 	bl	80032f4 <HAL_GPIO_ReadPin>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cd22:	2300      	movs	r3, #0
 800cd24:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cd26:	79fb      	ldrb	r3, [r7, #7]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	40020000 	.word	0x40020000

0800cd34 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd3e:	4b0b      	ldr	r3, [pc, #44]	; (800cd6c <SD_CheckStatus+0x38>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cd44:	f7ff ffb0 	bl	800cca8 <BSP_SD_GetCardState>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d107      	bne.n	800cd5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd4e:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <SD_CheckStatus+0x38>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f023 0301 	bic.w	r3, r3, #1
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	4b04      	ldr	r3, [pc, #16]	; (800cd6c <SD_CheckStatus+0x38>)
 800cd5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd5e:	4b03      	ldr	r3, [pc, #12]	; (800cd6c <SD_CheckStatus+0x38>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	b2db      	uxtb	r3, r3
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	20000009 	.word	0x20000009

0800cd70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <SD_initialize+0x38>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cd80:	f7ff ff3e 	bl	800cc00 <BSP_SD_Init>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ffd1 	bl	800cd34 <SD_CheckStatus>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461a      	mov	r2, r3
 800cd96:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <SD_initialize+0x38>)
 800cd98:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cd9a:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <SD_initialize+0x38>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20000009 	.word	0x20000009

0800cdac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cdb6:	79fb      	ldrb	r3, [r7, #7]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff ffbb 	bl	800cd34 <SD_CheckStatus>
 800cdbe:	4603      	mov	r3, r0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60b9      	str	r1, [r7, #8]
 800cdd0:	607a      	str	r2, [r7, #4]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cddc:	f04f 33ff 	mov.w	r3, #4294967295
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	68b8      	ldr	r0, [r7, #8]
 800cde6:	f7ff ff23 	bl	800cc30 <BSP_SD_ReadBlocks>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d107      	bne.n	800ce00 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cdf0:	bf00      	nop
 800cdf2:	f7ff ff59 	bl	800cca8 <BSP_SD_GetCardState>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1fa      	bne.n	800cdf2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b086      	sub	sp, #24
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
 800ce16:	4603      	mov	r3, r0
 800ce18:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce22:	683a      	ldr	r2, [r7, #0]
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7ff ff20 	bl	800cc6c <BSP_SD_WriteBlocks>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d107      	bne.n	800ce42 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ce32:	bf00      	nop
 800ce34:	f7ff ff38 	bl	800cca8 <BSP_SD_GetCardState>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1fa      	bne.n	800ce34 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08c      	sub	sp, #48	; 0x30
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	603a      	str	r2, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce62:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <SD_ioctl+0xac>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <SD_ioctl+0x28>
 800ce70:	2303      	movs	r3, #3
 800ce72:	e03c      	b.n	800ceee <SD_ioctl+0xa2>

  switch (cmd)
 800ce74:	79bb      	ldrb	r3, [r7, #6]
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d834      	bhi.n	800cee4 <SD_ioctl+0x98>
 800ce7a:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <SD_ioctl+0x34>)
 800ce7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce80:	0800ce91 	.word	0x0800ce91
 800ce84:	0800ce99 	.word	0x0800ce99
 800ce88:	0800ceb1 	.word	0x0800ceb1
 800ce8c:	0800cecb 	.word	0x0800cecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce96:	e028      	b.n	800ceea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce98:	f107 030c 	add.w	r3, r7, #12
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff ff13 	bl	800ccc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ceae:	e01c      	b.n	800ceea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ceb0:	f107 030c 	add.w	r3, r7, #12
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff ff07 	bl	800ccc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ceba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cec8:	e00f      	b.n	800ceea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ceca:	f107 030c 	add.w	r3, r7, #12
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff fefa 	bl	800ccc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	0a5a      	lsrs	r2, r3, #9
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cee2:	e002      	b.n	800ceea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cee4:	2304      	movs	r3, #4
 800cee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ceea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3730      	adds	r7, #48	; 0x30
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000009 	.word	0x20000009

0800cefc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf0c:	f005 fdc0 	bl	8012a90 <malloc>
 800cf10:	4603      	mov	r3, r0
 800cf12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d109      	bne.n	800cf2e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	32b0      	adds	r2, #176	; 0xb0
 800cf24:	2100      	movs	r1, #0
 800cf26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	e0d4      	b.n	800d0d8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cf2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cf32:	2100      	movs	r1, #0
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f005 fdbb 	bl	8012ab0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	32b0      	adds	r2, #176	; 0xb0
 800cf44:	68f9      	ldr	r1, [r7, #12]
 800cf46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	32b0      	adds	r2, #176	; 0xb0
 800cf54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7c1b      	ldrb	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d138      	bne.n	800cfd8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf66:	4b5e      	ldr	r3, [pc, #376]	; (800d0e0 <USBD_CDC_Init+0x1e4>)
 800cf68:	7819      	ldrb	r1, [r3, #0]
 800cf6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf6e:	2202      	movs	r2, #2
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f005 f8a8 	bl	80120c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf76:	4b5a      	ldr	r3, [pc, #360]	; (800d0e0 <USBD_CDC_Init+0x1e4>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	f003 020f 	and.w	r2, r3, #15
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	3324      	adds	r3, #36	; 0x24
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf90:	4b54      	ldr	r3, [pc, #336]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800cf92:	7819      	ldrb	r1, [r3, #0]
 800cf94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf98:	2202      	movs	r2, #2
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f005 f893 	bl	80120c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cfa0:	4b50      	ldr	r3, [pc, #320]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	f003 020f 	and.w	r2, r3, #15
 800cfa8:	6879      	ldr	r1, [r7, #4]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	440b      	add	r3, r1
 800cfb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfb8:	2201      	movs	r2, #1
 800cfba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cfbc:	4b4a      	ldr	r3, [pc, #296]	; (800d0e8 <USBD_CDC_Init+0x1ec>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	f003 020f 	and.w	r2, r3, #15
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	440b      	add	r3, r1
 800cfd0:	3326      	adds	r3, #38	; 0x26
 800cfd2:	2210      	movs	r2, #16
 800cfd4:	801a      	strh	r2, [r3, #0]
 800cfd6:	e035      	b.n	800d044 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cfd8:	4b41      	ldr	r3, [pc, #260]	; (800d0e0 <USBD_CDC_Init+0x1e4>)
 800cfda:	7819      	ldrb	r1, [r3, #0]
 800cfdc:	2340      	movs	r3, #64	; 0x40
 800cfde:	2202      	movs	r2, #2
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f005 f870 	bl	80120c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cfe6:	4b3e      	ldr	r3, [pc, #248]	; (800d0e0 <USBD_CDC_Init+0x1e4>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	f003 020f 	and.w	r2, r3, #15
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	440b      	add	r3, r1
 800cffa:	3324      	adds	r3, #36	; 0x24
 800cffc:	2201      	movs	r2, #1
 800cffe:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d000:	4b38      	ldr	r3, [pc, #224]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800d002:	7819      	ldrb	r1, [r3, #0]
 800d004:	2340      	movs	r3, #64	; 0x40
 800d006:	2202      	movs	r2, #2
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f005 f85c 	bl	80120c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d00e:	4b35      	ldr	r3, [pc, #212]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	f003 020f 	and.w	r2, r3, #15
 800d016:	6879      	ldr	r1, [r7, #4]
 800d018:	4613      	mov	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	440b      	add	r3, r1
 800d022:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d026:	2201      	movs	r2, #1
 800d028:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d02a:	4b2f      	ldr	r3, [pc, #188]	; (800d0e8 <USBD_CDC_Init+0x1ec>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	4613      	mov	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	3326      	adds	r3, #38	; 0x26
 800d040:	2210      	movs	r2, #16
 800d042:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d044:	4b28      	ldr	r3, [pc, #160]	; (800d0e8 <USBD_CDC_Init+0x1ec>)
 800d046:	7819      	ldrb	r1, [r3, #0]
 800d048:	2308      	movs	r3, #8
 800d04a:	2203      	movs	r2, #3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f005 f83a 	bl	80120c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d052:	4b25      	ldr	r3, [pc, #148]	; (800d0e8 <USBD_CDC_Init+0x1ec>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f003 020f 	and.w	r2, r3, #15
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	4613      	mov	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	440b      	add	r3, r1
 800d066:	3324      	adds	r3, #36	; 0x24
 800d068:	2201      	movs	r2, #1
 800d06a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	33b0      	adds	r3, #176	; 0xb0
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e018      	b.n	800d0d8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7c1b      	ldrb	r3, [r3, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0ae:	4b0d      	ldr	r3, [pc, #52]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800d0b0:	7819      	ldrb	r1, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f005 f8f1 	bl	80122a4 <USBD_LL_PrepareReceive>
 800d0c2:	e008      	b.n	800d0d6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0c4:	4b07      	ldr	r3, [pc, #28]	; (800d0e4 <USBD_CDC_Init+0x1e8>)
 800d0c6:	7819      	ldrb	r1, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0ce:	2340      	movs	r3, #64	; 0x40
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f005 f8e7 	bl	80122a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20000093 	.word	0x20000093
 800d0e4:	20000094 	.word	0x20000094
 800d0e8:	20000095 	.word	0x20000095

0800d0ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d0f8:	4b3a      	ldr	r3, [pc, #232]	; (800d1e4 <USBD_CDC_DeInit+0xf8>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f005 f807 	bl	8012112 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d104:	4b37      	ldr	r3, [pc, #220]	; (800d1e4 <USBD_CDC_DeInit+0xf8>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f003 020f 	and.w	r2, r3, #15
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	4613      	mov	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	4413      	add	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	440b      	add	r3, r1
 800d118:	3324      	adds	r3, #36	; 0x24
 800d11a:	2200      	movs	r2, #0
 800d11c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d11e:	4b32      	ldr	r3, [pc, #200]	; (800d1e8 <USBD_CDC_DeInit+0xfc>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f004 fff4 	bl	8012112 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d12a:	4b2f      	ldr	r3, [pc, #188]	; (800d1e8 <USBD_CDC_DeInit+0xfc>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	f003 020f 	and.w	r2, r3, #15
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d142:	2200      	movs	r2, #0
 800d144:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d146:	4b29      	ldr	r3, [pc, #164]	; (800d1ec <USBD_CDC_DeInit+0x100>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f004 ffe0 	bl	8012112 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <USBD_CDC_DeInit+0x100>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	f003 020f 	and.w	r2, r3, #15
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	4613      	mov	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	2200      	movs	r2, #0
 800d16a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d16c:	4b1f      	ldr	r3, [pc, #124]	; (800d1ec <USBD_CDC_DeInit+0x100>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	f003 020f 	and.w	r2, r3, #15
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	3326      	adds	r3, #38	; 0x26
 800d182:	2200      	movs	r2, #0
 800d184:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	32b0      	adds	r2, #176	; 0xb0
 800d190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d01f      	beq.n	800d1d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	33b0      	adds	r3, #176	; 0xb0
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	32b0      	adds	r2, #176	; 0xb0
 800d1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f005 fc70 	bl	8012aa0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	32b0      	adds	r2, #176	; 0xb0
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20000093 	.word	0x20000093
 800d1e8:	20000094 	.word	0x20000094
 800d1ec:	20000095 	.word	0x20000095

0800d1f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	32b0      	adds	r2, #176	; 0xb0
 800d204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d208:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d20a:	2300      	movs	r3, #0
 800d20c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d20e:	2300      	movs	r3, #0
 800d210:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e0bf      	b.n	800d3a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d050      	beq.n	800d2ce <USBD_CDC_Setup+0xde>
 800d22c:	2b20      	cmp	r3, #32
 800d22e:	f040 80af 	bne.w	800d390 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	88db      	ldrh	r3, [r3, #6]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d03a      	beq.n	800d2b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b25b      	sxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	da1b      	bge.n	800d27c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	33b0      	adds	r3, #176	; 0xb0
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d25a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	88d2      	ldrh	r2, [r2, #6]
 800d260:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	88db      	ldrh	r3, [r3, #6]
 800d266:	2b07      	cmp	r3, #7
 800d268:	bf28      	it	cs
 800d26a:	2307      	movcs	r3, #7
 800d26c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	89fa      	ldrh	r2, [r7, #14]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f001 fdad 	bl	800edd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d27a:	e090      	b.n	800d39e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	785a      	ldrb	r2, [r3, #1]
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	88db      	ldrh	r3, [r3, #6]
 800d28a:	2b3f      	cmp	r3, #63	; 0x3f
 800d28c:	d803      	bhi.n	800d296 <USBD_CDC_Setup+0xa6>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	88db      	ldrh	r3, [r3, #6]
 800d292:	b2da      	uxtb	r2, r3
 800d294:	e000      	b.n	800d298 <USBD_CDC_Setup+0xa8>
 800d296:	2240      	movs	r2, #64	; 0x40
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d29e:	6939      	ldr	r1, [r7, #16]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f001 fdbf 	bl	800ee2c <USBD_CtlPrepareRx>
      break;
 800d2ae:	e076      	b.n	800d39e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	33b0      	adds	r3, #176	; 0xb0
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	7850      	ldrb	r0, [r2, #1]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	6839      	ldr	r1, [r7, #0]
 800d2ca:	4798      	blx	r3
      break;
 800d2cc:	e067      	b.n	800d39e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	2b0b      	cmp	r3, #11
 800d2d4:	d851      	bhi.n	800d37a <USBD_CDC_Setup+0x18a>
 800d2d6:	a201      	add	r2, pc, #4	; (adr r2, 800d2dc <USBD_CDC_Setup+0xec>)
 800d2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2dc:	0800d30d 	.word	0x0800d30d
 800d2e0:	0800d389 	.word	0x0800d389
 800d2e4:	0800d37b 	.word	0x0800d37b
 800d2e8:	0800d37b 	.word	0x0800d37b
 800d2ec:	0800d37b 	.word	0x0800d37b
 800d2f0:	0800d37b 	.word	0x0800d37b
 800d2f4:	0800d37b 	.word	0x0800d37b
 800d2f8:	0800d37b 	.word	0x0800d37b
 800d2fc:	0800d37b 	.word	0x0800d37b
 800d300:	0800d37b 	.word	0x0800d37b
 800d304:	0800d337 	.word	0x0800d337
 800d308:	0800d361 	.word	0x0800d361
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b03      	cmp	r3, #3
 800d316:	d107      	bne.n	800d328 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d318:	f107 030a 	add.w	r3, r7, #10
 800d31c:	2202      	movs	r2, #2
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f001 fd57 	bl	800edd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d326:	e032      	b.n	800d38e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 fce1 	bl	800ecf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d330:	2303      	movs	r3, #3
 800d332:	75fb      	strb	r3, [r7, #23]
          break;
 800d334:	e02b      	b.n	800d38e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d107      	bne.n	800d352 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d342:	f107 030d 	add.w	r3, r7, #13
 800d346:	2201      	movs	r2, #1
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f001 fd42 	bl	800edd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d350:	e01d      	b.n	800d38e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 fccc 	bl	800ecf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d35a:	2303      	movs	r3, #3
 800d35c:	75fb      	strb	r3, [r7, #23]
          break;
 800d35e:	e016      	b.n	800d38e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d00f      	beq.n	800d38c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 fcbf 	bl	800ecf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d374:	2303      	movs	r3, #3
 800d376:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d378:	e008      	b.n	800d38c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d37a:	6839      	ldr	r1, [r7, #0]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 fcb8 	bl	800ecf2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d382:	2303      	movs	r3, #3
 800d384:	75fb      	strb	r3, [r7, #23]
          break;
 800d386:	e002      	b.n	800d38e <USBD_CDC_Setup+0x19e>
          break;
 800d388:	bf00      	nop
 800d38a:	e008      	b.n	800d39e <USBD_CDC_Setup+0x1ae>
          break;
 800d38c:	bf00      	nop
      }
      break;
 800d38e:	e006      	b.n	800d39e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f001 fcad 	bl	800ecf2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d398:	2303      	movs	r3, #3
 800d39a:	75fb      	strb	r3, [r7, #23]
      break;
 800d39c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	32b0      	adds	r2, #176	; 0xb0
 800d3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e065      	b.n	800d49e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	32b0      	adds	r2, #176	; 0xb0
 800d3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d3e2:	78fb      	ldrb	r3, [r7, #3]
 800d3e4:	f003 020f 	and.w	r2, r3, #15
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	440b      	add	r3, r1
 800d3f4:	3318      	adds	r3, #24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d02f      	beq.n	800d45c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d3fc:	78fb      	ldrb	r3, [r7, #3]
 800d3fe:	f003 020f 	and.w	r2, r3, #15
 800d402:	6879      	ldr	r1, [r7, #4]
 800d404:	4613      	mov	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	440b      	add	r3, r1
 800d40e:	3318      	adds	r3, #24
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	78fb      	ldrb	r3, [r7, #3]
 800d414:	f003 010f 	and.w	r1, r3, #15
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	460b      	mov	r3, r1
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	440b      	add	r3, r1
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4403      	add	r3, r0
 800d424:	3348      	adds	r3, #72	; 0x48
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	fbb2 f1f3 	udiv	r1, r2, r3
 800d42c:	fb01 f303 	mul.w	r3, r1, r3
 800d430:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d432:	2b00      	cmp	r3, #0
 800d434:	d112      	bne.n	800d45c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	f003 020f 	and.w	r2, r3, #15
 800d43c:	6879      	ldr	r1, [r7, #4]
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	440b      	add	r3, r1
 800d448:	3318      	adds	r3, #24
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d44e:	78f9      	ldrb	r1, [r7, #3]
 800d450:	2300      	movs	r3, #0
 800d452:	2200      	movs	r2, #0
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f004 ff04 	bl	8012262 <USBD_LL_Transmit>
 800d45a:	e01f      	b.n	800d49c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	33b0      	adds	r3, #176	; 0xb0
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	4413      	add	r3, r2
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d010      	beq.n	800d49c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	33b0      	adds	r3, #176	; 0xb0
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d498:	78fa      	ldrb	r2, [r7, #3]
 800d49a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	32b0      	adds	r2, #176	; 0xb0
 800d4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	32b0      	adds	r2, #176	; 0xb0
 800d4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	e01a      	b.n	800d50e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d4d8:	78fb      	ldrb	r3, [r7, #3]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f004 ff02 	bl	80122e6 <USBD_LL_GetRxDataSize>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	33b0      	adds	r3, #176	; 0xb0
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4413      	add	r3, r2
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d508:	4611      	mov	r1, r2
 800d50a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	32b0      	adds	r2, #176	; 0xb0
 800d528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d534:	2303      	movs	r3, #3
 800d536:	e025      	b.n	800d584 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	33b0      	adds	r3, #176	; 0xb0
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01a      	beq.n	800d582 <USBD_CDC_EP0_RxReady+0x6c>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d552:	2bff      	cmp	r3, #255	; 0xff
 800d554:	d015      	beq.n	800d582 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	33b0      	adds	r3, #176	; 0xb0
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d56e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d576:	b292      	uxth	r2, r2
 800d578:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	22ff      	movs	r2, #255	; 0xff
 800d57e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d594:	2182      	movs	r1, #130	; 0x82
 800d596:	4818      	ldr	r0, [pc, #96]	; (800d5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d598:	f000 fd49 	bl	800e02e <USBD_GetEpDesc>
 800d59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d59e:	2101      	movs	r1, #1
 800d5a0:	4815      	ldr	r0, [pc, #84]	; (800d5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d5a2:	f000 fd44 	bl	800e02e <USBD_GetEpDesc>
 800d5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5a8:	2181      	movs	r1, #129	; 0x81
 800d5aa:	4813      	ldr	r0, [pc, #76]	; (800d5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d5ac:	f000 fd3f 	bl	800e02e <USBD_GetEpDesc>
 800d5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2210      	movs	r2, #16
 800d5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5cc:	711a      	strb	r2, [r3, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d006      	beq.n	800d5e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5e0:	711a      	strb	r2, [r3, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2243      	movs	r2, #67	; 0x43
 800d5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5ec:	4b02      	ldr	r3, [pc, #8]	; (800d5f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20000050 	.word	0x20000050

0800d5fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d604:	2182      	movs	r1, #130	; 0x82
 800d606:	4818      	ldr	r0, [pc, #96]	; (800d668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d608:	f000 fd11 	bl	800e02e <USBD_GetEpDesc>
 800d60c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d60e:	2101      	movs	r1, #1
 800d610:	4815      	ldr	r0, [pc, #84]	; (800d668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d612:	f000 fd0c 	bl	800e02e <USBD_GetEpDesc>
 800d616:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d618:	2181      	movs	r1, #129	; 0x81
 800d61a:	4813      	ldr	r0, [pc, #76]	; (800d668 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d61c:	f000 fd07 	bl	800e02e <USBD_GetEpDesc>
 800d620:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	2210      	movs	r2, #16
 800d62c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d006      	beq.n	800d642 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	2200      	movs	r2, #0
 800d638:	711a      	strb	r2, [r3, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f042 0202 	orr.w	r2, r2, #2
 800d640:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	711a      	strb	r2, [r3, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f042 0202 	orr.w	r2, r2, #2
 800d654:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2243      	movs	r2, #67	; 0x43
 800d65a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d65c:	4b02      	ldr	r3, [pc, #8]	; (800d668 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000050 	.word	0x20000050

0800d66c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d674:	2182      	movs	r1, #130	; 0x82
 800d676:	4818      	ldr	r0, [pc, #96]	; (800d6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d678:	f000 fcd9 	bl	800e02e <USBD_GetEpDesc>
 800d67c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d67e:	2101      	movs	r1, #1
 800d680:	4815      	ldr	r0, [pc, #84]	; (800d6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d682:	f000 fcd4 	bl	800e02e <USBD_GetEpDesc>
 800d686:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d688:	2181      	movs	r1, #129	; 0x81
 800d68a:	4813      	ldr	r0, [pc, #76]	; (800d6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d68c:	f000 fccf 	bl	800e02e <USBD_GetEpDesc>
 800d690:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2210      	movs	r2, #16
 800d69c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d006      	beq.n	800d6b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6ac:	711a      	strb	r2, [r3, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d006      	beq.n	800d6c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6c0:	711a      	strb	r2, [r3, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2243      	movs	r2, #67	; 0x43
 800d6ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3718      	adds	r7, #24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20000050 	.word	0x20000050

0800d6dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	220a      	movs	r2, #10
 800d6e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d6ea:	4b03      	ldr	r3, [pc, #12]	; (800d6f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	2000000c 	.word	0x2000000c

0800d6fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e009      	b.n	800d724 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	33b0      	adds	r3, #176	; 0xb0
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	4413      	add	r3, r2
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d730:	b480      	push	{r7}
 800d732:	b087      	sub	sp, #28
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	32b0      	adds	r2, #176	; 0xb0
 800d746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d752:	2303      	movs	r3, #3
 800d754:	e008      	b.n	800d768 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	371c      	adds	r7, #28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	32b0      	adds	r2, #176	; 0xb0
 800d788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d794:	2303      	movs	r3, #3
 800d796:	e004      	b.n	800d7a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
	...

0800d7b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	32b0      	adds	r2, #176	; 0xb0
 800d7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e025      	b.n	800d822 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d11f      	bne.n	800d820 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d7e8:	4b10      	ldr	r3, [pc, #64]	; (800d82c <USBD_CDC_TransmitPacket+0x7c>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	f003 020f 	and.w	r2, r3, #15
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4403      	add	r3, r0
 800d802:	3318      	adds	r3, #24
 800d804:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d806:	4b09      	ldr	r3, [pc, #36]	; (800d82c <USBD_CDC_TransmitPacket+0x7c>)
 800d808:	7819      	ldrb	r1, [r3, #0]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f004 fd23 	bl	8012262 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	20000093 	.word	0x20000093

0800d830 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	32b0      	adds	r2, #176	; 0xb0
 800d842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d846:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	32b0      	adds	r2, #176	; 0xb0
 800d852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e018      	b.n	800d890 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7c1b      	ldrb	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <USBD_CDC_ReceivePacket+0x68>)
 800d868:	7819      	ldrb	r1, [r3, #0]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d870:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f004 fd15 	bl	80122a4 <USBD_LL_PrepareReceive>
 800d87a:	e008      	b.n	800d88e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d87c:	4b06      	ldr	r3, [pc, #24]	; (800d898 <USBD_CDC_ReceivePacket+0x68>)
 800d87e:	7819      	ldrb	r1, [r3, #0]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d886:	2340      	movs	r3, #64	; 0x40
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f004 fd0b 	bl	80122a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000094 	.word	0x20000094

0800d89c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d8b0:	2303      	movs	r3, #3
 800d8b2:	e01f      	b.n	800d8f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	79fa      	ldrb	r2, [r7, #7]
 800d8e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f004 fb7f 	bl	8011fec <USBD_LL_Init>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d910:	2303      	movs	r3, #3
 800d912:	e025      	b.n	800d960 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	32ae      	adds	r2, #174	; 0xae
 800d926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00f      	beq.n	800d950 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	32ae      	adds	r2, #174	; 0xae
 800d93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d940:	f107 020e 	add.w	r2, r7, #14
 800d944:	4610      	mov	r0, r2
 800d946:	4798      	blx	r3
 800d948:	4602      	mov	r2, r0
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f004 fb8d 	bl	8012090 <USBD_LL_Start>
 800d976:	4603      	mov	r3, r0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d988:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d009      	beq.n	800d9c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	78fa      	ldrb	r2, [r7, #3]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	4798      	blx	r3
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	78fa      	ldrb	r2, [r7, #3]
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	4798      	blx	r3
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	4618      	mov	r0, r3
 800da16:	f001 f932 	bl	800ec7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800da28:	461a      	mov	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da36:	f003 031f 	and.w	r3, r3, #31
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d01a      	beq.n	800da74 <USBD_LL_SetupStage+0x72>
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d822      	bhi.n	800da88 <USBD_LL_SetupStage+0x86>
 800da42:	2b00      	cmp	r3, #0
 800da44:	d002      	beq.n	800da4c <USBD_LL_SetupStage+0x4a>
 800da46:	2b01      	cmp	r3, #1
 800da48:	d00a      	beq.n	800da60 <USBD_LL_SetupStage+0x5e>
 800da4a:	e01d      	b.n	800da88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da52:	4619      	mov	r1, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fb5f 	bl	800e118 <USBD_StdDevReq>
 800da5a:	4603      	mov	r3, r0
 800da5c:	73fb      	strb	r3, [r7, #15]
      break;
 800da5e:	e020      	b.n	800daa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 fbc7 	bl	800e1fc <USBD_StdItfReq>
 800da6e:	4603      	mov	r3, r0
 800da70:	73fb      	strb	r3, [r7, #15]
      break;
 800da72:	e016      	b.n	800daa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fc29 	bl	800e2d4 <USBD_StdEPReq>
 800da82:	4603      	mov	r3, r0
 800da84:	73fb      	strb	r3, [r7, #15]
      break;
 800da86:	e00c      	b.n	800daa2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da92:	b2db      	uxtb	r3, r3
 800da94:	4619      	mov	r1, r3
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f004 fb5a 	bl	8012150 <USBD_LL_StallEP>
 800da9c:	4603      	mov	r3, r0
 800da9e:	73fb      	strb	r3, [r7, #15]
      break;
 800daa0:	bf00      	nop
  }

  return ret;
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	460b      	mov	r3, r1
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d16e      	bne.n	800dba2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800daca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	f040 8098 	bne.w	800dc08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	689a      	ldr	r2, [r3, #8]
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d913      	bls.n	800db0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	1ad2      	subs	r2, r2, r3
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	68da      	ldr	r2, [r3, #12]
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	4293      	cmp	r3, r2
 800dafc:	bf28      	it	cs
 800dafe:	4613      	movcs	r3, r2
 800db00:	461a      	mov	r2, r3
 800db02:	6879      	ldr	r1, [r7, #4]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f001 f9ae 	bl	800ee66 <USBD_CtlContinueRx>
 800db0a:	e07d      	b.n	800dc08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db12:	f003 031f 	and.w	r3, r3, #31
 800db16:	2b02      	cmp	r3, #2
 800db18:	d014      	beq.n	800db44 <USBD_LL_DataOutStage+0x98>
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d81d      	bhi.n	800db5a <USBD_LL_DataOutStage+0xae>
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <USBD_LL_DataOutStage+0x7c>
 800db22:	2b01      	cmp	r3, #1
 800db24:	d003      	beq.n	800db2e <USBD_LL_DataOutStage+0x82>
 800db26:	e018      	b.n	800db5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	75bb      	strb	r3, [r7, #22]
            break;
 800db2c:	e018      	b.n	800db60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db34:	b2db      	uxtb	r3, r3
 800db36:	4619      	mov	r1, r3
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 fa5e 	bl	800dffa <USBD_CoreFindIF>
 800db3e:	4603      	mov	r3, r0
 800db40:	75bb      	strb	r3, [r7, #22]
            break;
 800db42:	e00d      	b.n	800db60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	4619      	mov	r1, r3
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 fa60 	bl	800e014 <USBD_CoreFindEP>
 800db54:	4603      	mov	r3, r0
 800db56:	75bb      	strb	r3, [r7, #22]
            break;
 800db58:	e002      	b.n	800db60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800db5a:	2300      	movs	r3, #0
 800db5c:	75bb      	strb	r3, [r7, #22]
            break;
 800db5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800db60:	7dbb      	ldrb	r3, [r7, #22]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d119      	bne.n	800db9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d113      	bne.n	800db9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800db72:	7dba      	ldrb	r2, [r7, #22]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	32ae      	adds	r2, #174	; 0xae
 800db78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00b      	beq.n	800db9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db82:	7dba      	ldrb	r2, [r7, #22]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db8a:	7dba      	ldrb	r2, [r7, #22]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	32ae      	adds	r2, #174	; 0xae
 800db90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f001 f974 	bl	800ee88 <USBD_CtlSendStatus>
 800dba0:	e032      	b.n	800dc08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dba2:	7afb      	ldrb	r3, [r7, #11]
 800dba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	4619      	mov	r1, r3
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f000 fa31 	bl	800e014 <USBD_CoreFindEP>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbb6:	7dbb      	ldrb	r3, [r7, #22]
 800dbb8:	2bff      	cmp	r3, #255	; 0xff
 800dbba:	d025      	beq.n	800dc08 <USBD_LL_DataOutStage+0x15c>
 800dbbc:	7dbb      	ldrb	r3, [r7, #22]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d122      	bne.n	800dc08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d117      	bne.n	800dbfe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dbce:	7dba      	ldrb	r2, [r7, #22]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	32ae      	adds	r2, #174	; 0xae
 800dbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00f      	beq.n	800dbfe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dbde:	7dba      	ldrb	r2, [r7, #22]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dbe6:	7dba      	ldrb	r2, [r7, #22]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	32ae      	adds	r2, #174	; 0xae
 800dbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	7afa      	ldrb	r2, [r7, #11]
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	4798      	blx	r3
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	e000      	b.n	800dc0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dc20:	7afb      	ldrb	r3, [r7, #11]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d16f      	bne.n	800dd06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3314      	adds	r3, #20
 800dc2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d15a      	bne.n	800dcec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	689a      	ldr	r2, [r3, #8]
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d914      	bls.n	800dc6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	689a      	ldr	r2, [r3, #8]
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	1ad2      	subs	r2, r2, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f001 f8d6 	bl	800ee0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2200      	movs	r2, #0
 800dc62:	2100      	movs	r1, #0
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f004 fb1d 	bl	80122a4 <USBD_LL_PrepareReceive>
 800dc6a:	e03f      	b.n	800dcec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	68da      	ldr	r2, [r3, #12]
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d11c      	bne.n	800dcb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d316      	bcc.n	800dcb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d20f      	bcs.n	800dcb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc92:	2200      	movs	r2, #0
 800dc94:	2100      	movs	r1, #0
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f001 f8b7 	bl	800ee0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dca4:	2300      	movs	r3, #0
 800dca6:	2200      	movs	r2, #0
 800dca8:	2100      	movs	r1, #0
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f004 fafa 	bl	80122a4 <USBD_LL_PrepareReceive>
 800dcb0:	e01c      	b.n	800dcec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d10f      	bne.n	800dcde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcde:	2180      	movs	r1, #128	; 0x80
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f004 fa35 	bl	8012150 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f001 f8e1 	bl	800eeae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d03a      	beq.n	800dd6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f7ff fe42 	bl	800d980 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dd04:	e032      	b.n	800dd6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dd06:	7afb      	ldrb	r3, [r7, #11]
 800dd08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	4619      	mov	r1, r3
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 f97f 	bl	800e014 <USBD_CoreFindEP>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	2bff      	cmp	r3, #255	; 0xff
 800dd1e:	d025      	beq.n	800dd6c <USBD_LL_DataInStage+0x15a>
 800dd20:	7dfb      	ldrb	r3, [r7, #23]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d122      	bne.n	800dd6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d11c      	bne.n	800dd6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dd32:	7dfa      	ldrb	r2, [r7, #23]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	32ae      	adds	r2, #174	; 0xae
 800dd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d014      	beq.n	800dd6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dd42:	7dfa      	ldrb	r2, [r7, #23]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dd4a:	7dfa      	ldrb	r2, [r7, #23]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	32ae      	adds	r2, #174	; 0xae
 800dd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	7afa      	ldrb	r2, [r7, #11]
 800dd58:	4611      	mov	r1, r2
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	4798      	blx	r3
 800dd5e:	4603      	mov	r3, r0
 800dd60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dd62:	7dbb      	ldrb	r3, [r7, #22]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dd68:	7dbb      	ldrb	r3, [r7, #22]
 800dd6a:	e000      	b.n	800dd6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d014      	beq.n	800dddc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00e      	beq.n	800dddc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	6852      	ldr	r2, [r2, #4]
 800ddca:	b2d2      	uxtb	r2, r2
 800ddcc:	4611      	mov	r1, r2
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	4798      	blx	r3
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	2200      	movs	r2, #0
 800dde0:	2100      	movs	r1, #0
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f004 f96f 	bl	80120c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2240      	movs	r2, #64	; 0x40
 800ddf4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2180      	movs	r1, #128	; 0x80
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f004 f961 	bl	80120c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2240      	movs	r2, #64	; 0x40
 800de0e:	621a      	str	r2, [r3, #32]

  return ret;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de1a:	b480      	push	{r7}
 800de1c:	b083      	sub	sp, #12
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	78fa      	ldrb	r2, [r7, #3]
 800de2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2204      	movs	r2, #4
 800de54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	370c      	adds	r7, #12
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de66:	b480      	push	{r7}
 800de68:	b083      	sub	sp, #12
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b04      	cmp	r3, #4
 800de78:	d106      	bne.n	800de88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800de80:	b2da      	uxtb	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b082      	sub	sp, #8
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d110      	bne.n	800decc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	32ae      	adds	r2, #174	; 0xae
 800deec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800def4:	2303      	movs	r3, #3
 800def6:	e01c      	b.n	800df32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b03      	cmp	r3, #3
 800df02:	d115      	bne.n	800df30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	32ae      	adds	r2, #174	; 0xae
 800df0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df12:	6a1b      	ldr	r3, [r3, #32]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00b      	beq.n	800df30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	32ae      	adds	r2, #174	; 0xae
 800df22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	78fa      	ldrb	r2, [r7, #3]
 800df2a:	4611      	mov	r1, r2
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}

0800df3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b082      	sub	sp, #8
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	460b      	mov	r3, r1
 800df44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	32ae      	adds	r2, #174	; 0xae
 800df50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800df58:	2303      	movs	r3, #3
 800df5a:	e01c      	b.n	800df96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b03      	cmp	r3, #3
 800df66:	d115      	bne.n	800df94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	32ae      	adds	r2, #174	; 0xae
 800df72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	32ae      	adds	r2, #174	; 0xae
 800df86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	78fa      	ldrb	r2, [r7, #3]
 800df8e:	4611      	mov	r1, r2
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00e      	beq.n	800dff0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	6852      	ldr	r2, [r2, #4]
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	4798      	blx	r3
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dfec:	2303      	movs	r3, #3
 800dfee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b083      	sub	sp, #12
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	460b      	mov	r3, r1
 800e004:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e006:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e020:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e022:	4618      	mov	r0, r3
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b086      	sub	sp, #24
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	460b      	mov	r3, r1
 800e038:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	885b      	ldrh	r3, [r3, #2]
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b29b      	uxth	r3, r3
 800e052:	429a      	cmp	r2, r3
 800e054:	d920      	bls.n	800e098 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e05e:	e013      	b.n	800e088 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e060:	f107 030a 	add.w	r3, r7, #10
 800e064:	4619      	mov	r1, r3
 800e066:	6978      	ldr	r0, [r7, #20]
 800e068:	f000 f81b 	bl	800e0a2 <USBD_GetNextDesc>
 800e06c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	785b      	ldrb	r3, [r3, #1]
 800e072:	2b05      	cmp	r3, #5
 800e074:	d108      	bne.n	800e088 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	789b      	ldrb	r3, [r3, #2]
 800e07e:	78fa      	ldrb	r2, [r7, #3]
 800e080:	429a      	cmp	r2, r3
 800e082:	d008      	beq.n	800e096 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	885b      	ldrh	r3, [r3, #2]
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	897b      	ldrh	r3, [r7, #10]
 800e090:	429a      	cmp	r2, r3
 800e092:	d8e5      	bhi.n	800e060 <USBD_GetEpDesc+0x32>
 800e094:	e000      	b.n	800e098 <USBD_GetEpDesc+0x6a>
          break;
 800e096:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e098:	693b      	ldr	r3, [r7, #16]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3718      	adds	r7, #24
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	881a      	ldrh	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	4413      	add	r3, r2
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e0fa:	8a3b      	ldrh	r3, [r7, #16]
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	b21a      	sxth	r2, r3
 800e100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e104:	4313      	orrs	r3, r2
 800e106:	b21b      	sxth	r3, r3
 800e108:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e10a:	89fb      	ldrh	r3, [r7, #14]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	371c      	adds	r7, #28
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e122:	2300      	movs	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e12e:	2b40      	cmp	r3, #64	; 0x40
 800e130:	d005      	beq.n	800e13e <USBD_StdDevReq+0x26>
 800e132:	2b40      	cmp	r3, #64	; 0x40
 800e134:	d857      	bhi.n	800e1e6 <USBD_StdDevReq+0xce>
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00f      	beq.n	800e15a <USBD_StdDevReq+0x42>
 800e13a:	2b20      	cmp	r3, #32
 800e13c:	d153      	bne.n	800e1e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	32ae      	adds	r2, #174	; 0xae
 800e148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	4798      	blx	r3
 800e154:	4603      	mov	r3, r0
 800e156:	73fb      	strb	r3, [r7, #15]
      break;
 800e158:	e04a      	b.n	800e1f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	785b      	ldrb	r3, [r3, #1]
 800e15e:	2b09      	cmp	r3, #9
 800e160:	d83b      	bhi.n	800e1da <USBD_StdDevReq+0xc2>
 800e162:	a201      	add	r2, pc, #4	; (adr r2, 800e168 <USBD_StdDevReq+0x50>)
 800e164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e168:	0800e1bd 	.word	0x0800e1bd
 800e16c:	0800e1d1 	.word	0x0800e1d1
 800e170:	0800e1db 	.word	0x0800e1db
 800e174:	0800e1c7 	.word	0x0800e1c7
 800e178:	0800e1db 	.word	0x0800e1db
 800e17c:	0800e19b 	.word	0x0800e19b
 800e180:	0800e191 	.word	0x0800e191
 800e184:	0800e1db 	.word	0x0800e1db
 800e188:	0800e1b3 	.word	0x0800e1b3
 800e18c:	0800e1a5 	.word	0x0800e1a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa3c 	bl	800e610 <USBD_GetDescriptor>
          break;
 800e198:	e024      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fbcb 	bl	800e938 <USBD_SetAddress>
          break;
 800e1a2:	e01f      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fc0a 	bl	800e9c0 <USBD_SetConfig>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73fb      	strb	r3, [r7, #15]
          break;
 800e1b0:	e018      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fcad 	bl	800eb14 <USBD_GetConfig>
          break;
 800e1ba:	e013      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 fcde 	bl	800eb80 <USBD_GetStatus>
          break;
 800e1c4:	e00e      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fd0d 	bl	800ebe8 <USBD_SetFeature>
          break;
 800e1ce:	e009      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e1d0:	6839      	ldr	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 fd31 	bl	800ec3a <USBD_ClrFeature>
          break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fd88 	bl	800ecf2 <USBD_CtlError>
          break;
 800e1e2:	bf00      	nop
      }
      break;
 800e1e4:	e004      	b.n	800e1f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 fd82 	bl	800ecf2 <USBD_CtlError>
      break;
 800e1ee:	bf00      	nop
  }

  return ret;
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop

0800e1fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e212:	2b40      	cmp	r3, #64	; 0x40
 800e214:	d005      	beq.n	800e222 <USBD_StdItfReq+0x26>
 800e216:	2b40      	cmp	r3, #64	; 0x40
 800e218:	d852      	bhi.n	800e2c0 <USBD_StdItfReq+0xc4>
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <USBD_StdItfReq+0x26>
 800e21e:	2b20      	cmp	r3, #32
 800e220:	d14e      	bne.n	800e2c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	3b01      	subs	r3, #1
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d840      	bhi.n	800e2b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	889b      	ldrh	r3, [r3, #4]
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b01      	cmp	r3, #1
 800e238:	d836      	bhi.n	800e2a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	889b      	ldrh	r3, [r3, #4]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fed9 	bl	800dffa <USBD_CoreFindIF>
 800e248:	4603      	mov	r3, r0
 800e24a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e24c:	7bbb      	ldrb	r3, [r7, #14]
 800e24e:	2bff      	cmp	r3, #255	; 0xff
 800e250:	d01d      	beq.n	800e28e <USBD_StdItfReq+0x92>
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d11a      	bne.n	800e28e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e258:	7bba      	ldrb	r2, [r7, #14]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	32ae      	adds	r2, #174	; 0xae
 800e25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00f      	beq.n	800e288 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e268:	7bba      	ldrb	r2, [r7, #14]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e270:	7bba      	ldrb	r2, [r7, #14]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	32ae      	adds	r2, #174	; 0xae
 800e276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	4798      	blx	r3
 800e282:	4603      	mov	r3, r0
 800e284:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e286:	e004      	b.n	800e292 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e288:	2303      	movs	r3, #3
 800e28a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e28c:	e001      	b.n	800e292 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e28e:	2303      	movs	r3, #3
 800e290:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	88db      	ldrh	r3, [r3, #6]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d110      	bne.n	800e2bc <USBD_StdItfReq+0xc0>
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10d      	bne.n	800e2bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 fdf1 	bl	800ee88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e2a6:	e009      	b.n	800e2bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 fd21 	bl	800ecf2 <USBD_CtlError>
          break;
 800e2b0:	e004      	b.n	800e2bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fd1c 	bl	800ecf2 <USBD_CtlError>
          break;
 800e2ba:	e000      	b.n	800e2be <USBD_StdItfReq+0xc2>
          break;
 800e2bc:	bf00      	nop
      }
      break;
 800e2be:	e004      	b.n	800e2ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fd15 	bl	800ecf2 <USBD_CtlError>
      break;
 800e2c8:	bf00      	nop
  }

  return ret;
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	889b      	ldrh	r3, [r3, #4]
 800e2e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2f0:	2b40      	cmp	r3, #64	; 0x40
 800e2f2:	d007      	beq.n	800e304 <USBD_StdEPReq+0x30>
 800e2f4:	2b40      	cmp	r3, #64	; 0x40
 800e2f6:	f200 817f 	bhi.w	800e5f8 <USBD_StdEPReq+0x324>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d02a      	beq.n	800e354 <USBD_StdEPReq+0x80>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	f040 817a 	bne.w	800e5f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e304:	7bbb      	ldrb	r3, [r7, #14]
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff fe83 	bl	800e014 <USBD_CoreFindEP>
 800e30e:	4603      	mov	r3, r0
 800e310:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e312:	7b7b      	ldrb	r3, [r7, #13]
 800e314:	2bff      	cmp	r3, #255	; 0xff
 800e316:	f000 8174 	beq.w	800e602 <USBD_StdEPReq+0x32e>
 800e31a:	7b7b      	ldrb	r3, [r7, #13]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f040 8170 	bne.w	800e602 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e322:	7b7a      	ldrb	r2, [r7, #13]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e32a:	7b7a      	ldrb	r2, [r7, #13]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	32ae      	adds	r2, #174	; 0xae
 800e330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 8163 	beq.w	800e602 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e33c:	7b7a      	ldrb	r2, [r7, #13]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	32ae      	adds	r2, #174	; 0xae
 800e342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
 800e34e:	4603      	mov	r3, r0
 800e350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e352:	e156      	b.n	800e602 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	785b      	ldrb	r3, [r3, #1]
 800e358:	2b03      	cmp	r3, #3
 800e35a:	d008      	beq.n	800e36e <USBD_StdEPReq+0x9a>
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	f300 8145 	bgt.w	800e5ec <USBD_StdEPReq+0x318>
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 809b 	beq.w	800e49e <USBD_StdEPReq+0x1ca>
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d03c      	beq.n	800e3e6 <USBD_StdEPReq+0x112>
 800e36c:	e13e      	b.n	800e5ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b02      	cmp	r3, #2
 800e378:	d002      	beq.n	800e380 <USBD_StdEPReq+0xac>
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d016      	beq.n	800e3ac <USBD_StdEPReq+0xd8>
 800e37e:	e02c      	b.n	800e3da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e380:	7bbb      	ldrb	r3, [r7, #14]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00d      	beq.n	800e3a2 <USBD_StdEPReq+0xce>
 800e386:	7bbb      	ldrb	r3, [r7, #14]
 800e388:	2b80      	cmp	r3, #128	; 0x80
 800e38a:	d00a      	beq.n	800e3a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f003 fedd 	bl	8012150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e396:	2180      	movs	r1, #128	; 0x80
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f003 fed9 	bl	8012150 <USBD_LL_StallEP>
 800e39e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e3a0:	e020      	b.n	800e3e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e3a2:	6839      	ldr	r1, [r7, #0]
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 fca4 	bl	800ecf2 <USBD_CtlError>
              break;
 800e3aa:	e01b      	b.n	800e3e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	885b      	ldrh	r3, [r3, #2]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10e      	bne.n	800e3d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e3b4:	7bbb      	ldrb	r3, [r7, #14]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00b      	beq.n	800e3d2 <USBD_StdEPReq+0xfe>
 800e3ba:	7bbb      	ldrb	r3, [r7, #14]
 800e3bc:	2b80      	cmp	r3, #128	; 0x80
 800e3be:	d008      	beq.n	800e3d2 <USBD_StdEPReq+0xfe>
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	88db      	ldrh	r3, [r3, #6]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d104      	bne.n	800e3d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f003 febf 	bl	8012150 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fd58 	bl	800ee88 <USBD_CtlSendStatus>

              break;
 800e3d8:	e004      	b.n	800e3e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fc88 	bl	800ecf2 <USBD_CtlError>
              break;
 800e3e2:	bf00      	nop
          }
          break;
 800e3e4:	e107      	b.n	800e5f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d002      	beq.n	800e3f8 <USBD_StdEPReq+0x124>
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	d016      	beq.n	800e424 <USBD_StdEPReq+0x150>
 800e3f6:	e04b      	b.n	800e490 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00d      	beq.n	800e41a <USBD_StdEPReq+0x146>
 800e3fe:	7bbb      	ldrb	r3, [r7, #14]
 800e400:	2b80      	cmp	r3, #128	; 0x80
 800e402:	d00a      	beq.n	800e41a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f003 fea1 	bl	8012150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e40e:	2180      	movs	r1, #128	; 0x80
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f003 fe9d 	bl	8012150 <USBD_LL_StallEP>
 800e416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e418:	e040      	b.n	800e49c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e41a:	6839      	ldr	r1, [r7, #0]
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fc68 	bl	800ecf2 <USBD_CtlError>
              break;
 800e422:	e03b      	b.n	800e49c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	885b      	ldrh	r3, [r3, #2]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d136      	bne.n	800e49a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e42c:	7bbb      	ldrb	r3, [r7, #14]
 800e42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e432:	2b00      	cmp	r3, #0
 800e434:	d004      	beq.n	800e440 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	4619      	mov	r1, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f003 fea7 	bl	801218e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fd21 	bl	800ee88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7ff fde2 	bl	800e014 <USBD_CoreFindEP>
 800e450:	4603      	mov	r3, r0
 800e452:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e454:	7b7b      	ldrb	r3, [r7, #13]
 800e456:	2bff      	cmp	r3, #255	; 0xff
 800e458:	d01f      	beq.n	800e49a <USBD_StdEPReq+0x1c6>
 800e45a:	7b7b      	ldrb	r3, [r7, #13]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d11c      	bne.n	800e49a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e460:	7b7a      	ldrb	r2, [r7, #13]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e468:	7b7a      	ldrb	r2, [r7, #13]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	32ae      	adds	r2, #174	; 0xae
 800e46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d010      	beq.n	800e49a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e478:	7b7a      	ldrb	r2, [r7, #13]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	32ae      	adds	r2, #174	; 0xae
 800e47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	6839      	ldr	r1, [r7, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	4798      	blx	r3
 800e48a:	4603      	mov	r3, r0
 800e48c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e48e:	e004      	b.n	800e49a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e490:	6839      	ldr	r1, [r7, #0]
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fc2d 	bl	800ecf2 <USBD_CtlError>
              break;
 800e498:	e000      	b.n	800e49c <USBD_StdEPReq+0x1c8>
              break;
 800e49a:	bf00      	nop
          }
          break;
 800e49c:	e0ab      	b.n	800e5f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d002      	beq.n	800e4b0 <USBD_StdEPReq+0x1dc>
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	d032      	beq.n	800e514 <USBD_StdEPReq+0x240>
 800e4ae:	e097      	b.n	800e5e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d007      	beq.n	800e4c6 <USBD_StdEPReq+0x1f2>
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	2b80      	cmp	r3, #128	; 0x80
 800e4ba:	d004      	beq.n	800e4c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fc17 	bl	800ecf2 <USBD_CtlError>
                break;
 800e4c4:	e091      	b.n	800e5ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da0b      	bge.n	800e4e6 <USBD_StdEPReq+0x212>
 800e4ce:	7bbb      	ldrb	r3, [r7, #14]
 800e4d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	3310      	adds	r3, #16
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	e00b      	b.n	800e4fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4e6:	7bbb      	ldrb	r3, [r7, #14]
 800e4e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2202      	movs	r2, #2
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fc61 	bl	800edd4 <USBD_CtlSendData>
              break;
 800e512:	e06a      	b.n	800e5ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	da11      	bge.n	800e540 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e51c:	7bbb      	ldrb	r3, [r7, #14]
 800e51e:	f003 020f 	and.w	r2, r3, #15
 800e522:	6879      	ldr	r1, [r7, #4]
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	440b      	add	r3, r1
 800e52e:	3324      	adds	r3, #36	; 0x24
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d117      	bne.n	800e566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e536:	6839      	ldr	r1, [r7, #0]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 fbda 	bl	800ecf2 <USBD_CtlError>
                  break;
 800e53e:	e054      	b.n	800e5ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	f003 020f 	and.w	r2, r3, #15
 800e546:	6879      	ldr	r1, [r7, #4]
 800e548:	4613      	mov	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	440b      	add	r3, r1
 800e552:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d104      	bne.n	800e566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 fbc7 	bl	800ecf2 <USBD_CtlError>
                  break;
 800e564:	e041      	b.n	800e5ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	da0b      	bge.n	800e586 <USBD_StdEPReq+0x2b2>
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	3310      	adds	r3, #16
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	4413      	add	r3, r2
 800e582:	3304      	adds	r3, #4
 800e584:	e00b      	b.n	800e59e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	4413      	add	r3, r2
 800e59c:	3304      	adds	r3, #4
 800e59e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e5a0:	7bbb      	ldrb	r3, [r7, #14]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d002      	beq.n	800e5ac <USBD_StdEPReq+0x2d8>
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	2b80      	cmp	r3, #128	; 0x80
 800e5aa:	d103      	bne.n	800e5b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	e00e      	b.n	800e5d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f003 fe07 	bl	80121cc <USBD_LL_IsStallEP>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d003      	beq.n	800e5cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	601a      	str	r2, [r3, #0]
 800e5ca:	e002      	b.n	800e5d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 fbfb 	bl	800edd4 <USBD_CtlSendData>
              break;
 800e5de:	e004      	b.n	800e5ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fb85 	bl	800ecf2 <USBD_CtlError>
              break;
 800e5e8:	bf00      	nop
          }
          break;
 800e5ea:	e004      	b.n	800e5f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 fb7f 	bl	800ecf2 <USBD_CtlError>
          break;
 800e5f4:	bf00      	nop
      }
      break;
 800e5f6:	e005      	b.n	800e604 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fb79 	bl	800ecf2 <USBD_CtlError>
      break;
 800e600:	e000      	b.n	800e604 <USBD_StdEPReq+0x330>
      break;
 800e602:	bf00      	nop
  }

  return ret;
 800e604:	7bfb      	ldrb	r3, [r7, #15]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
	...

0800e610 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	885b      	ldrh	r3, [r3, #2]
 800e62a:	0a1b      	lsrs	r3, r3, #8
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	2b0e      	cmp	r3, #14
 800e632:	f200 8152 	bhi.w	800e8da <USBD_GetDescriptor+0x2ca>
 800e636:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <USBD_GetDescriptor+0x2c>)
 800e638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63c:	0800e6ad 	.word	0x0800e6ad
 800e640:	0800e6c5 	.word	0x0800e6c5
 800e644:	0800e705 	.word	0x0800e705
 800e648:	0800e8db 	.word	0x0800e8db
 800e64c:	0800e8db 	.word	0x0800e8db
 800e650:	0800e87b 	.word	0x0800e87b
 800e654:	0800e8a7 	.word	0x0800e8a7
 800e658:	0800e8db 	.word	0x0800e8db
 800e65c:	0800e8db 	.word	0x0800e8db
 800e660:	0800e8db 	.word	0x0800e8db
 800e664:	0800e8db 	.word	0x0800e8db
 800e668:	0800e8db 	.word	0x0800e8db
 800e66c:	0800e8db 	.word	0x0800e8db
 800e670:	0800e8db 	.word	0x0800e8db
 800e674:	0800e679 	.word	0x0800e679
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e67e:	69db      	ldr	r3, [r3, #28]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00b      	beq.n	800e69c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	7c12      	ldrb	r2, [r2, #16]
 800e690:	f107 0108 	add.w	r1, r7, #8
 800e694:	4610      	mov	r0, r2
 800e696:	4798      	blx	r3
 800e698:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e69a:	e126      	b.n	800e8ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fb27 	bl	800ecf2 <USBD_CtlError>
        err++;
 800e6a4:	7afb      	ldrb	r3, [r7, #11]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	72fb      	strb	r3, [r7, #11]
      break;
 800e6aa:	e11e      	b.n	800e8ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	7c12      	ldrb	r2, [r2, #16]
 800e6b8:	f107 0108 	add.w	r1, r7, #8
 800e6bc:	4610      	mov	r0, r2
 800e6be:	4798      	blx	r3
 800e6c0:	60f8      	str	r0, [r7, #12]
      break;
 800e6c2:	e112      	b.n	800e8ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	7c1b      	ldrb	r3, [r3, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10d      	bne.n	800e6e8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d4:	f107 0208 	add.w	r2, r7, #8
 800e6d8:	4610      	mov	r0, r2
 800e6da:	4798      	blx	r3
 800e6dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e6e6:	e100      	b.n	800e8ea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f0:	f107 0208 	add.w	r2, r7, #8
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	4798      	blx	r3
 800e6f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	2202      	movs	r2, #2
 800e700:	701a      	strb	r2, [r3, #0]
      break;
 800e702:	e0f2      	b.n	800e8ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	885b      	ldrh	r3, [r3, #2]
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b05      	cmp	r3, #5
 800e70c:	f200 80ac 	bhi.w	800e868 <USBD_GetDescriptor+0x258>
 800e710:	a201      	add	r2, pc, #4	; (adr r2, 800e718 <USBD_GetDescriptor+0x108>)
 800e712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e716:	bf00      	nop
 800e718:	0800e731 	.word	0x0800e731
 800e71c:	0800e765 	.word	0x0800e765
 800e720:	0800e799 	.word	0x0800e799
 800e724:	0800e7cd 	.word	0x0800e7cd
 800e728:	0800e801 	.word	0x0800e801
 800e72c:	0800e835 	.word	0x0800e835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00b      	beq.n	800e754 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	7c12      	ldrb	r2, [r2, #16]
 800e748:	f107 0108 	add.w	r1, r7, #8
 800e74c:	4610      	mov	r0, r2
 800e74e:	4798      	blx	r3
 800e750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e752:	e091      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 facb 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e75c:	7afb      	ldrb	r3, [r7, #11]
 800e75e:	3301      	adds	r3, #1
 800e760:	72fb      	strb	r3, [r7, #11]
          break;
 800e762:	e089      	b.n	800e878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00b      	beq.n	800e788 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	7c12      	ldrb	r2, [r2, #16]
 800e77c:	f107 0108 	add.w	r1, r7, #8
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
 800e784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e786:	e077      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fab1 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e790:	7afb      	ldrb	r3, [r7, #11]
 800e792:	3301      	adds	r3, #1
 800e794:	72fb      	strb	r3, [r7, #11]
          break;
 800e796:	e06f      	b.n	800e878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00b      	beq.n	800e7bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	7c12      	ldrb	r2, [r2, #16]
 800e7b0:	f107 0108 	add.w	r1, r7, #8
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	4798      	blx	r3
 800e7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7ba:	e05d      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa97 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e7c4:	7afb      	ldrb	r3, [r7, #11]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e7ca:	e055      	b.n	800e878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00b      	beq.n	800e7f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	7c12      	ldrb	r2, [r2, #16]
 800e7e4:	f107 0108 	add.w	r1, r7, #8
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4798      	blx	r3
 800e7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7ee:	e043      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fa7d 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e7fe:	e03b      	b.n	800e878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00b      	beq.n	800e824 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	7c12      	ldrb	r2, [r2, #16]
 800e818:	f107 0108 	add.w	r1, r7, #8
 800e81c:	4610      	mov	r0, r2
 800e81e:	4798      	blx	r3
 800e820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e822:	e029      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 fa63 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e82c:	7afb      	ldrb	r3, [r7, #11]
 800e82e:	3301      	adds	r3, #1
 800e830:	72fb      	strb	r3, [r7, #11]
          break;
 800e832:	e021      	b.n	800e878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00b      	beq.n	800e858 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	7c12      	ldrb	r2, [r2, #16]
 800e84c:	f107 0108 	add.w	r1, r7, #8
 800e850:	4610      	mov	r0, r2
 800e852:	4798      	blx	r3
 800e854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e856:	e00f      	b.n	800e878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e858:	6839      	ldr	r1, [r7, #0]
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fa49 	bl	800ecf2 <USBD_CtlError>
            err++;
 800e860:	7afb      	ldrb	r3, [r7, #11]
 800e862:	3301      	adds	r3, #1
 800e864:	72fb      	strb	r3, [r7, #11]
          break;
 800e866:	e007      	b.n	800e878 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fa41 	bl	800ecf2 <USBD_CtlError>
          err++;
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	3301      	adds	r3, #1
 800e874:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e876:	bf00      	nop
      }
      break;
 800e878:	e037      	b.n	800e8ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	7c1b      	ldrb	r3, [r3, #16]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d109      	bne.n	800e896 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88a:	f107 0208 	add.w	r2, r7, #8
 800e88e:	4610      	mov	r0, r2
 800e890:	4798      	blx	r3
 800e892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e894:	e029      	b.n	800e8ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 fa2a 	bl	800ecf2 <USBD_CtlError>
        err++;
 800e89e:	7afb      	ldrb	r3, [r7, #11]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	72fb      	strb	r3, [r7, #11]
      break;
 800e8a4:	e021      	b.n	800e8ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7c1b      	ldrb	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10d      	bne.n	800e8ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b6:	f107 0208 	add.w	r2, r7, #8
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	4798      	blx	r3
 800e8be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	2207      	movs	r2, #7
 800e8c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8c8:	e00f      	b.n	800e8ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fa10 	bl	800ecf2 <USBD_CtlError>
        err++;
 800e8d2:	7afb      	ldrb	r3, [r7, #11]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e8d8:	e007      	b.n	800e8ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fa08 	bl	800ecf2 <USBD_CtlError>
      err++;
 800e8e2:	7afb      	ldrb	r3, [r7, #11]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e8e8:	bf00      	nop
  }

  if (err != 0U)
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d11e      	bne.n	800e92e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	88db      	ldrh	r3, [r3, #6]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d016      	beq.n	800e926 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e8f8:	893b      	ldrh	r3, [r7, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00e      	beq.n	800e91c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	88da      	ldrh	r2, [r3, #6]
 800e902:	893b      	ldrh	r3, [r7, #8]
 800e904:	4293      	cmp	r3, r2
 800e906:	bf28      	it	cs
 800e908:	4613      	movcs	r3, r2
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e90e:	893b      	ldrh	r3, [r7, #8]
 800e910:	461a      	mov	r2, r3
 800e912:	68f9      	ldr	r1, [r7, #12]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fa5d 	bl	800edd4 <USBD_CtlSendData>
 800e91a:	e009      	b.n	800e930 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e91c:	6839      	ldr	r1, [r7, #0]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f9e7 	bl	800ecf2 <USBD_CtlError>
 800e924:	e004      	b.n	800e930 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 faae 	bl	800ee88 <USBD_CtlSendStatus>
 800e92c:	e000      	b.n	800e930 <USBD_GetDescriptor+0x320>
    return;
 800e92e:	bf00      	nop
  }
}
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop

0800e938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	889b      	ldrh	r3, [r3, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d131      	bne.n	800e9ae <USBD_SetAddress+0x76>
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	88db      	ldrh	r3, [r3, #6]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d12d      	bne.n	800e9ae <USBD_SetAddress+0x76>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	885b      	ldrh	r3, [r3, #2]
 800e956:	2b7f      	cmp	r3, #127	; 0x7f
 800e958:	d829      	bhi.n	800e9ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	885b      	ldrh	r3, [r3, #2]
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d104      	bne.n	800e97c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f9bc 	bl	800ecf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e97a:	e01d      	b.n	800e9b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7bfa      	ldrb	r2, [r7, #15]
 800e980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f003 fc4b 	bl	8012224 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fa7a 	bl	800ee88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d004      	beq.n	800e9a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2202      	movs	r2, #2
 800e99e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9a2:	e009      	b.n	800e9b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9ac:	e004      	b.n	800e9b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f99e 	bl	800ecf2 <USBD_CtlError>
  }
}
 800e9b6:	bf00      	nop
 800e9b8:	bf00      	nop
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	885b      	ldrh	r3, [r3, #2]
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	4b4e      	ldr	r3, [pc, #312]	; (800eb10 <USBD_SetConfig+0x150>)
 800e9d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e9d8:	4b4d      	ldr	r3, [pc, #308]	; (800eb10 <USBD_SetConfig+0x150>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d905      	bls.n	800e9ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f985 	bl	800ecf2 <USBD_CtlError>
    return USBD_FAIL;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	e08c      	b.n	800eb06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d002      	beq.n	800e9fe <USBD_SetConfig+0x3e>
 800e9f8:	2b03      	cmp	r3, #3
 800e9fa:	d029      	beq.n	800ea50 <USBD_SetConfig+0x90>
 800e9fc:	e075      	b.n	800eaea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e9fe:	4b44      	ldr	r3, [pc, #272]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d020      	beq.n	800ea48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ea06:	4b42      	ldr	r3, [pc, #264]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea10:	4b3f      	ldr	r3, [pc, #252]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	4619      	mov	r1, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7fe ffbd 	bl	800d996 <USBD_SetClassConfig>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d008      	beq.n	800ea38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 f962 	bl	800ecf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2202      	movs	r2, #2
 800ea32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea36:	e065      	b.n	800eb04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fa25 	bl	800ee88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2203      	movs	r2, #3
 800ea42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea46:	e05d      	b.n	800eb04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fa1d 	bl	800ee88 <USBD_CtlSendStatus>
      break;
 800ea4e:	e059      	b.n	800eb04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ea50:	4b2f      	ldr	r3, [pc, #188]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d112      	bne.n	800ea7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ea60:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea6a:	4b29      	ldr	r3, [pc, #164]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7fe ffac 	bl	800d9ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fa06 	bl	800ee88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea7c:	e042      	b.n	800eb04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ea7e:	4b24      	ldr	r3, [pc, #144]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d02a      	beq.n	800eae2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7fe ff9a 	bl	800d9ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <USBD_SetConfig+0x150>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eaa4:	4b1a      	ldr	r3, [pc, #104]	; (800eb10 <USBD_SetConfig+0x150>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7fe ff73 	bl	800d996 <USBD_SetClassConfig>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00f      	beq.n	800eada <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eaba:	6839      	ldr	r1, [r7, #0]
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f918 	bl	800ecf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7fe ff7f 	bl	800d9ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ead8:	e014      	b.n	800eb04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f9d4 	bl	800ee88 <USBD_CtlSendStatus>
      break;
 800eae0:	e010      	b.n	800eb04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f9d0 	bl	800ee88 <USBD_CtlSendStatus>
      break;
 800eae8:	e00c      	b.n	800eb04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f900 	bl	800ecf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <USBD_SetConfig+0x150>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7fe ff68 	bl	800d9ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eafe:	2303      	movs	r3, #3
 800eb00:	73fb      	strb	r3, [r7, #15]
      break;
 800eb02:	bf00      	nop
  }

  return ret;
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200026f8 	.word	0x200026f8

0800eb14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d004      	beq.n	800eb30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f8e2 	bl	800ecf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb2e:	e023      	b.n	800eb78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	dc02      	bgt.n	800eb42 <USBD_GetConfig+0x2e>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	dc03      	bgt.n	800eb48 <USBD_GetConfig+0x34>
 800eb40:	e015      	b.n	800eb6e <USBD_GetConfig+0x5a>
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	d00b      	beq.n	800eb5e <USBD_GetConfig+0x4a>
 800eb46:	e012      	b.n	800eb6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	3308      	adds	r3, #8
 800eb52:	2201      	movs	r2, #1
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f93c 	bl	800edd4 <USBD_CtlSendData>
        break;
 800eb5c:	e00c      	b.n	800eb78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3304      	adds	r3, #4
 800eb62:	2201      	movs	r2, #1
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f934 	bl	800edd4 <USBD_CtlSendData>
        break;
 800eb6c:	e004      	b.n	800eb78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f8be 	bl	800ecf2 <USBD_CtlError>
        break;
 800eb76:	bf00      	nop
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	3b01      	subs	r3, #1
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d81e      	bhi.n	800ebd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	88db      	ldrh	r3, [r3, #6]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d004      	beq.n	800ebaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f8a5 	bl	800ecf2 <USBD_CtlError>
        break;
 800eba8:	e01a      	b.n	800ebe0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	f043 0202 	orr.w	r2, r3, #2
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	330c      	adds	r3, #12
 800ebca:	2202      	movs	r2, #2
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f900 	bl	800edd4 <USBD_CtlSendData>
      break;
 800ebd4:	e004      	b.n	800ebe0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ebd6:	6839      	ldr	r1, [r7, #0]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f88a 	bl	800ecf2 <USBD_CtlError>
      break;
 800ebde:	bf00      	nop
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	885b      	ldrh	r3, [r3, #2]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d107      	bne.n	800ec0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f940 	bl	800ee88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ec08:	e013      	b.n	800ec32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	885b      	ldrh	r3, [r3, #2]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d10b      	bne.n	800ec2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	889b      	ldrh	r3, [r3, #4]
 800ec16:	0a1b      	lsrs	r3, r3, #8
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 f930 	bl	800ee88 <USBD_CtlSendStatus>
}
 800ec28:	e003      	b.n	800ec32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f860 	bl	800ecf2 <USBD_CtlError>
}
 800ec32:	bf00      	nop
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d80b      	bhi.n	800ec6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	885b      	ldrh	r3, [r3, #2]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d10c      	bne.n	800ec74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 f910 	bl	800ee88 <USBD_CtlSendStatus>
      }
      break;
 800ec68:	e004      	b.n	800ec74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f840 	bl	800ecf2 <USBD_CtlError>
      break;
 800ec72:	e000      	b.n	800ec76 <USBD_ClrFeature+0x3c>
      break;
 800ec74:	bf00      	nop
  }
}
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	781a      	ldrb	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	3301      	adds	r3, #1
 800ec98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	781a      	ldrb	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3301      	adds	r3, #1
 800eca6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7ff fa17 	bl	800e0dc <SWAPBYTE>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f7ff fa0a 	bl	800e0dc <SWAPBYTE>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7ff f9fd 	bl	800e0dc <SWAPBYTE>
 800ece2:	4603      	mov	r3, r0
 800ece4:	461a      	mov	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	80da      	strh	r2, [r3, #6]
}
 800ecea:	bf00      	nop
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b082      	sub	sp, #8
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecfc:	2180      	movs	r1, #128	; 0x80
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f003 fa26 	bl	8012150 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ed04:	2100      	movs	r1, #0
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f003 fa22 	bl	8012150 <USBD_LL_StallEP>
}
 800ed0c:	bf00      	nop
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ed20:	2300      	movs	r3, #0
 800ed22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d036      	beq.n	800ed98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed2e:	6938      	ldr	r0, [r7, #16]
 800ed30:	f000 f836 	bl	800eda0 <USBD_GetLen>
 800ed34:	4603      	mov	r3, r0
 800ed36:	3301      	adds	r3, #1
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	4413      	add	r3, r2
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	7812      	ldrb	r2, [r2, #0]
 800ed4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	3301      	adds	r3, #1
 800ed52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed54:	7dfb      	ldrb	r3, [r7, #23]
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	4413      	add	r3, r2
 800ed5a:	2203      	movs	r2, #3
 800ed5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
 800ed60:	3301      	adds	r3, #1
 800ed62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed64:	e013      	b.n	800ed8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	7812      	ldrb	r2, [r2, #0]
 800ed70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	3301      	adds	r3, #1
 800ed76:	613b      	str	r3, [r7, #16]
    idx++;
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	68ba      	ldr	r2, [r7, #8]
 800ed82:	4413      	add	r3, r2
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
    idx++;
 800ed88:	7dfb      	ldrb	r3, [r7, #23]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1e7      	bne.n	800ed66 <USBD_GetString+0x52>
 800ed96:	e000      	b.n	800ed9a <USBD_GetString+0x86>
    return;
 800ed98:	bf00      	nop
  }
}
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eda8:	2300      	movs	r3, #0
 800edaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800edb0:	e005      	b.n	800edbe <USBD_GetLen+0x1e>
  {
    len++;
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
 800edb4:	3301      	adds	r3, #1
 800edb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	3301      	adds	r3, #1
 800edbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1f5      	bne.n	800edb2 <USBD_GetLen+0x12>
  }

  return len;
 800edc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2202      	movs	r2, #2
 800ede4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	2100      	movs	r1, #0
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f003 fa31 	bl	8012262 <USBD_LL_Transmit>

  return USBD_OK;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	60f8      	str	r0, [r7, #12]
 800ee12:	60b9      	str	r1, [r7, #8]
 800ee14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68ba      	ldr	r2, [r7, #8]
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f003 fa20 	bl	8012262 <USBD_LL_Transmit>

  return USBD_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2203      	movs	r2, #3
 800ee3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68ba      	ldr	r2, [r7, #8]
 800ee54:	2100      	movs	r1, #0
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f003 fa24 	bl	80122a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b084      	sub	sp, #16
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	60f8      	str	r0, [r7, #12]
 800ee6e:	60b9      	str	r1, [r7, #8]
 800ee70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	2100      	movs	r1, #0
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f003 fa13 	bl	80122a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2204      	movs	r2, #4
 800ee94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ee98:	2300      	movs	r3, #0
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f003 f9df 	bl	8012262 <USBD_LL_Transmit>

  return USBD_OK;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b082      	sub	sp, #8
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2205      	movs	r2, #5
 800eeba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eebe:	2300      	movs	r3, #0
 800eec0:	2200      	movs	r2, #0
 800eec2:	2100      	movs	r1, #0
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f003 f9ed 	bl	80122a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b089      	sub	sp, #36	; 0x24
 800eed8:	af04      	add	r7, sp, #16
 800eeda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800eedc:	2301      	movs	r3, #1
 800eede:	2202      	movs	r2, #2
 800eee0:	2102      	movs	r1, #2
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fc85 	bl	800f7f2 <USBH_FindInterface>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	2bff      	cmp	r3, #255	; 0xff
 800eef0:	d002      	beq.n	800eef8 <USBH_CDC_InterfaceInit+0x24>
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d901      	bls.n	800eefc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800eef8:	2302      	movs	r3, #2
 800eefa:	e13d      	b.n	800f178 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fc5a 	bl	800f7ba <USBH_SelectInterface>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ef10:	2302      	movs	r3, #2
 800ef12:	e131      	b.n	800f178 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ef1a:	2050      	movs	r0, #80	; 0x50
 800ef1c:	f003 fdb8 	bl	8012a90 <malloc>
 800ef20:	4603      	mov	r3, r0
 800ef22:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef2a:	69db      	ldr	r3, [r3, #28]
 800ef2c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ef34:	2302      	movs	r3, #2
 800ef36:	e11f      	b.n	800f178 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ef38:	2250      	movs	r2, #80	; 0x50
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	68b8      	ldr	r0, [r7, #8]
 800ef3e:	f003 fdb7 	bl	8012ab0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	211a      	movs	r1, #26
 800ef48:	fb01 f303 	mul.w	r3, r1, r3
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	b25b      	sxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	da15      	bge.n	800ef86 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	211a      	movs	r1, #26
 800ef60:	fb01 f303 	mul.w	r3, r1, r3
 800ef64:	4413      	add	r3, r2
 800ef66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ef6a:	781a      	ldrb	r2, [r3, #0]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ef70:	7bfb      	ldrb	r3, [r7, #15]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	211a      	movs	r1, #26
 800ef76:	fb01 f303 	mul.w	r3, r1, r3
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ef80:	881a      	ldrh	r2, [r3, #0]
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	785b      	ldrb	r3, [r3, #1]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f001 ff26 	bl	8010dde <USBH_AllocPipe>
 800ef92:	4603      	mov	r3, r0
 800ef94:	461a      	mov	r2, r3
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	7819      	ldrb	r1, [r3, #0]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	7858      	ldrb	r0, [r3, #1]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	8952      	ldrh	r2, [r2, #10]
 800efb2:	9202      	str	r2, [sp, #8]
 800efb4:	2203      	movs	r2, #3
 800efb6:	9201      	str	r2, [sp, #4]
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	4623      	mov	r3, r4
 800efbc:	4602      	mov	r2, r0
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f001 fede 	bl	8010d80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2200      	movs	r2, #0
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f003 fcb1 	bl	8012934 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800efd2:	2300      	movs	r3, #0
 800efd4:	2200      	movs	r2, #0
 800efd6:	210a      	movs	r1, #10
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fc0a 	bl	800f7f2 <USBH_FindInterface>
 800efde:	4603      	mov	r3, r0
 800efe0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	2bff      	cmp	r3, #255	; 0xff
 800efe6:	d002      	beq.n	800efee <USBH_CDC_InterfaceInit+0x11a>
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d901      	bls.n	800eff2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800efee:	2302      	movs	r3, #2
 800eff0:	e0c2      	b.n	800f178 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	211a      	movs	r1, #26
 800eff8:	fb01 f303 	mul.w	r3, r1, r3
 800effc:	4413      	add	r3, r2
 800effe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	b25b      	sxtb	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	da16      	bge.n	800f038 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f00a:	7bfb      	ldrb	r3, [r7, #15]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	211a      	movs	r1, #26
 800f010:	fb01 f303 	mul.w	r3, r1, r3
 800f014:	4413      	add	r3, r2
 800f016:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f01a:	781a      	ldrb	r2, [r3, #0]
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	211a      	movs	r1, #26
 800f026:	fb01 f303 	mul.w	r3, r1, r3
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f030:	881a      	ldrh	r2, [r3, #0]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	835a      	strh	r2, [r3, #26]
 800f036:	e015      	b.n	800f064 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f038:	7bfb      	ldrb	r3, [r7, #15]
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	211a      	movs	r1, #26
 800f03e:	fb01 f303 	mul.w	r3, r1, r3
 800f042:	4413      	add	r3, r2
 800f044:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f048:	781a      	ldrb	r2, [r3, #0]
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	211a      	movs	r1, #26
 800f054:	fb01 f303 	mul.w	r3, r1, r3
 800f058:	4413      	add	r3, r2
 800f05a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f05e:	881a      	ldrh	r2, [r3, #0]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	211a      	movs	r1, #26
 800f06a:	fb01 f303 	mul.w	r3, r1, r3
 800f06e:	4413      	add	r3, r2
 800f070:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	b25b      	sxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da16      	bge.n	800f0aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	211a      	movs	r1, #26
 800f082:	fb01 f303 	mul.w	r3, r1, r3
 800f086:	4413      	add	r3, r2
 800f088:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f08c:	781a      	ldrb	r2, [r3, #0]
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f092:	7bfb      	ldrb	r3, [r7, #15]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	211a      	movs	r1, #26
 800f098:	fb01 f303 	mul.w	r3, r1, r3
 800f09c:	4413      	add	r3, r2
 800f09e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f0a2:	881a      	ldrh	r2, [r3, #0]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	835a      	strh	r2, [r3, #26]
 800f0a8:	e015      	b.n	800f0d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	211a      	movs	r1, #26
 800f0b0:	fb01 f303 	mul.w	r3, r1, r3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	211a      	movs	r1, #26
 800f0c6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ca:	4413      	add	r3, r2
 800f0cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f0d0:	881a      	ldrh	r2, [r3, #0]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	7b9b      	ldrb	r3, [r3, #14]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f001 fe7e 	bl	8010dde <USBH_AllocPipe>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	7bdb      	ldrb	r3, [r3, #15]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f001 fe74 	bl	8010dde <USBH_AllocPipe>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	7b59      	ldrb	r1, [r3, #13]
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	7b98      	ldrb	r0, [r3, #14]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	8b12      	ldrh	r2, [r2, #24]
 800f116:	9202      	str	r2, [sp, #8]
 800f118:	2202      	movs	r2, #2
 800f11a:	9201      	str	r2, [sp, #4]
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	4623      	mov	r3, r4
 800f120:	4602      	mov	r2, r0
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f001 fe2c 	bl	8010d80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	7b19      	ldrb	r1, [r3, #12]
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	7bd8      	ldrb	r0, [r3, #15]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	8b52      	ldrh	r2, [r2, #26]
 800f140:	9202      	str	r2, [sp, #8]
 800f142:	2202      	movs	r2, #2
 800f144:	9201      	str	r2, [sp, #4]
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	4623      	mov	r3, r4
 800f14a:	4602      	mov	r2, r0
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 fe17 	bl	8010d80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2200      	movs	r2, #0
 800f156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	7b5b      	ldrb	r3, [r3, #13]
 800f15e:	2200      	movs	r2, #0
 800f160:	4619      	mov	r1, r3
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f003 fbe6 	bl	8012934 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	7b1b      	ldrb	r3, [r3, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f003 fbdf 	bl	8012934 <USBH_LL_SetToggle>

  return USBH_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd90      	pop	{r4, r7, pc}

0800f180 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f18e:	69db      	ldr	r3, [r3, #28]
 800f190:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00e      	beq.n	800f1b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f001 fe0c 	bl	8010dbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f001 fe37 	bl	8010e20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	7b1b      	ldrb	r3, [r3, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00e      	beq.n	800f1de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	7b1b      	ldrb	r3, [r3, #12]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f001 fdf9 	bl	8010dbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	7b1b      	ldrb	r3, [r3, #12]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f001 fe24 	bl	8010e20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	7b5b      	ldrb	r3, [r3, #13]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00e      	beq.n	800f204 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	7b5b      	ldrb	r3, [r3, #13]
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f001 fde6 	bl	8010dbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	7b5b      	ldrb	r3, [r3, #13]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f001 fe11 	bl	8010e20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00b      	beq.n	800f228 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	4618      	mov	r0, r3
 800f21a:	f003 fc41 	bl	8012aa0 <free>
    phost->pActiveClass->pData = 0U;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f224:	2200      	movs	r2, #0
 800f226:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f228:	2300      	movs	r3, #0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b084      	sub	sp, #16
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f240:	69db      	ldr	r3, [r3, #28]
 800f242:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	3340      	adds	r3, #64	; 0x40
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f8b1 	bl	800f3b2 <GetLineCoding>
 800f250:	4603      	mov	r3, r0
 800f252:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f254:	7afb      	ldrb	r3, [r7, #11]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d105      	bne.n	800f266 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f260:	2102      	movs	r1, #2
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f266:	7afb      	ldrb	r3, [r7, #11]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f278:	2301      	movs	r3, #1
 800f27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f286:	69db      	ldr	r3, [r3, #28]
 800f288:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f290:	2b04      	cmp	r3, #4
 800f292:	d877      	bhi.n	800f384 <USBH_CDC_Process+0x114>
 800f294:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <USBH_CDC_Process+0x2c>)
 800f296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29a:	bf00      	nop
 800f29c:	0800f2b1 	.word	0x0800f2b1
 800f2a0:	0800f2b7 	.word	0x0800f2b7
 800f2a4:	0800f2e7 	.word	0x0800f2e7
 800f2a8:	0800f35b 	.word	0x0800f35b
 800f2ac:	0800f369 	.word	0x0800f369
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f2b4:	e06d      	b.n	800f392 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f897 	bl	800f3f0 <SetLineCoding>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f2c6:	7bbb      	ldrb	r3, [r7, #14]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d104      	bne.n	800f2d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2202      	movs	r2, #2
 800f2d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f2d4:	e058      	b.n	800f388 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f2d6:	7bbb      	ldrb	r3, [r7, #14]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d055      	beq.n	800f388 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2204      	movs	r2, #4
 800f2e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f2e4:	e050      	b.n	800f388 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	3340      	adds	r3, #64	; 0x40
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f860 	bl	800f3b2 <GetLineCoding>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d126      	bne.n	800f34a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f30e:	791b      	ldrb	r3, [r3, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d13b      	bne.n	800f38c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f31e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f320:	429a      	cmp	r2, r3
 800f322:	d133      	bne.n	800f38c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f32e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f330:	429a      	cmp	r2, r3
 800f332:	d12b      	bne.n	800f38c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f33c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f33e:	429a      	cmp	r2, r3
 800f340:	d124      	bne.n	800f38c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f958 	bl	800f5f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f348:	e020      	b.n	800f38c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f34a:	7bbb      	ldrb	r3, [r7, #14]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d01d      	beq.n	800f38c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2204      	movs	r2, #4
 800f354:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f358:	e018      	b.n	800f38c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f867 	bl	800f42e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f8da 	bl	800f51a <CDC_ProcessReception>
      break;
 800f366:	e014      	b.n	800f392 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f368:	2100      	movs	r1, #0
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f001 f80f 	bl	801038e <USBH_ClrFeature>
 800f370:	4603      	mov	r3, r0
 800f372:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d10a      	bne.n	800f390 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f382:	e005      	b.n	800f390 <USBH_CDC_Process+0x120>

    default:
      break;
 800f384:	bf00      	nop
 800f386:	e004      	b.n	800f392 <USBH_CDC_Process+0x122>
      break;
 800f388:	bf00      	nop
 800f38a:	e002      	b.n	800f392 <USBH_CDC_Process+0x122>
      break;
 800f38c:	bf00      	nop
 800f38e:	e000      	b.n	800f392 <USBH_CDC_Process+0x122>
      break;
 800f390:	bf00      	nop

  }

  return status;
 800f392:	7bfb      	ldrb	r3, [r7, #15]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b082      	sub	sp, #8
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	22a1      	movs	r2, #161	; 0xa1
 800f3c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2221      	movs	r2, #33	; 0x21
 800f3c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2207      	movs	r2, #7
 800f3d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2207      	movs	r2, #7
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f001 fa7b 	bl	80108dc <USBH_CtlReq>
 800f3e6:	4603      	mov	r3, r0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2221      	movs	r2, #33	; 0x21
 800f3fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2220      	movs	r2, #32
 800f404:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2207      	movs	r2, #7
 800f416:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2207      	movs	r2, #7
 800f41c:	4619      	mov	r1, r3
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f001 fa5c 	bl	80108dc <USBH_CtlReq>
 800f424:	4603      	mov	r3, r0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b086      	sub	sp, #24
 800f432:	af02      	add	r7, sp, #8
 800f434:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f440:	2300      	movs	r3, #0
 800f442:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d002      	beq.n	800f454 <CDC_ProcessTransmission+0x26>
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d023      	beq.n	800f49a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f452:	e05e      	b.n	800f512 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	8b12      	ldrh	r2, [r2, #24]
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d90b      	bls.n	800f478 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	69d9      	ldr	r1, [r3, #28]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8b1a      	ldrh	r2, [r3, #24]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	7b5b      	ldrb	r3, [r3, #13]
 800f46c:	2001      	movs	r0, #1
 800f46e:	9000      	str	r0, [sp, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 fc42 	bl	8010cfa <USBH_BulkSendData>
 800f476:	e00b      	b.n	800f490 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800f480:	b29a      	uxth	r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	7b5b      	ldrb	r3, [r3, #13]
 800f486:	2001      	movs	r0, #1
 800f488:	9000      	str	r0, [sp, #0]
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f001 fc35 	bl	8010cfa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2202      	movs	r2, #2
 800f494:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f498:	e03b      	b.n	800f512 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	7b5b      	ldrb	r3, [r3, #13]
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f003 fa1d 	bl	80128e0 <USBH_LL_GetURBState>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f4aa:	7afb      	ldrb	r3, [r7, #11]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d128      	bne.n	800f502 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	8b12      	ldrh	r2, [r2, #24]
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d90e      	bls.n	800f4da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	8b12      	ldrh	r2, [r2, #24]
 800f4c4:	1a9a      	subs	r2, r3, r2
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	69db      	ldr	r3, [r3, #28]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	8b12      	ldrh	r2, [r2, #24]
 800f4d2:	441a      	add	r2, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	61da      	str	r2, [r3, #28]
 800f4d8:	e002      	b.n	800f4e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d004      	beq.n	800f4f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f4f0:	e00e      	b.n	800f510 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f868 	bl	800f5d0 <USBH_CDC_TransmitCallback>
      break;
 800f500:	e006      	b.n	800f510 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f502:	7afb      	ldrb	r3, [r7, #11]
 800f504:	2b02      	cmp	r3, #2
 800f506:	d103      	bne.n	800f510 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f510:	bf00      	nop
  }
}
 800f512:	bf00      	nop
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b086      	sub	sp, #24
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f528:	69db      	ldr	r3, [r3, #28]
 800f52a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f52c:	2300      	movs	r3, #0
 800f52e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f536:	2b03      	cmp	r3, #3
 800f538:	d002      	beq.n	800f540 <CDC_ProcessReception+0x26>
 800f53a:	2b04      	cmp	r3, #4
 800f53c:	d00e      	beq.n	800f55c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f53e:	e043      	b.n	800f5c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	6a19      	ldr	r1, [r3, #32]
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	8b5a      	ldrh	r2, [r3, #26]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	7b1b      	ldrb	r3, [r3, #12]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f001 fbf9 	bl	8010d44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2204      	movs	r2, #4
 800f556:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f55a:	e035      	b.n	800f5c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	7b1b      	ldrb	r3, [r3, #12]
 800f560:	4619      	mov	r1, r3
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f003 f9bc 	bl	80128e0 <USBH_LL_GetURBState>
 800f568:	4603      	mov	r3, r0
 800f56a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f56c:	7cfb      	ldrb	r3, [r7, #19]
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d129      	bne.n	800f5c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	7b1b      	ldrb	r3, [r3, #12]
 800f576:	4619      	mov	r1, r3
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f003 f91f 	bl	80127bc <USBH_LL_GetLastXferSize>
 800f57e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	429a      	cmp	r2, r3
 800f588:	d016      	beq.n	800f5b8 <CDC_ProcessReception+0x9e>
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	8b5b      	ldrh	r3, [r3, #26]
 800f58e:	461a      	mov	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	4293      	cmp	r3, r2
 800f594:	d910      	bls.n	800f5b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	1ad2      	subs	r2, r2, r3
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	6a1a      	ldr	r2, [r3, #32]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	441a      	add	r2, r3
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	2203      	movs	r2, #3
 800f5b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f5b6:	e006      	b.n	800f5c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f80f 	bl	800f5e4 <USBH_CDC_ReceiveCallback>
      break;
 800f5c6:	bf00      	nop
  }
}
 800f5c8:	bf00      	nop
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f5ec:	bf00      	nop
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	4613      	mov	r3, r2
 800f618:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f620:	2302      	movs	r3, #2
 800f622:	e029      	b.n	800f678 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	79fa      	ldrb	r2, [r7, #7]
 800f628:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2200      	movs	r2, #0
 800f638:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f000 f81f 	bl	800f680 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d003      	beq.n	800f670 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f002 ffef 	bl	8012654 <USBH_LL_Init>

  return USBH_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f688:	2300      	movs	r3, #0
 800f68a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f68c:	2300      	movs	r3, #0
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	e009      	b.n	800f6a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	33e0      	adds	r3, #224	; 0xe0
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4413      	add	r3, r2
 800f69c:	2200      	movs	r2, #0
 800f69e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b0f      	cmp	r3, #15
 800f6aa:	d9f2      	bls.n	800f692 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	e009      	b.n	800f6c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f6bc:	2200      	movs	r2, #0
 800f6be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6cc:	d3f1      	bcc.n	800f6b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2240      	movs	r2, #64	; 0x40
 800f6f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	331c      	adds	r3, #28
 800f71e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f722:	2100      	movs	r1, #0
 800f724:	4618      	mov	r0, r3
 800f726:	f003 f9c3 	bl	8012ab0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f734:	2100      	movs	r1, #0
 800f736:	4618      	mov	r0, r3
 800f738:	f003 f9ba 	bl	8012ab0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800f742:	2212      	movs	r2, #18
 800f744:	2100      	movs	r1, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f003 f9b2 	bl	8012ab0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f752:	223e      	movs	r2, #62	; 0x3e
 800f754:	2100      	movs	r1, #0
 800f756:	4618      	mov	r0, r3
 800f758:	f003 f9aa 	bl	8012ab0 <memset>

  return USBH_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f766:	b480      	push	{r7}
 800f768:	b085      	sub	sp, #20
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d016      	beq.n	800f7a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10e      	bne.n	800f7a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f78a:	1c59      	adds	r1, r3, #1
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	33de      	adds	r3, #222	; 0xde
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	73fb      	strb	r3, [r7, #15]
 800f7a0:	e004      	b.n	800f7ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	73fb      	strb	r3, [r7, #15]
 800f7a6:	e001      	b.n	800f7ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3714      	adds	r7, #20
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f7d0:	78fa      	ldrb	r2, [r7, #3]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d204      	bcs.n	800f7e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	78fa      	ldrb	r2, [r7, #3]
 800f7da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f7de:	e001      	b.n	800f7e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3714      	adds	r7, #20
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b087      	sub	sp, #28
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	461a      	mov	r2, r3
 800f800:	4603      	mov	r3, r0
 800f802:	70fb      	strb	r3, [r7, #3]
 800f804:	460b      	mov	r3, r1
 800f806:	70bb      	strb	r3, [r7, #2]
 800f808:	4613      	mov	r3, r2
 800f80a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f810:	2300      	movs	r3, #0
 800f812:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f81a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f81c:	e025      	b.n	800f86a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	221a      	movs	r2, #26
 800f822:	fb02 f303 	mul.w	r3, r2, r3
 800f826:	3308      	adds	r3, #8
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	4413      	add	r3, r2
 800f82c:	3302      	adds	r3, #2
 800f82e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	795b      	ldrb	r3, [r3, #5]
 800f834:	78fa      	ldrb	r2, [r7, #3]
 800f836:	429a      	cmp	r2, r3
 800f838:	d002      	beq.n	800f840 <USBH_FindInterface+0x4e>
 800f83a:	78fb      	ldrb	r3, [r7, #3]
 800f83c:	2bff      	cmp	r3, #255	; 0xff
 800f83e:	d111      	bne.n	800f864 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f844:	78ba      	ldrb	r2, [r7, #2]
 800f846:	429a      	cmp	r2, r3
 800f848:	d002      	beq.n	800f850 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f84a:	78bb      	ldrb	r3, [r7, #2]
 800f84c:	2bff      	cmp	r3, #255	; 0xff
 800f84e:	d109      	bne.n	800f864 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f854:	787a      	ldrb	r2, [r7, #1]
 800f856:	429a      	cmp	r2, r3
 800f858:	d002      	beq.n	800f860 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f85a:	787b      	ldrb	r3, [r7, #1]
 800f85c:	2bff      	cmp	r3, #255	; 0xff
 800f85e:	d101      	bne.n	800f864 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	e006      	b.n	800f872 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f864:	7dfb      	ldrb	r3, [r7, #23]
 800f866:	3301      	adds	r3, #1
 800f868:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d9d6      	bls.n	800f81e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f870:	23ff      	movs	r3, #255	; 0xff
}
 800f872:	4618      	mov	r0, r3
 800f874:	371c      	adds	r7, #28
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f002 ff20 	bl	80126cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f88c:	2101      	movs	r1, #1
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f003 f839 	bl	8012906 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b088      	sub	sp, #32
 800f8a4:	af04      	add	r7, sp, #16
 800f8a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f8a8:	2302      	movs	r3, #2
 800f8aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d102      	bne.n	800f8c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2203      	movs	r2, #3
 800f8c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b0b      	cmp	r3, #11
 800f8ca:	f200 81be 	bhi.w	800fc4a <USBH_Process+0x3aa>
 800f8ce:	a201      	add	r2, pc, #4	; (adr r2, 800f8d4 <USBH_Process+0x34>)
 800f8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d4:	0800f905 	.word	0x0800f905
 800f8d8:	0800f937 	.word	0x0800f937
 800f8dc:	0800f99f 	.word	0x0800f99f
 800f8e0:	0800fbe5 	.word	0x0800fbe5
 800f8e4:	0800fc4b 	.word	0x0800fc4b
 800f8e8:	0800fa43 	.word	0x0800fa43
 800f8ec:	0800fb8b 	.word	0x0800fb8b
 800f8f0:	0800fa79 	.word	0x0800fa79
 800f8f4:	0800fa99 	.word	0x0800fa99
 800f8f8:	0800fab9 	.word	0x0800fab9
 800f8fc:	0800fafd 	.word	0x0800fafd
 800f900:	0800fbcd 	.word	0x0800fbcd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 819e 	beq.w	800fc4e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f918:	20c8      	movs	r0, #200	; 0xc8
 800f91a:	f003 f83b 	bl	8012994 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f002 ff31 	bl	8012786 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f934:	e18b      	b.n	800fc4e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d107      	bne.n	800f950 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2202      	movs	r2, #2
 800f94c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f94e:	e18d      	b.n	800fc6c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f95a:	d914      	bls.n	800f986 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f962:	3301      	adds	r3, #1
 800f964:	b2da      	uxtb	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f972:	2b03      	cmp	r3, #3
 800f974:	d903      	bls.n	800f97e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	220d      	movs	r2, #13
 800f97a:	701a      	strb	r2, [r3, #0]
      break;
 800f97c:	e176      	b.n	800fc6c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	701a      	strb	r2, [r3, #0]
      break;
 800f984:	e172      	b.n	800fc6c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f98c:	f103 020a 	add.w	r2, r3, #10
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f996:	200a      	movs	r0, #10
 800f998:	f002 fffc 	bl	8012994 <USBH_Delay>
      break;
 800f99c:	e166      	b.n	800fc6c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d005      	beq.n	800f9b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9ae:	2104      	movs	r1, #4
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f9b4:	2064      	movs	r0, #100	; 0x64
 800f9b6:	f002 ffed 	bl	8012994 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f002 febc 	bl	8012738 <USBH_LL_GetSpeed>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2205      	movs	r2, #5
 800f9ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f001 fa03 	bl	8010dde <USBH_AllocPipe>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	461a      	mov	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f9e0:	2180      	movs	r1, #128	; 0x80
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f001 f9fb 	bl	8010dde <USBH_AllocPipe>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7919      	ldrb	r1, [r3, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa04:	b292      	uxth	r2, r2
 800fa06:	9202      	str	r2, [sp, #8]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	9201      	str	r2, [sp, #4]
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2280      	movs	r2, #128	; 0x80
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f001 f9b4 	bl	8010d80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7959      	ldrb	r1, [r3, #5]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa2c:	b292      	uxth	r2, r2
 800fa2e:	9202      	str	r2, [sp, #8]
 800fa30:	2200      	movs	r2, #0
 800fa32:	9201      	str	r2, [sp, #4]
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	4603      	mov	r3, r0
 800fa38:	2200      	movs	r2, #0
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f001 f9a0 	bl	8010d80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa40:	e114      	b.n	800fc6c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f918 	bl	800fc78 <USBH_HandleEnum>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f040 80fe 	bne.w	800fc52 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d103      	bne.n	800fa70 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2208      	movs	r2, #8
 800fa6c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fa6e:	e0f0      	b.n	800fc52 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2207      	movs	r2, #7
 800fa74:	701a      	strb	r2, [r3, #0]
      break;
 800fa76:	e0ec      	b.n	800fc52 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 80e9 	beq.w	800fc56 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2208      	movs	r2, #8
 800fa94:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fa96:	e0de      	b.n	800fc56 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fc2c 	bl	8010300 <USBH_SetCfg>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	f040 80d5 	bne.w	800fc5a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2209      	movs	r2, #9
 800fab4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fab6:	e0d0      	b.n	800fc5a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800fabe:	f003 0320 	and.w	r3, r3, #32
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d016      	beq.n	800faf4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fac6:	2101      	movs	r1, #1
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fc3c 	bl	8010346 <USBH_SetFeature>
 800face:	4603      	mov	r3, r0
 800fad0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fad2:	7bbb      	ldrb	r3, [r7, #14]
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d103      	bne.n	800fae2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	220a      	movs	r2, #10
 800fade:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fae0:	e0bd      	b.n	800fc5e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800fae2:	7bbb      	ldrb	r3, [r7, #14]
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	f040 80b9 	bne.w	800fc5e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	220a      	movs	r2, #10
 800faf0:	701a      	strb	r2, [r3, #0]
      break;
 800faf2:	e0b4      	b.n	800fc5e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	220a      	movs	r2, #10
 800faf8:	701a      	strb	r2, [r3, #0]
      break;
 800fafa:	e0b0      	b.n	800fc5e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 80ad 	beq.w	800fc62 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
 800fb14:	e016      	b.n	800fb44 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fb16:	7bfa      	ldrb	r2, [r7, #15]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	32de      	adds	r2, #222	; 0xde
 800fb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb20:	791a      	ldrb	r2, [r3, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d108      	bne.n	800fb3e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fb2c:	7bfa      	ldrb	r2, [r7, #15]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	32de      	adds	r2, #222	; 0xde
 800fb32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800fb3c:	e005      	b.n	800fb4a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	3301      	adds	r3, #1
 800fb42:	73fb      	strb	r3, [r7, #15]
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0e5      	beq.n	800fb16 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d016      	beq.n	800fb82 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	4798      	blx	r3
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d109      	bne.n	800fb7a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2206      	movs	r2, #6
 800fb6a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fb72:	2103      	movs	r1, #3
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb78:	e073      	b.n	800fc62 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	220d      	movs	r2, #13
 800fb7e:	701a      	strb	r2, [r3, #0]
      break;
 800fb80:	e06f      	b.n	800fc62 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	220d      	movs	r2, #13
 800fb86:	701a      	strb	r2, [r3, #0]
      break;
 800fb88:	e06b      	b.n	800fc62 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d017      	beq.n	800fbc4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	4798      	blx	r3
 800fba0:	4603      	mov	r3, r0
 800fba2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d103      	bne.n	800fbb4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	220b      	movs	r2, #11
 800fbb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fbb2:	e058      	b.n	800fc66 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d154      	bne.n	800fc66 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	220d      	movs	r2, #13
 800fbc0:	701a      	strb	r2, [r3, #0]
      break;
 800fbc2:	e050      	b.n	800fc66 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	220d      	movs	r2, #13
 800fbc8:	701a      	strb	r2, [r3, #0]
      break;
 800fbca:	e04c      	b.n	800fc66 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d049      	beq.n	800fc6a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbdc:	695b      	ldr	r3, [r3, #20]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	4798      	blx	r3
      }
      break;
 800fbe2:	e042      	b.n	800fc6a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff fd47 	bl	800f680 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d009      	beq.n	800fc10 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d005      	beq.n	800fc26 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fc20:	2105      	movs	r1, #5
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d107      	bne.n	800fc42 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff fe1f 	bl	800f87e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fc40:	e014      	b.n	800fc6c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f002 fd42 	bl	80126cc <USBH_LL_Start>
      break;
 800fc48:	e010      	b.n	800fc6c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800fc4a:	bf00      	nop
 800fc4c:	e00e      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc4e:	bf00      	nop
 800fc50:	e00c      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc52:	bf00      	nop
 800fc54:	e00a      	b.n	800fc6c <USBH_Process+0x3cc>
    break;
 800fc56:	bf00      	nop
 800fc58:	e008      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc5a:	bf00      	nop
 800fc5c:	e006      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc5e:	bf00      	nop
 800fc60:	e004      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc62:	bf00      	nop
 800fc64:	e002      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc66:	bf00      	nop
 800fc68:	e000      	b.n	800fc6c <USBH_Process+0x3cc>
      break;
 800fc6a:	bf00      	nop
  }
  return USBH_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop

0800fc78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af04      	add	r7, sp, #16
 800fc7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fc80:	2301      	movs	r3, #1
 800fc82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fc84:	2301      	movs	r3, #1
 800fc86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	785b      	ldrb	r3, [r3, #1]
 800fc8c:	2b07      	cmp	r3, #7
 800fc8e:	f200 81c1 	bhi.w	8010014 <USBH_HandleEnum+0x39c>
 800fc92:	a201      	add	r2, pc, #4	; (adr r2, 800fc98 <USBH_HandleEnum+0x20>)
 800fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc98:	0800fcb9 	.word	0x0800fcb9
 800fc9c:	0800fd77 	.word	0x0800fd77
 800fca0:	0800fde1 	.word	0x0800fde1
 800fca4:	0800fe6f 	.word	0x0800fe6f
 800fca8:	0800fed9 	.word	0x0800fed9
 800fcac:	0800ff49 	.word	0x0800ff49
 800fcb0:	0800ff8f 	.word	0x0800ff8f
 800fcb4:	0800ffd5 	.word	0x0800ffd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fcb8:	2108      	movs	r1, #8
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fa50 	bl	8010160 <USBH_Get_DevDesc>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d130      	bne.n	800fd2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	7919      	ldrb	r1, [r3, #4]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fcee:	b292      	uxth	r2, r2
 800fcf0:	9202      	str	r2, [sp, #8]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	9201      	str	r2, [sp, #4]
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2280      	movs	r2, #128	; 0x80
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f001 f83f 	bl	8010d80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7959      	ldrb	r1, [r3, #5]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd16:	b292      	uxth	r2, r2
 800fd18:	9202      	str	r2, [sp, #8]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	9201      	str	r2, [sp, #4]
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	4603      	mov	r3, r0
 800fd22:	2200      	movs	r2, #0
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f001 f82b 	bl	8010d80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fd2a:	e175      	b.n	8010018 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd2c:	7bbb      	ldrb	r3, [r7, #14]
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	f040 8172 	bne.w	8010018 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	b2da      	uxtb	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d903      	bls.n	800fd56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	220d      	movs	r2, #13
 800fd52:	701a      	strb	r2, [r3, #0]
      break;
 800fd54:	e160      	b.n	8010018 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	795b      	ldrb	r3, [r3, #5]
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f001 f85f 	bl	8010e20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	791b      	ldrb	r3, [r3, #4]
 800fd66:	4619      	mov	r1, r3
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f001 f859 	bl	8010e20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]
      break;
 800fd74:	e150      	b.n	8010018 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fd76:	2112      	movs	r1, #18
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 f9f1 	bl	8010160 <USBH_Get_DevDesc>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd82:	7bbb      	ldrb	r3, [r7, #14]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d103      	bne.n	800fd90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd8e:	e145      	b.n	801001c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd90:	7bbb      	ldrb	r3, [r7, #14]
 800fd92:	2b03      	cmp	r3, #3
 800fd94:	f040 8142 	bne.w	801001c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd9e:	3301      	adds	r3, #1
 800fda0:	b2da      	uxtb	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	d903      	bls.n	800fdba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	220d      	movs	r2, #13
 800fdb6:	701a      	strb	r2, [r3, #0]
      break;
 800fdb8:	e130      	b.n	801001c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	795b      	ldrb	r3, [r3, #5]
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f001 f82d 	bl	8010e20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	791b      	ldrb	r3, [r3, #4]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f001 f827 	bl	8010e20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
      break;
 800fdde:	e11d      	b.n	801001c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fde0:	2101      	movs	r1, #1
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fa68 	bl	80102b8 <USBH_SetAddress>
 800fde8:	4603      	mov	r3, r0
 800fdea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d132      	bne.n	800fe58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800fdf2:	2002      	movs	r0, #2
 800fdf4:	f002 fdce 	bl	8012994 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2203      	movs	r2, #3
 800fe04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	7919      	ldrb	r1, [r3, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	9202      	str	r2, [sp, #8]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	9201      	str	r2, [sp, #4]
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	4603      	mov	r3, r0
 800fe26:	2280      	movs	r2, #128	; 0x80
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 ffa9 	bl	8010d80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	7959      	ldrb	r1, [r3, #5]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe42:	b292      	uxth	r2, r2
 800fe44:	9202      	str	r2, [sp, #8]
 800fe46:	2200      	movs	r2, #0
 800fe48:	9201      	str	r2, [sp, #4]
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2200      	movs	r2, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 ff95 	bl	8010d80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fe56:	e0e3      	b.n	8010020 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe58:	7bbb      	ldrb	r3, [r7, #14]
 800fe5a:	2b03      	cmp	r3, #3
 800fe5c:	f040 80e0 	bne.w	8010020 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	220d      	movs	r2, #13
 800fe64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	705a      	strb	r2, [r3, #1]
      break;
 800fe6c:	e0d8      	b.n	8010020 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fe6e:	2109      	movs	r1, #9
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f99d 	bl	80101b0 <USBH_Get_CfgDesc>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe7a:	7bbb      	ldrb	r3, [r7, #14]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d103      	bne.n	800fe88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2204      	movs	r2, #4
 800fe84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fe86:	e0cd      	b.n	8010024 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe88:	7bbb      	ldrb	r3, [r7, #14]
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	f040 80ca 	bne.w	8010024 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fe96:	3301      	adds	r3, #1
 800fe98:	b2da      	uxtb	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d903      	bls.n	800feb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	220d      	movs	r2, #13
 800feae:	701a      	strb	r2, [r3, #0]
      break;
 800feb0:	e0b8      	b.n	8010024 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	795b      	ldrb	r3, [r3, #5]
 800feb6:	4619      	mov	r1, r3
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 ffb1 	bl	8010e20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	791b      	ldrb	r3, [r3, #4]
 800fec2:	4619      	mov	r1, r3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 ffab 	bl	8010e20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	701a      	strb	r2, [r3, #0]
      break;
 800fed6:	e0a5      	b.n	8010024 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f965 	bl	80101b0 <USBH_Get_CfgDesc>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800feea:	7bbb      	ldrb	r3, [r7, #14]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d103      	bne.n	800fef8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2205      	movs	r2, #5
 800fef4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fef6:	e097      	b.n	8010028 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b03      	cmp	r3, #3
 800fefc:	f040 8094 	bne.w	8010028 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff06:	3301      	adds	r3, #1
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff16:	2b03      	cmp	r3, #3
 800ff18:	d903      	bls.n	800ff22 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	220d      	movs	r2, #13
 800ff1e:	701a      	strb	r2, [r3, #0]
      break;
 800ff20:	e082      	b.n	8010028 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	795b      	ldrb	r3, [r3, #5]
 800ff26:	4619      	mov	r1, r3
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 ff79 	bl	8010e20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	791b      	ldrb	r3, [r3, #4]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 ff73 	bl	8010e20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]
      break;
 800ff46:	e06f      	b.n	8010028 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d019      	beq.n	800ff86 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ff5e:	23ff      	movs	r3, #255	; 0xff
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f949 	bl	80101f8 <USBH_Get_StringDesc>
 800ff66:	4603      	mov	r3, r0
 800ff68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ff6a:	7bbb      	ldrb	r3, [r7, #14]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d103      	bne.n	800ff78 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2206      	movs	r2, #6
 800ff74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ff76:	e059      	b.n	801002c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff78:	7bbb      	ldrb	r3, [r7, #14]
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d156      	bne.n	801002c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2206      	movs	r2, #6
 800ff82:	705a      	strb	r2, [r3, #1]
      break;
 800ff84:	e052      	b.n	801002c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2206      	movs	r2, #6
 800ff8a:	705a      	strb	r2, [r3, #1]
      break;
 800ff8c:	e04e      	b.n	801002c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d019      	beq.n	800ffcc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ffa4:	23ff      	movs	r3, #255	; 0xff
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f926 	bl	80101f8 <USBH_Get_StringDesc>
 800ffac:	4603      	mov	r3, r0
 800ffae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d103      	bne.n	800ffbe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2207      	movs	r2, #7
 800ffba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ffbc:	e038      	b.n	8010030 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffbe:	7bbb      	ldrb	r3, [r7, #14]
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d135      	bne.n	8010030 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2207      	movs	r2, #7
 800ffc8:	705a      	strb	r2, [r3, #1]
      break;
 800ffca:	e031      	b.n	8010030 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2207      	movs	r2, #7
 800ffd0:	705a      	strb	r2, [r3, #1]
      break;
 800ffd2:	e02d      	b.n	8010030 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d017      	beq.n	801000e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ffea:	23ff      	movs	r3, #255	; 0xff
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 f903 	bl	80101f8 <USBH_Get_StringDesc>
 800fff2:	4603      	mov	r3, r0
 800fff4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fff6:	7bbb      	ldrb	r3, [r7, #14]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d102      	bne.n	8010002 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010000:	e018      	b.n	8010034 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010002:	7bbb      	ldrb	r3, [r7, #14]
 8010004:	2b03      	cmp	r3, #3
 8010006:	d115      	bne.n	8010034 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	73fb      	strb	r3, [r7, #15]
      break;
 801000c:	e012      	b.n	8010034 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801000e:	2300      	movs	r3, #0
 8010010:	73fb      	strb	r3, [r7, #15]
      break;
 8010012:	e00f      	b.n	8010034 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8010014:	bf00      	nop
 8010016:	e00e      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010018:	bf00      	nop
 801001a:	e00c      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 801001c:	bf00      	nop
 801001e:	e00a      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010020:	bf00      	nop
 8010022:	e008      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010024:	bf00      	nop
 8010026:	e006      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010028:	bf00      	nop
 801002a:	e004      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 801002c:	bf00      	nop
 801002e:	e002      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010030:	bf00      	nop
 8010032:	e000      	b.n	8010036 <USBH_HandleEnum+0x3be>
      break;
 8010034:	bf00      	nop
  }
  return Status;
 8010036:	7bfb      	ldrb	r3, [r7, #15]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	683a      	ldr	r2, [r7, #0]
 801004e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8010052:	bf00      	nop
 8010054:	370c      	adds	r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr

0801005e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b082      	sub	sp, #8
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f804 	bl	8010082 <USBH_HandleSof>
}
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b0b      	cmp	r3, #11
 8010092:	d10a      	bne.n	80100aa <USBH_HandleSof+0x28>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d005      	beq.n	80100aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	4798      	blx	r3
  }
}
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b083      	sub	sp, #12
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80100c2:	bf00      	nop
}
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80100de:	bf00      	nop
}
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2201      	movs	r2, #1
 80100f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f002 fae2 	bl	8012702 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	791b      	ldrb	r3, [r3, #4]
 8010142:	4619      	mov	r1, r3
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 fe6b 	bl	8010e20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	795b      	ldrb	r3, [r3, #5]
 801014e:	4619      	mov	r1, r3
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 fe65 	bl	8010e20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af02      	add	r7, sp, #8
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010172:	78fb      	ldrb	r3, [r7, #3]
 8010174:	b29b      	uxth	r3, r3
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	4613      	mov	r3, r2
 801017a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801017e:	2100      	movs	r1, #0
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f864 	bl	801024e <USBH_GetDescriptor>
 8010186:	4603      	mov	r3, r0
 8010188:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 801018a:	7bfb      	ldrb	r3, [r7, #15]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10a      	bne.n	80101a6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801019c:	78fa      	ldrb	r2, [r7, #3]
 801019e:	b292      	uxth	r2, r2
 80101a0:	4619      	mov	r1, r3
 80101a2:	f000 f919 	bl	80103d8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	331c      	adds	r3, #28
 80101c0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80101c2:	887b      	ldrh	r3, [r7, #2]
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101cc:	2100      	movs	r1, #0
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f83d 	bl	801024e <USBH_GetDescriptor>
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d107      	bne.n	80101ee <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80101de:	887b      	ldrh	r3, [r7, #2]
 80101e0:	461a      	mov	r2, r3
 80101e2:	68b9      	ldr	r1, [r7, #8]
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f987 	bl	80104f8 <USBH_ParseCfgDesc>
 80101ea:	4603      	mov	r3, r0
 80101ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af02      	add	r7, sp, #8
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	461a      	mov	r2, r3
 8010204:	460b      	mov	r3, r1
 8010206:	72fb      	strb	r3, [r7, #11]
 8010208:	4613      	mov	r3, r2
 801020a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 801020c:	7afb      	ldrb	r3, [r7, #11]
 801020e:	b29b      	uxth	r3, r3
 8010210:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010214:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801021c:	893b      	ldrh	r3, [r7, #8]
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	460b      	mov	r3, r1
 8010222:	2100      	movs	r1, #0
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f000 f812 	bl	801024e <USBH_GetDescriptor>
 801022a:	4603      	mov	r3, r0
 801022c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801022e:	7dfb      	ldrb	r3, [r7, #23]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d107      	bne.n	8010244 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801023a:	893a      	ldrh	r2, [r7, #8]
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	4618      	mov	r0, r3
 8010240:	f000 fafe 	bl	8010840 <USBH_ParseStringDesc>
  }

  return status;
 8010244:	7dfb      	ldrb	r3, [r7, #23]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b084      	sub	sp, #16
 8010252:	af00      	add	r7, sp, #0
 8010254:	60f8      	str	r0, [r7, #12]
 8010256:	607b      	str	r3, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	72fb      	strb	r3, [r7, #11]
 801025c:	4613      	mov	r3, r2
 801025e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	789b      	ldrb	r3, [r3, #2]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d11c      	bne.n	80102a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010268:	7afb      	ldrb	r3, [r7, #11]
 801026a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801026e:	b2da      	uxtb	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2206      	movs	r2, #6
 8010278:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	893a      	ldrh	r2, [r7, #8]
 801027e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010280:	893b      	ldrh	r3, [r7, #8]
 8010282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801028a:	d104      	bne.n	8010296 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f240 4209 	movw	r2, #1033	; 0x409
 8010292:	829a      	strh	r2, [r3, #20]
 8010294:	e002      	b.n	801029c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	8b3a      	ldrh	r2, [r7, #24]
 80102a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80102a2:	8b3b      	ldrh	r3, [r7, #24]
 80102a4:	461a      	mov	r2, r3
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f000 fb17 	bl	80108dc <USBH_CtlReq>
 80102ae:	4603      	mov	r3, r0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3710      	adds	r7, #16
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	789b      	ldrb	r3, [r3, #2]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d10f      	bne.n	80102ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2205      	movs	r2, #5
 80102d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80102d8:	78fb      	ldrb	r3, [r7, #3]
 80102da:	b29a      	uxth	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80102ec:	2200      	movs	r2, #0
 80102ee:	2100      	movs	r1, #0
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 faf3 	bl	80108dc <USBH_CtlReq>
 80102f6:	4603      	mov	r3, r0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	789b      	ldrb	r3, [r3, #2]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d10e      	bne.n	8010332 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2209      	movs	r2, #9
 801031e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	887a      	ldrh	r2, [r7, #2]
 8010324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010332:	2200      	movs	r2, #0
 8010334:	2100      	movs	r1, #0
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fad0 	bl	80108dc <USBH_CtlReq>
 801033c:	4603      	mov	r3, r0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	460b      	mov	r3, r1
 8010350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	789b      	ldrb	r3, [r3, #2]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d10f      	bne.n	801037a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2203      	movs	r2, #3
 8010364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010366:	78fb      	ldrb	r3, [r7, #3]
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801037a:	2200      	movs	r2, #0
 801037c:	2100      	movs	r1, #0
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 faac 	bl	80108dc <USBH_CtlReq>
 8010384:	4603      	mov	r3, r0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3708      	adds	r7, #8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	460b      	mov	r3, r1
 8010398:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	789b      	ldrb	r3, [r3, #2]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d10f      	bne.n	80103c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2202      	movs	r2, #2
 80103a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2201      	movs	r2, #1
 80103ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80103b4:	78fb      	ldrb	r3, [r7, #3]
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80103c2:	2200      	movs	r2, #0
 80103c4:	2100      	movs	r1, #0
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 fa88 	bl	80108dc <USBH_CtlReq>
 80103cc:	4603      	mov	r3, r0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
	...

080103d8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	4613      	mov	r3, r2
 80103e4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	781a      	ldrb	r2, [r3, #0]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	785a      	ldrb	r2, [r3, #1]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	3302      	adds	r3, #2
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	3303      	adds	r3, #3
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	b29b      	uxth	r3, r3
 8010406:	021b      	lsls	r3, r3, #8
 8010408:	b29b      	uxth	r3, r3
 801040a:	4313      	orrs	r3, r2
 801040c:	b29a      	uxth	r2, r3
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	791a      	ldrb	r2, [r3, #4]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	795a      	ldrb	r2, [r3, #5]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	799a      	ldrb	r2, [r3, #6]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	79da      	ldrb	r2, [r3, #7]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	79db      	ldrb	r3, [r3, #7]
 8010436:	2b20      	cmp	r3, #32
 8010438:	dc0e      	bgt.n	8010458 <USBH_ParseDevDesc+0x80>
 801043a:	2b08      	cmp	r3, #8
 801043c:	db13      	blt.n	8010466 <USBH_ParseDevDesc+0x8e>
 801043e:	3b08      	subs	r3, #8
 8010440:	2201      	movs	r2, #1
 8010442:	409a      	lsls	r2, r3
 8010444:	4b2b      	ldr	r3, [pc, #172]	; (80104f4 <USBH_ParseDevDesc+0x11c>)
 8010446:	4013      	ands	r3, r2
 8010448:	2b00      	cmp	r3, #0
 801044a:	bf14      	ite	ne
 801044c:	2301      	movne	r3, #1
 801044e:	2300      	moveq	r3, #0
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	d102      	bne.n	801045c <USBH_ParseDevDesc+0x84>
 8010456:	e006      	b.n	8010466 <USBH_ParseDevDesc+0x8e>
 8010458:	2b40      	cmp	r3, #64	; 0x40
 801045a:	d104      	bne.n	8010466 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	79da      	ldrb	r2, [r3, #7]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	71da      	strb	r2, [r3, #7]
      break;
 8010464:	e003      	b.n	801046e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2240      	movs	r2, #64	; 0x40
 801046a:	71da      	strb	r2, [r3, #7]
      break;
 801046c:	bf00      	nop
  }

  if (length > 8U)
 801046e:	88fb      	ldrh	r3, [r7, #6]
 8010470:	2b08      	cmp	r3, #8
 8010472:	d939      	bls.n	80104e8 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	3308      	adds	r3, #8
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	b29a      	uxth	r2, r3
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	3309      	adds	r3, #9
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	b29b      	uxth	r3, r3
 8010484:	021b      	lsls	r3, r3, #8
 8010486:	b29b      	uxth	r3, r3
 8010488:	4313      	orrs	r3, r2
 801048a:	b29a      	uxth	r2, r3
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	330a      	adds	r3, #10
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	b29a      	uxth	r2, r3
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	330b      	adds	r3, #11
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	021b      	lsls	r3, r3, #8
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4313      	orrs	r3, r2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	330c      	adds	r3, #12
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	330d      	adds	r3, #13
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	b29b      	uxth	r3, r3
 80104c0:	4313      	orrs	r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	7b9a      	ldrb	r2, [r3, #14]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	7bda      	ldrb	r2, [r3, #15]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	7c1a      	ldrb	r2, [r3, #16]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	7c5a      	ldrb	r2, [r3, #17]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	745a      	strb	r2, [r3, #17]
  }
}
 80104e8:	bf00      	nop
 80104ea:	3714      	adds	r7, #20
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr
 80104f4:	01000101 	.word	0x01000101

080104f8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08c      	sub	sp, #48	; 0x30
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4613      	mov	r3, r2
 8010504:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801050c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010518:	2300      	movs	r3, #0
 801051a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801051e:	2300      	movs	r3, #0
 8010520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	781a      	ldrb	r2, [r3, #0]
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	785a      	ldrb	r2, [r3, #1]
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	3302      	adds	r3, #2
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	b29a      	uxth	r2, r3
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	3303      	adds	r3, #3
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	b29b      	uxth	r3, r3
 8010548:	021b      	lsls	r3, r3, #8
 801054a:	b29b      	uxth	r3, r3
 801054c:	4313      	orrs	r3, r2
 801054e:	b29b      	uxth	r3, r3
 8010550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010554:	bf28      	it	cs
 8010556:	f44f 7380 	movcs.w	r3, #256	; 0x100
 801055a:	b29a      	uxth	r2, r3
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	791a      	ldrb	r2, [r3, #4]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	795a      	ldrb	r2, [r3, #5]
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	799a      	ldrb	r2, [r3, #6]
 8010574:	6a3b      	ldr	r3, [r7, #32]
 8010576:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	79da      	ldrb	r2, [r3, #7]
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	7a1a      	ldrb	r2, [r3, #8]
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8010588:	6a3b      	ldr	r3, [r7, #32]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b09      	cmp	r3, #9
 801058e:	d002      	beq.n	8010596 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010590:	6a3b      	ldr	r3, [r7, #32]
 8010592:	2209      	movs	r2, #9
 8010594:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010596:	88fb      	ldrh	r3, [r7, #6]
 8010598:	2b09      	cmp	r3, #9
 801059a:	f240 8099 	bls.w	80106d0 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 801059e:	2309      	movs	r3, #9
 80105a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80105a6:	e07d      	b.n	80106a4 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80105a8:	f107 0316 	add.w	r3, r7, #22
 80105ac:	4619      	mov	r1, r3
 80105ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105b0:	f000 f979 	bl	80108a6 <USBH_GetNextDesc>
 80105b4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	785b      	ldrb	r3, [r3, #1]
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	d172      	bne.n	80106a4 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80105be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b09      	cmp	r3, #9
 80105c4:	d002      	beq.n	80105cc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	2209      	movs	r2, #9
 80105ca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80105cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105d0:	221a      	movs	r2, #26
 80105d2:	fb02 f303 	mul.w	r3, r2, r3
 80105d6:	3308      	adds	r3, #8
 80105d8:	6a3a      	ldr	r2, [r7, #32]
 80105da:	4413      	add	r3, r2
 80105dc:	3302      	adds	r3, #2
 80105de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80105e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105e2:	69f8      	ldr	r0, [r7, #28]
 80105e4:	f000 f87a 	bl	80106dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80105e8:	2300      	movs	r3, #0
 80105ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80105ee:	2300      	movs	r3, #0
 80105f0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80105f2:	e03f      	b.n	8010674 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80105f4:	f107 0316 	add.w	r3, r7, #22
 80105f8:	4619      	mov	r1, r3
 80105fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105fc:	f000 f953 	bl	80108a6 <USBH_GetNextDesc>
 8010600:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	785b      	ldrb	r3, [r3, #1]
 8010606:	2b05      	cmp	r3, #5
 8010608:	d134      	bne.n	8010674 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	795b      	ldrb	r3, [r3, #5]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d10f      	bne.n	8010632 <USBH_ParseCfgDesc+0x13a>
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	799b      	ldrb	r3, [r3, #6]
 8010616:	2b02      	cmp	r3, #2
 8010618:	d10b      	bne.n	8010632 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	79db      	ldrb	r3, [r3, #7]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10b      	bne.n	801063a <USBH_ParseCfgDesc+0x142>
 8010622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	2b09      	cmp	r3, #9
 8010628:	d007      	beq.n	801063a <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062c:	2209      	movs	r2, #9
 801062e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010630:	e003      	b.n	801063a <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010634:	2207      	movs	r2, #7
 8010636:	701a      	strb	r2, [r3, #0]
 8010638:	e000      	b.n	801063c <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801063a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801063c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010640:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010644:	3201      	adds	r2, #1
 8010646:	00d2      	lsls	r2, r2, #3
 8010648:	211a      	movs	r1, #26
 801064a:	fb01 f303 	mul.w	r3, r1, r3
 801064e:	4413      	add	r3, r2
 8010650:	3308      	adds	r3, #8
 8010652:	6a3a      	ldr	r2, [r7, #32]
 8010654:	4413      	add	r3, r2
 8010656:	3304      	adds	r3, #4
 8010658:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801065a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801065c:	69b9      	ldr	r1, [r7, #24]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f000 f86c 	bl	801073c <USBH_ParseEPDesc>
 8010664:	4603      	mov	r3, r0
 8010666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801066a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801066e:	3301      	adds	r3, #1
 8010670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	791b      	ldrb	r3, [r3, #4]
 8010678:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801067c:	429a      	cmp	r2, r3
 801067e:	d204      	bcs.n	801068a <USBH_ParseCfgDesc+0x192>
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	885a      	ldrh	r2, [r3, #2]
 8010684:	8afb      	ldrh	r3, [r7, #22]
 8010686:	429a      	cmp	r2, r3
 8010688:	d8b4      	bhi.n	80105f4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	791b      	ldrb	r3, [r3, #4]
 801068e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010692:	429a      	cmp	r2, r3
 8010694:	d201      	bcs.n	801069a <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8010696:	2303      	movs	r3, #3
 8010698:	e01c      	b.n	80106d4 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801069a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801069e:	3301      	adds	r3, #1
 80106a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80106a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d805      	bhi.n	80106b8 <USBH_ParseCfgDesc+0x1c0>
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	885a      	ldrh	r2, [r3, #2]
 80106b0:	8afb      	ldrh	r3, [r7, #22]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	f63f af78 	bhi.w	80105a8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80106b8:	6a3b      	ldr	r3, [r7, #32]
 80106ba:	791b      	ldrb	r3, [r3, #4]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	bf28      	it	cs
 80106c0:	2302      	movcs	r3, #2
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d201      	bcs.n	80106d0 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80106cc:	2303      	movs	r3, #3
 80106ce:	e001      	b.n	80106d4 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80106d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3730      	adds	r7, #48	; 0x30
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	781a      	ldrb	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	785a      	ldrb	r2, [r3, #1]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	789a      	ldrb	r2, [r3, #2]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	78da      	ldrb	r2, [r3, #3]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	791a      	ldrb	r2, [r3, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	795a      	ldrb	r2, [r3, #5]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	799a      	ldrb	r2, [r3, #6]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	79da      	ldrb	r2, [r3, #7]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	7a1a      	ldrb	r2, [r3, #8]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	721a      	strb	r2, [r3, #8]
}
 801072e:	bf00      	nop
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
	...

0801073c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 801073c:	b480      	push	{r7}
 801073e:	b087      	sub	sp, #28
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	781a      	ldrb	r2, [r3, #0]
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	785a      	ldrb	r2, [r3, #1]
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	789a      	ldrb	r2, [r3, #2]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	78da      	ldrb	r2, [r3, #3]
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	3304      	adds	r3, #4
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3305      	adds	r3, #5
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	b29b      	uxth	r3, r3
 801077c:	021b      	lsls	r3, r3, #8
 801077e:	b29b      	uxth	r3, r3
 8010780:	4313      	orrs	r3, r2
 8010782:	b29a      	uxth	r2, r3
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	799a      	ldrb	r2, [r3, #6]
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	889b      	ldrh	r3, [r3, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d102      	bne.n	801079e <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8010798:	2303      	movs	r3, #3
 801079a:	75fb      	strb	r3, [r7, #23]
 801079c:	e00d      	b.n	80107ba <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	889a      	ldrh	r2, [r3, #4]
 80107a2:	4b26      	ldr	r3, [pc, #152]	; (801083c <USBH_ParseEPDesc+0x100>)
 80107a4:	4013      	ands	r3, r2
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	889b      	ldrh	r3, [r3, #4]
 80107b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d116      	bne.n	80107f2 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	78db      	ldrb	r3, [r3, #3]
 80107c8:	f003 0303 	and.w	r3, r3, #3
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d005      	beq.n	80107dc <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	78db      	ldrb	r3, [r3, #3]
 80107d4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d127      	bne.n	801082c <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	799b      	ldrb	r3, [r3, #6]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d003      	beq.n	80107ec <USBH_ParseEPDesc+0xb0>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	799b      	ldrb	r3, [r3, #6]
 80107e8:	2b10      	cmp	r3, #16
 80107ea:	d91f      	bls.n	801082c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80107ec:	2303      	movs	r3, #3
 80107ee:	75fb      	strb	r3, [r7, #23]
 80107f0:	e01c      	b.n	801082c <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	78db      	ldrb	r3, [r3, #3]
 80107f6:	f003 0303 	and.w	r3, r3, #3
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d10a      	bne.n	8010814 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	799b      	ldrb	r3, [r3, #6]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d003      	beq.n	801080e <USBH_ParseEPDesc+0xd2>
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	799b      	ldrb	r3, [r3, #6]
 801080a:	2b10      	cmp	r3, #16
 801080c:	d90e      	bls.n	801082c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801080e:	2303      	movs	r3, #3
 8010810:	75fb      	strb	r3, [r7, #23]
 8010812:	e00b      	b.n	801082c <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	78db      	ldrb	r3, [r3, #3]
 8010818:	f003 0303 	and.w	r3, r3, #3
 801081c:	2b03      	cmp	r3, #3
 801081e:	d105      	bne.n	801082c <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	799b      	ldrb	r3, [r3, #6]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d101      	bne.n	801082c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010828:	2303      	movs	r3, #3
 801082a:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801082c:	7dfb      	ldrb	r3, [r7, #23]
}
 801082e:	4618      	mov	r0, r3
 8010830:	371c      	adds	r7, #28
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	fffff800 	.word	0xfffff800

08010840 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010840:	b480      	push	{r7}
 8010842:	b087      	sub	sp, #28
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	4613      	mov	r3, r2
 801084c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3301      	adds	r3, #1
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	2b03      	cmp	r3, #3
 8010856:	d120      	bne.n	801089a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	1e9a      	subs	r2, r3, #2
 801085e:	88fb      	ldrh	r3, [r7, #6]
 8010860:	4293      	cmp	r3, r2
 8010862:	bf28      	it	cs
 8010864:	4613      	movcs	r3, r2
 8010866:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	3302      	adds	r3, #2
 801086c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801086e:	2300      	movs	r3, #0
 8010870:	82fb      	strh	r3, [r7, #22]
 8010872:	e00b      	b.n	801088c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010874:	8afb      	ldrh	r3, [r7, #22]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	4413      	add	r3, r2
 801087a:	781a      	ldrb	r2, [r3, #0]
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	3301      	adds	r3, #1
 8010884:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010886:	8afb      	ldrh	r3, [r7, #22]
 8010888:	3302      	adds	r3, #2
 801088a:	82fb      	strh	r3, [r7, #22]
 801088c:	8afa      	ldrh	r2, [r7, #22]
 801088e:	8abb      	ldrh	r3, [r7, #20]
 8010890:	429a      	cmp	r2, r3
 8010892:	d3ef      	bcc.n	8010874 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2200      	movs	r2, #0
 8010898:	701a      	strb	r2, [r3, #0]
  }
}
 801089a:	bf00      	nop
 801089c:	371c      	adds	r7, #28
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr

080108a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80108a6:	b480      	push	{r7}
 80108a8:	b085      	sub	sp, #20
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	881a      	ldrh	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	4413      	add	r3, r2
 80108bc:	b29a      	uxth	r2, r3
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4413      	add	r3, r2
 80108cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80108ce:	68fb      	ldr	r3, [r7, #12]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	4613      	mov	r3, r2
 80108e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80108ea:	2301      	movs	r3, #1
 80108ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	789b      	ldrb	r3, [r3, #2]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d002      	beq.n	80108fc <USBH_CtlReq+0x20>
 80108f6:	2b02      	cmp	r3, #2
 80108f8:	d00f      	beq.n	801091a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80108fa:	e027      	b.n	801094c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	88fa      	ldrh	r2, [r7, #6]
 8010906:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2201      	movs	r2, #1
 801090c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2202      	movs	r2, #2
 8010912:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010914:	2301      	movs	r3, #1
 8010916:	75fb      	strb	r3, [r7, #23]
      break;
 8010918:	e018      	b.n	801094c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f000 f81c 	bl	8010958 <USBH_HandleControl>
 8010920:	4603      	mov	r3, r0
 8010922:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010924:	7dfb      	ldrb	r3, [r7, #23]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d002      	beq.n	8010930 <USBH_CtlReq+0x54>
 801092a:	7dfb      	ldrb	r3, [r7, #23]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d106      	bne.n	801093e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2201      	movs	r2, #1
 8010934:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2200      	movs	r2, #0
 801093a:	761a      	strb	r2, [r3, #24]
      break;
 801093c:	e005      	b.n	801094a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801093e:	7dfb      	ldrb	r3, [r7, #23]
 8010940:	2b02      	cmp	r3, #2
 8010942:	d102      	bne.n	801094a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2201      	movs	r2, #1
 8010948:	709a      	strb	r2, [r3, #2]
      break;
 801094a:	bf00      	nop
  }
  return status;
 801094c:	7dfb      	ldrb	r3, [r7, #23]
}
 801094e:	4618      	mov	r0, r3
 8010950:	3718      	adds	r7, #24
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
	...

08010958 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b086      	sub	sp, #24
 801095c:	af02      	add	r7, sp, #8
 801095e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010960:	2301      	movs	r3, #1
 8010962:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010964:	2300      	movs	r3, #0
 8010966:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	7e1b      	ldrb	r3, [r3, #24]
 801096c:	3b01      	subs	r3, #1
 801096e:	2b0a      	cmp	r3, #10
 8010970:	f200 8156 	bhi.w	8010c20 <USBH_HandleControl+0x2c8>
 8010974:	a201      	add	r2, pc, #4	; (adr r2, 801097c <USBH_HandleControl+0x24>)
 8010976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097a:	bf00      	nop
 801097c:	080109a9 	.word	0x080109a9
 8010980:	080109c3 	.word	0x080109c3
 8010984:	08010a2d 	.word	0x08010a2d
 8010988:	08010a53 	.word	0x08010a53
 801098c:	08010a8b 	.word	0x08010a8b
 8010990:	08010ab5 	.word	0x08010ab5
 8010994:	08010b07 	.word	0x08010b07
 8010998:	08010b29 	.word	0x08010b29
 801099c:	08010b65 	.word	0x08010b65
 80109a0:	08010b8b 	.word	0x08010b8b
 80109a4:	08010bc9 	.word	0x08010bc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f103 0110 	add.w	r1, r3, #16
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	795b      	ldrb	r3, [r3, #5]
 80109b2:	461a      	mov	r2, r3
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 f943 	bl	8010c40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2202      	movs	r2, #2
 80109be:	761a      	strb	r2, [r3, #24]
      break;
 80109c0:	e139      	b.n	8010c36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	795b      	ldrb	r3, [r3, #5]
 80109c6:	4619      	mov	r1, r3
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 ff89 	bl	80128e0 <USBH_LL_GetURBState>
 80109ce:	4603      	mov	r3, r0
 80109d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80109d2:	7bbb      	ldrb	r3, [r7, #14]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d11e      	bne.n	8010a16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	7c1b      	ldrb	r3, [r3, #16]
 80109dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80109e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8adb      	ldrh	r3, [r3, #22]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80109ea:	7b7b      	ldrb	r3, [r7, #13]
 80109ec:	2b80      	cmp	r3, #128	; 0x80
 80109ee:	d103      	bne.n	80109f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2203      	movs	r2, #3
 80109f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80109f6:	e115      	b.n	8010c24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2205      	movs	r2, #5
 80109fc:	761a      	strb	r2, [r3, #24]
      break;
 80109fe:	e111      	b.n	8010c24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010a00:	7b7b      	ldrb	r3, [r7, #13]
 8010a02:	2b80      	cmp	r3, #128	; 0x80
 8010a04:	d103      	bne.n	8010a0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2209      	movs	r2, #9
 8010a0a:	761a      	strb	r2, [r3, #24]
      break;
 8010a0c:	e10a      	b.n	8010c24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2207      	movs	r2, #7
 8010a12:	761a      	strb	r2, [r3, #24]
      break;
 8010a14:	e106      	b.n	8010c24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010a16:	7bbb      	ldrb	r3, [r7, #14]
 8010a18:	2b04      	cmp	r3, #4
 8010a1a:	d003      	beq.n	8010a24 <USBH_HandleControl+0xcc>
 8010a1c:	7bbb      	ldrb	r3, [r7, #14]
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	f040 8100 	bne.w	8010c24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	220b      	movs	r2, #11
 8010a28:	761a      	strb	r2, [r3, #24]
      break;
 8010a2a:	e0fb      	b.n	8010c24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6899      	ldr	r1, [r3, #8]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	899a      	ldrh	r2, [r3, #12]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	791b      	ldrb	r3, [r3, #4]
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f93a 	bl	8010cbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2204      	movs	r2, #4
 8010a4e:	761a      	strb	r2, [r3, #24]
      break;
 8010a50:	e0f1      	b.n	8010c36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	791b      	ldrb	r3, [r3, #4]
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f001 ff41 	bl	80128e0 <USBH_LL_GetURBState>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010a62:	7bbb      	ldrb	r3, [r7, #14]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d102      	bne.n	8010a6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2209      	movs	r2, #9
 8010a6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010a6e:	7bbb      	ldrb	r3, [r7, #14]
 8010a70:	2b05      	cmp	r3, #5
 8010a72:	d102      	bne.n	8010a7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010a74:	2303      	movs	r3, #3
 8010a76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010a78:	e0d6      	b.n	8010c28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
 8010a7c:	2b04      	cmp	r3, #4
 8010a7e:	f040 80d3 	bne.w	8010c28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	220b      	movs	r2, #11
 8010a86:	761a      	strb	r2, [r3, #24]
      break;
 8010a88:	e0ce      	b.n	8010c28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6899      	ldr	r1, [r3, #8]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	899a      	ldrh	r2, [r3, #12]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	795b      	ldrb	r3, [r3, #5]
 8010a96:	2001      	movs	r0, #1
 8010a98:	9000      	str	r0, [sp, #0]
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f8ea 	bl	8010c74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2206      	movs	r2, #6
 8010ab0:	761a      	strb	r2, [r3, #24]
      break;
 8010ab2:	e0c0      	b.n	8010c36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	795b      	ldrb	r3, [r3, #5]
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f001 ff10 	bl	80128e0 <USBH_LL_GetURBState>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010ac4:	7bbb      	ldrb	r3, [r7, #14]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d103      	bne.n	8010ad2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2207      	movs	r2, #7
 8010ace:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ad0:	e0ac      	b.n	8010c2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010ad2:	7bbb      	ldrb	r3, [r7, #14]
 8010ad4:	2b05      	cmp	r3, #5
 8010ad6:	d105      	bne.n	8010ae4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	220c      	movs	r2, #12
 8010adc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8010ae2:	e0a3      	b.n	8010c2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010ae4:	7bbb      	ldrb	r3, [r7, #14]
 8010ae6:	2b02      	cmp	r3, #2
 8010ae8:	d103      	bne.n	8010af2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2205      	movs	r2, #5
 8010aee:	761a      	strb	r2, [r3, #24]
      break;
 8010af0:	e09c      	b.n	8010c2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010af2:	7bbb      	ldrb	r3, [r7, #14]
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	f040 8099 	bne.w	8010c2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	220b      	movs	r2, #11
 8010afe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010b00:	2302      	movs	r3, #2
 8010b02:	73fb      	strb	r3, [r7, #15]
      break;
 8010b04:	e092      	b.n	8010c2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	791b      	ldrb	r3, [r3, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	2100      	movs	r1, #0
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f8d5 	bl	8010cbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2208      	movs	r2, #8
 8010b24:	761a      	strb	r2, [r3, #24]

      break;
 8010b26:	e086      	b.n	8010c36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	791b      	ldrb	r3, [r3, #4]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f001 fed6 	bl	80128e0 <USBH_LL_GetURBState>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010b38:	7bbb      	ldrb	r3, [r7, #14]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d105      	bne.n	8010b4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	220d      	movs	r2, #13
 8010b42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010b48:	e072      	b.n	8010c30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	d103      	bne.n	8010b58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	220b      	movs	r2, #11
 8010b54:	761a      	strb	r2, [r3, #24]
      break;
 8010b56:	e06b      	b.n	8010c30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010b58:	7bbb      	ldrb	r3, [r7, #14]
 8010b5a:	2b05      	cmp	r3, #5
 8010b5c:	d168      	bne.n	8010c30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	73fb      	strb	r3, [r7, #15]
      break;
 8010b62:	e065      	b.n	8010c30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	795b      	ldrb	r3, [r3, #5]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	9200      	str	r2, [sp, #0]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2100      	movs	r1, #0
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 f87f 	bl	8010c74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	220a      	movs	r2, #10
 8010b86:	761a      	strb	r2, [r3, #24]
      break;
 8010b88:	e055      	b.n	8010c36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	795b      	ldrb	r3, [r3, #5]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fea5 	bl	80128e0 <USBH_LL_GetURBState>
 8010b96:	4603      	mov	r3, r0
 8010b98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010b9a:	7bbb      	ldrb	r3, [r7, #14]
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d105      	bne.n	8010bac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	220d      	movs	r2, #13
 8010ba8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010baa:	e043      	b.n	8010c34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	d103      	bne.n	8010bba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2209      	movs	r2, #9
 8010bb6:	761a      	strb	r2, [r3, #24]
      break;
 8010bb8:	e03c      	b.n	8010c34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8010bba:	7bbb      	ldrb	r3, [r7, #14]
 8010bbc:	2b04      	cmp	r3, #4
 8010bbe:	d139      	bne.n	8010c34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	220b      	movs	r2, #11
 8010bc4:	761a      	strb	r2, [r3, #24]
      break;
 8010bc6:	e035      	b.n	8010c34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	7e5b      	ldrb	r3, [r3, #25]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	765a      	strb	r2, [r3, #25]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	7e5b      	ldrb	r3, [r3, #25]
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d806      	bhi.n	8010bea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2201      	movs	r2, #1
 8010be0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2201      	movs	r2, #1
 8010be6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010be8:	e025      	b.n	8010c36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010bf0:	2106      	movs	r1, #6
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	795b      	ldrb	r3, [r3, #5]
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 f90c 	bl	8010e20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	791b      	ldrb	r3, [r3, #4]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f906 	bl	8010e20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2200      	movs	r2, #0
 8010c18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010c1a:	2302      	movs	r3, #2
 8010c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8010c1e:	e00a      	b.n	8010c36 <USBH_HandleControl+0x2de>

    default:
      break;
 8010c20:	bf00      	nop
 8010c22:	e008      	b.n	8010c36 <USBH_HandleControl+0x2de>
      break;
 8010c24:	bf00      	nop
 8010c26:	e006      	b.n	8010c36 <USBH_HandleControl+0x2de>
      break;
 8010c28:	bf00      	nop
 8010c2a:	e004      	b.n	8010c36 <USBH_HandleControl+0x2de>
      break;
 8010c2c:	bf00      	nop
 8010c2e:	e002      	b.n	8010c36 <USBH_HandleControl+0x2de>
      break;
 8010c30:	bf00      	nop
 8010c32:	e000      	b.n	8010c36 <USBH_HandleControl+0x2de>
      break;
 8010c34:	bf00      	nop
  }

  return status;
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af04      	add	r7, sp, #16
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010c4e:	79f9      	ldrb	r1, [r7, #7]
 8010c50:	2300      	movs	r3, #0
 8010c52:	9303      	str	r3, [sp, #12]
 8010c54:	2308      	movs	r3, #8
 8010c56:	9302      	str	r3, [sp, #8]
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	9301      	str	r3, [sp, #4]
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	2300      	movs	r3, #0
 8010c62:	2200      	movs	r2, #0
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f001 fe0a 	bl	801287e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b088      	sub	sp, #32
 8010c78:	af04      	add	r7, sp, #16
 8010c7a:	60f8      	str	r0, [r7, #12]
 8010c7c:	60b9      	str	r1, [r7, #8]
 8010c7e:	4611      	mov	r1, r2
 8010c80:	461a      	mov	r2, r3
 8010c82:	460b      	mov	r3, r1
 8010c84:	80fb      	strh	r3, [r7, #6]
 8010c86:	4613      	mov	r3, r2
 8010c88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d001      	beq.n	8010c98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010c94:	2300      	movs	r3, #0
 8010c96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010c98:	7979      	ldrb	r1, [r7, #5]
 8010c9a:	7e3b      	ldrb	r3, [r7, #24]
 8010c9c:	9303      	str	r3, [sp, #12]
 8010c9e:	88fb      	ldrh	r3, [r7, #6]
 8010ca0:	9302      	str	r3, [sp, #8]
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	2300      	movs	r3, #0
 8010cac:	2200      	movs	r2, #0
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f001 fde5 	bl	801287e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b088      	sub	sp, #32
 8010cc2:	af04      	add	r7, sp, #16
 8010cc4:	60f8      	str	r0, [r7, #12]
 8010cc6:	60b9      	str	r1, [r7, #8]
 8010cc8:	4611      	mov	r1, r2
 8010cca:	461a      	mov	r2, r3
 8010ccc:	460b      	mov	r3, r1
 8010cce:	80fb      	strh	r3, [r7, #6]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010cd4:	7979      	ldrb	r1, [r7, #5]
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	9303      	str	r3, [sp, #12]
 8010cda:	88fb      	ldrh	r3, [r7, #6]
 8010cdc:	9302      	str	r3, [sp, #8]
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	2201      	movs	r2, #1
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f001 fdc7 	bl	801287e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010cf0:	2300      	movs	r3, #0

}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b088      	sub	sp, #32
 8010cfe:	af04      	add	r7, sp, #16
 8010d00:	60f8      	str	r0, [r7, #12]
 8010d02:	60b9      	str	r1, [r7, #8]
 8010d04:	4611      	mov	r1, r2
 8010d06:	461a      	mov	r2, r3
 8010d08:	460b      	mov	r3, r1
 8010d0a:	80fb      	strh	r3, [r7, #6]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010d1e:	7979      	ldrb	r1, [r7, #5]
 8010d20:	7e3b      	ldrb	r3, [r7, #24]
 8010d22:	9303      	str	r3, [sp, #12]
 8010d24:	88fb      	ldrh	r3, [r7, #6]
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	2302      	movs	r3, #2
 8010d32:	2200      	movs	r2, #0
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f001 fda2 	bl	801287e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af04      	add	r7, sp, #16
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	4611      	mov	r1, r2
 8010d50:	461a      	mov	r2, r3
 8010d52:	460b      	mov	r3, r1
 8010d54:	80fb      	strh	r3, [r7, #6]
 8010d56:	4613      	mov	r3, r2
 8010d58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010d5a:	7979      	ldrb	r1, [r7, #5]
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	9303      	str	r3, [sp, #12]
 8010d60:	88fb      	ldrh	r3, [r7, #6]
 8010d62:	9302      	str	r3, [sp, #8]
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	9301      	str	r3, [sp, #4]
 8010d68:	2301      	movs	r3, #1
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	2201      	movs	r2, #1
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f001 fd84 	bl	801287e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af04      	add	r7, sp, #16
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	4608      	mov	r0, r1
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	4603      	mov	r3, r0
 8010d90:	70fb      	strb	r3, [r7, #3]
 8010d92:	460b      	mov	r3, r1
 8010d94:	70bb      	strb	r3, [r7, #2]
 8010d96:	4613      	mov	r3, r2
 8010d98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010d9a:	7878      	ldrb	r0, [r7, #1]
 8010d9c:	78ba      	ldrb	r2, [r7, #2]
 8010d9e:	78f9      	ldrb	r1, [r7, #3]
 8010da0:	8b3b      	ldrh	r3, [r7, #24]
 8010da2:	9302      	str	r3, [sp, #8]
 8010da4:	7d3b      	ldrb	r3, [r7, #20]
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	7c3b      	ldrb	r3, [r7, #16]
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	4603      	mov	r3, r0
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f001 fd17 	bl	80127e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010dca:	78fb      	ldrb	r3, [r7, #3]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f001 fd36 	bl	8012840 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010dd4:	2300      	movs	r3, #0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b084      	sub	sp, #16
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
 8010de6:	460b      	mov	r3, r1
 8010de8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 f836 	bl	8010e5c <USBH_GetFreePipe>
 8010df0:	4603      	mov	r3, r0
 8010df2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010df4:	89fb      	ldrh	r3, [r7, #14]
 8010df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d00a      	beq.n	8010e14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010dfe:	78fa      	ldrb	r2, [r7, #3]
 8010e00:	89fb      	ldrh	r3, [r7, #14]
 8010e02:	f003 030f 	and.w	r3, r3, #15
 8010e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010e0a:	6879      	ldr	r1, [r7, #4]
 8010e0c:	33e0      	adds	r3, #224	; 0xe0
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	440b      	add	r3, r1
 8010e12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010e14:	89fb      	ldrh	r3, [r7, #14]
 8010e16:	b2db      	uxtb	r3, r3
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010e2c:	78fb      	ldrb	r3, [r7, #3]
 8010e2e:	2b0f      	cmp	r3, #15
 8010e30:	d80d      	bhi.n	8010e4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010e32:	78fb      	ldrb	r3, [r7, #3]
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	33e0      	adds	r3, #224	; 0xe0
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4413      	add	r3, r2
 8010e3c:	685a      	ldr	r2, [r3, #4]
 8010e3e:	78fb      	ldrb	r3, [r7, #3]
 8010e40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010e44:	6879      	ldr	r1, [r7, #4]
 8010e46:	33e0      	adds	r3, #224	; 0xe0
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	440b      	add	r3, r1
 8010e4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010e4e:	2300      	movs	r3, #0
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010e64:	2300      	movs	r3, #0
 8010e66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	73fb      	strb	r3, [r7, #15]
 8010e6c:	e00f      	b.n	8010e8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	33e0      	adds	r3, #224	; 0xe0
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	4413      	add	r3, r2
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	e007      	b.n	8010e98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010e88:	7bfb      	ldrb	r3, [r7, #15]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	73fb      	strb	r3, [r7, #15]
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
 8010e90:	2b0f      	cmp	r3, #15
 8010e92:	d9ec      	bls.n	8010e6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	4a08      	ldr	r2, [pc, #32]	; (8010ed4 <disk_status+0x30>)
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	4413      	add	r3, r2
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	79fa      	ldrb	r2, [r7, #7]
 8010ebc:	4905      	ldr	r1, [pc, #20]	; (8010ed4 <disk_status+0x30>)
 8010ebe:	440a      	add	r2, r1
 8010ec0:	7a12      	ldrb	r2, [r2, #8]
 8010ec2:	4610      	mov	r0, r2
 8010ec4:	4798      	blx	r3
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	20002924 	.word	0x20002924

08010ed8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	4a0d      	ldr	r2, [pc, #52]	; (8010f20 <disk_initialize+0x48>)
 8010eea:	5cd3      	ldrb	r3, [r2, r3]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d111      	bne.n	8010f14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010ef0:	79fb      	ldrb	r3, [r7, #7]
 8010ef2:	4a0b      	ldr	r2, [pc, #44]	; (8010f20 <disk_initialize+0x48>)
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010ef8:	79fb      	ldrb	r3, [r7, #7]
 8010efa:	4a09      	ldr	r2, [pc, #36]	; (8010f20 <disk_initialize+0x48>)
 8010efc:	009b      	lsls	r3, r3, #2
 8010efe:	4413      	add	r3, r2
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	79fa      	ldrb	r2, [r7, #7]
 8010f06:	4906      	ldr	r1, [pc, #24]	; (8010f20 <disk_initialize+0x48>)
 8010f08:	440a      	add	r2, r1
 8010f0a:	7a12      	ldrb	r2, [r2, #8]
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	4798      	blx	r3
 8010f10:	4603      	mov	r3, r0
 8010f12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	20002924 	.word	0x20002924

08010f24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60b9      	str	r1, [r7, #8]
 8010f2c:	607a      	str	r2, [r7, #4]
 8010f2e:	603b      	str	r3, [r7, #0]
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	4a0a      	ldr	r2, [pc, #40]	; (8010f60 <disk_read+0x3c>)
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	4413      	add	r3, r2
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	689c      	ldr	r4, [r3, #8]
 8010f40:	7bfb      	ldrb	r3, [r7, #15]
 8010f42:	4a07      	ldr	r2, [pc, #28]	; (8010f60 <disk_read+0x3c>)
 8010f44:	4413      	add	r3, r2
 8010f46:	7a18      	ldrb	r0, [r3, #8]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	68b9      	ldr	r1, [r7, #8]
 8010f4e:	47a0      	blx	r4
 8010f50:	4603      	mov	r3, r0
 8010f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	371c      	adds	r7, #28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd90      	pop	{r4, r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	20002924 	.word	0x20002924

08010f64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010f64:	b590      	push	{r4, r7, lr}
 8010f66:	b087      	sub	sp, #28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
 8010f6e:	603b      	str	r3, [r7, #0]
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
 8010f76:	4a0a      	ldr	r2, [pc, #40]	; (8010fa0 <disk_write+0x3c>)
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	68dc      	ldr	r4, [r3, #12]
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4a07      	ldr	r2, [pc, #28]	; (8010fa0 <disk_write+0x3c>)
 8010f84:	4413      	add	r3, r2
 8010f86:	7a18      	ldrb	r0, [r3, #8]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	47a0      	blx	r4
 8010f90:	4603      	mov	r3, r0
 8010f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	371c      	adds	r7, #28
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd90      	pop	{r4, r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	20002924 	.word	0x20002924

08010fa4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	603a      	str	r2, [r7, #0]
 8010fae:	71fb      	strb	r3, [r7, #7]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010fb4:	79fb      	ldrb	r3, [r7, #7]
 8010fb6:	4a09      	ldr	r2, [pc, #36]	; (8010fdc <disk_ioctl+0x38>)
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	4413      	add	r3, r2
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	691b      	ldr	r3, [r3, #16]
 8010fc0:	79fa      	ldrb	r2, [r7, #7]
 8010fc2:	4906      	ldr	r1, [pc, #24]	; (8010fdc <disk_ioctl+0x38>)
 8010fc4:	440a      	add	r2, r1
 8010fc6:	7a10      	ldrb	r0, [r2, #8]
 8010fc8:	79b9      	ldrb	r1, [r7, #6]
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	4798      	blx	r3
 8010fce:	4603      	mov	r3, r0
 8010fd0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	20002924 	.word	0x20002924

08010fe0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3301      	adds	r3, #1
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010ff0:	89fb      	ldrh	r3, [r7, #14]
 8010ff2:	021b      	lsls	r3, r3, #8
 8010ff4:	b21a      	sxth	r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	b21b      	sxth	r3, r3
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	b21b      	sxth	r3, r3
 8011000:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011002:	89fb      	ldrh	r3, [r7, #14]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011010:	b480      	push	{r7}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	3303      	adds	r3, #3
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	3202      	adds	r2, #2
 8011028:	7812      	ldrb	r2, [r2, #0]
 801102a:	4313      	orrs	r3, r2
 801102c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	021b      	lsls	r3, r3, #8
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	3201      	adds	r2, #1
 8011036:	7812      	ldrb	r2, [r2, #0]
 8011038:	4313      	orrs	r3, r2
 801103a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	021b      	lsls	r3, r3, #8
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	7812      	ldrb	r2, [r2, #0]
 8011044:	4313      	orrs	r3, r2
 8011046:	60fb      	str	r3, [r7, #12]
	return rv;
 8011048:	68fb      	ldr	r3, [r7, #12]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3714      	adds	r7, #20
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr
	...

08011058 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011060:	2300      	movs	r3, #0
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	e010      	b.n	8011088 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011066:	4a0d      	ldr	r2, [pc, #52]	; (801109c <clear_lock+0x44>)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	4413      	add	r3, r2
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	429a      	cmp	r2, r3
 8011074:	d105      	bne.n	8011082 <clear_lock+0x2a>
 8011076:	4a09      	ldr	r2, [pc, #36]	; (801109c <clear_lock+0x44>)
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	011b      	lsls	r3, r3, #4
 801107c:	4413      	add	r3, r2
 801107e:	2200      	movs	r2, #0
 8011080:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3301      	adds	r3, #1
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d9eb      	bls.n	8011066 <clear_lock+0xe>
	}
}
 801108e:	bf00      	nop
 8011090:	bf00      	nop
 8011092:	3714      	adds	r7, #20
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	20002704 	.word	0x20002704

080110a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	78db      	ldrb	r3, [r3, #3]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d034      	beq.n	801111e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	7858      	ldrb	r0, [r3, #1]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110c4:	2301      	movs	r3, #1
 80110c6:	697a      	ldr	r2, [r7, #20]
 80110c8:	f7ff ff4c 	bl	8010f64 <disk_write>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d002      	beq.n	80110d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80110d2:	2301      	movs	r3, #1
 80110d4:	73fb      	strb	r3, [r7, #15]
 80110d6:	e022      	b.n	801111e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	1ad2      	subs	r2, r2, r3
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6a1b      	ldr	r3, [r3, #32]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d217      	bcs.n	801111e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	789b      	ldrb	r3, [r3, #2]
 80110f2:	613b      	str	r3, [r7, #16]
 80110f4:	e010      	b.n	8011118 <sync_window+0x78>
					wsect += fs->fsize;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6a1b      	ldr	r3, [r3, #32]
 80110fa:	697a      	ldr	r2, [r7, #20]
 80110fc:	4413      	add	r3, r2
 80110fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	7858      	ldrb	r0, [r3, #1]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801110a:	2301      	movs	r3, #1
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	f7ff ff29 	bl	8010f64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	3b01      	subs	r3, #1
 8011116:	613b      	str	r3, [r7, #16]
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d8eb      	bhi.n	80110f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3718      	adds	r7, #24
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	429a      	cmp	r2, r3
 801113e:	d01b      	beq.n	8011178 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ffad 	bl	80110a0 <sync_window>
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d113      	bne.n	8011178 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	7858      	ldrb	r0, [r3, #1]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801115a:	2301      	movs	r3, #1
 801115c:	683a      	ldr	r2, [r7, #0]
 801115e:	f7ff fee1 	bl	8010f24 <disk_read>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d004      	beq.n	8011172 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011168:	f04f 33ff 	mov.w	r3, #4294967295
 801116c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801116e:	2301      	movs	r3, #1
 8011170:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011178:	7bfb      	ldrb	r3, [r7, #15]
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011182:	b480      	push	{r7}
 8011184:	b087      	sub	sp, #28
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801118a:	f04f 33ff 	mov.w	r3, #4294967295
 801118e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d031      	beq.n	80111fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	617b      	str	r3, [r7, #20]
 801119e:	e002      	b.n	80111a6 <get_ldnumber+0x24>
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	3301      	adds	r3, #1
 80111a4:	617b      	str	r3, [r7, #20]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	2b1f      	cmp	r3, #31
 80111ac:	d903      	bls.n	80111b6 <get_ldnumber+0x34>
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b3a      	cmp	r3, #58	; 0x3a
 80111b4:	d1f4      	bne.n	80111a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b3a      	cmp	r3, #58	; 0x3a
 80111bc:	d11c      	bne.n	80111f8 <get_ldnumber+0x76>
			tp = *path;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	1c5a      	adds	r2, r3, #1
 80111c8:	60fa      	str	r2, [r7, #12]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	3b30      	subs	r3, #48	; 0x30
 80111ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b09      	cmp	r3, #9
 80111d4:	d80e      	bhi.n	80111f4 <get_ldnumber+0x72>
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d10a      	bne.n	80111f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d107      	bne.n	80111f4 <get_ldnumber+0x72>
					vol = (int)i;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	3301      	adds	r3, #1
 80111ec:	617b      	str	r3, [r7, #20]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	e002      	b.n	80111fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80111f8:	2300      	movs	r3, #0
 80111fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80111fc:	693b      	ldr	r3, [r7, #16]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
	...

0801120c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	70da      	strb	r2, [r3, #3]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f04f 32ff 	mov.w	r2, #4294967295
 8011222:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff ff7e 	bl	8011128 <move_window>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <check_fs+0x2a>
 8011232:	2304      	movs	r3, #4
 8011234:	e038      	b.n	80112a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	3338      	adds	r3, #56	; 0x38
 801123a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801123e:	4618      	mov	r0, r3
 8011240:	f7ff fece 	bl	8010fe0 <ld_word>
 8011244:	4603      	mov	r3, r0
 8011246:	461a      	mov	r2, r3
 8011248:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801124c:	429a      	cmp	r2, r3
 801124e:	d001      	beq.n	8011254 <check_fs+0x48>
 8011250:	2303      	movs	r3, #3
 8011252:	e029      	b.n	80112a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801125a:	2be9      	cmp	r3, #233	; 0xe9
 801125c:	d009      	beq.n	8011272 <check_fs+0x66>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011264:	2beb      	cmp	r3, #235	; 0xeb
 8011266:	d11e      	bne.n	80112a6 <check_fs+0x9a>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801126e:	2b90      	cmp	r3, #144	; 0x90
 8011270:	d119      	bne.n	80112a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3338      	adds	r3, #56	; 0x38
 8011276:	3336      	adds	r3, #54	; 0x36
 8011278:	4618      	mov	r0, r3
 801127a:	f7ff fec9 	bl	8011010 <ld_dword>
 801127e:	4603      	mov	r3, r0
 8011280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011284:	4a0a      	ldr	r2, [pc, #40]	; (80112b0 <check_fs+0xa4>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d101      	bne.n	801128e <check_fs+0x82>
 801128a:	2300      	movs	r3, #0
 801128c:	e00c      	b.n	80112a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3338      	adds	r3, #56	; 0x38
 8011292:	3352      	adds	r3, #82	; 0x52
 8011294:	4618      	mov	r0, r3
 8011296:	f7ff febb 	bl	8011010 <ld_dword>
 801129a:	4603      	mov	r3, r0
 801129c:	4a05      	ldr	r2, [pc, #20]	; (80112b4 <check_fs+0xa8>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d101      	bne.n	80112a6 <check_fs+0x9a>
 80112a2:	2300      	movs	r3, #0
 80112a4:	e000      	b.n	80112a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80112a6:	2302      	movs	r3, #2
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	00544146 	.word	0x00544146
 80112b4:	33544146 	.word	0x33544146

080112b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b096      	sub	sp, #88	; 0x58
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	4613      	mov	r3, r2
 80112c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2200      	movs	r2, #0
 80112ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f7ff ff58 	bl	8011182 <get_ldnumber>
 80112d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80112d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	da01      	bge.n	80112de <find_volume+0x26>
 80112da:	230b      	movs	r3, #11
 80112dc:	e265      	b.n	80117aa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80112de:	4a9f      	ldr	r2, [pc, #636]	; (801155c <find_volume+0x2a4>)
 80112e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d101      	bne.n	80112f2 <find_volume+0x3a>
 80112ee:	230c      	movs	r3, #12
 80112f0:	e25b      	b.n	80117aa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	f023 0301 	bic.w	r3, r3, #1
 80112fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d01a      	beq.n	801133e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130a:	785b      	ldrb	r3, [r3, #1]
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fdc9 	bl	8010ea4 <disk_status>
 8011312:	4603      	mov	r3, r0
 8011314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801131c:	f003 0301 	and.w	r3, r3, #1
 8011320:	2b00      	cmp	r3, #0
 8011322:	d10c      	bne.n	801133e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011324:	79fb      	ldrb	r3, [r7, #7]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d007      	beq.n	801133a <find_volume+0x82>
 801132a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801132e:	f003 0304 	and.w	r3, r3, #4
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011336:	230a      	movs	r3, #10
 8011338:	e237      	b.n	80117aa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801133a:	2300      	movs	r3, #0
 801133c:	e235      	b.n	80117aa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011340:	2200      	movs	r2, #0
 8011342:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	b2da      	uxtb	r2, r3
 8011348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	785b      	ldrb	r3, [r3, #1]
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff fdc1 	bl	8010ed8 <disk_initialize>
 8011356:	4603      	mov	r3, r0
 8011358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801135c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011360:	f003 0301 	and.w	r3, r3, #1
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011368:	2303      	movs	r3, #3
 801136a:	e21e      	b.n	80117aa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d007      	beq.n	8011382 <find_volume+0xca>
 8011372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801137e:	230a      	movs	r3, #10
 8011380:	e213      	b.n	80117aa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	7858      	ldrb	r0, [r3, #1]
 8011386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011388:	330c      	adds	r3, #12
 801138a:	461a      	mov	r2, r3
 801138c:	2102      	movs	r1, #2
 801138e:	f7ff fe09 	bl	8010fa4 <disk_ioctl>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <find_volume+0xe4>
 8011398:	2301      	movs	r3, #1
 801139a:	e206      	b.n	80117aa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801139c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113a4:	d80d      	bhi.n	80113c2 <find_volume+0x10a>
 80113a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113ae:	d308      	bcc.n	80113c2 <find_volume+0x10a>
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	899b      	ldrh	r3, [r3, #12]
 80113b4:	461a      	mov	r2, r3
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	899b      	ldrh	r3, [r3, #12]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	4013      	ands	r3, r2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <find_volume+0x10e>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e1f1      	b.n	80117aa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113ce:	f7ff ff1d 	bl	801120c <check_fs>
 80113d2:	4603      	mov	r3, r0
 80113d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d149      	bne.n	8011474 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113e0:	2300      	movs	r3, #0
 80113e2:	643b      	str	r3, [r7, #64]	; 0x40
 80113e4:	e01e      	b.n	8011424 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80113ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80113f4:	4413      	add	r3, r2
 80113f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80113f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fa:	3304      	adds	r3, #4
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d006      	beq.n	8011410 <find_volume+0x158>
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	3308      	adds	r3, #8
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff fe02 	bl	8011010 <ld_dword>
 801140c:	4602      	mov	r2, r0
 801140e:	e000      	b.n	8011412 <find_volume+0x15a>
 8011410:	2200      	movs	r2, #0
 8011412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	3358      	adds	r3, #88	; 0x58
 8011418:	443b      	add	r3, r7
 801141a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801141e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011420:	3301      	adds	r3, #1
 8011422:	643b      	str	r3, [r7, #64]	; 0x40
 8011424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011426:	2b03      	cmp	r3, #3
 8011428:	d9dd      	bls.n	80113e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801142a:	2300      	movs	r3, #0
 801142c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801142e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011430:	2b00      	cmp	r3, #0
 8011432:	d002      	beq.n	801143a <find_volume+0x182>
 8011434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011436:	3b01      	subs	r3, #1
 8011438:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	3358      	adds	r3, #88	; 0x58
 8011440:	443b      	add	r3, r7
 8011442:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011446:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801144a:	2b00      	cmp	r3, #0
 801144c:	d005      	beq.n	801145a <find_volume+0x1a2>
 801144e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011452:	f7ff fedb 	bl	801120c <check_fs>
 8011456:	4603      	mov	r3, r0
 8011458:	e000      	b.n	801145c <find_volume+0x1a4>
 801145a:	2303      	movs	r3, #3
 801145c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011464:	2b01      	cmp	r3, #1
 8011466:	d905      	bls.n	8011474 <find_volume+0x1bc>
 8011468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146a:	3301      	adds	r3, #1
 801146c:	643b      	str	r3, [r7, #64]	; 0x40
 801146e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011470:	2b03      	cmp	r3, #3
 8011472:	d9e2      	bls.n	801143a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011478:	2b04      	cmp	r3, #4
 801147a:	d101      	bne.n	8011480 <find_volume+0x1c8>
 801147c:	2301      	movs	r3, #1
 801147e:	e194      	b.n	80117aa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011484:	2b01      	cmp	r3, #1
 8011486:	d901      	bls.n	801148c <find_volume+0x1d4>
 8011488:	230d      	movs	r3, #13
 801148a:	e18e      	b.n	80117aa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	3338      	adds	r3, #56	; 0x38
 8011490:	330b      	adds	r3, #11
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fda4 	bl	8010fe0 <ld_word>
 8011498:	4603      	mov	r3, r0
 801149a:	461a      	mov	r2, r3
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	899b      	ldrh	r3, [r3, #12]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d001      	beq.n	80114a8 <find_volume+0x1f0>
 80114a4:	230d      	movs	r3, #13
 80114a6:	e180      	b.n	80117aa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	3338      	adds	r3, #56	; 0x38
 80114ac:	3316      	adds	r3, #22
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff fd96 	bl	8010fe0 <ld_word>
 80114b4:	4603      	mov	r3, r0
 80114b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d106      	bne.n	80114cc <find_volume+0x214>
 80114be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c0:	3338      	adds	r3, #56	; 0x38
 80114c2:	3324      	adds	r3, #36	; 0x24
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7ff fda3 	bl	8011010 <ld_dword>
 80114ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80114cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	789b      	ldrb	r3, [r3, #2]
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d005      	beq.n	80114f0 <find_volume+0x238>
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	789b      	ldrb	r3, [r3, #2]
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d001      	beq.n	80114f0 <find_volume+0x238>
 80114ec:	230d      	movs	r3, #13
 80114ee:	e15c      	b.n	80117aa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	789b      	ldrb	r3, [r3, #2]
 80114f4:	461a      	mov	r2, r3
 80114f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114f8:	fb02 f303 	mul.w	r3, r2, r3
 80114fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011504:	b29a      	uxth	r2, r3
 8011506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011508:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801150a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150c:	895b      	ldrh	r3, [r3, #10]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d008      	beq.n	8011524 <find_volume+0x26c>
 8011512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011514:	895b      	ldrh	r3, [r3, #10]
 8011516:	461a      	mov	r2, r3
 8011518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151a:	895b      	ldrh	r3, [r3, #10]
 801151c:	3b01      	subs	r3, #1
 801151e:	4013      	ands	r3, r2
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <find_volume+0x270>
 8011524:	230d      	movs	r3, #13
 8011526:	e140      	b.n	80117aa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	3338      	adds	r3, #56	; 0x38
 801152c:	3311      	adds	r3, #17
 801152e:	4618      	mov	r0, r3
 8011530:	f7ff fd56 	bl	8010fe0 <ld_word>
 8011534:	4603      	mov	r3, r0
 8011536:	461a      	mov	r2, r3
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011542:	8992      	ldrh	r2, [r2, #12]
 8011544:	0952      	lsrs	r2, r2, #5
 8011546:	b292      	uxth	r2, r2
 8011548:	fbb3 f1f2 	udiv	r1, r3, r2
 801154c:	fb01 f202 	mul.w	r2, r1, r2
 8011550:	1a9b      	subs	r3, r3, r2
 8011552:	b29b      	uxth	r3, r3
 8011554:	2b00      	cmp	r3, #0
 8011556:	d003      	beq.n	8011560 <find_volume+0x2a8>
 8011558:	230d      	movs	r3, #13
 801155a:	e126      	b.n	80117aa <find_volume+0x4f2>
 801155c:	200026fc 	.word	0x200026fc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011562:	3338      	adds	r3, #56	; 0x38
 8011564:	3313      	adds	r3, #19
 8011566:	4618      	mov	r0, r3
 8011568:	f7ff fd3a 	bl	8010fe0 <ld_word>
 801156c:	4603      	mov	r3, r0
 801156e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <find_volume+0x2cc>
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	3338      	adds	r3, #56	; 0x38
 801157a:	3320      	adds	r3, #32
 801157c:	4618      	mov	r0, r3
 801157e:	f7ff fd47 	bl	8011010 <ld_dword>
 8011582:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	3338      	adds	r3, #56	; 0x38
 8011588:	330e      	adds	r3, #14
 801158a:	4618      	mov	r0, r3
 801158c:	f7ff fd28 	bl	8010fe0 <ld_word>
 8011590:	4603      	mov	r3, r0
 8011592:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011594:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <find_volume+0x2e6>
 801159a:	230d      	movs	r3, #13
 801159c:	e105      	b.n	80117aa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801159e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115a2:	4413      	add	r3, r2
 80115a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115a6:	8911      	ldrh	r1, [r2, #8]
 80115a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115aa:	8992      	ldrh	r2, [r2, #12]
 80115ac:	0952      	lsrs	r2, r2, #5
 80115ae:	b292      	uxth	r2, r2
 80115b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80115b4:	b292      	uxth	r2, r2
 80115b6:	4413      	add	r3, r2
 80115b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	429a      	cmp	r2, r3
 80115c0:	d201      	bcs.n	80115c6 <find_volume+0x30e>
 80115c2:	230d      	movs	r3, #13
 80115c4:	e0f1      	b.n	80117aa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80115c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	1ad3      	subs	r3, r2, r3
 80115cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ce:	8952      	ldrh	r2, [r2, #10]
 80115d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80115d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d101      	bne.n	80115e0 <find_volume+0x328>
 80115dc:	230d      	movs	r3, #13
 80115de:	e0e4      	b.n	80117aa <find_volume+0x4f2>
		fmt = FS_FAT32;
 80115e0:	2303      	movs	r3, #3
 80115e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d802      	bhi.n	80115f6 <find_volume+0x33e>
 80115f0:	2302      	movs	r3, #2
 80115f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d802      	bhi.n	8011606 <find_volume+0x34e>
 8011600:	2301      	movs	r3, #1
 8011602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	1c9a      	adds	r2, r3, #2
 801160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011612:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011618:	441a      	add	r2, r3
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801161e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011622:	441a      	add	r2, r3
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801162c:	2b03      	cmp	r3, #3
 801162e:	d11e      	bne.n	801166e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	3338      	adds	r3, #56	; 0x38
 8011634:	332a      	adds	r3, #42	; 0x2a
 8011636:	4618      	mov	r0, r3
 8011638:	f7ff fcd2 	bl	8010fe0 <ld_word>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <find_volume+0x38e>
 8011642:	230d      	movs	r3, #13
 8011644:	e0b1      	b.n	80117aa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011648:	891b      	ldrh	r3, [r3, #8]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <find_volume+0x39a>
 801164e:	230d      	movs	r3, #13
 8011650:	e0ab      	b.n	80117aa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	3338      	adds	r3, #56	; 0x38
 8011656:	332c      	adds	r3, #44	; 0x2c
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fcd9 	bl	8011010 <ld_dword>
 801165e:	4602      	mov	r2, r0
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	69db      	ldr	r3, [r3, #28]
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	647b      	str	r3, [r7, #68]	; 0x44
 801166c:	e01f      	b.n	80116ae <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011670:	891b      	ldrh	r3, [r3, #8]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d101      	bne.n	801167a <find_volume+0x3c2>
 8011676:	230d      	movs	r3, #13
 8011678:	e097      	b.n	80117aa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011680:	441a      	add	r2, r3
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801168a:	2b02      	cmp	r3, #2
 801168c:	d103      	bne.n	8011696 <find_volume+0x3de>
 801168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	e00a      	b.n	80116ac <find_volume+0x3f4>
 8011696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011698:	69da      	ldr	r2, [r3, #28]
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	085a      	lsrs	r2, r3, #1
 80116a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a4:	69db      	ldr	r3, [r3, #28]
 80116a6:	f003 0301 	and.w	r3, r3, #1
 80116aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	6a1a      	ldr	r2, [r3, #32]
 80116b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b4:	899b      	ldrh	r3, [r3, #12]
 80116b6:	4619      	mov	r1, r3
 80116b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ba:	440b      	add	r3, r1
 80116bc:	3b01      	subs	r3, #1
 80116be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116c0:	8989      	ldrh	r1, [r1, #12]
 80116c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d201      	bcs.n	80116ce <find_volume+0x416>
 80116ca:	230d      	movs	r3, #13
 80116cc:	e06d      	b.n	80117aa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80116ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d0:	f04f 32ff 	mov.w	r2, #4294967295
 80116d4:	619a      	str	r2, [r3, #24]
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	699a      	ldr	r2, [r3, #24]
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80116de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e0:	2280      	movs	r2, #128	; 0x80
 80116e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	d149      	bne.n	8011780 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	3338      	adds	r3, #56	; 0x38
 80116f0:	3330      	adds	r3, #48	; 0x30
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7ff fc74 	bl	8010fe0 <ld_word>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d140      	bne.n	8011780 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011700:	3301      	adds	r3, #1
 8011702:	4619      	mov	r1, r3
 8011704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011706:	f7ff fd0f 	bl	8011128 <move_window>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	d137      	bne.n	8011780 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011712:	2200      	movs	r2, #0
 8011714:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	3338      	adds	r3, #56	; 0x38
 801171a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff fc5e 	bl	8010fe0 <ld_word>
 8011724:	4603      	mov	r3, r0
 8011726:	461a      	mov	r2, r3
 8011728:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801172c:	429a      	cmp	r2, r3
 801172e:	d127      	bne.n	8011780 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	3338      	adds	r3, #56	; 0x38
 8011734:	4618      	mov	r0, r3
 8011736:	f7ff fc6b 	bl	8011010 <ld_dword>
 801173a:	4603      	mov	r3, r0
 801173c:	4a1d      	ldr	r2, [pc, #116]	; (80117b4 <find_volume+0x4fc>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d11e      	bne.n	8011780 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	3338      	adds	r3, #56	; 0x38
 8011746:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff fc60 	bl	8011010 <ld_dword>
 8011750:	4603      	mov	r3, r0
 8011752:	4a19      	ldr	r2, [pc, #100]	; (80117b8 <find_volume+0x500>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d113      	bne.n	8011780 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175a:	3338      	adds	r3, #56	; 0x38
 801175c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff fc55 	bl	8011010 <ld_dword>
 8011766:	4602      	mov	r2, r0
 8011768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176e:	3338      	adds	r3, #56	; 0x38
 8011770:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff fc4b 	bl	8011010 <ld_dword>
 801177a:	4602      	mov	r2, r0
 801177c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011782:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011786:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011788:	4b0c      	ldr	r3, [pc, #48]	; (80117bc <find_volume+0x504>)
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	3301      	adds	r3, #1
 801178e:	b29a      	uxth	r2, r3
 8011790:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <find_volume+0x504>)
 8011792:	801a      	strh	r2, [r3, #0]
 8011794:	4b09      	ldr	r3, [pc, #36]	; (80117bc <find_volume+0x504>)
 8011796:	881a      	ldrh	r2, [r3, #0]
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179e:	4a08      	ldr	r2, [pc, #32]	; (80117c0 <find_volume+0x508>)
 80117a0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80117a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117a4:	f7ff fc58 	bl	8011058 <clear_lock>
#endif
	return FR_OK;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3758      	adds	r7, #88	; 0x58
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	41615252 	.word	0x41615252
 80117b8:	61417272 	.word	0x61417272
 80117bc:	20002700 	.word	0x20002700
 80117c0:	20002724 	.word	0x20002724

080117c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b088      	sub	sp, #32
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	4613      	mov	r3, r2
 80117d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80117d6:	f107 0310 	add.w	r3, r7, #16
 80117da:	4618      	mov	r0, r3
 80117dc:	f7ff fcd1 	bl	8011182 <get_ldnumber>
 80117e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	da01      	bge.n	80117ec <f_mount+0x28>
 80117e8:	230b      	movs	r3, #11
 80117ea:	e02b      	b.n	8011844 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80117ec:	4a17      	ldr	r2, [pc, #92]	; (801184c <f_mount+0x88>)
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d005      	beq.n	8011808 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80117fc:	69b8      	ldr	r0, [r7, #24]
 80117fe:	f7ff fc2b 	bl	8011058 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	2200      	movs	r2, #0
 8011806:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d002      	beq.n	8011814 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2200      	movs	r2, #0
 8011812:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	490d      	ldr	r1, [pc, #52]	; (801184c <f_mount+0x88>)
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d002      	beq.n	801182a <f_mount+0x66>
 8011824:	79fb      	ldrb	r3, [r7, #7]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d001      	beq.n	801182e <f_mount+0x6a>
 801182a:	2300      	movs	r3, #0
 801182c:	e00a      	b.n	8011844 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801182e:	f107 010c 	add.w	r1, r7, #12
 8011832:	f107 0308 	add.w	r3, r7, #8
 8011836:	2200      	movs	r2, #0
 8011838:	4618      	mov	r0, r3
 801183a:	f7ff fd3d 	bl	80112b8 <find_volume>
 801183e:	4603      	mov	r3, r0
 8011840:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011842:	7dfb      	ldrb	r3, [r7, #23]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3720      	adds	r7, #32
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	200026fc 	.word	0x200026fc

08011850 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011850:	b480      	push	{r7}
 8011852:	b087      	sub	sp, #28
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	4613      	mov	r3, r2
 801185c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801185e:	2301      	movs	r3, #1
 8011860:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011866:	4b1f      	ldr	r3, [pc, #124]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011868:	7a5b      	ldrb	r3, [r3, #9]
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d131      	bne.n	80118d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011870:	4b1c      	ldr	r3, [pc, #112]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011872:	7a5b      	ldrb	r3, [r3, #9]
 8011874:	b2db      	uxtb	r3, r3
 8011876:	461a      	mov	r2, r3
 8011878:	4b1a      	ldr	r3, [pc, #104]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 801187a:	2100      	movs	r1, #0
 801187c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801187e:	4b19      	ldr	r3, [pc, #100]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011880:	7a5b      	ldrb	r3, [r3, #9]
 8011882:	b2db      	uxtb	r3, r3
 8011884:	4a17      	ldr	r2, [pc, #92]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	4413      	add	r3, r2
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801188e:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011890:	7a5b      	ldrb	r3, [r3, #9]
 8011892:	b2db      	uxtb	r3, r3
 8011894:	461a      	mov	r2, r3
 8011896:	4b13      	ldr	r3, [pc, #76]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 8011898:	4413      	add	r3, r2
 801189a:	79fa      	ldrb	r2, [r7, #7]
 801189c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801189e:	4b11      	ldr	r3, [pc, #68]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 80118a0:	7a5b      	ldrb	r3, [r3, #9]
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	1c5a      	adds	r2, r3, #1
 80118a6:	b2d1      	uxtb	r1, r2
 80118a8:	4a0e      	ldr	r2, [pc, #56]	; (80118e4 <FATFS_LinkDriverEx+0x94>)
 80118aa:	7251      	strb	r1, [r2, #9]
 80118ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80118ae:	7dbb      	ldrb	r3, [r7, #22]
 80118b0:	3330      	adds	r3, #48	; 0x30
 80118b2:	b2da      	uxtb	r2, r3
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	3301      	adds	r3, #1
 80118bc:	223a      	movs	r2, #58	; 0x3a
 80118be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	3302      	adds	r3, #2
 80118c4:	222f      	movs	r2, #47	; 0x2f
 80118c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	3303      	adds	r3, #3
 80118cc:	2200      	movs	r2, #0
 80118ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	371c      	adds	r7, #28
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	20002924 	.word	0x20002924

080118e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118f2:	2200      	movs	r2, #0
 80118f4:	6839      	ldr	r1, [r7, #0]
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff ffaa 	bl	8011850 <FATFS_LinkDriverEx>
 80118fc:	4603      	mov	r3, r0
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801190c:	2201      	movs	r2, #1
 801190e:	4912      	ldr	r1, [pc, #72]	; (8011958 <MX_USB_DEVICE_Init+0x50>)
 8011910:	4812      	ldr	r0, [pc, #72]	; (801195c <MX_USB_DEVICE_Init+0x54>)
 8011912:	f7fb ffc3 	bl	800d89c <USBD_Init>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d001      	beq.n	8011920 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801191c:	f7ef fe9c 	bl	8001658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011920:	490f      	ldr	r1, [pc, #60]	; (8011960 <MX_USB_DEVICE_Init+0x58>)
 8011922:	480e      	ldr	r0, [pc, #56]	; (801195c <MX_USB_DEVICE_Init+0x54>)
 8011924:	f7fb ffea 	bl	800d8fc <USBD_RegisterClass>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d001      	beq.n	8011932 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801192e:	f7ef fe93 	bl	8001658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011932:	490c      	ldr	r1, [pc, #48]	; (8011964 <MX_USB_DEVICE_Init+0x5c>)
 8011934:	4809      	ldr	r0, [pc, #36]	; (801195c <MX_USB_DEVICE_Init+0x54>)
 8011936:	f7fb fee1 	bl	800d6fc <USBD_CDC_RegisterInterface>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d001      	beq.n	8011944 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011940:	f7ef fe8a 	bl	8001658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011944:	4805      	ldr	r0, [pc, #20]	; (801195c <MX_USB_DEVICE_Init+0x54>)
 8011946:	f7fc f80f 	bl	800d968 <USBD_Start>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011950:	f7ef fe82 	bl	8001658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011954:	bf00      	nop
 8011956:	bd80      	pop	{r7, pc}
 8011958:	200000cc 	.word	0x200000cc
 801195c:	20002930 	.word	0x20002930
 8011960:	20000018 	.word	0x20000018
 8011964:	200000b8 	.word	0x200000b8

08011968 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801196c:	2200      	movs	r2, #0
 801196e:	4905      	ldr	r1, [pc, #20]	; (8011984 <CDC_Init_HS+0x1c>)
 8011970:	4805      	ldr	r0, [pc, #20]	; (8011988 <CDC_Init_HS+0x20>)
 8011972:	f7fb fedd 	bl	800d730 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8011976:	4905      	ldr	r1, [pc, #20]	; (801198c <CDC_Init_HS+0x24>)
 8011978:	4803      	ldr	r0, [pc, #12]	; (8011988 <CDC_Init_HS+0x20>)
 801197a:	f7fb fefb 	bl	800d774 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801197e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011980:	4618      	mov	r0, r3
 8011982:	bd80      	pop	{r7, pc}
 8011984:	2000340c 	.word	0x2000340c
 8011988:	20002930 	.word	0x20002930
 801198c:	20002c0c 	.word	0x20002c0c

08011990 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8011990:	b480      	push	{r7}
 8011992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8011994:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8011996:	4618      	mov	r0, r3
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	4603      	mov	r3, r0
 80119a8:	6039      	str	r1, [r7, #0]
 80119aa:	71fb      	strb	r3, [r7, #7]
 80119ac:	4613      	mov	r3, r2
 80119ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80119b0:	79fb      	ldrb	r3, [r7, #7]
 80119b2:	2b23      	cmp	r3, #35	; 0x23
 80119b4:	d84a      	bhi.n	8011a4c <CDC_Control_HS+0xac>
 80119b6:	a201      	add	r2, pc, #4	; (adr r2, 80119bc <CDC_Control_HS+0x1c>)
 80119b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119bc:	08011a4d 	.word	0x08011a4d
 80119c0:	08011a4d 	.word	0x08011a4d
 80119c4:	08011a4d 	.word	0x08011a4d
 80119c8:	08011a4d 	.word	0x08011a4d
 80119cc:	08011a4d 	.word	0x08011a4d
 80119d0:	08011a4d 	.word	0x08011a4d
 80119d4:	08011a4d 	.word	0x08011a4d
 80119d8:	08011a4d 	.word	0x08011a4d
 80119dc:	08011a4d 	.word	0x08011a4d
 80119e0:	08011a4d 	.word	0x08011a4d
 80119e4:	08011a4d 	.word	0x08011a4d
 80119e8:	08011a4d 	.word	0x08011a4d
 80119ec:	08011a4d 	.word	0x08011a4d
 80119f0:	08011a4d 	.word	0x08011a4d
 80119f4:	08011a4d 	.word	0x08011a4d
 80119f8:	08011a4d 	.word	0x08011a4d
 80119fc:	08011a4d 	.word	0x08011a4d
 8011a00:	08011a4d 	.word	0x08011a4d
 8011a04:	08011a4d 	.word	0x08011a4d
 8011a08:	08011a4d 	.word	0x08011a4d
 8011a0c:	08011a4d 	.word	0x08011a4d
 8011a10:	08011a4d 	.word	0x08011a4d
 8011a14:	08011a4d 	.word	0x08011a4d
 8011a18:	08011a4d 	.word	0x08011a4d
 8011a1c:	08011a4d 	.word	0x08011a4d
 8011a20:	08011a4d 	.word	0x08011a4d
 8011a24:	08011a4d 	.word	0x08011a4d
 8011a28:	08011a4d 	.word	0x08011a4d
 8011a2c:	08011a4d 	.word	0x08011a4d
 8011a30:	08011a4d 	.word	0x08011a4d
 8011a34:	08011a4d 	.word	0x08011a4d
 8011a38:	08011a4d 	.word	0x08011a4d
 8011a3c:	08011a4d 	.word	0x08011a4d
 8011a40:	08011a4d 	.word	0x08011a4d
 8011a44:	08011a4d 	.word	0x08011a4d
 8011a48:	08011a4d 	.word	0x08011a4d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011a4c:	bf00      	nop
  }

  return (USBD_OK);
 8011a4e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8011a66:	6879      	ldr	r1, [r7, #4]
 8011a68:	4805      	ldr	r0, [pc, #20]	; (8011a80 <CDC_Receive_HS+0x24>)
 8011a6a:	f7fb fe83 	bl	800d774 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8011a6e:	4804      	ldr	r0, [pc, #16]	; (8011a80 <CDC_Receive_HS+0x24>)
 8011a70:	f7fb fede 	bl	800d830 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011a74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	20002930 	.word	0x20002930

08011a84 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011a90:	2300      	movs	r3, #0
 8011a92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8011a94:	4b0d      	ldr	r3, [pc, #52]	; (8011acc <CDC_Transmit_HS+0x48>)
 8011a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e00b      	b.n	8011ac2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8011aaa:	887b      	ldrh	r3, [r7, #2]
 8011aac:	461a      	mov	r2, r3
 8011aae:	6879      	ldr	r1, [r7, #4]
 8011ab0:	4806      	ldr	r0, [pc, #24]	; (8011acc <CDC_Transmit_HS+0x48>)
 8011ab2:	f7fb fe3d 	bl	800d730 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8011ab6:	4805      	ldr	r0, [pc, #20]	; (8011acc <CDC_Transmit_HS+0x48>)
 8011ab8:	f7fb fe7a 	bl	800d7b0 <USBD_CDC_TransmitPacket>
 8011abc:	4603      	mov	r3, r0
 8011abe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	20002930 	.word	0x20002930

08011ad0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b087      	sub	sp, #28
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	4613      	mov	r3, r2
 8011adc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8011ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	371c      	adds	r7, #28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
	...

08011af4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	4603      	mov	r3, r0
 8011afc:	6039      	str	r1, [r7, #0]
 8011afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	2212      	movs	r2, #18
 8011b04:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8011b06:	4b03      	ldr	r3, [pc, #12]	; (8011b14 <USBD_HS_DeviceDescriptor+0x20>)
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr
 8011b14:	200000ec 	.word	0x200000ec

08011b18 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b083      	sub	sp, #12
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	6039      	str	r1, [r7, #0]
 8011b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2204      	movs	r2, #4
 8011b28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011b2a:	4b03      	ldr	r3, [pc, #12]	; (8011b38 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	2000010c 	.word	0x2000010c

08011b3c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	6039      	str	r1, [r7, #0]
 8011b46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b48:	79fb      	ldrb	r3, [r7, #7]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d105      	bne.n	8011b5a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	4907      	ldr	r1, [pc, #28]	; (8011b70 <USBD_HS_ProductStrDescriptor+0x34>)
 8011b52:	4808      	ldr	r0, [pc, #32]	; (8011b74 <USBD_HS_ProductStrDescriptor+0x38>)
 8011b54:	f7fd f8de 	bl	800ed14 <USBD_GetString>
 8011b58:	e004      	b.n	8011b64 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011b5a:	683a      	ldr	r2, [r7, #0]
 8011b5c:	4904      	ldr	r1, [pc, #16]	; (8011b70 <USBD_HS_ProductStrDescriptor+0x34>)
 8011b5e:	4805      	ldr	r0, [pc, #20]	; (8011b74 <USBD_HS_ProductStrDescriptor+0x38>)
 8011b60:	f7fd f8d8 	bl	800ed14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b64:	4b02      	ldr	r3, [pc, #8]	; (8011b70 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3708      	adds	r7, #8
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	20003c0c 	.word	0x20003c0c
 8011b74:	08015cf4 	.word	0x08015cf4

08011b78 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	6039      	str	r1, [r7, #0]
 8011b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	4904      	ldr	r1, [pc, #16]	; (8011b98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8011b88:	4804      	ldr	r0, [pc, #16]	; (8011b9c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8011b8a:	f7fd f8c3 	bl	800ed14 <USBD_GetString>
  return USBD_StrDesc;
 8011b8e:	4b02      	ldr	r3, [pc, #8]	; (8011b98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	20003c0c 	.word	0x20003c0c
 8011b9c:	08015d0c 	.word	0x08015d0c

08011ba0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	6039      	str	r1, [r7, #0]
 8011baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	221a      	movs	r2, #26
 8011bb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011bb2:	f000 f855 	bl	8011c60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011bb6:	4b02      	ldr	r3, [pc, #8]	; (8011bc0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	20000110 	.word	0x20000110

08011bc4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	4603      	mov	r3, r0
 8011bcc:	6039      	str	r1, [r7, #0]
 8011bce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011bd0:	79fb      	ldrb	r3, [r7, #7]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d105      	bne.n	8011be2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	4907      	ldr	r1, [pc, #28]	; (8011bf8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011bda:	4808      	ldr	r0, [pc, #32]	; (8011bfc <USBD_HS_ConfigStrDescriptor+0x38>)
 8011bdc:	f7fd f89a 	bl	800ed14 <USBD_GetString>
 8011be0:	e004      	b.n	8011bec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	4904      	ldr	r1, [pc, #16]	; (8011bf8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011be6:	4805      	ldr	r0, [pc, #20]	; (8011bfc <USBD_HS_ConfigStrDescriptor+0x38>)
 8011be8:	f7fd f894 	bl	800ed14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011bec:	4b02      	ldr	r3, [pc, #8]	; (8011bf8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20003c0c 	.word	0x20003c0c
 8011bfc:	08015d20 	.word	0x08015d20

08011c00 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	4603      	mov	r3, r0
 8011c08:	6039      	str	r1, [r7, #0]
 8011c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c0c:	79fb      	ldrb	r3, [r7, #7]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d105      	bne.n	8011c1e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	4907      	ldr	r1, [pc, #28]	; (8011c34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011c16:	4808      	ldr	r0, [pc, #32]	; (8011c38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011c18:	f7fd f87c 	bl	800ed14 <USBD_GetString>
 8011c1c:	e004      	b.n	8011c28 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011c1e:	683a      	ldr	r2, [r7, #0]
 8011c20:	4904      	ldr	r1, [pc, #16]	; (8011c34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011c22:	4805      	ldr	r0, [pc, #20]	; (8011c38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011c24:	f7fd f876 	bl	800ed14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c28:	4b02      	ldr	r3, [pc, #8]	; (8011c34 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	20003c0c 	.word	0x20003c0c
 8011c38:	08015d2c 	.word	0x08015d2c

08011c3c <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	4603      	mov	r3, r0
 8011c44:	6039      	str	r1, [r7, #0]
 8011c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	220c      	movs	r2, #12
 8011c4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8011c4e:	4b03      	ldr	r3, [pc, #12]	; (8011c5c <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	20000100 	.word	0x20000100

08011c60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011c66:	4b0f      	ldr	r3, [pc, #60]	; (8011ca4 <Get_SerialNum+0x44>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011c6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ca8 <Get_SerialNum+0x48>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011c72:	4b0e      	ldr	r3, [pc, #56]	; (8011cac <Get_SerialNum+0x4c>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d009      	beq.n	8011c9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c86:	2208      	movs	r2, #8
 8011c88:	4909      	ldr	r1, [pc, #36]	; (8011cb0 <Get_SerialNum+0x50>)
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f000 f814 	bl	8011cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c90:	2204      	movs	r2, #4
 8011c92:	4908      	ldr	r1, [pc, #32]	; (8011cb4 <Get_SerialNum+0x54>)
 8011c94:	68b8      	ldr	r0, [r7, #8]
 8011c96:	f000 f80f 	bl	8011cb8 <IntToUnicode>
  }
}
 8011c9a:	bf00      	nop
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	1ff0f420 	.word	0x1ff0f420
 8011ca8:	1ff0f424 	.word	0x1ff0f424
 8011cac:	1ff0f428 	.word	0x1ff0f428
 8011cb0:	20000112 	.word	0x20000112
 8011cb4:	20000122 	.word	0x20000122

08011cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b087      	sub	sp, #28
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011cca:	2300      	movs	r3, #0
 8011ccc:	75fb      	strb	r3, [r7, #23]
 8011cce:	e027      	b.n	8011d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	0f1b      	lsrs	r3, r3, #28
 8011cd4:	2b09      	cmp	r3, #9
 8011cd6:	d80b      	bhi.n	8011cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	0f1b      	lsrs	r3, r3, #28
 8011cdc:	b2da      	uxtb	r2, r3
 8011cde:	7dfb      	ldrb	r3, [r7, #23]
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	440b      	add	r3, r1
 8011ce8:	3230      	adds	r2, #48	; 0x30
 8011cea:	b2d2      	uxtb	r2, r2
 8011cec:	701a      	strb	r2, [r3, #0]
 8011cee:	e00a      	b.n	8011d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	0f1b      	lsrs	r3, r3, #28
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	440b      	add	r3, r1
 8011d00:	3237      	adds	r2, #55	; 0x37
 8011d02:	b2d2      	uxtb	r2, r2
 8011d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	011b      	lsls	r3, r3, #4
 8011d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011d0c:	7dfb      	ldrb	r3, [r7, #23]
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	3301      	adds	r3, #1
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	4413      	add	r3, r2
 8011d16:	2200      	movs	r2, #0
 8011d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	75fb      	strb	r3, [r7, #23]
 8011d20:	7dfa      	ldrb	r2, [r7, #23]
 8011d22:	79fb      	ldrb	r3, [r7, #7]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d3d3      	bcc.n	8011cd0 <IntToUnicode+0x18>
  }
}
 8011d28:	bf00      	nop
 8011d2a:	bf00      	nop
 8011d2c:	371c      	adds	r7, #28
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr
	...

08011d38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b0aa      	sub	sp, #168	; 0xa8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011d44:	2200      	movs	r2, #0
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	605a      	str	r2, [r3, #4]
 8011d4a:	609a      	str	r2, [r3, #8]
 8011d4c:	60da      	str	r2, [r3, #12]
 8011d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d50:	f107 0310 	add.w	r3, r7, #16
 8011d54:	2284      	movs	r2, #132	; 0x84
 8011d56:	2100      	movs	r1, #0
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f000 fea9 	bl	8012ab0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a26      	ldr	r2, [pc, #152]	; (8011dfc <HAL_PCD_MspInit+0xc4>)
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d145      	bne.n	8011df4 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011d68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d74:	f107 0310 	add.w	r3, r7, #16
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7f5 f821 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011d84:	f7ef fc68 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011d88:	4b1d      	ldr	r3, [pc, #116]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d8c:	4a1c      	ldr	r2, [pc, #112]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011d8e:	f043 0302 	orr.w	r3, r3, #2
 8011d92:	6313      	str	r3, [r2, #48]	; 0x30
 8011d94:	4b1a      	ldr	r3, [pc, #104]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d98:	f003 0302 	and.w	r3, r3, #2
 8011d9c:	60fb      	str	r3, [r7, #12]
 8011d9e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8011da0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011da8:	2302      	movs	r3, #2
 8011daa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011db4:	2303      	movs	r3, #3
 8011db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011dba:	230c      	movs	r3, #12
 8011dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011dc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	480f      	ldr	r0, [pc, #60]	; (8011e04 <HAL_PCD_MspInit+0xcc>)
 8011dc8:	f7f1 f8e8 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011dcc:	4b0c      	ldr	r3, [pc, #48]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dd0:	4a0b      	ldr	r2, [pc, #44]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8011dd8:	4b09      	ldr	r3, [pc, #36]	; (8011e00 <HAL_PCD_MspInit+0xc8>)
 8011dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011de0:	60bb      	str	r3, [r7, #8]
 8011de2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011de4:	2200      	movs	r2, #0
 8011de6:	2100      	movs	r1, #0
 8011de8:	204d      	movs	r0, #77	; 0x4d
 8011dea:	f7f0 fdb6 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011dee:	204d      	movs	r0, #77	; 0x4d
 8011df0:	f7f0 fdcf 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011df4:	bf00      	nop
 8011df6:	37a8      	adds	r7, #168	; 0xa8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	40040000 	.word	0x40040000
 8011e00:	40023800 	.word	0x40023800
 8011e04:	40020400 	.word	0x40020400

08011e08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7fb fdef 	bl	800da02 <USBD_LL_SetupStage>
}
 8011e24:	bf00      	nop
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	460b      	mov	r3, r1
 8011e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011e3e:	78fa      	ldrb	r2, [r7, #3]
 8011e40:	6879      	ldr	r1, [r7, #4]
 8011e42:	4613      	mov	r3, r2
 8011e44:	00db      	lsls	r3, r3, #3
 8011e46:	4413      	add	r3, r2
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	440b      	add	r3, r1
 8011e4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	78fb      	ldrb	r3, [r7, #3]
 8011e54:	4619      	mov	r1, r3
 8011e56:	f7fb fe29 	bl	800daac <USBD_LL_DataOutStage>
}
 8011e5a:	bf00      	nop
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}

08011e62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b082      	sub	sp, #8
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011e74:	78fa      	ldrb	r2, [r7, #3]
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	4413      	add	r3, r2
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	440b      	add	r3, r1
 8011e82:	334c      	adds	r3, #76	; 0x4c
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	78fb      	ldrb	r3, [r7, #3]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7fb fec2 	bl	800dc12 <USBD_LL_DataInStage>
}
 8011e8e:	bf00      	nop
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b082      	sub	sp, #8
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fb fff6 	bl	800de96 <USBD_LL_SOF>
}
 8011eaa:	bf00      	nop
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d102      	bne.n	8011ecc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	73fb      	strb	r3, [r7, #15]
 8011eca:	e008      	b.n	8011ede <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	2b02      	cmp	r3, #2
 8011ed2:	d102      	bne.n	8011eda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	73fb      	strb	r3, [r7, #15]
 8011ed8:	e001      	b.n	8011ede <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011eda:	f7ef fbbd 	bl	8001658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ee4:	7bfa      	ldrb	r2, [r7, #15]
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fb ff96 	bl	800de1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fb ff3e 	bl	800dd76 <USBD_LL_Reset>
}
 8011efa:	bf00      	nop
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fb ff91 	bl	800de3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	6812      	ldr	r2, [r2, #0]
 8011f26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011f2a:	f043 0301 	orr.w	r3, r3, #1
 8011f2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a1b      	ldr	r3, [r3, #32]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d005      	beq.n	8011f44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f38:	4b04      	ldr	r3, [pc, #16]	; (8011f4c <HAL_PCD_SuspendCallback+0x48>)
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	4a03      	ldr	r2, [pc, #12]	; (8011f4c <HAL_PCD_SuspendCallback+0x48>)
 8011f3e:	f043 0306 	orr.w	r3, r3, #6
 8011f42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f44:	bf00      	nop
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	e000ed00 	.word	0xe000ed00

08011f50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fb ff81 	bl	800de66 <USBD_LL_Resume>
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	460b      	mov	r3, r1
 8011f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011f7e:	78fa      	ldrb	r2, [r7, #3]
 8011f80:	4611      	mov	r1, r2
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fb ffd9 	bl	800df3a <USBD_LL_IsoOUTIncomplete>
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011fa2:	78fa      	ldrb	r2, [r7, #3]
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fb ff95 	bl	800ded6 <USBD_LL_IsoINIncomplete>
}
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fb ffeb 	bl	800df9e <USBD_LL_DevConnected>
}
 8011fc8:	bf00      	nop
 8011fca:	3708      	adds	r7, #8
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fb ffe8 	bl	800dfb4 <USBD_LL_DevDisconnected>
}
 8011fe4:	bf00      	nop
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d140      	bne.n	801207e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011ffc:	4a22      	ldr	r2, [pc, #136]	; (8012088 <USBD_LL_Init+0x9c>)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4a20      	ldr	r2, [pc, #128]	; (8012088 <USBD_LL_Init+0x9c>)
 8012008:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801200c:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <USBD_LL_Init+0x9c>)
 801200e:	4a1f      	ldr	r2, [pc, #124]	; (801208c <USBD_LL_Init+0xa0>)
 8012010:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8012012:	4b1d      	ldr	r3, [pc, #116]	; (8012088 <USBD_LL_Init+0x9c>)
 8012014:	2208      	movs	r2, #8
 8012016:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012018:	4b1b      	ldr	r3, [pc, #108]	; (8012088 <USBD_LL_Init+0x9c>)
 801201a:	2202      	movs	r2, #2
 801201c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801201e:	4b1a      	ldr	r3, [pc, #104]	; (8012088 <USBD_LL_Init+0x9c>)
 8012020:	2200      	movs	r2, #0
 8012022:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012024:	4b18      	ldr	r3, [pc, #96]	; (8012088 <USBD_LL_Init+0x9c>)
 8012026:	2202      	movs	r2, #2
 8012028:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801202a:	4b17      	ldr	r3, [pc, #92]	; (8012088 <USBD_LL_Init+0x9c>)
 801202c:	2200      	movs	r2, #0
 801202e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012030:	4b15      	ldr	r3, [pc, #84]	; (8012088 <USBD_LL_Init+0x9c>)
 8012032:	2200      	movs	r2, #0
 8012034:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012036:	4b14      	ldr	r3, [pc, #80]	; (8012088 <USBD_LL_Init+0x9c>)
 8012038:	2200      	movs	r2, #0
 801203a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801203c:	4b12      	ldr	r3, [pc, #72]	; (8012088 <USBD_LL_Init+0x9c>)
 801203e:	2200      	movs	r2, #0
 8012040:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012042:	4b11      	ldr	r3, [pc, #68]	; (8012088 <USBD_LL_Init+0x9c>)
 8012044:	2200      	movs	r2, #0
 8012046:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012048:	4b0f      	ldr	r3, [pc, #60]	; (8012088 <USBD_LL_Init+0x9c>)
 801204a:	2200      	movs	r2, #0
 801204c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801204e:	480e      	ldr	r0, [pc, #56]	; (8012088 <USBD_LL_Init+0x9c>)
 8012050:	f7f2 fed6 	bl	8004e00 <HAL_PCD_Init>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801205a:	f7ef fafd 	bl	8001658 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801205e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012062:	4809      	ldr	r0, [pc, #36]	; (8012088 <USBD_LL_Init+0x9c>)
 8012064:	f7f4 f94f 	bl	8006306 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012068:	2280      	movs	r2, #128	; 0x80
 801206a:	2100      	movs	r1, #0
 801206c:	4806      	ldr	r0, [pc, #24]	; (8012088 <USBD_LL_Init+0x9c>)
 801206e:	f7f4 f903 	bl	8006278 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012072:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8012076:	2101      	movs	r1, #1
 8012078:	4803      	ldr	r0, [pc, #12]	; (8012088 <USBD_LL_Init+0x9c>)
 801207a:	f7f4 f8fd 	bl	8006278 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801207e:	2300      	movs	r3, #0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	20003e0c 	.word	0x20003e0c
 801208c:	40040000 	.word	0x40040000

08012090 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801209c:	2300      	movs	r3, #0
 801209e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7f2 ffce 	bl	8005048 <HAL_PCD_Start>
 80120ac:	4603      	mov	r3, r0
 80120ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120b0:	7bfb      	ldrb	r3, [r7, #15]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 f97e 	bl	80123b4 <USBD_Get_USB_Status>
 80120b8:	4603      	mov	r3, r0
 80120ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b084      	sub	sp, #16
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
 80120ce:	4608      	mov	r0, r1
 80120d0:	4611      	mov	r1, r2
 80120d2:	461a      	mov	r2, r3
 80120d4:	4603      	mov	r3, r0
 80120d6:	70fb      	strb	r3, [r7, #3]
 80120d8:	460b      	mov	r3, r1
 80120da:	70bb      	strb	r3, [r7, #2]
 80120dc:	4613      	mov	r3, r2
 80120de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80120ee:	78bb      	ldrb	r3, [r7, #2]
 80120f0:	883a      	ldrh	r2, [r7, #0]
 80120f2:	78f9      	ldrb	r1, [r7, #3]
 80120f4:	f7f3 fcbb 	bl	8005a6e <HAL_PCD_EP_Open>
 80120f8:	4603      	mov	r3, r0
 80120fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
 80120fe:	4618      	mov	r0, r3
 8012100:	f000 f958 	bl	80123b4 <USBD_Get_USB_Status>
 8012104:	4603      	mov	r3, r0
 8012106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012108:	7bbb      	ldrb	r3, [r7, #14]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	460b      	mov	r3, r1
 801211c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801211e:	2300      	movs	r3, #0
 8012120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012122:	2300      	movs	r3, #0
 8012124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801212c:	78fa      	ldrb	r2, [r7, #3]
 801212e:	4611      	mov	r1, r2
 8012130:	4618      	mov	r0, r3
 8012132:	f7f3 fd04 	bl	8005b3e <HAL_PCD_EP_Close>
 8012136:	4603      	mov	r3, r0
 8012138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801213a:	7bfb      	ldrb	r3, [r7, #15]
 801213c:	4618      	mov	r0, r3
 801213e:	f000 f939 	bl	80123b4 <USBD_Get_USB_Status>
 8012142:	4603      	mov	r3, r0
 8012144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012146:	7bbb      	ldrb	r3, [r7, #14]
}
 8012148:	4618      	mov	r0, r3
 801214a:	3710      	adds	r7, #16
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801215c:	2300      	movs	r3, #0
 801215e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012160:	2300      	movs	r3, #0
 8012162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801216a:	78fa      	ldrb	r2, [r7, #3]
 801216c:	4611      	mov	r1, r2
 801216e:	4618      	mov	r0, r3
 8012170:	f7f3 fddc 	bl	8005d2c <HAL_PCD_EP_SetStall>
 8012174:	4603      	mov	r3, r0
 8012176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012178:	7bfb      	ldrb	r3, [r7, #15]
 801217a:	4618      	mov	r0, r3
 801217c:	f000 f91a 	bl	80123b4 <USBD_Get_USB_Status>
 8012180:	4603      	mov	r3, r0
 8012182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012184:	7bbb      	ldrb	r3, [r7, #14]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3710      	adds	r7, #16
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b084      	sub	sp, #16
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
 8012196:	460b      	mov	r3, r1
 8012198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801219e:	2300      	movs	r3, #0
 80121a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80121a8:	78fa      	ldrb	r2, [r7, #3]
 80121aa:	4611      	mov	r1, r2
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f3 fe21 	bl	8005df4 <HAL_PCD_EP_ClrStall>
 80121b2:	4603      	mov	r3, r0
 80121b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121b6:	7bfb      	ldrb	r3, [r7, #15]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f000 f8fb 	bl	80123b4 <USBD_Get_USB_Status>
 80121be:	4603      	mov	r3, r0
 80121c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	460b      	mov	r3, r1
 80121d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80121de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	da0b      	bge.n	8012200 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121e8:	78fb      	ldrb	r3, [r7, #3]
 80121ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121ee:	68f9      	ldr	r1, [r7, #12]
 80121f0:	4613      	mov	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	4413      	add	r3, r2
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	440b      	add	r3, r1
 80121fa:	333e      	adds	r3, #62	; 0x3e
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	e00b      	b.n	8012218 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012200:	78fb      	ldrb	r3, [r7, #3]
 8012202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012206:	68f9      	ldr	r1, [r7, #12]
 8012208:	4613      	mov	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	4413      	add	r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	440b      	add	r3, r1
 8012212:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012216:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012218:	4618      	mov	r0, r3
 801221a:	3714      	adds	r7, #20
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr

08012224 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	460b      	mov	r3, r1
 801222e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801223e:	78fa      	ldrb	r2, [r7, #3]
 8012240:	4611      	mov	r1, r2
 8012242:	4618      	mov	r0, r3
 8012244:	f7f3 fbee 	bl	8005a24 <HAL_PCD_SetAddress>
 8012248:	4603      	mov	r3, r0
 801224a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801224c:	7bfb      	ldrb	r3, [r7, #15]
 801224e:	4618      	mov	r0, r3
 8012250:	f000 f8b0 	bl	80123b4 <USBD_Get_USB_Status>
 8012254:	4603      	mov	r3, r0
 8012256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012258:	7bbb      	ldrb	r3, [r7, #14]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b086      	sub	sp, #24
 8012266:	af00      	add	r7, sp, #0
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	607a      	str	r2, [r7, #4]
 801226c:	603b      	str	r3, [r7, #0]
 801226e:	460b      	mov	r3, r1
 8012270:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012272:	2300      	movs	r3, #0
 8012274:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012276:	2300      	movs	r3, #0
 8012278:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012280:	7af9      	ldrb	r1, [r7, #11]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	f7f3 fd07 	bl	8005c98 <HAL_PCD_EP_Transmit>
 801228a:	4603      	mov	r3, r0
 801228c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801228e:	7dfb      	ldrb	r3, [r7, #23]
 8012290:	4618      	mov	r0, r3
 8012292:	f000 f88f 	bl	80123b4 <USBD_Get_USB_Status>
 8012296:	4603      	mov	r3, r0
 8012298:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801229a:	7dbb      	ldrb	r3, [r7, #22]
}
 801229c:	4618      	mov	r0, r3
 801229e:	3718      	adds	r7, #24
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	607a      	str	r2, [r7, #4]
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	460b      	mov	r3, r1
 80122b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80122c2:	7af9      	ldrb	r1, [r7, #11]
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	f7f3 fc83 	bl	8005bd2 <HAL_PCD_EP_Receive>
 80122cc:	4603      	mov	r3, r0
 80122ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122d0:	7dfb      	ldrb	r3, [r7, #23]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f000 f86e 	bl	80123b4 <USBD_Get_USB_Status>
 80122d8:	4603      	mov	r3, r0
 80122da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3718      	adds	r7, #24
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b082      	sub	sp, #8
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
 80122ee:	460b      	mov	r3, r1
 80122f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80122f8:	78fa      	ldrb	r2, [r7, #3]
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f3 fcb3 	bl	8005c68 <HAL_PCD_EP_GetRxCount>
 8012302:	4603      	mov	r3, r0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	460b      	mov	r3, r1
 8012316:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012318:	78fb      	ldrb	r3, [r7, #3]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <HAL_PCDEx_LPM_Callback+0x18>
 801231e:	2b01      	cmp	r3, #1
 8012320:	d01f      	beq.n	8012362 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012322:	e03b      	b.n	801239c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6a1b      	ldr	r3, [r3, #32]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d007      	beq.n	801233c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801232c:	f000 f83c 	bl	80123a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012330:	4b1c      	ldr	r3, [pc, #112]	; (80123a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012332:	691b      	ldr	r3, [r3, #16]
 8012334:	4a1b      	ldr	r2, [pc, #108]	; (80123a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012336:	f023 0306 	bic.w	r3, r3, #6
 801233a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	6812      	ldr	r2, [r2, #0]
 801234a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801234e:	f023 0301 	bic.w	r3, r3, #1
 8012352:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801235a:	4618      	mov	r0, r3
 801235c:	f7fb fd83 	bl	800de66 <USBD_LL_Resume>
    break;
 8012360:	e01c      	b.n	801239c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	6812      	ldr	r2, [r2, #0]
 8012370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012374:	f043 0301 	orr.w	r3, r3, #1
 8012378:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012380:	4618      	mov	r0, r3
 8012382:	f7fb fd5a 	bl	800de3a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a1b      	ldr	r3, [r3, #32]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d005      	beq.n	801239a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801238e:	4b05      	ldr	r3, [pc, #20]	; (80123a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	4a04      	ldr	r2, [pc, #16]	; (80123a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012394:	f043 0306 	orr.w	r3, r3, #6
 8012398:	6113      	str	r3, [r2, #16]
    break;
 801239a:	bf00      	nop
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	e000ed00 	.word	0xe000ed00

080123a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80123ac:	f7ee fdd0 	bl	8000f50 <SystemClock_Config>
}
 80123b0:	bf00      	nop
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	4603      	mov	r3, r0
 80123bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d817      	bhi.n	80123f8 <USBD_Get_USB_Status+0x44>
 80123c8:	a201      	add	r2, pc, #4	; (adr r2, 80123d0 <USBD_Get_USB_Status+0x1c>)
 80123ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ce:	bf00      	nop
 80123d0:	080123e1 	.word	0x080123e1
 80123d4:	080123e7 	.word	0x080123e7
 80123d8:	080123ed 	.word	0x080123ed
 80123dc:	080123f3 	.word	0x080123f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80123e0:	2300      	movs	r3, #0
 80123e2:	73fb      	strb	r3, [r7, #15]
    break;
 80123e4:	e00b      	b.n	80123fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123e6:	2303      	movs	r3, #3
 80123e8:	73fb      	strb	r3, [r7, #15]
    break;
 80123ea:	e008      	b.n	80123fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80123ec:	2301      	movs	r3, #1
 80123ee:	73fb      	strb	r3, [r7, #15]
    break;
 80123f0:	e005      	b.n	80123fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80123f2:	2303      	movs	r3, #3
 80123f4:	73fb      	strb	r3, [r7, #15]
    break;
 80123f6:	e002      	b.n	80123fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80123f8:	2303      	movs	r3, #3
 80123fa:	73fb      	strb	r3, [r7, #15]
    break;
 80123fc:	bf00      	nop
  }
  return usb_status;
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3714      	adds	r7, #20
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012410:	2201      	movs	r2, #1
 8012412:	490e      	ldr	r1, [pc, #56]	; (801244c <MX_USB_HOST_Init+0x40>)
 8012414:	480e      	ldr	r0, [pc, #56]	; (8012450 <MX_USB_HOST_Init+0x44>)
 8012416:	f7fd f8f9 	bl	800f60c <USBH_Init>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012420:	f7ef f91a 	bl	8001658 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012424:	490b      	ldr	r1, [pc, #44]	; (8012454 <MX_USB_HOST_Init+0x48>)
 8012426:	480a      	ldr	r0, [pc, #40]	; (8012450 <MX_USB_HOST_Init+0x44>)
 8012428:	f7fd f99d 	bl	800f766 <USBH_RegisterClass>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d001      	beq.n	8012436 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012432:	f7ef f911 	bl	8001658 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012436:	4806      	ldr	r0, [pc, #24]	; (8012450 <MX_USB_HOST_Init+0x44>)
 8012438:	f7fd fa21 	bl	800f87e <USBH_Start>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012442:	f7ef f909 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012446:	bf00      	nop
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	0801246d 	.word	0x0801246d
 8012450:	20004314 	.word	0x20004314
 8012454:	20000098 	.word	0x20000098

08012458 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801245c:	4802      	ldr	r0, [pc, #8]	; (8012468 <MX_USB_HOST_Process+0x10>)
 801245e:	f7fd fa1f 	bl	800f8a0 <USBH_Process>
}
 8012462:	bf00      	nop
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	20004314 	.word	0x20004314

0801246c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012478:	78fb      	ldrb	r3, [r7, #3]
 801247a:	3b01      	subs	r3, #1
 801247c:	2b04      	cmp	r3, #4
 801247e:	d819      	bhi.n	80124b4 <USBH_UserProcess+0x48>
 8012480:	a201      	add	r2, pc, #4	; (adr r2, 8012488 <USBH_UserProcess+0x1c>)
 8012482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012486:	bf00      	nop
 8012488:	080124b5 	.word	0x080124b5
 801248c:	080124a5 	.word	0x080124a5
 8012490:	080124b5 	.word	0x080124b5
 8012494:	080124ad 	.word	0x080124ad
 8012498:	0801249d 	.word	0x0801249d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801249c:	4b09      	ldr	r3, [pc, #36]	; (80124c4 <USBH_UserProcess+0x58>)
 801249e:	2203      	movs	r2, #3
 80124a0:	701a      	strb	r2, [r3, #0]
  break;
 80124a2:	e008      	b.n	80124b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80124a4:	4b07      	ldr	r3, [pc, #28]	; (80124c4 <USBH_UserProcess+0x58>)
 80124a6:	2202      	movs	r2, #2
 80124a8:	701a      	strb	r2, [r3, #0]
  break;
 80124aa:	e004      	b.n	80124b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80124ac:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <USBH_UserProcess+0x58>)
 80124ae:	2201      	movs	r2, #1
 80124b0:	701a      	strb	r2, [r3, #0]
  break;
 80124b2:	e000      	b.n	80124b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80124b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80124b6:	bf00      	nop
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop
 80124c4:	200046ec 	.word	0x200046ec

080124c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b0ac      	sub	sp, #176	; 0xb0
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	605a      	str	r2, [r3, #4]
 80124da:	609a      	str	r2, [r3, #8]
 80124dc:	60da      	str	r2, [r3, #12]
 80124de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80124e0:	f107 0318 	add.w	r3, r7, #24
 80124e4:	2284      	movs	r2, #132	; 0x84
 80124e6:	2100      	movs	r1, #0
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 fae1 	bl	8012ab0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80124f6:	d151      	bne.n	801259c <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80124f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80124fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80124fe:	2300      	movs	r3, #0
 8012500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012504:	f107 0318 	add.w	r3, r7, #24
 8012508:	4618      	mov	r0, r3
 801250a:	f7f4 fc59 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d001      	beq.n	8012518 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8012514:	f7ef f8a0 	bl	8001658 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012518:	4b22      	ldr	r3, [pc, #136]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 801251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251c:	4a21      	ldr	r2, [pc, #132]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 801251e:	f043 0301 	orr.w	r3, r3, #1
 8012522:	6313      	str	r3, [r2, #48]	; 0x30
 8012524:	4b1f      	ldr	r3, [pc, #124]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 8012526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012528:	f003 0301 	and.w	r3, r3, #1
 801252c:	617b      	str	r3, [r7, #20]
 801252e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8012530:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012538:	2302      	movs	r3, #2
 801253a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801253e:	2300      	movs	r3, #0
 8012540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012544:	2303      	movs	r3, #3
 8012546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801254a:	230a      	movs	r3, #10
 801254c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012554:	4619      	mov	r1, r3
 8012556:	4814      	ldr	r0, [pc, #80]	; (80125a8 <HAL_HCD_MspInit+0xe0>)
 8012558:	f7f0 fd20 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801255c:	4b11      	ldr	r3, [pc, #68]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 801255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012560:	4a10      	ldr	r2, [pc, #64]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 8012562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012566:	6353      	str	r3, [r2, #52]	; 0x34
 8012568:	4b0e      	ldr	r3, [pc, #56]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 801256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012570:	613b      	str	r3, [r7, #16]
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	4b0b      	ldr	r3, [pc, #44]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 8012576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012578:	4a0a      	ldr	r2, [pc, #40]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 801257a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801257e:	6453      	str	r3, [r2, #68]	; 0x44
 8012580:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <HAL_HCD_MspInit+0xdc>)
 8012582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012588:	60fb      	str	r3, [r7, #12]
 801258a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801258c:	2200      	movs	r2, #0
 801258e:	2100      	movs	r1, #0
 8012590:	2043      	movs	r0, #67	; 0x43
 8012592:	f7f0 f9e2 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012596:	2043      	movs	r0, #67	; 0x43
 8012598:	f7f0 f9fb 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801259c:	bf00      	nop
 801259e:	37b0      	adds	r7, #176	; 0xb0
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	40023800 	.word	0x40023800
 80125a8:	40020000 	.word	0x40020000

080125ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fd fd4f 	bl	801005e <USBH_LL_IncTimer>
}
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd fd87 	bl	80100ea <USBH_LL_Connect>
}
 80125dc:	bf00      	nop
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fd fd90 	bl	8010118 <USBH_LL_Disconnect>
}
 80125f8:	bf00      	nop
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	460b      	mov	r3, r1
 801260a:	70fb      	strb	r3, [r7, #3]
 801260c:	4613      	mov	r3, r2
 801260e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012610:	bf00      	nop
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801262a:	4618      	mov	r0, r3
 801262c:	f7fd fd41 	bl	80100b2 <USBH_LL_PortEnabled>
}
 8012630:	bf00      	nop
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012646:	4618      	mov	r0, r3
 8012648:	f7fd fd41 	bl	80100ce <USBH_LL_PortDisabled>
}
 801264c:	bf00      	nop
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012662:	2b01      	cmp	r3, #1
 8012664:	d12a      	bne.n	80126bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012666:	4a18      	ldr	r2, [pc, #96]	; (80126c8 <USBH_LL_Init+0x74>)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4a15      	ldr	r2, [pc, #84]	; (80126c8 <USBH_LL_Init+0x74>)
 8012672:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012676:	4b14      	ldr	r3, [pc, #80]	; (80126c8 <USBH_LL_Init+0x74>)
 8012678:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801267c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801267e:	4b12      	ldr	r3, [pc, #72]	; (80126c8 <USBH_LL_Init+0x74>)
 8012680:	2208      	movs	r2, #8
 8012682:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012684:	4b10      	ldr	r3, [pc, #64]	; (80126c8 <USBH_LL_Init+0x74>)
 8012686:	2201      	movs	r2, #1
 8012688:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801268a:	4b0f      	ldr	r3, [pc, #60]	; (80126c8 <USBH_LL_Init+0x74>)
 801268c:	2200      	movs	r2, #0
 801268e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012690:	4b0d      	ldr	r3, [pc, #52]	; (80126c8 <USBH_LL_Init+0x74>)
 8012692:	2202      	movs	r2, #2
 8012694:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012696:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <USBH_LL_Init+0x74>)
 8012698:	2200      	movs	r2, #0
 801269a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801269c:	480a      	ldr	r0, [pc, #40]	; (80126c8 <USBH_LL_Init+0x74>)
 801269e:	f7f0 fe74 	bl	800338a <HAL_HCD_Init>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80126a8:	f7ee ffd6 	bl	8001658 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80126ac:	4806      	ldr	r0, [pc, #24]	; (80126c8 <USBH_LL_Init+0x74>)
 80126ae:	f7f1 fa58 	bl	8003b62 <HAL_HCD_GetCurrentFrame>
 80126b2:	4603      	mov	r3, r0
 80126b4:	4619      	mov	r1, r3
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f7fd fcc2 	bl	8010040 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	200046f0 	.word	0x200046f0

080126cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f1 f9c7 	bl	8003a76 <HAL_HCD_Start>
 80126e8:	4603      	mov	r3, r0
 80126ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f000 f95c 	bl	80129ac <USBH_Get_USB_Status>
 80126f4:	4603      	mov	r3, r0
 80126f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b084      	sub	sp, #16
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801270a:	2300      	movs	r3, #0
 801270c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012718:	4618      	mov	r0, r3
 801271a:	f7f1 f9cf 	bl	8003abc <HAL_HCD_Stop>
 801271e:	4603      	mov	r3, r0
 8012720:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012722:	7bfb      	ldrb	r3, [r7, #15]
 8012724:	4618      	mov	r0, r3
 8012726:	f000 f941 	bl	80129ac <USBH_Get_USB_Status>
 801272a:	4603      	mov	r3, r0
 801272c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801272e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012730:	4618      	mov	r0, r3
 8012732:	3710      	adds	r7, #16
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012740:	2301      	movs	r3, #1
 8012742:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801274a:	4618      	mov	r0, r3
 801274c:	f7f1 fa17 	bl	8003b7e <HAL_HCD_GetCurrentSpeed>
 8012750:	4603      	mov	r3, r0
 8012752:	2b02      	cmp	r3, #2
 8012754:	d00c      	beq.n	8012770 <USBH_LL_GetSpeed+0x38>
 8012756:	2b02      	cmp	r3, #2
 8012758:	d80d      	bhi.n	8012776 <USBH_LL_GetSpeed+0x3e>
 801275a:	2b00      	cmp	r3, #0
 801275c:	d002      	beq.n	8012764 <USBH_LL_GetSpeed+0x2c>
 801275e:	2b01      	cmp	r3, #1
 8012760:	d003      	beq.n	801276a <USBH_LL_GetSpeed+0x32>
 8012762:	e008      	b.n	8012776 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012764:	2300      	movs	r3, #0
 8012766:	73fb      	strb	r3, [r7, #15]
    break;
 8012768:	e008      	b.n	801277c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801276a:	2301      	movs	r3, #1
 801276c:	73fb      	strb	r3, [r7, #15]
    break;
 801276e:	e005      	b.n	801277c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012770:	2302      	movs	r3, #2
 8012772:	73fb      	strb	r3, [r7, #15]
    break;
 8012774:	e002      	b.n	801277c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012776:	2301      	movs	r3, #1
 8012778:	73fb      	strb	r3, [r7, #15]
    break;
 801277a:	bf00      	nop
  }
  return  speed;
 801277c:	7bfb      	ldrb	r3, [r7, #15]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012786:	b580      	push	{r7, lr}
 8012788:	b084      	sub	sp, #16
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801278e:	2300      	movs	r3, #0
 8012790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801279c:	4618      	mov	r0, r3
 801279e:	f7f1 f9aa 	bl	8003af6 <HAL_HCD_ResetPort>
 80127a2:	4603      	mov	r3, r0
 80127a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f000 f8ff 	bl	80129ac <USBH_Get_USB_Status>
 80127ae:	4603      	mov	r3, r0
 80127b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3710      	adds	r7, #16
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	460b      	mov	r3, r1
 80127c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127ce:	78fa      	ldrb	r2, [r7, #3]
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f1 f9b1 	bl	8003b3a <HAL_HCD_HC_GetXferCount>
 80127d8:	4603      	mov	r3, r0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80127e2:	b590      	push	{r4, r7, lr}
 80127e4:	b089      	sub	sp, #36	; 0x24
 80127e6:	af04      	add	r7, sp, #16
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	4608      	mov	r0, r1
 80127ec:	4611      	mov	r1, r2
 80127ee:	461a      	mov	r2, r3
 80127f0:	4603      	mov	r3, r0
 80127f2:	70fb      	strb	r3, [r7, #3]
 80127f4:	460b      	mov	r3, r1
 80127f6:	70bb      	strb	r3, [r7, #2]
 80127f8:	4613      	mov	r3, r2
 80127fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127fc:	2300      	movs	r3, #0
 80127fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012800:	2300      	movs	r3, #0
 8012802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801280a:	787c      	ldrb	r4, [r7, #1]
 801280c:	78ba      	ldrb	r2, [r7, #2]
 801280e:	78f9      	ldrb	r1, [r7, #3]
 8012810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012812:	9302      	str	r3, [sp, #8]
 8012814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012818:	9301      	str	r3, [sp, #4]
 801281a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	4623      	mov	r3, r4
 8012822:	f7f0 fe14 	bl	800344e <HAL_HCD_HC_Init>
 8012826:	4603      	mov	r3, r0
 8012828:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801282a:	7bfb      	ldrb	r3, [r7, #15]
 801282c:	4618      	mov	r0, r3
 801282e:	f000 f8bd 	bl	80129ac <USBH_Get_USB_Status>
 8012832:	4603      	mov	r3, r0
 8012834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012836:	7bbb      	ldrb	r3, [r7, #14]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3714      	adds	r7, #20
 801283c:	46bd      	mov	sp, r7
 801283e:	bd90      	pop	{r4, r7, pc}

08012840 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801284c:	2300      	movs	r3, #0
 801284e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012850:	2300      	movs	r3, #0
 8012852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801285a:	78fa      	ldrb	r2, [r7, #3]
 801285c:	4611      	mov	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	f7f0 fe84 	bl	800356c <HAL_HCD_HC_Halt>
 8012864:	4603      	mov	r3, r0
 8012866:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	4618      	mov	r0, r3
 801286c:	f000 f89e 	bl	80129ac <USBH_Get_USB_Status>
 8012870:	4603      	mov	r3, r0
 8012872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012874:	7bbb      	ldrb	r3, [r7, #14]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801287e:	b590      	push	{r4, r7, lr}
 8012880:	b089      	sub	sp, #36	; 0x24
 8012882:	af04      	add	r7, sp, #16
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	4608      	mov	r0, r1
 8012888:	4611      	mov	r1, r2
 801288a:	461a      	mov	r2, r3
 801288c:	4603      	mov	r3, r0
 801288e:	70fb      	strb	r3, [r7, #3]
 8012890:	460b      	mov	r3, r1
 8012892:	70bb      	strb	r3, [r7, #2]
 8012894:	4613      	mov	r3, r2
 8012896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80128a6:	787c      	ldrb	r4, [r7, #1]
 80128a8:	78ba      	ldrb	r2, [r7, #2]
 80128aa:	78f9      	ldrb	r1, [r7, #3]
 80128ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128b0:	9303      	str	r3, [sp, #12]
 80128b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80128b4:	9302      	str	r3, [sp, #8]
 80128b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	4623      	mov	r3, r4
 80128c2:	f7f0 fe77 	bl	80035b4 <HAL_HCD_HC_SubmitRequest>
 80128c6:	4603      	mov	r3, r0
 80128c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 f86d 	bl	80129ac <USBH_Get_USB_Status>
 80128d2:	4603      	mov	r3, r0
 80128d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3714      	adds	r7, #20
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd90      	pop	{r4, r7, pc}

080128e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	460b      	mov	r3, r1
 80128ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128f2:	78fa      	ldrb	r2, [r7, #3]
 80128f4:	4611      	mov	r1, r2
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7f1 f90b 	bl	8003b12 <HAL_HCD_HC_GetURBState>
 80128fc:	4603      	mov	r3, r0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b082      	sub	sp, #8
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	460b      	mov	r3, r1
 8012910:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012918:	2b01      	cmp	r3, #1
 801291a:	d103      	bne.n	8012924 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801291c:	78fb      	ldrb	r3, [r7, #3]
 801291e:	4618      	mov	r0, r3
 8012920:	f000 f870 	bl	8012a04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012924:	20c8      	movs	r0, #200	; 0xc8
 8012926:	f7ef fc85 	bl	8002234 <HAL_Delay>
  return USBH_OK;
 801292a:	2300      	movs	r3, #0
}
 801292c:	4618      	mov	r0, r3
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012934:	b480      	push	{r7}
 8012936:	b085      	sub	sp, #20
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	70fb      	strb	r3, [r7, #3]
 8012940:	4613      	mov	r3, r2
 8012942:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801294a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801294c:	78fb      	ldrb	r3, [r7, #3]
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	212c      	movs	r1, #44	; 0x2c
 8012952:	fb01 f303 	mul.w	r3, r1, r3
 8012956:	4413      	add	r3, r2
 8012958:	333b      	adds	r3, #59	; 0x3b
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d009      	beq.n	8012974 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012960:	78fb      	ldrb	r3, [r7, #3]
 8012962:	68fa      	ldr	r2, [r7, #12]
 8012964:	212c      	movs	r1, #44	; 0x2c
 8012966:	fb01 f303 	mul.w	r3, r1, r3
 801296a:	4413      	add	r3, r2
 801296c:	3354      	adds	r3, #84	; 0x54
 801296e:	78ba      	ldrb	r2, [r7, #2]
 8012970:	701a      	strb	r2, [r3, #0]
 8012972:	e008      	b.n	8012986 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012974:	78fb      	ldrb	r3, [r7, #3]
 8012976:	68fa      	ldr	r2, [r7, #12]
 8012978:	212c      	movs	r1, #44	; 0x2c
 801297a:	fb01 f303 	mul.w	r3, r1, r3
 801297e:	4413      	add	r3, r2
 8012980:	3355      	adds	r3, #85	; 0x55
 8012982:	78ba      	ldrb	r2, [r7, #2]
 8012984:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012986:	2300      	movs	r3, #0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3714      	adds	r7, #20
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7ef fc49 	bl	8002234 <HAL_Delay>
}
 80129a2:	bf00      	nop
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
	...

080129ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b085      	sub	sp, #20
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129b6:	2300      	movs	r3, #0
 80129b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	2b03      	cmp	r3, #3
 80129be:	d817      	bhi.n	80129f0 <USBH_Get_USB_Status+0x44>
 80129c0:	a201      	add	r2, pc, #4	; (adr r2, 80129c8 <USBH_Get_USB_Status+0x1c>)
 80129c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c6:	bf00      	nop
 80129c8:	080129d9 	.word	0x080129d9
 80129cc:	080129df 	.word	0x080129df
 80129d0:	080129e5 	.word	0x080129e5
 80129d4:	080129eb 	.word	0x080129eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80129d8:	2300      	movs	r3, #0
 80129da:	73fb      	strb	r3, [r7, #15]
    break;
 80129dc:	e00b      	b.n	80129f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80129de:	2302      	movs	r3, #2
 80129e0:	73fb      	strb	r3, [r7, #15]
    break;
 80129e2:	e008      	b.n	80129f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80129e4:	2301      	movs	r3, #1
 80129e6:	73fb      	strb	r3, [r7, #15]
    break;
 80129e8:	e005      	b.n	80129f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80129ea:	2302      	movs	r3, #2
 80129ec:	73fb      	strb	r3, [r7, #15]
    break;
 80129ee:	e002      	b.n	80129f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80129f0:	2302      	movs	r3, #2
 80129f2:	73fb      	strb	r3, [r7, #15]
    break;
 80129f4:	bf00      	nop
  }
  return usb_status;
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3714      	adds	r7, #20
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr

08012a04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012a0e:	79fb      	ldrb	r3, [r7, #7]
 8012a10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012a12:	79fb      	ldrb	r3, [r7, #7]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d102      	bne.n	8012a1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	73fb      	strb	r3, [r7, #15]
 8012a1c:	e001      	b.n	8012a22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8012a22:	7bfb      	ldrb	r3, [r7, #15]
 8012a24:	461a      	mov	r2, r3
 8012a26:	2104      	movs	r1, #4
 8012a28:	4803      	ldr	r0, [pc, #12]	; (8012a38 <MX_DriverVbusFS+0x34>)
 8012a2a:	f7f0 fc7b 	bl	8003324 <HAL_GPIO_WritePin>
}
 8012a2e:	bf00      	nop
 8012a30:	3710      	adds	r7, #16
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	40022000 	.word	0x40022000

08012a3c <__errno>:
 8012a3c:	4b01      	ldr	r3, [pc, #4]	; (8012a44 <__errno+0x8>)
 8012a3e:	6818      	ldr	r0, [r3, #0]
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	2000012c 	.word	0x2000012c

08012a48 <__libc_init_array>:
 8012a48:	b570      	push	{r4, r5, r6, lr}
 8012a4a:	4d0d      	ldr	r5, [pc, #52]	; (8012a80 <__libc_init_array+0x38>)
 8012a4c:	4c0d      	ldr	r4, [pc, #52]	; (8012a84 <__libc_init_array+0x3c>)
 8012a4e:	1b64      	subs	r4, r4, r5
 8012a50:	10a4      	asrs	r4, r4, #2
 8012a52:	2600      	movs	r6, #0
 8012a54:	42a6      	cmp	r6, r4
 8012a56:	d109      	bne.n	8012a6c <__libc_init_array+0x24>
 8012a58:	4d0b      	ldr	r5, [pc, #44]	; (8012a88 <__libc_init_array+0x40>)
 8012a5a:	4c0c      	ldr	r4, [pc, #48]	; (8012a8c <__libc_init_array+0x44>)
 8012a5c:	f002 ff0c 	bl	8015878 <_init>
 8012a60:	1b64      	subs	r4, r4, r5
 8012a62:	10a4      	asrs	r4, r4, #2
 8012a64:	2600      	movs	r6, #0
 8012a66:	42a6      	cmp	r6, r4
 8012a68:	d105      	bne.n	8012a76 <__libc_init_array+0x2e>
 8012a6a:	bd70      	pop	{r4, r5, r6, pc}
 8012a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a70:	4798      	blx	r3
 8012a72:	3601      	adds	r6, #1
 8012a74:	e7ee      	b.n	8012a54 <__libc_init_array+0xc>
 8012a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a7a:	4798      	blx	r3
 8012a7c:	3601      	adds	r6, #1
 8012a7e:	e7f2      	b.n	8012a66 <__libc_init_array+0x1e>
 8012a80:	08016154 	.word	0x08016154
 8012a84:	08016154 	.word	0x08016154
 8012a88:	08016154 	.word	0x08016154
 8012a8c:	08016158 	.word	0x08016158

08012a90 <malloc>:
 8012a90:	4b02      	ldr	r3, [pc, #8]	; (8012a9c <malloc+0xc>)
 8012a92:	4601      	mov	r1, r0
 8012a94:	6818      	ldr	r0, [r3, #0]
 8012a96:	f000 b87f 	b.w	8012b98 <_malloc_r>
 8012a9a:	bf00      	nop
 8012a9c:	2000012c 	.word	0x2000012c

08012aa0 <free>:
 8012aa0:	4b02      	ldr	r3, [pc, #8]	; (8012aac <free+0xc>)
 8012aa2:	4601      	mov	r1, r0
 8012aa4:	6818      	ldr	r0, [r3, #0]
 8012aa6:	f000 b80b 	b.w	8012ac0 <_free_r>
 8012aaa:	bf00      	nop
 8012aac:	2000012c 	.word	0x2000012c

08012ab0 <memset>:
 8012ab0:	4402      	add	r2, r0
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d100      	bne.n	8012aba <memset+0xa>
 8012ab8:	4770      	bx	lr
 8012aba:	f803 1b01 	strb.w	r1, [r3], #1
 8012abe:	e7f9      	b.n	8012ab4 <memset+0x4>

08012ac0 <_free_r>:
 8012ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ac2:	2900      	cmp	r1, #0
 8012ac4:	d044      	beq.n	8012b50 <_free_r+0x90>
 8012ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012aca:	9001      	str	r0, [sp, #4]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f1a1 0404 	sub.w	r4, r1, #4
 8012ad2:	bfb8      	it	lt
 8012ad4:	18e4      	addlt	r4, r4, r3
 8012ad6:	f001 fbfb 	bl	80142d0 <__malloc_lock>
 8012ada:	4a1e      	ldr	r2, [pc, #120]	; (8012b54 <_free_r+0x94>)
 8012adc:	9801      	ldr	r0, [sp, #4]
 8012ade:	6813      	ldr	r3, [r2, #0]
 8012ae0:	b933      	cbnz	r3, 8012af0 <_free_r+0x30>
 8012ae2:	6063      	str	r3, [r4, #4]
 8012ae4:	6014      	str	r4, [r2, #0]
 8012ae6:	b003      	add	sp, #12
 8012ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aec:	f001 bbf6 	b.w	80142dc <__malloc_unlock>
 8012af0:	42a3      	cmp	r3, r4
 8012af2:	d908      	bls.n	8012b06 <_free_r+0x46>
 8012af4:	6825      	ldr	r5, [r4, #0]
 8012af6:	1961      	adds	r1, r4, r5
 8012af8:	428b      	cmp	r3, r1
 8012afa:	bf01      	itttt	eq
 8012afc:	6819      	ldreq	r1, [r3, #0]
 8012afe:	685b      	ldreq	r3, [r3, #4]
 8012b00:	1949      	addeq	r1, r1, r5
 8012b02:	6021      	streq	r1, [r4, #0]
 8012b04:	e7ed      	b.n	8012ae2 <_free_r+0x22>
 8012b06:	461a      	mov	r2, r3
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	b10b      	cbz	r3, 8012b10 <_free_r+0x50>
 8012b0c:	42a3      	cmp	r3, r4
 8012b0e:	d9fa      	bls.n	8012b06 <_free_r+0x46>
 8012b10:	6811      	ldr	r1, [r2, #0]
 8012b12:	1855      	adds	r5, r2, r1
 8012b14:	42a5      	cmp	r5, r4
 8012b16:	d10b      	bne.n	8012b30 <_free_r+0x70>
 8012b18:	6824      	ldr	r4, [r4, #0]
 8012b1a:	4421      	add	r1, r4
 8012b1c:	1854      	adds	r4, r2, r1
 8012b1e:	42a3      	cmp	r3, r4
 8012b20:	6011      	str	r1, [r2, #0]
 8012b22:	d1e0      	bne.n	8012ae6 <_free_r+0x26>
 8012b24:	681c      	ldr	r4, [r3, #0]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	6053      	str	r3, [r2, #4]
 8012b2a:	4421      	add	r1, r4
 8012b2c:	6011      	str	r1, [r2, #0]
 8012b2e:	e7da      	b.n	8012ae6 <_free_r+0x26>
 8012b30:	d902      	bls.n	8012b38 <_free_r+0x78>
 8012b32:	230c      	movs	r3, #12
 8012b34:	6003      	str	r3, [r0, #0]
 8012b36:	e7d6      	b.n	8012ae6 <_free_r+0x26>
 8012b38:	6825      	ldr	r5, [r4, #0]
 8012b3a:	1961      	adds	r1, r4, r5
 8012b3c:	428b      	cmp	r3, r1
 8012b3e:	bf04      	itt	eq
 8012b40:	6819      	ldreq	r1, [r3, #0]
 8012b42:	685b      	ldreq	r3, [r3, #4]
 8012b44:	6063      	str	r3, [r4, #4]
 8012b46:	bf04      	itt	eq
 8012b48:	1949      	addeq	r1, r1, r5
 8012b4a:	6021      	streq	r1, [r4, #0]
 8012b4c:	6054      	str	r4, [r2, #4]
 8012b4e:	e7ca      	b.n	8012ae6 <_free_r+0x26>
 8012b50:	b003      	add	sp, #12
 8012b52:	bd30      	pop	{r4, r5, pc}
 8012b54:	200049f4 	.word	0x200049f4

08012b58 <sbrk_aligned>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4e0e      	ldr	r6, [pc, #56]	; (8012b94 <sbrk_aligned+0x3c>)
 8012b5c:	460c      	mov	r4, r1
 8012b5e:	6831      	ldr	r1, [r6, #0]
 8012b60:	4605      	mov	r5, r0
 8012b62:	b911      	cbnz	r1, 8012b6a <sbrk_aligned+0x12>
 8012b64:	f000 fcf6 	bl	8013554 <_sbrk_r>
 8012b68:	6030      	str	r0, [r6, #0]
 8012b6a:	4621      	mov	r1, r4
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f000 fcf1 	bl	8013554 <_sbrk_r>
 8012b72:	1c43      	adds	r3, r0, #1
 8012b74:	d00a      	beq.n	8012b8c <sbrk_aligned+0x34>
 8012b76:	1cc4      	adds	r4, r0, #3
 8012b78:	f024 0403 	bic.w	r4, r4, #3
 8012b7c:	42a0      	cmp	r0, r4
 8012b7e:	d007      	beq.n	8012b90 <sbrk_aligned+0x38>
 8012b80:	1a21      	subs	r1, r4, r0
 8012b82:	4628      	mov	r0, r5
 8012b84:	f000 fce6 	bl	8013554 <_sbrk_r>
 8012b88:	3001      	adds	r0, #1
 8012b8a:	d101      	bne.n	8012b90 <sbrk_aligned+0x38>
 8012b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8012b90:	4620      	mov	r0, r4
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	200049f8 	.word	0x200049f8

08012b98 <_malloc_r>:
 8012b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	1ccd      	adds	r5, r1, #3
 8012b9e:	f025 0503 	bic.w	r5, r5, #3
 8012ba2:	3508      	adds	r5, #8
 8012ba4:	2d0c      	cmp	r5, #12
 8012ba6:	bf38      	it	cc
 8012ba8:	250c      	movcc	r5, #12
 8012baa:	2d00      	cmp	r5, #0
 8012bac:	4607      	mov	r7, r0
 8012bae:	db01      	blt.n	8012bb4 <_malloc_r+0x1c>
 8012bb0:	42a9      	cmp	r1, r5
 8012bb2:	d905      	bls.n	8012bc0 <_malloc_r+0x28>
 8012bb4:	230c      	movs	r3, #12
 8012bb6:	603b      	str	r3, [r7, #0]
 8012bb8:	2600      	movs	r6, #0
 8012bba:	4630      	mov	r0, r6
 8012bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc0:	4e2e      	ldr	r6, [pc, #184]	; (8012c7c <_malloc_r+0xe4>)
 8012bc2:	f001 fb85 	bl	80142d0 <__malloc_lock>
 8012bc6:	6833      	ldr	r3, [r6, #0]
 8012bc8:	461c      	mov	r4, r3
 8012bca:	bb34      	cbnz	r4, 8012c1a <_malloc_r+0x82>
 8012bcc:	4629      	mov	r1, r5
 8012bce:	4638      	mov	r0, r7
 8012bd0:	f7ff ffc2 	bl	8012b58 <sbrk_aligned>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	d14d      	bne.n	8012c76 <_malloc_r+0xde>
 8012bda:	6834      	ldr	r4, [r6, #0]
 8012bdc:	4626      	mov	r6, r4
 8012bde:	2e00      	cmp	r6, #0
 8012be0:	d140      	bne.n	8012c64 <_malloc_r+0xcc>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	4631      	mov	r1, r6
 8012be6:	4638      	mov	r0, r7
 8012be8:	eb04 0803 	add.w	r8, r4, r3
 8012bec:	f000 fcb2 	bl	8013554 <_sbrk_r>
 8012bf0:	4580      	cmp	r8, r0
 8012bf2:	d13a      	bne.n	8012c6a <_malloc_r+0xd2>
 8012bf4:	6821      	ldr	r1, [r4, #0]
 8012bf6:	3503      	adds	r5, #3
 8012bf8:	1a6d      	subs	r5, r5, r1
 8012bfa:	f025 0503 	bic.w	r5, r5, #3
 8012bfe:	3508      	adds	r5, #8
 8012c00:	2d0c      	cmp	r5, #12
 8012c02:	bf38      	it	cc
 8012c04:	250c      	movcc	r5, #12
 8012c06:	4629      	mov	r1, r5
 8012c08:	4638      	mov	r0, r7
 8012c0a:	f7ff ffa5 	bl	8012b58 <sbrk_aligned>
 8012c0e:	3001      	adds	r0, #1
 8012c10:	d02b      	beq.n	8012c6a <_malloc_r+0xd2>
 8012c12:	6823      	ldr	r3, [r4, #0]
 8012c14:	442b      	add	r3, r5
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	e00e      	b.n	8012c38 <_malloc_r+0xa0>
 8012c1a:	6822      	ldr	r2, [r4, #0]
 8012c1c:	1b52      	subs	r2, r2, r5
 8012c1e:	d41e      	bmi.n	8012c5e <_malloc_r+0xc6>
 8012c20:	2a0b      	cmp	r2, #11
 8012c22:	d916      	bls.n	8012c52 <_malloc_r+0xba>
 8012c24:	1961      	adds	r1, r4, r5
 8012c26:	42a3      	cmp	r3, r4
 8012c28:	6025      	str	r5, [r4, #0]
 8012c2a:	bf18      	it	ne
 8012c2c:	6059      	strne	r1, [r3, #4]
 8012c2e:	6863      	ldr	r3, [r4, #4]
 8012c30:	bf08      	it	eq
 8012c32:	6031      	streq	r1, [r6, #0]
 8012c34:	5162      	str	r2, [r4, r5]
 8012c36:	604b      	str	r3, [r1, #4]
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f104 060b 	add.w	r6, r4, #11
 8012c3e:	f001 fb4d 	bl	80142dc <__malloc_unlock>
 8012c42:	f026 0607 	bic.w	r6, r6, #7
 8012c46:	1d23      	adds	r3, r4, #4
 8012c48:	1af2      	subs	r2, r6, r3
 8012c4a:	d0b6      	beq.n	8012bba <_malloc_r+0x22>
 8012c4c:	1b9b      	subs	r3, r3, r6
 8012c4e:	50a3      	str	r3, [r4, r2]
 8012c50:	e7b3      	b.n	8012bba <_malloc_r+0x22>
 8012c52:	6862      	ldr	r2, [r4, #4]
 8012c54:	42a3      	cmp	r3, r4
 8012c56:	bf0c      	ite	eq
 8012c58:	6032      	streq	r2, [r6, #0]
 8012c5a:	605a      	strne	r2, [r3, #4]
 8012c5c:	e7ec      	b.n	8012c38 <_malloc_r+0xa0>
 8012c5e:	4623      	mov	r3, r4
 8012c60:	6864      	ldr	r4, [r4, #4]
 8012c62:	e7b2      	b.n	8012bca <_malloc_r+0x32>
 8012c64:	4634      	mov	r4, r6
 8012c66:	6876      	ldr	r6, [r6, #4]
 8012c68:	e7b9      	b.n	8012bde <_malloc_r+0x46>
 8012c6a:	230c      	movs	r3, #12
 8012c6c:	603b      	str	r3, [r7, #0]
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f001 fb34 	bl	80142dc <__malloc_unlock>
 8012c74:	e7a1      	b.n	8012bba <_malloc_r+0x22>
 8012c76:	6025      	str	r5, [r4, #0]
 8012c78:	e7de      	b.n	8012c38 <_malloc_r+0xa0>
 8012c7a:	bf00      	nop
 8012c7c:	200049f4 	.word	0x200049f4

08012c80 <__cvt>:
 8012c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c84:	ec55 4b10 	vmov	r4, r5, d0
 8012c88:	2d00      	cmp	r5, #0
 8012c8a:	460e      	mov	r6, r1
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	462b      	mov	r3, r5
 8012c90:	bfbb      	ittet	lt
 8012c92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012c96:	461d      	movlt	r5, r3
 8012c98:	2300      	movge	r3, #0
 8012c9a:	232d      	movlt	r3, #45	; 0x2d
 8012c9c:	700b      	strb	r3, [r1, #0]
 8012c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012ca4:	4691      	mov	r9, r2
 8012ca6:	f023 0820 	bic.w	r8, r3, #32
 8012caa:	bfbc      	itt	lt
 8012cac:	4622      	movlt	r2, r4
 8012cae:	4614      	movlt	r4, r2
 8012cb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012cb4:	d005      	beq.n	8012cc2 <__cvt+0x42>
 8012cb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012cba:	d100      	bne.n	8012cbe <__cvt+0x3e>
 8012cbc:	3601      	adds	r6, #1
 8012cbe:	2102      	movs	r1, #2
 8012cc0:	e000      	b.n	8012cc4 <__cvt+0x44>
 8012cc2:	2103      	movs	r1, #3
 8012cc4:	ab03      	add	r3, sp, #12
 8012cc6:	9301      	str	r3, [sp, #4]
 8012cc8:	ab02      	add	r3, sp, #8
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	ec45 4b10 	vmov	d0, r4, r5
 8012cd0:	4653      	mov	r3, sl
 8012cd2:	4632      	mov	r2, r6
 8012cd4:	f000 fcfc 	bl	80136d0 <_dtoa_r>
 8012cd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012cdc:	4607      	mov	r7, r0
 8012cde:	d102      	bne.n	8012ce6 <__cvt+0x66>
 8012ce0:	f019 0f01 	tst.w	r9, #1
 8012ce4:	d022      	beq.n	8012d2c <__cvt+0xac>
 8012ce6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012cea:	eb07 0906 	add.w	r9, r7, r6
 8012cee:	d110      	bne.n	8012d12 <__cvt+0x92>
 8012cf0:	783b      	ldrb	r3, [r7, #0]
 8012cf2:	2b30      	cmp	r3, #48	; 0x30
 8012cf4:	d10a      	bne.n	8012d0c <__cvt+0x8c>
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	f7ed ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8012d02:	b918      	cbnz	r0, 8012d0c <__cvt+0x8c>
 8012d04:	f1c6 0601 	rsb	r6, r6, #1
 8012d08:	f8ca 6000 	str.w	r6, [sl]
 8012d0c:	f8da 3000 	ldr.w	r3, [sl]
 8012d10:	4499      	add	r9, r3
 8012d12:	2200      	movs	r2, #0
 8012d14:	2300      	movs	r3, #0
 8012d16:	4620      	mov	r0, r4
 8012d18:	4629      	mov	r1, r5
 8012d1a:	f7ed fef5 	bl	8000b08 <__aeabi_dcmpeq>
 8012d1e:	b108      	cbz	r0, 8012d24 <__cvt+0xa4>
 8012d20:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d24:	2230      	movs	r2, #48	; 0x30
 8012d26:	9b03      	ldr	r3, [sp, #12]
 8012d28:	454b      	cmp	r3, r9
 8012d2a:	d307      	bcc.n	8012d3c <__cvt+0xbc>
 8012d2c:	9b03      	ldr	r3, [sp, #12]
 8012d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d30:	1bdb      	subs	r3, r3, r7
 8012d32:	4638      	mov	r0, r7
 8012d34:	6013      	str	r3, [r2, #0]
 8012d36:	b004      	add	sp, #16
 8012d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d3c:	1c59      	adds	r1, r3, #1
 8012d3e:	9103      	str	r1, [sp, #12]
 8012d40:	701a      	strb	r2, [r3, #0]
 8012d42:	e7f0      	b.n	8012d26 <__cvt+0xa6>

08012d44 <__exponent>:
 8012d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d46:	4603      	mov	r3, r0
 8012d48:	2900      	cmp	r1, #0
 8012d4a:	bfb8      	it	lt
 8012d4c:	4249      	neglt	r1, r1
 8012d4e:	f803 2b02 	strb.w	r2, [r3], #2
 8012d52:	bfb4      	ite	lt
 8012d54:	222d      	movlt	r2, #45	; 0x2d
 8012d56:	222b      	movge	r2, #43	; 0x2b
 8012d58:	2909      	cmp	r1, #9
 8012d5a:	7042      	strb	r2, [r0, #1]
 8012d5c:	dd2a      	ble.n	8012db4 <__exponent+0x70>
 8012d5e:	f10d 0407 	add.w	r4, sp, #7
 8012d62:	46a4      	mov	ip, r4
 8012d64:	270a      	movs	r7, #10
 8012d66:	46a6      	mov	lr, r4
 8012d68:	460a      	mov	r2, r1
 8012d6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8012d6e:	fb07 1516 	mls	r5, r7, r6, r1
 8012d72:	3530      	adds	r5, #48	; 0x30
 8012d74:	2a63      	cmp	r2, #99	; 0x63
 8012d76:	f104 34ff 	add.w	r4, r4, #4294967295
 8012d7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012d7e:	4631      	mov	r1, r6
 8012d80:	dcf1      	bgt.n	8012d66 <__exponent+0x22>
 8012d82:	3130      	adds	r1, #48	; 0x30
 8012d84:	f1ae 0502 	sub.w	r5, lr, #2
 8012d88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012d8c:	1c44      	adds	r4, r0, #1
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4561      	cmp	r1, ip
 8012d92:	d30a      	bcc.n	8012daa <__exponent+0x66>
 8012d94:	f10d 0209 	add.w	r2, sp, #9
 8012d98:	eba2 020e 	sub.w	r2, r2, lr
 8012d9c:	4565      	cmp	r5, ip
 8012d9e:	bf88      	it	hi
 8012da0:	2200      	movhi	r2, #0
 8012da2:	4413      	add	r3, r2
 8012da4:	1a18      	subs	r0, r3, r0
 8012da6:	b003      	add	sp, #12
 8012da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012db2:	e7ed      	b.n	8012d90 <__exponent+0x4c>
 8012db4:	2330      	movs	r3, #48	; 0x30
 8012db6:	3130      	adds	r1, #48	; 0x30
 8012db8:	7083      	strb	r3, [r0, #2]
 8012dba:	70c1      	strb	r1, [r0, #3]
 8012dbc:	1d03      	adds	r3, r0, #4
 8012dbe:	e7f1      	b.n	8012da4 <__exponent+0x60>

08012dc0 <_printf_float>:
 8012dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	ed2d 8b02 	vpush	{d8}
 8012dc8:	b08d      	sub	sp, #52	; 0x34
 8012dca:	460c      	mov	r4, r1
 8012dcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012dd0:	4616      	mov	r6, r2
 8012dd2:	461f      	mov	r7, r3
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	f001 fa69 	bl	80142ac <_localeconv_r>
 8012dda:	f8d0 a000 	ldr.w	sl, [r0]
 8012dde:	4650      	mov	r0, sl
 8012de0:	f7ed fa16 	bl	8000210 <strlen>
 8012de4:	2300      	movs	r3, #0
 8012de6:	930a      	str	r3, [sp, #40]	; 0x28
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	9305      	str	r3, [sp, #20]
 8012dec:	f8d8 3000 	ldr.w	r3, [r8]
 8012df0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012df4:	3307      	adds	r3, #7
 8012df6:	f023 0307 	bic.w	r3, r3, #7
 8012dfa:	f103 0208 	add.w	r2, r3, #8
 8012dfe:	f8c8 2000 	str.w	r2, [r8]
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012e0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012e12:	9307      	str	r3, [sp, #28]
 8012e14:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e18:	ee08 0a10 	vmov	s16, r0
 8012e1c:	4b9f      	ldr	r3, [pc, #636]	; (801309c <_printf_float+0x2dc>)
 8012e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e22:	f04f 32ff 	mov.w	r2, #4294967295
 8012e26:	f7ed fea1 	bl	8000b6c <__aeabi_dcmpun>
 8012e2a:	bb88      	cbnz	r0, 8012e90 <_printf_float+0xd0>
 8012e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e30:	4b9a      	ldr	r3, [pc, #616]	; (801309c <_printf_float+0x2dc>)
 8012e32:	f04f 32ff 	mov.w	r2, #4294967295
 8012e36:	f7ed fe7b 	bl	8000b30 <__aeabi_dcmple>
 8012e3a:	bb48      	cbnz	r0, 8012e90 <_printf_float+0xd0>
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4640      	mov	r0, r8
 8012e42:	4649      	mov	r1, r9
 8012e44:	f7ed fe6a 	bl	8000b1c <__aeabi_dcmplt>
 8012e48:	b110      	cbz	r0, 8012e50 <_printf_float+0x90>
 8012e4a:	232d      	movs	r3, #45	; 0x2d
 8012e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e50:	4b93      	ldr	r3, [pc, #588]	; (80130a0 <_printf_float+0x2e0>)
 8012e52:	4894      	ldr	r0, [pc, #592]	; (80130a4 <_printf_float+0x2e4>)
 8012e54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012e58:	bf94      	ite	ls
 8012e5a:	4698      	movls	r8, r3
 8012e5c:	4680      	movhi	r8, r0
 8012e5e:	2303      	movs	r3, #3
 8012e60:	6123      	str	r3, [r4, #16]
 8012e62:	9b05      	ldr	r3, [sp, #20]
 8012e64:	f023 0204 	bic.w	r2, r3, #4
 8012e68:	6022      	str	r2, [r4, #0]
 8012e6a:	f04f 0900 	mov.w	r9, #0
 8012e6e:	9700      	str	r7, [sp, #0]
 8012e70:	4633      	mov	r3, r6
 8012e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8012e74:	4621      	mov	r1, r4
 8012e76:	4628      	mov	r0, r5
 8012e78:	f000 f9d8 	bl	801322c <_printf_common>
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	f040 8090 	bne.w	8012fa2 <_printf_float+0x1e2>
 8012e82:	f04f 30ff 	mov.w	r0, #4294967295
 8012e86:	b00d      	add	sp, #52	; 0x34
 8012e88:	ecbd 8b02 	vpop	{d8}
 8012e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e90:	4642      	mov	r2, r8
 8012e92:	464b      	mov	r3, r9
 8012e94:	4640      	mov	r0, r8
 8012e96:	4649      	mov	r1, r9
 8012e98:	f7ed fe68 	bl	8000b6c <__aeabi_dcmpun>
 8012e9c:	b140      	cbz	r0, 8012eb0 <_printf_float+0xf0>
 8012e9e:	464b      	mov	r3, r9
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	bfbc      	itt	lt
 8012ea4:	232d      	movlt	r3, #45	; 0x2d
 8012ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012eaa:	487f      	ldr	r0, [pc, #508]	; (80130a8 <_printf_float+0x2e8>)
 8012eac:	4b7f      	ldr	r3, [pc, #508]	; (80130ac <_printf_float+0x2ec>)
 8012eae:	e7d1      	b.n	8012e54 <_printf_float+0x94>
 8012eb0:	6863      	ldr	r3, [r4, #4]
 8012eb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012eb6:	9206      	str	r2, [sp, #24]
 8012eb8:	1c5a      	adds	r2, r3, #1
 8012eba:	d13f      	bne.n	8012f3c <_printf_float+0x17c>
 8012ebc:	2306      	movs	r3, #6
 8012ebe:	6063      	str	r3, [r4, #4]
 8012ec0:	9b05      	ldr	r3, [sp, #20]
 8012ec2:	6861      	ldr	r1, [r4, #4]
 8012ec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012ec8:	2300      	movs	r3, #0
 8012eca:	9303      	str	r3, [sp, #12]
 8012ecc:	ab0a      	add	r3, sp, #40	; 0x28
 8012ece:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012ed2:	ab09      	add	r3, sp, #36	; 0x24
 8012ed4:	ec49 8b10 	vmov	d0, r8, r9
 8012ed8:	9300      	str	r3, [sp, #0]
 8012eda:	6022      	str	r2, [r4, #0]
 8012edc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f7ff fecd 	bl	8012c80 <__cvt>
 8012ee6:	9b06      	ldr	r3, [sp, #24]
 8012ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012eea:	2b47      	cmp	r3, #71	; 0x47
 8012eec:	4680      	mov	r8, r0
 8012eee:	d108      	bne.n	8012f02 <_printf_float+0x142>
 8012ef0:	1cc8      	adds	r0, r1, #3
 8012ef2:	db02      	blt.n	8012efa <_printf_float+0x13a>
 8012ef4:	6863      	ldr	r3, [r4, #4]
 8012ef6:	4299      	cmp	r1, r3
 8012ef8:	dd41      	ble.n	8012f7e <_printf_float+0x1be>
 8012efa:	f1ab 0b02 	sub.w	fp, fp, #2
 8012efe:	fa5f fb8b 	uxtb.w	fp, fp
 8012f02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012f06:	d820      	bhi.n	8012f4a <_printf_float+0x18a>
 8012f08:	3901      	subs	r1, #1
 8012f0a:	465a      	mov	r2, fp
 8012f0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f10:	9109      	str	r1, [sp, #36]	; 0x24
 8012f12:	f7ff ff17 	bl	8012d44 <__exponent>
 8012f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f18:	1813      	adds	r3, r2, r0
 8012f1a:	2a01      	cmp	r2, #1
 8012f1c:	4681      	mov	r9, r0
 8012f1e:	6123      	str	r3, [r4, #16]
 8012f20:	dc02      	bgt.n	8012f28 <_printf_float+0x168>
 8012f22:	6822      	ldr	r2, [r4, #0]
 8012f24:	07d2      	lsls	r2, r2, #31
 8012f26:	d501      	bpl.n	8012f2c <_printf_float+0x16c>
 8012f28:	3301      	adds	r3, #1
 8012f2a:	6123      	str	r3, [r4, #16]
 8012f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d09c      	beq.n	8012e6e <_printf_float+0xae>
 8012f34:	232d      	movs	r3, #45	; 0x2d
 8012f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f3a:	e798      	b.n	8012e6e <_printf_float+0xae>
 8012f3c:	9a06      	ldr	r2, [sp, #24]
 8012f3e:	2a47      	cmp	r2, #71	; 0x47
 8012f40:	d1be      	bne.n	8012ec0 <_printf_float+0x100>
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1bc      	bne.n	8012ec0 <_printf_float+0x100>
 8012f46:	2301      	movs	r3, #1
 8012f48:	e7b9      	b.n	8012ebe <_printf_float+0xfe>
 8012f4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012f4e:	d118      	bne.n	8012f82 <_printf_float+0x1c2>
 8012f50:	2900      	cmp	r1, #0
 8012f52:	6863      	ldr	r3, [r4, #4]
 8012f54:	dd0b      	ble.n	8012f6e <_printf_float+0x1ae>
 8012f56:	6121      	str	r1, [r4, #16]
 8012f58:	b913      	cbnz	r3, 8012f60 <_printf_float+0x1a0>
 8012f5a:	6822      	ldr	r2, [r4, #0]
 8012f5c:	07d0      	lsls	r0, r2, #31
 8012f5e:	d502      	bpl.n	8012f66 <_printf_float+0x1a6>
 8012f60:	3301      	adds	r3, #1
 8012f62:	440b      	add	r3, r1
 8012f64:	6123      	str	r3, [r4, #16]
 8012f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8012f68:	f04f 0900 	mov.w	r9, #0
 8012f6c:	e7de      	b.n	8012f2c <_printf_float+0x16c>
 8012f6e:	b913      	cbnz	r3, 8012f76 <_printf_float+0x1b6>
 8012f70:	6822      	ldr	r2, [r4, #0]
 8012f72:	07d2      	lsls	r2, r2, #31
 8012f74:	d501      	bpl.n	8012f7a <_printf_float+0x1ba>
 8012f76:	3302      	adds	r3, #2
 8012f78:	e7f4      	b.n	8012f64 <_printf_float+0x1a4>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e7f2      	b.n	8012f64 <_printf_float+0x1a4>
 8012f7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f84:	4299      	cmp	r1, r3
 8012f86:	db05      	blt.n	8012f94 <_printf_float+0x1d4>
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	6121      	str	r1, [r4, #16]
 8012f8c:	07d8      	lsls	r0, r3, #31
 8012f8e:	d5ea      	bpl.n	8012f66 <_printf_float+0x1a6>
 8012f90:	1c4b      	adds	r3, r1, #1
 8012f92:	e7e7      	b.n	8012f64 <_printf_float+0x1a4>
 8012f94:	2900      	cmp	r1, #0
 8012f96:	bfd4      	ite	le
 8012f98:	f1c1 0202 	rsble	r2, r1, #2
 8012f9c:	2201      	movgt	r2, #1
 8012f9e:	4413      	add	r3, r2
 8012fa0:	e7e0      	b.n	8012f64 <_printf_float+0x1a4>
 8012fa2:	6823      	ldr	r3, [r4, #0]
 8012fa4:	055a      	lsls	r2, r3, #21
 8012fa6:	d407      	bmi.n	8012fb8 <_printf_float+0x1f8>
 8012fa8:	6923      	ldr	r3, [r4, #16]
 8012faa:	4642      	mov	r2, r8
 8012fac:	4631      	mov	r1, r6
 8012fae:	4628      	mov	r0, r5
 8012fb0:	47b8      	blx	r7
 8012fb2:	3001      	adds	r0, #1
 8012fb4:	d12c      	bne.n	8013010 <_printf_float+0x250>
 8012fb6:	e764      	b.n	8012e82 <_printf_float+0xc2>
 8012fb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012fbc:	f240 80e0 	bls.w	8013180 <_printf_float+0x3c0>
 8012fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f7ed fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d034      	beq.n	801303a <_printf_float+0x27a>
 8012fd0:	4a37      	ldr	r2, [pc, #220]	; (80130b0 <_printf_float+0x2f0>)
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	47b8      	blx	r7
 8012fda:	3001      	adds	r0, #1
 8012fdc:	f43f af51 	beq.w	8012e82 <_printf_float+0xc2>
 8012fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	db02      	blt.n	8012fee <_printf_float+0x22e>
 8012fe8:	6823      	ldr	r3, [r4, #0]
 8012fea:	07d8      	lsls	r0, r3, #31
 8012fec:	d510      	bpl.n	8013010 <_printf_float+0x250>
 8012fee:	ee18 3a10 	vmov	r3, s16
 8012ff2:	4652      	mov	r2, sl
 8012ff4:	4631      	mov	r1, r6
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	47b8      	blx	r7
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f43f af41 	beq.w	8012e82 <_printf_float+0xc2>
 8013000:	f04f 0800 	mov.w	r8, #0
 8013004:	f104 091a 	add.w	r9, r4, #26
 8013008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801300a:	3b01      	subs	r3, #1
 801300c:	4543      	cmp	r3, r8
 801300e:	dc09      	bgt.n	8013024 <_printf_float+0x264>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	079b      	lsls	r3, r3, #30
 8013014:	f100 8105 	bmi.w	8013222 <_printf_float+0x462>
 8013018:	68e0      	ldr	r0, [r4, #12]
 801301a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801301c:	4298      	cmp	r0, r3
 801301e:	bfb8      	it	lt
 8013020:	4618      	movlt	r0, r3
 8013022:	e730      	b.n	8012e86 <_printf_float+0xc6>
 8013024:	2301      	movs	r3, #1
 8013026:	464a      	mov	r2, r9
 8013028:	4631      	mov	r1, r6
 801302a:	4628      	mov	r0, r5
 801302c:	47b8      	blx	r7
 801302e:	3001      	adds	r0, #1
 8013030:	f43f af27 	beq.w	8012e82 <_printf_float+0xc2>
 8013034:	f108 0801 	add.w	r8, r8, #1
 8013038:	e7e6      	b.n	8013008 <_printf_float+0x248>
 801303a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801303c:	2b00      	cmp	r3, #0
 801303e:	dc39      	bgt.n	80130b4 <_printf_float+0x2f4>
 8013040:	4a1b      	ldr	r2, [pc, #108]	; (80130b0 <_printf_float+0x2f0>)
 8013042:	2301      	movs	r3, #1
 8013044:	4631      	mov	r1, r6
 8013046:	4628      	mov	r0, r5
 8013048:	47b8      	blx	r7
 801304a:	3001      	adds	r0, #1
 801304c:	f43f af19 	beq.w	8012e82 <_printf_float+0xc2>
 8013050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013054:	4313      	orrs	r3, r2
 8013056:	d102      	bne.n	801305e <_printf_float+0x29e>
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	07d9      	lsls	r1, r3, #31
 801305c:	d5d8      	bpl.n	8013010 <_printf_float+0x250>
 801305e:	ee18 3a10 	vmov	r3, s16
 8013062:	4652      	mov	r2, sl
 8013064:	4631      	mov	r1, r6
 8013066:	4628      	mov	r0, r5
 8013068:	47b8      	blx	r7
 801306a:	3001      	adds	r0, #1
 801306c:	f43f af09 	beq.w	8012e82 <_printf_float+0xc2>
 8013070:	f04f 0900 	mov.w	r9, #0
 8013074:	f104 0a1a 	add.w	sl, r4, #26
 8013078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307a:	425b      	negs	r3, r3
 801307c:	454b      	cmp	r3, r9
 801307e:	dc01      	bgt.n	8013084 <_printf_float+0x2c4>
 8013080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013082:	e792      	b.n	8012faa <_printf_float+0x1ea>
 8013084:	2301      	movs	r3, #1
 8013086:	4652      	mov	r2, sl
 8013088:	4631      	mov	r1, r6
 801308a:	4628      	mov	r0, r5
 801308c:	47b8      	blx	r7
 801308e:	3001      	adds	r0, #1
 8013090:	f43f aef7 	beq.w	8012e82 <_printf_float+0xc2>
 8013094:	f109 0901 	add.w	r9, r9, #1
 8013098:	e7ee      	b.n	8013078 <_printf_float+0x2b8>
 801309a:	bf00      	nop
 801309c:	7fefffff 	.word	0x7fefffff
 80130a0:	08015d74 	.word	0x08015d74
 80130a4:	08015d78 	.word	0x08015d78
 80130a8:	08015d80 	.word	0x08015d80
 80130ac:	08015d7c 	.word	0x08015d7c
 80130b0:	08015d84 	.word	0x08015d84
 80130b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80130b8:	429a      	cmp	r2, r3
 80130ba:	bfa8      	it	ge
 80130bc:	461a      	movge	r2, r3
 80130be:	2a00      	cmp	r2, #0
 80130c0:	4691      	mov	r9, r2
 80130c2:	dc37      	bgt.n	8013134 <_printf_float+0x374>
 80130c4:	f04f 0b00 	mov.w	fp, #0
 80130c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130cc:	f104 021a 	add.w	r2, r4, #26
 80130d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80130d2:	9305      	str	r3, [sp, #20]
 80130d4:	eba3 0309 	sub.w	r3, r3, r9
 80130d8:	455b      	cmp	r3, fp
 80130da:	dc33      	bgt.n	8013144 <_printf_float+0x384>
 80130dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130e0:	429a      	cmp	r2, r3
 80130e2:	db3b      	blt.n	801315c <_printf_float+0x39c>
 80130e4:	6823      	ldr	r3, [r4, #0]
 80130e6:	07da      	lsls	r2, r3, #31
 80130e8:	d438      	bmi.n	801315c <_printf_float+0x39c>
 80130ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130ec:	9a05      	ldr	r2, [sp, #20]
 80130ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130f0:	1a9a      	subs	r2, r3, r2
 80130f2:	eba3 0901 	sub.w	r9, r3, r1
 80130f6:	4591      	cmp	r9, r2
 80130f8:	bfa8      	it	ge
 80130fa:	4691      	movge	r9, r2
 80130fc:	f1b9 0f00 	cmp.w	r9, #0
 8013100:	dc35      	bgt.n	801316e <_printf_float+0x3ae>
 8013102:	f04f 0800 	mov.w	r8, #0
 8013106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801310a:	f104 0a1a 	add.w	sl, r4, #26
 801310e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013112:	1a9b      	subs	r3, r3, r2
 8013114:	eba3 0309 	sub.w	r3, r3, r9
 8013118:	4543      	cmp	r3, r8
 801311a:	f77f af79 	ble.w	8013010 <_printf_float+0x250>
 801311e:	2301      	movs	r3, #1
 8013120:	4652      	mov	r2, sl
 8013122:	4631      	mov	r1, r6
 8013124:	4628      	mov	r0, r5
 8013126:	47b8      	blx	r7
 8013128:	3001      	adds	r0, #1
 801312a:	f43f aeaa 	beq.w	8012e82 <_printf_float+0xc2>
 801312e:	f108 0801 	add.w	r8, r8, #1
 8013132:	e7ec      	b.n	801310e <_printf_float+0x34e>
 8013134:	4613      	mov	r3, r2
 8013136:	4631      	mov	r1, r6
 8013138:	4642      	mov	r2, r8
 801313a:	4628      	mov	r0, r5
 801313c:	47b8      	blx	r7
 801313e:	3001      	adds	r0, #1
 8013140:	d1c0      	bne.n	80130c4 <_printf_float+0x304>
 8013142:	e69e      	b.n	8012e82 <_printf_float+0xc2>
 8013144:	2301      	movs	r3, #1
 8013146:	4631      	mov	r1, r6
 8013148:	4628      	mov	r0, r5
 801314a:	9205      	str	r2, [sp, #20]
 801314c:	47b8      	blx	r7
 801314e:	3001      	adds	r0, #1
 8013150:	f43f ae97 	beq.w	8012e82 <_printf_float+0xc2>
 8013154:	9a05      	ldr	r2, [sp, #20]
 8013156:	f10b 0b01 	add.w	fp, fp, #1
 801315a:	e7b9      	b.n	80130d0 <_printf_float+0x310>
 801315c:	ee18 3a10 	vmov	r3, s16
 8013160:	4652      	mov	r2, sl
 8013162:	4631      	mov	r1, r6
 8013164:	4628      	mov	r0, r5
 8013166:	47b8      	blx	r7
 8013168:	3001      	adds	r0, #1
 801316a:	d1be      	bne.n	80130ea <_printf_float+0x32a>
 801316c:	e689      	b.n	8012e82 <_printf_float+0xc2>
 801316e:	9a05      	ldr	r2, [sp, #20]
 8013170:	464b      	mov	r3, r9
 8013172:	4442      	add	r2, r8
 8013174:	4631      	mov	r1, r6
 8013176:	4628      	mov	r0, r5
 8013178:	47b8      	blx	r7
 801317a:	3001      	adds	r0, #1
 801317c:	d1c1      	bne.n	8013102 <_printf_float+0x342>
 801317e:	e680      	b.n	8012e82 <_printf_float+0xc2>
 8013180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013182:	2a01      	cmp	r2, #1
 8013184:	dc01      	bgt.n	801318a <_printf_float+0x3ca>
 8013186:	07db      	lsls	r3, r3, #31
 8013188:	d538      	bpl.n	80131fc <_printf_float+0x43c>
 801318a:	2301      	movs	r3, #1
 801318c:	4642      	mov	r2, r8
 801318e:	4631      	mov	r1, r6
 8013190:	4628      	mov	r0, r5
 8013192:	47b8      	blx	r7
 8013194:	3001      	adds	r0, #1
 8013196:	f43f ae74 	beq.w	8012e82 <_printf_float+0xc2>
 801319a:	ee18 3a10 	vmov	r3, s16
 801319e:	4652      	mov	r2, sl
 80131a0:	4631      	mov	r1, r6
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	f43f ae6b 	beq.w	8012e82 <_printf_float+0xc2>
 80131ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131b0:	2200      	movs	r2, #0
 80131b2:	2300      	movs	r3, #0
 80131b4:	f7ed fca8 	bl	8000b08 <__aeabi_dcmpeq>
 80131b8:	b9d8      	cbnz	r0, 80131f2 <_printf_float+0x432>
 80131ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131bc:	f108 0201 	add.w	r2, r8, #1
 80131c0:	3b01      	subs	r3, #1
 80131c2:	4631      	mov	r1, r6
 80131c4:	4628      	mov	r0, r5
 80131c6:	47b8      	blx	r7
 80131c8:	3001      	adds	r0, #1
 80131ca:	d10e      	bne.n	80131ea <_printf_float+0x42a>
 80131cc:	e659      	b.n	8012e82 <_printf_float+0xc2>
 80131ce:	2301      	movs	r3, #1
 80131d0:	4652      	mov	r2, sl
 80131d2:	4631      	mov	r1, r6
 80131d4:	4628      	mov	r0, r5
 80131d6:	47b8      	blx	r7
 80131d8:	3001      	adds	r0, #1
 80131da:	f43f ae52 	beq.w	8012e82 <_printf_float+0xc2>
 80131de:	f108 0801 	add.w	r8, r8, #1
 80131e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e4:	3b01      	subs	r3, #1
 80131e6:	4543      	cmp	r3, r8
 80131e8:	dcf1      	bgt.n	80131ce <_printf_float+0x40e>
 80131ea:	464b      	mov	r3, r9
 80131ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80131f0:	e6dc      	b.n	8012fac <_printf_float+0x1ec>
 80131f2:	f04f 0800 	mov.w	r8, #0
 80131f6:	f104 0a1a 	add.w	sl, r4, #26
 80131fa:	e7f2      	b.n	80131e2 <_printf_float+0x422>
 80131fc:	2301      	movs	r3, #1
 80131fe:	4642      	mov	r2, r8
 8013200:	e7df      	b.n	80131c2 <_printf_float+0x402>
 8013202:	2301      	movs	r3, #1
 8013204:	464a      	mov	r2, r9
 8013206:	4631      	mov	r1, r6
 8013208:	4628      	mov	r0, r5
 801320a:	47b8      	blx	r7
 801320c:	3001      	adds	r0, #1
 801320e:	f43f ae38 	beq.w	8012e82 <_printf_float+0xc2>
 8013212:	f108 0801 	add.w	r8, r8, #1
 8013216:	68e3      	ldr	r3, [r4, #12]
 8013218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801321a:	1a5b      	subs	r3, r3, r1
 801321c:	4543      	cmp	r3, r8
 801321e:	dcf0      	bgt.n	8013202 <_printf_float+0x442>
 8013220:	e6fa      	b.n	8013018 <_printf_float+0x258>
 8013222:	f04f 0800 	mov.w	r8, #0
 8013226:	f104 0919 	add.w	r9, r4, #25
 801322a:	e7f4      	b.n	8013216 <_printf_float+0x456>

0801322c <_printf_common>:
 801322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013230:	4616      	mov	r6, r2
 8013232:	4699      	mov	r9, r3
 8013234:	688a      	ldr	r2, [r1, #8]
 8013236:	690b      	ldr	r3, [r1, #16]
 8013238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801323c:	4293      	cmp	r3, r2
 801323e:	bfb8      	it	lt
 8013240:	4613      	movlt	r3, r2
 8013242:	6033      	str	r3, [r6, #0]
 8013244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013248:	4607      	mov	r7, r0
 801324a:	460c      	mov	r4, r1
 801324c:	b10a      	cbz	r2, 8013252 <_printf_common+0x26>
 801324e:	3301      	adds	r3, #1
 8013250:	6033      	str	r3, [r6, #0]
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	0699      	lsls	r1, r3, #26
 8013256:	bf42      	ittt	mi
 8013258:	6833      	ldrmi	r3, [r6, #0]
 801325a:	3302      	addmi	r3, #2
 801325c:	6033      	strmi	r3, [r6, #0]
 801325e:	6825      	ldr	r5, [r4, #0]
 8013260:	f015 0506 	ands.w	r5, r5, #6
 8013264:	d106      	bne.n	8013274 <_printf_common+0x48>
 8013266:	f104 0a19 	add.w	sl, r4, #25
 801326a:	68e3      	ldr	r3, [r4, #12]
 801326c:	6832      	ldr	r2, [r6, #0]
 801326e:	1a9b      	subs	r3, r3, r2
 8013270:	42ab      	cmp	r3, r5
 8013272:	dc26      	bgt.n	80132c2 <_printf_common+0x96>
 8013274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013278:	1e13      	subs	r3, r2, #0
 801327a:	6822      	ldr	r2, [r4, #0]
 801327c:	bf18      	it	ne
 801327e:	2301      	movne	r3, #1
 8013280:	0692      	lsls	r2, r2, #26
 8013282:	d42b      	bmi.n	80132dc <_printf_common+0xb0>
 8013284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013288:	4649      	mov	r1, r9
 801328a:	4638      	mov	r0, r7
 801328c:	47c0      	blx	r8
 801328e:	3001      	adds	r0, #1
 8013290:	d01e      	beq.n	80132d0 <_printf_common+0xa4>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	68e5      	ldr	r5, [r4, #12]
 8013296:	6832      	ldr	r2, [r6, #0]
 8013298:	f003 0306 	and.w	r3, r3, #6
 801329c:	2b04      	cmp	r3, #4
 801329e:	bf08      	it	eq
 80132a0:	1aad      	subeq	r5, r5, r2
 80132a2:	68a3      	ldr	r3, [r4, #8]
 80132a4:	6922      	ldr	r2, [r4, #16]
 80132a6:	bf0c      	ite	eq
 80132a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132ac:	2500      	movne	r5, #0
 80132ae:	4293      	cmp	r3, r2
 80132b0:	bfc4      	itt	gt
 80132b2:	1a9b      	subgt	r3, r3, r2
 80132b4:	18ed      	addgt	r5, r5, r3
 80132b6:	2600      	movs	r6, #0
 80132b8:	341a      	adds	r4, #26
 80132ba:	42b5      	cmp	r5, r6
 80132bc:	d11a      	bne.n	80132f4 <_printf_common+0xc8>
 80132be:	2000      	movs	r0, #0
 80132c0:	e008      	b.n	80132d4 <_printf_common+0xa8>
 80132c2:	2301      	movs	r3, #1
 80132c4:	4652      	mov	r2, sl
 80132c6:	4649      	mov	r1, r9
 80132c8:	4638      	mov	r0, r7
 80132ca:	47c0      	blx	r8
 80132cc:	3001      	adds	r0, #1
 80132ce:	d103      	bne.n	80132d8 <_printf_common+0xac>
 80132d0:	f04f 30ff 	mov.w	r0, #4294967295
 80132d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d8:	3501      	adds	r5, #1
 80132da:	e7c6      	b.n	801326a <_printf_common+0x3e>
 80132dc:	18e1      	adds	r1, r4, r3
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	2030      	movs	r0, #48	; 0x30
 80132e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80132e6:	4422      	add	r2, r4
 80132e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80132ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80132f0:	3302      	adds	r3, #2
 80132f2:	e7c7      	b.n	8013284 <_printf_common+0x58>
 80132f4:	2301      	movs	r3, #1
 80132f6:	4622      	mov	r2, r4
 80132f8:	4649      	mov	r1, r9
 80132fa:	4638      	mov	r0, r7
 80132fc:	47c0      	blx	r8
 80132fe:	3001      	adds	r0, #1
 8013300:	d0e6      	beq.n	80132d0 <_printf_common+0xa4>
 8013302:	3601      	adds	r6, #1
 8013304:	e7d9      	b.n	80132ba <_printf_common+0x8e>
	...

08013308 <_printf_i>:
 8013308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801330c:	7e0f      	ldrb	r7, [r1, #24]
 801330e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013310:	2f78      	cmp	r7, #120	; 0x78
 8013312:	4691      	mov	r9, r2
 8013314:	4680      	mov	r8, r0
 8013316:	460c      	mov	r4, r1
 8013318:	469a      	mov	sl, r3
 801331a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801331e:	d807      	bhi.n	8013330 <_printf_i+0x28>
 8013320:	2f62      	cmp	r7, #98	; 0x62
 8013322:	d80a      	bhi.n	801333a <_printf_i+0x32>
 8013324:	2f00      	cmp	r7, #0
 8013326:	f000 80d8 	beq.w	80134da <_printf_i+0x1d2>
 801332a:	2f58      	cmp	r7, #88	; 0x58
 801332c:	f000 80a3 	beq.w	8013476 <_printf_i+0x16e>
 8013330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013338:	e03a      	b.n	80133b0 <_printf_i+0xa8>
 801333a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801333e:	2b15      	cmp	r3, #21
 8013340:	d8f6      	bhi.n	8013330 <_printf_i+0x28>
 8013342:	a101      	add	r1, pc, #4	; (adr r1, 8013348 <_printf_i+0x40>)
 8013344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013348:	080133a1 	.word	0x080133a1
 801334c:	080133b5 	.word	0x080133b5
 8013350:	08013331 	.word	0x08013331
 8013354:	08013331 	.word	0x08013331
 8013358:	08013331 	.word	0x08013331
 801335c:	08013331 	.word	0x08013331
 8013360:	080133b5 	.word	0x080133b5
 8013364:	08013331 	.word	0x08013331
 8013368:	08013331 	.word	0x08013331
 801336c:	08013331 	.word	0x08013331
 8013370:	08013331 	.word	0x08013331
 8013374:	080134c1 	.word	0x080134c1
 8013378:	080133e5 	.word	0x080133e5
 801337c:	080134a3 	.word	0x080134a3
 8013380:	08013331 	.word	0x08013331
 8013384:	08013331 	.word	0x08013331
 8013388:	080134e3 	.word	0x080134e3
 801338c:	08013331 	.word	0x08013331
 8013390:	080133e5 	.word	0x080133e5
 8013394:	08013331 	.word	0x08013331
 8013398:	08013331 	.word	0x08013331
 801339c:	080134ab 	.word	0x080134ab
 80133a0:	682b      	ldr	r3, [r5, #0]
 80133a2:	1d1a      	adds	r2, r3, #4
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	602a      	str	r2, [r5, #0]
 80133a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133b0:	2301      	movs	r3, #1
 80133b2:	e0a3      	b.n	80134fc <_printf_i+0x1f4>
 80133b4:	6820      	ldr	r0, [r4, #0]
 80133b6:	6829      	ldr	r1, [r5, #0]
 80133b8:	0606      	lsls	r6, r0, #24
 80133ba:	f101 0304 	add.w	r3, r1, #4
 80133be:	d50a      	bpl.n	80133d6 <_printf_i+0xce>
 80133c0:	680e      	ldr	r6, [r1, #0]
 80133c2:	602b      	str	r3, [r5, #0]
 80133c4:	2e00      	cmp	r6, #0
 80133c6:	da03      	bge.n	80133d0 <_printf_i+0xc8>
 80133c8:	232d      	movs	r3, #45	; 0x2d
 80133ca:	4276      	negs	r6, r6
 80133cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133d0:	485e      	ldr	r0, [pc, #376]	; (801354c <_printf_i+0x244>)
 80133d2:	230a      	movs	r3, #10
 80133d4:	e019      	b.n	801340a <_printf_i+0x102>
 80133d6:	680e      	ldr	r6, [r1, #0]
 80133d8:	602b      	str	r3, [r5, #0]
 80133da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80133de:	bf18      	it	ne
 80133e0:	b236      	sxthne	r6, r6
 80133e2:	e7ef      	b.n	80133c4 <_printf_i+0xbc>
 80133e4:	682b      	ldr	r3, [r5, #0]
 80133e6:	6820      	ldr	r0, [r4, #0]
 80133e8:	1d19      	adds	r1, r3, #4
 80133ea:	6029      	str	r1, [r5, #0]
 80133ec:	0601      	lsls	r1, r0, #24
 80133ee:	d501      	bpl.n	80133f4 <_printf_i+0xec>
 80133f0:	681e      	ldr	r6, [r3, #0]
 80133f2:	e002      	b.n	80133fa <_printf_i+0xf2>
 80133f4:	0646      	lsls	r6, r0, #25
 80133f6:	d5fb      	bpl.n	80133f0 <_printf_i+0xe8>
 80133f8:	881e      	ldrh	r6, [r3, #0]
 80133fa:	4854      	ldr	r0, [pc, #336]	; (801354c <_printf_i+0x244>)
 80133fc:	2f6f      	cmp	r7, #111	; 0x6f
 80133fe:	bf0c      	ite	eq
 8013400:	2308      	moveq	r3, #8
 8013402:	230a      	movne	r3, #10
 8013404:	2100      	movs	r1, #0
 8013406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801340a:	6865      	ldr	r5, [r4, #4]
 801340c:	60a5      	str	r5, [r4, #8]
 801340e:	2d00      	cmp	r5, #0
 8013410:	bfa2      	ittt	ge
 8013412:	6821      	ldrge	r1, [r4, #0]
 8013414:	f021 0104 	bicge.w	r1, r1, #4
 8013418:	6021      	strge	r1, [r4, #0]
 801341a:	b90e      	cbnz	r6, 8013420 <_printf_i+0x118>
 801341c:	2d00      	cmp	r5, #0
 801341e:	d04d      	beq.n	80134bc <_printf_i+0x1b4>
 8013420:	4615      	mov	r5, r2
 8013422:	fbb6 f1f3 	udiv	r1, r6, r3
 8013426:	fb03 6711 	mls	r7, r3, r1, r6
 801342a:	5dc7      	ldrb	r7, [r0, r7]
 801342c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013430:	4637      	mov	r7, r6
 8013432:	42bb      	cmp	r3, r7
 8013434:	460e      	mov	r6, r1
 8013436:	d9f4      	bls.n	8013422 <_printf_i+0x11a>
 8013438:	2b08      	cmp	r3, #8
 801343a:	d10b      	bne.n	8013454 <_printf_i+0x14c>
 801343c:	6823      	ldr	r3, [r4, #0]
 801343e:	07de      	lsls	r6, r3, #31
 8013440:	d508      	bpl.n	8013454 <_printf_i+0x14c>
 8013442:	6923      	ldr	r3, [r4, #16]
 8013444:	6861      	ldr	r1, [r4, #4]
 8013446:	4299      	cmp	r1, r3
 8013448:	bfde      	ittt	le
 801344a:	2330      	movle	r3, #48	; 0x30
 801344c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013454:	1b52      	subs	r2, r2, r5
 8013456:	6122      	str	r2, [r4, #16]
 8013458:	f8cd a000 	str.w	sl, [sp]
 801345c:	464b      	mov	r3, r9
 801345e:	aa03      	add	r2, sp, #12
 8013460:	4621      	mov	r1, r4
 8013462:	4640      	mov	r0, r8
 8013464:	f7ff fee2 	bl	801322c <_printf_common>
 8013468:	3001      	adds	r0, #1
 801346a:	d14c      	bne.n	8013506 <_printf_i+0x1fe>
 801346c:	f04f 30ff 	mov.w	r0, #4294967295
 8013470:	b004      	add	sp, #16
 8013472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013476:	4835      	ldr	r0, [pc, #212]	; (801354c <_printf_i+0x244>)
 8013478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801347c:	6829      	ldr	r1, [r5, #0]
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	f851 6b04 	ldr.w	r6, [r1], #4
 8013484:	6029      	str	r1, [r5, #0]
 8013486:	061d      	lsls	r5, r3, #24
 8013488:	d514      	bpl.n	80134b4 <_printf_i+0x1ac>
 801348a:	07df      	lsls	r7, r3, #31
 801348c:	bf44      	itt	mi
 801348e:	f043 0320 	orrmi.w	r3, r3, #32
 8013492:	6023      	strmi	r3, [r4, #0]
 8013494:	b91e      	cbnz	r6, 801349e <_printf_i+0x196>
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	f023 0320 	bic.w	r3, r3, #32
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	2310      	movs	r3, #16
 80134a0:	e7b0      	b.n	8013404 <_printf_i+0xfc>
 80134a2:	6823      	ldr	r3, [r4, #0]
 80134a4:	f043 0320 	orr.w	r3, r3, #32
 80134a8:	6023      	str	r3, [r4, #0]
 80134aa:	2378      	movs	r3, #120	; 0x78
 80134ac:	4828      	ldr	r0, [pc, #160]	; (8013550 <_printf_i+0x248>)
 80134ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80134b2:	e7e3      	b.n	801347c <_printf_i+0x174>
 80134b4:	0659      	lsls	r1, r3, #25
 80134b6:	bf48      	it	mi
 80134b8:	b2b6      	uxthmi	r6, r6
 80134ba:	e7e6      	b.n	801348a <_printf_i+0x182>
 80134bc:	4615      	mov	r5, r2
 80134be:	e7bb      	b.n	8013438 <_printf_i+0x130>
 80134c0:	682b      	ldr	r3, [r5, #0]
 80134c2:	6826      	ldr	r6, [r4, #0]
 80134c4:	6961      	ldr	r1, [r4, #20]
 80134c6:	1d18      	adds	r0, r3, #4
 80134c8:	6028      	str	r0, [r5, #0]
 80134ca:	0635      	lsls	r5, r6, #24
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	d501      	bpl.n	80134d4 <_printf_i+0x1cc>
 80134d0:	6019      	str	r1, [r3, #0]
 80134d2:	e002      	b.n	80134da <_printf_i+0x1d2>
 80134d4:	0670      	lsls	r0, r6, #25
 80134d6:	d5fb      	bpl.n	80134d0 <_printf_i+0x1c8>
 80134d8:	8019      	strh	r1, [r3, #0]
 80134da:	2300      	movs	r3, #0
 80134dc:	6123      	str	r3, [r4, #16]
 80134de:	4615      	mov	r5, r2
 80134e0:	e7ba      	b.n	8013458 <_printf_i+0x150>
 80134e2:	682b      	ldr	r3, [r5, #0]
 80134e4:	1d1a      	adds	r2, r3, #4
 80134e6:	602a      	str	r2, [r5, #0]
 80134e8:	681d      	ldr	r5, [r3, #0]
 80134ea:	6862      	ldr	r2, [r4, #4]
 80134ec:	2100      	movs	r1, #0
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7ec fe96 	bl	8000220 <memchr>
 80134f4:	b108      	cbz	r0, 80134fa <_printf_i+0x1f2>
 80134f6:	1b40      	subs	r0, r0, r5
 80134f8:	6060      	str	r0, [r4, #4]
 80134fa:	6863      	ldr	r3, [r4, #4]
 80134fc:	6123      	str	r3, [r4, #16]
 80134fe:	2300      	movs	r3, #0
 8013500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013504:	e7a8      	b.n	8013458 <_printf_i+0x150>
 8013506:	6923      	ldr	r3, [r4, #16]
 8013508:	462a      	mov	r2, r5
 801350a:	4649      	mov	r1, r9
 801350c:	4640      	mov	r0, r8
 801350e:	47d0      	blx	sl
 8013510:	3001      	adds	r0, #1
 8013512:	d0ab      	beq.n	801346c <_printf_i+0x164>
 8013514:	6823      	ldr	r3, [r4, #0]
 8013516:	079b      	lsls	r3, r3, #30
 8013518:	d413      	bmi.n	8013542 <_printf_i+0x23a>
 801351a:	68e0      	ldr	r0, [r4, #12]
 801351c:	9b03      	ldr	r3, [sp, #12]
 801351e:	4298      	cmp	r0, r3
 8013520:	bfb8      	it	lt
 8013522:	4618      	movlt	r0, r3
 8013524:	e7a4      	b.n	8013470 <_printf_i+0x168>
 8013526:	2301      	movs	r3, #1
 8013528:	4632      	mov	r2, r6
 801352a:	4649      	mov	r1, r9
 801352c:	4640      	mov	r0, r8
 801352e:	47d0      	blx	sl
 8013530:	3001      	adds	r0, #1
 8013532:	d09b      	beq.n	801346c <_printf_i+0x164>
 8013534:	3501      	adds	r5, #1
 8013536:	68e3      	ldr	r3, [r4, #12]
 8013538:	9903      	ldr	r1, [sp, #12]
 801353a:	1a5b      	subs	r3, r3, r1
 801353c:	42ab      	cmp	r3, r5
 801353e:	dcf2      	bgt.n	8013526 <_printf_i+0x21e>
 8013540:	e7eb      	b.n	801351a <_printf_i+0x212>
 8013542:	2500      	movs	r5, #0
 8013544:	f104 0619 	add.w	r6, r4, #25
 8013548:	e7f5      	b.n	8013536 <_printf_i+0x22e>
 801354a:	bf00      	nop
 801354c:	08015d86 	.word	0x08015d86
 8013550:	08015d97 	.word	0x08015d97

08013554 <_sbrk_r>:
 8013554:	b538      	push	{r3, r4, r5, lr}
 8013556:	4d06      	ldr	r5, [pc, #24]	; (8013570 <_sbrk_r+0x1c>)
 8013558:	2300      	movs	r3, #0
 801355a:	4604      	mov	r4, r0
 801355c:	4608      	mov	r0, r1
 801355e:	602b      	str	r3, [r5, #0]
 8013560:	f7ee fc90 	bl	8001e84 <_sbrk>
 8013564:	1c43      	adds	r3, r0, #1
 8013566:	d102      	bne.n	801356e <_sbrk_r+0x1a>
 8013568:	682b      	ldr	r3, [r5, #0]
 801356a:	b103      	cbz	r3, 801356e <_sbrk_r+0x1a>
 801356c:	6023      	str	r3, [r4, #0]
 801356e:	bd38      	pop	{r3, r4, r5, pc}
 8013570:	200049fc 	.word	0x200049fc

08013574 <siprintf>:
 8013574:	b40e      	push	{r1, r2, r3}
 8013576:	b500      	push	{lr}
 8013578:	b09c      	sub	sp, #112	; 0x70
 801357a:	ab1d      	add	r3, sp, #116	; 0x74
 801357c:	9002      	str	r0, [sp, #8]
 801357e:	9006      	str	r0, [sp, #24]
 8013580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013584:	4809      	ldr	r0, [pc, #36]	; (80135ac <siprintf+0x38>)
 8013586:	9107      	str	r1, [sp, #28]
 8013588:	9104      	str	r1, [sp, #16]
 801358a:	4909      	ldr	r1, [pc, #36]	; (80135b0 <siprintf+0x3c>)
 801358c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013590:	9105      	str	r1, [sp, #20]
 8013592:	6800      	ldr	r0, [r0, #0]
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	a902      	add	r1, sp, #8
 8013598:	f001 fa9c 	bl	8014ad4 <_svfiprintf_r>
 801359c:	9b02      	ldr	r3, [sp, #8]
 801359e:	2200      	movs	r2, #0
 80135a0:	701a      	strb	r2, [r3, #0]
 80135a2:	b01c      	add	sp, #112	; 0x70
 80135a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80135a8:	b003      	add	sp, #12
 80135aa:	4770      	bx	lr
 80135ac:	2000012c 	.word	0x2000012c
 80135b0:	ffff0208 	.word	0xffff0208

080135b4 <quorem>:
 80135b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b8:	6903      	ldr	r3, [r0, #16]
 80135ba:	690c      	ldr	r4, [r1, #16]
 80135bc:	42a3      	cmp	r3, r4
 80135be:	4607      	mov	r7, r0
 80135c0:	f2c0 8081 	blt.w	80136c6 <quorem+0x112>
 80135c4:	3c01      	subs	r4, #1
 80135c6:	f101 0814 	add.w	r8, r1, #20
 80135ca:	f100 0514 	add.w	r5, r0, #20
 80135ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135d2:	9301      	str	r3, [sp, #4]
 80135d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80135d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135dc:	3301      	adds	r3, #1
 80135de:	429a      	cmp	r2, r3
 80135e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80135e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80135e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80135ec:	d331      	bcc.n	8013652 <quorem+0x9e>
 80135ee:	f04f 0e00 	mov.w	lr, #0
 80135f2:	4640      	mov	r0, r8
 80135f4:	46ac      	mov	ip, r5
 80135f6:	46f2      	mov	sl, lr
 80135f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80135fc:	b293      	uxth	r3, r2
 80135fe:	fb06 e303 	mla	r3, r6, r3, lr
 8013602:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013606:	b29b      	uxth	r3, r3
 8013608:	ebaa 0303 	sub.w	r3, sl, r3
 801360c:	f8dc a000 	ldr.w	sl, [ip]
 8013610:	0c12      	lsrs	r2, r2, #16
 8013612:	fa13 f38a 	uxtah	r3, r3, sl
 8013616:	fb06 e202 	mla	r2, r6, r2, lr
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	9b00      	ldr	r3, [sp, #0]
 801361e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013622:	b292      	uxth	r2, r2
 8013624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801362c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013630:	4581      	cmp	r9, r0
 8013632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013636:	f84c 3b04 	str.w	r3, [ip], #4
 801363a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801363e:	d2db      	bcs.n	80135f8 <quorem+0x44>
 8013640:	f855 300b 	ldr.w	r3, [r5, fp]
 8013644:	b92b      	cbnz	r3, 8013652 <quorem+0x9e>
 8013646:	9b01      	ldr	r3, [sp, #4]
 8013648:	3b04      	subs	r3, #4
 801364a:	429d      	cmp	r5, r3
 801364c:	461a      	mov	r2, r3
 801364e:	d32e      	bcc.n	80136ae <quorem+0xfa>
 8013650:	613c      	str	r4, [r7, #16]
 8013652:	4638      	mov	r0, r7
 8013654:	f001 f8ca 	bl	80147ec <__mcmp>
 8013658:	2800      	cmp	r0, #0
 801365a:	db24      	blt.n	80136a6 <quorem+0xf2>
 801365c:	3601      	adds	r6, #1
 801365e:	4628      	mov	r0, r5
 8013660:	f04f 0c00 	mov.w	ip, #0
 8013664:	f858 2b04 	ldr.w	r2, [r8], #4
 8013668:	f8d0 e000 	ldr.w	lr, [r0]
 801366c:	b293      	uxth	r3, r2
 801366e:	ebac 0303 	sub.w	r3, ip, r3
 8013672:	0c12      	lsrs	r2, r2, #16
 8013674:	fa13 f38e 	uxtah	r3, r3, lr
 8013678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801367c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013680:	b29b      	uxth	r3, r3
 8013682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013686:	45c1      	cmp	r9, r8
 8013688:	f840 3b04 	str.w	r3, [r0], #4
 801368c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013690:	d2e8      	bcs.n	8013664 <quorem+0xb0>
 8013692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801369a:	b922      	cbnz	r2, 80136a6 <quorem+0xf2>
 801369c:	3b04      	subs	r3, #4
 801369e:	429d      	cmp	r5, r3
 80136a0:	461a      	mov	r2, r3
 80136a2:	d30a      	bcc.n	80136ba <quorem+0x106>
 80136a4:	613c      	str	r4, [r7, #16]
 80136a6:	4630      	mov	r0, r6
 80136a8:	b003      	add	sp, #12
 80136aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ae:	6812      	ldr	r2, [r2, #0]
 80136b0:	3b04      	subs	r3, #4
 80136b2:	2a00      	cmp	r2, #0
 80136b4:	d1cc      	bne.n	8013650 <quorem+0x9c>
 80136b6:	3c01      	subs	r4, #1
 80136b8:	e7c7      	b.n	801364a <quorem+0x96>
 80136ba:	6812      	ldr	r2, [r2, #0]
 80136bc:	3b04      	subs	r3, #4
 80136be:	2a00      	cmp	r2, #0
 80136c0:	d1f0      	bne.n	80136a4 <quorem+0xf0>
 80136c2:	3c01      	subs	r4, #1
 80136c4:	e7eb      	b.n	801369e <quorem+0xea>
 80136c6:	2000      	movs	r0, #0
 80136c8:	e7ee      	b.n	80136a8 <quorem+0xf4>
 80136ca:	0000      	movs	r0, r0
 80136cc:	0000      	movs	r0, r0
	...

080136d0 <_dtoa_r>:
 80136d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d4:	ed2d 8b04 	vpush	{d8-d9}
 80136d8:	ec57 6b10 	vmov	r6, r7, d0
 80136dc:	b093      	sub	sp, #76	; 0x4c
 80136de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80136e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80136e4:	9106      	str	r1, [sp, #24]
 80136e6:	ee10 aa10 	vmov	sl, s0
 80136ea:	4604      	mov	r4, r0
 80136ec:	9209      	str	r2, [sp, #36]	; 0x24
 80136ee:	930c      	str	r3, [sp, #48]	; 0x30
 80136f0:	46bb      	mov	fp, r7
 80136f2:	b975      	cbnz	r5, 8013712 <_dtoa_r+0x42>
 80136f4:	2010      	movs	r0, #16
 80136f6:	f7ff f9cb 	bl	8012a90 <malloc>
 80136fa:	4602      	mov	r2, r0
 80136fc:	6260      	str	r0, [r4, #36]	; 0x24
 80136fe:	b920      	cbnz	r0, 801370a <_dtoa_r+0x3a>
 8013700:	4ba7      	ldr	r3, [pc, #668]	; (80139a0 <_dtoa_r+0x2d0>)
 8013702:	21ea      	movs	r1, #234	; 0xea
 8013704:	48a7      	ldr	r0, [pc, #668]	; (80139a4 <_dtoa_r+0x2d4>)
 8013706:	f001 fae5 	bl	8014cd4 <__assert_func>
 801370a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801370e:	6005      	str	r5, [r0, #0]
 8013710:	60c5      	str	r5, [r0, #12]
 8013712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013714:	6819      	ldr	r1, [r3, #0]
 8013716:	b151      	cbz	r1, 801372e <_dtoa_r+0x5e>
 8013718:	685a      	ldr	r2, [r3, #4]
 801371a:	604a      	str	r2, [r1, #4]
 801371c:	2301      	movs	r3, #1
 801371e:	4093      	lsls	r3, r2
 8013720:	608b      	str	r3, [r1, #8]
 8013722:	4620      	mov	r0, r4
 8013724:	f000 fe20 	bl	8014368 <_Bfree>
 8013728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801372a:	2200      	movs	r2, #0
 801372c:	601a      	str	r2, [r3, #0]
 801372e:	1e3b      	subs	r3, r7, #0
 8013730:	bfaa      	itet	ge
 8013732:	2300      	movge	r3, #0
 8013734:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013738:	f8c8 3000 	strge.w	r3, [r8]
 801373c:	4b9a      	ldr	r3, [pc, #616]	; (80139a8 <_dtoa_r+0x2d8>)
 801373e:	bfbc      	itt	lt
 8013740:	2201      	movlt	r2, #1
 8013742:	f8c8 2000 	strlt.w	r2, [r8]
 8013746:	ea33 030b 	bics.w	r3, r3, fp
 801374a:	d11b      	bne.n	8013784 <_dtoa_r+0xb4>
 801374c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801374e:	f242 730f 	movw	r3, #9999	; 0x270f
 8013752:	6013      	str	r3, [r2, #0]
 8013754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013758:	4333      	orrs	r3, r6
 801375a:	f000 8592 	beq.w	8014282 <_dtoa_r+0xbb2>
 801375e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013760:	b963      	cbnz	r3, 801377c <_dtoa_r+0xac>
 8013762:	4b92      	ldr	r3, [pc, #584]	; (80139ac <_dtoa_r+0x2dc>)
 8013764:	e022      	b.n	80137ac <_dtoa_r+0xdc>
 8013766:	4b92      	ldr	r3, [pc, #584]	; (80139b0 <_dtoa_r+0x2e0>)
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	3308      	adds	r3, #8
 801376c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801376e:	6013      	str	r3, [r2, #0]
 8013770:	9801      	ldr	r0, [sp, #4]
 8013772:	b013      	add	sp, #76	; 0x4c
 8013774:	ecbd 8b04 	vpop	{d8-d9}
 8013778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801377c:	4b8b      	ldr	r3, [pc, #556]	; (80139ac <_dtoa_r+0x2dc>)
 801377e:	9301      	str	r3, [sp, #4]
 8013780:	3303      	adds	r3, #3
 8013782:	e7f3      	b.n	801376c <_dtoa_r+0x9c>
 8013784:	2200      	movs	r2, #0
 8013786:	2300      	movs	r3, #0
 8013788:	4650      	mov	r0, sl
 801378a:	4659      	mov	r1, fp
 801378c:	f7ed f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8013790:	ec4b ab19 	vmov	d9, sl, fp
 8013794:	4680      	mov	r8, r0
 8013796:	b158      	cbz	r0, 80137b0 <_dtoa_r+0xe0>
 8013798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801379a:	2301      	movs	r3, #1
 801379c:	6013      	str	r3, [r2, #0]
 801379e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 856b 	beq.w	801427c <_dtoa_r+0xbac>
 80137a6:	4883      	ldr	r0, [pc, #524]	; (80139b4 <_dtoa_r+0x2e4>)
 80137a8:	6018      	str	r0, [r3, #0]
 80137aa:	1e43      	subs	r3, r0, #1
 80137ac:	9301      	str	r3, [sp, #4]
 80137ae:	e7df      	b.n	8013770 <_dtoa_r+0xa0>
 80137b0:	ec4b ab10 	vmov	d0, sl, fp
 80137b4:	aa10      	add	r2, sp, #64	; 0x40
 80137b6:	a911      	add	r1, sp, #68	; 0x44
 80137b8:	4620      	mov	r0, r4
 80137ba:	f001 f8bd 	bl	8014938 <__d2b>
 80137be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80137c2:	ee08 0a10 	vmov	s16, r0
 80137c6:	2d00      	cmp	r5, #0
 80137c8:	f000 8084 	beq.w	80138d4 <_dtoa_r+0x204>
 80137cc:	ee19 3a90 	vmov	r3, s19
 80137d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80137d8:	4656      	mov	r6, sl
 80137da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80137de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80137e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80137e6:	4b74      	ldr	r3, [pc, #464]	; (80139b8 <_dtoa_r+0x2e8>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	4630      	mov	r0, r6
 80137ec:	4639      	mov	r1, r7
 80137ee:	f7ec fd6b 	bl	80002c8 <__aeabi_dsub>
 80137f2:	a365      	add	r3, pc, #404	; (adr r3, 8013988 <_dtoa_r+0x2b8>)
 80137f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f8:	f7ec ff1e 	bl	8000638 <__aeabi_dmul>
 80137fc:	a364      	add	r3, pc, #400	; (adr r3, 8013990 <_dtoa_r+0x2c0>)
 80137fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013802:	f7ec fd63 	bl	80002cc <__adddf3>
 8013806:	4606      	mov	r6, r0
 8013808:	4628      	mov	r0, r5
 801380a:	460f      	mov	r7, r1
 801380c:	f7ec feaa 	bl	8000564 <__aeabi_i2d>
 8013810:	a361      	add	r3, pc, #388	; (adr r3, 8013998 <_dtoa_r+0x2c8>)
 8013812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013816:	f7ec ff0f 	bl	8000638 <__aeabi_dmul>
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	4630      	mov	r0, r6
 8013820:	4639      	mov	r1, r7
 8013822:	f7ec fd53 	bl	80002cc <__adddf3>
 8013826:	4606      	mov	r6, r0
 8013828:	460f      	mov	r7, r1
 801382a:	f7ed f9b5 	bl	8000b98 <__aeabi_d2iz>
 801382e:	2200      	movs	r2, #0
 8013830:	9000      	str	r0, [sp, #0]
 8013832:	2300      	movs	r3, #0
 8013834:	4630      	mov	r0, r6
 8013836:	4639      	mov	r1, r7
 8013838:	f7ed f970 	bl	8000b1c <__aeabi_dcmplt>
 801383c:	b150      	cbz	r0, 8013854 <_dtoa_r+0x184>
 801383e:	9800      	ldr	r0, [sp, #0]
 8013840:	f7ec fe90 	bl	8000564 <__aeabi_i2d>
 8013844:	4632      	mov	r2, r6
 8013846:	463b      	mov	r3, r7
 8013848:	f7ed f95e 	bl	8000b08 <__aeabi_dcmpeq>
 801384c:	b910      	cbnz	r0, 8013854 <_dtoa_r+0x184>
 801384e:	9b00      	ldr	r3, [sp, #0]
 8013850:	3b01      	subs	r3, #1
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	9b00      	ldr	r3, [sp, #0]
 8013856:	2b16      	cmp	r3, #22
 8013858:	d85a      	bhi.n	8013910 <_dtoa_r+0x240>
 801385a:	9a00      	ldr	r2, [sp, #0]
 801385c:	4b57      	ldr	r3, [pc, #348]	; (80139bc <_dtoa_r+0x2ec>)
 801385e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013866:	ec51 0b19 	vmov	r0, r1, d9
 801386a:	f7ed f957 	bl	8000b1c <__aeabi_dcmplt>
 801386e:	2800      	cmp	r0, #0
 8013870:	d050      	beq.n	8013914 <_dtoa_r+0x244>
 8013872:	9b00      	ldr	r3, [sp, #0]
 8013874:	3b01      	subs	r3, #1
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	2300      	movs	r3, #0
 801387a:	930b      	str	r3, [sp, #44]	; 0x2c
 801387c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801387e:	1b5d      	subs	r5, r3, r5
 8013880:	1e6b      	subs	r3, r5, #1
 8013882:	9305      	str	r3, [sp, #20]
 8013884:	bf45      	ittet	mi
 8013886:	f1c5 0301 	rsbmi	r3, r5, #1
 801388a:	9304      	strmi	r3, [sp, #16]
 801388c:	2300      	movpl	r3, #0
 801388e:	2300      	movmi	r3, #0
 8013890:	bf4c      	ite	mi
 8013892:	9305      	strmi	r3, [sp, #20]
 8013894:	9304      	strpl	r3, [sp, #16]
 8013896:	9b00      	ldr	r3, [sp, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	db3d      	blt.n	8013918 <_dtoa_r+0x248>
 801389c:	9b05      	ldr	r3, [sp, #20]
 801389e:	9a00      	ldr	r2, [sp, #0]
 80138a0:	920a      	str	r2, [sp, #40]	; 0x28
 80138a2:	4413      	add	r3, r2
 80138a4:	9305      	str	r3, [sp, #20]
 80138a6:	2300      	movs	r3, #0
 80138a8:	9307      	str	r3, [sp, #28]
 80138aa:	9b06      	ldr	r3, [sp, #24]
 80138ac:	2b09      	cmp	r3, #9
 80138ae:	f200 8089 	bhi.w	80139c4 <_dtoa_r+0x2f4>
 80138b2:	2b05      	cmp	r3, #5
 80138b4:	bfc4      	itt	gt
 80138b6:	3b04      	subgt	r3, #4
 80138b8:	9306      	strgt	r3, [sp, #24]
 80138ba:	9b06      	ldr	r3, [sp, #24]
 80138bc:	f1a3 0302 	sub.w	r3, r3, #2
 80138c0:	bfcc      	ite	gt
 80138c2:	2500      	movgt	r5, #0
 80138c4:	2501      	movle	r5, #1
 80138c6:	2b03      	cmp	r3, #3
 80138c8:	f200 8087 	bhi.w	80139da <_dtoa_r+0x30a>
 80138cc:	e8df f003 	tbb	[pc, r3]
 80138d0:	59383a2d 	.word	0x59383a2d
 80138d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80138d8:	441d      	add	r5, r3
 80138da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80138de:	2b20      	cmp	r3, #32
 80138e0:	bfc1      	itttt	gt
 80138e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80138e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80138ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80138ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80138f2:	bfda      	itte	le
 80138f4:	f1c3 0320 	rsble	r3, r3, #32
 80138f8:	fa06 f003 	lslle.w	r0, r6, r3
 80138fc:	4318      	orrgt	r0, r3
 80138fe:	f7ec fe21 	bl	8000544 <__aeabi_ui2d>
 8013902:	2301      	movs	r3, #1
 8013904:	4606      	mov	r6, r0
 8013906:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801390a:	3d01      	subs	r5, #1
 801390c:	930e      	str	r3, [sp, #56]	; 0x38
 801390e:	e76a      	b.n	80137e6 <_dtoa_r+0x116>
 8013910:	2301      	movs	r3, #1
 8013912:	e7b2      	b.n	801387a <_dtoa_r+0x1aa>
 8013914:	900b      	str	r0, [sp, #44]	; 0x2c
 8013916:	e7b1      	b.n	801387c <_dtoa_r+0x1ac>
 8013918:	9b04      	ldr	r3, [sp, #16]
 801391a:	9a00      	ldr	r2, [sp, #0]
 801391c:	1a9b      	subs	r3, r3, r2
 801391e:	9304      	str	r3, [sp, #16]
 8013920:	4253      	negs	r3, r2
 8013922:	9307      	str	r3, [sp, #28]
 8013924:	2300      	movs	r3, #0
 8013926:	930a      	str	r3, [sp, #40]	; 0x28
 8013928:	e7bf      	b.n	80138aa <_dtoa_r+0x1da>
 801392a:	2300      	movs	r3, #0
 801392c:	9308      	str	r3, [sp, #32]
 801392e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013930:	2b00      	cmp	r3, #0
 8013932:	dc55      	bgt.n	80139e0 <_dtoa_r+0x310>
 8013934:	2301      	movs	r3, #1
 8013936:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801393a:	461a      	mov	r2, r3
 801393c:	9209      	str	r2, [sp, #36]	; 0x24
 801393e:	e00c      	b.n	801395a <_dtoa_r+0x28a>
 8013940:	2301      	movs	r3, #1
 8013942:	e7f3      	b.n	801392c <_dtoa_r+0x25c>
 8013944:	2300      	movs	r3, #0
 8013946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013948:	9308      	str	r3, [sp, #32]
 801394a:	9b00      	ldr	r3, [sp, #0]
 801394c:	4413      	add	r3, r2
 801394e:	9302      	str	r3, [sp, #8]
 8013950:	3301      	adds	r3, #1
 8013952:	2b01      	cmp	r3, #1
 8013954:	9303      	str	r3, [sp, #12]
 8013956:	bfb8      	it	lt
 8013958:	2301      	movlt	r3, #1
 801395a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801395c:	2200      	movs	r2, #0
 801395e:	6042      	str	r2, [r0, #4]
 8013960:	2204      	movs	r2, #4
 8013962:	f102 0614 	add.w	r6, r2, #20
 8013966:	429e      	cmp	r6, r3
 8013968:	6841      	ldr	r1, [r0, #4]
 801396a:	d93d      	bls.n	80139e8 <_dtoa_r+0x318>
 801396c:	4620      	mov	r0, r4
 801396e:	f000 fcbb 	bl	80142e8 <_Balloc>
 8013972:	9001      	str	r0, [sp, #4]
 8013974:	2800      	cmp	r0, #0
 8013976:	d13b      	bne.n	80139f0 <_dtoa_r+0x320>
 8013978:	4b11      	ldr	r3, [pc, #68]	; (80139c0 <_dtoa_r+0x2f0>)
 801397a:	4602      	mov	r2, r0
 801397c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013980:	e6c0      	b.n	8013704 <_dtoa_r+0x34>
 8013982:	2301      	movs	r3, #1
 8013984:	e7df      	b.n	8013946 <_dtoa_r+0x276>
 8013986:	bf00      	nop
 8013988:	636f4361 	.word	0x636f4361
 801398c:	3fd287a7 	.word	0x3fd287a7
 8013990:	8b60c8b3 	.word	0x8b60c8b3
 8013994:	3fc68a28 	.word	0x3fc68a28
 8013998:	509f79fb 	.word	0x509f79fb
 801399c:	3fd34413 	.word	0x3fd34413
 80139a0:	08015db5 	.word	0x08015db5
 80139a4:	08015dcc 	.word	0x08015dcc
 80139a8:	7ff00000 	.word	0x7ff00000
 80139ac:	08015db1 	.word	0x08015db1
 80139b0:	08015da8 	.word	0x08015da8
 80139b4:	08015d85 	.word	0x08015d85
 80139b8:	3ff80000 	.word	0x3ff80000
 80139bc:	08015ec0 	.word	0x08015ec0
 80139c0:	08015e27 	.word	0x08015e27
 80139c4:	2501      	movs	r5, #1
 80139c6:	2300      	movs	r3, #0
 80139c8:	9306      	str	r3, [sp, #24]
 80139ca:	9508      	str	r5, [sp, #32]
 80139cc:	f04f 33ff 	mov.w	r3, #4294967295
 80139d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80139d4:	2200      	movs	r2, #0
 80139d6:	2312      	movs	r3, #18
 80139d8:	e7b0      	b.n	801393c <_dtoa_r+0x26c>
 80139da:	2301      	movs	r3, #1
 80139dc:	9308      	str	r3, [sp, #32]
 80139de:	e7f5      	b.n	80139cc <_dtoa_r+0x2fc>
 80139e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80139e6:	e7b8      	b.n	801395a <_dtoa_r+0x28a>
 80139e8:	3101      	adds	r1, #1
 80139ea:	6041      	str	r1, [r0, #4]
 80139ec:	0052      	lsls	r2, r2, #1
 80139ee:	e7b8      	b.n	8013962 <_dtoa_r+0x292>
 80139f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139f2:	9a01      	ldr	r2, [sp, #4]
 80139f4:	601a      	str	r2, [r3, #0]
 80139f6:	9b03      	ldr	r3, [sp, #12]
 80139f8:	2b0e      	cmp	r3, #14
 80139fa:	f200 809d 	bhi.w	8013b38 <_dtoa_r+0x468>
 80139fe:	2d00      	cmp	r5, #0
 8013a00:	f000 809a 	beq.w	8013b38 <_dtoa_r+0x468>
 8013a04:	9b00      	ldr	r3, [sp, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	dd32      	ble.n	8013a70 <_dtoa_r+0x3a0>
 8013a0a:	4ab7      	ldr	r2, [pc, #732]	; (8013ce8 <_dtoa_r+0x618>)
 8013a0c:	f003 030f 	and.w	r3, r3, #15
 8013a10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013a14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a18:	9b00      	ldr	r3, [sp, #0]
 8013a1a:	05d8      	lsls	r0, r3, #23
 8013a1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013a20:	d516      	bpl.n	8013a50 <_dtoa_r+0x380>
 8013a22:	4bb2      	ldr	r3, [pc, #712]	; (8013cec <_dtoa_r+0x61c>)
 8013a24:	ec51 0b19 	vmov	r0, r1, d9
 8013a28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013a2c:	f7ec ff2e 	bl	800088c <__aeabi_ddiv>
 8013a30:	f007 070f 	and.w	r7, r7, #15
 8013a34:	4682      	mov	sl, r0
 8013a36:	468b      	mov	fp, r1
 8013a38:	2503      	movs	r5, #3
 8013a3a:	4eac      	ldr	r6, [pc, #688]	; (8013cec <_dtoa_r+0x61c>)
 8013a3c:	b957      	cbnz	r7, 8013a54 <_dtoa_r+0x384>
 8013a3e:	4642      	mov	r2, r8
 8013a40:	464b      	mov	r3, r9
 8013a42:	4650      	mov	r0, sl
 8013a44:	4659      	mov	r1, fp
 8013a46:	f7ec ff21 	bl	800088c <__aeabi_ddiv>
 8013a4a:	4682      	mov	sl, r0
 8013a4c:	468b      	mov	fp, r1
 8013a4e:	e028      	b.n	8013aa2 <_dtoa_r+0x3d2>
 8013a50:	2502      	movs	r5, #2
 8013a52:	e7f2      	b.n	8013a3a <_dtoa_r+0x36a>
 8013a54:	07f9      	lsls	r1, r7, #31
 8013a56:	d508      	bpl.n	8013a6a <_dtoa_r+0x39a>
 8013a58:	4640      	mov	r0, r8
 8013a5a:	4649      	mov	r1, r9
 8013a5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013a60:	f7ec fdea 	bl	8000638 <__aeabi_dmul>
 8013a64:	3501      	adds	r5, #1
 8013a66:	4680      	mov	r8, r0
 8013a68:	4689      	mov	r9, r1
 8013a6a:	107f      	asrs	r7, r7, #1
 8013a6c:	3608      	adds	r6, #8
 8013a6e:	e7e5      	b.n	8013a3c <_dtoa_r+0x36c>
 8013a70:	f000 809b 	beq.w	8013baa <_dtoa_r+0x4da>
 8013a74:	9b00      	ldr	r3, [sp, #0]
 8013a76:	4f9d      	ldr	r7, [pc, #628]	; (8013cec <_dtoa_r+0x61c>)
 8013a78:	425e      	negs	r6, r3
 8013a7a:	4b9b      	ldr	r3, [pc, #620]	; (8013ce8 <_dtoa_r+0x618>)
 8013a7c:	f006 020f 	and.w	r2, r6, #15
 8013a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	ec51 0b19 	vmov	r0, r1, d9
 8013a8c:	f7ec fdd4 	bl	8000638 <__aeabi_dmul>
 8013a90:	1136      	asrs	r6, r6, #4
 8013a92:	4682      	mov	sl, r0
 8013a94:	468b      	mov	fp, r1
 8013a96:	2300      	movs	r3, #0
 8013a98:	2502      	movs	r5, #2
 8013a9a:	2e00      	cmp	r6, #0
 8013a9c:	d17a      	bne.n	8013b94 <_dtoa_r+0x4c4>
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d1d3      	bne.n	8013a4a <_dtoa_r+0x37a>
 8013aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 8082 	beq.w	8013bae <_dtoa_r+0x4de>
 8013aaa:	4b91      	ldr	r3, [pc, #580]	; (8013cf0 <_dtoa_r+0x620>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	4650      	mov	r0, sl
 8013ab0:	4659      	mov	r1, fp
 8013ab2:	f7ed f833 	bl	8000b1c <__aeabi_dcmplt>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d079      	beq.n	8013bae <_dtoa_r+0x4de>
 8013aba:	9b03      	ldr	r3, [sp, #12]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d076      	beq.n	8013bae <_dtoa_r+0x4de>
 8013ac0:	9b02      	ldr	r3, [sp, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	dd36      	ble.n	8013b34 <_dtoa_r+0x464>
 8013ac6:	9b00      	ldr	r3, [sp, #0]
 8013ac8:	4650      	mov	r0, sl
 8013aca:	4659      	mov	r1, fp
 8013acc:	1e5f      	subs	r7, r3, #1
 8013ace:	2200      	movs	r2, #0
 8013ad0:	4b88      	ldr	r3, [pc, #544]	; (8013cf4 <_dtoa_r+0x624>)
 8013ad2:	f7ec fdb1 	bl	8000638 <__aeabi_dmul>
 8013ad6:	9e02      	ldr	r6, [sp, #8]
 8013ad8:	4682      	mov	sl, r0
 8013ada:	468b      	mov	fp, r1
 8013adc:	3501      	adds	r5, #1
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f7ec fd40 	bl	8000564 <__aeabi_i2d>
 8013ae4:	4652      	mov	r2, sl
 8013ae6:	465b      	mov	r3, fp
 8013ae8:	f7ec fda6 	bl	8000638 <__aeabi_dmul>
 8013aec:	4b82      	ldr	r3, [pc, #520]	; (8013cf8 <_dtoa_r+0x628>)
 8013aee:	2200      	movs	r2, #0
 8013af0:	f7ec fbec 	bl	80002cc <__adddf3>
 8013af4:	46d0      	mov	r8, sl
 8013af6:	46d9      	mov	r9, fp
 8013af8:	4682      	mov	sl, r0
 8013afa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013afe:	2e00      	cmp	r6, #0
 8013b00:	d158      	bne.n	8013bb4 <_dtoa_r+0x4e4>
 8013b02:	4b7e      	ldr	r3, [pc, #504]	; (8013cfc <_dtoa_r+0x62c>)
 8013b04:	2200      	movs	r2, #0
 8013b06:	4640      	mov	r0, r8
 8013b08:	4649      	mov	r1, r9
 8013b0a:	f7ec fbdd 	bl	80002c8 <__aeabi_dsub>
 8013b0e:	4652      	mov	r2, sl
 8013b10:	465b      	mov	r3, fp
 8013b12:	4680      	mov	r8, r0
 8013b14:	4689      	mov	r9, r1
 8013b16:	f7ed f81f 	bl	8000b58 <__aeabi_dcmpgt>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	f040 8295 	bne.w	801404a <_dtoa_r+0x97a>
 8013b20:	4652      	mov	r2, sl
 8013b22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013b26:	4640      	mov	r0, r8
 8013b28:	4649      	mov	r1, r9
 8013b2a:	f7ec fff7 	bl	8000b1c <__aeabi_dcmplt>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f040 8289 	bne.w	8014046 <_dtoa_r+0x976>
 8013b34:	ec5b ab19 	vmov	sl, fp, d9
 8013b38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f2c0 8148 	blt.w	8013dd0 <_dtoa_r+0x700>
 8013b40:	9a00      	ldr	r2, [sp, #0]
 8013b42:	2a0e      	cmp	r2, #14
 8013b44:	f300 8144 	bgt.w	8013dd0 <_dtoa_r+0x700>
 8013b48:	4b67      	ldr	r3, [pc, #412]	; (8013ce8 <_dtoa_r+0x618>)
 8013b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	f280 80d5 	bge.w	8013d04 <_dtoa_r+0x634>
 8013b5a:	9b03      	ldr	r3, [sp, #12]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	f300 80d1 	bgt.w	8013d04 <_dtoa_r+0x634>
 8013b62:	f040 826f 	bne.w	8014044 <_dtoa_r+0x974>
 8013b66:	4b65      	ldr	r3, [pc, #404]	; (8013cfc <_dtoa_r+0x62c>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fd63 	bl	8000638 <__aeabi_dmul>
 8013b72:	4652      	mov	r2, sl
 8013b74:	465b      	mov	r3, fp
 8013b76:	f7ec ffe5 	bl	8000b44 <__aeabi_dcmpge>
 8013b7a:	9e03      	ldr	r6, [sp, #12]
 8013b7c:	4637      	mov	r7, r6
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	f040 8245 	bne.w	801400e <_dtoa_r+0x93e>
 8013b84:	9d01      	ldr	r5, [sp, #4]
 8013b86:	2331      	movs	r3, #49	; 0x31
 8013b88:	f805 3b01 	strb.w	r3, [r5], #1
 8013b8c:	9b00      	ldr	r3, [sp, #0]
 8013b8e:	3301      	adds	r3, #1
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	e240      	b.n	8014016 <_dtoa_r+0x946>
 8013b94:	07f2      	lsls	r2, r6, #31
 8013b96:	d505      	bpl.n	8013ba4 <_dtoa_r+0x4d4>
 8013b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b9c:	f7ec fd4c 	bl	8000638 <__aeabi_dmul>
 8013ba0:	3501      	adds	r5, #1
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	1076      	asrs	r6, r6, #1
 8013ba6:	3708      	adds	r7, #8
 8013ba8:	e777      	b.n	8013a9a <_dtoa_r+0x3ca>
 8013baa:	2502      	movs	r5, #2
 8013bac:	e779      	b.n	8013aa2 <_dtoa_r+0x3d2>
 8013bae:	9f00      	ldr	r7, [sp, #0]
 8013bb0:	9e03      	ldr	r6, [sp, #12]
 8013bb2:	e794      	b.n	8013ade <_dtoa_r+0x40e>
 8013bb4:	9901      	ldr	r1, [sp, #4]
 8013bb6:	4b4c      	ldr	r3, [pc, #304]	; (8013ce8 <_dtoa_r+0x618>)
 8013bb8:	4431      	add	r1, r6
 8013bba:	910d      	str	r1, [sp, #52]	; 0x34
 8013bbc:	9908      	ldr	r1, [sp, #32]
 8013bbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013bc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013bc6:	2900      	cmp	r1, #0
 8013bc8:	d043      	beq.n	8013c52 <_dtoa_r+0x582>
 8013bca:	494d      	ldr	r1, [pc, #308]	; (8013d00 <_dtoa_r+0x630>)
 8013bcc:	2000      	movs	r0, #0
 8013bce:	f7ec fe5d 	bl	800088c <__aeabi_ddiv>
 8013bd2:	4652      	mov	r2, sl
 8013bd4:	465b      	mov	r3, fp
 8013bd6:	f7ec fb77 	bl	80002c8 <__aeabi_dsub>
 8013bda:	9d01      	ldr	r5, [sp, #4]
 8013bdc:	4682      	mov	sl, r0
 8013bde:	468b      	mov	fp, r1
 8013be0:	4649      	mov	r1, r9
 8013be2:	4640      	mov	r0, r8
 8013be4:	f7ec ffd8 	bl	8000b98 <__aeabi_d2iz>
 8013be8:	4606      	mov	r6, r0
 8013bea:	f7ec fcbb 	bl	8000564 <__aeabi_i2d>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4640      	mov	r0, r8
 8013bf4:	4649      	mov	r1, r9
 8013bf6:	f7ec fb67 	bl	80002c8 <__aeabi_dsub>
 8013bfa:	3630      	adds	r6, #48	; 0x30
 8013bfc:	f805 6b01 	strb.w	r6, [r5], #1
 8013c00:	4652      	mov	r2, sl
 8013c02:	465b      	mov	r3, fp
 8013c04:	4680      	mov	r8, r0
 8013c06:	4689      	mov	r9, r1
 8013c08:	f7ec ff88 	bl	8000b1c <__aeabi_dcmplt>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d163      	bne.n	8013cd8 <_dtoa_r+0x608>
 8013c10:	4642      	mov	r2, r8
 8013c12:	464b      	mov	r3, r9
 8013c14:	4936      	ldr	r1, [pc, #216]	; (8013cf0 <_dtoa_r+0x620>)
 8013c16:	2000      	movs	r0, #0
 8013c18:	f7ec fb56 	bl	80002c8 <__aeabi_dsub>
 8013c1c:	4652      	mov	r2, sl
 8013c1e:	465b      	mov	r3, fp
 8013c20:	f7ec ff7c 	bl	8000b1c <__aeabi_dcmplt>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	f040 80b5 	bne.w	8013d94 <_dtoa_r+0x6c4>
 8013c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c2c:	429d      	cmp	r5, r3
 8013c2e:	d081      	beq.n	8013b34 <_dtoa_r+0x464>
 8013c30:	4b30      	ldr	r3, [pc, #192]	; (8013cf4 <_dtoa_r+0x624>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	4650      	mov	r0, sl
 8013c36:	4659      	mov	r1, fp
 8013c38:	f7ec fcfe 	bl	8000638 <__aeabi_dmul>
 8013c3c:	4b2d      	ldr	r3, [pc, #180]	; (8013cf4 <_dtoa_r+0x624>)
 8013c3e:	4682      	mov	sl, r0
 8013c40:	468b      	mov	fp, r1
 8013c42:	4640      	mov	r0, r8
 8013c44:	4649      	mov	r1, r9
 8013c46:	2200      	movs	r2, #0
 8013c48:	f7ec fcf6 	bl	8000638 <__aeabi_dmul>
 8013c4c:	4680      	mov	r8, r0
 8013c4e:	4689      	mov	r9, r1
 8013c50:	e7c6      	b.n	8013be0 <_dtoa_r+0x510>
 8013c52:	4650      	mov	r0, sl
 8013c54:	4659      	mov	r1, fp
 8013c56:	f7ec fcef 	bl	8000638 <__aeabi_dmul>
 8013c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c5c:	9d01      	ldr	r5, [sp, #4]
 8013c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c60:	4682      	mov	sl, r0
 8013c62:	468b      	mov	fp, r1
 8013c64:	4649      	mov	r1, r9
 8013c66:	4640      	mov	r0, r8
 8013c68:	f7ec ff96 	bl	8000b98 <__aeabi_d2iz>
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	f7ec fc79 	bl	8000564 <__aeabi_i2d>
 8013c72:	3630      	adds	r6, #48	; 0x30
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	4640      	mov	r0, r8
 8013c7a:	4649      	mov	r1, r9
 8013c7c:	f7ec fb24 	bl	80002c8 <__aeabi_dsub>
 8013c80:	f805 6b01 	strb.w	r6, [r5], #1
 8013c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c86:	429d      	cmp	r5, r3
 8013c88:	4680      	mov	r8, r0
 8013c8a:	4689      	mov	r9, r1
 8013c8c:	f04f 0200 	mov.w	r2, #0
 8013c90:	d124      	bne.n	8013cdc <_dtoa_r+0x60c>
 8013c92:	4b1b      	ldr	r3, [pc, #108]	; (8013d00 <_dtoa_r+0x630>)
 8013c94:	4650      	mov	r0, sl
 8013c96:	4659      	mov	r1, fp
 8013c98:	f7ec fb18 	bl	80002cc <__adddf3>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	4640      	mov	r0, r8
 8013ca2:	4649      	mov	r1, r9
 8013ca4:	f7ec ff58 	bl	8000b58 <__aeabi_dcmpgt>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	d173      	bne.n	8013d94 <_dtoa_r+0x6c4>
 8013cac:	4652      	mov	r2, sl
 8013cae:	465b      	mov	r3, fp
 8013cb0:	4913      	ldr	r1, [pc, #76]	; (8013d00 <_dtoa_r+0x630>)
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	f7ec fb08 	bl	80002c8 <__aeabi_dsub>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	4640      	mov	r0, r8
 8013cbe:	4649      	mov	r1, r9
 8013cc0:	f7ec ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	f43f af35 	beq.w	8013b34 <_dtoa_r+0x464>
 8013cca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013ccc:	1e6b      	subs	r3, r5, #1
 8013cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013cd4:	2b30      	cmp	r3, #48	; 0x30
 8013cd6:	d0f8      	beq.n	8013cca <_dtoa_r+0x5fa>
 8013cd8:	9700      	str	r7, [sp, #0]
 8013cda:	e049      	b.n	8013d70 <_dtoa_r+0x6a0>
 8013cdc:	4b05      	ldr	r3, [pc, #20]	; (8013cf4 <_dtoa_r+0x624>)
 8013cde:	f7ec fcab 	bl	8000638 <__aeabi_dmul>
 8013ce2:	4680      	mov	r8, r0
 8013ce4:	4689      	mov	r9, r1
 8013ce6:	e7bd      	b.n	8013c64 <_dtoa_r+0x594>
 8013ce8:	08015ec0 	.word	0x08015ec0
 8013cec:	08015e98 	.word	0x08015e98
 8013cf0:	3ff00000 	.word	0x3ff00000
 8013cf4:	40240000 	.word	0x40240000
 8013cf8:	401c0000 	.word	0x401c0000
 8013cfc:	40140000 	.word	0x40140000
 8013d00:	3fe00000 	.word	0x3fe00000
 8013d04:	9d01      	ldr	r5, [sp, #4]
 8013d06:	4656      	mov	r6, sl
 8013d08:	465f      	mov	r7, fp
 8013d0a:	4642      	mov	r2, r8
 8013d0c:	464b      	mov	r3, r9
 8013d0e:	4630      	mov	r0, r6
 8013d10:	4639      	mov	r1, r7
 8013d12:	f7ec fdbb 	bl	800088c <__aeabi_ddiv>
 8013d16:	f7ec ff3f 	bl	8000b98 <__aeabi_d2iz>
 8013d1a:	4682      	mov	sl, r0
 8013d1c:	f7ec fc22 	bl	8000564 <__aeabi_i2d>
 8013d20:	4642      	mov	r2, r8
 8013d22:	464b      	mov	r3, r9
 8013d24:	f7ec fc88 	bl	8000638 <__aeabi_dmul>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	4639      	mov	r1, r7
 8013d30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013d34:	f7ec fac8 	bl	80002c8 <__aeabi_dsub>
 8013d38:	f805 6b01 	strb.w	r6, [r5], #1
 8013d3c:	9e01      	ldr	r6, [sp, #4]
 8013d3e:	9f03      	ldr	r7, [sp, #12]
 8013d40:	1bae      	subs	r6, r5, r6
 8013d42:	42b7      	cmp	r7, r6
 8013d44:	4602      	mov	r2, r0
 8013d46:	460b      	mov	r3, r1
 8013d48:	d135      	bne.n	8013db6 <_dtoa_r+0x6e6>
 8013d4a:	f7ec fabf 	bl	80002cc <__adddf3>
 8013d4e:	4642      	mov	r2, r8
 8013d50:	464b      	mov	r3, r9
 8013d52:	4606      	mov	r6, r0
 8013d54:	460f      	mov	r7, r1
 8013d56:	f7ec feff 	bl	8000b58 <__aeabi_dcmpgt>
 8013d5a:	b9d0      	cbnz	r0, 8013d92 <_dtoa_r+0x6c2>
 8013d5c:	4642      	mov	r2, r8
 8013d5e:	464b      	mov	r3, r9
 8013d60:	4630      	mov	r0, r6
 8013d62:	4639      	mov	r1, r7
 8013d64:	f7ec fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8013d68:	b110      	cbz	r0, 8013d70 <_dtoa_r+0x6a0>
 8013d6a:	f01a 0f01 	tst.w	sl, #1
 8013d6e:	d110      	bne.n	8013d92 <_dtoa_r+0x6c2>
 8013d70:	4620      	mov	r0, r4
 8013d72:	ee18 1a10 	vmov	r1, s16
 8013d76:	f000 faf7 	bl	8014368 <_Bfree>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	9800      	ldr	r0, [sp, #0]
 8013d7e:	702b      	strb	r3, [r5, #0]
 8013d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d82:	3001      	adds	r0, #1
 8013d84:	6018      	str	r0, [r3, #0]
 8013d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f43f acf1 	beq.w	8013770 <_dtoa_r+0xa0>
 8013d8e:	601d      	str	r5, [r3, #0]
 8013d90:	e4ee      	b.n	8013770 <_dtoa_r+0xa0>
 8013d92:	9f00      	ldr	r7, [sp, #0]
 8013d94:	462b      	mov	r3, r5
 8013d96:	461d      	mov	r5, r3
 8013d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d9c:	2a39      	cmp	r2, #57	; 0x39
 8013d9e:	d106      	bne.n	8013dae <_dtoa_r+0x6de>
 8013da0:	9a01      	ldr	r2, [sp, #4]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d1f7      	bne.n	8013d96 <_dtoa_r+0x6c6>
 8013da6:	9901      	ldr	r1, [sp, #4]
 8013da8:	2230      	movs	r2, #48	; 0x30
 8013daa:	3701      	adds	r7, #1
 8013dac:	700a      	strb	r2, [r1, #0]
 8013dae:	781a      	ldrb	r2, [r3, #0]
 8013db0:	3201      	adds	r2, #1
 8013db2:	701a      	strb	r2, [r3, #0]
 8013db4:	e790      	b.n	8013cd8 <_dtoa_r+0x608>
 8013db6:	4ba6      	ldr	r3, [pc, #664]	; (8014050 <_dtoa_r+0x980>)
 8013db8:	2200      	movs	r2, #0
 8013dba:	f7ec fc3d 	bl	8000638 <__aeabi_dmul>
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	460f      	mov	r7, r1
 8013dc6:	f7ec fe9f 	bl	8000b08 <__aeabi_dcmpeq>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d09d      	beq.n	8013d0a <_dtoa_r+0x63a>
 8013dce:	e7cf      	b.n	8013d70 <_dtoa_r+0x6a0>
 8013dd0:	9a08      	ldr	r2, [sp, #32]
 8013dd2:	2a00      	cmp	r2, #0
 8013dd4:	f000 80d7 	beq.w	8013f86 <_dtoa_r+0x8b6>
 8013dd8:	9a06      	ldr	r2, [sp, #24]
 8013dda:	2a01      	cmp	r2, #1
 8013ddc:	f300 80ba 	bgt.w	8013f54 <_dtoa_r+0x884>
 8013de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	f000 80b2 	beq.w	8013f4c <_dtoa_r+0x87c>
 8013de8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013dec:	9e07      	ldr	r6, [sp, #28]
 8013dee:	9d04      	ldr	r5, [sp, #16]
 8013df0:	9a04      	ldr	r2, [sp, #16]
 8013df2:	441a      	add	r2, r3
 8013df4:	9204      	str	r2, [sp, #16]
 8013df6:	9a05      	ldr	r2, [sp, #20]
 8013df8:	2101      	movs	r1, #1
 8013dfa:	441a      	add	r2, r3
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	9205      	str	r2, [sp, #20]
 8013e00:	f000 fb6a 	bl	80144d8 <__i2b>
 8013e04:	4607      	mov	r7, r0
 8013e06:	2d00      	cmp	r5, #0
 8013e08:	dd0c      	ble.n	8013e24 <_dtoa_r+0x754>
 8013e0a:	9b05      	ldr	r3, [sp, #20]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	dd09      	ble.n	8013e24 <_dtoa_r+0x754>
 8013e10:	42ab      	cmp	r3, r5
 8013e12:	9a04      	ldr	r2, [sp, #16]
 8013e14:	bfa8      	it	ge
 8013e16:	462b      	movge	r3, r5
 8013e18:	1ad2      	subs	r2, r2, r3
 8013e1a:	9204      	str	r2, [sp, #16]
 8013e1c:	9a05      	ldr	r2, [sp, #20]
 8013e1e:	1aed      	subs	r5, r5, r3
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	9305      	str	r3, [sp, #20]
 8013e24:	9b07      	ldr	r3, [sp, #28]
 8013e26:	b31b      	cbz	r3, 8013e70 <_dtoa_r+0x7a0>
 8013e28:	9b08      	ldr	r3, [sp, #32]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	f000 80af 	beq.w	8013f8e <_dtoa_r+0x8be>
 8013e30:	2e00      	cmp	r6, #0
 8013e32:	dd13      	ble.n	8013e5c <_dtoa_r+0x78c>
 8013e34:	4639      	mov	r1, r7
 8013e36:	4632      	mov	r2, r6
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f000 fc0d 	bl	8014658 <__pow5mult>
 8013e3e:	ee18 2a10 	vmov	r2, s16
 8013e42:	4601      	mov	r1, r0
 8013e44:	4607      	mov	r7, r0
 8013e46:	4620      	mov	r0, r4
 8013e48:	f000 fb5c 	bl	8014504 <__multiply>
 8013e4c:	ee18 1a10 	vmov	r1, s16
 8013e50:	4680      	mov	r8, r0
 8013e52:	4620      	mov	r0, r4
 8013e54:	f000 fa88 	bl	8014368 <_Bfree>
 8013e58:	ee08 8a10 	vmov	s16, r8
 8013e5c:	9b07      	ldr	r3, [sp, #28]
 8013e5e:	1b9a      	subs	r2, r3, r6
 8013e60:	d006      	beq.n	8013e70 <_dtoa_r+0x7a0>
 8013e62:	ee18 1a10 	vmov	r1, s16
 8013e66:	4620      	mov	r0, r4
 8013e68:	f000 fbf6 	bl	8014658 <__pow5mult>
 8013e6c:	ee08 0a10 	vmov	s16, r0
 8013e70:	2101      	movs	r1, #1
 8013e72:	4620      	mov	r0, r4
 8013e74:	f000 fb30 	bl	80144d8 <__i2b>
 8013e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	4606      	mov	r6, r0
 8013e7e:	f340 8088 	ble.w	8013f92 <_dtoa_r+0x8c2>
 8013e82:	461a      	mov	r2, r3
 8013e84:	4601      	mov	r1, r0
 8013e86:	4620      	mov	r0, r4
 8013e88:	f000 fbe6 	bl	8014658 <__pow5mult>
 8013e8c:	9b06      	ldr	r3, [sp, #24]
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	4606      	mov	r6, r0
 8013e92:	f340 8081 	ble.w	8013f98 <_dtoa_r+0x8c8>
 8013e96:	f04f 0800 	mov.w	r8, #0
 8013e9a:	6933      	ldr	r3, [r6, #16]
 8013e9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013ea0:	6918      	ldr	r0, [r3, #16]
 8013ea2:	f000 fac9 	bl	8014438 <__hi0bits>
 8013ea6:	f1c0 0020 	rsb	r0, r0, #32
 8013eaa:	9b05      	ldr	r3, [sp, #20]
 8013eac:	4418      	add	r0, r3
 8013eae:	f010 001f 	ands.w	r0, r0, #31
 8013eb2:	f000 8092 	beq.w	8013fda <_dtoa_r+0x90a>
 8013eb6:	f1c0 0320 	rsb	r3, r0, #32
 8013eba:	2b04      	cmp	r3, #4
 8013ebc:	f340 808a 	ble.w	8013fd4 <_dtoa_r+0x904>
 8013ec0:	f1c0 001c 	rsb	r0, r0, #28
 8013ec4:	9b04      	ldr	r3, [sp, #16]
 8013ec6:	4403      	add	r3, r0
 8013ec8:	9304      	str	r3, [sp, #16]
 8013eca:	9b05      	ldr	r3, [sp, #20]
 8013ecc:	4403      	add	r3, r0
 8013ece:	4405      	add	r5, r0
 8013ed0:	9305      	str	r3, [sp, #20]
 8013ed2:	9b04      	ldr	r3, [sp, #16]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	dd07      	ble.n	8013ee8 <_dtoa_r+0x818>
 8013ed8:	ee18 1a10 	vmov	r1, s16
 8013edc:	461a      	mov	r2, r3
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f000 fc14 	bl	801470c <__lshift>
 8013ee4:	ee08 0a10 	vmov	s16, r0
 8013ee8:	9b05      	ldr	r3, [sp, #20]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	dd05      	ble.n	8013efa <_dtoa_r+0x82a>
 8013eee:	4631      	mov	r1, r6
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f000 fc0a 	bl	801470c <__lshift>
 8013ef8:	4606      	mov	r6, r0
 8013efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d06e      	beq.n	8013fde <_dtoa_r+0x90e>
 8013f00:	ee18 0a10 	vmov	r0, s16
 8013f04:	4631      	mov	r1, r6
 8013f06:	f000 fc71 	bl	80147ec <__mcmp>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	da67      	bge.n	8013fde <_dtoa_r+0x90e>
 8013f0e:	9b00      	ldr	r3, [sp, #0]
 8013f10:	3b01      	subs	r3, #1
 8013f12:	ee18 1a10 	vmov	r1, s16
 8013f16:	9300      	str	r3, [sp, #0]
 8013f18:	220a      	movs	r2, #10
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	f000 fa45 	bl	80143ac <__multadd>
 8013f22:	9b08      	ldr	r3, [sp, #32]
 8013f24:	ee08 0a10 	vmov	s16, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 81b1 	beq.w	8014290 <_dtoa_r+0xbc0>
 8013f2e:	2300      	movs	r3, #0
 8013f30:	4639      	mov	r1, r7
 8013f32:	220a      	movs	r2, #10
 8013f34:	4620      	mov	r0, r4
 8013f36:	f000 fa39 	bl	80143ac <__multadd>
 8013f3a:	9b02      	ldr	r3, [sp, #8]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	4607      	mov	r7, r0
 8013f40:	f300 808e 	bgt.w	8014060 <_dtoa_r+0x990>
 8013f44:	9b06      	ldr	r3, [sp, #24]
 8013f46:	2b02      	cmp	r3, #2
 8013f48:	dc51      	bgt.n	8013fee <_dtoa_r+0x91e>
 8013f4a:	e089      	b.n	8014060 <_dtoa_r+0x990>
 8013f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013f52:	e74b      	b.n	8013dec <_dtoa_r+0x71c>
 8013f54:	9b03      	ldr	r3, [sp, #12]
 8013f56:	1e5e      	subs	r6, r3, #1
 8013f58:	9b07      	ldr	r3, [sp, #28]
 8013f5a:	42b3      	cmp	r3, r6
 8013f5c:	bfbf      	itttt	lt
 8013f5e:	9b07      	ldrlt	r3, [sp, #28]
 8013f60:	9607      	strlt	r6, [sp, #28]
 8013f62:	1af2      	sublt	r2, r6, r3
 8013f64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013f66:	bfb6      	itet	lt
 8013f68:	189b      	addlt	r3, r3, r2
 8013f6a:	1b9e      	subge	r6, r3, r6
 8013f6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013f6e:	9b03      	ldr	r3, [sp, #12]
 8013f70:	bfb8      	it	lt
 8013f72:	2600      	movlt	r6, #0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	bfb7      	itett	lt
 8013f78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013f7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013f80:	1a9d      	sublt	r5, r3, r2
 8013f82:	2300      	movlt	r3, #0
 8013f84:	e734      	b.n	8013df0 <_dtoa_r+0x720>
 8013f86:	9e07      	ldr	r6, [sp, #28]
 8013f88:	9d04      	ldr	r5, [sp, #16]
 8013f8a:	9f08      	ldr	r7, [sp, #32]
 8013f8c:	e73b      	b.n	8013e06 <_dtoa_r+0x736>
 8013f8e:	9a07      	ldr	r2, [sp, #28]
 8013f90:	e767      	b.n	8013e62 <_dtoa_r+0x792>
 8013f92:	9b06      	ldr	r3, [sp, #24]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	dc18      	bgt.n	8013fca <_dtoa_r+0x8fa>
 8013f98:	f1ba 0f00 	cmp.w	sl, #0
 8013f9c:	d115      	bne.n	8013fca <_dtoa_r+0x8fa>
 8013f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fa2:	b993      	cbnz	r3, 8013fca <_dtoa_r+0x8fa>
 8013fa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013fa8:	0d1b      	lsrs	r3, r3, #20
 8013faa:	051b      	lsls	r3, r3, #20
 8013fac:	b183      	cbz	r3, 8013fd0 <_dtoa_r+0x900>
 8013fae:	9b04      	ldr	r3, [sp, #16]
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	9304      	str	r3, [sp, #16]
 8013fb4:	9b05      	ldr	r3, [sp, #20]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	9305      	str	r3, [sp, #20]
 8013fba:	f04f 0801 	mov.w	r8, #1
 8013fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f47f af6a 	bne.w	8013e9a <_dtoa_r+0x7ca>
 8013fc6:	2001      	movs	r0, #1
 8013fc8:	e76f      	b.n	8013eaa <_dtoa_r+0x7da>
 8013fca:	f04f 0800 	mov.w	r8, #0
 8013fce:	e7f6      	b.n	8013fbe <_dtoa_r+0x8ee>
 8013fd0:	4698      	mov	r8, r3
 8013fd2:	e7f4      	b.n	8013fbe <_dtoa_r+0x8ee>
 8013fd4:	f43f af7d 	beq.w	8013ed2 <_dtoa_r+0x802>
 8013fd8:	4618      	mov	r0, r3
 8013fda:	301c      	adds	r0, #28
 8013fdc:	e772      	b.n	8013ec4 <_dtoa_r+0x7f4>
 8013fde:	9b03      	ldr	r3, [sp, #12]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	dc37      	bgt.n	8014054 <_dtoa_r+0x984>
 8013fe4:	9b06      	ldr	r3, [sp, #24]
 8013fe6:	2b02      	cmp	r3, #2
 8013fe8:	dd34      	ble.n	8014054 <_dtoa_r+0x984>
 8013fea:	9b03      	ldr	r3, [sp, #12]
 8013fec:	9302      	str	r3, [sp, #8]
 8013fee:	9b02      	ldr	r3, [sp, #8]
 8013ff0:	b96b      	cbnz	r3, 801400e <_dtoa_r+0x93e>
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	2205      	movs	r2, #5
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f000 f9d8 	bl	80143ac <__multadd>
 8013ffc:	4601      	mov	r1, r0
 8013ffe:	4606      	mov	r6, r0
 8014000:	ee18 0a10 	vmov	r0, s16
 8014004:	f000 fbf2 	bl	80147ec <__mcmp>
 8014008:	2800      	cmp	r0, #0
 801400a:	f73f adbb 	bgt.w	8013b84 <_dtoa_r+0x4b4>
 801400e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014010:	9d01      	ldr	r5, [sp, #4]
 8014012:	43db      	mvns	r3, r3
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	f04f 0800 	mov.w	r8, #0
 801401a:	4631      	mov	r1, r6
 801401c:	4620      	mov	r0, r4
 801401e:	f000 f9a3 	bl	8014368 <_Bfree>
 8014022:	2f00      	cmp	r7, #0
 8014024:	f43f aea4 	beq.w	8013d70 <_dtoa_r+0x6a0>
 8014028:	f1b8 0f00 	cmp.w	r8, #0
 801402c:	d005      	beq.n	801403a <_dtoa_r+0x96a>
 801402e:	45b8      	cmp	r8, r7
 8014030:	d003      	beq.n	801403a <_dtoa_r+0x96a>
 8014032:	4641      	mov	r1, r8
 8014034:	4620      	mov	r0, r4
 8014036:	f000 f997 	bl	8014368 <_Bfree>
 801403a:	4639      	mov	r1, r7
 801403c:	4620      	mov	r0, r4
 801403e:	f000 f993 	bl	8014368 <_Bfree>
 8014042:	e695      	b.n	8013d70 <_dtoa_r+0x6a0>
 8014044:	2600      	movs	r6, #0
 8014046:	4637      	mov	r7, r6
 8014048:	e7e1      	b.n	801400e <_dtoa_r+0x93e>
 801404a:	9700      	str	r7, [sp, #0]
 801404c:	4637      	mov	r7, r6
 801404e:	e599      	b.n	8013b84 <_dtoa_r+0x4b4>
 8014050:	40240000 	.word	0x40240000
 8014054:	9b08      	ldr	r3, [sp, #32]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 80ca 	beq.w	80141f0 <_dtoa_r+0xb20>
 801405c:	9b03      	ldr	r3, [sp, #12]
 801405e:	9302      	str	r3, [sp, #8]
 8014060:	2d00      	cmp	r5, #0
 8014062:	dd05      	ble.n	8014070 <_dtoa_r+0x9a0>
 8014064:	4639      	mov	r1, r7
 8014066:	462a      	mov	r2, r5
 8014068:	4620      	mov	r0, r4
 801406a:	f000 fb4f 	bl	801470c <__lshift>
 801406e:	4607      	mov	r7, r0
 8014070:	f1b8 0f00 	cmp.w	r8, #0
 8014074:	d05b      	beq.n	801412e <_dtoa_r+0xa5e>
 8014076:	6879      	ldr	r1, [r7, #4]
 8014078:	4620      	mov	r0, r4
 801407a:	f000 f935 	bl	80142e8 <_Balloc>
 801407e:	4605      	mov	r5, r0
 8014080:	b928      	cbnz	r0, 801408e <_dtoa_r+0x9be>
 8014082:	4b87      	ldr	r3, [pc, #540]	; (80142a0 <_dtoa_r+0xbd0>)
 8014084:	4602      	mov	r2, r0
 8014086:	f240 21ea 	movw	r1, #746	; 0x2ea
 801408a:	f7ff bb3b 	b.w	8013704 <_dtoa_r+0x34>
 801408e:	693a      	ldr	r2, [r7, #16]
 8014090:	3202      	adds	r2, #2
 8014092:	0092      	lsls	r2, r2, #2
 8014094:	f107 010c 	add.w	r1, r7, #12
 8014098:	300c      	adds	r0, #12
 801409a:	f000 f90b 	bl	80142b4 <memcpy>
 801409e:	2201      	movs	r2, #1
 80140a0:	4629      	mov	r1, r5
 80140a2:	4620      	mov	r0, r4
 80140a4:	f000 fb32 	bl	801470c <__lshift>
 80140a8:	9b01      	ldr	r3, [sp, #4]
 80140aa:	f103 0901 	add.w	r9, r3, #1
 80140ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80140b2:	4413      	add	r3, r2
 80140b4:	9305      	str	r3, [sp, #20]
 80140b6:	f00a 0301 	and.w	r3, sl, #1
 80140ba:	46b8      	mov	r8, r7
 80140bc:	9304      	str	r3, [sp, #16]
 80140be:	4607      	mov	r7, r0
 80140c0:	4631      	mov	r1, r6
 80140c2:	ee18 0a10 	vmov	r0, s16
 80140c6:	f7ff fa75 	bl	80135b4 <quorem>
 80140ca:	4641      	mov	r1, r8
 80140cc:	9002      	str	r0, [sp, #8]
 80140ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80140d2:	ee18 0a10 	vmov	r0, s16
 80140d6:	f000 fb89 	bl	80147ec <__mcmp>
 80140da:	463a      	mov	r2, r7
 80140dc:	9003      	str	r0, [sp, #12]
 80140de:	4631      	mov	r1, r6
 80140e0:	4620      	mov	r0, r4
 80140e2:	f000 fb9f 	bl	8014824 <__mdiff>
 80140e6:	68c2      	ldr	r2, [r0, #12]
 80140e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80140ec:	4605      	mov	r5, r0
 80140ee:	bb02      	cbnz	r2, 8014132 <_dtoa_r+0xa62>
 80140f0:	4601      	mov	r1, r0
 80140f2:	ee18 0a10 	vmov	r0, s16
 80140f6:	f000 fb79 	bl	80147ec <__mcmp>
 80140fa:	4602      	mov	r2, r0
 80140fc:	4629      	mov	r1, r5
 80140fe:	4620      	mov	r0, r4
 8014100:	9207      	str	r2, [sp, #28]
 8014102:	f000 f931 	bl	8014368 <_Bfree>
 8014106:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801410a:	ea43 0102 	orr.w	r1, r3, r2
 801410e:	9b04      	ldr	r3, [sp, #16]
 8014110:	430b      	orrs	r3, r1
 8014112:	464d      	mov	r5, r9
 8014114:	d10f      	bne.n	8014136 <_dtoa_r+0xa66>
 8014116:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801411a:	d02a      	beq.n	8014172 <_dtoa_r+0xaa2>
 801411c:	9b03      	ldr	r3, [sp, #12]
 801411e:	2b00      	cmp	r3, #0
 8014120:	dd02      	ble.n	8014128 <_dtoa_r+0xa58>
 8014122:	9b02      	ldr	r3, [sp, #8]
 8014124:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014128:	f88b a000 	strb.w	sl, [fp]
 801412c:	e775      	b.n	801401a <_dtoa_r+0x94a>
 801412e:	4638      	mov	r0, r7
 8014130:	e7ba      	b.n	80140a8 <_dtoa_r+0x9d8>
 8014132:	2201      	movs	r2, #1
 8014134:	e7e2      	b.n	80140fc <_dtoa_r+0xa2c>
 8014136:	9b03      	ldr	r3, [sp, #12]
 8014138:	2b00      	cmp	r3, #0
 801413a:	db04      	blt.n	8014146 <_dtoa_r+0xa76>
 801413c:	9906      	ldr	r1, [sp, #24]
 801413e:	430b      	orrs	r3, r1
 8014140:	9904      	ldr	r1, [sp, #16]
 8014142:	430b      	orrs	r3, r1
 8014144:	d122      	bne.n	801418c <_dtoa_r+0xabc>
 8014146:	2a00      	cmp	r2, #0
 8014148:	ddee      	ble.n	8014128 <_dtoa_r+0xa58>
 801414a:	ee18 1a10 	vmov	r1, s16
 801414e:	2201      	movs	r2, #1
 8014150:	4620      	mov	r0, r4
 8014152:	f000 fadb 	bl	801470c <__lshift>
 8014156:	4631      	mov	r1, r6
 8014158:	ee08 0a10 	vmov	s16, r0
 801415c:	f000 fb46 	bl	80147ec <__mcmp>
 8014160:	2800      	cmp	r0, #0
 8014162:	dc03      	bgt.n	801416c <_dtoa_r+0xa9c>
 8014164:	d1e0      	bne.n	8014128 <_dtoa_r+0xa58>
 8014166:	f01a 0f01 	tst.w	sl, #1
 801416a:	d0dd      	beq.n	8014128 <_dtoa_r+0xa58>
 801416c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014170:	d1d7      	bne.n	8014122 <_dtoa_r+0xa52>
 8014172:	2339      	movs	r3, #57	; 0x39
 8014174:	f88b 3000 	strb.w	r3, [fp]
 8014178:	462b      	mov	r3, r5
 801417a:	461d      	mov	r5, r3
 801417c:	3b01      	subs	r3, #1
 801417e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014182:	2a39      	cmp	r2, #57	; 0x39
 8014184:	d071      	beq.n	801426a <_dtoa_r+0xb9a>
 8014186:	3201      	adds	r2, #1
 8014188:	701a      	strb	r2, [r3, #0]
 801418a:	e746      	b.n	801401a <_dtoa_r+0x94a>
 801418c:	2a00      	cmp	r2, #0
 801418e:	dd07      	ble.n	80141a0 <_dtoa_r+0xad0>
 8014190:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014194:	d0ed      	beq.n	8014172 <_dtoa_r+0xaa2>
 8014196:	f10a 0301 	add.w	r3, sl, #1
 801419a:	f88b 3000 	strb.w	r3, [fp]
 801419e:	e73c      	b.n	801401a <_dtoa_r+0x94a>
 80141a0:	9b05      	ldr	r3, [sp, #20]
 80141a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80141a6:	4599      	cmp	r9, r3
 80141a8:	d047      	beq.n	801423a <_dtoa_r+0xb6a>
 80141aa:	ee18 1a10 	vmov	r1, s16
 80141ae:	2300      	movs	r3, #0
 80141b0:	220a      	movs	r2, #10
 80141b2:	4620      	mov	r0, r4
 80141b4:	f000 f8fa 	bl	80143ac <__multadd>
 80141b8:	45b8      	cmp	r8, r7
 80141ba:	ee08 0a10 	vmov	s16, r0
 80141be:	f04f 0300 	mov.w	r3, #0
 80141c2:	f04f 020a 	mov.w	r2, #10
 80141c6:	4641      	mov	r1, r8
 80141c8:	4620      	mov	r0, r4
 80141ca:	d106      	bne.n	80141da <_dtoa_r+0xb0a>
 80141cc:	f000 f8ee 	bl	80143ac <__multadd>
 80141d0:	4680      	mov	r8, r0
 80141d2:	4607      	mov	r7, r0
 80141d4:	f109 0901 	add.w	r9, r9, #1
 80141d8:	e772      	b.n	80140c0 <_dtoa_r+0x9f0>
 80141da:	f000 f8e7 	bl	80143ac <__multadd>
 80141de:	4639      	mov	r1, r7
 80141e0:	4680      	mov	r8, r0
 80141e2:	2300      	movs	r3, #0
 80141e4:	220a      	movs	r2, #10
 80141e6:	4620      	mov	r0, r4
 80141e8:	f000 f8e0 	bl	80143ac <__multadd>
 80141ec:	4607      	mov	r7, r0
 80141ee:	e7f1      	b.n	80141d4 <_dtoa_r+0xb04>
 80141f0:	9b03      	ldr	r3, [sp, #12]
 80141f2:	9302      	str	r3, [sp, #8]
 80141f4:	9d01      	ldr	r5, [sp, #4]
 80141f6:	ee18 0a10 	vmov	r0, s16
 80141fa:	4631      	mov	r1, r6
 80141fc:	f7ff f9da 	bl	80135b4 <quorem>
 8014200:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014204:	9b01      	ldr	r3, [sp, #4]
 8014206:	f805 ab01 	strb.w	sl, [r5], #1
 801420a:	1aea      	subs	r2, r5, r3
 801420c:	9b02      	ldr	r3, [sp, #8]
 801420e:	4293      	cmp	r3, r2
 8014210:	dd09      	ble.n	8014226 <_dtoa_r+0xb56>
 8014212:	ee18 1a10 	vmov	r1, s16
 8014216:	2300      	movs	r3, #0
 8014218:	220a      	movs	r2, #10
 801421a:	4620      	mov	r0, r4
 801421c:	f000 f8c6 	bl	80143ac <__multadd>
 8014220:	ee08 0a10 	vmov	s16, r0
 8014224:	e7e7      	b.n	80141f6 <_dtoa_r+0xb26>
 8014226:	9b02      	ldr	r3, [sp, #8]
 8014228:	2b00      	cmp	r3, #0
 801422a:	bfc8      	it	gt
 801422c:	461d      	movgt	r5, r3
 801422e:	9b01      	ldr	r3, [sp, #4]
 8014230:	bfd8      	it	le
 8014232:	2501      	movle	r5, #1
 8014234:	441d      	add	r5, r3
 8014236:	f04f 0800 	mov.w	r8, #0
 801423a:	ee18 1a10 	vmov	r1, s16
 801423e:	2201      	movs	r2, #1
 8014240:	4620      	mov	r0, r4
 8014242:	f000 fa63 	bl	801470c <__lshift>
 8014246:	4631      	mov	r1, r6
 8014248:	ee08 0a10 	vmov	s16, r0
 801424c:	f000 face 	bl	80147ec <__mcmp>
 8014250:	2800      	cmp	r0, #0
 8014252:	dc91      	bgt.n	8014178 <_dtoa_r+0xaa8>
 8014254:	d102      	bne.n	801425c <_dtoa_r+0xb8c>
 8014256:	f01a 0f01 	tst.w	sl, #1
 801425a:	d18d      	bne.n	8014178 <_dtoa_r+0xaa8>
 801425c:	462b      	mov	r3, r5
 801425e:	461d      	mov	r5, r3
 8014260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014264:	2a30      	cmp	r2, #48	; 0x30
 8014266:	d0fa      	beq.n	801425e <_dtoa_r+0xb8e>
 8014268:	e6d7      	b.n	801401a <_dtoa_r+0x94a>
 801426a:	9a01      	ldr	r2, [sp, #4]
 801426c:	429a      	cmp	r2, r3
 801426e:	d184      	bne.n	801417a <_dtoa_r+0xaaa>
 8014270:	9b00      	ldr	r3, [sp, #0]
 8014272:	3301      	adds	r3, #1
 8014274:	9300      	str	r3, [sp, #0]
 8014276:	2331      	movs	r3, #49	; 0x31
 8014278:	7013      	strb	r3, [r2, #0]
 801427a:	e6ce      	b.n	801401a <_dtoa_r+0x94a>
 801427c:	4b09      	ldr	r3, [pc, #36]	; (80142a4 <_dtoa_r+0xbd4>)
 801427e:	f7ff ba95 	b.w	80137ac <_dtoa_r+0xdc>
 8014282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014284:	2b00      	cmp	r3, #0
 8014286:	f47f aa6e 	bne.w	8013766 <_dtoa_r+0x96>
 801428a:	4b07      	ldr	r3, [pc, #28]	; (80142a8 <_dtoa_r+0xbd8>)
 801428c:	f7ff ba8e 	b.w	80137ac <_dtoa_r+0xdc>
 8014290:	9b02      	ldr	r3, [sp, #8]
 8014292:	2b00      	cmp	r3, #0
 8014294:	dcae      	bgt.n	80141f4 <_dtoa_r+0xb24>
 8014296:	9b06      	ldr	r3, [sp, #24]
 8014298:	2b02      	cmp	r3, #2
 801429a:	f73f aea8 	bgt.w	8013fee <_dtoa_r+0x91e>
 801429e:	e7a9      	b.n	80141f4 <_dtoa_r+0xb24>
 80142a0:	08015e27 	.word	0x08015e27
 80142a4:	08015d84 	.word	0x08015d84
 80142a8:	08015da8 	.word	0x08015da8

080142ac <_localeconv_r>:
 80142ac:	4800      	ldr	r0, [pc, #0]	; (80142b0 <_localeconv_r+0x4>)
 80142ae:	4770      	bx	lr
 80142b0:	20000280 	.word	0x20000280

080142b4 <memcpy>:
 80142b4:	440a      	add	r2, r1
 80142b6:	4291      	cmp	r1, r2
 80142b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80142bc:	d100      	bne.n	80142c0 <memcpy+0xc>
 80142be:	4770      	bx	lr
 80142c0:	b510      	push	{r4, lr}
 80142c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142ca:	4291      	cmp	r1, r2
 80142cc:	d1f9      	bne.n	80142c2 <memcpy+0xe>
 80142ce:	bd10      	pop	{r4, pc}

080142d0 <__malloc_lock>:
 80142d0:	4801      	ldr	r0, [pc, #4]	; (80142d8 <__malloc_lock+0x8>)
 80142d2:	f000 bd30 	b.w	8014d36 <__retarget_lock_acquire_recursive>
 80142d6:	bf00      	nop
 80142d8:	20004a00 	.word	0x20004a00

080142dc <__malloc_unlock>:
 80142dc:	4801      	ldr	r0, [pc, #4]	; (80142e4 <__malloc_unlock+0x8>)
 80142de:	f000 bd2b 	b.w	8014d38 <__retarget_lock_release_recursive>
 80142e2:	bf00      	nop
 80142e4:	20004a00 	.word	0x20004a00

080142e8 <_Balloc>:
 80142e8:	b570      	push	{r4, r5, r6, lr}
 80142ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142ec:	4604      	mov	r4, r0
 80142ee:	460d      	mov	r5, r1
 80142f0:	b976      	cbnz	r6, 8014310 <_Balloc+0x28>
 80142f2:	2010      	movs	r0, #16
 80142f4:	f7fe fbcc 	bl	8012a90 <malloc>
 80142f8:	4602      	mov	r2, r0
 80142fa:	6260      	str	r0, [r4, #36]	; 0x24
 80142fc:	b920      	cbnz	r0, 8014308 <_Balloc+0x20>
 80142fe:	4b18      	ldr	r3, [pc, #96]	; (8014360 <_Balloc+0x78>)
 8014300:	4818      	ldr	r0, [pc, #96]	; (8014364 <_Balloc+0x7c>)
 8014302:	2166      	movs	r1, #102	; 0x66
 8014304:	f000 fce6 	bl	8014cd4 <__assert_func>
 8014308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801430c:	6006      	str	r6, [r0, #0]
 801430e:	60c6      	str	r6, [r0, #12]
 8014310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014312:	68f3      	ldr	r3, [r6, #12]
 8014314:	b183      	cbz	r3, 8014338 <_Balloc+0x50>
 8014316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801431e:	b9b8      	cbnz	r0, 8014350 <_Balloc+0x68>
 8014320:	2101      	movs	r1, #1
 8014322:	fa01 f605 	lsl.w	r6, r1, r5
 8014326:	1d72      	adds	r2, r6, #5
 8014328:	0092      	lsls	r2, r2, #2
 801432a:	4620      	mov	r0, r4
 801432c:	f000 fb60 	bl	80149f0 <_calloc_r>
 8014330:	b160      	cbz	r0, 801434c <_Balloc+0x64>
 8014332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014336:	e00e      	b.n	8014356 <_Balloc+0x6e>
 8014338:	2221      	movs	r2, #33	; 0x21
 801433a:	2104      	movs	r1, #4
 801433c:	4620      	mov	r0, r4
 801433e:	f000 fb57 	bl	80149f0 <_calloc_r>
 8014342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014344:	60f0      	str	r0, [r6, #12]
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1e4      	bne.n	8014316 <_Balloc+0x2e>
 801434c:	2000      	movs	r0, #0
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	6802      	ldr	r2, [r0, #0]
 8014352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014356:	2300      	movs	r3, #0
 8014358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801435c:	e7f7      	b.n	801434e <_Balloc+0x66>
 801435e:	bf00      	nop
 8014360:	08015db5 	.word	0x08015db5
 8014364:	08015e38 	.word	0x08015e38

08014368 <_Bfree>:
 8014368:	b570      	push	{r4, r5, r6, lr}
 801436a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801436c:	4605      	mov	r5, r0
 801436e:	460c      	mov	r4, r1
 8014370:	b976      	cbnz	r6, 8014390 <_Bfree+0x28>
 8014372:	2010      	movs	r0, #16
 8014374:	f7fe fb8c 	bl	8012a90 <malloc>
 8014378:	4602      	mov	r2, r0
 801437a:	6268      	str	r0, [r5, #36]	; 0x24
 801437c:	b920      	cbnz	r0, 8014388 <_Bfree+0x20>
 801437e:	4b09      	ldr	r3, [pc, #36]	; (80143a4 <_Bfree+0x3c>)
 8014380:	4809      	ldr	r0, [pc, #36]	; (80143a8 <_Bfree+0x40>)
 8014382:	218a      	movs	r1, #138	; 0x8a
 8014384:	f000 fca6 	bl	8014cd4 <__assert_func>
 8014388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801438c:	6006      	str	r6, [r0, #0]
 801438e:	60c6      	str	r6, [r0, #12]
 8014390:	b13c      	cbz	r4, 80143a2 <_Bfree+0x3a>
 8014392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014394:	6862      	ldr	r2, [r4, #4]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801439c:	6021      	str	r1, [r4, #0]
 801439e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80143a2:	bd70      	pop	{r4, r5, r6, pc}
 80143a4:	08015db5 	.word	0x08015db5
 80143a8:	08015e38 	.word	0x08015e38

080143ac <__multadd>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	690d      	ldr	r5, [r1, #16]
 80143b2:	4607      	mov	r7, r0
 80143b4:	460c      	mov	r4, r1
 80143b6:	461e      	mov	r6, r3
 80143b8:	f101 0c14 	add.w	ip, r1, #20
 80143bc:	2000      	movs	r0, #0
 80143be:	f8dc 3000 	ldr.w	r3, [ip]
 80143c2:	b299      	uxth	r1, r3
 80143c4:	fb02 6101 	mla	r1, r2, r1, r6
 80143c8:	0c1e      	lsrs	r6, r3, #16
 80143ca:	0c0b      	lsrs	r3, r1, #16
 80143cc:	fb02 3306 	mla	r3, r2, r6, r3
 80143d0:	b289      	uxth	r1, r1
 80143d2:	3001      	adds	r0, #1
 80143d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143d8:	4285      	cmp	r5, r0
 80143da:	f84c 1b04 	str.w	r1, [ip], #4
 80143de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80143e2:	dcec      	bgt.n	80143be <__multadd+0x12>
 80143e4:	b30e      	cbz	r6, 801442a <__multadd+0x7e>
 80143e6:	68a3      	ldr	r3, [r4, #8]
 80143e8:	42ab      	cmp	r3, r5
 80143ea:	dc19      	bgt.n	8014420 <__multadd+0x74>
 80143ec:	6861      	ldr	r1, [r4, #4]
 80143ee:	4638      	mov	r0, r7
 80143f0:	3101      	adds	r1, #1
 80143f2:	f7ff ff79 	bl	80142e8 <_Balloc>
 80143f6:	4680      	mov	r8, r0
 80143f8:	b928      	cbnz	r0, 8014406 <__multadd+0x5a>
 80143fa:	4602      	mov	r2, r0
 80143fc:	4b0c      	ldr	r3, [pc, #48]	; (8014430 <__multadd+0x84>)
 80143fe:	480d      	ldr	r0, [pc, #52]	; (8014434 <__multadd+0x88>)
 8014400:	21b5      	movs	r1, #181	; 0xb5
 8014402:	f000 fc67 	bl	8014cd4 <__assert_func>
 8014406:	6922      	ldr	r2, [r4, #16]
 8014408:	3202      	adds	r2, #2
 801440a:	f104 010c 	add.w	r1, r4, #12
 801440e:	0092      	lsls	r2, r2, #2
 8014410:	300c      	adds	r0, #12
 8014412:	f7ff ff4f 	bl	80142b4 <memcpy>
 8014416:	4621      	mov	r1, r4
 8014418:	4638      	mov	r0, r7
 801441a:	f7ff ffa5 	bl	8014368 <_Bfree>
 801441e:	4644      	mov	r4, r8
 8014420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014424:	3501      	adds	r5, #1
 8014426:	615e      	str	r6, [r3, #20]
 8014428:	6125      	str	r5, [r4, #16]
 801442a:	4620      	mov	r0, r4
 801442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014430:	08015e27 	.word	0x08015e27
 8014434:	08015e38 	.word	0x08015e38

08014438 <__hi0bits>:
 8014438:	0c03      	lsrs	r3, r0, #16
 801443a:	041b      	lsls	r3, r3, #16
 801443c:	b9d3      	cbnz	r3, 8014474 <__hi0bits+0x3c>
 801443e:	0400      	lsls	r0, r0, #16
 8014440:	2310      	movs	r3, #16
 8014442:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014446:	bf04      	itt	eq
 8014448:	0200      	lsleq	r0, r0, #8
 801444a:	3308      	addeq	r3, #8
 801444c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014450:	bf04      	itt	eq
 8014452:	0100      	lsleq	r0, r0, #4
 8014454:	3304      	addeq	r3, #4
 8014456:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801445a:	bf04      	itt	eq
 801445c:	0080      	lsleq	r0, r0, #2
 801445e:	3302      	addeq	r3, #2
 8014460:	2800      	cmp	r0, #0
 8014462:	db05      	blt.n	8014470 <__hi0bits+0x38>
 8014464:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014468:	f103 0301 	add.w	r3, r3, #1
 801446c:	bf08      	it	eq
 801446e:	2320      	moveq	r3, #32
 8014470:	4618      	mov	r0, r3
 8014472:	4770      	bx	lr
 8014474:	2300      	movs	r3, #0
 8014476:	e7e4      	b.n	8014442 <__hi0bits+0xa>

08014478 <__lo0bits>:
 8014478:	6803      	ldr	r3, [r0, #0]
 801447a:	f013 0207 	ands.w	r2, r3, #7
 801447e:	4601      	mov	r1, r0
 8014480:	d00b      	beq.n	801449a <__lo0bits+0x22>
 8014482:	07da      	lsls	r2, r3, #31
 8014484:	d423      	bmi.n	80144ce <__lo0bits+0x56>
 8014486:	0798      	lsls	r0, r3, #30
 8014488:	bf49      	itett	mi
 801448a:	085b      	lsrmi	r3, r3, #1
 801448c:	089b      	lsrpl	r3, r3, #2
 801448e:	2001      	movmi	r0, #1
 8014490:	600b      	strmi	r3, [r1, #0]
 8014492:	bf5c      	itt	pl
 8014494:	600b      	strpl	r3, [r1, #0]
 8014496:	2002      	movpl	r0, #2
 8014498:	4770      	bx	lr
 801449a:	b298      	uxth	r0, r3
 801449c:	b9a8      	cbnz	r0, 80144ca <__lo0bits+0x52>
 801449e:	0c1b      	lsrs	r3, r3, #16
 80144a0:	2010      	movs	r0, #16
 80144a2:	b2da      	uxtb	r2, r3
 80144a4:	b90a      	cbnz	r2, 80144aa <__lo0bits+0x32>
 80144a6:	3008      	adds	r0, #8
 80144a8:	0a1b      	lsrs	r3, r3, #8
 80144aa:	071a      	lsls	r2, r3, #28
 80144ac:	bf04      	itt	eq
 80144ae:	091b      	lsreq	r3, r3, #4
 80144b0:	3004      	addeq	r0, #4
 80144b2:	079a      	lsls	r2, r3, #30
 80144b4:	bf04      	itt	eq
 80144b6:	089b      	lsreq	r3, r3, #2
 80144b8:	3002      	addeq	r0, #2
 80144ba:	07da      	lsls	r2, r3, #31
 80144bc:	d403      	bmi.n	80144c6 <__lo0bits+0x4e>
 80144be:	085b      	lsrs	r3, r3, #1
 80144c0:	f100 0001 	add.w	r0, r0, #1
 80144c4:	d005      	beq.n	80144d2 <__lo0bits+0x5a>
 80144c6:	600b      	str	r3, [r1, #0]
 80144c8:	4770      	bx	lr
 80144ca:	4610      	mov	r0, r2
 80144cc:	e7e9      	b.n	80144a2 <__lo0bits+0x2a>
 80144ce:	2000      	movs	r0, #0
 80144d0:	4770      	bx	lr
 80144d2:	2020      	movs	r0, #32
 80144d4:	4770      	bx	lr
	...

080144d8 <__i2b>:
 80144d8:	b510      	push	{r4, lr}
 80144da:	460c      	mov	r4, r1
 80144dc:	2101      	movs	r1, #1
 80144de:	f7ff ff03 	bl	80142e8 <_Balloc>
 80144e2:	4602      	mov	r2, r0
 80144e4:	b928      	cbnz	r0, 80144f2 <__i2b+0x1a>
 80144e6:	4b05      	ldr	r3, [pc, #20]	; (80144fc <__i2b+0x24>)
 80144e8:	4805      	ldr	r0, [pc, #20]	; (8014500 <__i2b+0x28>)
 80144ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144ee:	f000 fbf1 	bl	8014cd4 <__assert_func>
 80144f2:	2301      	movs	r3, #1
 80144f4:	6144      	str	r4, [r0, #20]
 80144f6:	6103      	str	r3, [r0, #16]
 80144f8:	bd10      	pop	{r4, pc}
 80144fa:	bf00      	nop
 80144fc:	08015e27 	.word	0x08015e27
 8014500:	08015e38 	.word	0x08015e38

08014504 <__multiply>:
 8014504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014508:	4691      	mov	r9, r2
 801450a:	690a      	ldr	r2, [r1, #16]
 801450c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014510:	429a      	cmp	r2, r3
 8014512:	bfb8      	it	lt
 8014514:	460b      	movlt	r3, r1
 8014516:	460c      	mov	r4, r1
 8014518:	bfbc      	itt	lt
 801451a:	464c      	movlt	r4, r9
 801451c:	4699      	movlt	r9, r3
 801451e:	6927      	ldr	r7, [r4, #16]
 8014520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014524:	68a3      	ldr	r3, [r4, #8]
 8014526:	6861      	ldr	r1, [r4, #4]
 8014528:	eb07 060a 	add.w	r6, r7, sl
 801452c:	42b3      	cmp	r3, r6
 801452e:	b085      	sub	sp, #20
 8014530:	bfb8      	it	lt
 8014532:	3101      	addlt	r1, #1
 8014534:	f7ff fed8 	bl	80142e8 <_Balloc>
 8014538:	b930      	cbnz	r0, 8014548 <__multiply+0x44>
 801453a:	4602      	mov	r2, r0
 801453c:	4b44      	ldr	r3, [pc, #272]	; (8014650 <__multiply+0x14c>)
 801453e:	4845      	ldr	r0, [pc, #276]	; (8014654 <__multiply+0x150>)
 8014540:	f240 115d 	movw	r1, #349	; 0x15d
 8014544:	f000 fbc6 	bl	8014cd4 <__assert_func>
 8014548:	f100 0514 	add.w	r5, r0, #20
 801454c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014550:	462b      	mov	r3, r5
 8014552:	2200      	movs	r2, #0
 8014554:	4543      	cmp	r3, r8
 8014556:	d321      	bcc.n	801459c <__multiply+0x98>
 8014558:	f104 0314 	add.w	r3, r4, #20
 801455c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014560:	f109 0314 	add.w	r3, r9, #20
 8014564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014568:	9202      	str	r2, [sp, #8]
 801456a:	1b3a      	subs	r2, r7, r4
 801456c:	3a15      	subs	r2, #21
 801456e:	f022 0203 	bic.w	r2, r2, #3
 8014572:	3204      	adds	r2, #4
 8014574:	f104 0115 	add.w	r1, r4, #21
 8014578:	428f      	cmp	r7, r1
 801457a:	bf38      	it	cc
 801457c:	2204      	movcc	r2, #4
 801457e:	9201      	str	r2, [sp, #4]
 8014580:	9a02      	ldr	r2, [sp, #8]
 8014582:	9303      	str	r3, [sp, #12]
 8014584:	429a      	cmp	r2, r3
 8014586:	d80c      	bhi.n	80145a2 <__multiply+0x9e>
 8014588:	2e00      	cmp	r6, #0
 801458a:	dd03      	ble.n	8014594 <__multiply+0x90>
 801458c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014590:	2b00      	cmp	r3, #0
 8014592:	d05a      	beq.n	801464a <__multiply+0x146>
 8014594:	6106      	str	r6, [r0, #16]
 8014596:	b005      	add	sp, #20
 8014598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459c:	f843 2b04 	str.w	r2, [r3], #4
 80145a0:	e7d8      	b.n	8014554 <__multiply+0x50>
 80145a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80145a6:	f1ba 0f00 	cmp.w	sl, #0
 80145aa:	d024      	beq.n	80145f6 <__multiply+0xf2>
 80145ac:	f104 0e14 	add.w	lr, r4, #20
 80145b0:	46a9      	mov	r9, r5
 80145b2:	f04f 0c00 	mov.w	ip, #0
 80145b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80145ba:	f8d9 1000 	ldr.w	r1, [r9]
 80145be:	fa1f fb82 	uxth.w	fp, r2
 80145c2:	b289      	uxth	r1, r1
 80145c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80145c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80145cc:	f8d9 2000 	ldr.w	r2, [r9]
 80145d0:	4461      	add	r1, ip
 80145d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80145da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80145de:	b289      	uxth	r1, r1
 80145e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80145e4:	4577      	cmp	r7, lr
 80145e6:	f849 1b04 	str.w	r1, [r9], #4
 80145ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80145ee:	d8e2      	bhi.n	80145b6 <__multiply+0xb2>
 80145f0:	9a01      	ldr	r2, [sp, #4]
 80145f2:	f845 c002 	str.w	ip, [r5, r2]
 80145f6:	9a03      	ldr	r2, [sp, #12]
 80145f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145fc:	3304      	adds	r3, #4
 80145fe:	f1b9 0f00 	cmp.w	r9, #0
 8014602:	d020      	beq.n	8014646 <__multiply+0x142>
 8014604:	6829      	ldr	r1, [r5, #0]
 8014606:	f104 0c14 	add.w	ip, r4, #20
 801460a:	46ae      	mov	lr, r5
 801460c:	f04f 0a00 	mov.w	sl, #0
 8014610:	f8bc b000 	ldrh.w	fp, [ip]
 8014614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014618:	fb09 220b 	mla	r2, r9, fp, r2
 801461c:	4492      	add	sl, r2
 801461e:	b289      	uxth	r1, r1
 8014620:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014624:	f84e 1b04 	str.w	r1, [lr], #4
 8014628:	f85c 2b04 	ldr.w	r2, [ip], #4
 801462c:	f8be 1000 	ldrh.w	r1, [lr]
 8014630:	0c12      	lsrs	r2, r2, #16
 8014632:	fb09 1102 	mla	r1, r9, r2, r1
 8014636:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801463a:	4567      	cmp	r7, ip
 801463c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014640:	d8e6      	bhi.n	8014610 <__multiply+0x10c>
 8014642:	9a01      	ldr	r2, [sp, #4]
 8014644:	50a9      	str	r1, [r5, r2]
 8014646:	3504      	adds	r5, #4
 8014648:	e79a      	b.n	8014580 <__multiply+0x7c>
 801464a:	3e01      	subs	r6, #1
 801464c:	e79c      	b.n	8014588 <__multiply+0x84>
 801464e:	bf00      	nop
 8014650:	08015e27 	.word	0x08015e27
 8014654:	08015e38 	.word	0x08015e38

08014658 <__pow5mult>:
 8014658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801465c:	4615      	mov	r5, r2
 801465e:	f012 0203 	ands.w	r2, r2, #3
 8014662:	4606      	mov	r6, r0
 8014664:	460f      	mov	r7, r1
 8014666:	d007      	beq.n	8014678 <__pow5mult+0x20>
 8014668:	4c25      	ldr	r4, [pc, #148]	; (8014700 <__pow5mult+0xa8>)
 801466a:	3a01      	subs	r2, #1
 801466c:	2300      	movs	r3, #0
 801466e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014672:	f7ff fe9b 	bl	80143ac <__multadd>
 8014676:	4607      	mov	r7, r0
 8014678:	10ad      	asrs	r5, r5, #2
 801467a:	d03d      	beq.n	80146f8 <__pow5mult+0xa0>
 801467c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801467e:	b97c      	cbnz	r4, 80146a0 <__pow5mult+0x48>
 8014680:	2010      	movs	r0, #16
 8014682:	f7fe fa05 	bl	8012a90 <malloc>
 8014686:	4602      	mov	r2, r0
 8014688:	6270      	str	r0, [r6, #36]	; 0x24
 801468a:	b928      	cbnz	r0, 8014698 <__pow5mult+0x40>
 801468c:	4b1d      	ldr	r3, [pc, #116]	; (8014704 <__pow5mult+0xac>)
 801468e:	481e      	ldr	r0, [pc, #120]	; (8014708 <__pow5mult+0xb0>)
 8014690:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014694:	f000 fb1e 	bl	8014cd4 <__assert_func>
 8014698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801469c:	6004      	str	r4, [r0, #0]
 801469e:	60c4      	str	r4, [r0, #12]
 80146a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80146a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146a8:	b94c      	cbnz	r4, 80146be <__pow5mult+0x66>
 80146aa:	f240 2171 	movw	r1, #625	; 0x271
 80146ae:	4630      	mov	r0, r6
 80146b0:	f7ff ff12 	bl	80144d8 <__i2b>
 80146b4:	2300      	movs	r3, #0
 80146b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80146ba:	4604      	mov	r4, r0
 80146bc:	6003      	str	r3, [r0, #0]
 80146be:	f04f 0900 	mov.w	r9, #0
 80146c2:	07eb      	lsls	r3, r5, #31
 80146c4:	d50a      	bpl.n	80146dc <__pow5mult+0x84>
 80146c6:	4639      	mov	r1, r7
 80146c8:	4622      	mov	r2, r4
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7ff ff1a 	bl	8014504 <__multiply>
 80146d0:	4639      	mov	r1, r7
 80146d2:	4680      	mov	r8, r0
 80146d4:	4630      	mov	r0, r6
 80146d6:	f7ff fe47 	bl	8014368 <_Bfree>
 80146da:	4647      	mov	r7, r8
 80146dc:	106d      	asrs	r5, r5, #1
 80146de:	d00b      	beq.n	80146f8 <__pow5mult+0xa0>
 80146e0:	6820      	ldr	r0, [r4, #0]
 80146e2:	b938      	cbnz	r0, 80146f4 <__pow5mult+0x9c>
 80146e4:	4622      	mov	r2, r4
 80146e6:	4621      	mov	r1, r4
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7ff ff0b 	bl	8014504 <__multiply>
 80146ee:	6020      	str	r0, [r4, #0]
 80146f0:	f8c0 9000 	str.w	r9, [r0]
 80146f4:	4604      	mov	r4, r0
 80146f6:	e7e4      	b.n	80146c2 <__pow5mult+0x6a>
 80146f8:	4638      	mov	r0, r7
 80146fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146fe:	bf00      	nop
 8014700:	08015f88 	.word	0x08015f88
 8014704:	08015db5 	.word	0x08015db5
 8014708:	08015e38 	.word	0x08015e38

0801470c <__lshift>:
 801470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014710:	460c      	mov	r4, r1
 8014712:	6849      	ldr	r1, [r1, #4]
 8014714:	6923      	ldr	r3, [r4, #16]
 8014716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801471a:	68a3      	ldr	r3, [r4, #8]
 801471c:	4607      	mov	r7, r0
 801471e:	4691      	mov	r9, r2
 8014720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014724:	f108 0601 	add.w	r6, r8, #1
 8014728:	42b3      	cmp	r3, r6
 801472a:	db0b      	blt.n	8014744 <__lshift+0x38>
 801472c:	4638      	mov	r0, r7
 801472e:	f7ff fddb 	bl	80142e8 <_Balloc>
 8014732:	4605      	mov	r5, r0
 8014734:	b948      	cbnz	r0, 801474a <__lshift+0x3e>
 8014736:	4602      	mov	r2, r0
 8014738:	4b2a      	ldr	r3, [pc, #168]	; (80147e4 <__lshift+0xd8>)
 801473a:	482b      	ldr	r0, [pc, #172]	; (80147e8 <__lshift+0xdc>)
 801473c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014740:	f000 fac8 	bl	8014cd4 <__assert_func>
 8014744:	3101      	adds	r1, #1
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	e7ee      	b.n	8014728 <__lshift+0x1c>
 801474a:	2300      	movs	r3, #0
 801474c:	f100 0114 	add.w	r1, r0, #20
 8014750:	f100 0210 	add.w	r2, r0, #16
 8014754:	4618      	mov	r0, r3
 8014756:	4553      	cmp	r3, sl
 8014758:	db37      	blt.n	80147ca <__lshift+0xbe>
 801475a:	6920      	ldr	r0, [r4, #16]
 801475c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014760:	f104 0314 	add.w	r3, r4, #20
 8014764:	f019 091f 	ands.w	r9, r9, #31
 8014768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801476c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014770:	d02f      	beq.n	80147d2 <__lshift+0xc6>
 8014772:	f1c9 0e20 	rsb	lr, r9, #32
 8014776:	468a      	mov	sl, r1
 8014778:	f04f 0c00 	mov.w	ip, #0
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	fa02 f209 	lsl.w	r2, r2, r9
 8014782:	ea42 020c 	orr.w	r2, r2, ip
 8014786:	f84a 2b04 	str.w	r2, [sl], #4
 801478a:	f853 2b04 	ldr.w	r2, [r3], #4
 801478e:	4298      	cmp	r0, r3
 8014790:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014794:	d8f2      	bhi.n	801477c <__lshift+0x70>
 8014796:	1b03      	subs	r3, r0, r4
 8014798:	3b15      	subs	r3, #21
 801479a:	f023 0303 	bic.w	r3, r3, #3
 801479e:	3304      	adds	r3, #4
 80147a0:	f104 0215 	add.w	r2, r4, #21
 80147a4:	4290      	cmp	r0, r2
 80147a6:	bf38      	it	cc
 80147a8:	2304      	movcc	r3, #4
 80147aa:	f841 c003 	str.w	ip, [r1, r3]
 80147ae:	f1bc 0f00 	cmp.w	ip, #0
 80147b2:	d001      	beq.n	80147b8 <__lshift+0xac>
 80147b4:	f108 0602 	add.w	r6, r8, #2
 80147b8:	3e01      	subs	r6, #1
 80147ba:	4638      	mov	r0, r7
 80147bc:	612e      	str	r6, [r5, #16]
 80147be:	4621      	mov	r1, r4
 80147c0:	f7ff fdd2 	bl	8014368 <_Bfree>
 80147c4:	4628      	mov	r0, r5
 80147c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80147ce:	3301      	adds	r3, #1
 80147d0:	e7c1      	b.n	8014756 <__lshift+0x4a>
 80147d2:	3904      	subs	r1, #4
 80147d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147dc:	4298      	cmp	r0, r3
 80147de:	d8f9      	bhi.n	80147d4 <__lshift+0xc8>
 80147e0:	e7ea      	b.n	80147b8 <__lshift+0xac>
 80147e2:	bf00      	nop
 80147e4:	08015e27 	.word	0x08015e27
 80147e8:	08015e38 	.word	0x08015e38

080147ec <__mcmp>:
 80147ec:	b530      	push	{r4, r5, lr}
 80147ee:	6902      	ldr	r2, [r0, #16]
 80147f0:	690c      	ldr	r4, [r1, #16]
 80147f2:	1b12      	subs	r2, r2, r4
 80147f4:	d10e      	bne.n	8014814 <__mcmp+0x28>
 80147f6:	f100 0314 	add.w	r3, r0, #20
 80147fa:	3114      	adds	r1, #20
 80147fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014800:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014804:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014808:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801480c:	42a5      	cmp	r5, r4
 801480e:	d003      	beq.n	8014818 <__mcmp+0x2c>
 8014810:	d305      	bcc.n	801481e <__mcmp+0x32>
 8014812:	2201      	movs	r2, #1
 8014814:	4610      	mov	r0, r2
 8014816:	bd30      	pop	{r4, r5, pc}
 8014818:	4283      	cmp	r3, r0
 801481a:	d3f3      	bcc.n	8014804 <__mcmp+0x18>
 801481c:	e7fa      	b.n	8014814 <__mcmp+0x28>
 801481e:	f04f 32ff 	mov.w	r2, #4294967295
 8014822:	e7f7      	b.n	8014814 <__mcmp+0x28>

08014824 <__mdiff>:
 8014824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	460c      	mov	r4, r1
 801482a:	4606      	mov	r6, r0
 801482c:	4611      	mov	r1, r2
 801482e:	4620      	mov	r0, r4
 8014830:	4690      	mov	r8, r2
 8014832:	f7ff ffdb 	bl	80147ec <__mcmp>
 8014836:	1e05      	subs	r5, r0, #0
 8014838:	d110      	bne.n	801485c <__mdiff+0x38>
 801483a:	4629      	mov	r1, r5
 801483c:	4630      	mov	r0, r6
 801483e:	f7ff fd53 	bl	80142e8 <_Balloc>
 8014842:	b930      	cbnz	r0, 8014852 <__mdiff+0x2e>
 8014844:	4b3a      	ldr	r3, [pc, #232]	; (8014930 <__mdiff+0x10c>)
 8014846:	4602      	mov	r2, r0
 8014848:	f240 2132 	movw	r1, #562	; 0x232
 801484c:	4839      	ldr	r0, [pc, #228]	; (8014934 <__mdiff+0x110>)
 801484e:	f000 fa41 	bl	8014cd4 <__assert_func>
 8014852:	2301      	movs	r3, #1
 8014854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485c:	bfa4      	itt	ge
 801485e:	4643      	movge	r3, r8
 8014860:	46a0      	movge	r8, r4
 8014862:	4630      	mov	r0, r6
 8014864:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014868:	bfa6      	itte	ge
 801486a:	461c      	movge	r4, r3
 801486c:	2500      	movge	r5, #0
 801486e:	2501      	movlt	r5, #1
 8014870:	f7ff fd3a 	bl	80142e8 <_Balloc>
 8014874:	b920      	cbnz	r0, 8014880 <__mdiff+0x5c>
 8014876:	4b2e      	ldr	r3, [pc, #184]	; (8014930 <__mdiff+0x10c>)
 8014878:	4602      	mov	r2, r0
 801487a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801487e:	e7e5      	b.n	801484c <__mdiff+0x28>
 8014880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014884:	6926      	ldr	r6, [r4, #16]
 8014886:	60c5      	str	r5, [r0, #12]
 8014888:	f104 0914 	add.w	r9, r4, #20
 801488c:	f108 0514 	add.w	r5, r8, #20
 8014890:	f100 0e14 	add.w	lr, r0, #20
 8014894:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014898:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801489c:	f108 0210 	add.w	r2, r8, #16
 80148a0:	46f2      	mov	sl, lr
 80148a2:	2100      	movs	r1, #0
 80148a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80148a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80148ac:	fa1f f883 	uxth.w	r8, r3
 80148b0:	fa11 f18b 	uxtah	r1, r1, fp
 80148b4:	0c1b      	lsrs	r3, r3, #16
 80148b6:	eba1 0808 	sub.w	r8, r1, r8
 80148ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80148be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80148c2:	fa1f f888 	uxth.w	r8, r8
 80148c6:	1419      	asrs	r1, r3, #16
 80148c8:	454e      	cmp	r6, r9
 80148ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80148ce:	f84a 3b04 	str.w	r3, [sl], #4
 80148d2:	d8e7      	bhi.n	80148a4 <__mdiff+0x80>
 80148d4:	1b33      	subs	r3, r6, r4
 80148d6:	3b15      	subs	r3, #21
 80148d8:	f023 0303 	bic.w	r3, r3, #3
 80148dc:	3304      	adds	r3, #4
 80148de:	3415      	adds	r4, #21
 80148e0:	42a6      	cmp	r6, r4
 80148e2:	bf38      	it	cc
 80148e4:	2304      	movcc	r3, #4
 80148e6:	441d      	add	r5, r3
 80148e8:	4473      	add	r3, lr
 80148ea:	469e      	mov	lr, r3
 80148ec:	462e      	mov	r6, r5
 80148ee:	4566      	cmp	r6, ip
 80148f0:	d30e      	bcc.n	8014910 <__mdiff+0xec>
 80148f2:	f10c 0203 	add.w	r2, ip, #3
 80148f6:	1b52      	subs	r2, r2, r5
 80148f8:	f022 0203 	bic.w	r2, r2, #3
 80148fc:	3d03      	subs	r5, #3
 80148fe:	45ac      	cmp	ip, r5
 8014900:	bf38      	it	cc
 8014902:	2200      	movcc	r2, #0
 8014904:	441a      	add	r2, r3
 8014906:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801490a:	b17b      	cbz	r3, 801492c <__mdiff+0x108>
 801490c:	6107      	str	r7, [r0, #16]
 801490e:	e7a3      	b.n	8014858 <__mdiff+0x34>
 8014910:	f856 8b04 	ldr.w	r8, [r6], #4
 8014914:	fa11 f288 	uxtah	r2, r1, r8
 8014918:	1414      	asrs	r4, r2, #16
 801491a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801491e:	b292      	uxth	r2, r2
 8014920:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014924:	f84e 2b04 	str.w	r2, [lr], #4
 8014928:	1421      	asrs	r1, r4, #16
 801492a:	e7e0      	b.n	80148ee <__mdiff+0xca>
 801492c:	3f01      	subs	r7, #1
 801492e:	e7ea      	b.n	8014906 <__mdiff+0xe2>
 8014930:	08015e27 	.word	0x08015e27
 8014934:	08015e38 	.word	0x08015e38

08014938 <__d2b>:
 8014938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801493c:	4689      	mov	r9, r1
 801493e:	2101      	movs	r1, #1
 8014940:	ec57 6b10 	vmov	r6, r7, d0
 8014944:	4690      	mov	r8, r2
 8014946:	f7ff fccf 	bl	80142e8 <_Balloc>
 801494a:	4604      	mov	r4, r0
 801494c:	b930      	cbnz	r0, 801495c <__d2b+0x24>
 801494e:	4602      	mov	r2, r0
 8014950:	4b25      	ldr	r3, [pc, #148]	; (80149e8 <__d2b+0xb0>)
 8014952:	4826      	ldr	r0, [pc, #152]	; (80149ec <__d2b+0xb4>)
 8014954:	f240 310a 	movw	r1, #778	; 0x30a
 8014958:	f000 f9bc 	bl	8014cd4 <__assert_func>
 801495c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014964:	bb35      	cbnz	r5, 80149b4 <__d2b+0x7c>
 8014966:	2e00      	cmp	r6, #0
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	d028      	beq.n	80149be <__d2b+0x86>
 801496c:	4668      	mov	r0, sp
 801496e:	9600      	str	r6, [sp, #0]
 8014970:	f7ff fd82 	bl	8014478 <__lo0bits>
 8014974:	9900      	ldr	r1, [sp, #0]
 8014976:	b300      	cbz	r0, 80149ba <__d2b+0x82>
 8014978:	9a01      	ldr	r2, [sp, #4]
 801497a:	f1c0 0320 	rsb	r3, r0, #32
 801497e:	fa02 f303 	lsl.w	r3, r2, r3
 8014982:	430b      	orrs	r3, r1
 8014984:	40c2      	lsrs	r2, r0
 8014986:	6163      	str	r3, [r4, #20]
 8014988:	9201      	str	r2, [sp, #4]
 801498a:	9b01      	ldr	r3, [sp, #4]
 801498c:	61a3      	str	r3, [r4, #24]
 801498e:	2b00      	cmp	r3, #0
 8014990:	bf14      	ite	ne
 8014992:	2202      	movne	r2, #2
 8014994:	2201      	moveq	r2, #1
 8014996:	6122      	str	r2, [r4, #16]
 8014998:	b1d5      	cbz	r5, 80149d0 <__d2b+0x98>
 801499a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801499e:	4405      	add	r5, r0
 80149a0:	f8c9 5000 	str.w	r5, [r9]
 80149a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80149a8:	f8c8 0000 	str.w	r0, [r8]
 80149ac:	4620      	mov	r0, r4
 80149ae:	b003      	add	sp, #12
 80149b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80149b8:	e7d5      	b.n	8014966 <__d2b+0x2e>
 80149ba:	6161      	str	r1, [r4, #20]
 80149bc:	e7e5      	b.n	801498a <__d2b+0x52>
 80149be:	a801      	add	r0, sp, #4
 80149c0:	f7ff fd5a 	bl	8014478 <__lo0bits>
 80149c4:	9b01      	ldr	r3, [sp, #4]
 80149c6:	6163      	str	r3, [r4, #20]
 80149c8:	2201      	movs	r2, #1
 80149ca:	6122      	str	r2, [r4, #16]
 80149cc:	3020      	adds	r0, #32
 80149ce:	e7e3      	b.n	8014998 <__d2b+0x60>
 80149d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80149d8:	f8c9 0000 	str.w	r0, [r9]
 80149dc:	6918      	ldr	r0, [r3, #16]
 80149de:	f7ff fd2b 	bl	8014438 <__hi0bits>
 80149e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149e6:	e7df      	b.n	80149a8 <__d2b+0x70>
 80149e8:	08015e27 	.word	0x08015e27
 80149ec:	08015e38 	.word	0x08015e38

080149f0 <_calloc_r>:
 80149f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149f2:	fba1 2402 	umull	r2, r4, r1, r2
 80149f6:	b94c      	cbnz	r4, 8014a0c <_calloc_r+0x1c>
 80149f8:	4611      	mov	r1, r2
 80149fa:	9201      	str	r2, [sp, #4]
 80149fc:	f7fe f8cc 	bl	8012b98 <_malloc_r>
 8014a00:	9a01      	ldr	r2, [sp, #4]
 8014a02:	4605      	mov	r5, r0
 8014a04:	b930      	cbnz	r0, 8014a14 <_calloc_r+0x24>
 8014a06:	4628      	mov	r0, r5
 8014a08:	b003      	add	sp, #12
 8014a0a:	bd30      	pop	{r4, r5, pc}
 8014a0c:	220c      	movs	r2, #12
 8014a0e:	6002      	str	r2, [r0, #0]
 8014a10:	2500      	movs	r5, #0
 8014a12:	e7f8      	b.n	8014a06 <_calloc_r+0x16>
 8014a14:	4621      	mov	r1, r4
 8014a16:	f7fe f84b 	bl	8012ab0 <memset>
 8014a1a:	e7f4      	b.n	8014a06 <_calloc_r+0x16>

08014a1c <__ssputs_r>:
 8014a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a20:	688e      	ldr	r6, [r1, #8]
 8014a22:	429e      	cmp	r6, r3
 8014a24:	4682      	mov	sl, r0
 8014a26:	460c      	mov	r4, r1
 8014a28:	4690      	mov	r8, r2
 8014a2a:	461f      	mov	r7, r3
 8014a2c:	d838      	bhi.n	8014aa0 <__ssputs_r+0x84>
 8014a2e:	898a      	ldrh	r2, [r1, #12]
 8014a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a34:	d032      	beq.n	8014a9c <__ssputs_r+0x80>
 8014a36:	6825      	ldr	r5, [r4, #0]
 8014a38:	6909      	ldr	r1, [r1, #16]
 8014a3a:	eba5 0901 	sub.w	r9, r5, r1
 8014a3e:	6965      	ldr	r5, [r4, #20]
 8014a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a48:	3301      	adds	r3, #1
 8014a4a:	444b      	add	r3, r9
 8014a4c:	106d      	asrs	r5, r5, #1
 8014a4e:	429d      	cmp	r5, r3
 8014a50:	bf38      	it	cc
 8014a52:	461d      	movcc	r5, r3
 8014a54:	0553      	lsls	r3, r2, #21
 8014a56:	d531      	bpl.n	8014abc <__ssputs_r+0xa0>
 8014a58:	4629      	mov	r1, r5
 8014a5a:	f7fe f89d 	bl	8012b98 <_malloc_r>
 8014a5e:	4606      	mov	r6, r0
 8014a60:	b950      	cbnz	r0, 8014a78 <__ssputs_r+0x5c>
 8014a62:	230c      	movs	r3, #12
 8014a64:	f8ca 3000 	str.w	r3, [sl]
 8014a68:	89a3      	ldrh	r3, [r4, #12]
 8014a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a6e:	81a3      	strh	r3, [r4, #12]
 8014a70:	f04f 30ff 	mov.w	r0, #4294967295
 8014a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a78:	6921      	ldr	r1, [r4, #16]
 8014a7a:	464a      	mov	r2, r9
 8014a7c:	f7ff fc1a 	bl	80142b4 <memcpy>
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a8a:	81a3      	strh	r3, [r4, #12]
 8014a8c:	6126      	str	r6, [r4, #16]
 8014a8e:	6165      	str	r5, [r4, #20]
 8014a90:	444e      	add	r6, r9
 8014a92:	eba5 0509 	sub.w	r5, r5, r9
 8014a96:	6026      	str	r6, [r4, #0]
 8014a98:	60a5      	str	r5, [r4, #8]
 8014a9a:	463e      	mov	r6, r7
 8014a9c:	42be      	cmp	r6, r7
 8014a9e:	d900      	bls.n	8014aa2 <__ssputs_r+0x86>
 8014aa0:	463e      	mov	r6, r7
 8014aa2:	6820      	ldr	r0, [r4, #0]
 8014aa4:	4632      	mov	r2, r6
 8014aa6:	4641      	mov	r1, r8
 8014aa8:	f000 f959 	bl	8014d5e <memmove>
 8014aac:	68a3      	ldr	r3, [r4, #8]
 8014aae:	1b9b      	subs	r3, r3, r6
 8014ab0:	60a3      	str	r3, [r4, #8]
 8014ab2:	6823      	ldr	r3, [r4, #0]
 8014ab4:	4433      	add	r3, r6
 8014ab6:	6023      	str	r3, [r4, #0]
 8014ab8:	2000      	movs	r0, #0
 8014aba:	e7db      	b.n	8014a74 <__ssputs_r+0x58>
 8014abc:	462a      	mov	r2, r5
 8014abe:	f000 f968 	bl	8014d92 <_realloc_r>
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d1e1      	bne.n	8014a8c <__ssputs_r+0x70>
 8014ac8:	6921      	ldr	r1, [r4, #16]
 8014aca:	4650      	mov	r0, sl
 8014acc:	f7fd fff8 	bl	8012ac0 <_free_r>
 8014ad0:	e7c7      	b.n	8014a62 <__ssputs_r+0x46>
	...

08014ad4 <_svfiprintf_r>:
 8014ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad8:	4698      	mov	r8, r3
 8014ada:	898b      	ldrh	r3, [r1, #12]
 8014adc:	061b      	lsls	r3, r3, #24
 8014ade:	b09d      	sub	sp, #116	; 0x74
 8014ae0:	4607      	mov	r7, r0
 8014ae2:	460d      	mov	r5, r1
 8014ae4:	4614      	mov	r4, r2
 8014ae6:	d50e      	bpl.n	8014b06 <_svfiprintf_r+0x32>
 8014ae8:	690b      	ldr	r3, [r1, #16]
 8014aea:	b963      	cbnz	r3, 8014b06 <_svfiprintf_r+0x32>
 8014aec:	2140      	movs	r1, #64	; 0x40
 8014aee:	f7fe f853 	bl	8012b98 <_malloc_r>
 8014af2:	6028      	str	r0, [r5, #0]
 8014af4:	6128      	str	r0, [r5, #16]
 8014af6:	b920      	cbnz	r0, 8014b02 <_svfiprintf_r+0x2e>
 8014af8:	230c      	movs	r3, #12
 8014afa:	603b      	str	r3, [r7, #0]
 8014afc:	f04f 30ff 	mov.w	r0, #4294967295
 8014b00:	e0d1      	b.n	8014ca6 <_svfiprintf_r+0x1d2>
 8014b02:	2340      	movs	r3, #64	; 0x40
 8014b04:	616b      	str	r3, [r5, #20]
 8014b06:	2300      	movs	r3, #0
 8014b08:	9309      	str	r3, [sp, #36]	; 0x24
 8014b0a:	2320      	movs	r3, #32
 8014b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b14:	2330      	movs	r3, #48	; 0x30
 8014b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014cc0 <_svfiprintf_r+0x1ec>
 8014b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b1e:	f04f 0901 	mov.w	r9, #1
 8014b22:	4623      	mov	r3, r4
 8014b24:	469a      	mov	sl, r3
 8014b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b2a:	b10a      	cbz	r2, 8014b30 <_svfiprintf_r+0x5c>
 8014b2c:	2a25      	cmp	r2, #37	; 0x25
 8014b2e:	d1f9      	bne.n	8014b24 <_svfiprintf_r+0x50>
 8014b30:	ebba 0b04 	subs.w	fp, sl, r4
 8014b34:	d00b      	beq.n	8014b4e <_svfiprintf_r+0x7a>
 8014b36:	465b      	mov	r3, fp
 8014b38:	4622      	mov	r2, r4
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	f7ff ff6d 	bl	8014a1c <__ssputs_r>
 8014b42:	3001      	adds	r0, #1
 8014b44:	f000 80aa 	beq.w	8014c9c <_svfiprintf_r+0x1c8>
 8014b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b4a:	445a      	add	r2, fp
 8014b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8014b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f000 80a2 	beq.w	8014c9c <_svfiprintf_r+0x1c8>
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b62:	f10a 0a01 	add.w	sl, sl, #1
 8014b66:	9304      	str	r3, [sp, #16]
 8014b68:	9307      	str	r3, [sp, #28]
 8014b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8014b70:	4654      	mov	r4, sl
 8014b72:	2205      	movs	r2, #5
 8014b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b78:	4851      	ldr	r0, [pc, #324]	; (8014cc0 <_svfiprintf_r+0x1ec>)
 8014b7a:	f7eb fb51 	bl	8000220 <memchr>
 8014b7e:	9a04      	ldr	r2, [sp, #16]
 8014b80:	b9d8      	cbnz	r0, 8014bba <_svfiprintf_r+0xe6>
 8014b82:	06d0      	lsls	r0, r2, #27
 8014b84:	bf44      	itt	mi
 8014b86:	2320      	movmi	r3, #32
 8014b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b8c:	0711      	lsls	r1, r2, #28
 8014b8e:	bf44      	itt	mi
 8014b90:	232b      	movmi	r3, #43	; 0x2b
 8014b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b96:	f89a 3000 	ldrb.w	r3, [sl]
 8014b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8014b9c:	d015      	beq.n	8014bca <_svfiprintf_r+0xf6>
 8014b9e:	9a07      	ldr	r2, [sp, #28]
 8014ba0:	4654      	mov	r4, sl
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	f04f 0c0a 	mov.w	ip, #10
 8014ba8:	4621      	mov	r1, r4
 8014baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bae:	3b30      	subs	r3, #48	; 0x30
 8014bb0:	2b09      	cmp	r3, #9
 8014bb2:	d94e      	bls.n	8014c52 <_svfiprintf_r+0x17e>
 8014bb4:	b1b0      	cbz	r0, 8014be4 <_svfiprintf_r+0x110>
 8014bb6:	9207      	str	r2, [sp, #28]
 8014bb8:	e014      	b.n	8014be4 <_svfiprintf_r+0x110>
 8014bba:	eba0 0308 	sub.w	r3, r0, r8
 8014bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	9304      	str	r3, [sp, #16]
 8014bc6:	46a2      	mov	sl, r4
 8014bc8:	e7d2      	b.n	8014b70 <_svfiprintf_r+0x9c>
 8014bca:	9b03      	ldr	r3, [sp, #12]
 8014bcc:	1d19      	adds	r1, r3, #4
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	9103      	str	r1, [sp, #12]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	bfbb      	ittet	lt
 8014bd6:	425b      	neglt	r3, r3
 8014bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8014bdc:	9307      	strge	r3, [sp, #28]
 8014bde:	9307      	strlt	r3, [sp, #28]
 8014be0:	bfb8      	it	lt
 8014be2:	9204      	strlt	r2, [sp, #16]
 8014be4:	7823      	ldrb	r3, [r4, #0]
 8014be6:	2b2e      	cmp	r3, #46	; 0x2e
 8014be8:	d10c      	bne.n	8014c04 <_svfiprintf_r+0x130>
 8014bea:	7863      	ldrb	r3, [r4, #1]
 8014bec:	2b2a      	cmp	r3, #42	; 0x2a
 8014bee:	d135      	bne.n	8014c5c <_svfiprintf_r+0x188>
 8014bf0:	9b03      	ldr	r3, [sp, #12]
 8014bf2:	1d1a      	adds	r2, r3, #4
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	9203      	str	r2, [sp, #12]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	bfb8      	it	lt
 8014bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c00:	3402      	adds	r4, #2
 8014c02:	9305      	str	r3, [sp, #20]
 8014c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014cd0 <_svfiprintf_r+0x1fc>
 8014c08:	7821      	ldrb	r1, [r4, #0]
 8014c0a:	2203      	movs	r2, #3
 8014c0c:	4650      	mov	r0, sl
 8014c0e:	f7eb fb07 	bl	8000220 <memchr>
 8014c12:	b140      	cbz	r0, 8014c26 <_svfiprintf_r+0x152>
 8014c14:	2340      	movs	r3, #64	; 0x40
 8014c16:	eba0 000a 	sub.w	r0, r0, sl
 8014c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8014c1e:	9b04      	ldr	r3, [sp, #16]
 8014c20:	4303      	orrs	r3, r0
 8014c22:	3401      	adds	r4, #1
 8014c24:	9304      	str	r3, [sp, #16]
 8014c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c2a:	4826      	ldr	r0, [pc, #152]	; (8014cc4 <_svfiprintf_r+0x1f0>)
 8014c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c30:	2206      	movs	r2, #6
 8014c32:	f7eb faf5 	bl	8000220 <memchr>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d038      	beq.n	8014cac <_svfiprintf_r+0x1d8>
 8014c3a:	4b23      	ldr	r3, [pc, #140]	; (8014cc8 <_svfiprintf_r+0x1f4>)
 8014c3c:	bb1b      	cbnz	r3, 8014c86 <_svfiprintf_r+0x1b2>
 8014c3e:	9b03      	ldr	r3, [sp, #12]
 8014c40:	3307      	adds	r3, #7
 8014c42:	f023 0307 	bic.w	r3, r3, #7
 8014c46:	3308      	adds	r3, #8
 8014c48:	9303      	str	r3, [sp, #12]
 8014c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c4c:	4433      	add	r3, r6
 8014c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c50:	e767      	b.n	8014b22 <_svfiprintf_r+0x4e>
 8014c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c56:	460c      	mov	r4, r1
 8014c58:	2001      	movs	r0, #1
 8014c5a:	e7a5      	b.n	8014ba8 <_svfiprintf_r+0xd4>
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	3401      	adds	r4, #1
 8014c60:	9305      	str	r3, [sp, #20]
 8014c62:	4619      	mov	r1, r3
 8014c64:	f04f 0c0a 	mov.w	ip, #10
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c6e:	3a30      	subs	r2, #48	; 0x30
 8014c70:	2a09      	cmp	r2, #9
 8014c72:	d903      	bls.n	8014c7c <_svfiprintf_r+0x1a8>
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d0c5      	beq.n	8014c04 <_svfiprintf_r+0x130>
 8014c78:	9105      	str	r1, [sp, #20]
 8014c7a:	e7c3      	b.n	8014c04 <_svfiprintf_r+0x130>
 8014c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c80:	4604      	mov	r4, r0
 8014c82:	2301      	movs	r3, #1
 8014c84:	e7f0      	b.n	8014c68 <_svfiprintf_r+0x194>
 8014c86:	ab03      	add	r3, sp, #12
 8014c88:	9300      	str	r3, [sp, #0]
 8014c8a:	462a      	mov	r2, r5
 8014c8c:	4b0f      	ldr	r3, [pc, #60]	; (8014ccc <_svfiprintf_r+0x1f8>)
 8014c8e:	a904      	add	r1, sp, #16
 8014c90:	4638      	mov	r0, r7
 8014c92:	f7fe f895 	bl	8012dc0 <_printf_float>
 8014c96:	1c42      	adds	r2, r0, #1
 8014c98:	4606      	mov	r6, r0
 8014c9a:	d1d6      	bne.n	8014c4a <_svfiprintf_r+0x176>
 8014c9c:	89ab      	ldrh	r3, [r5, #12]
 8014c9e:	065b      	lsls	r3, r3, #25
 8014ca0:	f53f af2c 	bmi.w	8014afc <_svfiprintf_r+0x28>
 8014ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ca6:	b01d      	add	sp, #116	; 0x74
 8014ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cac:	ab03      	add	r3, sp, #12
 8014cae:	9300      	str	r3, [sp, #0]
 8014cb0:	462a      	mov	r2, r5
 8014cb2:	4b06      	ldr	r3, [pc, #24]	; (8014ccc <_svfiprintf_r+0x1f8>)
 8014cb4:	a904      	add	r1, sp, #16
 8014cb6:	4638      	mov	r0, r7
 8014cb8:	f7fe fb26 	bl	8013308 <_printf_i>
 8014cbc:	e7eb      	b.n	8014c96 <_svfiprintf_r+0x1c2>
 8014cbe:	bf00      	nop
 8014cc0:	08015f94 	.word	0x08015f94
 8014cc4:	08015f9e 	.word	0x08015f9e
 8014cc8:	08012dc1 	.word	0x08012dc1
 8014ccc:	08014a1d 	.word	0x08014a1d
 8014cd0:	08015f9a 	.word	0x08015f9a

08014cd4 <__assert_func>:
 8014cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014cd6:	4614      	mov	r4, r2
 8014cd8:	461a      	mov	r2, r3
 8014cda:	4b09      	ldr	r3, [pc, #36]	; (8014d00 <__assert_func+0x2c>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	4605      	mov	r5, r0
 8014ce0:	68d8      	ldr	r0, [r3, #12]
 8014ce2:	b14c      	cbz	r4, 8014cf8 <__assert_func+0x24>
 8014ce4:	4b07      	ldr	r3, [pc, #28]	; (8014d04 <__assert_func+0x30>)
 8014ce6:	9100      	str	r1, [sp, #0]
 8014ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014cec:	4906      	ldr	r1, [pc, #24]	; (8014d08 <__assert_func+0x34>)
 8014cee:	462b      	mov	r3, r5
 8014cf0:	f000 f80e 	bl	8014d10 <fiprintf>
 8014cf4:	f000 faa4 	bl	8015240 <abort>
 8014cf8:	4b04      	ldr	r3, [pc, #16]	; (8014d0c <__assert_func+0x38>)
 8014cfa:	461c      	mov	r4, r3
 8014cfc:	e7f3      	b.n	8014ce6 <__assert_func+0x12>
 8014cfe:	bf00      	nop
 8014d00:	2000012c 	.word	0x2000012c
 8014d04:	08015fa5 	.word	0x08015fa5
 8014d08:	08015fb2 	.word	0x08015fb2
 8014d0c:	08015fe0 	.word	0x08015fe0

08014d10 <fiprintf>:
 8014d10:	b40e      	push	{r1, r2, r3}
 8014d12:	b503      	push	{r0, r1, lr}
 8014d14:	4601      	mov	r1, r0
 8014d16:	ab03      	add	r3, sp, #12
 8014d18:	4805      	ldr	r0, [pc, #20]	; (8014d30 <fiprintf+0x20>)
 8014d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d1e:	6800      	ldr	r0, [r0, #0]
 8014d20:	9301      	str	r3, [sp, #4]
 8014d22:	f000 f88f 	bl	8014e44 <_vfiprintf_r>
 8014d26:	b002      	add	sp, #8
 8014d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d2c:	b003      	add	sp, #12
 8014d2e:	4770      	bx	lr
 8014d30:	2000012c 	.word	0x2000012c

08014d34 <__retarget_lock_init_recursive>:
 8014d34:	4770      	bx	lr

08014d36 <__retarget_lock_acquire_recursive>:
 8014d36:	4770      	bx	lr

08014d38 <__retarget_lock_release_recursive>:
 8014d38:	4770      	bx	lr

08014d3a <__ascii_mbtowc>:
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	b901      	cbnz	r1, 8014d40 <__ascii_mbtowc+0x6>
 8014d3e:	a901      	add	r1, sp, #4
 8014d40:	b142      	cbz	r2, 8014d54 <__ascii_mbtowc+0x1a>
 8014d42:	b14b      	cbz	r3, 8014d58 <__ascii_mbtowc+0x1e>
 8014d44:	7813      	ldrb	r3, [r2, #0]
 8014d46:	600b      	str	r3, [r1, #0]
 8014d48:	7812      	ldrb	r2, [r2, #0]
 8014d4a:	1e10      	subs	r0, r2, #0
 8014d4c:	bf18      	it	ne
 8014d4e:	2001      	movne	r0, #1
 8014d50:	b002      	add	sp, #8
 8014d52:	4770      	bx	lr
 8014d54:	4610      	mov	r0, r2
 8014d56:	e7fb      	b.n	8014d50 <__ascii_mbtowc+0x16>
 8014d58:	f06f 0001 	mvn.w	r0, #1
 8014d5c:	e7f8      	b.n	8014d50 <__ascii_mbtowc+0x16>

08014d5e <memmove>:
 8014d5e:	4288      	cmp	r0, r1
 8014d60:	b510      	push	{r4, lr}
 8014d62:	eb01 0402 	add.w	r4, r1, r2
 8014d66:	d902      	bls.n	8014d6e <memmove+0x10>
 8014d68:	4284      	cmp	r4, r0
 8014d6a:	4623      	mov	r3, r4
 8014d6c:	d807      	bhi.n	8014d7e <memmove+0x20>
 8014d6e:	1e43      	subs	r3, r0, #1
 8014d70:	42a1      	cmp	r1, r4
 8014d72:	d008      	beq.n	8014d86 <memmove+0x28>
 8014d74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d7c:	e7f8      	b.n	8014d70 <memmove+0x12>
 8014d7e:	4402      	add	r2, r0
 8014d80:	4601      	mov	r1, r0
 8014d82:	428a      	cmp	r2, r1
 8014d84:	d100      	bne.n	8014d88 <memmove+0x2a>
 8014d86:	bd10      	pop	{r4, pc}
 8014d88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d90:	e7f7      	b.n	8014d82 <memmove+0x24>

08014d92 <_realloc_r>:
 8014d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d96:	4680      	mov	r8, r0
 8014d98:	4614      	mov	r4, r2
 8014d9a:	460e      	mov	r6, r1
 8014d9c:	b921      	cbnz	r1, 8014da8 <_realloc_r+0x16>
 8014d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014da2:	4611      	mov	r1, r2
 8014da4:	f7fd bef8 	b.w	8012b98 <_malloc_r>
 8014da8:	b92a      	cbnz	r2, 8014db6 <_realloc_r+0x24>
 8014daa:	f7fd fe89 	bl	8012ac0 <_free_r>
 8014dae:	4625      	mov	r5, r4
 8014db0:	4628      	mov	r0, r5
 8014db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db6:	f000 fc67 	bl	8015688 <_malloc_usable_size_r>
 8014dba:	4284      	cmp	r4, r0
 8014dbc:	4607      	mov	r7, r0
 8014dbe:	d802      	bhi.n	8014dc6 <_realloc_r+0x34>
 8014dc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014dc4:	d812      	bhi.n	8014dec <_realloc_r+0x5a>
 8014dc6:	4621      	mov	r1, r4
 8014dc8:	4640      	mov	r0, r8
 8014dca:	f7fd fee5 	bl	8012b98 <_malloc_r>
 8014dce:	4605      	mov	r5, r0
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d0ed      	beq.n	8014db0 <_realloc_r+0x1e>
 8014dd4:	42bc      	cmp	r4, r7
 8014dd6:	4622      	mov	r2, r4
 8014dd8:	4631      	mov	r1, r6
 8014dda:	bf28      	it	cs
 8014ddc:	463a      	movcs	r2, r7
 8014dde:	f7ff fa69 	bl	80142b4 <memcpy>
 8014de2:	4631      	mov	r1, r6
 8014de4:	4640      	mov	r0, r8
 8014de6:	f7fd fe6b 	bl	8012ac0 <_free_r>
 8014dea:	e7e1      	b.n	8014db0 <_realloc_r+0x1e>
 8014dec:	4635      	mov	r5, r6
 8014dee:	e7df      	b.n	8014db0 <_realloc_r+0x1e>

08014df0 <__sfputc_r>:
 8014df0:	6893      	ldr	r3, [r2, #8]
 8014df2:	3b01      	subs	r3, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	b410      	push	{r4}
 8014df8:	6093      	str	r3, [r2, #8]
 8014dfa:	da08      	bge.n	8014e0e <__sfputc_r+0x1e>
 8014dfc:	6994      	ldr	r4, [r2, #24]
 8014dfe:	42a3      	cmp	r3, r4
 8014e00:	db01      	blt.n	8014e06 <__sfputc_r+0x16>
 8014e02:	290a      	cmp	r1, #10
 8014e04:	d103      	bne.n	8014e0e <__sfputc_r+0x1e>
 8014e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e0a:	f000 b94b 	b.w	80150a4 <__swbuf_r>
 8014e0e:	6813      	ldr	r3, [r2, #0]
 8014e10:	1c58      	adds	r0, r3, #1
 8014e12:	6010      	str	r0, [r2, #0]
 8014e14:	7019      	strb	r1, [r3, #0]
 8014e16:	4608      	mov	r0, r1
 8014e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e1c:	4770      	bx	lr

08014e1e <__sfputs_r>:
 8014e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e20:	4606      	mov	r6, r0
 8014e22:	460f      	mov	r7, r1
 8014e24:	4614      	mov	r4, r2
 8014e26:	18d5      	adds	r5, r2, r3
 8014e28:	42ac      	cmp	r4, r5
 8014e2a:	d101      	bne.n	8014e30 <__sfputs_r+0x12>
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	e007      	b.n	8014e40 <__sfputs_r+0x22>
 8014e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e34:	463a      	mov	r2, r7
 8014e36:	4630      	mov	r0, r6
 8014e38:	f7ff ffda 	bl	8014df0 <__sfputc_r>
 8014e3c:	1c43      	adds	r3, r0, #1
 8014e3e:	d1f3      	bne.n	8014e28 <__sfputs_r+0xa>
 8014e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e44 <_vfiprintf_r>:
 8014e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e48:	460d      	mov	r5, r1
 8014e4a:	b09d      	sub	sp, #116	; 0x74
 8014e4c:	4614      	mov	r4, r2
 8014e4e:	4698      	mov	r8, r3
 8014e50:	4606      	mov	r6, r0
 8014e52:	b118      	cbz	r0, 8014e5c <_vfiprintf_r+0x18>
 8014e54:	6983      	ldr	r3, [r0, #24]
 8014e56:	b90b      	cbnz	r3, 8014e5c <_vfiprintf_r+0x18>
 8014e58:	f000 fb14 	bl	8015484 <__sinit>
 8014e5c:	4b89      	ldr	r3, [pc, #548]	; (8015084 <_vfiprintf_r+0x240>)
 8014e5e:	429d      	cmp	r5, r3
 8014e60:	d11b      	bne.n	8014e9a <_vfiprintf_r+0x56>
 8014e62:	6875      	ldr	r5, [r6, #4]
 8014e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e66:	07d9      	lsls	r1, r3, #31
 8014e68:	d405      	bmi.n	8014e76 <_vfiprintf_r+0x32>
 8014e6a:	89ab      	ldrh	r3, [r5, #12]
 8014e6c:	059a      	lsls	r2, r3, #22
 8014e6e:	d402      	bmi.n	8014e76 <_vfiprintf_r+0x32>
 8014e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e72:	f7ff ff60 	bl	8014d36 <__retarget_lock_acquire_recursive>
 8014e76:	89ab      	ldrh	r3, [r5, #12]
 8014e78:	071b      	lsls	r3, r3, #28
 8014e7a:	d501      	bpl.n	8014e80 <_vfiprintf_r+0x3c>
 8014e7c:	692b      	ldr	r3, [r5, #16]
 8014e7e:	b9eb      	cbnz	r3, 8014ebc <_vfiprintf_r+0x78>
 8014e80:	4629      	mov	r1, r5
 8014e82:	4630      	mov	r0, r6
 8014e84:	f000 f96e 	bl	8015164 <__swsetup_r>
 8014e88:	b1c0      	cbz	r0, 8014ebc <_vfiprintf_r+0x78>
 8014e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e8c:	07dc      	lsls	r4, r3, #31
 8014e8e:	d50e      	bpl.n	8014eae <_vfiprintf_r+0x6a>
 8014e90:	f04f 30ff 	mov.w	r0, #4294967295
 8014e94:	b01d      	add	sp, #116	; 0x74
 8014e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9a:	4b7b      	ldr	r3, [pc, #492]	; (8015088 <_vfiprintf_r+0x244>)
 8014e9c:	429d      	cmp	r5, r3
 8014e9e:	d101      	bne.n	8014ea4 <_vfiprintf_r+0x60>
 8014ea0:	68b5      	ldr	r5, [r6, #8]
 8014ea2:	e7df      	b.n	8014e64 <_vfiprintf_r+0x20>
 8014ea4:	4b79      	ldr	r3, [pc, #484]	; (801508c <_vfiprintf_r+0x248>)
 8014ea6:	429d      	cmp	r5, r3
 8014ea8:	bf08      	it	eq
 8014eaa:	68f5      	ldreq	r5, [r6, #12]
 8014eac:	e7da      	b.n	8014e64 <_vfiprintf_r+0x20>
 8014eae:	89ab      	ldrh	r3, [r5, #12]
 8014eb0:	0598      	lsls	r0, r3, #22
 8014eb2:	d4ed      	bmi.n	8014e90 <_vfiprintf_r+0x4c>
 8014eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014eb6:	f7ff ff3f 	bl	8014d38 <__retarget_lock_release_recursive>
 8014eba:	e7e9      	b.n	8014e90 <_vfiprintf_r+0x4c>
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8014ec0:	2320      	movs	r3, #32
 8014ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014eca:	2330      	movs	r3, #48	; 0x30
 8014ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015090 <_vfiprintf_r+0x24c>
 8014ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ed4:	f04f 0901 	mov.w	r9, #1
 8014ed8:	4623      	mov	r3, r4
 8014eda:	469a      	mov	sl, r3
 8014edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ee0:	b10a      	cbz	r2, 8014ee6 <_vfiprintf_r+0xa2>
 8014ee2:	2a25      	cmp	r2, #37	; 0x25
 8014ee4:	d1f9      	bne.n	8014eda <_vfiprintf_r+0x96>
 8014ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8014eea:	d00b      	beq.n	8014f04 <_vfiprintf_r+0xc0>
 8014eec:	465b      	mov	r3, fp
 8014eee:	4622      	mov	r2, r4
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	4630      	mov	r0, r6
 8014ef4:	f7ff ff93 	bl	8014e1e <__sfputs_r>
 8014ef8:	3001      	adds	r0, #1
 8014efa:	f000 80aa 	beq.w	8015052 <_vfiprintf_r+0x20e>
 8014efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f00:	445a      	add	r2, fp
 8014f02:	9209      	str	r2, [sp, #36]	; 0x24
 8014f04:	f89a 3000 	ldrb.w	r3, [sl]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 80a2 	beq.w	8015052 <_vfiprintf_r+0x20e>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	f04f 32ff 	mov.w	r2, #4294967295
 8014f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f18:	f10a 0a01 	add.w	sl, sl, #1
 8014f1c:	9304      	str	r3, [sp, #16]
 8014f1e:	9307      	str	r3, [sp, #28]
 8014f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f24:	931a      	str	r3, [sp, #104]	; 0x68
 8014f26:	4654      	mov	r4, sl
 8014f28:	2205      	movs	r2, #5
 8014f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f2e:	4858      	ldr	r0, [pc, #352]	; (8015090 <_vfiprintf_r+0x24c>)
 8014f30:	f7eb f976 	bl	8000220 <memchr>
 8014f34:	9a04      	ldr	r2, [sp, #16]
 8014f36:	b9d8      	cbnz	r0, 8014f70 <_vfiprintf_r+0x12c>
 8014f38:	06d1      	lsls	r1, r2, #27
 8014f3a:	bf44      	itt	mi
 8014f3c:	2320      	movmi	r3, #32
 8014f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f42:	0713      	lsls	r3, r2, #28
 8014f44:	bf44      	itt	mi
 8014f46:	232b      	movmi	r3, #43	; 0x2b
 8014f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8014f50:	2b2a      	cmp	r3, #42	; 0x2a
 8014f52:	d015      	beq.n	8014f80 <_vfiprintf_r+0x13c>
 8014f54:	9a07      	ldr	r2, [sp, #28]
 8014f56:	4654      	mov	r4, sl
 8014f58:	2000      	movs	r0, #0
 8014f5a:	f04f 0c0a 	mov.w	ip, #10
 8014f5e:	4621      	mov	r1, r4
 8014f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f64:	3b30      	subs	r3, #48	; 0x30
 8014f66:	2b09      	cmp	r3, #9
 8014f68:	d94e      	bls.n	8015008 <_vfiprintf_r+0x1c4>
 8014f6a:	b1b0      	cbz	r0, 8014f9a <_vfiprintf_r+0x156>
 8014f6c:	9207      	str	r2, [sp, #28]
 8014f6e:	e014      	b.n	8014f9a <_vfiprintf_r+0x156>
 8014f70:	eba0 0308 	sub.w	r3, r0, r8
 8014f74:	fa09 f303 	lsl.w	r3, r9, r3
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	9304      	str	r3, [sp, #16]
 8014f7c:	46a2      	mov	sl, r4
 8014f7e:	e7d2      	b.n	8014f26 <_vfiprintf_r+0xe2>
 8014f80:	9b03      	ldr	r3, [sp, #12]
 8014f82:	1d19      	adds	r1, r3, #4
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	9103      	str	r1, [sp, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	bfbb      	ittet	lt
 8014f8c:	425b      	neglt	r3, r3
 8014f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8014f92:	9307      	strge	r3, [sp, #28]
 8014f94:	9307      	strlt	r3, [sp, #28]
 8014f96:	bfb8      	it	lt
 8014f98:	9204      	strlt	r2, [sp, #16]
 8014f9a:	7823      	ldrb	r3, [r4, #0]
 8014f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8014f9e:	d10c      	bne.n	8014fba <_vfiprintf_r+0x176>
 8014fa0:	7863      	ldrb	r3, [r4, #1]
 8014fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8014fa4:	d135      	bne.n	8015012 <_vfiprintf_r+0x1ce>
 8014fa6:	9b03      	ldr	r3, [sp, #12]
 8014fa8:	1d1a      	adds	r2, r3, #4
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	9203      	str	r2, [sp, #12]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	bfb8      	it	lt
 8014fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014fb6:	3402      	adds	r4, #2
 8014fb8:	9305      	str	r3, [sp, #20]
 8014fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80150a0 <_vfiprintf_r+0x25c>
 8014fbe:	7821      	ldrb	r1, [r4, #0]
 8014fc0:	2203      	movs	r2, #3
 8014fc2:	4650      	mov	r0, sl
 8014fc4:	f7eb f92c 	bl	8000220 <memchr>
 8014fc8:	b140      	cbz	r0, 8014fdc <_vfiprintf_r+0x198>
 8014fca:	2340      	movs	r3, #64	; 0x40
 8014fcc:	eba0 000a 	sub.w	r0, r0, sl
 8014fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8014fd4:	9b04      	ldr	r3, [sp, #16]
 8014fd6:	4303      	orrs	r3, r0
 8014fd8:	3401      	adds	r4, #1
 8014fda:	9304      	str	r3, [sp, #16]
 8014fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fe0:	482c      	ldr	r0, [pc, #176]	; (8015094 <_vfiprintf_r+0x250>)
 8014fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014fe6:	2206      	movs	r2, #6
 8014fe8:	f7eb f91a 	bl	8000220 <memchr>
 8014fec:	2800      	cmp	r0, #0
 8014fee:	d03f      	beq.n	8015070 <_vfiprintf_r+0x22c>
 8014ff0:	4b29      	ldr	r3, [pc, #164]	; (8015098 <_vfiprintf_r+0x254>)
 8014ff2:	bb1b      	cbnz	r3, 801503c <_vfiprintf_r+0x1f8>
 8014ff4:	9b03      	ldr	r3, [sp, #12]
 8014ff6:	3307      	adds	r3, #7
 8014ff8:	f023 0307 	bic.w	r3, r3, #7
 8014ffc:	3308      	adds	r3, #8
 8014ffe:	9303      	str	r3, [sp, #12]
 8015000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015002:	443b      	add	r3, r7
 8015004:	9309      	str	r3, [sp, #36]	; 0x24
 8015006:	e767      	b.n	8014ed8 <_vfiprintf_r+0x94>
 8015008:	fb0c 3202 	mla	r2, ip, r2, r3
 801500c:	460c      	mov	r4, r1
 801500e:	2001      	movs	r0, #1
 8015010:	e7a5      	b.n	8014f5e <_vfiprintf_r+0x11a>
 8015012:	2300      	movs	r3, #0
 8015014:	3401      	adds	r4, #1
 8015016:	9305      	str	r3, [sp, #20]
 8015018:	4619      	mov	r1, r3
 801501a:	f04f 0c0a 	mov.w	ip, #10
 801501e:	4620      	mov	r0, r4
 8015020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015024:	3a30      	subs	r2, #48	; 0x30
 8015026:	2a09      	cmp	r2, #9
 8015028:	d903      	bls.n	8015032 <_vfiprintf_r+0x1ee>
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0c5      	beq.n	8014fba <_vfiprintf_r+0x176>
 801502e:	9105      	str	r1, [sp, #20]
 8015030:	e7c3      	b.n	8014fba <_vfiprintf_r+0x176>
 8015032:	fb0c 2101 	mla	r1, ip, r1, r2
 8015036:	4604      	mov	r4, r0
 8015038:	2301      	movs	r3, #1
 801503a:	e7f0      	b.n	801501e <_vfiprintf_r+0x1da>
 801503c:	ab03      	add	r3, sp, #12
 801503e:	9300      	str	r3, [sp, #0]
 8015040:	462a      	mov	r2, r5
 8015042:	4b16      	ldr	r3, [pc, #88]	; (801509c <_vfiprintf_r+0x258>)
 8015044:	a904      	add	r1, sp, #16
 8015046:	4630      	mov	r0, r6
 8015048:	f7fd feba 	bl	8012dc0 <_printf_float>
 801504c:	4607      	mov	r7, r0
 801504e:	1c78      	adds	r0, r7, #1
 8015050:	d1d6      	bne.n	8015000 <_vfiprintf_r+0x1bc>
 8015052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015054:	07d9      	lsls	r1, r3, #31
 8015056:	d405      	bmi.n	8015064 <_vfiprintf_r+0x220>
 8015058:	89ab      	ldrh	r3, [r5, #12]
 801505a:	059a      	lsls	r2, r3, #22
 801505c:	d402      	bmi.n	8015064 <_vfiprintf_r+0x220>
 801505e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015060:	f7ff fe6a 	bl	8014d38 <__retarget_lock_release_recursive>
 8015064:	89ab      	ldrh	r3, [r5, #12]
 8015066:	065b      	lsls	r3, r3, #25
 8015068:	f53f af12 	bmi.w	8014e90 <_vfiprintf_r+0x4c>
 801506c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801506e:	e711      	b.n	8014e94 <_vfiprintf_r+0x50>
 8015070:	ab03      	add	r3, sp, #12
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	462a      	mov	r2, r5
 8015076:	4b09      	ldr	r3, [pc, #36]	; (801509c <_vfiprintf_r+0x258>)
 8015078:	a904      	add	r1, sp, #16
 801507a:	4630      	mov	r0, r6
 801507c:	f7fe f944 	bl	8013308 <_printf_i>
 8015080:	e7e4      	b.n	801504c <_vfiprintf_r+0x208>
 8015082:	bf00      	nop
 8015084:	0801610c 	.word	0x0801610c
 8015088:	0801612c 	.word	0x0801612c
 801508c:	080160ec 	.word	0x080160ec
 8015090:	08015f94 	.word	0x08015f94
 8015094:	08015f9e 	.word	0x08015f9e
 8015098:	08012dc1 	.word	0x08012dc1
 801509c:	08014e1f 	.word	0x08014e1f
 80150a0:	08015f9a 	.word	0x08015f9a

080150a4 <__swbuf_r>:
 80150a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150a6:	460e      	mov	r6, r1
 80150a8:	4614      	mov	r4, r2
 80150aa:	4605      	mov	r5, r0
 80150ac:	b118      	cbz	r0, 80150b6 <__swbuf_r+0x12>
 80150ae:	6983      	ldr	r3, [r0, #24]
 80150b0:	b90b      	cbnz	r3, 80150b6 <__swbuf_r+0x12>
 80150b2:	f000 f9e7 	bl	8015484 <__sinit>
 80150b6:	4b21      	ldr	r3, [pc, #132]	; (801513c <__swbuf_r+0x98>)
 80150b8:	429c      	cmp	r4, r3
 80150ba:	d12b      	bne.n	8015114 <__swbuf_r+0x70>
 80150bc:	686c      	ldr	r4, [r5, #4]
 80150be:	69a3      	ldr	r3, [r4, #24]
 80150c0:	60a3      	str	r3, [r4, #8]
 80150c2:	89a3      	ldrh	r3, [r4, #12]
 80150c4:	071a      	lsls	r2, r3, #28
 80150c6:	d52f      	bpl.n	8015128 <__swbuf_r+0x84>
 80150c8:	6923      	ldr	r3, [r4, #16]
 80150ca:	b36b      	cbz	r3, 8015128 <__swbuf_r+0x84>
 80150cc:	6923      	ldr	r3, [r4, #16]
 80150ce:	6820      	ldr	r0, [r4, #0]
 80150d0:	1ac0      	subs	r0, r0, r3
 80150d2:	6963      	ldr	r3, [r4, #20]
 80150d4:	b2f6      	uxtb	r6, r6
 80150d6:	4283      	cmp	r3, r0
 80150d8:	4637      	mov	r7, r6
 80150da:	dc04      	bgt.n	80150e6 <__swbuf_r+0x42>
 80150dc:	4621      	mov	r1, r4
 80150de:	4628      	mov	r0, r5
 80150e0:	f000 f93c 	bl	801535c <_fflush_r>
 80150e4:	bb30      	cbnz	r0, 8015134 <__swbuf_r+0x90>
 80150e6:	68a3      	ldr	r3, [r4, #8]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	60a3      	str	r3, [r4, #8]
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	1c5a      	adds	r2, r3, #1
 80150f0:	6022      	str	r2, [r4, #0]
 80150f2:	701e      	strb	r6, [r3, #0]
 80150f4:	6963      	ldr	r3, [r4, #20]
 80150f6:	3001      	adds	r0, #1
 80150f8:	4283      	cmp	r3, r0
 80150fa:	d004      	beq.n	8015106 <__swbuf_r+0x62>
 80150fc:	89a3      	ldrh	r3, [r4, #12]
 80150fe:	07db      	lsls	r3, r3, #31
 8015100:	d506      	bpl.n	8015110 <__swbuf_r+0x6c>
 8015102:	2e0a      	cmp	r6, #10
 8015104:	d104      	bne.n	8015110 <__swbuf_r+0x6c>
 8015106:	4621      	mov	r1, r4
 8015108:	4628      	mov	r0, r5
 801510a:	f000 f927 	bl	801535c <_fflush_r>
 801510e:	b988      	cbnz	r0, 8015134 <__swbuf_r+0x90>
 8015110:	4638      	mov	r0, r7
 8015112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015114:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <__swbuf_r+0x9c>)
 8015116:	429c      	cmp	r4, r3
 8015118:	d101      	bne.n	801511e <__swbuf_r+0x7a>
 801511a:	68ac      	ldr	r4, [r5, #8]
 801511c:	e7cf      	b.n	80150be <__swbuf_r+0x1a>
 801511e:	4b09      	ldr	r3, [pc, #36]	; (8015144 <__swbuf_r+0xa0>)
 8015120:	429c      	cmp	r4, r3
 8015122:	bf08      	it	eq
 8015124:	68ec      	ldreq	r4, [r5, #12]
 8015126:	e7ca      	b.n	80150be <__swbuf_r+0x1a>
 8015128:	4621      	mov	r1, r4
 801512a:	4628      	mov	r0, r5
 801512c:	f000 f81a 	bl	8015164 <__swsetup_r>
 8015130:	2800      	cmp	r0, #0
 8015132:	d0cb      	beq.n	80150cc <__swbuf_r+0x28>
 8015134:	f04f 37ff 	mov.w	r7, #4294967295
 8015138:	e7ea      	b.n	8015110 <__swbuf_r+0x6c>
 801513a:	bf00      	nop
 801513c:	0801610c 	.word	0x0801610c
 8015140:	0801612c 	.word	0x0801612c
 8015144:	080160ec 	.word	0x080160ec

08015148 <__ascii_wctomb>:
 8015148:	b149      	cbz	r1, 801515e <__ascii_wctomb+0x16>
 801514a:	2aff      	cmp	r2, #255	; 0xff
 801514c:	bf85      	ittet	hi
 801514e:	238a      	movhi	r3, #138	; 0x8a
 8015150:	6003      	strhi	r3, [r0, #0]
 8015152:	700a      	strbls	r2, [r1, #0]
 8015154:	f04f 30ff 	movhi.w	r0, #4294967295
 8015158:	bf98      	it	ls
 801515a:	2001      	movls	r0, #1
 801515c:	4770      	bx	lr
 801515e:	4608      	mov	r0, r1
 8015160:	4770      	bx	lr
	...

08015164 <__swsetup_r>:
 8015164:	4b32      	ldr	r3, [pc, #200]	; (8015230 <__swsetup_r+0xcc>)
 8015166:	b570      	push	{r4, r5, r6, lr}
 8015168:	681d      	ldr	r5, [r3, #0]
 801516a:	4606      	mov	r6, r0
 801516c:	460c      	mov	r4, r1
 801516e:	b125      	cbz	r5, 801517a <__swsetup_r+0x16>
 8015170:	69ab      	ldr	r3, [r5, #24]
 8015172:	b913      	cbnz	r3, 801517a <__swsetup_r+0x16>
 8015174:	4628      	mov	r0, r5
 8015176:	f000 f985 	bl	8015484 <__sinit>
 801517a:	4b2e      	ldr	r3, [pc, #184]	; (8015234 <__swsetup_r+0xd0>)
 801517c:	429c      	cmp	r4, r3
 801517e:	d10f      	bne.n	80151a0 <__swsetup_r+0x3c>
 8015180:	686c      	ldr	r4, [r5, #4]
 8015182:	89a3      	ldrh	r3, [r4, #12]
 8015184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015188:	0719      	lsls	r1, r3, #28
 801518a:	d42c      	bmi.n	80151e6 <__swsetup_r+0x82>
 801518c:	06dd      	lsls	r5, r3, #27
 801518e:	d411      	bmi.n	80151b4 <__swsetup_r+0x50>
 8015190:	2309      	movs	r3, #9
 8015192:	6033      	str	r3, [r6, #0]
 8015194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015198:	81a3      	strh	r3, [r4, #12]
 801519a:	f04f 30ff 	mov.w	r0, #4294967295
 801519e:	e03e      	b.n	801521e <__swsetup_r+0xba>
 80151a0:	4b25      	ldr	r3, [pc, #148]	; (8015238 <__swsetup_r+0xd4>)
 80151a2:	429c      	cmp	r4, r3
 80151a4:	d101      	bne.n	80151aa <__swsetup_r+0x46>
 80151a6:	68ac      	ldr	r4, [r5, #8]
 80151a8:	e7eb      	b.n	8015182 <__swsetup_r+0x1e>
 80151aa:	4b24      	ldr	r3, [pc, #144]	; (801523c <__swsetup_r+0xd8>)
 80151ac:	429c      	cmp	r4, r3
 80151ae:	bf08      	it	eq
 80151b0:	68ec      	ldreq	r4, [r5, #12]
 80151b2:	e7e6      	b.n	8015182 <__swsetup_r+0x1e>
 80151b4:	0758      	lsls	r0, r3, #29
 80151b6:	d512      	bpl.n	80151de <__swsetup_r+0x7a>
 80151b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151ba:	b141      	cbz	r1, 80151ce <__swsetup_r+0x6a>
 80151bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151c0:	4299      	cmp	r1, r3
 80151c2:	d002      	beq.n	80151ca <__swsetup_r+0x66>
 80151c4:	4630      	mov	r0, r6
 80151c6:	f7fd fc7b 	bl	8012ac0 <_free_r>
 80151ca:	2300      	movs	r3, #0
 80151cc:	6363      	str	r3, [r4, #52]	; 0x34
 80151ce:	89a3      	ldrh	r3, [r4, #12]
 80151d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151d4:	81a3      	strh	r3, [r4, #12]
 80151d6:	2300      	movs	r3, #0
 80151d8:	6063      	str	r3, [r4, #4]
 80151da:	6923      	ldr	r3, [r4, #16]
 80151dc:	6023      	str	r3, [r4, #0]
 80151de:	89a3      	ldrh	r3, [r4, #12]
 80151e0:	f043 0308 	orr.w	r3, r3, #8
 80151e4:	81a3      	strh	r3, [r4, #12]
 80151e6:	6923      	ldr	r3, [r4, #16]
 80151e8:	b94b      	cbnz	r3, 80151fe <__swsetup_r+0x9a>
 80151ea:	89a3      	ldrh	r3, [r4, #12]
 80151ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151f4:	d003      	beq.n	80151fe <__swsetup_r+0x9a>
 80151f6:	4621      	mov	r1, r4
 80151f8:	4630      	mov	r0, r6
 80151fa:	f000 fa05 	bl	8015608 <__smakebuf_r>
 80151fe:	89a0      	ldrh	r0, [r4, #12]
 8015200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015204:	f010 0301 	ands.w	r3, r0, #1
 8015208:	d00a      	beq.n	8015220 <__swsetup_r+0xbc>
 801520a:	2300      	movs	r3, #0
 801520c:	60a3      	str	r3, [r4, #8]
 801520e:	6963      	ldr	r3, [r4, #20]
 8015210:	425b      	negs	r3, r3
 8015212:	61a3      	str	r3, [r4, #24]
 8015214:	6923      	ldr	r3, [r4, #16]
 8015216:	b943      	cbnz	r3, 801522a <__swsetup_r+0xc6>
 8015218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801521c:	d1ba      	bne.n	8015194 <__swsetup_r+0x30>
 801521e:	bd70      	pop	{r4, r5, r6, pc}
 8015220:	0781      	lsls	r1, r0, #30
 8015222:	bf58      	it	pl
 8015224:	6963      	ldrpl	r3, [r4, #20]
 8015226:	60a3      	str	r3, [r4, #8]
 8015228:	e7f4      	b.n	8015214 <__swsetup_r+0xb0>
 801522a:	2000      	movs	r0, #0
 801522c:	e7f7      	b.n	801521e <__swsetup_r+0xba>
 801522e:	bf00      	nop
 8015230:	2000012c 	.word	0x2000012c
 8015234:	0801610c 	.word	0x0801610c
 8015238:	0801612c 	.word	0x0801612c
 801523c:	080160ec 	.word	0x080160ec

08015240 <abort>:
 8015240:	b508      	push	{r3, lr}
 8015242:	2006      	movs	r0, #6
 8015244:	f000 fa50 	bl	80156e8 <raise>
 8015248:	2001      	movs	r0, #1
 801524a:	f7ec fda3 	bl	8001d94 <_exit>
	...

08015250 <__sflush_r>:
 8015250:	898a      	ldrh	r2, [r1, #12]
 8015252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015256:	4605      	mov	r5, r0
 8015258:	0710      	lsls	r0, r2, #28
 801525a:	460c      	mov	r4, r1
 801525c:	d458      	bmi.n	8015310 <__sflush_r+0xc0>
 801525e:	684b      	ldr	r3, [r1, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	dc05      	bgt.n	8015270 <__sflush_r+0x20>
 8015264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015266:	2b00      	cmp	r3, #0
 8015268:	dc02      	bgt.n	8015270 <__sflush_r+0x20>
 801526a:	2000      	movs	r0, #0
 801526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015272:	2e00      	cmp	r6, #0
 8015274:	d0f9      	beq.n	801526a <__sflush_r+0x1a>
 8015276:	2300      	movs	r3, #0
 8015278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801527c:	682f      	ldr	r7, [r5, #0]
 801527e:	602b      	str	r3, [r5, #0]
 8015280:	d032      	beq.n	80152e8 <__sflush_r+0x98>
 8015282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015284:	89a3      	ldrh	r3, [r4, #12]
 8015286:	075a      	lsls	r2, r3, #29
 8015288:	d505      	bpl.n	8015296 <__sflush_r+0x46>
 801528a:	6863      	ldr	r3, [r4, #4]
 801528c:	1ac0      	subs	r0, r0, r3
 801528e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015290:	b10b      	cbz	r3, 8015296 <__sflush_r+0x46>
 8015292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015294:	1ac0      	subs	r0, r0, r3
 8015296:	2300      	movs	r3, #0
 8015298:	4602      	mov	r2, r0
 801529a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801529c:	6a21      	ldr	r1, [r4, #32]
 801529e:	4628      	mov	r0, r5
 80152a0:	47b0      	blx	r6
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	89a3      	ldrh	r3, [r4, #12]
 80152a6:	d106      	bne.n	80152b6 <__sflush_r+0x66>
 80152a8:	6829      	ldr	r1, [r5, #0]
 80152aa:	291d      	cmp	r1, #29
 80152ac:	d82c      	bhi.n	8015308 <__sflush_r+0xb8>
 80152ae:	4a2a      	ldr	r2, [pc, #168]	; (8015358 <__sflush_r+0x108>)
 80152b0:	40ca      	lsrs	r2, r1
 80152b2:	07d6      	lsls	r6, r2, #31
 80152b4:	d528      	bpl.n	8015308 <__sflush_r+0xb8>
 80152b6:	2200      	movs	r2, #0
 80152b8:	6062      	str	r2, [r4, #4]
 80152ba:	04d9      	lsls	r1, r3, #19
 80152bc:	6922      	ldr	r2, [r4, #16]
 80152be:	6022      	str	r2, [r4, #0]
 80152c0:	d504      	bpl.n	80152cc <__sflush_r+0x7c>
 80152c2:	1c42      	adds	r2, r0, #1
 80152c4:	d101      	bne.n	80152ca <__sflush_r+0x7a>
 80152c6:	682b      	ldr	r3, [r5, #0]
 80152c8:	b903      	cbnz	r3, 80152cc <__sflush_r+0x7c>
 80152ca:	6560      	str	r0, [r4, #84]	; 0x54
 80152cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152ce:	602f      	str	r7, [r5, #0]
 80152d0:	2900      	cmp	r1, #0
 80152d2:	d0ca      	beq.n	801526a <__sflush_r+0x1a>
 80152d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152d8:	4299      	cmp	r1, r3
 80152da:	d002      	beq.n	80152e2 <__sflush_r+0x92>
 80152dc:	4628      	mov	r0, r5
 80152de:	f7fd fbef 	bl	8012ac0 <_free_r>
 80152e2:	2000      	movs	r0, #0
 80152e4:	6360      	str	r0, [r4, #52]	; 0x34
 80152e6:	e7c1      	b.n	801526c <__sflush_r+0x1c>
 80152e8:	6a21      	ldr	r1, [r4, #32]
 80152ea:	2301      	movs	r3, #1
 80152ec:	4628      	mov	r0, r5
 80152ee:	47b0      	blx	r6
 80152f0:	1c41      	adds	r1, r0, #1
 80152f2:	d1c7      	bne.n	8015284 <__sflush_r+0x34>
 80152f4:	682b      	ldr	r3, [r5, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d0c4      	beq.n	8015284 <__sflush_r+0x34>
 80152fa:	2b1d      	cmp	r3, #29
 80152fc:	d001      	beq.n	8015302 <__sflush_r+0xb2>
 80152fe:	2b16      	cmp	r3, #22
 8015300:	d101      	bne.n	8015306 <__sflush_r+0xb6>
 8015302:	602f      	str	r7, [r5, #0]
 8015304:	e7b1      	b.n	801526a <__sflush_r+0x1a>
 8015306:	89a3      	ldrh	r3, [r4, #12]
 8015308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801530c:	81a3      	strh	r3, [r4, #12]
 801530e:	e7ad      	b.n	801526c <__sflush_r+0x1c>
 8015310:	690f      	ldr	r7, [r1, #16]
 8015312:	2f00      	cmp	r7, #0
 8015314:	d0a9      	beq.n	801526a <__sflush_r+0x1a>
 8015316:	0793      	lsls	r3, r2, #30
 8015318:	680e      	ldr	r6, [r1, #0]
 801531a:	bf08      	it	eq
 801531c:	694b      	ldreq	r3, [r1, #20]
 801531e:	600f      	str	r7, [r1, #0]
 8015320:	bf18      	it	ne
 8015322:	2300      	movne	r3, #0
 8015324:	eba6 0807 	sub.w	r8, r6, r7
 8015328:	608b      	str	r3, [r1, #8]
 801532a:	f1b8 0f00 	cmp.w	r8, #0
 801532e:	dd9c      	ble.n	801526a <__sflush_r+0x1a>
 8015330:	6a21      	ldr	r1, [r4, #32]
 8015332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015334:	4643      	mov	r3, r8
 8015336:	463a      	mov	r2, r7
 8015338:	4628      	mov	r0, r5
 801533a:	47b0      	blx	r6
 801533c:	2800      	cmp	r0, #0
 801533e:	dc06      	bgt.n	801534e <__sflush_r+0xfe>
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015346:	81a3      	strh	r3, [r4, #12]
 8015348:	f04f 30ff 	mov.w	r0, #4294967295
 801534c:	e78e      	b.n	801526c <__sflush_r+0x1c>
 801534e:	4407      	add	r7, r0
 8015350:	eba8 0800 	sub.w	r8, r8, r0
 8015354:	e7e9      	b.n	801532a <__sflush_r+0xda>
 8015356:	bf00      	nop
 8015358:	20400001 	.word	0x20400001

0801535c <_fflush_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	690b      	ldr	r3, [r1, #16]
 8015360:	4605      	mov	r5, r0
 8015362:	460c      	mov	r4, r1
 8015364:	b913      	cbnz	r3, 801536c <_fflush_r+0x10>
 8015366:	2500      	movs	r5, #0
 8015368:	4628      	mov	r0, r5
 801536a:	bd38      	pop	{r3, r4, r5, pc}
 801536c:	b118      	cbz	r0, 8015376 <_fflush_r+0x1a>
 801536e:	6983      	ldr	r3, [r0, #24]
 8015370:	b90b      	cbnz	r3, 8015376 <_fflush_r+0x1a>
 8015372:	f000 f887 	bl	8015484 <__sinit>
 8015376:	4b14      	ldr	r3, [pc, #80]	; (80153c8 <_fflush_r+0x6c>)
 8015378:	429c      	cmp	r4, r3
 801537a:	d11b      	bne.n	80153b4 <_fflush_r+0x58>
 801537c:	686c      	ldr	r4, [r5, #4]
 801537e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d0ef      	beq.n	8015366 <_fflush_r+0xa>
 8015386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015388:	07d0      	lsls	r0, r2, #31
 801538a:	d404      	bmi.n	8015396 <_fflush_r+0x3a>
 801538c:	0599      	lsls	r1, r3, #22
 801538e:	d402      	bmi.n	8015396 <_fflush_r+0x3a>
 8015390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015392:	f7ff fcd0 	bl	8014d36 <__retarget_lock_acquire_recursive>
 8015396:	4628      	mov	r0, r5
 8015398:	4621      	mov	r1, r4
 801539a:	f7ff ff59 	bl	8015250 <__sflush_r>
 801539e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153a0:	07da      	lsls	r2, r3, #31
 80153a2:	4605      	mov	r5, r0
 80153a4:	d4e0      	bmi.n	8015368 <_fflush_r+0xc>
 80153a6:	89a3      	ldrh	r3, [r4, #12]
 80153a8:	059b      	lsls	r3, r3, #22
 80153aa:	d4dd      	bmi.n	8015368 <_fflush_r+0xc>
 80153ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153ae:	f7ff fcc3 	bl	8014d38 <__retarget_lock_release_recursive>
 80153b2:	e7d9      	b.n	8015368 <_fflush_r+0xc>
 80153b4:	4b05      	ldr	r3, [pc, #20]	; (80153cc <_fflush_r+0x70>)
 80153b6:	429c      	cmp	r4, r3
 80153b8:	d101      	bne.n	80153be <_fflush_r+0x62>
 80153ba:	68ac      	ldr	r4, [r5, #8]
 80153bc:	e7df      	b.n	801537e <_fflush_r+0x22>
 80153be:	4b04      	ldr	r3, [pc, #16]	; (80153d0 <_fflush_r+0x74>)
 80153c0:	429c      	cmp	r4, r3
 80153c2:	bf08      	it	eq
 80153c4:	68ec      	ldreq	r4, [r5, #12]
 80153c6:	e7da      	b.n	801537e <_fflush_r+0x22>
 80153c8:	0801610c 	.word	0x0801610c
 80153cc:	0801612c 	.word	0x0801612c
 80153d0:	080160ec 	.word	0x080160ec

080153d4 <std>:
 80153d4:	2300      	movs	r3, #0
 80153d6:	b510      	push	{r4, lr}
 80153d8:	4604      	mov	r4, r0
 80153da:	e9c0 3300 	strd	r3, r3, [r0]
 80153de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153e2:	6083      	str	r3, [r0, #8]
 80153e4:	8181      	strh	r1, [r0, #12]
 80153e6:	6643      	str	r3, [r0, #100]	; 0x64
 80153e8:	81c2      	strh	r2, [r0, #14]
 80153ea:	6183      	str	r3, [r0, #24]
 80153ec:	4619      	mov	r1, r3
 80153ee:	2208      	movs	r2, #8
 80153f0:	305c      	adds	r0, #92	; 0x5c
 80153f2:	f7fd fb5d 	bl	8012ab0 <memset>
 80153f6:	4b05      	ldr	r3, [pc, #20]	; (801540c <std+0x38>)
 80153f8:	6263      	str	r3, [r4, #36]	; 0x24
 80153fa:	4b05      	ldr	r3, [pc, #20]	; (8015410 <std+0x3c>)
 80153fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80153fe:	4b05      	ldr	r3, [pc, #20]	; (8015414 <std+0x40>)
 8015400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015402:	4b05      	ldr	r3, [pc, #20]	; (8015418 <std+0x44>)
 8015404:	6224      	str	r4, [r4, #32]
 8015406:	6323      	str	r3, [r4, #48]	; 0x30
 8015408:	bd10      	pop	{r4, pc}
 801540a:	bf00      	nop
 801540c:	08015721 	.word	0x08015721
 8015410:	08015743 	.word	0x08015743
 8015414:	0801577b 	.word	0x0801577b
 8015418:	0801579f 	.word	0x0801579f

0801541c <_cleanup_r>:
 801541c:	4901      	ldr	r1, [pc, #4]	; (8015424 <_cleanup_r+0x8>)
 801541e:	f000 b8af 	b.w	8015580 <_fwalk_reent>
 8015422:	bf00      	nop
 8015424:	0801535d 	.word	0x0801535d

08015428 <__sfmoreglue>:
 8015428:	b570      	push	{r4, r5, r6, lr}
 801542a:	2268      	movs	r2, #104	; 0x68
 801542c:	1e4d      	subs	r5, r1, #1
 801542e:	4355      	muls	r5, r2
 8015430:	460e      	mov	r6, r1
 8015432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015436:	f7fd fbaf 	bl	8012b98 <_malloc_r>
 801543a:	4604      	mov	r4, r0
 801543c:	b140      	cbz	r0, 8015450 <__sfmoreglue+0x28>
 801543e:	2100      	movs	r1, #0
 8015440:	e9c0 1600 	strd	r1, r6, [r0]
 8015444:	300c      	adds	r0, #12
 8015446:	60a0      	str	r0, [r4, #8]
 8015448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801544c:	f7fd fb30 	bl	8012ab0 <memset>
 8015450:	4620      	mov	r0, r4
 8015452:	bd70      	pop	{r4, r5, r6, pc}

08015454 <__sfp_lock_acquire>:
 8015454:	4801      	ldr	r0, [pc, #4]	; (801545c <__sfp_lock_acquire+0x8>)
 8015456:	f7ff bc6e 	b.w	8014d36 <__retarget_lock_acquire_recursive>
 801545a:	bf00      	nop
 801545c:	20004a01 	.word	0x20004a01

08015460 <__sfp_lock_release>:
 8015460:	4801      	ldr	r0, [pc, #4]	; (8015468 <__sfp_lock_release+0x8>)
 8015462:	f7ff bc69 	b.w	8014d38 <__retarget_lock_release_recursive>
 8015466:	bf00      	nop
 8015468:	20004a01 	.word	0x20004a01

0801546c <__sinit_lock_acquire>:
 801546c:	4801      	ldr	r0, [pc, #4]	; (8015474 <__sinit_lock_acquire+0x8>)
 801546e:	f7ff bc62 	b.w	8014d36 <__retarget_lock_acquire_recursive>
 8015472:	bf00      	nop
 8015474:	20004a02 	.word	0x20004a02

08015478 <__sinit_lock_release>:
 8015478:	4801      	ldr	r0, [pc, #4]	; (8015480 <__sinit_lock_release+0x8>)
 801547a:	f7ff bc5d 	b.w	8014d38 <__retarget_lock_release_recursive>
 801547e:	bf00      	nop
 8015480:	20004a02 	.word	0x20004a02

08015484 <__sinit>:
 8015484:	b510      	push	{r4, lr}
 8015486:	4604      	mov	r4, r0
 8015488:	f7ff fff0 	bl	801546c <__sinit_lock_acquire>
 801548c:	69a3      	ldr	r3, [r4, #24]
 801548e:	b11b      	cbz	r3, 8015498 <__sinit+0x14>
 8015490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015494:	f7ff bff0 	b.w	8015478 <__sinit_lock_release>
 8015498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801549c:	6523      	str	r3, [r4, #80]	; 0x50
 801549e:	4b13      	ldr	r3, [pc, #76]	; (80154ec <__sinit+0x68>)
 80154a0:	4a13      	ldr	r2, [pc, #76]	; (80154f0 <__sinit+0x6c>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80154a6:	42a3      	cmp	r3, r4
 80154a8:	bf04      	itt	eq
 80154aa:	2301      	moveq	r3, #1
 80154ac:	61a3      	streq	r3, [r4, #24]
 80154ae:	4620      	mov	r0, r4
 80154b0:	f000 f820 	bl	80154f4 <__sfp>
 80154b4:	6060      	str	r0, [r4, #4]
 80154b6:	4620      	mov	r0, r4
 80154b8:	f000 f81c 	bl	80154f4 <__sfp>
 80154bc:	60a0      	str	r0, [r4, #8]
 80154be:	4620      	mov	r0, r4
 80154c0:	f000 f818 	bl	80154f4 <__sfp>
 80154c4:	2200      	movs	r2, #0
 80154c6:	60e0      	str	r0, [r4, #12]
 80154c8:	2104      	movs	r1, #4
 80154ca:	6860      	ldr	r0, [r4, #4]
 80154cc:	f7ff ff82 	bl	80153d4 <std>
 80154d0:	68a0      	ldr	r0, [r4, #8]
 80154d2:	2201      	movs	r2, #1
 80154d4:	2109      	movs	r1, #9
 80154d6:	f7ff ff7d 	bl	80153d4 <std>
 80154da:	68e0      	ldr	r0, [r4, #12]
 80154dc:	2202      	movs	r2, #2
 80154de:	2112      	movs	r1, #18
 80154e0:	f7ff ff78 	bl	80153d4 <std>
 80154e4:	2301      	movs	r3, #1
 80154e6:	61a3      	str	r3, [r4, #24]
 80154e8:	e7d2      	b.n	8015490 <__sinit+0xc>
 80154ea:	bf00      	nop
 80154ec:	08015d70 	.word	0x08015d70
 80154f0:	0801541d 	.word	0x0801541d

080154f4 <__sfp>:
 80154f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f6:	4607      	mov	r7, r0
 80154f8:	f7ff ffac 	bl	8015454 <__sfp_lock_acquire>
 80154fc:	4b1e      	ldr	r3, [pc, #120]	; (8015578 <__sfp+0x84>)
 80154fe:	681e      	ldr	r6, [r3, #0]
 8015500:	69b3      	ldr	r3, [r6, #24]
 8015502:	b913      	cbnz	r3, 801550a <__sfp+0x16>
 8015504:	4630      	mov	r0, r6
 8015506:	f7ff ffbd 	bl	8015484 <__sinit>
 801550a:	3648      	adds	r6, #72	; 0x48
 801550c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015510:	3b01      	subs	r3, #1
 8015512:	d503      	bpl.n	801551c <__sfp+0x28>
 8015514:	6833      	ldr	r3, [r6, #0]
 8015516:	b30b      	cbz	r3, 801555c <__sfp+0x68>
 8015518:	6836      	ldr	r6, [r6, #0]
 801551a:	e7f7      	b.n	801550c <__sfp+0x18>
 801551c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015520:	b9d5      	cbnz	r5, 8015558 <__sfp+0x64>
 8015522:	4b16      	ldr	r3, [pc, #88]	; (801557c <__sfp+0x88>)
 8015524:	60e3      	str	r3, [r4, #12]
 8015526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801552a:	6665      	str	r5, [r4, #100]	; 0x64
 801552c:	f7ff fc02 	bl	8014d34 <__retarget_lock_init_recursive>
 8015530:	f7ff ff96 	bl	8015460 <__sfp_lock_release>
 8015534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801553c:	6025      	str	r5, [r4, #0]
 801553e:	61a5      	str	r5, [r4, #24]
 8015540:	2208      	movs	r2, #8
 8015542:	4629      	mov	r1, r5
 8015544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015548:	f7fd fab2 	bl	8012ab0 <memset>
 801554c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015554:	4620      	mov	r0, r4
 8015556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015558:	3468      	adds	r4, #104	; 0x68
 801555a:	e7d9      	b.n	8015510 <__sfp+0x1c>
 801555c:	2104      	movs	r1, #4
 801555e:	4638      	mov	r0, r7
 8015560:	f7ff ff62 	bl	8015428 <__sfmoreglue>
 8015564:	4604      	mov	r4, r0
 8015566:	6030      	str	r0, [r6, #0]
 8015568:	2800      	cmp	r0, #0
 801556a:	d1d5      	bne.n	8015518 <__sfp+0x24>
 801556c:	f7ff ff78 	bl	8015460 <__sfp_lock_release>
 8015570:	230c      	movs	r3, #12
 8015572:	603b      	str	r3, [r7, #0]
 8015574:	e7ee      	b.n	8015554 <__sfp+0x60>
 8015576:	bf00      	nop
 8015578:	08015d70 	.word	0x08015d70
 801557c:	ffff0001 	.word	0xffff0001

08015580 <_fwalk_reent>:
 8015580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015584:	4606      	mov	r6, r0
 8015586:	4688      	mov	r8, r1
 8015588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801558c:	2700      	movs	r7, #0
 801558e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015592:	f1b9 0901 	subs.w	r9, r9, #1
 8015596:	d505      	bpl.n	80155a4 <_fwalk_reent+0x24>
 8015598:	6824      	ldr	r4, [r4, #0]
 801559a:	2c00      	cmp	r4, #0
 801559c:	d1f7      	bne.n	801558e <_fwalk_reent+0xe>
 801559e:	4638      	mov	r0, r7
 80155a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155a4:	89ab      	ldrh	r3, [r5, #12]
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	d907      	bls.n	80155ba <_fwalk_reent+0x3a>
 80155aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80155ae:	3301      	adds	r3, #1
 80155b0:	d003      	beq.n	80155ba <_fwalk_reent+0x3a>
 80155b2:	4629      	mov	r1, r5
 80155b4:	4630      	mov	r0, r6
 80155b6:	47c0      	blx	r8
 80155b8:	4307      	orrs	r7, r0
 80155ba:	3568      	adds	r5, #104	; 0x68
 80155bc:	e7e9      	b.n	8015592 <_fwalk_reent+0x12>

080155be <__swhatbuf_r>:
 80155be:	b570      	push	{r4, r5, r6, lr}
 80155c0:	460e      	mov	r6, r1
 80155c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155c6:	2900      	cmp	r1, #0
 80155c8:	b096      	sub	sp, #88	; 0x58
 80155ca:	4614      	mov	r4, r2
 80155cc:	461d      	mov	r5, r3
 80155ce:	da08      	bge.n	80155e2 <__swhatbuf_r+0x24>
 80155d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80155d4:	2200      	movs	r2, #0
 80155d6:	602a      	str	r2, [r5, #0]
 80155d8:	061a      	lsls	r2, r3, #24
 80155da:	d410      	bmi.n	80155fe <__swhatbuf_r+0x40>
 80155dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155e0:	e00e      	b.n	8015600 <__swhatbuf_r+0x42>
 80155e2:	466a      	mov	r2, sp
 80155e4:	f000 f902 	bl	80157ec <_fstat_r>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	dbf1      	blt.n	80155d0 <__swhatbuf_r+0x12>
 80155ec:	9a01      	ldr	r2, [sp, #4]
 80155ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80155f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80155f6:	425a      	negs	r2, r3
 80155f8:	415a      	adcs	r2, r3
 80155fa:	602a      	str	r2, [r5, #0]
 80155fc:	e7ee      	b.n	80155dc <__swhatbuf_r+0x1e>
 80155fe:	2340      	movs	r3, #64	; 0x40
 8015600:	2000      	movs	r0, #0
 8015602:	6023      	str	r3, [r4, #0]
 8015604:	b016      	add	sp, #88	; 0x58
 8015606:	bd70      	pop	{r4, r5, r6, pc}

08015608 <__smakebuf_r>:
 8015608:	898b      	ldrh	r3, [r1, #12]
 801560a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801560c:	079d      	lsls	r5, r3, #30
 801560e:	4606      	mov	r6, r0
 8015610:	460c      	mov	r4, r1
 8015612:	d507      	bpl.n	8015624 <__smakebuf_r+0x1c>
 8015614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	6123      	str	r3, [r4, #16]
 801561c:	2301      	movs	r3, #1
 801561e:	6163      	str	r3, [r4, #20]
 8015620:	b002      	add	sp, #8
 8015622:	bd70      	pop	{r4, r5, r6, pc}
 8015624:	ab01      	add	r3, sp, #4
 8015626:	466a      	mov	r2, sp
 8015628:	f7ff ffc9 	bl	80155be <__swhatbuf_r>
 801562c:	9900      	ldr	r1, [sp, #0]
 801562e:	4605      	mov	r5, r0
 8015630:	4630      	mov	r0, r6
 8015632:	f7fd fab1 	bl	8012b98 <_malloc_r>
 8015636:	b948      	cbnz	r0, 801564c <__smakebuf_r+0x44>
 8015638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801563c:	059a      	lsls	r2, r3, #22
 801563e:	d4ef      	bmi.n	8015620 <__smakebuf_r+0x18>
 8015640:	f023 0303 	bic.w	r3, r3, #3
 8015644:	f043 0302 	orr.w	r3, r3, #2
 8015648:	81a3      	strh	r3, [r4, #12]
 801564a:	e7e3      	b.n	8015614 <__smakebuf_r+0xc>
 801564c:	4b0d      	ldr	r3, [pc, #52]	; (8015684 <__smakebuf_r+0x7c>)
 801564e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015650:	89a3      	ldrh	r3, [r4, #12]
 8015652:	6020      	str	r0, [r4, #0]
 8015654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015658:	81a3      	strh	r3, [r4, #12]
 801565a:	9b00      	ldr	r3, [sp, #0]
 801565c:	6163      	str	r3, [r4, #20]
 801565e:	9b01      	ldr	r3, [sp, #4]
 8015660:	6120      	str	r0, [r4, #16]
 8015662:	b15b      	cbz	r3, 801567c <__smakebuf_r+0x74>
 8015664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015668:	4630      	mov	r0, r6
 801566a:	f000 f8d1 	bl	8015810 <_isatty_r>
 801566e:	b128      	cbz	r0, 801567c <__smakebuf_r+0x74>
 8015670:	89a3      	ldrh	r3, [r4, #12]
 8015672:	f023 0303 	bic.w	r3, r3, #3
 8015676:	f043 0301 	orr.w	r3, r3, #1
 801567a:	81a3      	strh	r3, [r4, #12]
 801567c:	89a0      	ldrh	r0, [r4, #12]
 801567e:	4305      	orrs	r5, r0
 8015680:	81a5      	strh	r5, [r4, #12]
 8015682:	e7cd      	b.n	8015620 <__smakebuf_r+0x18>
 8015684:	0801541d 	.word	0x0801541d

08015688 <_malloc_usable_size_r>:
 8015688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801568c:	1f18      	subs	r0, r3, #4
 801568e:	2b00      	cmp	r3, #0
 8015690:	bfbc      	itt	lt
 8015692:	580b      	ldrlt	r3, [r1, r0]
 8015694:	18c0      	addlt	r0, r0, r3
 8015696:	4770      	bx	lr

08015698 <_raise_r>:
 8015698:	291f      	cmp	r1, #31
 801569a:	b538      	push	{r3, r4, r5, lr}
 801569c:	4604      	mov	r4, r0
 801569e:	460d      	mov	r5, r1
 80156a0:	d904      	bls.n	80156ac <_raise_r+0x14>
 80156a2:	2316      	movs	r3, #22
 80156a4:	6003      	str	r3, [r0, #0]
 80156a6:	f04f 30ff 	mov.w	r0, #4294967295
 80156aa:	bd38      	pop	{r3, r4, r5, pc}
 80156ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80156ae:	b112      	cbz	r2, 80156b6 <_raise_r+0x1e>
 80156b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156b4:	b94b      	cbnz	r3, 80156ca <_raise_r+0x32>
 80156b6:	4620      	mov	r0, r4
 80156b8:	f000 f830 	bl	801571c <_getpid_r>
 80156bc:	462a      	mov	r2, r5
 80156be:	4601      	mov	r1, r0
 80156c0:	4620      	mov	r0, r4
 80156c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156c6:	f000 b817 	b.w	80156f8 <_kill_r>
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d00a      	beq.n	80156e4 <_raise_r+0x4c>
 80156ce:	1c59      	adds	r1, r3, #1
 80156d0:	d103      	bne.n	80156da <_raise_r+0x42>
 80156d2:	2316      	movs	r3, #22
 80156d4:	6003      	str	r3, [r0, #0]
 80156d6:	2001      	movs	r0, #1
 80156d8:	e7e7      	b.n	80156aa <_raise_r+0x12>
 80156da:	2400      	movs	r4, #0
 80156dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80156e0:	4628      	mov	r0, r5
 80156e2:	4798      	blx	r3
 80156e4:	2000      	movs	r0, #0
 80156e6:	e7e0      	b.n	80156aa <_raise_r+0x12>

080156e8 <raise>:
 80156e8:	4b02      	ldr	r3, [pc, #8]	; (80156f4 <raise+0xc>)
 80156ea:	4601      	mov	r1, r0
 80156ec:	6818      	ldr	r0, [r3, #0]
 80156ee:	f7ff bfd3 	b.w	8015698 <_raise_r>
 80156f2:	bf00      	nop
 80156f4:	2000012c 	.word	0x2000012c

080156f8 <_kill_r>:
 80156f8:	b538      	push	{r3, r4, r5, lr}
 80156fa:	4d07      	ldr	r5, [pc, #28]	; (8015718 <_kill_r+0x20>)
 80156fc:	2300      	movs	r3, #0
 80156fe:	4604      	mov	r4, r0
 8015700:	4608      	mov	r0, r1
 8015702:	4611      	mov	r1, r2
 8015704:	602b      	str	r3, [r5, #0]
 8015706:	f7ec fb35 	bl	8001d74 <_kill>
 801570a:	1c43      	adds	r3, r0, #1
 801570c:	d102      	bne.n	8015714 <_kill_r+0x1c>
 801570e:	682b      	ldr	r3, [r5, #0]
 8015710:	b103      	cbz	r3, 8015714 <_kill_r+0x1c>
 8015712:	6023      	str	r3, [r4, #0]
 8015714:	bd38      	pop	{r3, r4, r5, pc}
 8015716:	bf00      	nop
 8015718:	200049fc 	.word	0x200049fc

0801571c <_getpid_r>:
 801571c:	f7ec bb22 	b.w	8001d64 <_getpid>

08015720 <__sread>:
 8015720:	b510      	push	{r4, lr}
 8015722:	460c      	mov	r4, r1
 8015724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015728:	f000 f894 	bl	8015854 <_read_r>
 801572c:	2800      	cmp	r0, #0
 801572e:	bfab      	itete	ge
 8015730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015732:	89a3      	ldrhlt	r3, [r4, #12]
 8015734:	181b      	addge	r3, r3, r0
 8015736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801573a:	bfac      	ite	ge
 801573c:	6563      	strge	r3, [r4, #84]	; 0x54
 801573e:	81a3      	strhlt	r3, [r4, #12]
 8015740:	bd10      	pop	{r4, pc}

08015742 <__swrite>:
 8015742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015746:	461f      	mov	r7, r3
 8015748:	898b      	ldrh	r3, [r1, #12]
 801574a:	05db      	lsls	r3, r3, #23
 801574c:	4605      	mov	r5, r0
 801574e:	460c      	mov	r4, r1
 8015750:	4616      	mov	r6, r2
 8015752:	d505      	bpl.n	8015760 <__swrite+0x1e>
 8015754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015758:	2302      	movs	r3, #2
 801575a:	2200      	movs	r2, #0
 801575c:	f000 f868 	bl	8015830 <_lseek_r>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	4632      	mov	r2, r6
 801576e:	463b      	mov	r3, r7
 8015770:	4628      	mov	r0, r5
 8015772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015776:	f000 b817 	b.w	80157a8 <_write_r>

0801577a <__sseek>:
 801577a:	b510      	push	{r4, lr}
 801577c:	460c      	mov	r4, r1
 801577e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015782:	f000 f855 	bl	8015830 <_lseek_r>
 8015786:	1c43      	adds	r3, r0, #1
 8015788:	89a3      	ldrh	r3, [r4, #12]
 801578a:	bf15      	itete	ne
 801578c:	6560      	strne	r0, [r4, #84]	; 0x54
 801578e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015796:	81a3      	strheq	r3, [r4, #12]
 8015798:	bf18      	it	ne
 801579a:	81a3      	strhne	r3, [r4, #12]
 801579c:	bd10      	pop	{r4, pc}

0801579e <__sclose>:
 801579e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a2:	f000 b813 	b.w	80157cc <_close_r>
	...

080157a8 <_write_r>:
 80157a8:	b538      	push	{r3, r4, r5, lr}
 80157aa:	4d07      	ldr	r5, [pc, #28]	; (80157c8 <_write_r+0x20>)
 80157ac:	4604      	mov	r4, r0
 80157ae:	4608      	mov	r0, r1
 80157b0:	4611      	mov	r1, r2
 80157b2:	2200      	movs	r2, #0
 80157b4:	602a      	str	r2, [r5, #0]
 80157b6:	461a      	mov	r2, r3
 80157b8:	f7ec fb13 	bl	8001de2 <_write>
 80157bc:	1c43      	adds	r3, r0, #1
 80157be:	d102      	bne.n	80157c6 <_write_r+0x1e>
 80157c0:	682b      	ldr	r3, [r5, #0]
 80157c2:	b103      	cbz	r3, 80157c6 <_write_r+0x1e>
 80157c4:	6023      	str	r3, [r4, #0]
 80157c6:	bd38      	pop	{r3, r4, r5, pc}
 80157c8:	200049fc 	.word	0x200049fc

080157cc <_close_r>:
 80157cc:	b538      	push	{r3, r4, r5, lr}
 80157ce:	4d06      	ldr	r5, [pc, #24]	; (80157e8 <_close_r+0x1c>)
 80157d0:	2300      	movs	r3, #0
 80157d2:	4604      	mov	r4, r0
 80157d4:	4608      	mov	r0, r1
 80157d6:	602b      	str	r3, [r5, #0]
 80157d8:	f7ec fb1f 	bl	8001e1a <_close>
 80157dc:	1c43      	adds	r3, r0, #1
 80157de:	d102      	bne.n	80157e6 <_close_r+0x1a>
 80157e0:	682b      	ldr	r3, [r5, #0]
 80157e2:	b103      	cbz	r3, 80157e6 <_close_r+0x1a>
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	bd38      	pop	{r3, r4, r5, pc}
 80157e8:	200049fc 	.word	0x200049fc

080157ec <_fstat_r>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4d07      	ldr	r5, [pc, #28]	; (801580c <_fstat_r+0x20>)
 80157f0:	2300      	movs	r3, #0
 80157f2:	4604      	mov	r4, r0
 80157f4:	4608      	mov	r0, r1
 80157f6:	4611      	mov	r1, r2
 80157f8:	602b      	str	r3, [r5, #0]
 80157fa:	f7ec fb1a 	bl	8001e32 <_fstat>
 80157fe:	1c43      	adds	r3, r0, #1
 8015800:	d102      	bne.n	8015808 <_fstat_r+0x1c>
 8015802:	682b      	ldr	r3, [r5, #0]
 8015804:	b103      	cbz	r3, 8015808 <_fstat_r+0x1c>
 8015806:	6023      	str	r3, [r4, #0]
 8015808:	bd38      	pop	{r3, r4, r5, pc}
 801580a:	bf00      	nop
 801580c:	200049fc 	.word	0x200049fc

08015810 <_isatty_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	4d06      	ldr	r5, [pc, #24]	; (801582c <_isatty_r+0x1c>)
 8015814:	2300      	movs	r3, #0
 8015816:	4604      	mov	r4, r0
 8015818:	4608      	mov	r0, r1
 801581a:	602b      	str	r3, [r5, #0]
 801581c:	f7ec fb19 	bl	8001e52 <_isatty>
 8015820:	1c43      	adds	r3, r0, #1
 8015822:	d102      	bne.n	801582a <_isatty_r+0x1a>
 8015824:	682b      	ldr	r3, [r5, #0]
 8015826:	b103      	cbz	r3, 801582a <_isatty_r+0x1a>
 8015828:	6023      	str	r3, [r4, #0]
 801582a:	bd38      	pop	{r3, r4, r5, pc}
 801582c:	200049fc 	.word	0x200049fc

08015830 <_lseek_r>:
 8015830:	b538      	push	{r3, r4, r5, lr}
 8015832:	4d07      	ldr	r5, [pc, #28]	; (8015850 <_lseek_r+0x20>)
 8015834:	4604      	mov	r4, r0
 8015836:	4608      	mov	r0, r1
 8015838:	4611      	mov	r1, r2
 801583a:	2200      	movs	r2, #0
 801583c:	602a      	str	r2, [r5, #0]
 801583e:	461a      	mov	r2, r3
 8015840:	f7ec fb12 	bl	8001e68 <_lseek>
 8015844:	1c43      	adds	r3, r0, #1
 8015846:	d102      	bne.n	801584e <_lseek_r+0x1e>
 8015848:	682b      	ldr	r3, [r5, #0]
 801584a:	b103      	cbz	r3, 801584e <_lseek_r+0x1e>
 801584c:	6023      	str	r3, [r4, #0]
 801584e:	bd38      	pop	{r3, r4, r5, pc}
 8015850:	200049fc 	.word	0x200049fc

08015854 <_read_r>:
 8015854:	b538      	push	{r3, r4, r5, lr}
 8015856:	4d07      	ldr	r5, [pc, #28]	; (8015874 <_read_r+0x20>)
 8015858:	4604      	mov	r4, r0
 801585a:	4608      	mov	r0, r1
 801585c:	4611      	mov	r1, r2
 801585e:	2200      	movs	r2, #0
 8015860:	602a      	str	r2, [r5, #0]
 8015862:	461a      	mov	r2, r3
 8015864:	f7ec faa0 	bl	8001da8 <_read>
 8015868:	1c43      	adds	r3, r0, #1
 801586a:	d102      	bne.n	8015872 <_read_r+0x1e>
 801586c:	682b      	ldr	r3, [r5, #0]
 801586e:	b103      	cbz	r3, 8015872 <_read_r+0x1e>
 8015870:	6023      	str	r3, [r4, #0]
 8015872:	bd38      	pop	{r3, r4, r5, pc}
 8015874:	200049fc 	.word	0x200049fc

08015878 <_init>:
 8015878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801587a:	bf00      	nop
 801587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801587e:	bc08      	pop	{r3}
 8015880:	469e      	mov	lr, r3
 8015882:	4770      	bx	lr

08015884 <_fini>:
 8015884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015886:	bf00      	nop
 8015888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801588a:	bc08      	pop	{r3}
 801588c:	469e      	mov	lr, r3
 801588e:	4770      	bx	lr
