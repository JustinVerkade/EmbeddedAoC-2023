
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f4  0801b5b8  0801b5b8  0002b5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6ac  0801c6ac  00030300  2**0
                  CONTENTS
  4 .ARM          00000008  0801c6ac  0801c6ac  0002c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6b4  0801c6b4  00030300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6b4  0801c6b4  0002c6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6b8  0801c6b8  0002c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  0801c6bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d74  20000300  0801c9bc  00030300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003074  0801c9bc  00033074  2**0
                  ALLOC
 11 .ext_sram     00000000  60000000  60000000  00030300  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035fbe  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000826e  00000000  00000000  000662ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002858  00000000  00000000  0006e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023c0  00000000  00000000  00070db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000390d9  00000000  00000000  00073178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004637b  00000000  00000000  000ac251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107fbd  00000000  00000000  000f25cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fa589  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b328  00000000  00000000  001fa5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b5a0 	.word	0x0801b5a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	0801b5a0 	.word	0x0801b5a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdventOfCode_init>:
		AdventOfCode_return_t(*aoc_day_21)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_22)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_23)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_24)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_25)(AdventOfCode_config_t))
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
	aoc->aoc_func_list[0] = aoc_day_01;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
	aoc->aoc_func_list[1] = aoc_day_02;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	aoc->aoc_func_list[2] = aoc_day_03;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
	aoc->aoc_func_list[3] = aoc_day_04;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	60da      	str	r2, [r3, #12]
	aoc->aoc_func_list[4] = aoc_day_05;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	611a      	str	r2, [r3, #16]
	aoc->aoc_func_list[5] = aoc_day_06;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	615a      	str	r2, [r3, #20]
	aoc->aoc_func_list[6] = aoc_day_07;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f22:	619a      	str	r2, [r3, #24]
	aoc->aoc_func_list[7] = aoc_day_08;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f28:	61da      	str	r2, [r3, #28]
	aoc->aoc_func_list[8] = aoc_day_09;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	621a      	str	r2, [r3, #32]
	aoc->aoc_func_list[9] = aoc_day_10;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	aoc->aoc_func_list[10] = aoc_day_11;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
	aoc->aoc_func_list[11] = aoc_day_12;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
	aoc->aoc_func_list[12] = aoc_day_13;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
	aoc->aoc_func_list[13] = aoc_day_14;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
	aoc->aoc_func_list[14] = aoc_day_15;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
	aoc->aoc_func_list[15] = aoc_day_16;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
	aoc->aoc_func_list[16] = aoc_day_17;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
	aoc->aoc_func_list[17] = aoc_day_18;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
	aoc->aoc_func_list[18] = aoc_day_19;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
	aoc->aoc_func_list[19] = aoc_day_20;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
	aoc->aoc_func_list[20] = aoc_day_21;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f76:	651a      	str	r2, [r3, #80]	; 0x50
	aoc->aoc_func_list[21] = aoc_day_22;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
	aoc->aoc_func_list[22] = aoc_day_23;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
	aoc->aoc_func_list[23] = aoc_day_24;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
	aoc->aoc_func_list[24] = aoc_day_25;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <AdventOfCode_print>:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, line, strlen(line));
	}
}

void AdventOfCode_print(AdventOfCode_config_t config, char *text, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(config == AOC_CONFIG_TEST || config == AOC_CONFIG_DEBUG || config == AOC_CONFIG_RELEASE)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d014      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d011      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d00e      	beq.n	8000fda <AdventOfCode_print+0x3e>
		return;
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8000fbc:	bf00      	nop
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <AdventOfCode_print+0x48>)
 8000fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f8      	bne.n	8000fbe <AdventOfCode_print+0x22>
	CDC_Transmit_HS((uint8_t*)text, len);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f016 faec 	bl	80175b0 <CDC_Transmit_HS>
 8000fd8:	e000      	b.n	8000fdc <AdventOfCode_print+0x40>
		return;
 8000fda:	bf00      	nop
}
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000fa0 	.word	0x20000fa0

08000fe8 <AoC_Day_01>:
 */

#include "AoC/Days/Day01.h"

AdventOfCode_return_t AoC_Day_01(AdventOfCode_config_t config)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8000ff6:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8000ffa:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8000ffc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001000:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <AoC_Day_01+0x26>
		return AOC_RETURN_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e20c      	b.n	8001428 <AoC_Day_01+0x440>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800100e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001012:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10a      	bne.n	8001032 <AoC_Day_01+0x4a>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800101c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001020:	2201      	movs	r2, #1
 8001022:	49ba      	ldr	r1, [pc, #744]	; (800130c <AoC_Day_01+0x324>)
 8001024:	4618      	mov	r0, r3
 8001026:	f015 fa6b 	bl	8016500 <f_open>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
 8001030:	e009      	b.n	8001046 <AoC_Day_01+0x5e>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001036:	2201      	movs	r2, #1
 8001038:	49b5      	ldr	r1, [pc, #724]	; (8001310 <AoC_Day_01+0x328>)
 800103a:	4618      	mov	r0, r3
 800103c:	f015 fa60 	bl	8016500 <f_open>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
		if(ret != FR_OK)
 8001046:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <AoC_Day_01+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800104e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001052:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2213      	movs	r2, #19
 800105a:	49ae      	ldr	r1, [pc, #696]	; (8001314 <AoC_Day_01+0x32c>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff9d 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001062:	2301      	movs	r3, #1
 8001064:	e1e0      	b.n	8001428 <AoC_Day_01+0x440>
		}

		// process data
		char buffer[128];
		int32_t sum_of_values = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(f_gets(buffer, 64, &file))
 800106c:	e053      	b.n	8001116 <AoC_Day_01+0x12e>
		{
			char *buffer_ptr = buffer;
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
			uint8_t concat_ptr = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
			char concat_buffer[128];
			memset(concat_buffer, 0x00, 128);
 800107c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f017 facf 	bl	8018628 <memset>
			char c = *buffer_ptr++;
 800108a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
			while(c != 0x00)
 800109a:	e029      	b.n	80010f0 <AoC_Day_01+0x108>
			{
				if(c >= '0' && c <= '9')
 800109c:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 80010a0:	2b2f      	cmp	r3, #47	; 0x2f
 80010a2:	d91d      	bls.n	80010e0 <AoC_Day_01+0xf8>
 80010a4:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 80010a8:	2b39      	cmp	r3, #57	; 0x39
 80010aa:	d819      	bhi.n	80010e0 <AoC_Day_01+0xf8>
				{
					concat_buffer[concat_ptr] = c;
 80010ac:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80010b0:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80010b4:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 80010b8:	f897 1352 	ldrb.w	r1, [r7, #850]	; 0x352
 80010bc:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 80010be:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <AoC_Day_01+0xf2>
						concat_buffer[concat_ptr + 1] = c;
 80010c6:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80010ca:	3301      	adds	r3, #1
 80010cc:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80010d0:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 80010d4:	f897 1352 	ldrb.w	r1, [r7, #850]	; 0x352
 80010d8:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
				}
				c = *buffer_ptr++;
 80010e0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
			while(c != 0x00)
 80010f0:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1d1      	bne.n	800109c <AoC_Day_01+0xb4>
			}
			uint32_t value = atol(concat_buffer);
 80010f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010fc:	4618      	mov	r0, r3
 80010fe:	f017 fa37 	bl	8018570 <atol>
 8001102:	4603      	mov	r3, r0
 8001104:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
			sum_of_values += value;
 8001108:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800110c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001110:	4413      	add	r3, r2
 8001112:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(f_gets(buffer, 64, &file))
 8001116:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4618      	mov	r0, r3
 8001122:	f016 f8c1 	bl	80172a8 <f_gets>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1a0      	bne.n	800106e <AoC_Day_01+0x86>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 800112c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001130:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8001134:	4978      	ldr	r1, [pc, #480]	; (8001318 <AoC_Day_01+0x330>)
 8001136:	4618      	mov	r0, r3
 8001138:	f017 ffd8 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800113c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f865 	bl	8000210 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800114e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001152:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff1f 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800115e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001162:	4618      	mov	r0, r3
 8001164:	f015 febc 	bl	8016ee0 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001168:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800116c:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10a      	bne.n	800118c <AoC_Day_01+0x1a4>
			ret = f_open(&file, "day1t2.txt", FA_READ);
 8001176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800117a:	2201      	movs	r2, #1
 800117c:	4967      	ldr	r1, [pc, #412]	; (800131c <AoC_Day_01+0x334>)
 800117e:	4618      	mov	r0, r3
 8001180:	f015 f9be 	bl	8016500 <f_open>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
 800118a:	e009      	b.n	80011a0 <AoC_Day_01+0x1b8>
		else ret = f_open(&file, "day1.txt", FA_READ);
 800118c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001190:	2201      	movs	r2, #1
 8001192:	495f      	ldr	r1, [pc, #380]	; (8001310 <AoC_Day_01+0x328>)
 8001194:	4618      	mov	r0, r3
 8001196:	f015 f9b3 	bl	8016500 <f_open>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
		if(ret != FR_OK)
 80011a0:	f897 3351 	ldrb.w	r3, [r7, #849]	; 0x351
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <AoC_Day_01+0x1d8>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80011a8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80011ac:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2213      	movs	r2, #19
 80011b4:	4957      	ldr	r1, [pc, #348]	; (8001314 <AoC_Day_01+0x32c>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fef0 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 80011bc:	2301      	movs	r3, #1
 80011be:	e133      	b.n	8001428 <AoC_Day_01+0x440>
		}

		// process data
		char buffer[128];
		int32_t sum_of_values = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		while(f_gets(buffer, 64, &file))
 80011c6:	e104      	b.n	80013d2 <AoC_Day_01+0x3ea>
		{
			char *buffer_ptr = buffer;
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
			uint8_t concat_ptr = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
			char concat_buffer[128];
			memset(concat_buffer, 0x00, 128);
 80011d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f017 fa22 	bl	8018628 <memset>
			while(*buffer_ptr != 0x00)
 80011e4:	e0e0      	b.n	80013a8 <AoC_Day_01+0x3c0>
			{
				char c = *buffer_ptr;
 80011e6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f

				// check if value
				if(c >= '0' && c <= '9')
 80011f0:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 80011f4:	2b2f      	cmp	r3, #47	; 0x2f
 80011f6:	d91d      	bls.n	8001234 <AoC_Day_01+0x24c>
 80011f8:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 80011fc:	2b39      	cmp	r3, #57	; 0x39
 80011fe:	d819      	bhi.n	8001234 <AoC_Day_01+0x24c>
				{
					concat_buffer[concat_ptr] = c;
 8001200:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001204:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001208:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800120c:	f897 133f 	ldrb.w	r1, [r7, #831]	; 0x33f
 8001210:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 8001212:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <AoC_Day_01+0x246>
						concat_buffer[concat_ptr + 1] = c;
 800121a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800121e:	3301      	adds	r3, #1
 8001220:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001224:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8001228:	f897 133f 	ldrb.w	r1, [r7, #831]	; 0x33f
 800122c:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
				}
				// check if text
				char txt = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
				if(!memcmp("one", buffer_ptr, 3))
 800123a:	2203      	movs	r2, #3
 800123c:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001240:	4837      	ldr	r0, [pc, #220]	; (8001320 <AoC_Day_01+0x338>)
 8001242:	f017 f9d3 	bl	80185ec <memcmp>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <AoC_Day_01+0x26c>
					txt = '1';
 800124c:	2331      	movs	r3, #49	; 0x31
 800124e:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001252:	e081      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("two", buffer_ptr, 3))
 8001254:	2203      	movs	r2, #3
 8001256:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800125a:	4832      	ldr	r0, [pc, #200]	; (8001324 <AoC_Day_01+0x33c>)
 800125c:	f017 f9c6 	bl	80185ec <memcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <AoC_Day_01+0x286>
					txt = '2';
 8001266:	2332      	movs	r3, #50	; 0x32
 8001268:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 800126c:	e074      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("three", buffer_ptr, 5))
 800126e:	2205      	movs	r2, #5
 8001270:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001274:	482c      	ldr	r0, [pc, #176]	; (8001328 <AoC_Day_01+0x340>)
 8001276:	f017 f9b9 	bl	80185ec <memcmp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <AoC_Day_01+0x2a0>
					txt = '3';
 8001280:	2333      	movs	r3, #51	; 0x33
 8001282:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001286:	e067      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("four", buffer_ptr, 4))
 8001288:	2204      	movs	r2, #4
 800128a:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800128e:	4827      	ldr	r0, [pc, #156]	; (800132c <AoC_Day_01+0x344>)
 8001290:	f017 f9ac 	bl	80185ec <memcmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <AoC_Day_01+0x2ba>
					txt = '4';
 800129a:	2334      	movs	r3, #52	; 0x34
 800129c:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80012a0:	e05a      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("five", buffer_ptr, 4))
 80012a2:	2204      	movs	r2, #4
 80012a4:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <AoC_Day_01+0x348>)
 80012aa:	f017 f99f 	bl	80185ec <memcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <AoC_Day_01+0x2d4>
					txt = '5';
 80012b4:	2335      	movs	r3, #53	; 0x35
 80012b6:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80012ba:	e04d      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("six", buffer_ptr, 3))
 80012bc:	2203      	movs	r2, #3
 80012be:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <AoC_Day_01+0x34c>)
 80012c4:	f017 f992 	bl	80185ec <memcmp>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <AoC_Day_01+0x2ee>
					txt = '6';
 80012ce:	2336      	movs	r3, #54	; 0x36
 80012d0:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80012d4:	e040      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("seven", buffer_ptr, 5))
 80012d6:	2205      	movs	r2, #5
 80012d8:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <AoC_Day_01+0x350>)
 80012de:	f017 f985 	bl	80185ec <memcmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <AoC_Day_01+0x308>
					txt = '7';
 80012e8:	2337      	movs	r3, #55	; 0x37
 80012ea:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80012ee:	e033      	b.n	8001358 <AoC_Day_01+0x370>
				else if(!memcmp("eight", buffer_ptr, 5))
 80012f0:	2205      	movs	r2, #5
 80012f2:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <AoC_Day_01+0x354>)
 80012f8:	f017 f978 	bl	80185ec <memcmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d11e      	bne.n	8001340 <AoC_Day_01+0x358>
					txt = '8';
 8001302:	2338      	movs	r3, #56	; 0x38
 8001304:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001308:	e026      	b.n	8001358 <AoC_Day_01+0x370>
 800130a:	bf00      	nop
 800130c:	0801b5b8 	.word	0x0801b5b8
 8001310:	0801b5c4 	.word	0x0801b5c4
 8001314:	0801b5d0 	.word	0x0801b5d0
 8001318:	0801b5e8 	.word	0x0801b5e8
 800131c:	0801b600 	.word	0x0801b600
 8001320:	0801b60c 	.word	0x0801b60c
 8001324:	0801b610 	.word	0x0801b610
 8001328:	0801b614 	.word	0x0801b614
 800132c:	0801b61c 	.word	0x0801b61c
 8001330:	0801b624 	.word	0x0801b624
 8001334:	0801b62c 	.word	0x0801b62c
 8001338:	0801b630 	.word	0x0801b630
 800133c:	0801b638 	.word	0x0801b638
				else if(!memcmp("nine", buffer_ptr, 4))
 8001340:	2204      	movs	r2, #4
 8001342:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001346:	483b      	ldr	r0, [pc, #236]	; (8001434 <AoC_Day_01+0x44c>)
 8001348:	f017 f950 	bl	80185ec <memcmp>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <AoC_Day_01+0x370>
					txt = '9';
 8001352:	2339      	movs	r3, #57	; 0x39
 8001354:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346

				if(txt != 0x00)
 8001358:	f897 3346 	ldrb.w	r3, [r7, #838]	; 0x346
 800135c:	2b00      	cmp	r3, #0
 800135e:	d019      	beq.n	8001394 <AoC_Day_01+0x3ac>
				{
					concat_buffer[concat_ptr] = txt;
 8001360:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001364:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001368:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800136c:	f897 1346 	ldrb.w	r1, [r7, #838]	; 0x346
 8001370:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 8001372:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <AoC_Day_01+0x3a6>
						concat_buffer[concat_ptr + 1] = txt;
 800137a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800137e:	3301      	adds	r3, #1
 8001380:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001384:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8001388:	f897 1346 	ldrb.w	r1, [r7, #838]	; 0x346
 800138c:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
				}

				c = *++buffer_ptr;
 8001394:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800139e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
			while(*buffer_ptr != 0x00)
 80013a8:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f af19 	bne.w	80011e6 <AoC_Day_01+0x1fe>
			}
			uint32_t value = atol(concat_buffer);
 80013b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013b8:	4618      	mov	r0, r3
 80013ba:	f017 f8d9 	bl	8018570 <atol>
 80013be:	4603      	mov	r3, r0
 80013c0:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
			sum_of_values += value;
 80013c4:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80013c8:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80013cc:	4413      	add	r3, r2
 80013ce:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		while(f_gets(buffer, 64, &file))
 80013d2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	4618      	mov	r0, r3
 80013de:	f015 ff63 	bl	80172a8 <f_gets>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f aeef 	bne.w	80011c8 <AoC_Day_01+0x1e0>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 80013ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013ee:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80013f2:	4911      	ldr	r1, [pc, #68]	; (8001438 <AoC_Day_01+0x450>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f017 fe79 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80013fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff06 	bl	8000210 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800140c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001410:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fdc0 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800141c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001420:	4618      	mov	r0, r3
 8001422:	f015 fd5d 	bl	8016ee0 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	f507 7758 	add.w	r7, r7, #864	; 0x360
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	0801b640 	.word	0x0801b640
 8001438:	0801b648 	.word	0x0801b648

0800143c <AoC_Day_02>:
 */

#include "AoC/Days/Day02.h"

AdventOfCode_return_t AoC_Day_02(AdventOfCode_config_t config)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	f2ad 7dac 	subw	sp, sp, #1964	; 0x7ac
 8001442:	af00      	add	r7, sp, #0
 8001444:	4602      	mov	r2, r0
 8001446:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800144a:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 800144e:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001450:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001454:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <AoC_Day_02+0x26>
		return AOC_RETURN_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e2d6      	b.n	8001a10 <AoC_Day_02+0x5d4>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001462:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001466:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d10a      	bne.n	8001486 <AoC_Day_02+0x4a>
			ret = f_open(&file, "day2t.txt", FA_READ);
 8001470:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001474:	2201      	movs	r2, #1
 8001476:	49cd      	ldr	r1, [pc, #820]	; (80017ac <AoC_Day_02+0x370>)
 8001478:	4618      	mov	r0, r3
 800147a:	f015 f841 	bl	8016500 <f_open>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 37a7 	strb.w	r3, [r7, #1959]	; 0x7a7
 8001484:	e009      	b.n	800149a <AoC_Day_02+0x5e>
		else ret = f_open(&file, "day2.txt", FA_READ);
 8001486:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800148a:	2201      	movs	r2, #1
 800148c:	49c8      	ldr	r1, [pc, #800]	; (80017b0 <AoC_Day_02+0x374>)
 800148e:	4618      	mov	r0, r3
 8001490:	f015 f836 	bl	8016500 <f_open>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 37a7 	strb.w	r3, [r7, #1959]	; 0x7a7
		if(ret != FR_OK)
 800149a:	f897 37a7 	ldrb.w	r3, [r7, #1959]	; 0x7a7
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <AoC_Day_02+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80014a2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80014a6:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2213      	movs	r2, #19
 80014ae:	49c1      	ldr	r1, [pc, #772]	; (80017b4 <AoC_Day_02+0x378>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd73 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e2aa      	b.n	8001a10 <AoC_Day_02+0x5d4>
		}

		// init counter variables
		const uint32_t red_cubes_limit = 12;
 80014ba:	230c      	movs	r3, #12
 80014bc:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
		const uint32_t blue_cubes_limit = 14;
 80014c0:	230e      	movs	r3, #14
 80014c2:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
		const uint32_t green_cubes_limit = 13;
 80014c6:	230d      	movs	r3, #13
 80014c8:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754

		// process data
		char buffer[256];
		int32_t sum_of_values = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
		while(f_gets(buffer, 256, &file))
 80014d2:	e0fc      	b.n	80016ce <AoC_Day_02+0x292>
		{
			// tokenize data
			char token_buffer[64][16];
			memset(token_buffer, 0x00, 64 * 16);
 80014d4:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f017 f8a2 	bl	8018628 <memset>
			char *token = strtok(buffer, " ");
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	49b3      	ldr	r1, [pc, #716]	; (80017b8 <AoC_Day_02+0x37c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f017 fe1e 	bl	801912c <strtok>
 80014f0:	f8c7 079c 	str.w	r0, [r7, #1948]	; 0x79c
			uint8_t token_counter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
			while(token != NULL && token_counter < 64)
 80014fa:	e01b      	b.n	8001534 <AoC_Day_02+0xf8>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 80014fc:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8001500:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	18d4      	adds	r4, r2, r3
 8001508:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 800150c:	f7fe fe80 	bl	8000210 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 8001518:	4620      	mov	r0, r4
 800151a:	f017 f877 	bl	801860c <memcpy>
				token = strtok(NULL, " ");
 800151e:	49a6      	ldr	r1, [pc, #664]	; (80017b8 <AoC_Day_02+0x37c>)
 8001520:	2000      	movs	r0, #0
 8001522:	f017 fe03 	bl	801912c <strtok>
 8001526:	f8c7 079c 	str.w	r0, [r7, #1948]	; 0x79c
				token_counter++;
 800152a:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 800152e:	3301      	adds	r3, #1
 8001530:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
			while(token != NULL && token_counter < 64)
 8001534:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <AoC_Day_02+0x108>
 800153c:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8001540:	2b3f      	cmp	r3, #63	; 0x3f
 8001542:	d9db      	bls.n	80014fc <AoC_Day_02+0xc0>
			}

			if(token_counter == 0)
 8001544:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8001548:	2b00      	cmp	r3, #0
 800154a:	d100      	bne.n	800154e <AoC_Day_02+0x112>
 800154c:	e0bf      	b.n	80016ce <AoC_Day_02+0x292>
				continue;

			// counter cubes
			uint32_t red_cubes = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
			uint32_t blue_cubes = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
			uint32_t green_cubes = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c

			// process tokens
			uint8_t valid_flag = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 378b 	strb.w	r3, [r7, #1931]	; 0x78b
			uint8_t token_ptr = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	f887 378a 	strb.w	r3, [r7, #1930]	; 0x78a
			while(token_ptr <= token_counter)
 800156c:	e094      	b.n	8001698 <AoC_Day_02+0x25c>
			{
				// get value
				uint32_t cubes = atoi(token_buffer[token_ptr]);
 800156e:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001572:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f016 fff4 	bl	8018568 <atoi>
 8001580:	4603      	mov	r3, r0
 8001582:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744

				// add to specific color
				if(!memcmp("green", token_buffer[token_ptr+1], 5))
 8001586:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 800158a:	3301      	adds	r3, #1
 800158c:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	2205      	movs	r2, #5
 8001596:	4619      	mov	r1, r3
 8001598:	4888      	ldr	r0, [pc, #544]	; (80017bc <AoC_Day_02+0x380>)
 800159a:	f017 f827 	bl	80185ec <memcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <AoC_Day_02+0x178>
					green_cubes += cubes;
 80015a4:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 80015a8:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80015ac:	4413      	add	r3, r2
 80015ae:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 80015b2:	e02c      	b.n	800160e <AoC_Day_02+0x1d2>
				else if(!memcmp("blue", token_buffer[token_ptr+1], 4))
 80015b4:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 80015b8:	3301      	adds	r3, #1
 80015ba:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	2204      	movs	r2, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	487e      	ldr	r0, [pc, #504]	; (80017c0 <AoC_Day_02+0x384>)
 80015c8:	f017 f810 	bl	80185ec <memcmp>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d107      	bne.n	80015e2 <AoC_Day_02+0x1a6>
					blue_cubes += cubes;
 80015d2:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 80015d6:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80015da:	4413      	add	r3, r2
 80015dc:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
 80015e0:	e015      	b.n	800160e <AoC_Day_02+0x1d2>
				else if(!memcmp("red", token_buffer[token_ptr+1], 3))
 80015e2:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 80015e6:	3301      	adds	r3, #1
 80015e8:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	2203      	movs	r2, #3
 80015f2:	4619      	mov	r1, r3
 80015f4:	4873      	ldr	r0, [pc, #460]	; (80017c4 <AoC_Day_02+0x388>)
 80015f6:	f016 fff9 	bl	80185ec <memcmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <AoC_Day_02+0x1d2>
					red_cubes += cubes;
 8001600:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 8001604:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001608:	4413      	add	r3, r2
 800160a:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794

				// check if end of game
				char end_token = token_buffer[token_ptr+1][strlen(token_buffer[token_ptr+1])-1];
 800160e:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001612:	1c5c      	adds	r4, r3, #1
 8001614:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001618:	3301      	adds	r3, #1
 800161a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fdf4 	bl	8000210 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	3b01      	subs	r3, #1
 800162c:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 8001630:	f2a2 416c 	subw	r1, r2, #1132	; 0x46c
 8001634:	0122      	lsls	r2, r4, #4
 8001636:	440a      	add	r2, r1
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f887 3743 	strb.w	r3, [r7, #1859]	; 0x743
				if(end_token == ';' || end_token == '\0')
 8001640:	f897 3743 	ldrb.w	r3, [r7, #1859]	; 0x743
 8001644:	2b3b      	cmp	r3, #59	; 0x3b
 8001646:	d003      	beq.n	8001650 <AoC_Day_02+0x214>
 8001648:	f897 3743 	ldrb.w	r3, [r7, #1859]	; 0x743
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11e      	bne.n	800168e <AoC_Day_02+0x252>
				{
					if(red_cubes > red_cubes_limit || blue_cubes > blue_cubes_limit || green_cubes > green_cubes_limit)
 8001650:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 8001654:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8001658:	429a      	cmp	r2, r3
 800165a:	d80b      	bhi.n	8001674 <AoC_Day_02+0x238>
 800165c:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 8001660:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8001664:	429a      	cmp	r2, r3
 8001666:	d805      	bhi.n	8001674 <AoC_Day_02+0x238>
 8001668:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800166c:	f8d7 3754 	ldr.w	r3, [r7, #1876]	; 0x754
 8001670:	429a      	cmp	r2, r3
 8001672:	d903      	bls.n	800167c <AoC_Day_02+0x240>
					{
						valid_flag = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 378b 	strb.w	r3, [r7, #1931]	; 0x78b
						break;
 800167a:	e014      	b.n	80016a6 <AoC_Day_02+0x26a>
					}

					// reset cubes
					red_cubes = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
					blue_cubes = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
					green_cubes = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
				}
				token_ptr += 2;
 800168e:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001692:	3302      	adds	r3, #2
 8001694:	f887 378a 	strb.w	r3, [r7, #1930]	; 0x78a
			while(token_ptr <= token_counter)
 8001698:	f897 278a 	ldrb.w	r2, [r7, #1930]	; 0x78a
 800169c:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f67f af64 	bls.w	800156e <AoC_Day_02+0x132>
			}

			// check if valid game
			if(valid_flag)
 80016a6:	f897 378b 	ldrb.w	r3, [r7, #1931]	; 0x78b
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00f      	beq.n	80016ce <AoC_Day_02+0x292>
			{
				uint32_t id = atoi(token_buffer[1]);
 80016ae:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80016b2:	3310      	adds	r3, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f016 ff57 	bl	8018568 <atoi>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
				sum_of_values += id;
 80016c0:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 80016c4:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 80016c8:	4413      	add	r3, r2
 80016ca:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
		while(f_gets(buffer, 256, &file))
 80016ce:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4618      	mov	r0, r3
 80016dc:	f015 fde4 	bl	80172a8 <f_gets>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f47f aef6 	bne.w	80014d4 <AoC_Day_02+0x98>
			}
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 80016e8:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80016ec:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <AoC_Day_02+0x38c>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f017 fcfa 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80016f8:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd87 	bl	8000210 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	f507 714f 	add.w	r1, r7, #828	; 0x33c
 800170a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800170e:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fc41 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800171a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800171e:	4618      	mov	r0, r3
 8001720:	f015 fbde 	bl	8016ee0 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001724:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001728:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d10a      	bne.n	8001748 <AoC_Day_02+0x30c>
			ret = f_open(&file, "day2t.txt", FA_READ);
 8001732:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001736:	2201      	movs	r2, #1
 8001738:	491c      	ldr	r1, [pc, #112]	; (80017ac <AoC_Day_02+0x370>)
 800173a:	4618      	mov	r0, r3
 800173c:	f014 fee0 	bl	8016500 <f_open>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
 8001746:	e009      	b.n	800175c <AoC_Day_02+0x320>
		else ret = f_open(&file, "day2.txt", FA_READ);
 8001748:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800174c:	2201      	movs	r2, #1
 800174e:	4918      	ldr	r1, [pc, #96]	; (80017b0 <AoC_Day_02+0x374>)
 8001750:	4618      	mov	r0, r3
 8001752:	f014 fed5 	bl	8016500 <f_open>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
		if(ret != FR_OK)
 800175c:	f897 3789 	ldrb.w	r3, [r7, #1929]	; 0x789
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <AoC_Day_02+0x340>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8001764:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001768:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2213      	movs	r2, #19
 8001770:	4910      	ldr	r1, [pc, #64]	; (80017b4 <AoC_Day_02+0x378>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc12 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001778:	2301      	movs	r3, #1
 800177a:	e149      	b.n	8001a10 <AoC_Day_02+0x5d4>
		}

		// process data
		char buffer[256];
		int32_t sum_of_values = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
		while(f_gets(buffer, 256, &file))
 8001782:	e119      	b.n	80019b8 <AoC_Day_02+0x57c>
		{
			// tokenize data
			char token_buffer[64][16];
			memset(token_buffer, 0x00, 64 * 16);
 8001784:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f016 ff4a 	bl	8018628 <memset>
			char *token = strtok(buffer, " ");
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <AoC_Day_02+0x37c>)
 800179a:	4618      	mov	r0, r3
 800179c:	f017 fcc6 	bl	801912c <strtok>
 80017a0:	f8c7 0780 	str.w	r0, [r7, #1920]	; 0x780
			uint8_t token_counter = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 377f 	strb.w	r3, [r7, #1919]	; 0x77f
			while(token != NULL && token_counter < 64)
 80017aa:	e02b      	b.n	8001804 <AoC_Day_02+0x3c8>
 80017ac:	0801b660 	.word	0x0801b660
 80017b0:	0801b66c 	.word	0x0801b66c
 80017b4:	0801b678 	.word	0x0801b678
 80017b8:	0801b690 	.word	0x0801b690
 80017bc:	0801b694 	.word	0x0801b694
 80017c0:	0801b69c 	.word	0x0801b69c
 80017c4:	0801b6a4 	.word	0x0801b6a4
 80017c8:	0801b6a8 	.word	0x0801b6a8
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 80017cc:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 80017d0:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	18d4      	adds	r4, r2, r3
 80017d8:	f8d7 0780 	ldr.w	r0, [r7, #1920]	; 0x780
 80017dc:	f7fe fd18 	bl	8000210 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 80017e8:	4620      	mov	r0, r4
 80017ea:	f016 ff0f 	bl	801860c <memcpy>
				token = strtok(NULL, " ");
 80017ee:	498b      	ldr	r1, [pc, #556]	; (8001a1c <AoC_Day_02+0x5e0>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f017 fc9b 	bl	801912c <strtok>
 80017f6:	f8c7 0780 	str.w	r0, [r7, #1920]	; 0x780
				token_counter++;
 80017fa:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 80017fe:	3301      	adds	r3, #1
 8001800:	f887 377f 	strb.w	r3, [r7, #1919]	; 0x77f
			while(token != NULL && token_counter < 64)
 8001804:	f8d7 3780 	ldr.w	r3, [r7, #1920]	; 0x780
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <AoC_Day_02+0x3d8>
 800180c:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001810:	2b3f      	cmp	r3, #63	; 0x3f
 8001812:	d9db      	bls.n	80017cc <AoC_Day_02+0x390>
			}

			if(token_counter == 0)
 8001814:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001818:	2b00      	cmp	r3, #0
 800181a:	d100      	bne.n	800181e <AoC_Day_02+0x3e2>
 800181c:	e0cc      	b.n	80019b8 <AoC_Day_02+0x57c>
				continue;

			// minimum cubes
			uint32_t red_cubes_minimum = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
			uint32_t blue_cubes_minimum = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
			uint32_t green_cubes_minimum = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 3770 	str.w	r3, [r7, #1904]	; 0x770

			// counter cubes
			uint32_t red_cubes = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
			uint32_t blue_cubes = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
			uint32_t green_cubes = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764

			// process tokens
			uint8_t token_ptr = 2;
 8001842:	2302      	movs	r3, #2
 8001844:	f887 3763 	strb.w	r3, [r7, #1891]	; 0x763
			while(token_ptr <= token_counter)
 8001848:	e09c      	b.n	8001984 <AoC_Day_02+0x548>
			{
				// get value
				uint32_t cubes = atoi(token_buffer[token_ptr]);
 800184a:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 800184e:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f016 fe86 	bl	8018568 <atoi>
 800185c:	4603      	mov	r3, r0
 800185e:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c

				// add to specific color
				if(!memcmp("green", token_buffer[token_ptr+1], 5))
 8001862:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001866:	3301      	adds	r3, #1
 8001868:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	2205      	movs	r2, #5
 8001872:	4619      	mov	r1, r3
 8001874:	486a      	ldr	r0, [pc, #424]	; (8001a20 <AoC_Day_02+0x5e4>)
 8001876:	f016 feb9 	bl	80185ec <memcmp>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d107      	bne.n	8001890 <AoC_Day_02+0x454>
					green_cubes += cubes;
 8001880:	f8d7 2764 	ldr.w	r2, [r7, #1892]	; 0x764
 8001884:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001888:	4413      	add	r3, r2
 800188a:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800188e:	e02c      	b.n	80018ea <AoC_Day_02+0x4ae>
				else if(!memcmp("blue", token_buffer[token_ptr+1], 4))
 8001890:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001894:	3301      	adds	r3, #1
 8001896:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	2204      	movs	r2, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4860      	ldr	r0, [pc, #384]	; (8001a24 <AoC_Day_02+0x5e8>)
 80018a4:	f016 fea2 	bl	80185ec <memcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <AoC_Day_02+0x482>
					blue_cubes += cubes;
 80018ae:	f8d7 2768 	ldr.w	r2, [r7, #1896]	; 0x768
 80018b2:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80018b6:	4413      	add	r3, r2
 80018b8:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
 80018bc:	e015      	b.n	80018ea <AoC_Day_02+0x4ae>
				else if(!memcmp("red", token_buffer[token_ptr+1], 3))
 80018be:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 80018c2:	3301      	adds	r3, #1
 80018c4:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	2203      	movs	r2, #3
 80018ce:	4619      	mov	r1, r3
 80018d0:	4855      	ldr	r0, [pc, #340]	; (8001a28 <AoC_Day_02+0x5ec>)
 80018d2:	f016 fe8b 	bl	80185ec <memcmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <AoC_Day_02+0x4ae>
					red_cubes += cubes;
 80018dc:	f8d7 276c 	ldr.w	r2, [r7, #1900]	; 0x76c
 80018e0:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80018e4:	4413      	add	r3, r2
 80018e6:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c

				// check if end of game
				char end_token = token_buffer[token_ptr+1][strlen(token_buffer[token_ptr+1])-1];
 80018ea:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 80018ee:	1c5c      	adds	r4, r3, #1
 80018f0:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 80018f4:	3301      	adds	r3, #1
 80018f6:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc86 	bl	8000210 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	3b01      	subs	r3, #1
 8001908:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800190c:	f2a2 416c 	subw	r1, r2, #1132	; 0x46c
 8001910:	0122      	lsls	r2, r4, #4
 8001912:	440a      	add	r2, r1
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f887 374b 	strb.w	r3, [r7, #1867]	; 0x74b
				if(end_token == ';' || end_token == '\0')
 800191c:	f897 374b 	ldrb.w	r3, [r7, #1867]	; 0x74b
 8001920:	2b3b      	cmp	r3, #59	; 0x3b
 8001922:	d003      	beq.n	800192c <AoC_Day_02+0x4f0>
 8001924:	f897 374b 	ldrb.w	r3, [r7, #1867]	; 0x74b
 8001928:	2b00      	cmp	r3, #0
 800192a:	d126      	bne.n	800197a <AoC_Day_02+0x53e>
				{
					// set minimum cubes needed
					if(red_cubes > red_cubes_minimum)
 800192c:	f8d7 276c 	ldr.w	r2, [r7, #1900]	; 0x76c
 8001930:	f8d7 3778 	ldr.w	r3, [r7, #1912]	; 0x778
 8001934:	429a      	cmp	r2, r3
 8001936:	d903      	bls.n	8001940 <AoC_Day_02+0x504>
						red_cubes_minimum = red_cubes;
 8001938:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 800193c:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
					if(blue_cubes > blue_cubes_minimum)
 8001940:	f8d7 2768 	ldr.w	r2, [r7, #1896]	; 0x768
 8001944:	f8d7 3774 	ldr.w	r3, [r7, #1908]	; 0x774
 8001948:	429a      	cmp	r2, r3
 800194a:	d903      	bls.n	8001954 <AoC_Day_02+0x518>
						blue_cubes_minimum = blue_cubes;
 800194c:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 8001950:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
					if(green_cubes > green_cubes_minimum)
 8001954:	f8d7 2764 	ldr.w	r2, [r7, #1892]	; 0x764
 8001958:	f8d7 3770 	ldr.w	r3, [r7, #1904]	; 0x770
 800195c:	429a      	cmp	r2, r3
 800195e:	d903      	bls.n	8001968 <AoC_Day_02+0x52c>
						green_cubes_minimum = green_cubes;
 8001960:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8001964:	f8c7 3770 	str.w	r3, [r7, #1904]	; 0x770

					// reset cubes
					red_cubes = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
					blue_cubes = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
					green_cubes = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
				}
				token_ptr += 2;
 800197a:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 800197e:	3302      	adds	r3, #2
 8001980:	f887 3763 	strb.w	r3, [r7, #1891]	; 0x763
			while(token_ptr <= token_counter)
 8001984:	f897 2763 	ldrb.w	r2, [r7, #1891]	; 0x763
 8001988:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 800198c:	429a      	cmp	r2, r3
 800198e:	f67f af5c 	bls.w	800184a <AoC_Day_02+0x40e>
			}

			// sum of game power
			uint32_t game_power = red_cubes_minimum * blue_cubes_minimum * green_cubes_minimum;
 8001992:	f8d7 3778 	ldr.w	r3, [r7, #1912]	; 0x778
 8001996:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800199a:	fb03 f202 	mul.w	r2, r3, r2
 800199e:	f8d7 3770 	ldr.w	r3, [r7, #1904]	; 0x770
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
			sum_of_values += game_power;
 80019aa:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 80019ae:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 80019b2:	4413      	add	r3, r2
 80019b4:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
		while(f_gets(buffer, 256, &file))
 80019b8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c4:	4618      	mov	r0, r3
 80019c6:	f015 fc6f 	bl	80172a8 <f_gets>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f aed9 	bne.w	8001784 <AoC_Day_02+0x348>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 80019d2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80019d6:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 80019da:	4914      	ldr	r1, [pc, #80]	; (8001a2c <AoC_Day_02+0x5f0>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f017 fb85 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80019e2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fc12 	bl	8000210 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f507 714f 	add.w	r1, r7, #828	; 0x33c
 80019f4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80019f8:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff facc 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 8001a04:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f015 fa69 	bl	8016ee0 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	f207 77ac 	addw	r7, r7, #1964	; 0x7ac
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0801b690 	.word	0x0801b690
 8001a20:	0801b694 	.word	0x0801b694
 8001a24:	0801b69c 	.word	0x0801b69c
 8001a28:	0801b6a4 	.word	0x0801b6a4
 8001a2c:	0801b6c0 	.word	0x0801b6c0

08001a30 <getIndex>:
 */

#include "AoC/Days/Day03.h"

int32_t getIndex(int32_t maze_width, int32_t column, int32_t row)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
	return row * (maze_width + 1) + column;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4413      	add	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <AoC_Day_03>:

AdventOfCode_return_t AoC_Day_03(AdventOfCode_config_t config)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4602      	mov	r2, r0
 8001a62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a66:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001a6a:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001a6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a70:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <AoC_Day_03+0x28>
		return AOC_RETURN_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f001 b889 	b.w	8002b92 <AoC_Day_03+0x113a>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001a80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a84:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d10a      	bne.n	8001aa4 <AoC_Day_03+0x4c>
			ret = f_open(&file, "day3t.txt", FA_READ);
 8001a8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a92:	2201      	movs	r2, #1
 8001a94:	49be      	ldr	r1, [pc, #760]	; (8001d90 <AoC_Day_03+0x338>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f014 fd32 	bl	8016500 <f_open>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 8001aa2:	e009      	b.n	8001ab8 <AoC_Day_03+0x60>
		else ret = f_open(&file, "day3.txt", FA_READ);
 8001aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	49ba      	ldr	r1, [pc, #744]	; (8001d94 <AoC_Day_03+0x33c>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f014 fd27 	bl	8016500 <f_open>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
		if(ret != FR_OK)
 8001ab8:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <AoC_Day_03+0x82>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8001ac0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ac4:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2213      	movs	r2, #19
 8001acc:	49b2      	ldr	r1, [pc, #712]	; (8001d98 <AoC_Day_03+0x340>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa64 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f001 b85c 	b.w	8002b92 <AoC_Day_03+0x113a>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8001ada:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ade:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8001ae8:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001aec:	3301      	adds	r3, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 ff1a 	bl	8003928 <sram_malloc>
 8001af4:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 8001af8:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001afc:	3301      	adds	r3, #1
 8001afe:	461a      	mov	r2, r3
 8001b00:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8d7 1300 	ldr.w	r1, [r7, #768]	; 0x300
 8001b0a:	f014 feb7 	bl	801687c <f_read>

		// close file
		f_close(&file);
 8001b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b12:	4618      	mov	r0, r3
 8001b14:	f015 f9e4 	bl	8016ee0 <f_close>

		// tokenize data
		strtok(maze, "\n");
 8001b18:	49a0      	ldr	r1, [pc, #640]	; (8001d9c <AoC_Day_03+0x344>)
 8001b1a:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8001b1e:	f017 fb05 	bl	801912c <strtok>
		int32_t maze_dept = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		while(strtok(NULL, "\n"))
 8001b28:	e004      	b.n	8001b34 <AoC_Day_03+0xdc>
			maze_dept++;
 8001b2a:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		while(strtok(NULL, "\n"))
 8001b34:	4999      	ldr	r1, [pc, #612]	; (8001d9c <AoC_Day_03+0x344>)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f017 faf8 	bl	801912c <strtok>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f3      	bne.n	8001b2a <AoC_Day_03+0xd2>
		int32_t maze_width = file_size / maze_dept - 1;
 8001b42:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8001b46:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

		// process data
		int32_t sum_of_values = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		int32_t maze_ptr = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		while(maze_ptr < file_size)
 8001b60:	e23c      	b.n	8001fdc <AoC_Day_03+0x584>
		{
			// find next character
			for(; (maze[maze_ptr] < '0' || maze[maze_ptr] > '9') && maze_ptr < file_size; maze_ptr++);
 8001b62:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001b66:	3301      	adds	r3, #1
 8001b68:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8001b6c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001b70:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b2f      	cmp	r3, #47	; 0x2f
 8001b7a:	d907      	bls.n	8001b8c <AoC_Day_03+0x134>
 8001b7c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001b80:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b39      	cmp	r3, #57	; 0x39
 8001b8a:	d905      	bls.n	8001b98 <AoC_Day_03+0x140>
 8001b8c:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001b90:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbe4      	blt.n	8001b62 <AoC_Day_03+0x10a>

			// check alignement with symbol
			int32_t start_ptr = maze_ptr;
 8001b98:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001b9c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
			uint8_t is_aligned_flag = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
			while(maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size)
 8001ba6:	e1c0      	b.n	8001f2a <AoC_Day_03+0x4d2>
			{
				// get row and column
				int32_t current_column = maze_ptr % (maze_width + 1);
 8001ba8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001bb2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bb6:	fb01 f202 	mul.w	r2, r1, r2
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
				int32_t current_row = maze_ptr / (maze_width + 1);
 8001bc0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bce:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

				// check up
				if(current_row > 0)
 8001bd2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dd27      	ble.n	8001c2a <AoC_Day_03+0x1d2>
				{
					int32_t index = getIndex(maze_width, current_column, current_row - 1);
 8001bda:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bde:	3b01      	subs	r3, #1
 8001be0:	461a      	mov	r2, r3
 8001be2:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8001be6:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001bea:	f7ff ff21 	bl	8001a30 <getIndex>
 8001bee:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001bf2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001bf6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8001c00:	d013      	beq.n	8001c2a <AoC_Day_03+0x1d2>
 8001c02:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c06:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8001c10:	d907      	bls.n	8001c22 <AoC_Day_03+0x1ca>
 8001c12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001c16:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b39      	cmp	r3, #57	; 0x39
 8001c20:	d903      	bls.n	8001c2a <AoC_Day_03+0x1d2>
					{
						is_aligned_flag = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001c28:	e196      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// right up
				if(current_row > 0 && current_column < maze_width-1)
 8001c2a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dd37      	ble.n	8001ca2 <AoC_Day_03+0x24a>
 8001c32:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	da30      	bge.n	8001ca2 <AoC_Day_03+0x24a>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row - 1);
 8001c40:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001c52:	f7ff feed 	bl	8001a30 <getIndex>
 8001c56:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001c5a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001c5e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b2e      	cmp	r3, #46	; 0x2e
 8001c68:	d01b      	beq.n	8001ca2 <AoC_Day_03+0x24a>
 8001c6a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001c6e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d013      	beq.n	8001ca2 <AoC_Day_03+0x24a>
 8001c7a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001c7e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b2f      	cmp	r3, #47	; 0x2f
 8001c88:	d907      	bls.n	8001c9a <AoC_Day_03+0x242>
 8001c8a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001c8e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b39      	cmp	r3, #57	; 0x39
 8001c98:	d903      	bls.n	8001ca2 <AoC_Day_03+0x24a>
					{
						is_aligned_flag = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001ca0:	e15a      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// right
				if(current_column < maze_width-1)
 8001ca2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001cac:	429a      	cmp	r2, r3
 8001cae:	da2f      	bge.n	8001d10 <AoC_Day_03+0x2b8>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row);
 8001cb0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001cc0:	f7ff feb6 	bl	8001a30 <getIndex>
 8001cc4:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001cc8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ccc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8001cd6:	d01b      	beq.n	8001d10 <AoC_Day_03+0x2b8>
 8001cd8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001cdc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b0a      	cmp	r3, #10
 8001ce6:	d013      	beq.n	8001d10 <AoC_Day_03+0x2b8>
 8001ce8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001cec:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8001cf6:	d907      	bls.n	8001d08 <AoC_Day_03+0x2b0>
 8001cf8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001cfc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b39      	cmp	r3, #57	; 0x39
 8001d06:	d903      	bls.n	8001d10 <AoC_Day_03+0x2b8>
					{
						is_aligned_flag = 3;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001d0e:	e123      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// right down
				if(current_row < maze_dept-1 && current_column < maze_width-1)
 8001d10:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001d14:	3b01      	subs	r3, #1
 8001d16:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	da40      	bge.n	8001da0 <AoC_Day_03+0x348>
 8001d1e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	da39      	bge.n	8001da0 <AoC_Day_03+0x348>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row + 1);
 8001d2c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001d36:	3301      	adds	r3, #1
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001d3e:	f7ff fe77 	bl	8001a30 <getIndex>
 8001d42:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001d46:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001d4a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b2e      	cmp	r3, #46	; 0x2e
 8001d54:	d024      	beq.n	8001da0 <AoC_Day_03+0x348>
 8001d56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001d5a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d01c      	beq.n	8001da0 <AoC_Day_03+0x348>
 8001d66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001d6a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d907      	bls.n	8001d86 <AoC_Day_03+0x32e>
 8001d76:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001d7a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b39      	cmp	r3, #57	; 0x39
 8001d84:	d90c      	bls.n	8001da0 <AoC_Day_03+0x348>
					{
						is_aligned_flag = 4;
 8001d86:	2304      	movs	r3, #4
 8001d88:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001d8c:	e0e4      	b.n	8001f58 <AoC_Day_03+0x500>
 8001d8e:	bf00      	nop
 8001d90:	0801b6d8 	.word	0x0801b6d8
 8001d94:	0801b6e4 	.word	0x0801b6e4
 8001d98:	0801b6f0 	.word	0x0801b6f0
 8001d9c:	0801b708 	.word	0x0801b708
					}
				}

				// down
				if(current_row < maze_dept-1)
 8001da0:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001da4:	3b01      	subs	r3, #1
 8001da6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001daa:	429a      	cmp	r2, r3
 8001dac:	da27      	bge.n	8001dfe <AoC_Day_03+0x3a6>
				{
					int32_t index = getIndex(maze_width, current_column, current_row + 1);
 8001dae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001db2:	3301      	adds	r3, #1
 8001db4:	461a      	mov	r2, r3
 8001db6:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8001dba:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001dbe:	f7ff fe37 	bl	8001a30 <getIndex>
 8001dc2:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001dc6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001dca:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd4:	d013      	beq.n	8001dfe <AoC_Day_03+0x3a6>
 8001dd6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001dda:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2f      	cmp	r3, #47	; 0x2f
 8001de4:	d907      	bls.n	8001df6 <AoC_Day_03+0x39e>
 8001de6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001dea:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001dee:	4413      	add	r3, r2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b39      	cmp	r3, #57	; 0x39
 8001df4:	d903      	bls.n	8001dfe <AoC_Day_03+0x3a6>
					{
						is_aligned_flag = 5;
 8001df6:	2305      	movs	r3, #5
 8001df8:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001dfc:	e0ac      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// down left
				if(current_row < maze_dept-1 && current_column > 0)
 8001dfe:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	da2c      	bge.n	8001e66 <AoC_Day_03+0x40e>
 8001e0c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dd28      	ble.n	8001e66 <AoC_Day_03+0x40e>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row + 1);
 8001e14:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001e18:	1e59      	subs	r1, r3, #1
 8001e1a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e1e:	3301      	adds	r3, #1
 8001e20:	461a      	mov	r2, r3
 8001e22:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001e26:	f7ff fe03 	bl	8001a30 <getIndex>
 8001e2a:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001e2e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001e32:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8001e3c:	d013      	beq.n	8001e66 <AoC_Day_03+0x40e>
 8001e3e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001e42:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001e4c:	d907      	bls.n	8001e5e <AoC_Day_03+0x406>
 8001e4e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001e52:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b39      	cmp	r3, #57	; 0x39
 8001e5c:	d903      	bls.n	8001e66 <AoC_Day_03+0x40e>
					{
						is_aligned_flag = 6;
 8001e5e:	2306      	movs	r3, #6
 8001e60:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001e64:	e078      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// left
				if(current_column > 0)
 8001e66:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dd27      	ble.n	8001ebe <AoC_Day_03+0x466>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row);
 8001e6e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001e7e:	f7ff fdd7 	bl	8001a30 <getIndex>
 8001e82:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001e86:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001e8a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b2e      	cmp	r3, #46	; 0x2e
 8001e94:	d013      	beq.n	8001ebe <AoC_Day_03+0x466>
 8001e96:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001e9a:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ea4:	d907      	bls.n	8001eb6 <AoC_Day_03+0x45e>
 8001ea6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001eaa:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b39      	cmp	r3, #57	; 0x39
 8001eb4:	d903      	bls.n	8001ebe <AoC_Day_03+0x466>
					{
						is_aligned_flag = 7;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001ebc:	e04c      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}

				// left up
				if(current_row > 0 && current_column > 0)
 8001ebe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dd2c      	ble.n	8001f20 <AoC_Day_03+0x4c8>
 8001ec6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dd28      	ble.n	8001f20 <AoC_Day_03+0x4c8>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row - 1);
 8001ece:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001ed2:	1e59      	subs	r1, r3, #1
 8001ed4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	461a      	mov	r2, r3
 8001edc:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001ee0:	f7ff fda6 	bl	8001a30 <getIndex>
 8001ee4:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001ee8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001eec:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001ef0:	4413      	add	r3, r2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef6:	d013      	beq.n	8001f20 <AoC_Day_03+0x4c8>
 8001ef8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001efc:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b2f      	cmp	r3, #47	; 0x2f
 8001f06:	d907      	bls.n	8001f18 <AoC_Day_03+0x4c0>
 8001f08:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001f0c:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b39      	cmp	r3, #57	; 0x39
 8001f16:	d903      	bls.n	8001f20 <AoC_Day_03+0x4c8>
					{
						is_aligned_flag = 8;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001f1e:	e01b      	b.n	8001f58 <AoC_Day_03+0x500>
					}
				}
				maze_ptr++;
 8001f20:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f24:	3301      	adds	r3, #1
 8001f26:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
			while(maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size)
 8001f2a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f2e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b2f      	cmp	r3, #47	; 0x2f
 8001f38:	d914      	bls.n	8001f64 <AoC_Day_03+0x50c>
 8001f3a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f3e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b39      	cmp	r3, #57	; 0x39
 8001f48:	d80c      	bhi.n	8001f64 <AoC_Day_03+0x50c>
 8001f4a:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001f4e:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001f52:	429a      	cmp	r2, r3
 8001f54:	f6ff ae28 	blt.w	8001ba8 <AoC_Day_03+0x150>
			}

			// move to end of character
			for(; maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size; maze_ptr++);
 8001f58:	e004      	b.n	8001f64 <AoC_Day_03+0x50c>
 8001f5a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8001f64:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f68:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b2f      	cmp	r3, #47	; 0x2f
 8001f72:	d90d      	bls.n	8001f90 <AoC_Day_03+0x538>
 8001f74:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001f78:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b39      	cmp	r3, #57	; 0x39
 8001f82:	d805      	bhi.n	8001f90 <AoC_Day_03+0x538>
 8001f84:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001f88:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbe4      	blt.n	8001f5a <AoC_Day_03+0x502>

			// if not aligned get numeric value
			if(is_aligned_flag)
 8001f90:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d021      	beq.n	8001fdc <AoC_Day_03+0x584>
			{
				char value[64];
				memset(value, 0x00, 64);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f016 fb41 	bl	8018628 <memset>
				memcpy(value, &maze[start_ptr], maze_ptr - start_ptr);
 8001fa6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001faa:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001fae:	18d1      	adds	r1, r2, r3
 8001fb0:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001fb4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f016 fb23 	bl	801860c <memcpy>
				sum_of_values += atol(value);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f016 fad0 	bl	8018570 <atol>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		while(maze_ptr < file_size)
 8001fdc:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001fe0:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f6ff adc1 	blt.w	8001b6c <AoC_Day_03+0x114>
			}
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001ff2:	49d0      	ldr	r1, [pc, #832]	; (8002334 <AoC_Day_03+0x8dc>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f017 f879 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f906 	bl	8000210 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	f107 010c 	add.w	r1, r7, #12
 800200c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002010:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe ffc0 	bl	8000f9c <AdventOfCode_print>

		// clean up
		sram_clrmem();
 800201c:	f001 fcaa 	bl	8003974 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8002020:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002024:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d10a      	bne.n	8002044 <AoC_Day_03+0x5ec>
			ret = f_open(&file, "day3t.txt", FA_READ);
 800202e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002032:	2201      	movs	r2, #1
 8002034:	49c0      	ldr	r1, [pc, #768]	; (8002338 <AoC_Day_03+0x8e0>)
 8002036:	4618      	mov	r0, r3
 8002038:	f014 fa62 	bl	8016500 <f_open>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
 8002042:	e009      	b.n	8002058 <AoC_Day_03+0x600>
		else ret = f_open(&file, "day3.txt", FA_READ);
 8002044:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002048:	2201      	movs	r2, #1
 800204a:	49bc      	ldr	r1, [pc, #752]	; (800233c <AoC_Day_03+0x8e4>)
 800204c:	4618      	mov	r0, r3
 800204e:	f014 fa57 	bl	8016500 <f_open>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
		if(ret != FR_OK)
 8002058:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00c      	beq.n	800207a <AoC_Day_03+0x622>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8002060:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002064:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2213      	movs	r2, #19
 800206c:	49b4      	ldr	r1, [pc, #720]	; (8002340 <AoC_Day_03+0x8e8>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ff94 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8002074:	2301      	movs	r3, #1
 8002076:	f000 bd8c 	b.w	8002b92 <AoC_Day_03+0x113a>
		}

		// get file length
		int32_t file_size = f_size(&file);
 800207a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800207e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8002088:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800208c:	3301      	adds	r3, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f001 fc4a 	bl	8003928 <sram_malloc>
 8002094:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 8002098:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800209c:	3301      	adds	r3, #1
 800209e:	461a      	mov	r2, r3
 80020a0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 80020aa:	f014 fbe7 	bl	801687c <f_read>

		// close file
		f_close(&file);
 80020ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f014 ff14 	bl	8016ee0 <f_close>

		// tokenize data
		strtok(maze, "\n");
 80020b8:	49a2      	ldr	r1, [pc, #648]	; (8002344 <AoC_Day_03+0x8ec>)
 80020ba:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 80020be:	f017 f835 	bl	801912c <strtok>
		int32_t maze_dept = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(strtok(NULL, "\n"))
 80020c8:	e004      	b.n	80020d4 <AoC_Day_03+0x67c>
			maze_dept++;
 80020ca:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80020ce:	3301      	adds	r3, #1
 80020d0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(strtok(NULL, "\n"))
 80020d4:	499b      	ldr	r1, [pc, #620]	; (8002344 <AoC_Day_03+0x8ec>)
 80020d6:	2000      	movs	r0, #0
 80020d8:	f017 f828 	bl	801912c <strtok>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f3      	bne.n	80020ca <AoC_Day_03+0x672>
		int32_t maze_width = file_size / maze_dept - 1;
 80020e2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80020e6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80020ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

		// process data
		int32_t sum_of_values = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
		int32_t maze_ptr = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
		while(maze_ptr < file_size)
 8002100:	f000 bd24 	b.w	8002b4c <AoC_Day_03+0x10f4>
		{
			// find next gear
			for(; maze[maze_ptr] != '*' && maze_ptr < file_size; maze_ptr++);
 8002104:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002108:	3301      	adds	r3, #1
 800210a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800210e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002112:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b2a      	cmp	r3, #42	; 0x2a
 800211c:	d005      	beq.n	800212a <AoC_Day_03+0x6d2>
 800211e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8002122:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002126:	429a      	cmp	r2, r3
 8002128:	dbec      	blt.n	8002104 <AoC_Day_03+0x6ac>

			// check alignement with symbol
			uint8_t is_aligned_counter = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			int32_t gear_ratio = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

			// get row and column
			int32_t current_column = maze_ptr % (maze_width + 1);
 8002136:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002140:	fb93 f1f2 	sdiv	r1, r3, r2
 8002144:	fb01 f202 	mul.w	r2, r1, r2
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			int32_t current_row = maze_ptr / (maze_width + 1);
 800214e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8002152:	3301      	adds	r3, #1
 8002154:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8002158:	fb92 f3f3 	sdiv	r3, r2, r3
 800215c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8

			// check up
			if(current_row > 0)
 8002160:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002164:	2b00      	cmp	r3, #0
 8002166:	f340 8091 	ble.w	800228c <AoC_Day_03+0x834>
			{
				int32_t index = getIndex(maze_width, current_column, current_row - 1);
 800216a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800216e:	3b01      	subs	r3, #1
 8002170:	461a      	mov	r2, r3
 8002172:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 8002176:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800217a:	f7ff fc59 	bl	8001a30 <getIndex>
 800217e:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
				if(maze[index] >= '0' && maze[index] <= '9')
 8002182:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002186:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b2f      	cmp	r3, #47	; 0x2f
 8002190:	d97c      	bls.n	800228c <AoC_Day_03+0x834>
 8002192:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002196:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b39      	cmp	r3, #57	; 0x39
 80021a0:	d874      	bhi.n	800228c <AoC_Day_03+0x834>
				{
					is_aligned_counter++;
 80021a2:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80021a6:	3301      	adds	r3, #1
 80021a8:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 80021ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80021b0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 80021b4:	e004      	b.n	80021c0 <AoC_Day_03+0x768>
 80021b6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80021c0:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0f      	blt.n	80021e8 <AoC_Day_03+0x790>
 80021c8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80021cc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b2f      	cmp	r3, #47	; 0x2f
 80021d6:	d907      	bls.n	80021e8 <AoC_Day_03+0x790>
 80021d8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80021dc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b39      	cmp	r3, #57	; 0x39
 80021e6:	d9e6      	bls.n	80021b6 <AoC_Day_03+0x75e>
					int32_t end_ptr = index;
 80021e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80021ec:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 80021f0:	e004      	b.n	80021fc <AoC_Day_03+0x7a4>
 80021f2:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80021f6:	3301      	adds	r3, #1
 80021f8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80021fc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002200:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b2f      	cmp	r3, #47	; 0x2f
 800220a:	d907      	bls.n	800221c <AoC_Day_03+0x7c4>
 800220c:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002210:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b39      	cmp	r3, #57	; 0x39
 800221a:	d9ea      	bls.n	80021f2 <AoC_Day_03+0x79a>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2220      	movs	r2, #32
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f016 f9ff 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 800222a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800222e:	3301      	adds	r3, #1
 8002230:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002234:	18d1      	adds	r1, r2, r3
 8002236:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 800223a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	461a      	mov	r2, r3
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4618      	mov	r0, r3
 800224a:	f016 f9df 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4618      	mov	r0, r3
 8002254:	f016 f988 	bl	8018568 <atoi>
 8002258:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
					gear_ratio *= value;
 800225c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002260:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 800226c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002270:	3301      	adds	r3, #1
 8002272:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002276:	18d0      	adds	r0, r2, r3
 8002278:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 800227c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	461a      	mov	r2, r3
 8002286:	212e      	movs	r1, #46	; 0x2e
 8002288:	f016 f9ce 	bl	8018628 <memset>
				}
			}

			// right up
			if(current_row > 0 && current_column < maze_width-1)
 800228c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002290:	2b00      	cmp	r3, #0
 8002292:	f340 80a6 	ble.w	80023e2 <AoC_Day_03+0x98a>
 8002296:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800229a:	3b01      	subs	r3, #1
 800229c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f280 809e 	bge.w	80023e2 <AoC_Day_03+0x98a>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row - 1);
 80022a6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80022aa:	1c59      	adds	r1, r3, #1
 80022ac:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80022b0:	3b01      	subs	r3, #1
 80022b2:	461a      	mov	r2, r3
 80022b4:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 80022b8:	f7ff fbba 	bl	8001a30 <getIndex>
 80022bc:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
				if(maze[index] >= '0' && maze[index] <= '9')
 80022c0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80022c4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b2f      	cmp	r3, #47	; 0x2f
 80022ce:	f240 8088 	bls.w	80023e2 <AoC_Day_03+0x98a>
 80022d2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80022d6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b39      	cmp	r3, #57	; 0x39
 80022e0:	d87f      	bhi.n	80023e2 <AoC_Day_03+0x98a>
				{
					is_aligned_counter++;
 80022e2:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80022e6:	3301      	adds	r3, #1
 80022e8:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 80022ec:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80022f0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 80022f4:	e004      	b.n	8002300 <AoC_Day_03+0x8a8>
 80022f6:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8002300:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0f      	blt.n	8002328 <AoC_Day_03+0x8d0>
 8002308:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800230c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b2f      	cmp	r3, #47	; 0x2f
 8002316:	d907      	bls.n	8002328 <AoC_Day_03+0x8d0>
 8002318:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800231c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002320:	4413      	add	r3, r2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b39      	cmp	r3, #57	; 0x39
 8002326:	d9e6      	bls.n	80022f6 <AoC_Day_03+0x89e>
					int32_t end_ptr = index;
 8002328:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800232c:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002330:	e00f      	b.n	8002352 <AoC_Day_03+0x8fa>
 8002332:	bf00      	nop
 8002334:	0801b70c 	.word	0x0801b70c
 8002338:	0801b6d8 	.word	0x0801b6d8
 800233c:	0801b6e4 	.word	0x0801b6e4
 8002340:	0801b6f0 	.word	0x0801b6f0
 8002344:	0801b708 	.word	0x0801b708
 8002348:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8002352:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002356:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b2f      	cmp	r3, #47	; 0x2f
 8002360:	d907      	bls.n	8002372 <AoC_Day_03+0x91a>
 8002362:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002366:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b39      	cmp	r3, #57	; 0x39
 8002370:	d9ea      	bls.n	8002348 <AoC_Day_03+0x8f0>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	2220      	movs	r2, #32
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f016 f954 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002380:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002384:	3301      	adds	r3, #1
 8002386:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800238a:	18d1      	adds	r1, r2, r3
 800238c:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8002390:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	461a      	mov	r2, r3
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	4618      	mov	r0, r3
 80023a0:	f016 f934 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4618      	mov	r0, r3
 80023aa:	f016 f8dd 	bl	8018568 <atoi>
 80023ae:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
					gear_ratio *= value;
 80023b2:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80023b6:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 80023c2:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80023cc:	18d0      	adds	r0, r2, r3
 80023ce:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 80023d2:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	461a      	mov	r2, r3
 80023dc:	212e      	movs	r1, #46	; 0x2e
 80023de:	f016 f923 	bl	8018628 <memset>
				}
			}

			// right
			if(current_column < maze_width-1)
 80023e2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f280 8091 	bge.w	8002514 <AoC_Day_03+0xabc>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row);
 80023f2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80023f6:	3301      	adds	r3, #1
 80023f8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80023fc:	4619      	mov	r1, r3
 80023fe:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002402:	f7ff fb15 	bl	8001a30 <getIndex>
 8002406:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
				if(maze[index] >= '0' && maze[index] <= '9')
 800240a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800240e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b2f      	cmp	r3, #47	; 0x2f
 8002418:	d97c      	bls.n	8002514 <AoC_Day_03+0xabc>
 800241a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800241e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b39      	cmp	r3, #57	; 0x39
 8002428:	d874      	bhi.n	8002514 <AoC_Day_03+0xabc>
				{
					is_aligned_counter++;
 800242a:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800242e:	3301      	adds	r3, #1
 8002430:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002434:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8002438:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 800243c:	e004      	b.n	8002448 <AoC_Day_03+0x9f0>
 800243e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002442:	3b01      	subs	r3, #1
 8002444:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8002448:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0f      	blt.n	8002470 <AoC_Day_03+0xa18>
 8002450:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002454:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b2f      	cmp	r3, #47	; 0x2f
 800245e:	d907      	bls.n	8002470 <AoC_Day_03+0xa18>
 8002460:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002464:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b39      	cmp	r3, #57	; 0x39
 800246e:	d9e6      	bls.n	800243e <AoC_Day_03+0x9e6>
					int32_t end_ptr = index;
 8002470:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8002474:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002478:	e004      	b.n	8002484 <AoC_Day_03+0xa2c>
 800247a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800247e:	3301      	adds	r3, #1
 8002480:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8002484:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002488:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b2f      	cmp	r3, #47	; 0x2f
 8002492:	d907      	bls.n	80024a4 <AoC_Day_03+0xa4c>
 8002494:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002498:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b39      	cmp	r3, #57	; 0x39
 80024a2:	d9ea      	bls.n	800247a <AoC_Day_03+0xa22>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2220      	movs	r2, #32
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f016 f8bb 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 80024b2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80024b6:	3301      	adds	r3, #1
 80024b8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80024bc:	18d1      	adds	r1, r2, r3
 80024be:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80024c2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	461a      	mov	r2, r3
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4618      	mov	r0, r3
 80024d2:	f016 f89b 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4618      	mov	r0, r3
 80024dc:	f016 f844 	bl	8018568 <atoi>
 80024e0:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					gear_ratio *= value;
 80024e4:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80024e8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 80024f4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80024f8:	3301      	adds	r3, #1
 80024fa:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80024fe:	18d0      	adds	r0, r2, r3
 8002500:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8002504:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	461a      	mov	r2, r3
 800250e:	212e      	movs	r1, #46	; 0x2e
 8002510:	f016 f88a 	bl	8018628 <memset>
				}
			}

			// right down
			if(current_row < maze_dept-1 && current_column < maze_width-1)
 8002514:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8002518:	3b01      	subs	r3, #1
 800251a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800251e:	429a      	cmp	r2, r3
 8002520:	f280 809a 	bge.w	8002658 <AoC_Day_03+0xc00>
 8002524:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8002528:	3b01      	subs	r3, #1
 800252a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800252e:	429a      	cmp	r2, r3
 8002530:	f280 8092 	bge.w	8002658 <AoC_Day_03+0xc00>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row + 1);
 8002534:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800253e:	3301      	adds	r3, #1
 8002540:	461a      	mov	r2, r3
 8002542:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002546:	f7ff fa73 	bl	8001a30 <getIndex>
 800254a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
				if(maze[index] >= '0' && maze[index] <= '9')
 800254e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002552:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b2f      	cmp	r3, #47	; 0x2f
 800255c:	d97c      	bls.n	8002658 <AoC_Day_03+0xc00>
 800255e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002562:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b39      	cmp	r3, #57	; 0x39
 800256c:	d874      	bhi.n	8002658 <AoC_Day_03+0xc00>
				{
					is_aligned_counter++;
 800256e:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002572:	3301      	adds	r3, #1
 8002574:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002578:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800257c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002580:	e004      	b.n	800258c <AoC_Day_03+0xb34>
 8002582:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002586:	3b01      	subs	r3, #1
 8002588:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800258c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0f      	blt.n	80025b4 <AoC_Day_03+0xb5c>
 8002594:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002598:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b2f      	cmp	r3, #47	; 0x2f
 80025a2:	d907      	bls.n	80025b4 <AoC_Day_03+0xb5c>
 80025a4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025a8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b39      	cmp	r3, #57	; 0x39
 80025b2:	d9e6      	bls.n	8002582 <AoC_Day_03+0xb2a>
					int32_t end_ptr = index;
 80025b4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80025b8:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 80025bc:	e004      	b.n	80025c8 <AoC_Day_03+0xb70>
 80025be:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80025c2:	3301      	adds	r3, #1
 80025c4:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80025c8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80025cc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025d0:	4413      	add	r3, r2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b2f      	cmp	r3, #47	; 0x2f
 80025d6:	d907      	bls.n	80025e8 <AoC_Day_03+0xb90>
 80025d8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80025dc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b39      	cmp	r3, #57	; 0x39
 80025e6:	d9ea      	bls.n	80025be <AoC_Day_03+0xb66>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2220      	movs	r2, #32
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f016 f819 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 80025f6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002600:	18d1      	adds	r1, r2, r3
 8002602:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8002606:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	461a      	mov	r2, r3
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4618      	mov	r0, r3
 8002616:	f015 fff9 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4618      	mov	r0, r3
 8002620:	f015 ffa2 	bl	8018568 <atoi>
 8002624:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
					gear_ratio *= value;
 8002628:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800262c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002638:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800263c:	3301      	adds	r3, #1
 800263e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002642:	18d0      	adds	r0, r2, r3
 8002644:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8002648:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	461a      	mov	r2, r3
 8002652:	212e      	movs	r1, #46	; 0x2e
 8002654:	f015 ffe8 	bl	8018628 <memset>
				}
			}

			// down
			if(current_row < maze_dept-1)
 8002658:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 800265c:	3b01      	subs	r3, #1
 800265e:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002662:	429a      	cmp	r2, r3
 8002664:	f280 8091 	bge.w	800278a <AoC_Day_03+0xd32>
			{
				int32_t index = getIndex(maze_width, current_column, current_row + 1);
 8002668:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800266c:	3301      	adds	r3, #1
 800266e:	461a      	mov	r2, r3
 8002670:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 8002674:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002678:	f7ff f9da 	bl	8001a30 <getIndex>
 800267c:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
				if(maze[index] >= '0' && maze[index] <= '9')
 8002680:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002684:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b2f      	cmp	r3, #47	; 0x2f
 800268e:	d97c      	bls.n	800278a <AoC_Day_03+0xd32>
 8002690:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002694:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b39      	cmp	r3, #57	; 0x39
 800269e:	d874      	bhi.n	800278a <AoC_Day_03+0xd32>
				{
					is_aligned_counter++;
 80026a0:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80026a4:	3301      	adds	r3, #1
 80026a6:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 80026aa:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80026ae:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 80026b2:	e004      	b.n	80026be <AoC_Day_03+0xc66>
 80026b4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80026b8:	3b01      	subs	r3, #1
 80026ba:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80026be:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0f      	blt.n	80026e6 <AoC_Day_03+0xc8e>
 80026c6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80026ca:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b2f      	cmp	r3, #47	; 0x2f
 80026d4:	d907      	bls.n	80026e6 <AoC_Day_03+0xc8e>
 80026d6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80026da:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b39      	cmp	r3, #57	; 0x39
 80026e4:	d9e6      	bls.n	80026b4 <AoC_Day_03+0xc5c>
					int32_t end_ptr = index;
 80026e6:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80026ea:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 80026ee:	e004      	b.n	80026fa <AoC_Day_03+0xca2>
 80026f0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80026f4:	3301      	adds	r3, #1
 80026f6:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80026fa:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80026fe:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b2f      	cmp	r3, #47	; 0x2f
 8002708:	d907      	bls.n	800271a <AoC_Day_03+0xcc2>
 800270a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800270e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b39      	cmp	r3, #57	; 0x39
 8002718:	d9ea      	bls.n	80026f0 <AoC_Day_03+0xc98>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2220      	movs	r2, #32
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f015 ff80 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002728:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800272c:	3301      	adds	r3, #1
 800272e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002732:	18d1      	adds	r1, r2, r3
 8002734:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8002738:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	461a      	mov	r2, r3
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f015 ff60 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f015 ff09 	bl	8018568 <atoi>
 8002756:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
					gear_ratio *= value;
 800275a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800275e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 800276a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800276e:	3301      	adds	r3, #1
 8002770:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002774:	18d0      	adds	r0, r2, r3
 8002776:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 800277a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	461a      	mov	r2, r3
 8002784:	212e      	movs	r1, #46	; 0x2e
 8002786:	f015 ff4f 	bl	8018628 <memset>
				}
			}

			// down left
			if(current_row < maze_dept-1 && current_column > 0)
 800278a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 800278e:	3b01      	subs	r3, #1
 8002790:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002794:	429a      	cmp	r2, r3
 8002796:	f280 8097 	bge.w	80028c8 <AoC_Day_03+0xe70>
 800279a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f340 8092 	ble.w	80028c8 <AoC_Day_03+0xe70>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row + 1);
 80027a4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80027a8:	1e59      	subs	r1, r3, #1
 80027aa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80027ae:	3301      	adds	r3, #1
 80027b0:	461a      	mov	r2, r3
 80027b2:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 80027b6:	f7ff f93b 	bl	8001a30 <getIndex>
 80027ba:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
				if(maze[index] >= '0' && maze[index] <= '9')
 80027be:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027c2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b2f      	cmp	r3, #47	; 0x2f
 80027cc:	d97c      	bls.n	80028c8 <AoC_Day_03+0xe70>
 80027ce:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027d2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b39      	cmp	r3, #57	; 0x39
 80027dc:	d874      	bhi.n	80028c8 <AoC_Day_03+0xe70>
				{
					is_aligned_counter++;
 80027de:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80027e2:	3301      	adds	r3, #1
 80027e4:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 80027e8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027ec:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 80027f0:	e004      	b.n	80027fc <AoC_Day_03+0xda4>
 80027f2:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80027fc:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0f      	blt.n	8002824 <AoC_Day_03+0xdcc>
 8002804:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002808:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b2f      	cmp	r3, #47	; 0x2f
 8002812:	d907      	bls.n	8002824 <AoC_Day_03+0xdcc>
 8002814:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002818:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800281c:	4413      	add	r3, r2
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b39      	cmp	r3, #57	; 0x39
 8002822:	d9e6      	bls.n	80027f2 <AoC_Day_03+0xd9a>
					int32_t end_ptr = index;
 8002824:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002828:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 800282c:	e004      	b.n	8002838 <AoC_Day_03+0xde0>
 800282e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002832:	3301      	adds	r3, #1
 8002834:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8002838:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800283c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b2f      	cmp	r3, #47	; 0x2f
 8002846:	d907      	bls.n	8002858 <AoC_Day_03+0xe00>
 8002848:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800284c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b39      	cmp	r3, #57	; 0x39
 8002856:	d9ea      	bls.n	800282e <AoC_Day_03+0xdd6>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	2220      	movs	r2, #32
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f015 fee1 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002866:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800286a:	3301      	adds	r3, #1
 800286c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002870:	18d1      	adds	r1, r2, r3
 8002872:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8002876:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	461a      	mov	r2, r3
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	4618      	mov	r0, r3
 8002886:	f015 fec1 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	4618      	mov	r0, r3
 8002890:	f015 fe6a 	bl	8018568 <atoi>
 8002894:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
					gear_ratio *= value;
 8002898:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800289c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 80028a8:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80028ac:	3301      	adds	r3, #1
 80028ae:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80028b2:	18d0      	adds	r0, r2, r3
 80028b4:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 80028b8:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	461a      	mov	r2, r3
 80028c2:	212e      	movs	r1, #46	; 0x2e
 80028c4:	f015 feb0 	bl	8018628 <memset>
				}
			}

			// left
			if(current_column > 0)
 80028c8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f340 8091 	ble.w	80029f4 <AoC_Day_03+0xf9c>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row);
 80028d2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80028dc:	4619      	mov	r1, r3
 80028de:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 80028e2:	f7ff f8a5 	bl	8001a30 <getIndex>
 80028e6:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
				if(maze[index] >= '0' && maze[index] <= '9')
 80028ea:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80028ee:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b2f      	cmp	r3, #47	; 0x2f
 80028f8:	d97c      	bls.n	80029f4 <AoC_Day_03+0xf9c>
 80028fa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80028fe:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b39      	cmp	r3, #57	; 0x39
 8002908:	d874      	bhi.n	80029f4 <AoC_Day_03+0xf9c>
				{
					is_aligned_counter++;
 800290a:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800290e:	3301      	adds	r3, #1
 8002910:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002914:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002918:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 800291c:	e004      	b.n	8002928 <AoC_Day_03+0xed0>
 800291e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002922:	3b01      	subs	r3, #1
 8002924:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002928:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0f      	blt.n	8002950 <AoC_Day_03+0xef8>
 8002930:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002934:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b2f      	cmp	r3, #47	; 0x2f
 800293e:	d907      	bls.n	8002950 <AoC_Day_03+0xef8>
 8002940:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002944:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b39      	cmp	r3, #57	; 0x39
 800294e:	d9e6      	bls.n	800291e <AoC_Day_03+0xec6>
					int32_t end_ptr = index;
 8002950:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002954:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002958:	e004      	b.n	8002964 <AoC_Day_03+0xf0c>
 800295a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800295e:	3301      	adds	r3, #1
 8002960:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002964:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002968:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800296c:	4413      	add	r3, r2
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b2f      	cmp	r3, #47	; 0x2f
 8002972:	d907      	bls.n	8002984 <AoC_Day_03+0xf2c>
 8002974:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002978:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b39      	cmp	r3, #57	; 0x39
 8002982:	d9ea      	bls.n	800295a <AoC_Day_03+0xf02>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2220      	movs	r2, #32
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f015 fe4b 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002992:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002996:	3301      	adds	r3, #1
 8002998:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800299c:	18d1      	adds	r1, r2, r3
 800299e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80029a2:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	461a      	mov	r2, r3
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4618      	mov	r0, r3
 80029b2:	f015 fe2b 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4618      	mov	r0, r3
 80029bc:	f015 fdd4 	bl	8018568 <atoi>
 80029c0:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
					gear_ratio *= value;
 80029c4:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80029c8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 80029d4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80029d8:	3301      	adds	r3, #1
 80029da:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80029de:	18d0      	adds	r0, r2, r3
 80029e0:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80029e4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	461a      	mov	r2, r3
 80029ee:	212e      	movs	r1, #46	; 0x2e
 80029f0:	f015 fe1a 	bl	8018628 <memset>
				}
			}

			// left up
			if(current_row > 0 && current_column > 0)
 80029f4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f340 8097 	ble.w	8002b2c <AoC_Day_03+0x10d4>
 80029fe:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f340 8092 	ble.w	8002b2c <AoC_Day_03+0x10d4>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row - 1);
 8002a08:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002a12:	3b01      	subs	r3, #1
 8002a14:	461a      	mov	r2, r3
 8002a16:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002a1a:	f7ff f809 	bl	8001a30 <getIndex>
 8002a1e:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
				if(maze[index] >= '0' && maze[index] <= '9')
 8002a22:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a26:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a30:	d97c      	bls.n	8002b2c <AoC_Day_03+0x10d4>
 8002a32:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a36:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b39      	cmp	r3, #57	; 0x39
 8002a40:	d874      	bhi.n	8002b2c <AoC_Day_03+0x10d4>
				{
					is_aligned_counter++;
 8002a42:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002a4c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a50:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002a54:	e004      	b.n	8002a60 <AoC_Day_03+0x1008>
 8002a56:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002a60:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0f      	blt.n	8002a88 <AoC_Day_03+0x1030>
 8002a68:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002a6c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b2f      	cmp	r3, #47	; 0x2f
 8002a76:	d907      	bls.n	8002a88 <AoC_Day_03+0x1030>
 8002a78:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002a7c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b39      	cmp	r3, #57	; 0x39
 8002a86:	d9e6      	bls.n	8002a56 <AoC_Day_03+0xffe>
					int32_t end_ptr = index;
 8002a88:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a8c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002a90:	e004      	b.n	8002a9c <AoC_Day_03+0x1044>
 8002a92:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002a96:	3301      	adds	r3, #1
 8002a98:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002a9c:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002aa0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8002aaa:	d907      	bls.n	8002abc <AoC_Day_03+0x1064>
 8002aac:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002ab0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b39      	cmp	r3, #57	; 0x39
 8002aba:	d9ea      	bls.n	8002a92 <AoC_Day_03+0x103a>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f015 fdaf 	bl	8018628 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002aca:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002ad4:	18d1      	adds	r1, r2, r3
 8002ad6:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002ada:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f015 fd8f 	bl	801860c <memcpy>
					int32_t value = atoi(value_str);
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4618      	mov	r0, r3
 8002af4:	f015 fd38 	bl	8018568 <atoi>
 8002af8:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
					gear_ratio *= value;
 8002afc:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002b00:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002b0c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002b16:	18d0      	adds	r0, r2, r3
 8002b18:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002b1c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	461a      	mov	r2, r3
 8002b26:	212e      	movs	r1, #46	; 0x2e
 8002b28:	f015 fd7e 	bl	8018628 <memset>
				}
			}

			// move to end of character
			maze_ptr++;
 8002b2c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002b30:	3301      	adds	r3, #1
 8002b32:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350

			// if alignment count is 2
			if(is_aligned_counter == 2)
 8002b36:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d106      	bne.n	8002b4c <AoC_Day_03+0x10f4>
				sum_of_values += gear_ratio;
 8002b3e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002b42:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002b46:	4413      	add	r3, r2
 8002b48:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
		while(maze_ptr < file_size)
 8002b4c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8002b50:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f6ff aada 	blt.w	800210e <AoC_Day_03+0x6b6>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <AoC_Day_03+0x1144>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	f016 fac1 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fb4e 	bl	8000210 <strlen>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f107 010c 	add.w	r1, r7, #12
 8002b7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b80:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fa08 	bl	8000f9c <AdventOfCode_print>

		// clean up
		sram_clrmem();
 8002b8c:	f000 fef2 	bl	8003974 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	0801b724 	.word	0x0801b724

08002ba0 <AoC_Day_04>:
	uint8_t numbers_ptr;
	uint32_t instances;
};

AdventOfCode_return_t AoC_Day_04(AdventOfCode_config_t config)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002bae:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002bb2:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8002bb4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002bb8:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <AoC_Day_04+0x28>
		return AOC_RETURN_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f000 bc32 	b.w	800342c <AoC_Day_04+0x88c>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8002bc8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002bcc:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d10a      	bne.n	8002bec <AoC_Day_04+0x4c>
			ret = f_open(&file, "day4t.txt", FA_READ);
 8002bd6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	49bd      	ldr	r1, [pc, #756]	; (8002ed4 <AoC_Day_04+0x334>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	f013 fc8e 	bl	8016500 <f_open>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 8002bea:	e009      	b.n	8002c00 <AoC_Day_04+0x60>
		else ret = f_open(&file, "day4.txt", FA_READ);
 8002bec:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	49b9      	ldr	r1, [pc, #740]	; (8002ed8 <AoC_Day_04+0x338>)
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f013 fc83 	bl	8016500 <f_open>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		if(ret != FR_OK)
 8002c00:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <AoC_Day_04+0x82>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8002c08:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002c0c:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2213      	movs	r2, #19
 8002c14:	49b1      	ldr	r1, [pc, #708]	; (8002edc <AoC_Day_04+0x33c>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f9c0 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f000 bc05 	b.w	800342c <AoC_Day_04+0x88c>
		}

		// list of cards
		Card_t *cards = (Card_t*)sram_malloc(sizeof(Card_t) * 210);
 8002c22:	f642 50f0 	movw	r0, #11760	; 0x2df0
 8002c26:	f000 fe7f 	bl	8003928 <sram_malloc>
 8002c2a:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
		uint8_t card_index = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
		memset(cards, 0x00, sizeof(Card_t) * 210);
 8002c34:	f642 52f0 	movw	r2, #11760	; 0x2df0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8002c3e:	f015 fcf3 	bl	8018628 <memset>

		// iterate lines
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 8002c42:	e102      	b.n	8002e4a <AoC_Day_04+0x2aa>
		{
			// tokenize data
			char token_buffer[48][8];
			memset(token_buffer, 0x00, 48 * 8);
 8002c44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c48:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f015 fcea 	bl	8018628 <memset>
			char *token = strtok(buffer, " ");
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	49a1      	ldr	r1, [pc, #644]	; (8002ee0 <AoC_Day_04+0x340>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f016 fa66 	bl	801912c <strtok>
 8002c60:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
			uint8_t token_counter = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			while(token != NULL && token_counter < 48)
 8002c6a:	e01b      	b.n	8002ca4 <AoC_Day_04+0x104>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8002c6c:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002c70:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	18d4      	adds	r4, r2, r3
 8002c78:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002c7c:	f7fd fac8 	bl	8000210 <strlen>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f015 fcbf 	bl	801860c <memcpy>
				token = strtok(NULL, " ");
 8002c8e:	4994      	ldr	r1, [pc, #592]	; (8002ee0 <AoC_Day_04+0x340>)
 8002c90:	2000      	movs	r0, #0
 8002c92:	f016 fa4b 	bl	801912c <strtok>
 8002c96:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
				token_counter++;
 8002c9a:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			while(token != NULL && token_counter < 48)
 8002ca4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <AoC_Day_04+0x114>
 8002cac:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002cb0:	2b2f      	cmp	r3, #47	; 0x2f
 8002cb2:	d9db      	bls.n	8002c6c <AoC_Day_04+0xcc>
			}

			// insert card id
			cards[card_index].id = atoi(token_buffer[1]);
 8002cb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cb8:	3308      	adds	r3, #8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f015 fc54 	bl	8018568 <atoi>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]

			// process winning numbers
			uint8_t winning_number_index;
			memset(cards[card_index].winning, 0x00, 16);
 8002cda:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002cec:	4413      	add	r3, r2
 8002cee:	3301      	adds	r3, #1
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f015 fc97 	bl	8018628 <memset>
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f887 346e 	strb.w	r3, [r7, #1134]	; 0x46e
 8002d00:	e021      	b.n	8002d46 <AoC_Day_04+0x1a6>
			{
				uint8_t value = atoi(token_buffer[winning_number_index]);
 8002d02:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002d06:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f015 fc2a 	bl	8018568 <atoi>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
				cards[card_index].winning[winning_number_index - 2] = value;
 8002d1a:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	461a      	mov	r2, r3
 8002d28:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002d2c:	441a      	add	r2, r3
 8002d2e:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002d32:	3b02      	subs	r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	f897 243d 	ldrb.w	r2, [r7, #1085]	; 0x43d
 8002d3a:	705a      	strb	r2, [r3, #1]
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 8002d3c:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002d40:	3301      	adds	r3, #1
 8002d42:	f887 346e 	strb.w	r3, [r7, #1134]	; 0x46e
 8002d46:	f897 246e 	ldrb.w	r2, [r7, #1134]	; 0x46e
 8002d4a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002d4e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8002d52:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002d56:	2b7c      	cmp	r3, #124	; 0x7c
 8002d58:	d003      	beq.n	8002d62 <AoC_Day_04+0x1c2>
 8002d5a:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	d9cf      	bls.n	8002d02 <AoC_Day_04+0x162>
			}
			cards[card_index].winning_ptr = winning_number_index - 2;
 8002d62:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002d74:	4413      	add	r3, r2
 8002d76:	f897 246e 	ldrb.w	r2, [r7, #1134]	; 0x46e
 8002d7a:	3a02      	subs	r2, #2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	745a      	strb	r2, [r3, #17]

			// process card numbers
			uint8_t card_number_index = winning_number_index + 1;
 8002d80:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002d84:	3301      	adds	r3, #1
 8002d86:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d
			memset(cards[card_index].numbers, 0x00, 32);
 8002d8a:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	461a      	mov	r2, r3
 8002d98:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3312      	adds	r3, #18
 8002da0:	2220      	movs	r2, #32
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f015 fc3f 	bl	8018628 <memset>
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 8002daa:	e024      	b.n	8002df6 <AoC_Day_04+0x256>
			{
				uint8_t value = atoi(token_buffer[card_number_index]);
 8002dac:	f897 346d 	ldrb.w	r3, [r7, #1133]	; 0x46d
 8002db0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f015 fbd5 	bl	8018568 <atoi>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
				cards[card_index].numbers[card_number_index - winning_number_index - 1] = value;
 8002dc4:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f897 146d 	ldrb.w	r1, [r7, #1133]	; 0x46d
 8002ddc:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002de0:	1acb      	subs	r3, r1, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	f897 243c 	ldrb.w	r2, [r7, #1084]	; 0x43c
 8002dea:	749a      	strb	r2, [r3, #18]
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 8002dec:	f897 346d 	ldrb.w	r3, [r7, #1133]	; 0x46d
 8002df0:	3301      	adds	r3, #1
 8002df2:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d
 8002df6:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 8002dfa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002dfe:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8002e02:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <AoC_Day_04+0x278>
 8002e0a:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 8002e0e:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	ddc9      	ble.n	8002dac <AoC_Day_04+0x20c>
			}
			cards[card_index].numbers_ptr = card_number_index - winning_number_index - 1;
 8002e18:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 8002e1c:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b2d9      	uxtb	r1, r3
 8002e24:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	461a      	mov	r2, r3
 8002e32:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002e36:	4413      	add	r3, r2
 8002e38:	1e4a      	subs	r2, r1, #1
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			card_index++;
 8002e40:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 8002e44:	3301      	adds	r3, #1
 8002e46:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
		while(f_gets(buffer, 128, &file))
 8002e4a:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	4618      	mov	r0, r3
 8002e56:	f014 fa27 	bl	80172a8 <f_gets>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f aef1 	bne.w	8002c44 <AoC_Day_04+0xa4>
		}

		// process cards
		uint32_t sum_of_values = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
		for(uint8_t index=0; index<card_index; index++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8002e6e:	e073      	b.n	8002f58 <AoC_Day_04+0x3b8>
		{
			// for each number card
			uint32_t card_worth = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
			for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8002e7c:	e050      	b.n	8002f20 <AoC_Day_04+0x380>
			{
				// check if in list
				for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8002e84:	e038      	b.n	8002ef8 <AoC_Day_04+0x358>
				{
					if(cards[index].numbers[numbers_index] == cards[index].winning[winning_index])
 8002e86:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	461a      	mov	r2, r3
 8002e94:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002e98:	441a      	add	r2, r3
 8002e9a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8002e9e:	4413      	add	r3, r2
 8002ea0:	7c99      	ldrb	r1, [r3, #18]
 8002ea2:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002eb4:	441a      	add	r2, r3
 8002eb6:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8002eba:	4413      	add	r3, r2
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	4299      	cmp	r1, r3
 8002ec0:	d115      	bne.n	8002eee <AoC_Day_04+0x34e>
					{
						if(!card_worth)
 8002ec2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <AoC_Day_04+0x344>
							card_worth = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002ed0:	e00d      	b.n	8002eee <AoC_Day_04+0x34e>
 8002ed2:	bf00      	nop
 8002ed4:	0801b73c 	.word	0x0801b73c
 8002ed8:	0801b748 	.word	0x0801b748
 8002edc:	0801b754 	.word	0x0801b754
 8002ee0:	0801b76c 	.word	0x0801b76c
						else card_worth *= 2;
 8002ee4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
				for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8002eee:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8002ef8:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	461a      	mov	r2, r3
 8002f06:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f0a:	4413      	add	r3, r2
 8002f0c:	7c5b      	ldrb	r3, [r3, #17]
 8002f0e:	f897 245e 	ldrb.w	r2, [r7, #1118]	; 0x45e
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3b7      	bcc.n	8002e86 <AoC_Day_04+0x2e6>
			for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 8002f16:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8002f20:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f32:	4413      	add	r3, r2
 8002f34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f38:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d39e      	bcc.n	8002e7e <AoC_Day_04+0x2de>
					}
				}
			}
			sum_of_values += card_worth;
 8002f40:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8002f44:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002f48:	4413      	add	r3, r2
 8002f4a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
		for(uint8_t index=0; index<card_index; index++)
 8002f4e:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8002f52:	3301      	adds	r3, #1
 8002f54:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8002f58:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8002f5c:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d385      	bcc.n	8002e70 <AoC_Day_04+0x2d0>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 8002f64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f68:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8002f6c:	49cb      	ldr	r1, [pc, #812]	; (800329c <AoC_Day_04+0x6fc>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f016 f8bc 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8002f74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd f949 	bl	8000210 <strlen>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002f86:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002f8a:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe f803 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 8002f96:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f013 ffa0 	bl	8016ee0 <f_close>
		sram_clrmem();
 8002fa0:	f000 fce8 	bl	8003974 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8002fa4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002fa8:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d10a      	bne.n	8002fc8 <AoC_Day_04+0x428>
			ret = f_open(&file, "day4t.txt", FA_READ);
 8002fb2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	49b9      	ldr	r1, [pc, #740]	; (80032a0 <AoC_Day_04+0x700>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f013 faa0 	bl	8016500 <f_open>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
 8002fc6:	e009      	b.n	8002fdc <AoC_Day_04+0x43c>
		else ret = f_open(&file, "day4.txt", FA_READ);
 8002fc8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	49b5      	ldr	r1, [pc, #724]	; (80032a4 <AoC_Day_04+0x704>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f013 fa95 	bl	8016500 <f_open>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
		if(ret != FR_OK)
 8002fdc:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <AoC_Day_04+0x45c>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8002fe4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002fe8:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2213      	movs	r2, #19
 8002ff0:	49ad      	ldr	r1, [pc, #692]	; (80032a8 <AoC_Day_04+0x708>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd ffd2 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e217      	b.n	800342c <AoC_Day_04+0x88c>
		}

		// list of cards
		Card_t *cards = (Card_t*)sram_malloc(sizeof(Card_t) * 210);
 8002ffc:	f642 50f0 	movw	r0, #11760	; 0x2df0
 8003000:	f000 fc92 	bl	8003928 <sram_malloc>
 8003004:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
		uint8_t card_index = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		memset(cards, 0x00, sizeof(Card_t) * 210);
 800300e:	f642 52f0 	movw	r2, #11760	; 0x2df0
 8003012:	2100      	movs	r1, #0
 8003014:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8003018:	f015 fb06 	bl	8018628 <memset>

		// iterate lines
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 800301c:	e102      	b.n	8003224 <AoC_Day_04+0x684>
		{
			// tokenize data
			char token_buffer[48][8];
			memset(token_buffer, 0x00, 48 * 8);
 800301e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003022:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f015 fafd 	bl	8018628 <memset>
			char *token = strtok(buffer, " ");
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	499e      	ldr	r1, [pc, #632]	; (80032ac <AoC_Day_04+0x70c>)
 8003034:	4618      	mov	r0, r3
 8003036:	f016 f879 	bl	801912c <strtok>
 800303a:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
			uint8_t token_counter = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			while(token != NULL && token_counter < 48)
 8003044:	e01b      	b.n	800307e <AoC_Day_04+0x4de>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8003046:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800304a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	18d4      	adds	r4, r2, r3
 8003052:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 8003056:	f7fd f8db 	bl	8000210 <strlen>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8003062:	4620      	mov	r0, r4
 8003064:	f015 fad2 	bl	801860c <memcpy>
				token = strtok(NULL, " ");
 8003068:	4990      	ldr	r1, [pc, #576]	; (80032ac <AoC_Day_04+0x70c>)
 800306a:	2000      	movs	r0, #0
 800306c:	f016 f85e 	bl	801912c <strtok>
 8003070:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				token_counter++;
 8003074:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003078:	3301      	adds	r3, #1
 800307a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			while(token != NULL && token_counter < 48)
 800307e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <AoC_Day_04+0x4ee>
 8003086:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800308a:	2b2f      	cmp	r3, #47	; 0x2f
 800308c:	d9db      	bls.n	8003046 <AoC_Day_04+0x4a6>
			}

			// insert card id
			cards[card_index].id = atoi(token_buffer[1]);
 800308e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003092:	3308      	adds	r3, #8
 8003094:	4618      	mov	r0, r3
 8003096:	f015 fa67 	bl	8018568 <atoi>
 800309a:	4601      	mov	r1, r0
 800309c:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	461a      	mov	r2, r3
 80030aa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80030ae:	4413      	add	r3, r2
 80030b0:	b2ca      	uxtb	r2, r1
 80030b2:	701a      	strb	r2, [r3, #0]

			// process winning numbers
			uint8_t winning_number_index;
			memset(cards[card_index].winning, 0x00, 16);
 80030b4:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	461a      	mov	r2, r3
 80030c2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80030c6:	4413      	add	r3, r2
 80030c8:	3301      	adds	r3, #1
 80030ca:	2210      	movs	r2, #16
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f015 faaa 	bl	8018628 <memset>
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 80030da:	e021      	b.n	8003120 <AoC_Day_04+0x580>
			{
				uint8_t value = atoi(token_buffer[winning_number_index]);
 80030dc:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80030e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f015 fa3d 	bl	8018568 <atoi>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
				cards[card_index].winning[winning_number_index - 2] = value;
 80030f4:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	461a      	mov	r2, r3
 8003102:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003106:	441a      	add	r2, r3
 8003108:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 800310c:	3b02      	subs	r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	f897 243f 	ldrb.w	r2, [r7, #1087]	; 0x43f
 8003114:	705a      	strb	r2, [r3, #1]
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 8003116:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 800311a:	3301      	adds	r3, #1
 800311c:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 8003120:	f897 2456 	ldrb.w	r2, [r7, #1110]	; 0x456
 8003124:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003128:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800312c:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003130:	2b7c      	cmp	r3, #124	; 0x7c
 8003132:	d003      	beq.n	800313c <AoC_Day_04+0x59c>
 8003134:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d9cf      	bls.n	80030dc <AoC_Day_04+0x53c>
			}
			cards[card_index].winning_ptr = winning_number_index - 2;
 800313c:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	461a      	mov	r2, r3
 800314a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800314e:	4413      	add	r3, r2
 8003150:	f897 2456 	ldrb.w	r2, [r7, #1110]	; 0x456
 8003154:	3a02      	subs	r2, #2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	745a      	strb	r2, [r3, #17]

			// process card numbers
			uint8_t card_number_index = winning_number_index + 1;
 800315a:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 800315e:	3301      	adds	r3, #1
 8003160:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
			memset(cards[card_index].numbers, 0x00, 32);
 8003164:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	461a      	mov	r2, r3
 8003172:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003176:	4413      	add	r3, r2
 8003178:	3312      	adds	r3, #18
 800317a:	2220      	movs	r2, #32
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f015 fa52 	bl	8018628 <memset>
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 8003184:	e024      	b.n	80031d0 <AoC_Day_04+0x630>
			{
				uint8_t value = atoi(token_buffer[card_number_index]);
 8003186:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 800318a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f015 f9e8 	bl	8018568 <atoi>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e
				cards[card_index].numbers[card_number_index - winning_number_index - 1] = value;
 800319e:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	461a      	mov	r2, r3
 80031ac:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80031b0:	441a      	add	r2, r3
 80031b2:	f897 1455 	ldrb.w	r1, [r7, #1109]	; 0x455
 80031b6:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	f897 243e 	ldrb.w	r2, [r7, #1086]	; 0x43e
 80031c4:	749a      	strb	r2, [r3, #18]
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 80031c6:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 80031ca:	3301      	adds	r3, #1
 80031cc:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
 80031d0:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 80031d4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80031d8:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80031dc:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <AoC_Day_04+0x652>
 80031e4:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 80031e8:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	ddc9      	ble.n	8003186 <AoC_Day_04+0x5e6>
			}
			cards[card_index].numbers_ptr = card_number_index - winning_number_index - 1;
 80031f2:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 80031f6:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	b2d9      	uxtb	r1, r3
 80031fe:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	461a      	mov	r2, r3
 800320c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003210:	4413      	add	r3, r2
 8003212:	1e4a      	subs	r2, r1, #1
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			card_index++;
 800321a:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 800321e:	3301      	adds	r3, #1
 8003220:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		while(f_gets(buffer, 128, &file))
 8003224:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	4618      	mov	r0, r3
 8003230:	f014 f83a 	bl	80172a8 <f_gets>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f47f aef1 	bne.w	800301e <AoC_Day_04+0x47e>
		}

		// set instances to 1
		for(uint8_t index=0; index<210; index++)
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3454 	strb.w	r3, [r7, #1108]	; 0x454
 8003242:	e010      	b.n	8003266 <AoC_Day_04+0x6c6>
			cards[index].instances = 1;
 8003244:	f897 2454 	ldrb.w	r2, [r7, #1108]	; 0x454
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	461a      	mov	r2, r3
 8003252:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003256:	4413      	add	r3, r2
 8003258:	2201      	movs	r2, #1
 800325a:	635a      	str	r2, [r3, #52]	; 0x34
		for(uint8_t index=0; index<210; index++)
 800325c:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8003260:	3301      	adds	r3, #1
 8003262:	f887 3454 	strb.w	r3, [r7, #1108]	; 0x454
 8003266:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 800326a:	2bd1      	cmp	r3, #209	; 0xd1
 800326c:	d9ea      	bls.n	8003244 <AoC_Day_04+0x6a4>

		// calculate answer
		uint32_t sum_of_values = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
		for(int16_t index=card_index-1; index>=0; index--)
 8003274:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
 8003282:	e0ad      	b.n	80033e0 <AoC_Day_04+0x840>
		{
			// calculate matching cards
			uint8_t matches = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
			for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 800328a:	2300      	movs	r3, #0
 800328c:	f887 344c 	strb.w	r3, [r7, #1100]	; 0x44c
 8003290:	e04b      	b.n	800332a <AoC_Day_04+0x78a>
				for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 8003292:	2300      	movs	r3, #0
 8003294:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8003298:	e032      	b.n	8003300 <AoC_Day_04+0x760>
 800329a:	bf00      	nop
 800329c:	0801b770 	.word	0x0801b770
 80032a0:	0801b73c 	.word	0x0801b73c
 80032a4:	0801b748 	.word	0x0801b748
 80032a8:	0801b754 	.word	0x0801b754
 80032ac:	0801b76c 	.word	0x0801b76c
					if(cards[index].numbers[numbers_index] == cards[index].winning[winning_index])
 80032b0:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	461a      	mov	r2, r3
 80032be:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80032c2:	441a      	add	r2, r3
 80032c4:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 80032c8:	4413      	add	r3, r2
 80032ca:	7c99      	ldrb	r1, [r3, #18]
 80032cc:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	461a      	mov	r2, r3
 80032da:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80032de:	441a      	add	r2, r3
 80032e0:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 80032e4:	4413      	add	r3, r2
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	4299      	cmp	r1, r3
 80032ea:	d104      	bne.n	80032f6 <AoC_Day_04+0x756>
						matches++;
 80032ec:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 80032f0:	3301      	adds	r3, #1
 80032f2:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
				for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 80032f6:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 80032fa:	3301      	adds	r3, #1
 80032fc:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8003300:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	461a      	mov	r2, r3
 800330e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003312:	4413      	add	r3, r2
 8003314:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003318:	f897 244b 	ldrb.w	r2, [r7, #1099]	; 0x44b
 800331c:	429a      	cmp	r2, r3
 800331e:	d3c7      	bcc.n	80032b0 <AoC_Day_04+0x710>
			for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8003320:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003324:	3301      	adds	r3, #1
 8003326:	f887 344c 	strb.w	r3, [r7, #1100]	; 0x44c
 800332a:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	461a      	mov	r2, r3
 8003338:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800333c:	4413      	add	r3, r2
 800333e:	7c5b      	ldrb	r3, [r3, #17]
 8003340:	f897 244c 	ldrb.w	r2, [r7, #1100]	; 0x44c
 8003344:	429a      	cmp	r2, r3
 8003346:	d3a4      	bcc.n	8003292 <AoC_Day_04+0x6f2>

			// for the matches below the current match save instances
			for(uint8_t next_index=0; next_index<matches; next_index++)
 8003348:	2300      	movs	r3, #0
 800334a:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 800334e:	e02a      	b.n	80033a6 <AoC_Day_04+0x806>
				cards[index].instances += cards[next_index + index + 1].instances;
 8003350:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	461a      	mov	r2, r3
 800335e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003362:	4413      	add	r3, r2
 8003364:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003366:	f897 244a 	ldrb.w	r2, [r7, #1098]	; 0x44a
 800336a:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 800336e:	4413      	add	r3, r2
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	461a      	mov	r2, r3
 800337c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003380:	4413      	add	r3, r2
 8003382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003384:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	461a      	mov	r2, r3
 8003392:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003396:	4413      	add	r3, r2
 8003398:	1842      	adds	r2, r0, r1
 800339a:	635a      	str	r2, [r3, #52]	; 0x34
			for(uint8_t next_index=0; next_index<matches; next_index++)
 800339c:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 80033a0:	3301      	adds	r3, #1
 80033a2:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 80033a6:	f897 244a 	ldrb.w	r2, [r7, #1098]	; 0x44a
 80033aa:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3ce      	bcc.n	8003350 <AoC_Day_04+0x7b0>

			// increment total
			sum_of_values += cards[index].instances;
 80033b2:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	461a      	mov	r2, r3
 80033c0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80033c4:	4413      	add	r3, r2
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80033cc:	4413      	add	r3, r2
 80033ce:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
		for(int16_t index=card_index-1; index>=0; index--)
 80033d2:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
 80033e0:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f6bf af4d 	bge.w	8003284 <AoC_Day_04+0x6e4>
		}


		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 80033ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033ee:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80033f2:	4911      	ldr	r1, [pc, #68]	; (8003438 <AoC_Day_04+0x898>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f015 fe79 	bl	80190ec <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80033fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fc ff06 	bl	8000210 <strlen>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800340c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003410:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fdc0 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800341c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003420:	4618      	mov	r0, r3
 8003422:	f013 fd5d 	bl	8016ee0 <f_close>
		sram_clrmem();
 8003426:	f000 faa5 	bl	8003974 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop
 8003438:	0801b788 	.word	0x0801b788

0800343c <AoC_Day_05>:
 */

#include "AoC/Days/Day05.h"

AdventOfCode_return_t AoC_Day_05(AdventOfCode_config_t config)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <AoC_Day_05+0x14>
		return AOC_RETURN_NOK;
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <AoC_Day_05+0x16>

	// status code
	return AOC_RETURN_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <AoC_Day_06>:
 */

#include "AoC/Days/Day06.h"

AdventOfCode_return_t AoC_Day_06(AdventOfCode_config_t config)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <AoC_Day_06+0x14>
		return AOC_RETURN_NOK;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <AoC_Day_06+0x16>

	// status code
	return AOC_RETURN_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <AoC_Day_07>:
 */

#include "AoC/Days/Day07.h"

AdventOfCode_return_t AoC_Day_07(AdventOfCode_config_t config)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <AoC_Day_07+0x14>
		return AOC_RETURN_NOK;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <AoC_Day_07+0x16>

	// status code
	return AOC_RETURN_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <AoC_Day_08>:
 */

#include "AoC/Days/Day08.h"

AdventOfCode_return_t AoC_Day_08(AdventOfCode_config_t config)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <AoC_Day_08+0x14>
		return AOC_RETURN_NOK;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <AoC_Day_08+0x16>

	// status code
	return AOC_RETURN_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <AoC_Day_09>:
 */

#include "AoC/Days/Day09.h"

AdventOfCode_return_t AoC_Day_09(AdventOfCode_config_t config)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <AoC_Day_09+0x14>
		return AOC_RETURN_NOK;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <AoC_Day_09+0x16>

	// status code
	return AOC_RETURN_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <AoC_Day_10>:
 */

#include "AoC/Days/Day10.h"

AdventOfCode_return_t AoC_Day_10(AdventOfCode_config_t config)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <AoC_Day_10+0x14>
		return AOC_RETURN_NOK;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <AoC_Day_10+0x16>

	// status code
	return AOC_RETURN_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <AoC_Day_11>:
 */

#include "AoC/Days/Day11.h"

AdventOfCode_return_t AoC_Day_11(AdventOfCode_config_t config)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <AoC_Day_11+0x14>
		return AOC_RETURN_NOK;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <AoC_Day_11+0x16>

	// status code
	return AOC_RETURN_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <AoC_Day_12>:
 */

#include "AoC/Days/Day12.h"

AdventOfCode_return_t AoC_Day_12(AdventOfCode_config_t config)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <AoC_Day_12+0x14>
		return AOC_RETURN_NOK;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <AoC_Day_12+0x16>

	// status code
	return AOC_RETURN_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <AoC_Day_13>:
 */

#include "AoC/Days/Day13.h"

AdventOfCode_return_t AoC_Day_13(AdventOfCode_config_t config)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <AoC_Day_13+0x14>
		return AOC_RETURN_NOK;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <AoC_Day_13+0x16>

	// status code
	return AOC_RETURN_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <AoC_Day_14>:
 */

#include "AoC/Days/Day14.h"

AdventOfCode_return_t AoC_Day_14(AdventOfCode_config_t config)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <AoC_Day_14+0x14>
		return AOC_RETURN_NOK;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <AoC_Day_14+0x16>

	// status code
	return AOC_RETURN_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <AoC_Day_15>:
 */

#include "AoC/Days/Day15.h"

AdventOfCode_return_t AoC_Day_15(AdventOfCode_config_t config)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <AoC_Day_15+0x14>
		return AOC_RETURN_NOK;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <AoC_Day_15+0x16>

	// status code
	return AOC_RETURN_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <AoC_Day_16>:
 */

#include "AoC/Days/Day16.h"

AdventOfCode_return_t AoC_Day_16(AdventOfCode_config_t config)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <AoC_Day_16+0x14>
		return AOC_RETURN_NOK;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <AoC_Day_16+0x16>

	// status code
	return AOC_RETURN_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <AoC_Day_17>:
 */

#include "AoC/Days/Day17.h"

AdventOfCode_return_t AoC_Day_17(AdventOfCode_config_t config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <AoC_Day_17+0x14>
		return AOC_RETURN_NOK;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <AoC_Day_17+0x16>

	// status code
	return AOC_RETURN_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <AoC_Day_18>:
 */

#include "AoC/Days/Day18.h"

AdventOfCode_return_t AoC_Day_18(AdventOfCode_config_t config)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <AoC_Day_18+0x14>
		return AOC_RETURN_NOK;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <AoC_Day_18+0x16>

	// status code
	return AOC_RETURN_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <AoC_Day_19>:
 */

#include "AoC/Days/Day19.h"

AdventOfCode_return_t AoC_Day_19(AdventOfCode_config_t config)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <AoC_Day_19+0x14>
		return AOC_RETURN_NOK;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <AoC_Day_19+0x16>

	// status code
	return AOC_RETURN_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <AoC_Day_20>:
 */

#include "AoC/Days/Day20.h"

AdventOfCode_return_t AoC_Day_20(AdventOfCode_config_t config)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <AoC_Day_20+0x14>
		return AOC_RETURN_NOK;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <AoC_Day_20+0x16>

	// status code
	return AOC_RETURN_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <AoC_Day_21>:
 */

#include "AoC/Days/Day21.h"

AdventOfCode_return_t AoC_Day_21(AdventOfCode_config_t config)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <AoC_Day_21+0x14>
		return AOC_RETURN_NOK;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <AoC_Day_21+0x16>

	// status code
	return AOC_RETURN_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <AoC_Day_22>:
 */

#include "AoC/Days/Day22.h"

AdventOfCode_return_t AoC_Day_22(AdventOfCode_config_t config)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <AoC_Day_22+0x14>
		return AOC_RETURN_NOK;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <AoC_Day_22+0x16>

	// status code
	return AOC_RETURN_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <AoC_Day_23>:
 */

#include "AoC/Days/Day23.h"

AdventOfCode_return_t AoC_Day_23(AdventOfCode_config_t config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <AoC_Day_23+0x14>
		return AOC_RETURN_NOK;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <AoC_Day_23+0x16>

	// status code
	return AOC_RETURN_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <AoC_Day_24>:
 */

#include "AoC/Days/Day24.h"

AdventOfCode_return_t AoC_Day_24(AdventOfCode_config_t config)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <AoC_Day_24+0x14>
		return AOC_RETURN_NOK;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <AoC_Day_24+0x16>

	// status code
	return AOC_RETURN_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <AoC_Day_25>:
 */

#include "AoC/Days/Day25.h"

AdventOfCode_return_t AoC_Day_25(AdventOfCode_config_t config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <AoC_Day_25+0x14>
		return AOC_RETURN_NOK;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <AoC_Day_25+0x16>

	// status code
	return AOC_RETURN_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f804 	bl	8003734 <System_selfTest>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <System_selfTest>:

void System_selfTest(System_t *state)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = (void*)0x60000000 + 1000000ul;
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <System_selfTest+0x90>)
 800373e:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e00a      	b.n	800375c <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	0919      	lsrs	r1, r3, #4
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	b28a      	uxth	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <System_selfTest+0x94>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d9f0      	bls.n	8003746 <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00f      	b.n	800378a <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	b29b      	uxth	r3, r3
 800377a:	429a      	cmp	r2, r3
 800377c:	d002      	beq.n	8003784 <System_selfTest+0x50>
			state->sram_working = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3301      	adds	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <System_selfTest+0x94>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d9eb      	bls.n	800376a <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003798:	2200      	movs	r2, #0
 800379a:	490c      	ldr	r1, [pc, #48]	; (80037cc <System_selfTest+0x98>)
 800379c:	4618      	mov	r0, r3
 800379e:	f012 fe69 	bl	8016474 <f_mount>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(state->sdio.file_result != FR_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <System_selfTest+0x88>
		state->sdio_working = 0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	600f4240 	.word	0x600f4240
 80037c8:	000f423f 	.word	0x000f423f
 80037cc:	20000f5c 	.word	0x20000f5c

080037d0 <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	char *logo = "\n________________________________________________________________________________\n"
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <System_initLog+0x38>)
 80037da:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 80037dc:	bf00      	nop
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <System_initLog+0x3c>)
 80037e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80037e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f8      	bne.n	80037de <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7fc fd0f 	bl	8000210 <strlen>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f013 fed9 	bl	80175b0 <CDC_Transmit_HS>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	0801b7a0 	.word	0x0801b7a0
 800380c:	20000fa0 	.word	0x20000fa0

08003810 <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b0d3      	sub	sp, #332	; 0x14c
 8003814:	af02      	add	r7, sp, #8
 8003816:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800381a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800381e:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 8003820:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <System_selfTestLog+0x100>)
 8003822:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 8003826:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800382a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 8003836:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800383a:	4a36      	ldr	r2, [pc, #216]	; (8003914 <System_selfTestLog+0x104>)
 800383c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003840:	e883 0003 	stmia.w	r3, {r0, r1}
 8003844:	e005      	b.n	8003852 <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 8003846:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800384a:	4a33      	ldr	r2, [pc, #204]	; (8003918 <System_selfTestLog+0x108>)
 800384c:	ca07      	ldmia	r2, {r0, r1, r2}
 800384e:	c303      	stmia	r3!, {r0, r1}
 8003850:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 8003852:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003856:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	789b      	ldrb	r3, [r3, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 8003862:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003866:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <System_selfTestLog+0x104>)
 8003868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800386c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003870:	e005      	b.n	800387e <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 8003872:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <System_selfTestLog+0x108>)
 8003878:	ca07      	ldmia	r2, {r0, r1, r2}
 800387a:	c303      	stmia	r3!, {r0, r1}
 800387c:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 800387e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003882:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	78db      	ldrb	r3, [r3, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <System_selfTestLog+0x10c>)
 8003890:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8003894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800389a:	e005      	b.n	80038a8 <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 800389c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <System_selfTestLog+0x108>)
 80038a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80038a4:	c303      	stmia	r3!, {r0, r1}
 80038a6:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 80038a8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80038ac:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80038b0:	f107 000c 	add.w	r0, r7, #12
 80038b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	460b      	mov	r3, r1
 80038bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038c0:	f015 fc14 	bl	80190ec <siprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 80038c4:	bf00      	nop
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <System_selfTestLog+0x110>)
 80038c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80038cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f8      	bne.n	80038c6 <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fc99 	bl	8000210 <strlen>
 80038de:	4603      	mov	r3, r0
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f013 fe61 	bl	80175b0 <CDC_Transmit_HS>

	// print new cursor
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 80038ee:	bf00      	nop
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <System_selfTestLog+0x110>)
 80038f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80038f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f8      	bne.n	80038f0 <System_selfTestLog+0xe0>
	CDC_Transmit_HS((uint8_t*)">", 1);
 80038fe:	2101      	movs	r1, #1
 8003900:	4808      	ldr	r0, [pc, #32]	; (8003924 <System_selfTestLog+0x114>)
 8003902:	f013 fe55 	bl	80175b0 <CDC_Transmit_HS>
}
 8003906:	bf00      	nop
 8003908:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800390c:	46bd      	mov	sp, r7
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	0801bb40 	.word	0x0801bb40
 8003914:	0801bbe0 	.word	0x0801bbe0
 8003918:	0801bbe8 	.word	0x0801bbe8
 800391c:	0801bbf4 	.word	0x0801bbf4
 8003920:	20000fa0 	.word	0x20000fa0
 8003924:	0801bc04 	.word	0x0801bc04

08003928 <sram_malloc>:
// local memory data
static uint8_t *sram_memory = (uint8_t*)SRAM_MEMORY_ADDRESS;
static uint32_t sram_ptr = 0x00000000;

void* sram_malloc(uint32_t bytes)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	// get allocation ptr;
	void *alloc_ptr = sram_memory + sram_ptr;
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <sram_malloc+0x44>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <sram_malloc+0x48>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4413      	add	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

	// check for overrun
	uint32_t block_size = sram_ptr + bytes;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <sram_malloc+0x48>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	60bb      	str	r3, [r7, #8]
	if(block_size >= SRAM_MEMORY_SIZE)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800394c:	d301      	bcc.n	8003952 <sram_malloc+0x2a>
		return NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	e006      	b.n	8003960 <sram_malloc+0x38>

	// increment memory ptr;
	sram_ptr += bytes;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <sram_malloc+0x48>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <sram_malloc+0x48>)
 800395c:	6013      	str	r3, [r2, #0]

	// return allocation address
	return alloc_ptr;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000000 	.word	0x20000000
 8003970:	2000031c 	.word	0x2000031c

08003974 <sram_clrmem>:
	// return cleared allocation addres
	return alloc_ptr;
}

void sram_clrmem()
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
	// reset allocation ptr
	sram_ptr = 0;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <sram_clrmem+0x14>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	2000031c 	.word	0x2000031c

0800398c <checkImplementation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void checkImplementation(char token_buffer[6][32])
{
 800398c:	b580      	push	{r7, lr}
 800398e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8003992:	af00      	add	r7, sp, #0
 8003994:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8003998:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800399c:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800399e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80039a2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3320      	adds	r3, #32
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <checkImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 80039b0:	2215      	movs	r2, #21
 80039b2:	4946      	ldr	r1, [pc, #280]	; (8003acc <checkImplementation+0x140>)
 80039b4:	2002      	movs	r0, #2
 80039b6:	f7fd faf1 	bl	8000f9c <AdventOfCode_print>
		return;
 80039ba:	e083      	b.n	8003ac4 <checkImplementation+0x138>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 80039bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80039c0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3320      	adds	r3, #32
 80039c8:	4618      	mov	r0, r3
 80039ca:	f014 fdcd 	bl	8018568 <atoi>
 80039ce:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
	if(day > 25 || day <= 0)
 80039d2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80039d6:	2b19      	cmp	r3, #25
 80039d8:	dc03      	bgt.n	80039e2 <checkImplementation+0x56>
 80039da:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dc05      	bgt.n	80039ee <checkImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 80039e2:	221a      	movs	r2, #26
 80039e4:	493a      	ldr	r1, [pc, #232]	; (8003ad0 <checkImplementation+0x144>)
 80039e6:	2002      	movs	r0, #2
 80039e8:	f7fd fad8 	bl	8000f9c <AdventOfCode_print>
		return;
 80039ec:	e06a      	b.n	8003ac4 <checkImplementation+0x138>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Checking day %ld\n", day);
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80039f6:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <checkImplementation+0x148>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f015 fb77 	bl	80190ec <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 80039fe:	f107 0320 	add.w	r3, r7, #32
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fc04 	bl	8000210 <strlen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	4619      	mov	r1, r3
 8003a12:	2002      	movs	r0, #2
 8003a14:	f7fd fac2 	bl	8000f9c <AdventOfCode_print>

	// check day
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8003a18:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a2e      	ldr	r2, [pc, #184]	; (8003ad8 <checkImplementation+0x14c>)
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	2000      	movs	r0, #0
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
	if(ret == AOC_RETURN_OK)
 8003a2e:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <checkImplementation+0xb6>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Implemented\n", strlen("\tState: Implemented\n"));
 8003a36:	2214      	movs	r2, #20
 8003a38:	4928      	ldr	r1, [pc, #160]	; (8003adc <checkImplementation+0x150>)
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f7fd faae 	bl	8000f9c <AdventOfCode_print>
 8003a40:	e004      	b.n	8003a4c <checkImplementation+0xc0>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8003a42:	2218      	movs	r2, #24
 8003a44:	4926      	ldr	r1, [pc, #152]	; (8003ae0 <checkImplementation+0x154>)
 8003a46:	2002      	movs	r0, #2
 8003a48:	f7fd faa8 	bl	8000f9c <AdventOfCode_print>

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8003a4c:	f107 0320 	add.w	r3, r7, #32
 8003a50:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003a54:	4923      	ldr	r1, [pc, #140]	; (8003ae4 <checkImplementation+0x158>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f015 fb48 	bl	80190ec <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 8003a5c:	f107 0208 	add.w	r2, r7, #8
 8003a60:	f107 0320 	add.w	r3, r7, #32
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f013 fb3a 	bl	80170e0 <f_stat>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <checkImplementation+0xf2>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Present\n", strlen("\tDebug: Present\n"));
 8003a72:	2210      	movs	r2, #16
 8003a74:	491c      	ldr	r1, [pc, #112]	; (8003ae8 <checkImplementation+0x15c>)
 8003a76:	2002      	movs	r0, #2
 8003a78:	f7fd fa90 	bl	8000f9c <AdventOfCode_print>
 8003a7c:	e004      	b.n	8003a88 <checkImplementation+0xfc>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 8003a7e:	220f      	movs	r2, #15
 8003a80:	491a      	ldr	r1, [pc, #104]	; (8003aec <checkImplementation+0x160>)
 8003a82:	2002      	movs	r0, #2
 8003a84:	f7fd fa8a 	bl	8000f9c <AdventOfCode_print>

	// check release file
	sprintf(buffer, "day%ld.txt", day);
 8003a88:	f107 0320 	add.w	r3, r7, #32
 8003a8c:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003a90:	4917      	ldr	r1, [pc, #92]	; (8003af0 <checkImplementation+0x164>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f015 fb2a 	bl	80190ec <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 8003a98:	f107 0208 	add.w	r2, r7, #8
 8003a9c:	f107 0320 	add.w	r3, r7, #32
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f013 fb1c 	bl	80170e0 <f_stat>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <checkImplementation+0x12e>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Present\n", strlen("\tRelease: Present\n"));
 8003aae:	2212      	movs	r2, #18
 8003ab0:	4910      	ldr	r1, [pc, #64]	; (8003af4 <checkImplementation+0x168>)
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f7fd fa72 	bl	8000f9c <AdventOfCode_print>
 8003ab8:	e004      	b.n	8003ac4 <checkImplementation+0x138>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 8003aba:	2211      	movs	r2, #17
 8003abc:	490e      	ldr	r1, [pc, #56]	; (8003af8 <checkImplementation+0x16c>)
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f7fd fa6c 	bl	8000f9c <AdventOfCode_print>
}
 8003ac4:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0801bc08 	.word	0x0801bc08
 8003ad0:	0801bc20 	.word	0x0801bc20
 8003ad4:	0801bc3c 	.word	0x0801bc3c
 8003ad8:	20000ee8 	.word	0x20000ee8
 8003adc:	0801bc50 	.word	0x0801bc50
 8003ae0:	0801bc68 	.word	0x0801bc68
 8003ae4:	0801bc84 	.word	0x0801bc84
 8003ae8:	0801bc90 	.word	0x0801bc90
 8003aec:	0801bca4 	.word	0x0801bca4
 8003af0:	0801bcb4 	.word	0x0801bcb4
 8003af4:	0801bcc0 	.word	0x0801bcc0
 8003af8:	0801bcd4 	.word	0x0801bcd4

08003afc <runDebugImplementation>:

static void runDebugImplementation(char token_buffer[6][32])
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003b08:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003b0c:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8003b0e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003b12:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <runDebugImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8003b20:	2215      	movs	r2, #21
 8003b22:	495a      	ldr	r1, [pc, #360]	; (8003c8c <runDebugImplementation+0x190>)
 8003b24:	2002      	movs	r0, #2
 8003b26:	f7fd fa39 	bl	8000f9c <AdventOfCode_print>
		return;
 8003b2a:	e0aa      	b.n	8003c82 <runDebugImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 8003b2c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003b30:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3320      	adds	r3, #32
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f014 fd15 	bl	8018568 <atoi>
 8003b3e:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 8003b42:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003b46:	2b19      	cmp	r3, #25
 8003b48:	dc03      	bgt.n	8003b52 <runDebugImplementation+0x56>
 8003b4a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dc05      	bgt.n	8003b5e <runDebugImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8003b52:	221a      	movs	r2, #26
 8003b54:	494e      	ldr	r1, [pc, #312]	; (8003c90 <runDebugImplementation+0x194>)
 8003b56:	2002      	movs	r0, #2
 8003b58:	f7fd fa20 	bl	8000f9c <AdventOfCode_print>
		return;
 8003b5c:	e091      	b.n	8003c82 <runDebugImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing debug day %ld\n", day);
 8003b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b62:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003b66:	494b      	ldr	r1, [pc, #300]	; (8003c94 <runDebugImplementation+0x198>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f015 fabf 	bl	80190ec <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fb4c 	bl	8000210 <strlen>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b80:	4619      	mov	r1, r3
 8003b82:	2002      	movs	r0, #2
 8003b84:	f7fd fa0a 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8003b88:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <runDebugImplementation+0x19c>)
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	2000      	movs	r0, #0
 8003b96:	4798      	blx	r3
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 8003b9e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <runDebugImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8003ba6:	2218      	movs	r2, #24
 8003ba8:	493c      	ldr	r1, [pc, #240]	; (8003c9c <runDebugImplementation+0x1a0>)
 8003baa:	2002      	movs	r0, #2
 8003bac:	f7fd f9f6 	bl	8000f9c <AdventOfCode_print>
		return;
 8003bb0:	e067      	b.n	8003c82 <runDebugImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8003bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb6:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003bba:	4939      	ldr	r1, [pc, #228]	; (8003ca0 <runDebugImplementation+0x1a4>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f015 fa95 	bl	80190ec <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8003bc2:	f107 020c 	add.w	r2, r7, #12
 8003bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f013 fa87 	bl	80170e0 <f_stat>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <runDebugImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 8003bd8:	220f      	movs	r2, #15
 8003bda:	4932      	ldr	r1, [pc, #200]	; (8003ca4 <runDebugImplementation+0x1a8>)
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f7fd f9dd 	bl	8000f9c <AdventOfCode_print>
		return;
 8003be2:	e04e      	b.n	8003c82 <runDebugImplementation+0x186>
	}

	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8003be4:	2207      	movs	r2, #7
 8003be6:	4930      	ldr	r1, [pc, #192]	; (8003ca8 <runDebugImplementation+0x1ac>)
 8003be8:	2002      	movs	r0, #2
 8003bea:	f7fd f9d7 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8003bee:	f001 fd01 	bl	80055f4 <HAL_GetTick>
 8003bf2:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_DEBUG_VERBOSE);
 8003bf6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <runDebugImplementation+0x19c>)
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	2002      	movs	r0, #2
 8003c04:	4798      	blx	r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 8003c0c:	f001 fcf2 	bl	80055f4 <HAL_GetTick>
 8003c10:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 8003c14:	f7ff feae 	bl	8003974 <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 8003c18:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d118      	bne.n	8003c52 <runDebugImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8003c20:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003c24:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003c28:	1ad2      	subs	r2, r2, r3
 8003c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2e:	491f      	ldr	r1, [pc, #124]	; (8003cac <runDebugImplementation+0x1b0>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f015 fa5b 	bl	80190ec <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fae8 	bl	8000210 <strlen>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f7fd f9a6 	bl	8000f9c <AdventOfCode_print>
 8003c50:	e017      	b.n	8003c82 <runDebugImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8003c52:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003c56:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c60:	4913      	ldr	r1, [pc, #76]	; (8003cb0 <runDebugImplementation+0x1b4>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f015 fa42 	bl	80190ec <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc facf 	bl	8000210 <strlen>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fd f98d 	bl	8000f9c <AdventOfCode_print>
	}
}
 8003c82:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	0801bc08 	.word	0x0801bc08
 8003c90:	0801bc20 	.word	0x0801bc20
 8003c94:	0801bce8 	.word	0x0801bce8
 8003c98:	20000ee8 	.word	0x20000ee8
 8003c9c:	0801bc68 	.word	0x0801bc68
 8003ca0:	0801bc84 	.word	0x0801bc84
 8003ca4:	0801bca4 	.word	0x0801bca4
 8003ca8:	0801bd04 	.word	0x0801bd04
 8003cac:	0801bd0c 	.word	0x0801bd0c
 8003cb0:	0801bd20 	.word	0x0801bd20

08003cb4 <runReleaseImplementation>:

static void runReleaseImplementation(char token_buffer[6][32])
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003cc0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003cc4:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8003cc6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003cca:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <runReleaseImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8003cd8:	2215      	movs	r2, #21
 8003cda:	495a      	ldr	r1, [pc, #360]	; (8003e44 <runReleaseImplementation+0x190>)
 8003cdc:	2002      	movs	r0, #2
 8003cde:	f7fd f95d 	bl	8000f9c <AdventOfCode_print>
		return;
 8003ce2:	e0aa      	b.n	8003e3a <runReleaseImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 8003ce4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8003ce8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3320      	adds	r3, #32
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f014 fc39 	bl	8018568 <atoi>
 8003cf6:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 8003cfa:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003cfe:	2b19      	cmp	r3, #25
 8003d00:	dc03      	bgt.n	8003d0a <runReleaseImplementation+0x56>
 8003d02:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	dc05      	bgt.n	8003d16 <runReleaseImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8003d0a:	221a      	movs	r2, #26
 8003d0c:	494e      	ldr	r1, [pc, #312]	; (8003e48 <runReleaseImplementation+0x194>)
 8003d0e:	2002      	movs	r0, #2
 8003d10:	f7fd f944 	bl	8000f9c <AdventOfCode_print>
		return;
 8003d14:	e091      	b.n	8003e3a <runReleaseImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing release day %ld\n", day);
 8003d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003d1e:	494b      	ldr	r1, [pc, #300]	; (8003e4c <runReleaseImplementation+0x198>)
 8003d20:	4618      	mov	r0, r3
 8003d22:	f015 f9e3 	bl	80190ec <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fa70 	bl	8000210 <strlen>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d38:	4619      	mov	r1, r3
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f7fd f92e 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8003d40:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003d44:	3b01      	subs	r3, #1
 8003d46:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <runReleaseImplementation+0x19c>)
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	4798      	blx	r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 8003d56:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <runReleaseImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8003d5e:	2218      	movs	r2, #24
 8003d60:	493c      	ldr	r1, [pc, #240]	; (8003e54 <runReleaseImplementation+0x1a0>)
 8003d62:	2002      	movs	r0, #2
 8003d64:	f7fd f91a 	bl	8000f9c <AdventOfCode_print>
		return;
 8003d68:	e067      	b.n	8003e3a <runReleaseImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ld.txt", day);
 8003d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d6e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003d72:	4939      	ldr	r1, [pc, #228]	; (8003e58 <runReleaseImplementation+0x1a4>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f015 f9b9 	bl	80190ec <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f013 f9ab 	bl	80170e0 <f_stat>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <runReleaseImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 8003d90:	2211      	movs	r2, #17
 8003d92:	4932      	ldr	r1, [pc, #200]	; (8003e5c <runReleaseImplementation+0x1a8>)
 8003d94:	2002      	movs	r0, #2
 8003d96:	f7fd f901 	bl	8000f9c <AdventOfCode_print>
		return;
 8003d9a:	e04e      	b.n	8003e3a <runReleaseImplementation+0x186>
	}


	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	4930      	ldr	r1, [pc, #192]	; (8003e60 <runReleaseImplementation+0x1ac>)
 8003da0:	2002      	movs	r0, #2
 8003da2:	f7fd f8fb 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8003da6:	f001 fc25 	bl	80055f4 <HAL_GetTick>
 8003daa:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_RELEASE_VERBOSE);
 8003dae:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003db2:	3b01      	subs	r3, #1
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <runReleaseImplementation+0x19c>)
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	2004      	movs	r0, #4
 8003dbc:	4798      	blx	r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 8003dc4:	f001 fc16 	bl	80055f4 <HAL_GetTick>
 8003dc8:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 8003dcc:	f7ff fdd2 	bl	8003974 <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 8003dd0:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d118      	bne.n	8003e0a <runReleaseImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8003dd8:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003ddc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003de0:	1ad2      	subs	r2, r2, r3
 8003de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de6:	491f      	ldr	r1, [pc, #124]	; (8003e64 <runReleaseImplementation+0x1b0>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f015 f97f 	bl	80190ec <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fa0c 	bl	8000210 <strlen>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e00:	4619      	mov	r1, r3
 8003e02:	2002      	movs	r0, #2
 8003e04:	f7fd f8ca 	bl	8000f9c <AdventOfCode_print>
 8003e08:	e017      	b.n	8003e3a <runReleaseImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8003e0a:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8003e0e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e18:	4913      	ldr	r1, [pc, #76]	; (8003e68 <runReleaseImplementation+0x1b4>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f015 f966 	bl	80190ec <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc f9f3 	bl	8000210 <strlen>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e32:	4619      	mov	r1, r3
 8003e34:	2002      	movs	r0, #2
 8003e36:	f7fd f8b1 	bl	8000f9c <AdventOfCode_print>
	}
}
 8003e3a:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	0801bc08 	.word	0x0801bc08
 8003e48:	0801bc20 	.word	0x0801bc20
 8003e4c:	0801bd30 	.word	0x0801bd30
 8003e50:	20000ee8 	.word	0x20000ee8
 8003e54:	0801bc68 	.word	0x0801bc68
 8003e58:	0801bcb4 	.word	0x0801bcb4
 8003e5c:	0801bcd4 	.word	0x0801bcd4
 8003e60:	0801bd04 	.word	0x0801bd04
 8003e64:	0801bd0c 	.word	0x0801bd0c
 8003e68:	0801bd20 	.word	0x0801bd20

08003e6c <fetchPuzzleInput>:

static void fetchPuzzleInput(char token_buffer[6][32])
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	f5ad 6dc9 	sub.w	sp, sp, #1608	; 0x648
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8003e78:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8003e7c:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 8003e7e:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8003e82:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <fetchPuzzleInput+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 8003e90:	2214      	movs	r2, #20
 8003e92:	4952      	ldr	r1, [pc, #328]	; (8003fdc <fetchPuzzleInput+0x170>)
 8003e94:	2002      	movs	r0, #2
 8003e96:	f7fd f881 	bl	8000f9c <AdventOfCode_print>
		return;
 8003e9a:	e09b      	b.n	8003fd4 <fetchPuzzleInput+0x168>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Creating %s\n", token_buffer[1]);
 8003e9c:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8003ea0:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f103 0220 	add.w	r2, r3, #32
 8003eaa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003eae:	494c      	ldr	r1, [pc, #304]	; (8003fe0 <fetchPuzzleInput+0x174>)
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f015 f91b 	bl	80190ec <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003eb6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc f9a8 	bl	8000210 <strlen>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f7fd f866 	bl	8000f9c <AdventOfCode_print>

	// create file
	FIL file;
	uint8_t ret = f_open(&file, token_buffer[1], FA_CREATE_ALWAYS | FA_WRITE);
 8003ed0:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8003ed4:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f103 0120 	add.w	r1, r3, #32
 8003ede:	f107 0308 	add.w	r3, r7, #8
 8003ee2:	220a      	movs	r2, #10
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f012 fb0b 	bl	8016500 <f_open>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 363f 	strb.w	r3, [r7, #1599]	; 0x63f
	if(ret != FR_OK)
 8003ef0:	f897 363f 	ldrb.w	r3, [r7, #1599]	; 0x63f
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <fetchPuzzleInput+0x98>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to create file!\n", strlen("Failed to create file!\n"));
 8003ef8:	2217      	movs	r2, #23
 8003efa:	493a      	ldr	r1, [pc, #232]	; (8003fe4 <fetchPuzzleInput+0x178>)
 8003efc:	2002      	movs	r0, #2
 8003efe:	f7fd f84d 	bl	8000f9c <AdventOfCode_print>
		return;
 8003f02:	e067      	b.n	8003fd4 <fetchPuzzleInput+0x168>
	}

	// fetch data
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploade data:\n{\n", strlen("Uploade data:\n{\n"));
 8003f04:	2210      	movs	r2, #16
 8003f06:	4938      	ldr	r1, [pc, #224]	; (8003fe8 <fetchPuzzleInput+0x17c>)
 8003f08:	2002      	movs	r0, #2
 8003f0a:	f7fd f847 	bl	8000f9c <AdventOfCode_print>

	usb_rx_ready = 0;
 8003f0e:	4b37      	ldr	r3, [pc, #220]	; (8003fec <fetchPuzzleInput+0x180>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
	uint8_t done = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
	uint32_t counter = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
	while(!done)
 8003f20:	e045      	b.n	8003fae <fetchPuzzleInput+0x142>
	{
		// wait for new data
		if(!usb_rx_ready)
 8003f22:	4b32      	ldr	r3, [pc, #200]	; (8003fec <fetchPuzzleInput+0x180>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d100      	bne.n	8003f2c <fetchPuzzleInput+0xc0>
			continue;
 8003f2a:	e040      	b.n	8003fae <fetchPuzzleInput+0x142>

		// flicker lightn light
		if((counter++ % 2) == 0)
 8003f2c:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	f8c7 2640 	str.w	r2, [r7, #1600]	; 0x640
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <fetchPuzzleInput+0xda>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	482b      	ldr	r0, [pc, #172]	; (8003ff0 <fetchPuzzleInput+0x184>)
 8003f42:	f002 fc98 	bl	8006876 <HAL_GPIO_TogglePin>

		// check last character
		char last_character = usb_rx_buffer[usb_rx_length - 3];
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <fetchPuzzleInput+0x188>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	3b03      	subs	r3, #3
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <fetchPuzzleInput+0x18c>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	f887 363e 	strb.w	r3, [r7, #1598]	; 0x63e
		if(last_character == '`')
 8003f54:	f897 363e 	ldrb.w	r3, [r7, #1598]	; 0x63e
 8003f58:	2b60      	cmp	r3, #96	; 0x60
 8003f5a:	d108      	bne.n	8003f6e <fetchPuzzleInput+0x102>
		{
			usb_rx_buffer[usb_rx_length - 3] = 0x00;
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <fetchPuzzleInput+0x188>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	3b03      	subs	r3, #3
 8003f62:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <fetchPuzzleInput+0x18c>)
 8003f64:	2100      	movs	r1, #0
 8003f66:	54d1      	strb	r1, [r2, r3]
			done = 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
		}

		// echo message
		sprintf(buffer, "%s", (char*)usb_rx_buffer);
 8003f6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <fetchPuzzleInput+0x18c>)
 8003f74:	4921      	ldr	r1, [pc, #132]	; (8003ffc <fetchPuzzleInput+0x190>)
 8003f76:	4618      	mov	r0, r3
 8003f78:	f015 f8b8 	bl	80190ec <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8003f7c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc f945 	bl	8000210 <strlen>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003f8e:	4619      	mov	r1, r3
 8003f90:	2002      	movs	r0, #2
 8003f92:	f7fd f803 	bl	8000f9c <AdventOfCode_print>

		// write to file
		f_write(&file, usb_rx_buffer, usb_rx_length, NULL);
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <fetchPuzzleInput+0x188>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f107 0008 	add.w	r0, r7, #8
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4915      	ldr	r1, [pc, #84]	; (8003ff8 <fetchPuzzleInput+0x18c>)
 8003fa4:	f012 fda9 	bl	8016afa <f_write>

		// clear flag
		usb_rx_ready = 0;
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <fetchPuzzleInput+0x180>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
	while(!done)
 8003fae:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0b5      	beq.n	8003f22 <fetchPuzzleInput+0xb6>
	}

	// close file
	f_close(&file);
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f012 ff90 	bl	8016ee0 <f_close>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\n}\nSaving input\n", strlen("\n}\nSaving input\n"));
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	490f      	ldr	r1, [pc, #60]	; (8004000 <fetchPuzzleInput+0x194>)
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f7fc ffe9 	bl	8000f9c <AdventOfCode_print>

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <fetchPuzzleInput+0x184>)
 8003fd0:	f002 fc38 	bl	8006844 <HAL_GPIO_WritePin>
}
 8003fd4:	f507 67c9 	add.w	r7, r7, #1608	; 0x648
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	0801bd4c 	.word	0x0801bd4c
 8003fe0:	0801bd64 	.word	0x0801bd64
 8003fe4:	0801bd74 	.word	0x0801bd74
 8003fe8:	0801bd8c 	.word	0x0801bd8c
 8003fec:	20000ee6 	.word	0x20000ee6
 8003ff0:	40021800 	.word	0x40021800
 8003ff4:	20000ee4 	.word	0x20000ee4
 8003ff8:	20000ae4 	.word	0x20000ae4
 8003ffc:	0801bda0 	.word	0x0801bda0
 8004000:	0801bda4 	.word	0x0801bda4

08004004 <showDirectory>:

static void showDirectory()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b0a4      	sub	sp, #144	; 0x90
 8004008:	af00      	add	r7, sp, #0
	// opening log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploaded files:\n{\n", strlen("Uploaded files:\n{\n"));
 800400a:	2212      	movs	r2, #18
 800400c:	4922      	ldr	r1, [pc, #136]	; (8004098 <showDirectory+0x94>)
 800400e:	2002      	movs	r0, #2
 8004010:	f7fc ffc4 	bl	8000f9c <AdventOfCode_print>
	char buffer[64];

	DIR dir;
	FILINFO fno;
	uint8_t counter = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	f_opendir(&dir, "/");
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	491f      	ldr	r1, [pc, #124]	; (800409c <showDirectory+0x98>)
 8004020:	4618      	mov	r0, r3
 8004022:	f012 ff87 	bl	8016f34 <f_opendir>
	do
	{
		f_readdir(&dir, &fno);
 8004026:	1d3a      	adds	r2, r7, #4
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f013 f819 	bl	8017066 <f_readdir>
		if(fno.fname[0] != 0 && counter++ > 1)
 8004034:	7b7b      	ldrb	r3, [r7, #13]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <showDirectory+0x70>
 800403a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
 8004044:	2b01      	cmp	r3, #1
 8004046:	d915      	bls.n	8004074 <showDirectory+0x70>
		{
			sprintf(buffer, "\t%s\n", fno.fname);
 8004048:	1d3b      	adds	r3, r7, #4
 800404a:	f103 0209 	add.w	r2, r3, #9
 800404e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004052:	4913      	ldr	r1, [pc, #76]	; (80040a0 <showDirectory+0x9c>)
 8004054:	4618      	mov	r0, r3
 8004056:	f015 f849 	bl	80190ec <siprintf>
			AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800405a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc f8d6 	bl	8000210 <strlen>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800406c:	4619      	mov	r1, r3
 800406e:	2002      	movs	r0, #2
 8004070:	f7fc ff94 	bl	8000f9c <AdventOfCode_print>
		}
	} while(fno.fname[0] != 0);
 8004074:	7b7b      	ldrb	r3, [r7, #13]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1d5      	bne.n	8004026 <showDirectory+0x22>
	f_closedir(&dir);
 800407a:	f107 031c 	add.w	r3, r7, #28
 800407e:	4618      	mov	r0, r3
 8004080:	f012 ffcb 	bl	801701a <f_closedir>

	// closing log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\n", strlen("}\n"));
 8004084:	2202      	movs	r2, #2
 8004086:	4907      	ldr	r1, [pc, #28]	; (80040a4 <showDirectory+0xa0>)
 8004088:	2002      	movs	r0, #2
 800408a:	f7fc ff87 	bl	8000f9c <AdventOfCode_print>
}
 800408e:	bf00      	nop
 8004090:	3790      	adds	r7, #144	; 0x90
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	0801bdb8 	.word	0x0801bdb8
 800409c:	0801bdcc 	.word	0x0801bdcc
 80040a0:	0801bdd0 	.word	0x0801bdd0
 80040a4:	0801bdd8 	.word	0x0801bdd8

080040a8 <deleteFile>:

static void deleteFile(char token_buffer[6][32])
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80040b4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80040b8:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 80040ba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80040be:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3320      	adds	r3, #32
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <deleteFile+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 80040cc:	2214      	movs	r2, #20
 80040ce:	491f      	ldr	r1, [pc, #124]	; (800414c <deleteFile+0xa4>)
 80040d0:	2002      	movs	r0, #2
 80040d2:	f7fc ff63 	bl	8000f9c <AdventOfCode_print>
		return;
 80040d6:	e034      	b.n	8004142 <deleteFile+0x9a>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Deleting %s\n", token_buffer[1]);
 80040d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80040dc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f103 0220 	add.w	r2, r3, #32
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4919      	ldr	r1, [pc, #100]	; (8004150 <deleteFile+0xa8>)
 80040ec:	4618      	mov	r0, r3
 80040ee:	f014 fffd 	bl	80190ec <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc f88a 	bl	8000210 <strlen>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	f107 0308 	add.w	r3, r7, #8
 8004104:	4619      	mov	r1, r3
 8004106:	2002      	movs	r0, #2
 8004108:	f7fc ff48 	bl	8000f9c <AdventOfCode_print>

	// delete file
	uint8_t ret = f_unlink(token_buffer[1]);
 800410c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004110:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3320      	adds	r3, #32
 8004118:	4618      	mov	r0, r3
 800411a:	f013 f81a 	bl	8017152 <f_unlink>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	if(ret != FR_OK)
 8004124:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <deleteFile+0x90>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to delete file!\n", strlen("Failed to delete file!\n"));
 800412c:	2217      	movs	r2, #23
 800412e:	4909      	ldr	r1, [pc, #36]	; (8004154 <deleteFile+0xac>)
 8004130:	2002      	movs	r0, #2
 8004132:	f7fc ff33 	bl	8000f9c <AdventOfCode_print>
		return;
 8004136:	e004      	b.n	8004142 <deleteFile+0x9a>
	}

	// deleted file
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Deleted file\n", strlen("Deleted file\n"));
 8004138:	220d      	movs	r2, #13
 800413a:	4907      	ldr	r1, [pc, #28]	; (8004158 <deleteFile+0xb0>)
 800413c:	2002      	movs	r0, #2
 800413e:	f7fc ff2d 	bl	8000f9c <AdventOfCode_print>
}
 8004142:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	0801bd4c 	.word	0x0801bd4c
 8004150:	0801bddc 	.word	0x0801bddc
 8004154:	0801bdec 	.word	0x0801bdec
 8004158:	0801be04 	.word	0x0801be04

0800415c <showHelp>:

static void showHelp()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8004162:	af00      	add	r7, sp, #0
	// print execution commands
	char puzzle_commands[] =
 8004164:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004168:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <showHelp+0x74>)
 800416e:	4618      	mov	r0, r3
 8004170:	4611      	mov	r1, r2
 8004172:	f240 1365 	movw	r3, #357	; 0x165
 8004176:	461a      	mov	r2, r3
 8004178:	f014 fa48 	bl	801860c <memcpy>
			"               [check <day_number>]\n"
			"    test     > Run puzzle implementation using test input.\n"
			"               [test <day_number>]\n"
			"    release  > Run puzzle implementation using release input.\n"
			"               [release <day_number>]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, puzzle_commands, strlen(puzzle_commands));
 800417c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f845 	bl	8000210 <strlen>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800418e:	4619      	mov	r1, r3
 8004190:	2002      	movs	r0, #2
 8004192:	f7fc ff03 	bl	8000f9c <AdventOfCode_print>

	// print file commands
	char file_commands[] =
 8004196:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800419a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <showHelp+0x78>)
 80041a0:	4618      	mov	r0, r3
 80041a2:	4611      	mov	r1, r2
 80041a4:	f44f 7399 	mov.w	r3, #306	; 0x132
 80041a8:	461a      	mov	r2, r3
 80041aa:	f014 fa2f 	bl	801860c <memcpy>
			"               [list]\n"
			"    upload   > Upload puzzle input data to the SD card.\n"
			"               [upload <name_of_file>.txt]\n"
			"    delete   > Delete puzzle input data on the SD card.\n"
			"               [delete <name_of_file>.txt]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, file_commands, strlen(file_commands));
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc f82d 	bl	8000210 <strlen>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	2002      	movs	r0, #2
 80041c0:	f7fc feec 	bl	8000f9c <AdventOfCode_print>
}
 80041c4:	bf00      	nop
 80041c6:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0801be14 	.word	0x0801be14
 80041d4:	0801bf7c 	.word	0x0801bf7c

080041d8 <invalidCommand>:

static void invalidCommand()
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	b090      	sub	sp, #64	; 0x40
 80041dc:	af00      	add	r7, sp, #0
	char unknown_string[] = "Unkown command refer to the commands list using [help]!\n";
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <invalidCommand+0x40>)
 80041e0:	1d3c      	adds	r4, r7, #4
 80041e2:	461d      	mov	r5, r3
 80041e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041f4:	c403      	stmia	r4!, {r0, r1}
 80041f6:	7022      	strb	r2, [r4, #0]
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, unknown_string, strlen(unknown_string));
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc f808 	bl	8000210 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	4619      	mov	r1, r3
 8004208:	2002      	movs	r0, #2
 800420a:	f7fc fec7 	bl	8000f9c <AdventOfCode_print>
}
 800420e:	bf00      	nop
 8004210:	3740      	adds	r7, #64	; 0x40
 8004212:	46bd      	mov	sp, r7
 8004214:	bdb0      	pop	{r4, r5, r7, pc}
 8004216:	bf00      	nop
 8004218:	0801c0b0 	.word	0x0801c0b0

0800421c <USBD_HandleCommands>:

void USBD_HandleCommands()
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b0b3      	sub	sp, #204	; 0xcc
 8004220:	af00      	add	r7, sp, #0
	// check if message is valid
	if(!usb_rx_ready)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <USBD_HandleCommands+0x194>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80bd 	beq.w	80043a6 <USBD_HandleCommands+0x18a>
		return;

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800422c:	2201      	movs	r2, #1
 800422e:	2140      	movs	r1, #64	; 0x40
 8004230:	4860      	ldr	r0, [pc, #384]	; (80043b4 <USBD_HandleCommands+0x198>)
 8004232:	f002 fb07 	bl	8006844 <HAL_GPIO_WritePin>

	// tokenize input
	char token_buffer[6][32];
	memset(token_buffer, 0x00, 6 * 32);
 8004236:	463b      	mov	r3, r7
 8004238:	22c0      	movs	r2, #192	; 0xc0
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f014 f9f3 	bl	8018628 <memset>
	char *token = strtok((char*)usb_rx_buffer, " ");
 8004242:	495d      	ldr	r1, [pc, #372]	; (80043b8 <USBD_HandleCommands+0x19c>)
 8004244:	485d      	ldr	r0, [pc, #372]	; (80043bc <USBD_HandleCommands+0x1a0>)
 8004246:	f014 ff71 	bl	801912c <strtok>
 800424a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	uint8_t token_counter = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 8004254:	e01a      	b.n	800428c <USBD_HandleCommands+0x70>
	{
		memcpy(token_buffer[token_counter], token, strlen(token));
 8004256:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800425a:	463a      	mov	r2, r7
 800425c:	015b      	lsls	r3, r3, #5
 800425e:	18d4      	adds	r4, r2, r3
 8004260:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004264:	f7fb ffd4 	bl	8000210 <strlen>
 8004268:	4603      	mov	r3, r0
 800426a:	461a      	mov	r2, r3
 800426c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004270:	4620      	mov	r0, r4
 8004272:	f014 f9cb 	bl	801860c <memcpy>
		token = strtok(NULL, " ");
 8004276:	4950      	ldr	r1, [pc, #320]	; (80043b8 <USBD_HandleCommands+0x19c>)
 8004278:	2000      	movs	r0, #0
 800427a:	f014 ff57 	bl	801912c <strtok>
 800427e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		token_counter++;
 8004282:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004286:	3301      	adds	r3, #1
 8004288:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 800428c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <USBD_HandleCommands+0x80>
 8004294:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004298:	2b05      	cmp	r3, #5
 800429a:	d9dc      	bls.n	8004256 <USBD_HandleCommands+0x3a>
	}

	// process command
	uint8_t token_length = strlen(token_buffer[0]);
 800429c:	463b      	mov	r3, r7
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fb ffb6 	bl	8000210 <strlen>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(token_counter == 1) token_length -= 2;
 80042aa:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d104      	bne.n	80042bc <USBD_HandleCommands+0xa0>
 80042b2:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80042b6:	3b02      	subs	r3, #2
 80042b8:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(!memcmp(token_buffer[0], USB_COMMAND_CHECK, token_length))
 80042bc:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80042c0:	463b      	mov	r3, r7
 80042c2:	493f      	ldr	r1, [pc, #252]	; (80043c0 <USBD_HandleCommands+0x1a4>)
 80042c4:	4618      	mov	r0, r3
 80042c6:	f014 f991 	bl	80185ec <memcmp>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <USBD_HandleCommands+0xbe>
		checkImplementation(token_buffer);
 80042d0:	463b      	mov	r3, r7
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fb5a 	bl	800398c <checkImplementation>
 80042d8:	e057      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_TEST, token_length))
 80042da:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80042de:	463b      	mov	r3, r7
 80042e0:	4938      	ldr	r1, [pc, #224]	; (80043c4 <USBD_HandleCommands+0x1a8>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f014 f982 	bl	80185ec <memcmp>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <USBD_HandleCommands+0xdc>
		runDebugImplementation(token_buffer);
 80042ee:	463b      	mov	r3, r7
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fc03 	bl	8003afc <runDebugImplementation>
 80042f6:	e048      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_RELEASE, token_length))
 80042f8:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 80042fc:	463b      	mov	r3, r7
 80042fe:	4932      	ldr	r1, [pc, #200]	; (80043c8 <USBD_HandleCommands+0x1ac>)
 8004300:	4618      	mov	r0, r3
 8004302:	f014 f973 	bl	80185ec <memcmp>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <USBD_HandleCommands+0xfa>
		runReleaseImplementation(token_buffer);
 800430c:	463b      	mov	r3, r7
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fcd0 	bl	8003cb4 <runReleaseImplementation>
 8004314:	e039      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_LIST, token_length))
 8004316:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800431a:	463b      	mov	r3, r7
 800431c:	492b      	ldr	r1, [pc, #172]	; (80043cc <USBD_HandleCommands+0x1b0>)
 800431e:	4618      	mov	r0, r3
 8004320:	f014 f964 	bl	80185ec <memcmp>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <USBD_HandleCommands+0x114>
		showDirectory();
 800432a:	f7ff fe6b 	bl	8004004 <showDirectory>
 800432e:	e02c      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_UPLOAD, token_length))
 8004330:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8004334:	463b      	mov	r3, r7
 8004336:	4926      	ldr	r1, [pc, #152]	; (80043d0 <USBD_HandleCommands+0x1b4>)
 8004338:	4618      	mov	r0, r3
 800433a:	f014 f957 	bl	80185ec <memcmp>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <USBD_HandleCommands+0x132>
		fetchPuzzleInput(token_buffer);
 8004344:	463b      	mov	r3, r7
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fd90 	bl	8003e6c <fetchPuzzleInput>
 800434c:	e01d      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_DELETE, token_length))
 800434e:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8004352:	463b      	mov	r3, r7
 8004354:	491f      	ldr	r1, [pc, #124]	; (80043d4 <USBD_HandleCommands+0x1b8>)
 8004356:	4618      	mov	r0, r3
 8004358:	f014 f948 	bl	80185ec <memcmp>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <USBD_HandleCommands+0x150>
		deleteFile(token_buffer);
 8004362:	463b      	mov	r3, r7
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fe9f 	bl	80040a8 <deleteFile>
 800436a:	e00e      	b.n	800438a <USBD_HandleCommands+0x16e>
	else if(!memcmp(token_buffer[0], USB_COMMAND_HELP, token_length))
 800436c:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8004370:	463b      	mov	r3, r7
 8004372:	4919      	ldr	r1, [pc, #100]	; (80043d8 <USBD_HandleCommands+0x1bc>)
 8004374:	4618      	mov	r0, r3
 8004376:	f014 f939 	bl	80185ec <memcmp>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <USBD_HandleCommands+0x16a>
		showHelp();
 8004380:	f7ff feec 	bl	800415c <showHelp>
 8004384:	e001      	b.n	800438a <USBD_HandleCommands+0x16e>
	else
		invalidCommand();
 8004386:	f7ff ff27 	bl	80041d8 <invalidCommand>

	// print new cursor
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, ">", 1);
 800438a:	2201      	movs	r2, #1
 800438c:	4913      	ldr	r1, [pc, #76]	; (80043dc <USBD_HandleCommands+0x1c0>)
 800438e:	2002      	movs	r0, #2
 8004390:	f7fc fe04 	bl	8000f9c <AdventOfCode_print>

	// clear receive flag
	usb_rx_ready = 0;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <USBD_HandleCommands+0x194>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]

	// turn off led
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800439a:	2200      	movs	r2, #0
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	4805      	ldr	r0, [pc, #20]	; (80043b4 <USBD_HandleCommands+0x198>)
 80043a0:	f002 fa50 	bl	8006844 <HAL_GPIO_WritePin>
 80043a4:	e000      	b.n	80043a8 <USBD_HandleCommands+0x18c>
		return;
 80043a6:	bf00      	nop
}
 80043a8:	37cc      	adds	r7, #204	; 0xcc
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd90      	pop	{r4, r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000ee6 	.word	0x20000ee6
 80043b4:	40021800 	.word	0x40021800
 80043b8:	0801c0ec 	.word	0x0801c0ec
 80043bc:	20000ae4 	.word	0x20000ae4
 80043c0:	0801c0f0 	.word	0x0801c0f0
 80043c4:	0801c0f8 	.word	0x0801c0f8
 80043c8:	0801c100 	.word	0x0801c100
 80043cc:	0801c108 	.word	0x0801c108
 80043d0:	0801c110 	.word	0x0801c110
 80043d4:	0801c118 	.word	0x0801c118
 80043d8:	0801c120 	.word	0x0801c120
 80043dc:	0801c128 	.word	0x0801c128

080043e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b096      	sub	sp, #88	; 0x58
 80043e4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043e6:	f001 f8b4 	bl	8005552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ea:	f000 f897 	bl	800451c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ee:	f000 fae7 	bl	80049c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80043f2:	f000 fa55 	bl	80048a0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80043f6:	f000 f95f 	bl	80046b8 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 80043fa:	f012 ffef 	bl	80173dc <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 80043fe:	f013 fd9b 	bl	8017f38 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8004402:	f000 fa1d 	bl	8004840 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004406:	f000 f979 	bl	80046fc <MX_TIM1_Init>
  MX_TIM11_Init();
 800440a:	f000 f9cb 	bl	80047a4 <MX_TIM11_Init>
  MX_ADC1_Init();
 800440e:	f000 f8f3 	bl	80045f8 <MX_ADC1_Init>
  MX_FMC_Init();
 8004412:	f000 fa73 	bl	80048fc <MX_FMC_Init>
  MX_FATFS_Init();
 8004416:	f00c f809 	bl	801042c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	// wait for usb connection
	while(!usb_connected)
 800441a:	e003      	b.n	8004424 <main+0x44>
		HAL_Delay(500);
 800441c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004420:	f001 f8f4 	bl	800560c <HAL_Delay>
	while(!usb_connected)
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <main+0xcc>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f7      	beq.n	800441c <main+0x3c>

	// system startup
	System_init(&system_state);
 800442c:	4820      	ldr	r0, [pc, #128]	; (80044b0 <main+0xd0>)
 800442e:	f7ff f96a 	bl	8003706 <System_init>

	// system init terminal log
	System_initLog(&system_state);
 8004432:	481f      	ldr	r0, [pc, #124]	; (80044b0 <main+0xd0>)
 8004434:	f7ff f9cc 	bl	80037d0 <System_initLog>
	System_selfTestLog(&system_state);
 8004438:	481d      	ldr	r0, [pc, #116]	; (80044b0 <main+0xd0>)
 800443a:	f7ff f9e9 	bl	8003810 <System_selfTestLog>

	// init AOC
	AdventOfCode_init(&aoc,
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <main+0xd4>)
 8004440:	9315      	str	r3, [sp, #84]	; 0x54
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <main+0xd8>)
 8004444:	9314      	str	r3, [sp, #80]	; 0x50
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <main+0xdc>)
 8004448:	9313      	str	r3, [sp, #76]	; 0x4c
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <main+0xe0>)
 800444c:	9312      	str	r3, [sp, #72]	; 0x48
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <main+0xe4>)
 8004450:	9311      	str	r3, [sp, #68]	; 0x44
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <main+0xe8>)
 8004454:	9310      	str	r3, [sp, #64]	; 0x40
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <main+0xec>)
 8004458:	930f      	str	r3, [sp, #60]	; 0x3c
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <main+0xf0>)
 800445c:	930e      	str	r3, [sp, #56]	; 0x38
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <main+0xf4>)
 8004460:	930d      	str	r3, [sp, #52]	; 0x34
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <main+0xf8>)
 8004464:	930c      	str	r3, [sp, #48]	; 0x30
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <main+0xfc>)
 8004468:	930b      	str	r3, [sp, #44]	; 0x2c
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <main+0x100>)
 800446c:	930a      	str	r3, [sp, #40]	; 0x28
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <main+0x104>)
 8004470:	9309      	str	r3, [sp, #36]	; 0x24
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <main+0x108>)
 8004474:	9308      	str	r3, [sp, #32]
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <main+0x10c>)
 8004478:	9307      	str	r3, [sp, #28]
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <main+0x110>)
 800447c:	9306      	str	r3, [sp, #24]
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <main+0x114>)
 8004480:	9305      	str	r3, [sp, #20]
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <main+0x118>)
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <main+0x11c>)
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <main+0x120>)
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <main+0x124>)
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <main+0x128>)
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <main+0x12c>)
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <main+0x130>)
 800449a:	491e      	ldr	r1, [pc, #120]	; (8004514 <main+0x134>)
 800449c:	481e      	ldr	r0, [pc, #120]	; (8004518 <main+0x138>)
 800449e:	f7fc fd25 	bl	8000eec <AdventOfCode_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		USBD_HandleCommands();
 80044a2:	f7ff febb 	bl	800421c <USBD_HandleCommands>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80044a6:	f013 fd6d 	bl	8017f84 <MX_USB_HOST_Process>
		USBD_HandleCommands();
 80044aa:	e7fa      	b.n	80044a2 <main+0xc2>
 80044ac:	20000ee7 	.word	0x20000ee7
 80044b0:	20000678 	.word	0x20000678
 80044b4:	080036e5 	.word	0x080036e5
 80044b8:	080036c3 	.word	0x080036c3
 80044bc:	080036a1 	.word	0x080036a1
 80044c0:	0800367f 	.word	0x0800367f
 80044c4:	0800365d 	.word	0x0800365d
 80044c8:	0800363b 	.word	0x0800363b
 80044cc:	08003619 	.word	0x08003619
 80044d0:	080035f7 	.word	0x080035f7
 80044d4:	080035d5 	.word	0x080035d5
 80044d8:	080035b3 	.word	0x080035b3
 80044dc:	08003591 	.word	0x08003591
 80044e0:	0800356f 	.word	0x0800356f
 80044e4:	0800354d 	.word	0x0800354d
 80044e8:	0800352b 	.word	0x0800352b
 80044ec:	08003509 	.word	0x08003509
 80044f0:	080034e7 	.word	0x080034e7
 80044f4:	080034c5 	.word	0x080034c5
 80044f8:	080034a3 	.word	0x080034a3
 80044fc:	08003481 	.word	0x08003481
 8004500:	0800345f 	.word	0x0800345f
 8004504:	0800343d 	.word	0x0800343d
 8004508:	08002ba1 	.word	0x08002ba1
 800450c:	08001a59 	.word	0x08001a59
 8004510:	0800143d 	.word	0x0800143d
 8004514:	08000fe9 	.word	0x08000fe9
 8004518:	20000ee8 	.word	0x20000ee8

0800451c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b094      	sub	sp, #80	; 0x50
 8004520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004522:	f107 0320 	add.w	r3, r7, #32
 8004526:	2230      	movs	r2, #48	; 0x30
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f014 f87c 	bl	8018628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004540:	f005 f9a6 	bl	8009890 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <SystemClock_Config+0xd4>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <SystemClock_Config+0xd4>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	6413      	str	r3, [r2, #64]	; 0x40
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <SystemClock_Config+0xd4>)
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <SystemClock_Config+0xd8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <SystemClock_Config+0xd8>)
 8004562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <SystemClock_Config+0xd8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004574:	2301      	movs	r3, #1
 8004576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800457e:	2302      	movs	r3, #2
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004588:	2308      	movs	r3, #8
 800458a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800458c:	23d8      	movs	r3, #216	; 0xd8
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004590:	2302      	movs	r3, #2
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004594:	2309      	movs	r3, #9
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	4618      	mov	r0, r3
 800459e:	f005 f9d7 	bl	8009950 <HAL_RCC_OscConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80045a8:	f000 fb3c 	bl	8004c24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045ac:	f005 f980 	bl	80098b0 <HAL_PWREx_EnableOverDrive>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80045b6:	f000 fb35 	bl	8004c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045ba:	230f      	movs	r3, #15
 80045bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045be:	2302      	movs	r3, #2
 80045c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	2107      	movs	r1, #7
 80045d8:	4618      	mov	r0, r3
 80045da:	f005 fc5d 	bl	8009e98 <HAL_RCC_ClockConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80045e4:	f000 fb1e 	bl	8004c24 <Error_Handler>
  }
}
 80045e8:	bf00      	nop
 80045ea:	3750      	adds	r7, #80	; 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000

080045f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045fe:	463b      	mov	r3, r7
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800460a:	4b28      	ldr	r3, [pc, #160]	; (80046ac <MX_ADC1_Init+0xb4>)
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <MX_ADC1_Init+0xb8>)
 800460e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004610:	4b26      	ldr	r3, [pc, #152]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004612:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <MX_ADC1_Init+0xb4>)
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004620:	2201      	movs	r2, #1
 8004622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004624:	4b21      	ldr	r3, [pc, #132]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004626:	2201      	movs	r2, #1
 8004628:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <MX_ADC1_Init+0xb4>)
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004634:	2200      	movs	r2, #0
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <MX_ADC1_Init+0xb4>)
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <MX_ADC1_Init+0xbc>)
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004646:	2202      	movs	r2, #2
 8004648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <MX_ADC1_Init+0xb4>)
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004654:	2201      	movs	r2, #1
 8004656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004658:	4814      	ldr	r0, [pc, #80]	; (80046ac <MX_ADC1_Init+0xb4>)
 800465a:	f000 fffb 	bl	8005654 <HAL_ADC_Init>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004664:	f000 fade 	bl	8004c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004668:	2300      	movs	r3, #0
 800466a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800466c:	2301      	movs	r3, #1
 800466e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004670:	2306      	movs	r3, #6
 8004672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004674:	463b      	mov	r3, r7
 8004676:	4619      	mov	r1, r3
 8004678:	480c      	ldr	r0, [pc, #48]	; (80046ac <MX_ADC1_Init+0xb4>)
 800467a:	f001 f82f 	bl	80056dc <HAL_ADC_ConfigChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004684:	f000 face 	bl	8004c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004688:	2302      	movs	r3, #2
 800468a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800468c:	2302      	movs	r3, #2
 800468e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004690:	463b      	mov	r3, r7
 8004692:	4619      	mov	r1, r3
 8004694:	4805      	ldr	r0, [pc, #20]	; (80046ac <MX_ADC1_Init+0xb4>)
 8004696:	f001 f821 	bl	80056dc <HAL_ADC_ConfigChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80046a0:	f000 fac0 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000320 	.word	0x20000320
 80046b0:	40012000 	.word	0x40012000
 80046b4:	0f000001 	.word	0x0f000001

080046b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <MX_SDMMC1_SD_Init+0x40>)
 80046c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046e4:	2204      	movs	r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <MX_SDMMC1_SD_Init+0x3c>)
 80046ea:	f006 f9b1 	bl	800aa50 <HAL_SD_Init>
  /* USER CODE END SDMMC1_Init 2 */

}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200003c8 	.word	0x200003c8
 80046f8:	40012c00 	.word	0x40012c00

080046fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004702:	f107 0310 	add.w	r3, r7, #16
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <MX_TIM1_Init+0xa0>)
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <MX_TIM1_Init+0xa4>)
 800471e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <MX_TIM1_Init+0xa0>)
 8004722:	2200      	movs	r2, #0
 8004724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <MX_TIM1_Init+0xa0>)
 8004728:	2200      	movs	r2, #0
 800472a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <MX_TIM1_Init+0xa0>)
 800472e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <MX_TIM1_Init+0xa0>)
 8004736:	2200      	movs	r2, #0
 8004738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <MX_TIM1_Init+0xa0>)
 800473c:	2200      	movs	r2, #0
 800473e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004740:	4b16      	ldr	r3, [pc, #88]	; (800479c <MX_TIM1_Init+0xa0>)
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004746:	4815      	ldr	r0, [pc, #84]	; (800479c <MX_TIM1_Init+0xa0>)
 8004748:	f007 faf2 	bl	800bd30 <HAL_TIM_Base_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004752:	f000 fa67 	bl	8004c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	4619      	mov	r1, r3
 8004762:	480e      	ldr	r0, [pc, #56]	; (800479c <MX_TIM1_Init+0xa0>)
 8004764:	f007 fcb0 	bl	800c0c8 <HAL_TIM_ConfigClockSource>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800476e:	f000 fa59 	bl	8004c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4806      	ldr	r0, [pc, #24]	; (800479c <MX_TIM1_Init+0xa0>)
 8004784:	f008 f902 	bl	800c98c <HAL_TIMEx_MasterConfigSynchronization>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800478e:	f000 fa49 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004792:	bf00      	nop
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000050c 	.word	0x2000050c
 80047a0:	40010000 	.word	0x40010000

080047a4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
 80047b8:	615a      	str	r2, [r3, #20]
 80047ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <MX_TIM11_Init+0x94>)
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <MX_TIM11_Init+0x98>)
 80047c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80047c2:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <MX_TIM11_Init+0x94>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <MX_TIM11_Init+0x94>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <MX_TIM11_Init+0x94>)
 80047d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <MX_TIM11_Init+0x94>)
 80047d8:	2200      	movs	r2, #0
 80047da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047dc:	4b16      	ldr	r3, [pc, #88]	; (8004838 <MX_TIM11_Init+0x94>)
 80047de:	2200      	movs	r2, #0
 80047e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80047e2:	4815      	ldr	r0, [pc, #84]	; (8004838 <MX_TIM11_Init+0x94>)
 80047e4:	f007 faa4 	bl	800bd30 <HAL_TIM_Base_Init>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80047ee:	f000 fa19 	bl	8004c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80047f2:	4811      	ldr	r0, [pc, #68]	; (8004838 <MX_TIM11_Init+0x94>)
 80047f4:	f007 faf3 	bl	800bdde <HAL_TIM_PWM_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80047fe:	f000 fa11 	bl	8004c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004802:	2360      	movs	r3, #96	; 0x60
 8004804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	2200      	movs	r2, #0
 8004816:	4619      	mov	r1, r3
 8004818:	4807      	ldr	r0, [pc, #28]	; (8004838 <MX_TIM11_Init+0x94>)
 800481a:	f007 fb41 	bl	800bea0 <HAL_TIM_PWM_ConfigChannel>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004824:	f000 f9fe 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004828:	4803      	ldr	r0, [pc, #12]	; (8004838 <MX_TIM11_Init+0x94>)
 800482a:	f000 fc1d 	bl	8005068 <HAL_TIM_MspPostInit>

}
 800482e:	bf00      	nop
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000558 	.word	0x20000558
 800483c:	40014800 	.word	0x40014800

08004840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <MX_USART1_UART_Init+0x5c>)
 8004848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <MX_USART1_UART_Init+0x58>)
 800484c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <MX_USART1_UART_Init+0x58>)
 800485a:	2200      	movs	r2, #0
 800485c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004860:	2200      	movs	r2, #0
 8004862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004866:	220c      	movs	r2, #12
 8004868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <MX_USART1_UART_Init+0x58>)
 800486c:	2200      	movs	r2, #0
 800486e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004872:	2200      	movs	r2, #0
 8004874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004878:	2200      	movs	r2, #0
 800487a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <MX_USART1_UART_Init+0x58>)
 800487e:	2200      	movs	r2, #0
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <MX_USART1_UART_Init+0x58>)
 8004884:	f008 f910 	bl	800caa8 <HAL_UART_Init>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800488e:	f000 f9c9 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200005a4 	.word	0x200005a4
 800489c:	40011000 	.word	0x40011000

080048a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <MX_DMA_Init+0x58>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <MX_DMA_Init+0x58>)
 80048ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048b0:	6313      	str	r3, [r2, #48]	; 0x30
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <MX_DMA_Init+0x58>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	2038      	movs	r0, #56	; 0x38
 80048c4:	f001 fa35 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80048c8:	2038      	movs	r0, #56	; 0x38
 80048ca:	f001 fa4e 	bl	8005d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	203b      	movs	r0, #59	; 0x3b
 80048d4:	f001 fa2d 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80048d8:	203b      	movs	r0, #59	; 0x3b
 80048da:	f001 fa46 	bl	8005d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	2045      	movs	r0, #69	; 0x45
 80048e4:	f001 fa25 	bl	8005d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80048e8:	2045      	movs	r0, #69	; 0x45
 80048ea:	f001 fa3e 	bl	8005d6a <HAL_NVIC_EnableIRQ>

}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
 8004910:	615a      	str	r2, [r3, #20]
 8004912:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8004914:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004916:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800491a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <MX_FMC_Init+0xbc>)
 800491e:	4a27      	ldr	r2, [pc, #156]	; (80049bc <MX_FMC_Init+0xc0>)
 8004920:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8004922:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <MX_FMC_Init+0xbc>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 800492e:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004930:	2204      	movs	r2, #4
 8004932:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004934:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004936:	2210      	movs	r2, #16
 8004938:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800493a:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <MX_FMC_Init+0xbc>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004942:	2200      	movs	r2, #0
 8004944:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004948:	2200      	movs	r2, #0
 800494a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800494c:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <MX_FMC_Init+0xbc>)
 800494e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004952:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004956:	2200      	movs	r2, #0
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <MX_FMC_Init+0xbc>)
 800495c:	2200      	movs	r2, #0
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004968:	2200      	movs	r2, #0
 800496a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <MX_FMC_Init+0xbc>)
 800496e:	2200      	movs	r2, #0
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <MX_FMC_Init+0xbc>)
 8004974:	2200      	movs	r2, #0
 8004976:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <MX_FMC_Init+0xbc>)
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 800497e:	2305      	movs	r3, #5
 8004980:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004982:	230f      	movs	r3, #15
 8004984:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 8004986:	2308      	movs	r3, #8
 8004988:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 800498a:	2302      	movs	r3, #2
 800498c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800498e:	2310      	movs	r3, #16
 8004990:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004992:	2311      	movs	r3, #17
 8004994:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	2200      	movs	r2, #0
 800499e:	4619      	mov	r1, r3
 80049a0:	4805      	ldr	r0, [pc, #20]	; (80049b8 <MX_FMC_Init+0xbc>)
 80049a2:	f007 f97d 	bl	800bca0 <HAL_SRAM_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80049ac:	f000 f93a 	bl	8004c24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80049b0:	bf00      	nop
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000062c 	.word	0x2000062c
 80049bc:	a0000104 	.word	0xa0000104

080049c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049d6:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	4a8a      	ldr	r2, [pc, #552]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	6313      	str	r3, [r2, #48]	; 0x30
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a84      	ldr	r2, [pc, #528]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <MX_GPIO_Init+0x244>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a06:	4b7f      	ldr	r3, [pc, #508]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4a7e      	ldr	r2, [pc, #504]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b7c      	ldr	r3, [pc, #496]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a1e:	4b79      	ldr	r3, [pc, #484]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a78      	ldr	r2, [pc, #480]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a36:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	6313      	str	r3, [r2, #48]	; 0x30
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4e:	4b6d      	ldr	r3, [pc, #436]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a6c      	ldr	r2, [pc, #432]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5a:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a66:	4b67      	ldr	r3, [pc, #412]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a66      	ldr	r2, [pc, #408]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a7e:	4b61      	ldr	r3, [pc, #388]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a60      	ldr	r2, [pc, #384]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b5e      	ldr	r3, [pc, #376]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a96:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a5a      	ldr	r2, [pc, #360]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa2:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <MX_GPIO_Init+0x244>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ab4:	4854      	ldr	r0, [pc, #336]	; (8004c08 <MX_GPIO_Init+0x248>)
 8004ab6:	f001 fec5 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2104      	movs	r1, #4
 8004abe:	4853      	ldr	r0, [pc, #332]	; (8004c0c <MX_GPIO_Init+0x24c>)
 8004ac0:	f001 fec0 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2140      	movs	r1, #64	; 0x40
 8004ac8:	4851      	ldr	r0, [pc, #324]	; (8004c10 <MX_GPIO_Init+0x250>)
 8004aca:	f001 febb 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	21c0      	movs	r1, #192	; 0xc0
 8004ad2:	4850      	ldr	r0, [pc, #320]	; (8004c14 <MX_GPIO_Init+0x254>)
 8004ad4:	f001 feb6 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8004ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aee:	4619      	mov	r1, r3
 8004af0:	4845      	ldr	r0, [pc, #276]	; (8004c08 <MX_GPIO_Init+0x248>)
 8004af2:	f001 fcfb 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 8004af6:	f643 4333 	movw	r3, #15411	; 0x3c33
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b08:	4619      	mov	r1, r3
 8004b0a:	483f      	ldr	r0, [pc, #252]	; (8004c08 <MX_GPIO_Init+0x248>)
 8004b0c:	f001 fcee 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8004b10:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b22:	4619      	mov	r1, r3
 8004b24:	483b      	ldr	r0, [pc, #236]	; (8004c14 <MX_GPIO_Init+0x254>)
 8004b26:	f001 fce1 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 8004b2a:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b30:	2300      	movs	r3, #0
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4836      	ldr	r0, [pc, #216]	; (8004c18 <MX_GPIO_Init+0x258>)
 8004b40:	f001 fcd4 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b54:	4619      	mov	r1, r3
 8004b56:	4831      	ldr	r0, [pc, #196]	; (8004c1c <MX_GPIO_Init+0x25c>)
 8004b58:	f001 fcc8 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4827      	ldr	r0, [pc, #156]	; (8004c0c <MX_GPIO_Init+0x24c>)
 8004b70:	f001 fcbc 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_HOST_VBUF_Pin */
  GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 8004b74:	2304      	movs	r3, #4
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 8004b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4820      	ldr	r0, [pc, #128]	; (8004c0c <MX_GPIO_Init+0x24c>)
 8004b8c:	f001 fcae 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8004b90:	23a0      	movs	r3, #160	; 0xa0
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b94:	2300      	movs	r3, #0
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	481b      	ldr	r0, [pc, #108]	; (8004c10 <MX_GPIO_Init+0x250>)
 8004ba4:	f001 fca2 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bac:	2301      	movs	r3, #1
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8004bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4814      	ldr	r0, [pc, #80]	; (8004c10 <MX_GPIO_Init+0x250>)
 8004bc0:	f001 fc94 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8004bc4:	23c0      	movs	r3, #192	; 0xc0
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd8:	4619      	mov	r1, r3
 8004bda:	480e      	ldr	r0, [pc, #56]	; (8004c14 <MX_GPIO_Init+0x254>)
 8004bdc:	f001 fc86 	bl	80064ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	480a      	ldr	r0, [pc, #40]	; (8004c20 <MX_GPIO_Init+0x260>)
 8004bf6:	f001 fc79 	bl	80064ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bfa:	bf00      	nop
 8004bfc:	3738      	adds	r7, #56	; 0x38
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40020800 	.word	0x40020800
 8004c14:	40021800 	.word	0x40021800
 8004c18:	40020000 	.word	0x40020000
 8004c1c:	40020c00 	.word	0x40020c00
 8004c20:	40021400 	.word	0x40021400

08004c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c2a:	b672      	cpsid	i
}
 8004c2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2140      	movs	r1, #64	; 0x40
 8004c32:	481c      	ldr	r0, [pc, #112]	; (8004ca4 <Error_Handler+0x80>)
 8004c34:	f001 fe06 	bl	8006844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	4819      	ldr	r0, [pc, #100]	; (8004ca4 <Error_Handler+0x80>)
 8004c3e:	f001 fe01 	bl	8006844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2140      	movs	r1, #64	; 0x40
 8004c46:	4818      	ldr	r0, [pc, #96]	; (8004ca8 <Error_Handler+0x84>)
 8004c48:	f001 fdfc 	bl	8006844 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 8004c4c:	4b17      	ldr	r3, [pc, #92]	; (8004cac <Error_Handler+0x88>)
 8004c4e:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d010      	beq.n	8004c78 <Error_Handler+0x54>
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	dc17      	bgt.n	8004c8a <Error_Handler+0x66>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <Error_Handler+0x40>
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d005      	beq.n	8004c6e <Error_Handler+0x4a>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8004c62:	e012      	b.n	8004c8a <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004c64:	2140      	movs	r1, #64	; 0x40
 8004c66:	480f      	ldr	r0, [pc, #60]	; (8004ca4 <Error_Handler+0x80>)
 8004c68:	f001 fe05 	bl	8006876 <HAL_GPIO_TogglePin>
			break;
 8004c6c:	e00e      	b.n	8004c8c <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <Error_Handler+0x80>)
 8004c72:	f001 fe00 	bl	8006876 <HAL_GPIO_TogglePin>
			break;
 8004c76:	e009      	b.n	8004c8c <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004c78:	2140      	movs	r1, #64	; 0x40
 8004c7a:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <Error_Handler+0x80>)
 8004c7c:	f001 fdfb 	bl	8006876 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <Error_Handler+0x80>)
 8004c84:	f001 fdf7 	bl	8006876 <HAL_GPIO_TogglePin>
			break;
 8004c88:	e000      	b.n	8004c8c <Error_Handler+0x68>
			break;
 8004c8a:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e002      	b.n	8004c98 <Error_Handler+0x74>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3301      	adds	r3, #1
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <Error_Handler+0x8c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d9f8      	bls.n	8004c92 <Error_Handler+0x6e>
		switch(system_state.error)
 8004ca0:	e7d4      	b.n	8004c4c <Error_Handler+0x28>
 8004ca2:	bf00      	nop
 8004ca4:	40021800 	.word	0x40021800
 8004ca8:	40020800 	.word	0x40020800
 8004cac:	20000678 	.word	0x20000678
 8004cb0:	001e847f 	.word	0x001e847f

08004cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_MspInit+0x44>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <HAL_MspInit+0x44>)
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_MspInit+0x44>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_MspInit+0x44>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <HAL_MspInit+0x44>)
 8004cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_MspInit+0x44>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2d      	ldr	r2, [pc, #180]	; (8004dd0 <HAL_ADC_MspInit+0xd4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d153      	bne.n	8004dc6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2a:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6313      	str	r3, [r2, #48]	; 0x30
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_ADC_MspInit+0xd8>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004d4e:	2305      	movs	r3, #5
 8004d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d52:	2303      	movs	r3, #3
 8004d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5a:	f107 0314 	add.w	r3, r7, #20
 8004d5e:	4619      	mov	r1, r3
 8004d60:	481d      	ldr	r0, [pc, #116]	; (8004dd8 <HAL_ADC_MspInit+0xdc>)
 8004d62:	f001 fbc3 	bl	80064ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_ADC_MspInit+0xe4>)
 8004d6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004da4:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004daa:	480c      	ldr	r0, [pc, #48]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004dac:	f000 fff8 	bl	8005da0 <HAL_DMA_Init>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8004db6:	f7ff ff35 	bl	8004c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004dc0:	4a06      	ldr	r2, [pc, #24]	; (8004ddc <HAL_ADC_MspInit+0xe0>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004dc6:	bf00      	nop
 8004dc8:	3728      	adds	r7, #40	; 0x28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40012000 	.word	0x40012000
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40020000 	.word	0x40020000
 8004ddc:	20000368 	.word	0x20000368
 8004de0:	40026410 	.word	0x40026410

08004de4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b0ac      	sub	sp, #176	; 0xb0
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dfc:	f107 0318 	add.w	r3, r7, #24
 8004e00:	2284      	movs	r2, #132	; 0x84
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f013 fc0f 	bl	8018628 <memset>
  if(hsd->Instance==SDMMC1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a74      	ldr	r2, [pc, #464]	; (8004fe0 <HAL_SD_MspInit+0x1fc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	f040 80e0 	bne.w	8004fd6 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8004e16:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8004e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e28:	f107 0318 	add.w	r3, r7, #24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 fa57 	bl	800a2e0 <HAL_RCCEx_PeriphCLKConfig>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8004e38:	f7ff fef4 	bl	8004c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004e3c:	4b69      	ldr	r3, [pc, #420]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	4a68      	ldr	r2, [pc, #416]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e46:	6453      	str	r3, [r2, #68]	; 0x44
 8004e48:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e54:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	4a62      	ldr	r2, [pc, #392]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e60:	4b60      	ldr	r3, [pc, #384]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e6c:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	4a5c      	ldr	r2, [pc, #368]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e72:	f043 0308 	orr.w	r3, r3, #8
 8004e76:	6313      	str	r3, [r2, #48]	; 0x30
 8004e78:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <HAL_SD_MspInit+0x200>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8004e84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ea4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	484f      	ldr	r0, [pc, #316]	; (8004fe8 <HAL_SD_MspInit+0x204>)
 8004eac:	f001 fb1e 	bl	80064ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004ec8:	230c      	movs	r3, #12
 8004eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4845      	ldr	r0, [pc, #276]	; (8004fec <HAL_SD_MspInit+0x208>)
 8004ed6:	f001 fb09 	bl	80064ec <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004eda:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004edc:	4a45      	ldr	r2, [pc, #276]	; (8004ff4 <HAL_SD_MspInit+0x210>)
 8004ede:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ee6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ee8:	4b41      	ldr	r3, [pc, #260]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ef4:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f02:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f04:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f0a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004f0c:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f0e:	2220      	movs	r2, #32
 8004f10:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f18:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f1e:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f20:	2203      	movs	r2, #3
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004f34:	482e      	ldr	r0, [pc, #184]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f36:	f000 ff33 	bl	8005da0 <HAL_DMA_Init>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8004f40:	f7ff fe70 	bl	8004c24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
 8004f4a:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <HAL_SD_MspInit+0x20c>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f52:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <HAL_SD_MspInit+0x218>)
 8004f54:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004f56:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f5c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f60:	2240      	movs	r2, #64	; 0x40
 8004f62:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f64:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f70:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f78:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f80:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004f82:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f84:	2220      	movs	r2, #32
 8004f86:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f90:	2204      	movs	r2, #4
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f96:	2203      	movs	r2, #3
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004f9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004fa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004faa:	4813      	ldr	r0, [pc, #76]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004fac:	f000 fef8 	bl	8005da0 <HAL_DMA_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8004fb6:	f7ff fe35 	bl	8004c24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fc0:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <HAL_SD_MspInit+0x214>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	2031      	movs	r0, #49	; 0x31
 8004fcc:	f000 feb1 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004fd0:	2031      	movs	r0, #49	; 0x31
 8004fd2:	f000 feca 	bl	8005d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004fd6:	bf00      	nop
 8004fd8:	37b0      	adds	r7, #176	; 0xb0
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020c00 	.word	0x40020c00
 8004ff0:	2000044c 	.word	0x2000044c
 8004ff4:	40026458 	.word	0x40026458
 8004ff8:	200004ac 	.word	0x200004ac
 8004ffc:	400264a0 	.word	0x400264a0

08005000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <HAL_TIM_Base_MspInit+0x5c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10c      	bne.n	800502c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6453      	str	r3, [r2, #68]	; 0x44
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800502a:	e010      	b.n	800504e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <HAL_TIM_Base_MspInit+0x64>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10b      	bne.n	800504e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 800503c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005040:	6453      	str	r3, [r2, #68]	; 0x44
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_TIM_Base_MspInit+0x60>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40023800 	.word	0x40023800
 8005064:	40014800 	.word	0x40014800

08005068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a11      	ldr	r2, [pc, #68]	; (80050cc <HAL_TIM_MspPostInit+0x64>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d11b      	bne.n	80050c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_TIM_MspPostInit+0x68>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <HAL_TIM_MspPostInit+0x68>)
 8005090:	f043 0320 	orr.w	r3, r3, #32
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_TIM_MspPostInit+0x68>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80050b2:	2303      	movs	r3, #3
 80050b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	4619      	mov	r1, r3
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <HAL_TIM_MspPostInit+0x6c>)
 80050be:	f001 fa15 	bl	80064ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80050c2:	bf00      	nop
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40014800 	.word	0x40014800
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40021400 	.word	0x40021400

080050d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b0aa      	sub	sp, #168	; 0xa8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050f0:	f107 0310 	add.w	r3, r7, #16
 80050f4:	2284      	movs	r2, #132	; 0x84
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f013 fa95 	bl	8018628 <memset>
  if(huart->Instance==USART1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a21      	ldr	r2, [pc, #132]	; (8005188 <HAL_UART_MspInit+0xb0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d13a      	bne.n	800517e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800510c:	2300      	movs	r3, #0
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	4618      	mov	r0, r3
 8005116:	f005 f8e3 	bl	800a2e0 <HAL_RCCEx_PeriphCLKConfig>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005120:	f7ff fd80 	bl	8004c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_UART_MspInit+0xb4>)
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_UART_MspInit+0xb4>)
 800512a:	f043 0310 	orr.w	r3, r3, #16
 800512e:	6453      	str	r3, [r2, #68]	; 0x44
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_UART_MspInit+0xb4>)
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_UART_MspInit+0xb4>)
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_UART_MspInit+0xb4>)
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	6313      	str	r3, [r2, #48]	; 0x30
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_UART_MspInit+0xb4>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8005154:	23c0      	movs	r3, #192	; 0xc0
 8005156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515a:	2302      	movs	r3, #2
 800515c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005166:	2303      	movs	r3, #3
 8005168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800516c:	2307      	movs	r3, #7
 800516e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005172:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005176:	4619      	mov	r1, r3
 8005178:	4805      	ldr	r0, [pc, #20]	; (8005190 <HAL_UART_MspInit+0xb8>)
 800517a:	f001 f9b7 	bl	80064ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800517e:	bf00      	nop
 8005180:	37a8      	adds	r7, #168	; 0xa8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40011000 	.word	0x40011000
 800518c:	40023800 	.word	0x40023800
 8005190:	40020400 	.word	0x40020400

08005194 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80051a8:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_FMC_MspInit+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d14e      	bne.n	800524e <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 80051b0:	4b29      	ldr	r3, [pc, #164]	; (8005258 <HAL_FMC_MspInit+0xc4>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80051b6:	4b29      	ldr	r3, [pc, #164]	; (800525c <HAL_FMC_MspInit+0xc8>)
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	4a28      	ldr	r2, [pc, #160]	; (800525c <HAL_FMC_MspInit+0xc8>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6393      	str	r3, [r2, #56]	; 0x38
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <HAL_FMC_MspInit+0xc8>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 80051ce:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 80051d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051dc:	2303      	movs	r3, #3
 80051de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051e0:	230c      	movs	r3, #12
 80051e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	481d      	ldr	r0, [pc, #116]	; (8005260 <HAL_FMC_MspInit+0xcc>)
 80051ea:	f001 f97f 	bl	80064ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 80051ee:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80051f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fc:	2303      	movs	r3, #3
 80051fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005200:	230c      	movs	r3, #12
 8005202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4816      	ldr	r0, [pc, #88]	; (8005264 <HAL_FMC_MspInit+0xd0>)
 800520a:	f001 f96f 	bl	80064ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 800520e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8005212:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005214:	2302      	movs	r3, #2
 8005216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521c:	2303      	movs	r3, #3
 800521e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005220:	230c      	movs	r3, #12
 8005222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	4619      	mov	r1, r3
 8005228:	480f      	ldr	r0, [pc, #60]	; (8005268 <HAL_FMC_MspInit+0xd4>)
 800522a:	f001 f95f 	bl	80064ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 800522e:	233f      	movs	r3, #63	; 0x3f
 8005230:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005232:	2302      	movs	r3, #2
 8005234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523a:	2303      	movs	r3, #3
 800523c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800523e:	230c      	movs	r3, #12
 8005240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4809      	ldr	r0, [pc, #36]	; (800526c <HAL_FMC_MspInit+0xd8>)
 8005248:	f001 f950 	bl	80064ec <HAL_GPIO_Init>
 800524c:	e000      	b.n	8005250 <HAL_FMC_MspInit+0xbc>
    return;
 800524e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000f4c 	.word	0x20000f4c
 800525c:	40023800 	.word	0x40023800
 8005260:	40021000 	.word	0x40021000
 8005264:	40020c00 	.word	0x40020c00
 8005268:	40021400 	.word	0x40021400
 800526c:	40021800 	.word	0x40021800

08005270 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005278:	f7ff ff8c 	bl	8005194 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005288:	e7fe      	b.n	8005288 <NMI_Handler+0x4>

0800528a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800528e:	e7fe      	b.n	800528e <HardFault_Handler+0x4>

08005290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005294:	e7fe      	b.n	8005294 <MemManage_Handler+0x4>

08005296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800529a:	e7fe      	b.n	800529a <BusFault_Handler+0x4>

0800529c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052a0:	e7fe      	b.n	80052a0 <UsageFault_Handler+0x4>

080052a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052d0:	f000 f97c 	bl	80055cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80052dc:	4802      	ldr	r0, [pc, #8]	; (80052e8 <SDMMC1_IRQHandler+0x10>)
 80052de:	f005 fe37 	bl	800af50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200003c8 	.word	0x200003c8

080052ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052f0:	4802      	ldr	r0, [pc, #8]	; (80052fc <DMA2_Stream0_IRQHandler+0x10>)
 80052f2:	f000 fe85 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000368 	.word	0x20000368

08005300 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005304:	4802      	ldr	r0, [pc, #8]	; (8005310 <DMA2_Stream3_IRQHandler+0x10>)
 8005306:	f000 fe7b 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	2000044c 	.word	0x2000044c

08005314 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005318:	4802      	ldr	r0, [pc, #8]	; (8005324 <OTG_FS_IRQHandler+0x10>)
 800531a:	f001 fd31 	bl	8006d80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20002d60 	.word	0x20002d60

08005328 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800532c:	4802      	ldr	r0, [pc, #8]	; (8005338 <DMA2_Stream6_IRQHandler+0x10>)
 800532e:	f000 fe67 	bl	8006000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200004ac 	.word	0x200004ac

0800533c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8005340:	4802      	ldr	r0, [pc, #8]	; (800534c <OTG_HS_IRQHandler+0x10>)
 8005342:	f003 f933 	bl	80085ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2000247c 	.word	0x2000247c

08005350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return 1;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <_kill>:

int _kill(int pid, int sig)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800536a:	f013 f905 	bl	8018578 <__errno>
 800536e:	4603      	mov	r3, r0
 8005370:	2216      	movs	r2, #22
 8005372:	601a      	str	r2, [r3, #0]
  return -1;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_exit>:

void _exit (int status)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005388:	f04f 31ff 	mov.w	r1, #4294967295
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ffe7 	bl	8005360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005392:	e7fe      	b.n	8005392 <_exit+0x12>

08005394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e00a      	b.n	80053bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053a6:	f3af 8000 	nop.w
 80053aa:	4601      	mov	r1, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	60ba      	str	r2, [r7, #8]
 80053b2:	b2ca      	uxtb	r2, r1
 80053b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	3301      	adds	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dbf0      	blt.n	80053a6 <_read+0x12>
  }

  return len;
 80053c4:	687b      	ldr	r3, [r7, #4]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e009      	b.n	80053f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	60ba      	str	r2, [r7, #8]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3301      	adds	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	dbf1      	blt.n	80053e0 <_write+0x12>
  }
  return len;
 80053fc:	687b      	ldr	r3, [r7, #4]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_close>:

int _close(int file)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800540e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800542e:	605a      	str	r2, [r3, #4]
  return 0;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_isatty>:

int _isatty(int file)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005446:	2301      	movs	r3, #1
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005478:	4a14      	ldr	r2, [pc, #80]	; (80054cc <_sbrk+0x5c>)
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <_sbrk+0x60>)
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005484:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <_sbrk+0x64>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <_sbrk+0x64>)
 800548e:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <_sbrk+0x68>)
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <_sbrk+0x64>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d207      	bcs.n	80054b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054a0:	f013 f86a 	bl	8018578 <__errno>
 80054a4:	4603      	mov	r3, r0
 80054a6:	220c      	movs	r2, #12
 80054a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	e009      	b.n	80054c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <_sbrk+0x64>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <_sbrk+0x64>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <_sbrk+0x64>)
 80054c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20050000 	.word	0x20050000
 80054d0:	00000400 	.word	0x00000400
 80054d4:	20000f50 	.word	0x20000f50
 80054d8:	20003078 	.word	0x20003078

080054dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <SystemInit+0x20>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	4a05      	ldr	r2, [pc, #20]	; (80054fc <SystemInit+0x20>)
 80054e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005504:	480d      	ldr	r0, [pc, #52]	; (800553c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005506:	490e      	ldr	r1, [pc, #56]	; (8005540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005508:	4a0e      	ldr	r2, [pc, #56]	; (8005544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800550a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800550c:	e002      	b.n	8005514 <LoopCopyDataInit>

0800550e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800550e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005512:	3304      	adds	r3, #4

08005514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005518:	d3f9      	bcc.n	800550e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800551a:	4a0b      	ldr	r2, [pc, #44]	; (8005548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800551c:	4c0b      	ldr	r4, [pc, #44]	; (800554c <LoopFillZerobss+0x26>)
  movs r3, #0
 800551e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005520:	e001      	b.n	8005526 <LoopFillZerobss>

08005522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005524:	3204      	adds	r2, #4

08005526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005528:	d3fb      	bcc.n	8005522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800552a:	f7ff ffd7 	bl	80054dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800552e:	f013 f829 	bl	8018584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005532:	f7fe ff55 	bl	80043e0 <main>
  bx  lr    
 8005536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005538:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800553c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005540:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8005544:	0801c6bc 	.word	0x0801c6bc
  ldr r2, =_sbss
 8005548:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 800554c:	20003074 	.word	0x20003074

08005550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005550:	e7fe      	b.n	8005550 <ADC_IRQHandler>

08005552 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005556:	2003      	movs	r0, #3
 8005558:	f000 fbe0 	bl	8005d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800555c:	200f      	movs	r0, #15
 800555e:	f000 f805 	bl	800556c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005562:	f7ff fba7 	bl	8004cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <HAL_InitTick+0x54>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <HAL_InitTick+0x58>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005582:	fbb3 f3f1 	udiv	r3, r3, r1
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fbfb 	bl	8005d86 <HAL_SYSTICK_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00e      	b.n	80055b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b0f      	cmp	r3, #15
 800559e:	d80a      	bhi.n	80055b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055a0:	2200      	movs	r2, #0
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	f000 fbc3 	bl	8005d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055ac:	4a06      	ldr	r2, [pc, #24]	; (80055c8 <HAL_InitTick+0x5c>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e000      	b.n	80055b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20000004 	.word	0x20000004
 80055c4:	2000000c 	.word	0x2000000c
 80055c8:	20000008 	.word	0x20000008

080055cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_IncTick+0x20>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_IncTick+0x24>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4413      	add	r3, r2
 80055dc:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <HAL_IncTick+0x24>)
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	20000f54 	.word	0x20000f54

080055f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return uwTick;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_GetTick+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000f54 	.word	0x20000f54

0800560c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7ff ffee 	bl	80055f4 <HAL_GetTick>
 8005618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d005      	beq.n	8005632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <HAL_Delay+0x44>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005632:	bf00      	nop
 8005634:	f7ff ffde 	bl	80055f4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	429a      	cmp	r2, r3
 8005642:	d8f7      	bhi.n	8005634 <HAL_Delay+0x28>
  {
  }
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	2000000c 	.word	0x2000000c

08005654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e031      	b.n	80056ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fb42 	bl	8004cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <HAL_ADC_Init+0x84>)
 8005698:	4013      	ands	r3, r2
 800569a:	f043 0202 	orr.w	r2, r3, #2
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f970 	bl	8005988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
 80056be:	e001      	b.n	80056c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	ffffeefd 	.word	0xffffeefd

080056dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x1c>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e136      	b.n	8005966 <HAL_ADC_ConfigChannel+0x28a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b09      	cmp	r3, #9
 8005706:	d93a      	bls.n	800577e <HAL_ADC_ConfigChannel+0xa2>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005710:	d035      	beq.n	800577e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	4613      	mov	r3, r2
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4413      	add	r3, r2
 8005726:	3b1e      	subs	r3, #30
 8005728:	2207      	movs	r2, #7
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43da      	mvns	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	400a      	ands	r2, r1
 8005736:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a8d      	ldr	r2, [pc, #564]	; (8005974 <HAL_ADC_ConfigChannel+0x298>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10a      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	061a      	lsls	r2, r3, #24
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005756:	e035      	b.n	80057c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68d9      	ldr	r1, [r3, #12]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	4618      	mov	r0, r3
 800576a:	4603      	mov	r3, r0
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4403      	add	r3, r0
 8005770:	3b1e      	subs	r3, #30
 8005772:	409a      	lsls	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800577c:	e022      	b.n	80057c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6919      	ldr	r1, [r3, #16]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	2207      	movs	r2, #7
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43da      	mvns	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	400a      	ands	r2, r1
 80057a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6919      	ldr	r1, [r3, #16]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4618      	mov	r0, r3
 80057b4:	4603      	mov	r3, r0
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4403      	add	r3, r0
 80057ba:	409a      	lsls	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d824      	bhi.n	8005816 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	3b05      	subs	r3, #5
 80057de:	221f      	movs	r2, #31
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43da      	mvns	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	400a      	ands	r2, r1
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	4618      	mov	r0, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	3b05      	subs	r3, #5
 8005808:	fa00 f203 	lsl.w	r2, r0, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	635a      	str	r2, [r3, #52]	; 0x34
 8005814:	e04c      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d824      	bhi.n	8005868 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	3b23      	subs	r3, #35	; 0x23
 8005830:	221f      	movs	r2, #31
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43da      	mvns	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	400a      	ands	r2, r1
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	4618      	mov	r0, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	3b23      	subs	r3, #35	; 0x23
 800585a:	fa00 f203 	lsl.w	r2, r0, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
 8005866:	e023      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	3b41      	subs	r3, #65	; 0x41
 800587a:	221f      	movs	r2, #31
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43da      	mvns	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	400a      	ands	r2, r1
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	4618      	mov	r0, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	3b41      	subs	r3, #65	; 0x41
 80058a4:	fa00 f203 	lsl.w	r2, r0, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a30      	ldr	r2, [pc, #192]	; (8005978 <HAL_ADC_ConfigChannel+0x29c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10a      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x1f4>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c2:	d105      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80058ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_ADC_ConfigChannel+0x29c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10f      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x21e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b12      	cmp	r3, #18
 80058e0:	d10b      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a25      	ldr	r2, [pc, #148]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4a22      	ldr	r2, [pc, #136]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 80058f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_ADC_ConfigChannel+0x29c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d12b      	bne.n	800595c <HAL_ADC_ConfigChannel+0x280>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <HAL_ADC_ConfigChannel+0x298>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <HAL_ADC_ConfigChannel+0x23a>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b11      	cmp	r3, #17
 8005914:	d122      	bne.n	800595c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005916:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 800591c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005920:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <HAL_ADC_ConfigChannel+0x2a0>)
 8005928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800592c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <HAL_ADC_ConfigChannel+0x298>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d111      	bne.n	800595c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_ADC_ConfigChannel+0x2a4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a11      	ldr	r2, [pc, #68]	; (8005984 <HAL_ADC_ConfigChannel+0x2a8>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9a      	lsrs	r2, r3, #18
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800594e:	e002      	b.n	8005956 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f9      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	10000012 	.word	0x10000012
 8005978:	40012000 	.word	0x40012000
 800597c:	40012300 	.word	0x40012300
 8005980:	20000004 	.word	0x20000004
 8005984:	431bde83 	.word	0x431bde83

08005988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005990:	4b78      	ldr	r3, [pc, #480]	; (8005b74 <ADC_Init+0x1ec>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4a77      	ldr	r2, [pc, #476]	; (8005b74 <ADC_Init+0x1ec>)
 8005996:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800599a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800599c:	4b75      	ldr	r3, [pc, #468]	; (8005b74 <ADC_Init+0x1ec>)
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4973      	ldr	r1, [pc, #460]	; (8005b74 <ADC_Init+0x1ec>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	021a      	lsls	r2, r3, #8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6899      	ldr	r1, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	4a58      	ldr	r2, [pc, #352]	; (8005b78 <ADC_Init+0x1f0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d022      	beq.n	8005a62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6899      	ldr	r1, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e00f      	b.n	8005a82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0202 	bic.w	r2, r2, #2
 8005a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6899      	ldr	r1, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	005a      	lsls	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	3b01      	subs	r3, #1
 8005adc:	035a      	lsls	r2, r3, #13
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	e007      	b.n	8005af8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	051a      	lsls	r2, r3, #20
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b3a:	025a      	lsls	r2, r3, #9
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	029a      	lsls	r2, r3, #10
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	40012300 	.word	0x40012300
 8005b78:	0f000001 	.word	0x0f000001

08005b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <__NVIC_SetPriorityGrouping+0x40>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005baa:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <__NVIC_SetPriorityGrouping+0x40>)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	60d3      	str	r3, [r2, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	e000ed00 	.word	0xe000ed00
 8005bc0:	05fa0000 	.word	0x05fa0000

08005bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <__NVIC_GetPriorityGrouping+0x18>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	f003 0307 	and.w	r3, r3, #7
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db0b      	blt.n	8005c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f003 021f 	and.w	r2, r3, #31
 8005bf8:	4907      	ldr	r1, [pc, #28]	; (8005c18 <__NVIC_EnableIRQ+0x38>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2001      	movs	r0, #1
 8005c02:	fa00 f202 	lsl.w	r2, r0, r2
 8005c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e100 	.word	0xe000e100

08005c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db0a      	blt.n	8005c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	490c      	ldr	r1, [pc, #48]	; (8005c68 <__NVIC_SetPriority+0x4c>)
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	0112      	lsls	r2, r2, #4
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	440b      	add	r3, r1
 8005c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c44:	e00a      	b.n	8005c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4908      	ldr	r1, [pc, #32]	; (8005c6c <__NVIC_SetPriority+0x50>)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	3b04      	subs	r3, #4
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	440b      	add	r3, r1
 8005c5a:	761a      	strb	r2, [r3, #24]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000e100 	.word	0xe000e100
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f1c3 0307 	rsb	r3, r3, #7
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	bf28      	it	cs
 8005c8e:	2304      	movcs	r3, #4
 8005c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d902      	bls.n	8005ca0 <NVIC_EncodePriority+0x30>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3b03      	subs	r3, #3
 8005c9e:	e000      	b.n	8005ca2 <NVIC_EncodePriority+0x32>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	43d9      	mvns	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc8:	4313      	orrs	r3, r2
         );
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	; 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce8:	d301      	bcc.n	8005cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cea:	2301      	movs	r3, #1
 8005cec:	e00f      	b.n	8005d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <SysTick_Config+0x40>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cf6:	210f      	movs	r1, #15
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	f7ff ff8e 	bl	8005c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <SysTick_Config+0x40>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d06:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <SysTick_Config+0x40>)
 8005d08:	2207      	movs	r2, #7
 8005d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	e000e010 	.word	0xe000e010

08005d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ff29 	bl	8005b7c <__NVIC_SetPriorityGrouping>
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d44:	f7ff ff3e 	bl	8005bc4 <__NVIC_GetPriorityGrouping>
 8005d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f7ff ff8e 	bl	8005c70 <NVIC_EncodePriority>
 8005d54:	4602      	mov	r2, r0
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff5d 	bl	8005c1c <__NVIC_SetPriority>
}
 8005d62:	bf00      	nop
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	4603      	mov	r3, r0
 8005d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff31 	bl	8005be0 <__NVIC_EnableIRQ>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffa2 	bl	8005cd8 <SysTick_Config>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dac:	f7ff fc22 	bl	80055f4 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e099      	b.n	8005ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ddc:	e00f      	b.n	8005dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dde:	f7ff fc09 	bl	80055f4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d908      	bls.n	8005dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e078      	b.n	8005ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e8      	bne.n	8005dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <HAL_DMA_Init+0x158>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d107      	bne.n	8005e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	4313      	orrs	r3, r2
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d117      	bne.n	8005ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 faa5 	bl	80063f4 <DMA_CheckFifoParam>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2240      	movs	r2, #64	; 0x40
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e016      	b.n	8005ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa5c 	bl	8006388 <DMA_CalcBaseAndBitshift>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	223f      	movs	r2, #63	; 0x3f
 8005eda:	409a      	lsls	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	f010803f 	.word	0xf010803f

08005efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_DMA_Start_IT+0x26>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e048      	b.n	8005fb4 <HAL_DMA_Start_IT+0xb8>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d137      	bne.n	8005fa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9ee 	bl	800632c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	223f      	movs	r2, #63	; 0x3f
 8005f56:	409a      	lsls	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0216 	orr.w	r2, r2, #22
 8005f6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0208 	orr.w	r2, r2, #8
 8005f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e005      	b.n	8005fb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d004      	beq.n	8005fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00c      	b.n	8005ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2205      	movs	r2, #5
 8005fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800600c:	4b8e      	ldr	r3, [pc, #568]	; (8006248 <HAL_DMA_IRQHandler+0x248>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a8e      	ldr	r2, [pc, #568]	; (800624c <HAL_DMA_IRQHandler+0x24c>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a9b      	lsrs	r3, r3, #10
 8006018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	2208      	movs	r2, #8
 800602c:	409a      	lsls	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01a      	beq.n	800606c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	2208      	movs	r2, #8
 800605a:	409a      	lsls	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	2201      	movs	r2, #1
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	2201      	movs	r2, #1
 8006090:	409a      	lsls	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	2204      	movs	r2, #4
 80060a8:	409a      	lsls	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	2204      	movs	r2, #4
 80060c6:	409a      	lsls	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	f043 0204 	orr.w	r2, r3, #4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	2210      	movs	r2, #16
 80060de:	409a      	lsls	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d043      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03c      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fa:	2210      	movs	r2, #16
 80060fc:	409a      	lsls	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d018      	beq.n	8006142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d108      	bne.n	8006130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d024      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	e01f      	b.n	8006170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e016      	b.n	8006170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0208 	bic.w	r2, r2, #8
 800615e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2220      	movs	r2, #32
 8006176:	409a      	lsls	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 808f 	beq.w	80062a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8087 	beq.w	80062a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	2220      	movs	r2, #32
 8006198:	409a      	lsls	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d136      	bne.n	8006218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0216 	bic.w	r2, r2, #22
 80061b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_DMA_IRQHandler+0x1da>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d007      	beq.n	80061ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0208 	bic.w	r2, r2, #8
 80061e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	223f      	movs	r2, #63	; 0x3f
 80061f0:	409a      	lsls	r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d07e      	beq.n	800630c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
        }
        return;
 8006216:	e079      	b.n	800630c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01d      	beq.n	8006262 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	2b00      	cmp	r3, #0
 800623a:	d031      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	e02c      	b.n	80062a0 <HAL_DMA_IRQHandler+0x2a0>
 8006246:	bf00      	nop
 8006248:	20000004 	.word	0x20000004
 800624c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d023      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	4798      	blx	r3
 8006260:	e01e      	b.n	80062a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0210 	bic.w	r2, r2, #16
 800627e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d032      	beq.n	800630e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d022      	beq.n	80062fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2205      	movs	r2, #5
 80062b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d307      	bcc.n	80062e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f2      	bne.n	80062cc <HAL_DMA_IRQHandler+0x2cc>
 80062e6:	e000      	b.n	80062ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	e000      	b.n	800630e <HAL_DMA_IRQHandler+0x30e>
        return;
 800630c:	bf00      	nop
    }
  }
}
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d108      	bne.n	800636c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800636a:	e007      	b.n	800637c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3b10      	subs	r3, #16
 8006398:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <DMA_CalcBaseAndBitshift+0x60>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <DMA_CalcBaseAndBitshift+0x64>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d908      	bls.n	80063c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <DMA_CalcBaseAndBitshift+0x68>)
 80063be:	4013      	ands	r3, r2
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	659a      	str	r2, [r3, #88]	; 0x58
 80063c6:	e006      	b.n	80063d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <DMA_CalcBaseAndBitshift+0x68>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	aaaaaaab 	.word	0xaaaaaaab
 80063ec:	0801c1d4 	.word	0x0801c1d4
 80063f0:	fffffc00 	.word	0xfffffc00

080063f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11f      	bne.n	800644e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d856      	bhi.n	80064c2 <DMA_CheckFifoParam+0xce>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <DMA_CheckFifoParam+0x28>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	0800642d 	.word	0x0800642d
 8006420:	0800643f 	.word	0x0800643f
 8006424:	0800642d 	.word	0x0800642d
 8006428:	080064c3 	.word	0x080064c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d046      	beq.n	80064c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643c:	e043      	b.n	80064c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006446:	d140      	bne.n	80064ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644c:	e03d      	b.n	80064ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d121      	bne.n	800649c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d837      	bhi.n	80064ce <DMA_CheckFifoParam+0xda>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <DMA_CheckFifoParam+0x70>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006475 	.word	0x08006475
 8006468:	0800647b 	.word	0x0800647b
 800646c:	08006475 	.word	0x08006475
 8006470:	0800648d 	.word	0x0800648d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e030      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d025      	beq.n	80064d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648a:	e022      	b.n	80064d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006494:	d11f      	bne.n	80064d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800649a:	e01c      	b.n	80064d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d903      	bls.n	80064aa <DMA_CheckFifoParam+0xb6>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d003      	beq.n	80064b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064a8:	e018      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
      break;
 80064ae:	e015      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00e      	beq.n	80064da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
      break;
 80064c0:	e00b      	b.n	80064da <DMA_CheckFifoParam+0xe6>
      break;
 80064c2:	bf00      	nop
 80064c4:	e00a      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;
 80064c6:	bf00      	nop
 80064c8:	e008      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;
 80064ca:	bf00      	nop
 80064cc:	e006      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;
 80064ce:	bf00      	nop
 80064d0:	e004      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;   
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
    }
  } 
  
  return status; 
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop

080064ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b089      	sub	sp, #36	; 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80064fe:	2300      	movs	r3, #0
 8006500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
 800650a:	e175      	b.n	80067f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800650c:	2201      	movs	r2, #1
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4013      	ands	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	429a      	cmp	r2, r3
 8006526:	f040 8164 	bne.w	80067f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d005      	beq.n	8006542 <HAL_GPIO_Init+0x56>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d130      	bne.n	80065a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	2203      	movs	r2, #3
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	43db      	mvns	r3, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4013      	ands	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4313      	orrs	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006578:	2201      	movs	r2, #1
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	091b      	lsrs	r3, r3, #4
 800658e:	f003 0201 	and.w	r2, r3, #1
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d017      	beq.n	80065e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	2203      	movs	r2, #3
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4013      	ands	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d123      	bne.n	8006634 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	08da      	lsrs	r2, r3, #3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3208      	adds	r2, #8
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	220f      	movs	r2, #15
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	43db      	mvns	r3, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	4313      	orrs	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	08da      	lsrs	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3208      	adds	r2, #8
 800662e:	69b9      	ldr	r1, [r7, #24]
 8006630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	2203      	movs	r2, #3
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4013      	ands	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 0203 	and.w	r2, r3, #3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80be 	beq.w	80067f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006676:	4b66      	ldr	r3, [pc, #408]	; (8006810 <HAL_GPIO_Init+0x324>)
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	4a65      	ldr	r2, [pc, #404]	; (8006810 <HAL_GPIO_Init+0x324>)
 800667c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006680:	6453      	str	r3, [r2, #68]	; 0x44
 8006682:	4b63      	ldr	r3, [pc, #396]	; (8006810 <HAL_GPIO_Init+0x324>)
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800668e:	4a61      	ldr	r2, [pc, #388]	; (8006814 <HAL_GPIO_Init+0x328>)
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	3302      	adds	r3, #2
 8006696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	220f      	movs	r2, #15
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a58      	ldr	r2, [pc, #352]	; (8006818 <HAL_GPIO_Init+0x32c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d037      	beq.n	800672a <HAL_GPIO_Init+0x23e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a57      	ldr	r2, [pc, #348]	; (800681c <HAL_GPIO_Init+0x330>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d031      	beq.n	8006726 <HAL_GPIO_Init+0x23a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_GPIO_Init+0x334>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d02b      	beq.n	8006722 <HAL_GPIO_Init+0x236>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a55      	ldr	r2, [pc, #340]	; (8006824 <HAL_GPIO_Init+0x338>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d025      	beq.n	800671e <HAL_GPIO_Init+0x232>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a54      	ldr	r2, [pc, #336]	; (8006828 <HAL_GPIO_Init+0x33c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01f      	beq.n	800671a <HAL_GPIO_Init+0x22e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a53      	ldr	r2, [pc, #332]	; (800682c <HAL_GPIO_Init+0x340>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d019      	beq.n	8006716 <HAL_GPIO_Init+0x22a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a52      	ldr	r2, [pc, #328]	; (8006830 <HAL_GPIO_Init+0x344>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_GPIO_Init+0x226>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a51      	ldr	r2, [pc, #324]	; (8006834 <HAL_GPIO_Init+0x348>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00d      	beq.n	800670e <HAL_GPIO_Init+0x222>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a50      	ldr	r2, [pc, #320]	; (8006838 <HAL_GPIO_Init+0x34c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <HAL_GPIO_Init+0x21e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a4f      	ldr	r2, [pc, #316]	; (800683c <HAL_GPIO_Init+0x350>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d101      	bne.n	8006706 <HAL_GPIO_Init+0x21a>
 8006702:	2309      	movs	r3, #9
 8006704:	e012      	b.n	800672c <HAL_GPIO_Init+0x240>
 8006706:	230a      	movs	r3, #10
 8006708:	e010      	b.n	800672c <HAL_GPIO_Init+0x240>
 800670a:	2308      	movs	r3, #8
 800670c:	e00e      	b.n	800672c <HAL_GPIO_Init+0x240>
 800670e:	2307      	movs	r3, #7
 8006710:	e00c      	b.n	800672c <HAL_GPIO_Init+0x240>
 8006712:	2306      	movs	r3, #6
 8006714:	e00a      	b.n	800672c <HAL_GPIO_Init+0x240>
 8006716:	2305      	movs	r3, #5
 8006718:	e008      	b.n	800672c <HAL_GPIO_Init+0x240>
 800671a:	2304      	movs	r3, #4
 800671c:	e006      	b.n	800672c <HAL_GPIO_Init+0x240>
 800671e:	2303      	movs	r3, #3
 8006720:	e004      	b.n	800672c <HAL_GPIO_Init+0x240>
 8006722:	2302      	movs	r3, #2
 8006724:	e002      	b.n	800672c <HAL_GPIO_Init+0x240>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <HAL_GPIO_Init+0x240>
 800672a:	2300      	movs	r3, #0
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	f002 0203 	and.w	r2, r2, #3
 8006732:	0092      	lsls	r2, r2, #2
 8006734:	4093      	lsls	r3, r2
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800673c:	4935      	ldr	r1, [pc, #212]	; (8006814 <HAL_GPIO_Init+0x328>)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	089b      	lsrs	r3, r3, #2
 8006742:	3302      	adds	r3, #2
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800674a:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <HAL_GPIO_Init+0x354>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800676e:	4a34      	ldr	r2, [pc, #208]	; (8006840 <HAL_GPIO_Init+0x354>)
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006774:	4b32      	ldr	r3, [pc, #200]	; (8006840 <HAL_GPIO_Init+0x354>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	43db      	mvns	r3, r3
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4013      	ands	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <HAL_GPIO_Init+0x354>)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800679e:	4b28      	ldr	r3, [pc, #160]	; (8006840 <HAL_GPIO_Init+0x354>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	43db      	mvns	r3, r3
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	4013      	ands	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067c2:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <HAL_GPIO_Init+0x354>)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_GPIO_Init+0x354>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	4013      	ands	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <HAL_GPIO_Init+0x354>)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3301      	adds	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	f67f ae86 	bls.w	800650c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	3724      	adds	r7, #36	; 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40023800 	.word	0x40023800
 8006814:	40013800 	.word	0x40013800
 8006818:	40020000 	.word	0x40020000
 800681c:	40020400 	.word	0x40020400
 8006820:	40020800 	.word	0x40020800
 8006824:	40020c00 	.word	0x40020c00
 8006828:	40021000 	.word	0x40021000
 800682c:	40021400 	.word	0x40021400
 8006830:	40021800 	.word	0x40021800
 8006834:	40021c00 	.word	0x40021c00
 8006838:	40022000 	.word	0x40022000
 800683c:	40022400 	.word	0x40022400
 8006840:	40013c00 	.word	0x40013c00

08006844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
 8006850:	4613      	mov	r3, r2
 8006852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006854:	787b      	ldrb	r3, [r7, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006860:	e003      	b.n	800686a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	041a      	lsls	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	619a      	str	r2, [r3, #24]
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006888:	887a      	ldrh	r2, [r7, #2]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4013      	ands	r3, r2
 800688e:	041a      	lsls	r2, r3, #16
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	43d9      	mvns	r1, r3
 8006894:	887b      	ldrh	r3, [r7, #2]
 8006896:	400b      	ands	r3, r1
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	619a      	str	r2, [r3, #24]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80068aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ac:	b08f      	sub	sp, #60	; 0x3c
 80068ae:	af0a      	add	r7, sp, #40	; 0x28
 80068b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e054      	b.n	8006966 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f011 fb8c 	bl	8017ff4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2203      	movs	r2, #3
 80068e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f007 fc7b 	bl	800e1f6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	687e      	ldr	r6, [r7, #4]
 8006908:	466d      	mov	r5, sp
 800690a:	f106 0410 	add.w	r4, r6, #16
 800690e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800691a:	e885 0003 	stmia.w	r5, {r0, r1}
 800691e:	1d33      	adds	r3, r6, #4
 8006920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	f007 fb5c 	bl	800dfe0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f007 fc72 	bl	800e218 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	687e      	ldr	r6, [r7, #4]
 800693c:	466d      	mov	r5, sp
 800693e:	f106 0410 	add.w	r4, r6, #16
 8006942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800694a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800694e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006952:	1d33      	adds	r3, r6, #4
 8006954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f008 ffae 	bl	800f8b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800696e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800696e:	b590      	push	{r4, r7, lr}
 8006970:	b089      	sub	sp, #36	; 0x24
 8006972:	af04      	add	r7, sp, #16
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	461a      	mov	r2, r3
 800697c:	4603      	mov	r3, r0
 800697e:	70fb      	strb	r3, [r7, #3]
 8006980:	460b      	mov	r3, r1
 8006982:	70bb      	strb	r3, [r7, #2]
 8006984:	4613      	mov	r3, r2
 8006986:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_HCD_HC_Init+0x28>
 8006992:	2302      	movs	r3, #2
 8006994:	e076      	b.n	8006a84 <HAL_HCD_HC_Init+0x116>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	212c      	movs	r1, #44	; 0x2c
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	333d      	adds	r3, #61	; 0x3d
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3338      	adds	r3, #56	; 0x38
 80069be:	787a      	ldrb	r2, [r7, #1]
 80069c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	212c      	movs	r1, #44	; 0x2c
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	3340      	adds	r3, #64	; 0x40
 80069d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069d2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	212c      	movs	r1, #44	; 0x2c
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	4413      	add	r3, r2
 80069e0:	3339      	adds	r3, #57	; 0x39
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	212c      	movs	r1, #44	; 0x2c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	333f      	adds	r3, #63	; 0x3f
 80069f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80069f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	78ba      	ldrb	r2, [r7, #2]
 80069fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a02:	b2d0      	uxtb	r0, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	212c      	movs	r1, #44	; 0x2c
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	333a      	adds	r3, #58	; 0x3a
 8006a10:	4602      	mov	r2, r0
 8006a12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da09      	bge.n	8006a30 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	212c      	movs	r1, #44	; 0x2c
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	333b      	adds	r3, #59	; 0x3b
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	e008      	b.n	8006a42 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	212c      	movs	r1, #44	; 0x2c
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	333b      	adds	r3, #59	; 0x3b
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	212c      	movs	r1, #44	; 0x2c
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	333c      	adds	r3, #60	; 0x3c
 8006a50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	787c      	ldrb	r4, [r7, #1]
 8006a5c:	78ba      	ldrb	r2, [r7, #2]
 8006a5e:	78f9      	ldrb	r1, [r7, #3]
 8006a60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	4623      	mov	r3, r4
 8006a72:	f009 f89b 	bl	800fbac <USB_HC_Init>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd90      	pop	{r4, r7, pc}

08006a8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_HCD_HC_Halt+0x1e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e00f      	b.n	8006aca <HAL_HCD_HC_Halt+0x3e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f009 faeb 	bl	8010096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	70fb      	strb	r3, [r7, #3]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70bb      	strb	r3, [r7, #2]
 8006aea:	4613      	mov	r3, r2
 8006aec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	212c      	movs	r1, #44	; 0x2c
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	333b      	adds	r3, #59	; 0x3b
 8006afc:	78ba      	ldrb	r2, [r7, #2]
 8006afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	212c      	movs	r1, #44	; 0x2c
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	333f      	adds	r3, #63	; 0x3f
 8006b0e:	787a      	ldrb	r2, [r7, #1]
 8006b10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006b12:	7c3b      	ldrb	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d112      	bne.n	8006b3e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	212c      	movs	r1, #44	; 0x2c
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	3342      	adds	r3, #66	; 0x42
 8006b26:	2203      	movs	r2, #3
 8006b28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	212c      	movs	r1, #44	; 0x2c
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	333d      	adds	r3, #61	; 0x3d
 8006b38:	7f3a      	ldrb	r2, [r7, #28]
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e008      	b.n	8006b50 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	212c      	movs	r1, #44	; 0x2c
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	3342      	adds	r3, #66	; 0x42
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006b50:	787b      	ldrb	r3, [r7, #1]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f200 80c6 	bhi.w	8006ce4 <HAL_HCD_HC_SubmitRequest+0x210>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006cd1 	.word	0x08006cd1
 8006b68:	08006bd5 	.word	0x08006bd5
 8006b6c:	08006c53 	.word	0x08006c53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006b70:	7c3b      	ldrb	r3, [r7, #16]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	f040 80b8 	bne.w	8006ce8 <HAL_HCD_HC_SubmitRequest+0x214>
 8006b78:	78bb      	ldrb	r3, [r7, #2]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 80b4 	bne.w	8006ce8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006b80:	8b3b      	ldrh	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d108      	bne.n	8006b98 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	212c      	movs	r1, #44	; 0x2c
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	3355      	adds	r3, #85	; 0x55
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	212c      	movs	r1, #44	; 0x2c
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3355      	adds	r3, #85	; 0x55
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	212c      	movs	r1, #44	; 0x2c
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3342      	adds	r3, #66	; 0x42
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006bbe:	e093      	b.n	8006ce8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	212c      	movs	r1, #44	; 0x2c
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	3342      	adds	r3, #66	; 0x42
 8006bce:	2202      	movs	r2, #2
 8006bd0:	701a      	strb	r2, [r3, #0]
      break;
 8006bd2:	e089      	b.n	8006ce8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006bd4:	78bb      	ldrb	r3, [r7, #2]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11d      	bne.n	8006c16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	212c      	movs	r1, #44	; 0x2c
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	3355      	adds	r3, #85	; 0x55
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	212c      	movs	r1, #44	; 0x2c
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3342      	adds	r3, #66	; 0x42
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006c00:	e073      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	212c      	movs	r1, #44	; 0x2c
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3342      	adds	r3, #66	; 0x42
 8006c10:	2202      	movs	r2, #2
 8006c12:	701a      	strb	r2, [r3, #0]
      break;
 8006c14:	e069      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	212c      	movs	r1, #44	; 0x2c
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	3354      	adds	r3, #84	; 0x54
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	212c      	movs	r1, #44	; 0x2c
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	4413      	add	r3, r2
 8006c36:	3342      	adds	r3, #66	; 0x42
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e055      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	212c      	movs	r1, #44	; 0x2c
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	3342      	adds	r3, #66	; 0x42
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	701a      	strb	r2, [r3, #0]
      break;
 8006c50:	e04b      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006c52:	78bb      	ldrb	r3, [r7, #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11d      	bne.n	8006c94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	212c      	movs	r1, #44	; 0x2c
 8006c5e:	fb01 f303 	mul.w	r3, r1, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	3355      	adds	r3, #85	; 0x55
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	212c      	movs	r1, #44	; 0x2c
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	3342      	adds	r3, #66	; 0x42
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006c7e:	e034      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	212c      	movs	r1, #44	; 0x2c
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3342      	adds	r3, #66	; 0x42
 8006c8e:	2202      	movs	r2, #2
 8006c90:	701a      	strb	r2, [r3, #0]
      break;
 8006c92:	e02a      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	212c      	movs	r1, #44	; 0x2c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3354      	adds	r3, #84	; 0x54
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	212c      	movs	r1, #44	; 0x2c
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3342      	adds	r3, #66	; 0x42
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e016      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	212c      	movs	r1, #44	; 0x2c
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3342      	adds	r3, #66	; 0x42
 8006cca:	2202      	movs	r2, #2
 8006ccc:	701a      	strb	r2, [r3, #0]
      break;
 8006cce:	e00c      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	212c      	movs	r1, #44	; 0x2c
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	3342      	adds	r3, #66	; 0x42
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
      break;
 8006ce2:	e002      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006ce8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	212c      	movs	r1, #44	; 0x2c
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3344      	adds	r3, #68	; 0x44
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	8b3a      	ldrh	r2, [r7, #24]
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	202c      	movs	r0, #44	; 0x2c
 8006d04:	fb00 f303 	mul.w	r3, r0, r3
 8006d08:	440b      	add	r3, r1
 8006d0a:	334c      	adds	r3, #76	; 0x4c
 8006d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	212c      	movs	r1, #44	; 0x2c
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	4413      	add	r3, r2
 8006d1a:	3360      	adds	r3, #96	; 0x60
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	212c      	movs	r1, #44	; 0x2c
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3350      	adds	r3, #80	; 0x50
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	212c      	movs	r1, #44	; 0x2c
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3339      	adds	r3, #57	; 0x39
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	212c      	movs	r1, #44	; 0x2c
 8006d4a:	fb01 f303 	mul.w	r3, r1, r3
 8006d4e:	4413      	add	r3, r2
 8006d50:	3361      	adds	r3, #97	; 0x61
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	222c      	movs	r2, #44	; 0x2c
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	3338      	adds	r3, #56	; 0x38
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	18d1      	adds	r1, r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f009 f83e 	bl	800fdf0 <USB_HC_StartXfer>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f008 fcca 	bl	800f730 <USB_GetMode>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 80f6 	bne.w	8006f90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f008 fc0d 	bl	800f5c8 <USB_ReadInterrupts>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80ec 	beq.w	8006f8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f008 fc04 	bl	800f5c8 <USB_ReadInterrupts>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dca:	d104      	bne.n	8006dd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f008 fbf4 	bl	800f5c8 <USB_ReadInterrupts>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dea:	d104      	bne.n	8006df6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f008 fbe4 	bl	800f5c8 <USB_ReadInterrupts>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e0a:	d104      	bne.n	8006e16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f008 fbd4 	bl	800f5c8 <USB_ReadInterrupts>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d103      	bne.n	8006e32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f008 fbc6 	bl	800f5c8 <USB_ReadInterrupts>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e46:	d11c      	bne.n	8006e82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10f      	bne.n	8006e82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006e62:	2110      	movs	r1, #16
 8006e64:	6938      	ldr	r0, [r7, #16]
 8006e66:	f007 fb81 	bl	800e56c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006e6a:	6938      	ldr	r0, [r7, #16]
 8006e6c:	f007 fbb2 	bl	800e5d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f008 fdd2 	bl	800fa20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f011 f947 	bl	8018110 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f008 fb9e 	bl	800f5c8 <USB_ReadInterrupts>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e96:	d102      	bne.n	8006e9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f9ce 	bl	800823a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f008 fb90 	bl	800f5c8 <USB_ReadInterrupts>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d106      	bne.n	8006ec0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f011 f910 	bl	80180d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f008 fb7f 	bl	800f5c8 <USB_ReadInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d101      	bne.n	8006ed8 <HAL_HCD_IRQHandler+0x158>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_HCD_IRQHandler+0x15a>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0210 	bic.w	r2, r2, #16
 8006eec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 f8d1 	bl	8008096 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0210 	orr.w	r2, r2, #16
 8006f02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f008 fb5d 	bl	800f5c8 <USB_ReadInterrupts>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f18:	d13a      	bne.n	8006f90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f009 f8a8 	bl	8010074 <USB_HC_ReadInterrupt>
 8006f24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	e025      	b.n	8006f78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d018      	beq.n	8006f72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f56:	d106      	bne.n	8006f66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8ab 	bl	80070ba <HCD_HC_IN_IRQHandler>
 8006f64:	e005      	b.n	8006f72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fcc6 	bl	80078fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	3301      	adds	r3, #1
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d3d4      	bcc.n	8006f2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f8a:	615a      	str	r2, [r3, #20]
 8006f8c:	e000      	b.n	8006f90 <HAL_HCD_IRQHandler+0x210>
      return;
 8006f8e:	bf00      	nop
    }
  }
}
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_HCD_Start+0x16>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e013      	b.n	8006fd4 <HAL_HCD_Start+0x3e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2101      	movs	r1, #1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f008 fd94 	bl	800fae8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f007 f905 	bl	800e1d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_HCD_Stop+0x16>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e00d      	b.n	800700e <HAL_HCD_Stop+0x32>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f009 f982 	bl	8010308 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f008 fd36 	bl	800fa94 <USB_ResetPort>
 8007028:	4603      	mov	r3, r0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	212c      	movs	r1, #44	; 0x2c
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	3360      	adds	r3, #96	; 0x60
 800704c:	781b      	ldrb	r3, [r3, #0]
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	212c      	movs	r1, #44	; 0x2c
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	4413      	add	r3, r2
 8007072:	3350      	adds	r3, #80	; 0x50
 8007074:	681b      	ldr	r3, [r3, #0]
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f008 fd7a 	bl	800fb88 <USB_GetCurrentFrame>
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f008 fd55 	bl	800fb5a <USB_GetHostSpeed>
 80070b0:	4603      	mov	r3, r0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b086      	sub	sp, #24
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f008 fa85 	bl	800f5ee <USB_ReadChInterrupts>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d11a      	bne.n	8007124 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	461a      	mov	r2, r3
 80070fc:	2304      	movs	r3, #4
 80070fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	212c      	movs	r1, #44	; 0x2c
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	4413      	add	r3, r2
 800710c:	3361      	adds	r3, #97	; 0x61
 800710e:	2207      	movs	r2, #7
 8007110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f008 ffba 	bl	8010096 <USB_HC_Halt>
 8007122:	e0a2      	b.n	800726a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f008 fa5d 	bl	800f5ee <USB_ReadChInterrupts>
 8007134:	4603      	mov	r3, r0
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713e:	d11b      	bne.n	8007178 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	461a      	mov	r2, r3
 800714e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007152:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	212c      	movs	r1, #44	; 0x2c
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	4413      	add	r3, r2
 8007160:	3361      	adds	r3, #97	; 0x61
 8007162:	2208      	movs	r2, #8
 8007164:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f008 ff90 	bl	8010096 <USB_HC_Halt>
 8007176:	e078      	b.n	800726a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f008 fa33 	bl	800f5ee <USB_ReadChInterrupts>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b08      	cmp	r3, #8
 8007190:	d11a      	bne.n	80071c8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719e:	461a      	mov	r2, r3
 80071a0:	2308      	movs	r3, #8
 80071a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	212c      	movs	r1, #44	; 0x2c
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	3361      	adds	r3, #97	; 0x61
 80071b2:	2206      	movs	r2, #6
 80071b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f008 ff68 	bl	8010096 <USB_HC_Halt>
 80071c6:	e050      	b.n	800726a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f008 fa0b 	bl	800f5ee <USB_ReadChInterrupts>
 80071d8:	4603      	mov	r3, r0
 80071da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e2:	d11b      	bne.n	800721c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f0:	461a      	mov	r2, r3
 80071f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	212c      	movs	r1, #44	; 0x2c
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	4413      	add	r3, r2
 8007204:	3361      	adds	r3, #97	; 0x61
 8007206:	2209      	movs	r2, #9
 8007208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	4611      	mov	r1, r2
 8007214:	4618      	mov	r0, r3
 8007216:	f008 ff3e 	bl	8010096 <USB_HC_Halt>
 800721a:	e026      	b.n	800726a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f008 f9e1 	bl	800f5ee <USB_ReadChInterrupts>
 800722c:	4603      	mov	r3, r0
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d119      	bne.n	800726a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	461a      	mov	r2, r3
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	212c      	movs	r1, #44	; 0x2c
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	4413      	add	r3, r2
 8007254:	3361      	adds	r3, #97	; 0x61
 8007256:	2207      	movs	r2, #7
 8007258:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f008 ff16 	bl	8010096 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f008 f9ba 	bl	800f5ee <USB_ReadChInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007284:	d112      	bne.n	80072ac <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f008 ff00 	bl	8010096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	461a      	mov	r2, r3
 80072a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072a8:	6093      	str	r3, [r2, #8]
 80072aa:	e325      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f008 f999 	bl	800f5ee <USB_ReadChInterrupts>
 80072bc:	4603      	mov	r3, r0
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	f040 80e8 	bne.w	8007498 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	461a      	mov	r2, r3
 80072d6:	2320      	movs	r3, #32
 80072d8:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d019      	beq.n	8007316 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	212c      	movs	r1, #44	; 0x2c
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	3348      	adds	r3, #72	; 0x48
 80072f0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	0159      	lsls	r1, r3, #5
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	440b      	add	r3, r1
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007304:	1ad2      	subs	r2, r2, r3
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	202c      	movs	r0, #44	; 0x2c
 800730c:	fb00 f303 	mul.w	r3, r0, r3
 8007310:	440b      	add	r3, r1
 8007312:	3350      	adds	r3, #80	; 0x50
 8007314:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	212c      	movs	r1, #44	; 0x2c
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	4413      	add	r3, r2
 8007322:	3361      	adds	r3, #97	; 0x61
 8007324:	2201      	movs	r2, #1
 8007326:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	212c      	movs	r1, #44	; 0x2c
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	335c      	adds	r3, #92	; 0x5c
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4413      	add	r3, r2
 8007342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007346:	461a      	mov	r2, r3
 8007348:	2301      	movs	r3, #1
 800734a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	212c      	movs	r1, #44	; 0x2c
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	4413      	add	r3, r2
 8007358:	333f      	adds	r3, #63	; 0x3f
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	212c      	movs	r1, #44	; 0x2c
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	4413      	add	r3, r2
 800736c:	333f      	adds	r3, #63	; 0x3f
 800736e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007370:	2b02      	cmp	r3, #2
 8007372:	d111      	bne.n	8007398 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f008 fe89 	bl	8010096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4413      	add	r3, r2
 800738c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007390:	461a      	mov	r2, r3
 8007392:	2310      	movs	r3, #16
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	e03a      	b.n	800740e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	212c      	movs	r1, #44	; 0x2c
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	333f      	adds	r3, #63	; 0x3f
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d009      	beq.n	80073c0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	212c      	movs	r1, #44	; 0x2c
 80073b2:	fb01 f303 	mul.w	r3, r1, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	333f      	adds	r3, #63	; 0x3f
 80073ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d126      	bne.n	800740e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073de:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	212c      	movs	r1, #44	; 0x2c
 80073e6:	fb01 f303 	mul.w	r3, r1, r3
 80073ea:	4413      	add	r3, r2
 80073ec:	3360      	adds	r3, #96	; 0x60
 80073ee:	2201      	movs	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	b2d9      	uxtb	r1, r3
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	202c      	movs	r0, #44	; 0x2c
 80073fc:	fb00 f303 	mul.w	r3, r0, r3
 8007400:	4413      	add	r3, r2
 8007402:	3360      	adds	r3, #96	; 0x60
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f010 fe8f 	bl	801812c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d12b      	bne.n	800746e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	212c      	movs	r1, #44	; 0x2c
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	4413      	add	r3, r2
 8007422:	3348      	adds	r3, #72	; 0x48
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	202c      	movs	r0, #44	; 0x2c
 800742c:	fb00 f202 	mul.w	r2, r0, r2
 8007430:	440a      	add	r2, r1
 8007432:	3240      	adds	r2, #64	; 0x40
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	fbb3 f3f2 	udiv	r3, r3, r2
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 825a 	beq.w	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	212c      	movs	r1, #44	; 0x2c
 800744a:	fb01 f303 	mul.w	r3, r1, r3
 800744e:	4413      	add	r3, r2
 8007450:	3354      	adds	r3, #84	; 0x54
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f083 0301 	eor.w	r3, r3, #1
 8007458:	b2d8      	uxtb	r0, r3
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	212c      	movs	r1, #44	; 0x2c
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	4413      	add	r3, r2
 8007466:	3354      	adds	r3, #84	; 0x54
 8007468:	4602      	mov	r2, r0
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e244      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	212c      	movs	r1, #44	; 0x2c
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	3354      	adds	r3, #84	; 0x54
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f083 0301 	eor.w	r3, r3, #1
 8007482:	b2d8      	uxtb	r0, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	212c      	movs	r1, #44	; 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3354      	adds	r3, #84	; 0x54
 8007492:	4602      	mov	r2, r0
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e22f      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f008 f8a3 	bl	800f5ee <USB_ReadChInterrupts>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d109      	bne.n	80074c6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	461a      	mov	r2, r3
 80074c0:	2320      	movs	r3, #32
 80074c2:	6093      	str	r3, [r2, #8]
 80074c4:	e218      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f008 f88c 	bl	800f5ee <USB_ReadChInterrupts>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f040 816b 	bne.w	80077b8 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ee:	461a      	mov	r2, r3
 80074f0:	2302      	movs	r3, #2
 80074f2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	212c      	movs	r1, #44	; 0x2c
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	4413      	add	r3, r2
 8007500:	3361      	adds	r3, #97	; 0x61
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d112      	bne.n	800752e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	212c      	movs	r1, #44	; 0x2c
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	3361      	adds	r3, #97	; 0x61
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	212c      	movs	r1, #44	; 0x2c
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	3360      	adds	r3, #96	; 0x60
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e135      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	212c      	movs	r1, #44	; 0x2c
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	4413      	add	r3, r2
 800753a:	3361      	adds	r3, #97	; 0x61
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b06      	cmp	r3, #6
 8007540:	d112      	bne.n	8007568 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	212c      	movs	r1, #44	; 0x2c
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	4413      	add	r3, r2
 800754e:	3361      	adds	r3, #97	; 0x61
 8007550:	2202      	movs	r2, #2
 8007552:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	212c      	movs	r1, #44	; 0x2c
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	3360      	adds	r3, #96	; 0x60
 8007562:	2205      	movs	r2, #5
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e118      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	212c      	movs	r1, #44	; 0x2c
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	4413      	add	r3, r2
 8007574:	3361      	adds	r3, #97	; 0x61
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b07      	cmp	r3, #7
 800757a:	d009      	beq.n	8007590 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	212c      	movs	r1, #44	; 0x2c
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	3361      	adds	r3, #97	; 0x61
 800758a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800758c:	2b09      	cmp	r3, #9
 800758e:	d159      	bne.n	8007644 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	212c      	movs	r1, #44	; 0x2c
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	3361      	adds	r3, #97	; 0x61
 800759e:	2202      	movs	r2, #2
 80075a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	212c      	movs	r1, #44	; 0x2c
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	335c      	adds	r3, #92	; 0x5c
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	202c      	movs	r0, #44	; 0x2c
 80075ba:	fb00 f303 	mul.w	r3, r0, r3
 80075be:	440b      	add	r3, r1
 80075c0:	335c      	adds	r3, #92	; 0x5c
 80075c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	212c      	movs	r1, #44	; 0x2c
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	335c      	adds	r3, #92	; 0x5c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d912      	bls.n	80075fe <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	212c      	movs	r1, #44	; 0x2c
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	335c      	adds	r3, #92	; 0x5c
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	212c      	movs	r1, #44	; 0x2c
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	3360      	adds	r3, #96	; 0x60
 80075f8:	2204      	movs	r2, #4
 80075fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80075fc:	e0cd      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	212c      	movs	r1, #44	; 0x2c
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	3360      	adds	r3, #96	; 0x60
 800760c:	2202      	movs	r2, #2
 800760e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007626:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800762e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007642:	e0aa      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	212c      	movs	r1, #44	; 0x2c
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3361      	adds	r3, #97	; 0x61
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b05      	cmp	r3, #5
 8007656:	d109      	bne.n	800766c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	212c      	movs	r1, #44	; 0x2c
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	4413      	add	r3, r2
 8007664:	3361      	adds	r3, #97	; 0x61
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e096      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	212c      	movs	r1, #44	; 0x2c
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	3361      	adds	r3, #97	; 0x61
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d109      	bne.n	8007694 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	212c      	movs	r1, #44	; 0x2c
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	4413      	add	r3, r2
 800768c:	3361      	adds	r3, #97	; 0x61
 800768e:	2202      	movs	r2, #2
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e082      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	212c      	movs	r1, #44	; 0x2c
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3361      	adds	r3, #97	; 0x61
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d13f      	bne.n	8007728 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	212c      	movs	r1, #44	; 0x2c
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	3361      	adds	r3, #97	; 0x61
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	212c      	movs	r1, #44	; 0x2c
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	4413      	add	r3, r2
 80076c6:	3360      	adds	r3, #96	; 0x60
 80076c8:	2202      	movs	r2, #2
 80076ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	212c      	movs	r1, #44	; 0x2c
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	333f      	adds	r3, #63	; 0x3f
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d009      	beq.n	80076f4 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	212c      	movs	r1, #44	; 0x2c
 80076e6:	fb01 f303 	mul.w	r3, r1, r3
 80076ea:	4413      	add	r3, r2
 80076ec:	333f      	adds	r3, #63	; 0x3f
 80076ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d152      	bne.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800770a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007712:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e038      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	212c      	movs	r1, #44	; 0x2c
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	3361      	adds	r3, #97	; 0x61
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d123      	bne.n	8007784 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	212c      	movs	r1, #44	; 0x2c
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	4413      	add	r3, r2
 8007748:	3361      	adds	r3, #97	; 0x61
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	212c      	movs	r1, #44	; 0x2c
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	335c      	adds	r3, #92	; 0x5c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	202c      	movs	r0, #44	; 0x2c
 8007766:	fb00 f303 	mul.w	r3, r0, r3
 800776a:	440b      	add	r3, r1
 800776c:	335c      	adds	r3, #92	; 0x5c
 800776e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	212c      	movs	r1, #44	; 0x2c
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	3360      	adds	r3, #96	; 0x60
 800777e:	2204      	movs	r2, #4
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	e00a      	b.n	800779a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	212c      	movs	r1, #44	; 0x2c
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3361      	adds	r3, #97	; 0x61
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b02      	cmp	r3, #2
 8007796:	f000 80ae 	beq.w	80078f6 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	b2d9      	uxtb	r1, r3
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	202c      	movs	r0, #44	; 0x2c
 80077a4:	fb00 f303 	mul.w	r3, r0, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	3360      	adds	r3, #96	; 0x60
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f010 fcbb 	bl	801812c <HAL_HCD_HC_NotifyURBChange_Callback>
 80077b6:	e09f      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f007 ff13 	bl	800f5ee <USB_ReadChInterrupts>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d123      	bne.n	800781a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077de:	461a      	mov	r2, r3
 80077e0:	2340      	movs	r3, #64	; 0x40
 80077e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	212c      	movs	r1, #44	; 0x2c
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	3361      	adds	r3, #97	; 0x61
 80077f2:	2205      	movs	r2, #5
 80077f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	212c      	movs	r1, #44	; 0x2c
 80077fc:	fb01 f303 	mul.w	r3, r1, r3
 8007800:	4413      	add	r3, r2
 8007802:	335c      	adds	r3, #92	; 0x5c
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f008 fc3f 	bl	8010096 <USB_HC_Halt>
 8007818:	e06e      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f007 fee2 	bl	800f5ee <USB_ReadChInterrupts>
 800782a:	4603      	mov	r3, r0
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b10      	cmp	r3, #16
 8007832:	d161      	bne.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	212c      	movs	r1, #44	; 0x2c
 800783a:	fb01 f303 	mul.w	r3, r1, r3
 800783e:	4413      	add	r3, r2
 8007840:	333f      	adds	r3, #63	; 0x3f
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d11a      	bne.n	800787e <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	212c      	movs	r1, #44	; 0x2c
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	4413      	add	r3, r2
 8007854:	335c      	adds	r3, #92	; 0x5c
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	212c      	movs	r1, #44	; 0x2c
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3361      	adds	r3, #97	; 0x61
 8007868:	2204      	movs	r2, #4
 800786a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f008 fc0d 	bl	8010096 <USB_HC_Halt>
 800787c:	e031      	b.n	80078e2 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	212c      	movs	r1, #44	; 0x2c
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	4413      	add	r3, r2
 800788a:	333f      	adds	r3, #63	; 0x3f
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	212c      	movs	r1, #44	; 0x2c
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	4413      	add	r3, r2
 800789e:	333f      	adds	r3, #63	; 0x3f
 80078a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d11d      	bne.n	80078e2 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	212c      	movs	r1, #44	; 0x2c
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	335c      	adds	r3, #92	; 0x5c
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d110      	bne.n	80078e2 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	212c      	movs	r1, #44	; 0x2c
 80078c6:	fb01 f303 	mul.w	r3, r1, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	3361      	adds	r3, #97	; 0x61
 80078ce:	2204      	movs	r2, #4
 80078d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f008 fbda 	bl	8010096 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ee:	461a      	mov	r2, r3
 80078f0:	2310      	movs	r3, #16
 80078f2:	6093      	str	r3, [r2, #8]
 80078f4:	e000      	b.n	80078f8 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80078f6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b088      	sub	sp, #32
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f007 fe63 	bl	800f5ee <USB_ReadChInterrupts>
 8007928:	4603      	mov	r3, r0
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b04      	cmp	r3, #4
 8007930:	d11a      	bne.n	8007968 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	4413      	add	r3, r2
 800793a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793e:	461a      	mov	r2, r3
 8007940:	2304      	movs	r3, #4
 8007942:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	212c      	movs	r1, #44	; 0x2c
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	4413      	add	r3, r2
 8007950:	3361      	adds	r3, #97	; 0x61
 8007952:	2207      	movs	r2, #7
 8007954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f008 fb98 	bl	8010096 <USB_HC_Halt>
 8007966:	e393      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f007 fe3b 	bl	800f5ee <USB_ReadChInterrupts>
 8007978:	4603      	mov	r3, r0
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b20      	cmp	r3, #32
 8007980:	d137      	bne.n	80079f2 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4413      	add	r3, r2
 800798a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798e:	461a      	mov	r2, r3
 8007990:	2320      	movs	r3, #32
 8007992:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	212c      	movs	r1, #44	; 0x2c
 800799a:	fb01 f303 	mul.w	r3, r1, r3
 800799e:	4413      	add	r3, r2
 80079a0:	333d      	adds	r3, #61	; 0x3d
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	f040 8373 	bne.w	8008090 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	212c      	movs	r1, #44	; 0x2c
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	4413      	add	r3, r2
 80079b6:	333d      	adds	r3, #61	; 0x3d
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	212c      	movs	r1, #44	; 0x2c
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	3360      	adds	r3, #96	; 0x60
 80079ca:	2202      	movs	r2, #2
 80079cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	212c      	movs	r1, #44	; 0x2c
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	4413      	add	r3, r2
 80079da:	3361      	adds	r3, #97	; 0x61
 80079dc:	2203      	movs	r2, #3
 80079de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f008 fb53 	bl	8010096 <USB_HC_Halt>
 80079f0:	e34e      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f007 fdf6 	bl	800f5ee <USB_ReadChInterrupts>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0c:	d112      	bne.n	8007a34 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f008 fb32 	bl	8010096 <USB_HC_Halt>
 8007a32:	e32d      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f007 fdd5 	bl	800f5ee <USB_ReadChInterrupts>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d142      	bne.n	8007ad4 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	335c      	adds	r3, #92	; 0x5c
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f007 fdbf 	bl	800f5ee <USB_ReadChInterrupts>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	d111      	bne.n	8007a9e <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	212c      	movs	r1, #44	; 0x2c
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	4413      	add	r3, r2
 8007a86:	333d      	adds	r3, #61	; 0x3d
 8007a88:	2201      	movs	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aaa:	461a      	mov	r2, r3
 8007aac:	2301      	movs	r3, #1
 8007aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	212c      	movs	r1, #44	; 0x2c
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	4413      	add	r3, r2
 8007abc:	3361      	adds	r3, #97	; 0x61
 8007abe:	2201      	movs	r2, #1
 8007ac0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f008 fae2 	bl	8010096 <USB_HC_Halt>
 8007ad2:	e2dd      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f007 fd85 	bl	800f5ee <USB_ReadChInterrupts>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d12c      	bne.n	8007b48 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	212c      	movs	r1, #44	; 0x2c
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	4413      	add	r3, r2
 8007afa:	3361      	adds	r3, #97	; 0x61
 8007afc:	2205      	movs	r2, #5
 8007afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	212c      	movs	r1, #44	; 0x2c
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	333d      	adds	r3, #61	; 0x3d
 8007b0e:	2201      	movs	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	212c      	movs	r1, #44	; 0x2c
 8007b18:	fb01 f303 	mul.w	r3, r1, r3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	335c      	adds	r3, #92	; 0x5c
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f008 fab1 	bl	8010096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b40:	461a      	mov	r2, r3
 8007b42:	2340      	movs	r3, #64	; 0x40
 8007b44:	6093      	str	r3, [r2, #8]
 8007b46:	e2a3      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f007 fd4b 	bl	800f5ee <USB_ReadChInterrupts>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d11a      	bne.n	8007b98 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6e:	461a      	mov	r2, r3
 8007b70:	2308      	movs	r3, #8
 8007b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	212c      	movs	r1, #44	; 0x2c
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	4413      	add	r3, r2
 8007b80:	3361      	adds	r3, #97	; 0x61
 8007b82:	2206      	movs	r2, #6
 8007b84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f008 fa80 	bl	8010096 <USB_HC_Halt>
 8007b96:	e27b      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f007 fd23 	bl	800f5ee <USB_ReadChInterrupts>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b10      	cmp	r3, #16
 8007bb0:	d140      	bne.n	8007c34 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	212c      	movs	r1, #44	; 0x2c
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	335c      	adds	r3, #92	; 0x5c
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	212c      	movs	r1, #44	; 0x2c
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	3361      	adds	r3, #97	; 0x61
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	212c      	movs	r1, #44	; 0x2c
 8007bdc:	fb01 f303 	mul.w	r3, r1, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	333d      	adds	r3, #61	; 0x3d
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d112      	bne.n	8007c10 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	212c      	movs	r1, #44	; 0x2c
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	333c      	adds	r3, #60	; 0x3c
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d108      	bne.n	8007c10 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	212c      	movs	r1, #44	; 0x2c
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	333d      	adds	r3, #61	; 0x3d
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f008 fa3b 	bl	8010096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2310      	movs	r3, #16
 8007c30:	6093      	str	r3, [r2, #8]
 8007c32:	e22d      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f007 fcd5 	bl	800f5ee <USB_ReadChInterrupts>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d164      	bne.n	8007d18 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d111      	bne.n	8007c7a <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	212c      	movs	r1, #44	; 0x2c
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	3361      	adds	r3, #97	; 0x61
 8007c64:	2207      	movs	r2, #7
 8007c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f008 fa0f 	bl	8010096 <USB_HC_Halt>
 8007c78:	e044      	b.n	8007d04 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	212c      	movs	r1, #44	; 0x2c
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	4413      	add	r3, r2
 8007c86:	335c      	adds	r3, #92	; 0x5c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	202c      	movs	r0, #44	; 0x2c
 8007c92:	fb00 f303 	mul.w	r3, r0, r3
 8007c96:	440b      	add	r3, r1
 8007c98:	335c      	adds	r3, #92	; 0x5c
 8007c9a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	212c      	movs	r1, #44	; 0x2c
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	335c      	adds	r3, #92	; 0x5c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d920      	bls.n	8007cf2 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	212c      	movs	r1, #44	; 0x2c
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	335c      	adds	r3, #92	; 0x5c
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	212c      	movs	r1, #44	; 0x2c
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	4413      	add	r3, r2
 8007cce:	3360      	adds	r3, #96	; 0x60
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	b2d9      	uxtb	r1, r3
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	202c      	movs	r0, #44	; 0x2c
 8007cde:	fb00 f303 	mul.w	r3, r0, r3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3360      	adds	r3, #96	; 0x60
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f010 fa1e 	bl	801812c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007cf0:	e008      	b.n	8007d04 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	212c      	movs	r1, #44	; 0x2c
 8007cf8:	fb01 f303 	mul.w	r3, r1, r3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3360      	adds	r3, #96	; 0x60
 8007d00:	2202      	movs	r2, #2
 8007d02:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d10:	461a      	mov	r2, r3
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	6093      	str	r3, [r2, #8]
 8007d16:	e1bb      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f007 fc63 	bl	800f5ee <USB_ReadChInterrupts>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d32:	d11b      	bne.n	8007d6c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	212c      	movs	r1, #44	; 0x2c
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	3361      	adds	r3, #97	; 0x61
 8007d42:	2209      	movs	r2, #9
 8007d44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f008 f9a0 	bl	8010096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d62:	461a      	mov	r2, r3
 8007d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d68:	6093      	str	r3, [r2, #8]
 8007d6a:	e191      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f007 fc39 	bl	800f5ee <USB_ReadChInterrupts>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	f040 8184 	bne.w	8008090 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d94:	461a      	mov	r2, r3
 8007d96:	2302      	movs	r3, #2
 8007d98:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	212c      	movs	r1, #44	; 0x2c
 8007da0:	fb01 f303 	mul.w	r3, r1, r3
 8007da4:	4413      	add	r3, r2
 8007da6:	3361      	adds	r3, #97	; 0x61
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	f040 8087 	bne.w	8007ebe <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	212c      	movs	r1, #44	; 0x2c
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	4413      	add	r3, r2
 8007dbc:	3361      	adds	r3, #97	; 0x61
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	212c      	movs	r1, #44	; 0x2c
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	3360      	adds	r3, #96	; 0x60
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	212c      	movs	r1, #44	; 0x2c
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	4413      	add	r3, r2
 8007de0:	333f      	adds	r3, #63	; 0x3f
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d00a      	beq.n	8007dfe <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	212c      	movs	r1, #44	; 0x2c
 8007dee:	fb01 f303 	mul.w	r3, r1, r3
 8007df2:	4413      	add	r3, r2
 8007df4:	333f      	adds	r3, #63	; 0x3f
 8007df6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	f040 8139 	bne.w	8008070 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d113      	bne.n	8007e2e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	212c      	movs	r1, #44	; 0x2c
 8007e0c:	fb01 f303 	mul.w	r3, r1, r3
 8007e10:	4413      	add	r3, r2
 8007e12:	3355      	adds	r3, #85	; 0x55
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f083 0301 	eor.w	r3, r3, #1
 8007e1a:	b2d8      	uxtb	r0, r3
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	212c      	movs	r1, #44	; 0x2c
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	3355      	adds	r3, #85	; 0x55
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f040 811c 	bne.w	8008070 <HCD_HC_OUT_IRQHandler+0x772>
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	212c      	movs	r1, #44	; 0x2c
 8007e3e:	fb01 f303 	mul.w	r3, r1, r3
 8007e42:	4413      	add	r3, r2
 8007e44:	334c      	adds	r3, #76	; 0x4c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8111 	beq.w	8008070 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	212c      	movs	r1, #44	; 0x2c
 8007e54:	fb01 f303 	mul.w	r3, r1, r3
 8007e58:	4413      	add	r3, r2
 8007e5a:	334c      	adds	r3, #76	; 0x4c
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	202c      	movs	r0, #44	; 0x2c
 8007e64:	fb00 f202 	mul.w	r2, r0, r2
 8007e68:	440a      	add	r2, r1
 8007e6a:	3240      	adds	r2, #64	; 0x40
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3b01      	subs	r3, #1
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	202c      	movs	r0, #44	; 0x2c
 8007e78:	fb00 f202 	mul.w	r2, r0, r2
 8007e7c:	440a      	add	r2, r1
 8007e7e:	3240      	adds	r2, #64	; 0x40
 8007e80:	8812      	ldrh	r2, [r2, #0]
 8007e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80ee 	beq.w	8008070 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	212c      	movs	r1, #44	; 0x2c
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	3355      	adds	r3, #85	; 0x55
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f083 0301 	eor.w	r3, r3, #1
 8007ea8:	b2d8      	uxtb	r0, r3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	212c      	movs	r1, #44	; 0x2c
 8007eb0:	fb01 f303 	mul.w	r3, r1, r3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3355      	adds	r3, #85	; 0x55
 8007eb8:	4602      	mov	r2, r0
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e0d8      	b.n	8008070 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	212c      	movs	r1, #44	; 0x2c
 8007ec4:	fb01 f303 	mul.w	r3, r1, r3
 8007ec8:	4413      	add	r3, r2
 8007eca:	3361      	adds	r3, #97	; 0x61
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d109      	bne.n	8007ee6 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	212c      	movs	r1, #44	; 0x2c
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	4413      	add	r3, r2
 8007ede:	3361      	adds	r3, #97	; 0x61
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e0c4      	b.n	8008070 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	212c      	movs	r1, #44	; 0x2c
 8007eec:	fb01 f303 	mul.w	r3, r1, r3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	3361      	adds	r3, #97	; 0x61
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d112      	bne.n	8007f20 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	212c      	movs	r1, #44	; 0x2c
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	3361      	adds	r3, #97	; 0x61
 8007f08:	2202      	movs	r2, #2
 8007f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	212c      	movs	r1, #44	; 0x2c
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	3360      	adds	r3, #96	; 0x60
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e0a7      	b.n	8008070 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	212c      	movs	r1, #44	; 0x2c
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3361      	adds	r3, #97	; 0x61
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	d112      	bne.n	8007f5a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	212c      	movs	r1, #44	; 0x2c
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	3361      	adds	r3, #97	; 0x61
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	212c      	movs	r1, #44	; 0x2c
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	4413      	add	r3, r2
 8007f52:	3360      	adds	r3, #96	; 0x60
 8007f54:	2202      	movs	r2, #2
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e08a      	b.n	8008070 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	212c      	movs	r1, #44	; 0x2c
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	4413      	add	r3, r2
 8007f66:	3361      	adds	r3, #97	; 0x61
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d112      	bne.n	8007f94 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	212c      	movs	r1, #44	; 0x2c
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	3361      	adds	r3, #97	; 0x61
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	212c      	movs	r1, #44	; 0x2c
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3360      	adds	r3, #96	; 0x60
 8007f8e:	2205      	movs	r2, #5
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e06d      	b.n	8008070 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	212c      	movs	r1, #44	; 0x2c
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3361      	adds	r3, #97	; 0x61
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d009      	beq.n	8007fbc <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	212c      	movs	r1, #44	; 0x2c
 8007fae:	fb01 f303 	mul.w	r3, r1, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3361      	adds	r3, #97	; 0x61
 8007fb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007fb8:	2b09      	cmp	r3, #9
 8007fba:	d168      	bne.n	800808e <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	212c      	movs	r1, #44	; 0x2c
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3361      	adds	r3, #97	; 0x61
 8007fca:	2202      	movs	r2, #2
 8007fcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	212c      	movs	r1, #44	; 0x2c
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	335c      	adds	r3, #92	; 0x5c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	202c      	movs	r0, #44	; 0x2c
 8007fe6:	fb00 f303 	mul.w	r3, r0, r3
 8007fea:	440b      	add	r3, r1
 8007fec:	335c      	adds	r3, #92	; 0x5c
 8007fee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	212c      	movs	r1, #44	; 0x2c
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	335c      	adds	r3, #92	; 0x5c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d912      	bls.n	800802a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	212c      	movs	r1, #44	; 0x2c
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	335c      	adds	r3, #92	; 0x5c
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	212c      	movs	r1, #44	; 0x2c
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	4413      	add	r3, r2
 8008022:	3360      	adds	r3, #96	; 0x60
 8008024:	2204      	movs	r2, #4
 8008026:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008028:	e021      	b.n	800806e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	212c      	movs	r1, #44	; 0x2c
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	4413      	add	r3, r2
 8008036:	3360      	adds	r3, #96	; 0x60
 8008038:	2202      	movs	r2, #2
 800803a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008052:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800805a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008068:	461a      	mov	r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800806e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	b2d9      	uxtb	r1, r3
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	202c      	movs	r0, #44	; 0x2c
 800807a:	fb00 f303 	mul.w	r3, r0, r3
 800807e:	4413      	add	r3, r2
 8008080:	3360      	adds	r3, #96	; 0x60
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f010 f850 	bl	801812c <HAL_HCD_HC_NotifyURBChange_Callback>
 800808c:	e000      	b.n	8008090 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 800808e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008090:	3720      	adds	r7, #32
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b08a      	sub	sp, #40	; 0x28
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	0c5b      	lsrs	r3, r3, #17
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	091b      	lsrs	r3, r3, #4
 80080c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d004      	beq.n	80080dc <HCD_RXQLVL_IRQHandler+0x46>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	f000 80a9 	beq.w	800822c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80080da:	e0aa      	b.n	8008232 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80a6 	beq.w	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	212c      	movs	r1, #44	; 0x2c
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	3344      	adds	r3, #68	; 0x44
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 809b 	beq.w	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	212c      	movs	r1, #44	; 0x2c
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	4413      	add	r3, r2
 8008106:	3350      	adds	r3, #80	; 0x50
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	441a      	add	r2, r3
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	202c      	movs	r0, #44	; 0x2c
 8008114:	fb00 f303 	mul.w	r3, r0, r3
 8008118:	440b      	add	r3, r1
 800811a:	334c      	adds	r3, #76	; 0x4c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d87a      	bhi.n	8008218 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	212c      	movs	r1, #44	; 0x2c
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	3344      	adds	r3, #68	; 0x44
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	b292      	uxth	r2, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f007 f8b0 	bl	800f2a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	212c      	movs	r1, #44	; 0x2c
 8008146:	fb01 f303 	mul.w	r3, r1, r3
 800814a:	4413      	add	r3, r2
 800814c:	3344      	adds	r3, #68	; 0x44
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	441a      	add	r2, r3
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	202c      	movs	r0, #44	; 0x2c
 800815a:	fb00 f303 	mul.w	r3, r0, r3
 800815e:	440b      	add	r3, r1
 8008160:	3344      	adds	r3, #68	; 0x44
 8008162:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	212c      	movs	r1, #44	; 0x2c
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	4413      	add	r3, r2
 8008170:	3350      	adds	r3, #80	; 0x50
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	441a      	add	r2, r3
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	202c      	movs	r0, #44	; 0x2c
 800817e:	fb00 f303 	mul.w	r3, r0, r3
 8008182:	440b      	add	r3, r1
 8008184:	3350      	adds	r3, #80	; 0x50
 8008186:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	0cdb      	lsrs	r3, r3, #19
 8008198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800819c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	212c      	movs	r1, #44	; 0x2c
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	4413      	add	r3, r2
 80081aa:	3340      	adds	r3, #64	; 0x40
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d13c      	bne.n	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d039      	beq.n	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e8:	461a      	mov	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	212c      	movs	r1, #44	; 0x2c
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	4413      	add	r3, r2
 80081fa:	3354      	adds	r3, #84	; 0x54
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f083 0301 	eor.w	r3, r3, #1
 8008202:	b2d8      	uxtb	r0, r3
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	212c      	movs	r1, #44	; 0x2c
 800820a:	fb01 f303 	mul.w	r3, r1, r3
 800820e:	4413      	add	r3, r2
 8008210:	3354      	adds	r3, #84	; 0x54
 8008212:	4602      	mov	r2, r0
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	e00b      	b.n	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	212c      	movs	r1, #44	; 0x2c
 800821e:	fb01 f303 	mul.w	r3, r1, r3
 8008222:	4413      	add	r3, r2
 8008224:	3360      	adds	r3, #96	; 0x60
 8008226:	2204      	movs	r2, #4
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e001      	b.n	8008230 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8008230:	bf00      	nop
  }
}
 8008232:	bf00      	nop
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008266:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b02      	cmp	r3, #2
 8008270:	d10b      	bne.n	800828a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b01      	cmp	r3, #1
 800827a:	d102      	bne.n	8008282 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f00f ff39 	bl	80180f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f043 0302 	orr.w	r3, r3, #2
 8008288:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b08      	cmp	r3, #8
 8008292:	d132      	bne.n	80082fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f043 0308 	orr.w	r3, r3, #8
 800829a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d126      	bne.n	80082f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d113      	bne.n	80082d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80082b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082b8:	d106      	bne.n	80082c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2102      	movs	r1, #2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f007 fbad 	bl	800fa20 <USB_InitFSLSPClkSel>
 80082c6:	e011      	b.n	80082ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2101      	movs	r1, #1
 80082ce:	4618      	mov	r0, r3
 80082d0:	f007 fba6 	bl	800fa20 <USB_InitFSLSPClkSel>
 80082d4:	e00a      	b.n	80082ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d106      	bne.n	80082ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082e4:	461a      	mov	r2, r3
 80082e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80082ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f00f ff2b 	bl	8018148 <HAL_HCD_PortEnabled_Callback>
 80082f2:	e002      	b.n	80082fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f00f ff35 	bl	8018164 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b20      	cmp	r3, #32
 8008302:	d103      	bne.n	800830c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f043 0320 	orr.w	r3, r3, #32
 800830a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008312:	461a      	mov	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6013      	str	r3, [r2, #0]
}
 8008318:	bf00      	nop
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	b08f      	sub	sp, #60	; 0x3c
 8008324:	af0a      	add	r7, sp, #40	; 0x28
 8008326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e116      	b.n	8008560 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d106      	bne.n	8008352 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f00f fa89 	bl	8017864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2203      	movs	r2, #3
 8008356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f005 ff40 	bl	800e1f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	687e      	ldr	r6, [r7, #4]
 800837e:	466d      	mov	r5, sp
 8008380:	f106 0410 	add.w	r4, r6, #16
 8008384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800838a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800838c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008390:	e885 0003 	stmia.w	r5, {r0, r1}
 8008394:	1d33      	adds	r3, r6, #4
 8008396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008398:	6838      	ldr	r0, [r7, #0]
 800839a:	f005 fe21 	bl	800dfe0 <USB_CoreInit>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0d7      	b.n	8008560 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f005 ff2e 	bl	800e218 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e04a      	b.n	8008458 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083c2:	7bfa      	ldrb	r2, [r7, #15]
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	333d      	adds	r3, #61	; 0x3d
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083d6:	7bfa      	ldrb	r2, [r7, #15]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	333c      	adds	r3, #60	; 0x3c
 80083e6:	7bfa      	ldrb	r2, [r7, #15]
 80083e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083ea:	7bfa      	ldrb	r2, [r7, #15]
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	b298      	uxth	r0, r3
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	3344      	adds	r3, #68	; 0x44
 80083fe:	4602      	mov	r2, r0
 8008400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008402:	7bfa      	ldrb	r2, [r7, #15]
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3340      	adds	r3, #64	; 0x40
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008416:	7bfa      	ldrb	r2, [r7, #15]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3348      	adds	r3, #72	; 0x48
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800842a:	7bfa      	ldrb	r2, [r7, #15]
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	334c      	adds	r3, #76	; 0x4c
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800843e:	7bfa      	ldrb	r2, [r7, #15]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3354      	adds	r3, #84	; 0x54
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	3301      	adds	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	7bfa      	ldrb	r2, [r7, #15]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	429a      	cmp	r2, r3
 8008460:	d3af      	bcc.n	80083c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
 8008466:	e044      	b.n	80084f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008468:	7bfa      	ldrb	r2, [r7, #15]
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800847e:	7bfa      	ldrb	r2, [r7, #15]
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008494:	7bfa      	ldrb	r2, [r7, #15]
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084aa:	7bfa      	ldrb	r2, [r7, #15]
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	4613      	mov	r3, r2
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084c0:	7bfa      	ldrb	r2, [r7, #15]
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	4613      	mov	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084d6:	7bfa      	ldrb	r2, [r7, #15]
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	3301      	adds	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
 80084f2:	7bfa      	ldrb	r2, [r7, #15]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d3b5      	bcc.n	8008468 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	687e      	ldr	r6, [r7, #4]
 8008504:	466d      	mov	r5, sp
 8008506:	f106 0410 	add.w	r4, r6, #16
 800850a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800850c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800850e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008516:	e885 0003 	stmia.w	r5, {r0, r1}
 800851a:	1d33      	adds	r3, r6, #4
 800851c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800851e:	6838      	ldr	r0, [r7, #0]
 8008520:	f005 fec6 	bl	800e2b0 <USB_DevInit>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e014      	b.n	8008560 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	2b01      	cmp	r3, #1
 800854c:	d102      	bne.n	8008554 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 f97a 	bl	8009848 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f007 f814 	bl	800f586 <USB_DevDisconnect>

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008568 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_PCD_Start+0x16>
 800857a:	2302      	movs	r3, #2
 800857c:	e012      	b.n	80085a4 <HAL_PCD_Start+0x3c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f005 fe22 	bl	800e1d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f006 ffd5 	bl	800f544 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b08d      	sub	sp, #52	; 0x34
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f007 f8b4 	bl	800f730 <USB_GetMode>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 84b7 	bne.w	8008f3e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f006 fff7 	bl	800f5c8 <USB_ReadInterrupts>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 84ad 	beq.w	8008f3c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f006 ffe4 	bl	800f5c8 <USB_ReadInterrupts>
 8008600:	4603      	mov	r3, r0
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d107      	bne.n	800861a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f002 0202 	and.w	r2, r2, #2
 8008618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f006 ffd2 	bl	800f5c8 <USB_ReadInterrupts>
 8008624:	4603      	mov	r3, r0
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b10      	cmp	r3, #16
 800862c:	d161      	bne.n	80086f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0210 	bic.w	r2, r2, #16
 800863c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4413      	add	r3, r2
 800865a:	3304      	adds	r3, #4
 800865c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	0c5b      	lsrs	r3, r3, #17
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	2b02      	cmp	r3, #2
 8008668:	d124      	bne.n	80086b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008670:	4013      	ands	r3, r2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d035      	beq.n	80086e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008684:	b29b      	uxth	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	6a38      	ldr	r0, [r7, #32]
 800868a:	f006 fe09 	bl	800f2a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	691a      	ldr	r2, [r3, #16]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	091b      	lsrs	r3, r3, #4
 8008696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800869a:	441a      	add	r2, r3
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	091b      	lsrs	r3, r3, #4
 80086a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ac:	441a      	add	r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	621a      	str	r2, [r3, #32]
 80086b2:	e016      	b.n	80086e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	0c5b      	lsrs	r3, r3, #17
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d110      	bne.n	80086e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086c6:	2208      	movs	r2, #8
 80086c8:	4619      	mov	r1, r3
 80086ca:	6a38      	ldr	r0, [r7, #32]
 80086cc:	f006 fde8 	bl	800f2a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086dc:	441a      	add	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0210 	orr.w	r2, r2, #16
 80086f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f006 ff66 	bl	800f5c8 <USB_ReadInterrupts>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008706:	f040 80a7 	bne.w	8008858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f006 ff8c 	bl	800f630 <USB_ReadDevAllOutEpInterrupt>
 8008718:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800871a:	e099      	b.n	8008850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 808e 	beq.w	8008844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f006 ffb0 	bl	800f698 <USB_ReadDevOutEPInterrupt>
 8008738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	2301      	movs	r3, #1
 8008754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 feef 	bl	800953c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	2308      	movs	r3, #8
 8008778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800877a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 ffc5 	bl	800970c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	461a      	mov	r2, r3
 800879a:	2310      	movs	r3, #16
 800879c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d030      	beq.n	800880a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d109      	bne.n	80087c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	78db      	ldrb	r3, [r3, #3]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d108      	bne.n	80087f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f00f f950 	bl	8017a98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	461a      	mov	r2, r3
 8008806:	2302      	movs	r3, #2
 8008808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d008      	beq.n	8008826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008820:	461a      	mov	r2, r3
 8008822:	2320      	movs	r3, #32
 8008824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d009      	beq.n	8008844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	3301      	adds	r3, #1
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f af62 	bne.w	800871c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f006 feb3 	bl	800f5c8 <USB_ReadInterrupts>
 8008862:	4603      	mov	r3, r0
 8008864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800886c:	f040 80db 	bne.w	8008a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f006 fef5 	bl	800f664 <USB_ReadDevAllInEpInterrupt>
 800887a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008880:	e0cd      	b.n	8008a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 80c2 	beq.w	8008a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f006 ff1b 	bl	800f6d4 <USB_ReadDevInEPInterrupt>
 800889e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d057      	beq.n	800895a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ca:	4013      	ands	r3, r2
 80088cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088da:	461a      	mov	r2, r3
 80088dc:	2301      	movs	r3, #1
 80088de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d132      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	4613      	mov	r3, r2
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	334c      	adds	r3, #76	; 0x4c
 80088f8:	6819      	ldr	r1, [r3, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	4613      	mov	r3, r2
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4403      	add	r3, r0
 8008908:	3348      	adds	r3, #72	; 0x48
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4419      	add	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	4613      	mov	r3, r2
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4403      	add	r3, r0
 800891c:	334c      	adds	r3, #76	; 0x4c
 800891e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d113      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	3354      	adds	r3, #84	; 0x54
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008946:	461a      	mov	r2, r3
 8008948:	2101      	movs	r1, #1
 800894a:	f006 ff23 	bl	800f794 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f00f f81a 	bl	801798e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f003 0308 	and.w	r3, r3, #8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008970:	461a      	mov	r2, r3
 8008972:	2308      	movs	r3, #8
 8008974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d008      	beq.n	8008992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	461a      	mov	r2, r3
 800898e:	2310      	movs	r3, #16
 8008990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	461a      	mov	r2, r3
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d023      	beq.n	8008a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80089b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ba:	6a38      	ldr	r0, [r7, #32]
 80089bc:	f005 fdd6 	bl	800e56c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	3338      	adds	r3, #56	; 0x38
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	3304      	adds	r3, #4
 80089d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f00f f867 	bl	8017abc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fa:	461a      	mov	r2, r3
 80089fc:	2302      	movs	r3, #2
 80089fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fd08 	bl	8009422 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	3301      	adds	r3, #1
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f af2e 	bne.w	8008882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f006 fdcc 	bl	800f5c8 <USB_ReadInterrupts>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a3a:	d122      	bne.n	8008a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d108      	bne.n	8008a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f00f f9e7 	bl	8017e38 <HAL_PCDEx_LPM_Callback>
 8008a6a:	e002      	b.n	8008a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f00f f805 	bl	8017a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f006 fd9e 	bl	800f5c8 <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a96:	d112      	bne.n	8008abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f00e ffc1 	bl	8017a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f006 fd80 	bl	800f5c8 <USB_ReadInterrupts>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ad2:	d121      	bne.n	8008b18 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695a      	ldr	r2, [r3, #20]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008ae2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d111      	bne.n	8008b12 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afc:	089b      	lsrs	r3, r3, #2
 8008afe:	f003 020f 	and.w	r2, r3, #15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f00f f994 	bl	8017e38 <HAL_PCDEx_LPM_Callback>
 8008b10:	e002      	b.n	8008b18 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f00e ff8c 	bl	8017a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f006 fd53 	bl	800f5c8 <USB_ReadInterrupts>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2c:	f040 80b7 	bne.w	8008c9e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b3e:	f023 0301 	bic.w	r3, r3, #1
 8008b42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2110      	movs	r1, #16
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f005 fd0e 	bl	800e56c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b54:	e046      	b.n	8008be4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b62:	461a      	mov	r2, r3
 8008b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	3301      	adds	r3, #1
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d3b3      	bcc.n	8008b56 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1a:	f043 030b 	orr.w	r3, r3, #11
 8008c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c30:	f043 030b 	orr.w	r3, r3, #11
 8008c34:	6453      	str	r3, [r2, #68]	; 0x44
 8008c36:	e015      	b.n	8008c64 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	4619      	mov	r1, r3
 8008c48:	f242 032b 	movw	r3, #8235	; 0x202b
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5e:	f043 030b 	orr.w	r3, r3, #11
 8008c62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f006 fd83 	bl	800f794 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f006 fc90 	bl	800f5c8 <USB_ReadInterrupts>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb2:	d124      	bne.n	8008cfe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f006 fd47 	bl	800f74c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f005 fccf 	bl	800e666 <USB_GetDevSpeed>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681c      	ldr	r4, [r3, #0]
 8008cd4:	f001 fad0 	bl	800a278 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f005 f9d4 	bl	800e090 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f00e fe78 	bl	80179de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f006 fc60 	bl	800f5c8 <USB_ReadInterrupts>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d10a      	bne.n	8008d28 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f00e fe55 	bl	80179c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f002 0208 	and.w	r2, r2, #8
 8008d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f006 fc4b 	bl	800f5c8 <USB_ReadInterrupts>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d122      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d48:	2301      	movs	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4c:	e014      	b.n	8008d78 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d105      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fb27 	bl	80093c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	3301      	adds	r3, #1
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3e5      	bcc.n	8008d4e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f006 fc1e 	bl	800f5c8 <USB_ReadInterrupts>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d96:	d13b      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d98:	2301      	movs	r3, #1
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9c:	e02b      	b.n	8008df6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	4613      	mov	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3340      	adds	r3, #64	; 0x40
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d115      	bne.n	8008df0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da12      	bge.n	8008df0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	333f      	adds	r3, #63	; 0x3f
 8008dda:	2201      	movs	r2, #1
 8008ddc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fae8 	bl	80093c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	3301      	adds	r3, #1
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3ce      	bcc.n	8008d9e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f006 fbd7 	bl	800f5c8 <USB_ReadInterrupts>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e24:	d155      	bne.n	8008ed2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e26:	2301      	movs	r3, #1
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	e045      	b.n	8008eb8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d12e      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da2b      	bge.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d121      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e72:	4613      	mov	r3, r2
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008eae:	6053      	str	r3, [r2, #4]
            break;
 8008eb0:	e007      	b.n	8008ec2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d3b4      	bcc.n	8008e2c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695a      	ldr	r2, [r3, #20]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f006 fb76 	bl	800f5c8 <USB_ReadInterrupts>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee6:	d10a      	bne.n	8008efe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f00e fdf9 	bl	8017ae0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f006 fb60 	bl	800f5c8 <USB_ReadInterrupts>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d115      	bne.n	8008f3e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f00e fde9 	bl	8017afc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6859      	ldr	r1, [r3, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	e000      	b.n	8008f3e <HAL_PCD_IRQHandler+0x992>
      return;
 8008f3c:	bf00      	nop
    }
  }
}
 8008f3e:	3734      	adds	r7, #52	; 0x34
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}

08008f44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_PCD_SetAddress+0x1a>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e013      	b.n	8008f86 <HAL_PCD_SetAddress+0x42>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f006 fabe 	bl	800f4f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	4608      	mov	r0, r1
 8008f98:	4611      	mov	r1, r2
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	70fb      	strb	r3, [r7, #3]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	803b      	strh	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	da0f      	bge.n	8008fd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	4613      	mov	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	3338      	adds	r3, #56	; 0x38
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	705a      	strb	r2, [r3, #1]
 8008fd2:	e00f      	b.n	8008ff4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	f003 020f 	and.w	r2, r3, #15
 8008fda:	4613      	mov	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009000:	883a      	ldrh	r2, [r7, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	78ba      	ldrb	r2, [r7, #2]
 800900a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800901e:	78bb      	ldrb	r3, [r7, #2]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d102      	bne.n	800902a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_PCD_EP_Open+0xaa>
 8009034:	2302      	movs	r3, #2
 8009036:	e00e      	b.n	8009056 <HAL_PCD_EP_Open+0xc8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	4618      	mov	r0, r3
 8009048:	f005 fb32 	bl	800e6b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009054:	7afb      	ldrb	r3, [r7, #11]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800906a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906e:	2b00      	cmp	r3, #0
 8009070:	da0f      	bge.n	8009092 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	3338      	adds	r3, #56	; 0x38
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	3304      	adds	r3, #4
 8009088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	705a      	strb	r2, [r3, #1]
 8009090:	e00f      	b.n	80090b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_PCD_EP_Close+0x6e>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e00e      	b.n	80090ea <HAL_PCD_EP_Close+0x8c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f005 fb70 	bl	800e7c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	460b      	mov	r3, r1
 8009100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	4613      	mov	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	3304      	adds	r3, #4
 800911a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	b2da      	uxtb	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d102      	bne.n	800914e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	461a      	mov	r2, r3
 8009164:	6979      	ldr	r1, [r7, #20]
 8009166:	f005 fe57 	bl	800ee18 <USB_EP0StartXfer>
 800916a:	e008      	b.n	800917e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	6979      	ldr	r1, [r7, #20]
 800917a:	f005 fbfd 	bl	800e978 <USB_EPStartXfer>
  }

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	f003 020f 	and.w	r2, r3, #15
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4613      	mov	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	440b      	add	r3, r1
 80091a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80091aa:	681b      	ldr	r3, [r3, #0]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	460b      	mov	r3, r1
 80091c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	f003 020f 	and.w	r2, r3, #15
 80091ce:	4613      	mov	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	3338      	adds	r3, #56	; 0x38
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	3304      	adds	r3, #4
 80091de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2200      	movs	r2, #0
 80091f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2201      	movs	r2, #1
 80091f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d102      	bne.n	8009212 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009212:	7afb      	ldrb	r3, [r7, #11]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	b2db      	uxtb	r3, r3
 8009226:	461a      	mov	r2, r3
 8009228:	6979      	ldr	r1, [r7, #20]
 800922a:	f005 fdf5 	bl	800ee18 <USB_EP0StartXfer>
 800922e:	e008      	b.n	8009242 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	6979      	ldr	r1, [r7, #20]
 800923e:	f005 fb9b 	bl	800e978 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 020f 	and.w	r2, r3, #15
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	429a      	cmp	r2, r3
 8009264:	d901      	bls.n	800926a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e050      	b.n	800930c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800926a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926e:	2b00      	cmp	r3, #0
 8009270:	da0f      	bge.n	8009292 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	f003 020f 	and.w	r2, r3, #15
 8009278:	4613      	mov	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	3338      	adds	r3, #56	; 0x38
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	4413      	add	r3, r2
 8009286:	3304      	adds	r3, #4
 8009288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	705a      	strb	r2, [r3, #1]
 8009290:	e00d      	b.n	80092ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	4613      	mov	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	3304      	adds	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <HAL_PCD_EP_SetStall+0x82>
 80092ca:	2302      	movs	r3, #2
 80092cc:	e01e      	b.n	800930c <HAL_PCD_EP_SetStall+0xc0>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	4618      	mov	r0, r3
 80092de:	f006 f837 	bl	800f350 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	b2d9      	uxtb	r1, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092fc:	461a      	mov	r2, r3
 80092fe:	f006 fa49 	bl	800f794 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	f003 020f 	and.w	r2, r3, #15
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	429a      	cmp	r2, r3
 800932c:	d901      	bls.n	8009332 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e042      	b.n	80093b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009336:	2b00      	cmp	r3, #0
 8009338:	da0f      	bge.n	800935a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	f003 020f 	and.w	r2, r3, #15
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	3338      	adds	r3, #56	; 0x38
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	3304      	adds	r3, #4
 8009350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	705a      	strb	r2, [r3, #1]
 8009358:	e00f      	b.n	800937a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	f003 020f 	and.w	r2, r3, #15
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	4413      	add	r3, r2
 8009370:	3304      	adds	r3, #4
 8009372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	f003 030f 	and.w	r3, r3, #15
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_PCD_EP_ClrStall+0x86>
 8009396:	2302      	movs	r3, #2
 8009398:	e00e      	b.n	80093b8 <HAL_PCD_EP_ClrStall+0xa4>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f006 f83f 	bl	800f42c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80093cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da0c      	bge.n	80093ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	3338      	adds	r3, #56	; 0x38
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e00c      	b.n	8009408 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	f003 020f 	and.w	r2, r3, #15
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	4413      	add	r3, r2
 8009404:	3304      	adds	r3, #4
 8009406:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68f9      	ldr	r1, [r7, #12]
 800940e:	4618      	mov	r0, r3
 8009410:	f005 fe5e 	bl	800f0d0 <USB_EPStopXfer>
 8009414:	4603      	mov	r3, r0
 8009416:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009418:	7afb      	ldrb	r3, [r7, #11]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b08a      	sub	sp, #40	; 0x28
 8009426:	af02      	add	r7, sp, #8
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	3338      	adds	r3, #56	; 0x38
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a1a      	ldr	r2, [r3, #32]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	429a      	cmp	r2, r3
 8009454:	d901      	bls.n	800945a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e06c      	b.n	8009534 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	429a      	cmp	r2, r3
 800946e:	d902      	bls.n	8009476 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	3303      	adds	r3, #3
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800947e:	e02b      	b.n	80094d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	429a      	cmp	r2, r3
 8009494:	d902      	bls.n	800949c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	3303      	adds	r3, #3
 80094a0:	089b      	lsrs	r3, r3, #2
 80094a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6919      	ldr	r1, [r3, #16]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	4603      	mov	r3, r0
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f005 feb2 	bl	800f224 <USB_WritePacket>

    ep->xfer_buff  += len;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	441a      	add	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d809      	bhi.n	8009502 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1a      	ldr	r2, [r3, #32]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d203      	bcs.n	8009502 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1be      	bne.n	8009480 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	429a      	cmp	r2, r3
 800950c:	d811      	bhi.n	8009532 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2201      	movs	r2, #1
 8009516:	fa02 f303 	lsl.w	r3, r2, r3
 800951a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	43db      	mvns	r3, r3
 8009528:	6939      	ldr	r1, [r7, #16]
 800952a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800952e:	4013      	ands	r3, r2
 8009530:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	333c      	adds	r3, #60	; 0x3c
 8009554:	3304      	adds	r3, #4
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d17b      	bne.n	800966a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d015      	beq.n	80095a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	4a61      	ldr	r2, [pc, #388]	; (8009704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	f240 80b9 	bls.w	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80b3 	beq.w	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959e:	461a      	mov	r2, r3
 80095a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a4:	6093      	str	r3, [r2, #8]
 80095a6:	e0a7      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	461a      	mov	r2, r3
 80095c0:	2320      	movs	r3, #32
 80095c2:	6093      	str	r3, [r2, #8]
 80095c4:	e098      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f040 8093 	bne.w	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4a4b      	ldr	r2, [pc, #300]	; (8009704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d90f      	bls.n	80095fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	461a      	mov	r2, r3
 80095f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f6:	6093      	str	r3, [r2, #8]
 80095f8:	e07e      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	3304      	adds	r3, #4
 800960e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	0159      	lsls	r1, r3, #5
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	440b      	add	r3, r1
 800961c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d114      	bne.n	800965c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009644:	461a      	mov	r2, r3
 8009646:	2101      	movs	r1, #1
 8009648:	f006 f8a4 	bl	800f794 <USB_EP0_OutStart>
 800964c:	e006      	b.n	800965c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	441a      	add	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f00e f978 	bl	8017958 <HAL_PCD_DataOutStageCallback>
 8009668:	e046      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d124      	bne.n	80096bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	461a      	mov	r2, r3
 800968a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800968e:	6093      	str	r3, [r2, #8]
 8009690:	e032      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	461a      	mov	r2, r3
 80096aa:	2320      	movs	r3, #32
 80096ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f00e f94f 	bl	8017958 <HAL_PCD_DataOutStageCallback>
 80096ba:	e01d      	b.n	80096f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d114      	bne.n	80096ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	4613      	mov	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d108      	bne.n	80096ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096e4:	461a      	mov	r2, r3
 80096e6:	2100      	movs	r1, #0
 80096e8:	f006 f854 	bl	800f794 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f00e f930 	bl	8017958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	4f54300a 	.word	0x4f54300a
 8009708:	4f54310a 	.word	0x4f54310a

0800970c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	333c      	adds	r3, #60	; 0x3c
 8009724:	3304      	adds	r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4413      	add	r3, r2
 8009732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a15      	ldr	r2, [pc, #84]	; (8009794 <PCD_EP_OutSetupPacket_int+0x88>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d90e      	bls.n	8009760 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	461a      	mov	r2, r3
 800975a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f00e f8e7 	bl	8017934 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4a0a      	ldr	r2, [pc, #40]	; (8009794 <PCD_EP_OutSetupPacket_int+0x88>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d90c      	bls.n	8009788 <PCD_EP_OutSetupPacket_int+0x7c>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d108      	bne.n	8009788 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009780:	461a      	mov	r2, r3
 8009782:	2101      	movs	r1, #1
 8009784:	f006 f806 	bl	800f794 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	4f54300a 	.word	0x4f54300a

08009798 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
 80097a4:	4613      	mov	r3, r2
 80097a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d107      	bne.n	80097c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80097b6:	883b      	ldrh	r3, [r7, #0]
 80097b8:	0419      	lsls	r1, r3, #16
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28
 80097c4:	e028      	b.n	8009818 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	0c1b      	lsrs	r3, r3, #16
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
 80097d8:	e00d      	b.n	80097f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	3340      	adds	r3, #64	; 0x40
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	0c1b      	lsrs	r3, r3, #16
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	3301      	adds	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]
 80097f6:	7bfa      	ldrb	r2, [r7, #15]
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d3ec      	bcc.n	80097da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009800:	883b      	ldrh	r3, [r7, #0]
 8009802:	0418      	lsls	r0, r3, #16
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6819      	ldr	r1, [r3, #0]
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	3b01      	subs	r3, #1
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	4302      	orrs	r2, r0
 8009810:	3340      	adds	r3, #64	; 0x40
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	887a      	ldrh	r2, [r7, #2]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009876:	4b05      	ldr	r3, [pc, #20]	; (800988c <HAL_PCDEx_ActivateLPM+0x44>)
 8009878:	4313      	orrs	r3, r2
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	10000003 	.word	0x10000003

08009890 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800989a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989e:	6013      	str	r3, [r2, #0]
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40007000 	.word	0x40007000

080098b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80098ba:	4b23      	ldr	r3, [pc, #140]	; (8009948 <HAL_PWREx_EnableOverDrive+0x98>)
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	4a22      	ldr	r2, [pc, #136]	; (8009948 <HAL_PWREx_EnableOverDrive+0x98>)
 80098c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c4:	6413      	str	r3, [r2, #64]	; 0x40
 80098c6:	4b20      	ldr	r3, [pc, #128]	; (8009948 <HAL_PWREx_EnableOverDrive+0x98>)
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80098d2:	4b1e      	ldr	r3, [pc, #120]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 80098d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098de:	f7fb fe89 	bl	80055f4 <HAL_GetTick>
 80098e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098e4:	e009      	b.n	80098fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80098e6:	f7fb fe85 	bl	80055f4 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098f4:	d901      	bls.n	80098fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e022      	b.n	8009940 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009906:	d1ee      	bne.n	80098e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009908:	4b10      	ldr	r3, [pc, #64]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a0f      	ldr	r2, [pc, #60]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009912:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009914:	f7fb fe6e 	bl	80055f4 <HAL_GetTick>
 8009918:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800991a:	e009      	b.n	8009930 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800991c:	f7fb fe6a 	bl	80055f4 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800992a:	d901      	bls.n	8009930 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e007      	b.n	8009940 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800993c:	d1ee      	bne.n	800991c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40023800 	.word	0x40023800
 800994c:	40007000 	.word	0x40007000

08009950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009958:	2300      	movs	r3, #0
 800995a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e291      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8087 	beq.w	8009a82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009974:	4b96      	ldr	r3, [pc, #600]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f003 030c 	and.w	r3, r3, #12
 800997c:	2b04      	cmp	r3, #4
 800997e:	d00c      	beq.n	800999a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009980:	4b93      	ldr	r3, [pc, #588]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 030c 	and.w	r3, r3, #12
 8009988:	2b08      	cmp	r3, #8
 800998a:	d112      	bne.n	80099b2 <HAL_RCC_OscConfig+0x62>
 800998c:	4b90      	ldr	r3, [pc, #576]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009998:	d10b      	bne.n	80099b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800999a:	4b8d      	ldr	r3, [pc, #564]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d06c      	beq.n	8009a80 <HAL_RCC_OscConfig+0x130>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d168      	bne.n	8009a80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e26b      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ba:	d106      	bne.n	80099ca <HAL_RCC_OscConfig+0x7a>
 80099bc:	4b84      	ldr	r3, [pc, #528]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a83      	ldr	r2, [pc, #524]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	e02e      	b.n	8009a28 <HAL_RCC_OscConfig+0xd8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <HAL_RCC_OscConfig+0x9c>
 80099d2:	4b7f      	ldr	r3, [pc, #508]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a7e      	ldr	r2, [pc, #504]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4b7c      	ldr	r3, [pc, #496]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a7b      	ldr	r2, [pc, #492]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	e01d      	b.n	8009a28 <HAL_RCC_OscConfig+0xd8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099f4:	d10c      	bne.n	8009a10 <HAL_RCC_OscConfig+0xc0>
 80099f6:	4b76      	ldr	r3, [pc, #472]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a75      	ldr	r2, [pc, #468]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	4b73      	ldr	r3, [pc, #460]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a72      	ldr	r2, [pc, #456]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e00b      	b.n	8009a28 <HAL_RCC_OscConfig+0xd8>
 8009a10:	4b6f      	ldr	r3, [pc, #444]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a6e      	ldr	r2, [pc, #440]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	4b6c      	ldr	r3, [pc, #432]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a6b      	ldr	r2, [pc, #428]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d013      	beq.n	8009a58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a30:	f7fb fde0 	bl	80055f4 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a38:	f7fb fddc 	bl	80055f4 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b64      	cmp	r3, #100	; 0x64
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e21f      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a4a:	4b61      	ldr	r3, [pc, #388]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0f0      	beq.n	8009a38 <HAL_RCC_OscConfig+0xe8>
 8009a56:	e014      	b.n	8009a82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a58:	f7fb fdcc 	bl	80055f4 <HAL_GetTick>
 8009a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a60:	f7fb fdc8 	bl	80055f4 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b64      	cmp	r3, #100	; 0x64
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e20b      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a72:	4b57      	ldr	r3, [pc, #348]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f0      	bne.n	8009a60 <HAL_RCC_OscConfig+0x110>
 8009a7e:	e000      	b.n	8009a82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d069      	beq.n	8009b62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a8e:	4b50      	ldr	r3, [pc, #320]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f003 030c 	and.w	r3, r3, #12
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a9a:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 030c 	and.w	r3, r3, #12
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d11c      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x190>
 8009aa6:	4b4a      	ldr	r3, [pc, #296]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d116      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ab2:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <HAL_RCC_OscConfig+0x17a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d001      	beq.n	8009aca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e1df      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aca:	4b41      	ldr	r3, [pc, #260]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	493d      	ldr	r1, [pc, #244]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ade:	e040      	b.n	8009b62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d023      	beq.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ae8:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a38      	ldr	r2, [pc, #224]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af4:	f7fb fd7e 	bl	80055f4 <HAL_GetTick>
 8009af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009afa:	e008      	b.n	8009b0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009afc:	f7fb fd7a 	bl	80055f4 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d901      	bls.n	8009b0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e1bd      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b0e:	4b30      	ldr	r3, [pc, #192]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0f0      	beq.n	8009afc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b1a:	4b2d      	ldr	r3, [pc, #180]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	4929      	ldr	r1, [pc, #164]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	600b      	str	r3, [r1, #0]
 8009b2e:	e018      	b.n	8009b62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b30:	4b27      	ldr	r3, [pc, #156]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a26      	ldr	r2, [pc, #152]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b36:	f023 0301 	bic.w	r3, r3, #1
 8009b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fb fd5a 	bl	80055f4 <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b44:	f7fb fd56 	bl	80055f4 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e199      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b56:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0308 	and.w	r3, r3, #8
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d038      	beq.n	8009be0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d019      	beq.n	8009baa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b76:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7a:	4a15      	ldr	r2, [pc, #84]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b7c:	f043 0301 	orr.w	r3, r3, #1
 8009b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b82:	f7fb fd37 	bl	80055f4 <HAL_GetTick>
 8009b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b88:	e008      	b.n	8009b9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b8a:	f7fb fd33 	bl	80055f4 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d901      	bls.n	8009b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e176      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0f0      	beq.n	8009b8a <HAL_RCC_OscConfig+0x23a>
 8009ba8:	e01a      	b.n	8009be0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bae:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb6:	f7fb fd1d 	bl	80055f4 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bbc:	e00a      	b.n	8009bd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bbe:	f7fb fd19 	bl	80055f4 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d903      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e15c      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
 8009bd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bd4:	4b91      	ldr	r3, [pc, #580]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1ee      	bne.n	8009bbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80a4 	beq.w	8009d36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bee:	4b8b      	ldr	r3, [pc, #556]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10d      	bne.n	8009c16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bfa:	4b88      	ldr	r3, [pc, #544]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	4a87      	ldr	r2, [pc, #540]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c04:	6413      	str	r3, [r2, #64]	; 0x40
 8009c06:	4b85      	ldr	r3, [pc, #532]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c0e:	60bb      	str	r3, [r7, #8]
 8009c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c12:	2301      	movs	r3, #1
 8009c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c16:	4b82      	ldr	r3, [pc, #520]	; (8009e20 <HAL_RCC_OscConfig+0x4d0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d118      	bne.n	8009c54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009c22:	4b7f      	ldr	r3, [pc, #508]	; (8009e20 <HAL_RCC_OscConfig+0x4d0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a7e      	ldr	r2, [pc, #504]	; (8009e20 <HAL_RCC_OscConfig+0x4d0>)
 8009c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c2e:	f7fb fce1 	bl	80055f4 <HAL_GetTick>
 8009c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c34:	e008      	b.n	8009c48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c36:	f7fb fcdd 	bl	80055f4 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	2b64      	cmp	r3, #100	; 0x64
 8009c42:	d901      	bls.n	8009c48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e120      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c48:	4b75      	ldr	r3, [pc, #468]	; (8009e20 <HAL_RCC_OscConfig+0x4d0>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0f0      	beq.n	8009c36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCC_OscConfig+0x31a>
 8009c5c:	4b6f      	ldr	r3, [pc, #444]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c60:	4a6e      	ldr	r2, [pc, #440]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	6713      	str	r3, [r2, #112]	; 0x70
 8009c68:	e02d      	b.n	8009cc6 <HAL_RCC_OscConfig+0x376>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10c      	bne.n	8009c8c <HAL_RCC_OscConfig+0x33c>
 8009c72:	4b6a      	ldr	r3, [pc, #424]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	4a69      	ldr	r2, [pc, #420]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c78:	f023 0301 	bic.w	r3, r3, #1
 8009c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c7e:	4b67      	ldr	r3, [pc, #412]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c82:	4a66      	ldr	r2, [pc, #408]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c84:	f023 0304 	bic.w	r3, r3, #4
 8009c88:	6713      	str	r3, [r2, #112]	; 0x70
 8009c8a:	e01c      	b.n	8009cc6 <HAL_RCC_OscConfig+0x376>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	2b05      	cmp	r3, #5
 8009c92:	d10c      	bne.n	8009cae <HAL_RCC_OscConfig+0x35e>
 8009c94:	4b61      	ldr	r3, [pc, #388]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c98:	4a60      	ldr	r2, [pc, #384]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009c9a:	f043 0304 	orr.w	r3, r3, #4
 8009c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca0:	4b5e      	ldr	r3, [pc, #376]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	4a5d      	ldr	r2, [pc, #372]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	6713      	str	r3, [r2, #112]	; 0x70
 8009cac:	e00b      	b.n	8009cc6 <HAL_RCC_OscConfig+0x376>
 8009cae:	4b5b      	ldr	r3, [pc, #364]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb2:	4a5a      	ldr	r2, [pc, #360]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8009cba:	4b58      	ldr	r3, [pc, #352]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbe:	4a57      	ldr	r2, [pc, #348]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009cc0:	f023 0304 	bic.w	r3, r3, #4
 8009cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d015      	beq.n	8009cfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cce:	f7fb fc91 	bl	80055f4 <HAL_GetTick>
 8009cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cd4:	e00a      	b.n	8009cec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cd6:	f7fb fc8d 	bl	80055f4 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d901      	bls.n	8009cec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e0ce      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cec:	4b4b      	ldr	r3, [pc, #300]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0ee      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x386>
 8009cf8:	e014      	b.n	8009d24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cfa:	f7fb fc7b 	bl	80055f4 <HAL_GetTick>
 8009cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d00:	e00a      	b.n	8009d18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d02:	f7fb fc77 	bl	80055f4 <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d901      	bls.n	8009d18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e0b8      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d18:	4b40      	ldr	r3, [pc, #256]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1ee      	bne.n	8009d02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d105      	bne.n	8009d36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d2a:	4b3c      	ldr	r3, [pc, #240]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	4a3b      	ldr	r2, [pc, #236]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 80a4 	beq.w	8009e88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d40:	4b36      	ldr	r3, [pc, #216]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f003 030c 	and.w	r3, r3, #12
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d06b      	beq.n	8009e24 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d149      	bne.n	8009de8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d54:	4b31      	ldr	r3, [pc, #196]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a30      	ldr	r2, [pc, #192]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d60:	f7fb fc48 	bl	80055f4 <HAL_GetTick>
 8009d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d66:	e008      	b.n	8009d7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d68:	f7fb fc44 	bl	80055f4 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e087      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d7a:	4b28      	ldr	r3, [pc, #160]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1f0      	bne.n	8009d68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	019b      	lsls	r3, r3, #6
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9c:	085b      	lsrs	r3, r3, #1
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	061b      	lsls	r3, r3, #24
 8009daa:	4313      	orrs	r3, r2
 8009dac:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009db2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009db4:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a18      	ldr	r2, [pc, #96]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc0:	f7fb fc18 	bl	80055f4 <HAL_GetTick>
 8009dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dc8:	f7fb fc14 	bl	80055f4 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e057      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dda:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0f0      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x478>
 8009de6:	e04f      	b.n	8009e88 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a0b      	ldr	r2, [pc, #44]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df4:	f7fb fbfe 	bl	80055f4 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dfc:	f7fb fbfa 	bl	80055f4 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e03d      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e0e:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <HAL_RCC_OscConfig+0x4cc>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1f0      	bne.n	8009dfc <HAL_RCC_OscConfig+0x4ac>
 8009e1a:	e035      	b.n	8009e88 <HAL_RCC_OscConfig+0x538>
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009e24:	4b1b      	ldr	r3, [pc, #108]	; (8009e94 <HAL_RCC_OscConfig+0x544>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d028      	beq.n	8009e84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d121      	bne.n	8009e84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d11a      	bne.n	8009e84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009e54:	4013      	ands	r3, r2
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d111      	bne.n	8009e84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	085b      	lsrs	r3, r3, #1
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d107      	bne.n	8009e84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d001      	beq.n	8009e88 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	40023800 	.word	0x40023800

08009e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e0d0      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009eb0:	4b6a      	ldr	r3, [pc, #424]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 030f 	and.w	r3, r3, #15
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d910      	bls.n	8009ee0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ebe:	4b67      	ldr	r3, [pc, #412]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f023 020f 	bic.w	r2, r3, #15
 8009ec6:	4965      	ldr	r1, [pc, #404]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ece:	4b63      	ldr	r3, [pc, #396]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 030f 	and.w	r3, r3, #15
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d001      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e0b8      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d020      	beq.n	8009f2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ef8:	4b59      	ldr	r3, [pc, #356]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	4a58      	ldr	r2, [pc, #352]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d005      	beq.n	8009f1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f10:	4b53      	ldr	r3, [pc, #332]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	4a52      	ldr	r2, [pc, #328]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f1c:	4b50      	ldr	r3, [pc, #320]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	494d      	ldr	r1, [pc, #308]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d040      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d107      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f42:	4b47      	ldr	r3, [pc, #284]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d115      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e07f      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d107      	bne.n	8009f6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f5a:	4b41      	ldr	r3, [pc, #260]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e073      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f6a:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0302 	and.w	r3, r3, #2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e06b      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f7a:	4b39      	ldr	r3, [pc, #228]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f023 0203 	bic.w	r2, r3, #3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4936      	ldr	r1, [pc, #216]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f8c:	f7fb fb32 	bl	80055f4 <HAL_GetTick>
 8009f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f92:	e00a      	b.n	8009faa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f94:	f7fb fb2e 	bl	80055f4 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e053      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009faa:	4b2d      	ldr	r3, [pc, #180]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f003 020c 	and.w	r2, r3, #12
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d1eb      	bne.n	8009f94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fbc:	4b27      	ldr	r3, [pc, #156]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 030f 	and.w	r3, r3, #15
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d210      	bcs.n	8009fec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fca:	4b24      	ldr	r3, [pc, #144]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f023 020f 	bic.w	r2, r3, #15
 8009fd2:	4922      	ldr	r1, [pc, #136]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fda:	4b20      	ldr	r3, [pc, #128]	; (800a05c <HAL_RCC_ClockConfig+0x1c4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d001      	beq.n	8009fec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e032      	b.n	800a052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d008      	beq.n	800a00a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ff8:	4b19      	ldr	r3, [pc, #100]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	4916      	ldr	r1, [pc, #88]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 800a006:	4313      	orrs	r3, r2
 800a008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	490e      	ldr	r1, [pc, #56]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 800a026:	4313      	orrs	r3, r2
 800a028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a02a:	f000 f821 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800a02e:	4602      	mov	r2, r0
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <HAL_RCC_ClockConfig+0x1c8>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	091b      	lsrs	r3, r3, #4
 800a036:	f003 030f 	and.w	r3, r3, #15
 800a03a:	490a      	ldr	r1, [pc, #40]	; (800a064 <HAL_RCC_ClockConfig+0x1cc>)
 800a03c:	5ccb      	ldrb	r3, [r1, r3]
 800a03e:	fa22 f303 	lsr.w	r3, r2, r3
 800a042:	4a09      	ldr	r2, [pc, #36]	; (800a068 <HAL_RCC_ClockConfig+0x1d0>)
 800a044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <HAL_RCC_ClockConfig+0x1d4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fb fa8e 	bl	800556c <HAL_InitTick>

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40023c00 	.word	0x40023c00
 800a060:	40023800 	.word	0x40023800
 800a064:	0801c1bc 	.word	0x0801c1bc
 800a068:	20000004 	.word	0x20000004
 800a06c:	20000008 	.word	0x20000008

0800a070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a074:	b094      	sub	sp, #80	; 0x50
 800a076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	647b      	str	r3, [r7, #68]	; 0x44
 800a07c:	2300      	movs	r3, #0
 800a07e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a080:	2300      	movs	r3, #0
 800a082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a088:	4b79      	ldr	r3, [pc, #484]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f003 030c 	and.w	r3, r3, #12
 800a090:	2b08      	cmp	r3, #8
 800a092:	d00d      	beq.n	800a0b0 <HAL_RCC_GetSysClockFreq+0x40>
 800a094:	2b08      	cmp	r3, #8
 800a096:	f200 80e1 	bhi.w	800a25c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x34>
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d003      	beq.n	800a0aa <HAL_RCC_GetSysClockFreq+0x3a>
 800a0a2:	e0db      	b.n	800a25c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0a4:	4b73      	ldr	r3, [pc, #460]	; (800a274 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0a8:	e0db      	b.n	800a262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0aa:	4b72      	ldr	r3, [pc, #456]	; (800a274 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0ae:	e0d8      	b.n	800a262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0b0:	4b6f      	ldr	r3, [pc, #444]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a0ba:	4b6d      	ldr	r3, [pc, #436]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d063      	beq.n	800a18e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0c6:	4b6a      	ldr	r3, [pc, #424]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	099b      	lsrs	r3, r3, #6
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a0da:	2300      	movs	r3, #0
 800a0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a0de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	f04f 0000 	mov.w	r0, #0
 800a0ea:	f04f 0100 	mov.w	r1, #0
 800a0ee:	0159      	lsls	r1, r3, #5
 800a0f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a0f4:	0150      	lsls	r0, r2, #5
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	1a51      	subs	r1, r2, r1
 800a0fe:	6139      	str	r1, [r7, #16]
 800a100:	4629      	mov	r1, r5
 800a102:	eb63 0301 	sbc.w	r3, r3, r1
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a114:	4659      	mov	r1, fp
 800a116:	018b      	lsls	r3, r1, #6
 800a118:	4651      	mov	r1, sl
 800a11a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a11e:	4651      	mov	r1, sl
 800a120:	018a      	lsls	r2, r1, #6
 800a122:	4651      	mov	r1, sl
 800a124:	ebb2 0801 	subs.w	r8, r2, r1
 800a128:	4659      	mov	r1, fp
 800a12a:	eb63 0901 	sbc.w	r9, r3, r1
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a13a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a13e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a142:	4690      	mov	r8, r2
 800a144:	4699      	mov	r9, r3
 800a146:	4623      	mov	r3, r4
 800a148:	eb18 0303 	adds.w	r3, r8, r3
 800a14c:	60bb      	str	r3, [r7, #8]
 800a14e:	462b      	mov	r3, r5
 800a150:	eb49 0303 	adc.w	r3, r9, r3
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a162:	4629      	mov	r1, r5
 800a164:	028b      	lsls	r3, r1, #10
 800a166:	4621      	mov	r1, r4
 800a168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a16c:	4621      	mov	r1, r4
 800a16e:	028a      	lsls	r2, r1, #10
 800a170:	4610      	mov	r0, r2
 800a172:	4619      	mov	r1, r3
 800a174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a176:	2200      	movs	r2, #0
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
 800a17a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a17c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a180:	f7f6 fd32 	bl	8000be8 <__aeabi_uldivmod>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4613      	mov	r3, r2
 800a18a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a18c:	e058      	b.n	800a240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a18e:	4b38      	ldr	r3, [pc, #224]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	099b      	lsrs	r3, r3, #6
 800a194:	2200      	movs	r2, #0
 800a196:	4618      	mov	r0, r3
 800a198:	4611      	mov	r1, r2
 800a19a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a19e:	623b      	str	r3, [r7, #32]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	464b      	mov	r3, r9
 800a1ac:	f04f 0000 	mov.w	r0, #0
 800a1b0:	f04f 0100 	mov.w	r1, #0
 800a1b4:	0159      	lsls	r1, r3, #5
 800a1b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1ba:	0150      	lsls	r0, r2, #5
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4641      	mov	r1, r8
 800a1c2:	ebb2 0a01 	subs.w	sl, r2, r1
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	eb63 0b01 	sbc.w	fp, r3, r1
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a1d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a1dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a1e0:	ebb2 040a 	subs.w	r4, r2, sl
 800a1e4:	eb63 050b 	sbc.w	r5, r3, fp
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	f04f 0300 	mov.w	r3, #0
 800a1f0:	00eb      	lsls	r3, r5, #3
 800a1f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1f6:	00e2      	lsls	r2, r4, #3
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	4643      	mov	r3, r8
 800a1fe:	18e3      	adds	r3, r4, r3
 800a200:	603b      	str	r3, [r7, #0]
 800a202:	464b      	mov	r3, r9
 800a204:	eb45 0303 	adc.w	r3, r5, r3
 800a208:	607b      	str	r3, [r7, #4]
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a216:	4629      	mov	r1, r5
 800a218:	028b      	lsls	r3, r1, #10
 800a21a:	4621      	mov	r1, r4
 800a21c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a220:	4621      	mov	r1, r4
 800a222:	028a      	lsls	r2, r1, #10
 800a224:	4610      	mov	r0, r2
 800a226:	4619      	mov	r1, r3
 800a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22a:	2200      	movs	r2, #0
 800a22c:	61bb      	str	r3, [r7, #24]
 800a22e:	61fa      	str	r2, [r7, #28]
 800a230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a234:	f7f6 fcd8 	bl	8000be8 <__aeabi_uldivmod>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4613      	mov	r3, r2
 800a23e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <HAL_RCC_GetSysClockFreq+0x200>)
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	0c1b      	lsrs	r3, r3, #16
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	3301      	adds	r3, #1
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800a250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a254:	fbb2 f3f3 	udiv	r3, r2, r3
 800a258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a25a:	e002      	b.n	800a262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_RCC_GetSysClockFreq+0x204>)
 800a25e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a260:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a264:	4618      	mov	r0, r3
 800a266:	3750      	adds	r7, #80	; 0x50
 800a268:	46bd      	mov	sp, r7
 800a26a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a26e:	bf00      	nop
 800a270:	40023800 	.word	0x40023800
 800a274:	00f42400 	.word	0x00f42400

0800a278 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a27c:	4b03      	ldr	r3, [pc, #12]	; (800a28c <HAL_RCC_GetHCLKFreq+0x14>)
 800a27e:	681b      	ldr	r3, [r3, #0]
}
 800a280:	4618      	mov	r0, r3
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000004 	.word	0x20000004

0800a290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a294:	f7ff fff0 	bl	800a278 <HAL_RCC_GetHCLKFreq>
 800a298:	4602      	mov	r2, r0
 800a29a:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	0a9b      	lsrs	r3, r3, #10
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	4903      	ldr	r1, [pc, #12]	; (800a2b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2a6:	5ccb      	ldrb	r3, [r1, r3]
 800a2a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	40023800 	.word	0x40023800
 800a2b4:	0801c1cc 	.word	0x0801c1cc

0800a2b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a2bc:	f7ff ffdc 	bl	800a278 <HAL_RCC_GetHCLKFreq>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	0b5b      	lsrs	r3, r3, #13
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	4903      	ldr	r1, [pc, #12]	; (800a2dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2ce:	5ccb      	ldrb	r3, [r1, r3]
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	0801c1cc 	.word	0x0801c1cc

0800a2e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d012      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a308:	4b69      	ldr	r3, [pc, #420]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	4a68      	ldr	r2, [pc, #416]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a30e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a312:	6093      	str	r3, [r2, #8]
 800a314:	4b66      	ldr	r3, [pc, #408]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31c:	4964      	ldr	r1, [pc, #400]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a32a:	2301      	movs	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d017      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a33a:	4b5d      	ldr	r3, [pc, #372]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a33c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a348:	4959      	ldr	r1, [pc, #356]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a358:	d101      	bne.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a35a:	2301      	movs	r3, #1
 800a35c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a366:	2301      	movs	r3, #1
 800a368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d017      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a376:	4b4e      	ldr	r3, [pc, #312]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a37c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	494a      	ldr	r1, [pc, #296]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a394:	d101      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a396:	2301      	movs	r3, #1
 800a398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 808b 	beq.w	800a4da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3c4:	4b3a      	ldr	r3, [pc, #232]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	4a39      	ldr	r2, [pc, #228]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3ce:	6413      	str	r3, [r2, #64]	; 0x40
 800a3d0:	4b37      	ldr	r3, [pc, #220]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d8:	60bb      	str	r3, [r7, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a3dc:	4b35      	ldr	r3, [pc, #212]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a34      	ldr	r2, [pc, #208]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a3e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e8:	f7fb f904 	bl	80055f4 <HAL_GetTick>
 800a3ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a3ee:	e008      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3f0:	f7fb f900 	bl	80055f4 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b64      	cmp	r3, #100	; 0x64
 800a3fc:	d901      	bls.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e31f      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a402:	4b2c      	ldr	r3, [pc, #176]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a40e:	4b28      	ldr	r3, [pc, #160]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d035      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d02e      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a42c:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a434:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a436:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43a:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a43c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a440:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a442:	4b1b      	ldr	r3, [pc, #108]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a446:	4a1a      	ldr	r2, [pc, #104]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a44c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a44e:	4a18      	ldr	r2, [pc, #96]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d114      	bne.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a460:	f7fb f8c8 	bl	80055f4 <HAL_GetTick>
 800a464:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a466:	e00a      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a468:	f7fb f8c4 	bl	80055f4 <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	f241 3288 	movw	r2, #5000	; 0x1388
 800a476:	4293      	cmp	r3, r2
 800a478:	d901      	bls.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e2e1      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a47e:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0ee      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a496:	d111      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a4a6:	400b      	ands	r3, r1
 800a4a8:	4901      	ldr	r1, [pc, #4]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	608b      	str	r3, [r1, #8]
 800a4ae:	e00b      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a4b0:	40023800 	.word	0x40023800
 800a4b4:	40007000 	.word	0x40007000
 800a4b8:	0ffffcff 	.word	0x0ffffcff
 800a4bc:	4ba8      	ldr	r3, [pc, #672]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	4aa7      	ldr	r2, [pc, #668]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a4c6:	6093      	str	r3, [r2, #8]
 800a4c8:	4ba5      	ldr	r3, [pc, #660]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4d4:	49a2      	ldr	r1, [pc, #648]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0310 	and.w	r3, r3, #16
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4e6:	4b9e      	ldr	r3, [pc, #632]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ec:	4a9c      	ldr	r2, [pc, #624]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a4f6:	4b9a      	ldr	r3, [pc, #616]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a4f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	4997      	ldr	r1, [pc, #604]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a502:	4313      	orrs	r3, r2
 800a504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a514:	4b92      	ldr	r3, [pc, #584]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a522:	498f      	ldr	r1, [pc, #572]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a524:	4313      	orrs	r3, r2
 800a526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a536:	4b8a      	ldr	r3, [pc, #552]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a53c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a544:	4986      	ldr	r1, [pc, #536]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00a      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a558:	4b81      	ldr	r3, [pc, #516]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a566:	497e      	ldr	r1, [pc, #504]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a57a:	4b79      	ldr	r3, [pc, #484]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a588:	4975      	ldr	r1, [pc, #468]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a59c:	4b70      	ldr	r3, [pc, #448]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	f023 0203 	bic.w	r2, r3, #3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5aa:	496d      	ldr	r1, [pc, #436]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5be:	4b68      	ldr	r3, [pc, #416]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5c4:	f023 020c 	bic.w	r2, r3, #12
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5cc:	4964      	ldr	r1, [pc, #400]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00a      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5e0:	4b5f      	ldr	r3, [pc, #380]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ee:	495c      	ldr	r1, [pc, #368]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a602:	4b57      	ldr	r3, [pc, #348]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a608:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a610:	4953      	ldr	r1, [pc, #332]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a612:	4313      	orrs	r3, r2
 800a614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00a      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a624:	4b4e      	ldr	r3, [pc, #312]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a632:	494b      	ldr	r1, [pc, #300]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a634:	4313      	orrs	r3, r2
 800a636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a646:	4b46      	ldr	r3, [pc, #280]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a654:	4942      	ldr	r1, [pc, #264]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a656:	4313      	orrs	r3, r2
 800a658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00a      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a668:	4b3d      	ldr	r3, [pc, #244]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a676:	493a      	ldr	r1, [pc, #232]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a68a:	4b35      	ldr	r3, [pc, #212]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a690:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a698:	4931      	ldr	r1, [pc, #196]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6ac:	4b2c      	ldr	r3, [pc, #176]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6ba:	4929      	ldr	r1, [pc, #164]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d011      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a6ce:	4b24      	ldr	r3, [pc, #144]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6dc:	4920      	ldr	r1, [pc, #128]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ec:	d101      	bne.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a704:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a70c:	4914      	ldr	r1, [pc, #80]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a726:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a730:	490b      	ldr	r1, [pc, #44]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a732:	4313      	orrs	r3, r2
 800a734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d006      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80d8 	beq.w	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a74c:	4b04      	ldr	r3, [pc, #16]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a03      	ldr	r2, [pc, #12]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800a752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a758:	f7fa ff4c 	bl	80055f4 <HAL_GetTick>
 800a75c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a75e:	e00a      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a760:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a764:	f7fa ff46 	bl	80055f4 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b64      	cmp	r3, #100	; 0x64
 800a770:	d901      	bls.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e165      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a776:	4ba9      	ldr	r3, [pc, #676]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f0      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d021      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11d      	bne.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a796:	4ba1      	ldr	r3, [pc, #644]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7a4:	4b9d      	ldr	r3, [pc, #628]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7aa:	0e1b      	lsrs	r3, r3, #24
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	019a      	lsls	r2, r3, #6
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	061b      	lsls	r3, r3, #24
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	071b      	lsls	r3, r3, #28
 800a7ca:	4994      	ldr	r1, [pc, #592]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e6:	d00a      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d02e      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7fc:	d129      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a7fe:	4b87      	ldr	r3, [pc, #540]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a80c:	4b83      	ldr	r3, [pc, #524]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a812:	0f1b      	lsrs	r3, r3, #28
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	019a      	lsls	r2, r3, #6
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	041b      	lsls	r3, r3, #16
 800a824:	431a      	orrs	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	061b      	lsls	r3, r3, #24
 800a82c:	431a      	orrs	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	071b      	lsls	r3, r3, #28
 800a832:	497a      	ldr	r1, [pc, #488]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a834:	4313      	orrs	r3, r2
 800a836:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a83a:	4b78      	ldr	r3, [pc, #480]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a840:	f023 021f 	bic.w	r2, r3, #31
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	3b01      	subs	r3, #1
 800a84a:	4974      	ldr	r1, [pc, #464]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01d      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a85e:	4b6f      	ldr	r3, [pc, #444]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a864:	0e1b      	lsrs	r3, r3, #24
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a86c:	4b6b      	ldr	r3, [pc, #428]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a872:	0f1b      	lsrs	r3, r3, #28
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	019a      	lsls	r2, r3, #6
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	041b      	lsls	r3, r3, #16
 800a886:	431a      	orrs	r2, r3
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	061b      	lsls	r3, r3, #24
 800a88c:	431a      	orrs	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	071b      	lsls	r3, r3, #28
 800a892:	4962      	ldr	r1, [pc, #392]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a894:	4313      	orrs	r3, r2
 800a896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d011      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	019a      	lsls	r2, r3, #6
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	041b      	lsls	r3, r3, #16
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	061b      	lsls	r3, r3, #24
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	071b      	lsls	r3, r3, #28
 800a8c2:	4956      	ldr	r1, [pc, #344]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8ca:	4b54      	ldr	r3, [pc, #336]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a53      	ldr	r2, [pc, #332]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a8d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8d6:	f7fa fe8d 	bl	80055f4 <HAL_GetTick>
 800a8da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a8de:	f7fa fe89 	bl	80055f4 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b64      	cmp	r3, #100	; 0x64
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e0a8      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8f0:	4b4a      	ldr	r3, [pc, #296]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	f040 809e 	bne.w	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a904:	4b45      	ldr	r3, [pc, #276]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a44      	ldr	r2, [pc, #272]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a90a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a90e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a910:	f7fa fe70 	bl	80055f4 <HAL_GetTick>
 800a914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a918:	f7fa fe6c 	bl	80055f4 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	; 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e08b      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a92a:	4b3c      	ldr	r3, [pc, #240]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a936:	d0ef      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d009      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a954:	2b00      	cmp	r3, #0
 800a956:	d02e      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d12a      	bne.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a960:	4b2e      	ldr	r3, [pc, #184]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a96e:	4b2b      	ldr	r3, [pc, #172]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a974:	0f1b      	lsrs	r3, r3, #28
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	019a      	lsls	r2, r3, #6
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	041b      	lsls	r3, r3, #16
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	061b      	lsls	r3, r3, #24
 800a98e:	431a      	orrs	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	071b      	lsls	r3, r3, #28
 800a994:	4921      	ldr	r1, [pc, #132]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a996:	4313      	orrs	r3, r2
 800a998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a99c:	4b1f      	ldr	r3, [pc, #124]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	021b      	lsls	r3, r3, #8
 800a9ae:	491b      	ldr	r1, [pc, #108]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d022      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ca:	d11d      	bne.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9cc:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d2:	0e1b      	lsrs	r3, r3, #24
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a9da:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800a9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e0:	0f1b      	lsrs	r3, r3, #28
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	019a      	lsls	r2, r3, #6
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	061b      	lsls	r3, r3, #24
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	071b      	lsls	r3, r3, #28
 800aa00:	4906      	ldr	r1, [pc, #24]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a03      	ldr	r2, [pc, #12]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800aa0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa14:	f7fa fdee 	bl	80055f4 <HAL_GetTick>
 800aa18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa1a:	e00a      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800aa1c:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aa20:	f7fa fde8 	bl	80055f4 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b64      	cmp	r3, #100	; 0x64
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e007      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa32:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3e:	d1ef      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40023800 	.word	0x40023800

0800aa50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e022      	b.n	800aaa8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d105      	bne.n	800aa7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7fa f9b5 	bl	8004de4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2203      	movs	r2, #3
 800aa7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f814 	bl	800aab0 <HAL_SD_InitCard>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e00a      	b.n	800aaa8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aab0:	b5b0      	push	{r4, r5, r7, lr}
 800aab2:	b08e      	sub	sp, #56	; 0x38
 800aab4:	af04      	add	r7, sp, #16
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800aacc:	2376      	movs	r3, #118	; 0x76
 800aace:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681d      	ldr	r5, [r3, #0]
 800aad4:	466c      	mov	r4, sp
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aae8:	4628      	mov	r0, r5
 800aaea:	f002 fd47 	bl	800d57c <SDMMC_Init>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800aaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e059      	b.n	800abb4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab0e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 fd7b 	bl	800d610 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab28:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ab2a:	2002      	movs	r0, #2
 800ab2c:	f7fa fd6e 	bl	800560c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 ff59 	bl	800b9e8 <SD_PowerON>
 800ab36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e02e      	b.n	800abb4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fe78 	bl	800b84c <SD_InitCard>
 800ab5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00b      	beq.n	800ab7c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab70:	6a3b      	ldr	r3, [r7, #32]
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e01b      	b.n	800abb4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab84:	4618      	mov	r0, r3
 800ab86:	f002 fdd5 	bl	800d734 <SDMMC_CmdBlockLength>
 800ab8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00f      	beq.n	800abb2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a09      	ldr	r2, [pc, #36]	; (800abbc <HAL_SD_InitCard+0x10c>)
 800ab98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3728      	adds	r7, #40	; 0x28
 800abb8:	46bd      	mov	sp, r7
 800abba:	bdb0      	pop	{r4, r5, r7, pc}
 800abbc:	004005ff 	.word	0x004005ff

0800abc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08c      	sub	sp, #48	; 0x30
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d107      	bne.n	800abe8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e0c3      	b.n	800ad70 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f040 80bc 	bne.w	800ad6e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800abfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	441a      	add	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d907      	bls.n	800ac1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e0aa      	b.n	800ad70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2200      	movs	r2, #0
 800ac28:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ac38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	4a4e      	ldr	r2, [pc, #312]	; (800ad78 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ac40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	4a4d      	ldr	r2, [pc, #308]	; (800ad7c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ac48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	2200      	movs	r2, #0
 800ac50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	2200      	movs	r2, #0
 800ac58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	689a      	ldr	r2, [r3, #8]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3380      	adds	r3, #128	; 0x80
 800ac80:	4619      	mov	r1, r3
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	025b      	lsls	r3, r3, #9
 800ac88:	089b      	lsrs	r3, r3, #2
 800ac8a:	f7fb f937 	bl	8005efc <HAL_DMA_Start_IT>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d017      	beq.n	800acc4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800aca2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a35      	ldr	r2, [pc, #212]	; (800ad80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800acaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e055      	b.n	800ad70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f042 0208 	orr.w	r2, r2, #8
 800acd2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d002      	beq.n	800ace2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	025b      	lsls	r3, r3, #9
 800ace0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
 800ace6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	025b      	lsls	r3, r3, #9
 800acec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800acee:	2390      	movs	r3, #144	; 0x90
 800acf0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800acf2:	2302      	movs	r3, #2
 800acf4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f107 0210 	add.w	r2, r7, #16
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fce7 	bl	800d6dc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d90a      	bls.n	800ad2a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2282      	movs	r2, #130	; 0x82
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad20:	4618      	mov	r0, r3
 800ad22:	f002 fd4b 	bl	800d7bc <SDMMC_CmdReadMultiBlock>
 800ad26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad28:	e009      	b.n	800ad3e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2281      	movs	r2, #129	; 0x81
 800ad2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fd1e 	bl	800d778 <SDMMC_CmdReadSingleBlock>
 800ad3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d012      	beq.n	800ad6a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a0d      	ldr	r2, [pc, #52]	; (800ad80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	431a      	orrs	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e002      	b.n	800ad70 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e000      	b.n	800ad70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800ad6e:	2302      	movs	r3, #2
  }
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3730      	adds	r7, #48	; 0x30
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	0800b65b 	.word	0x0800b65b
 800ad7c:	0800b6cd 	.word	0x0800b6cd
 800ad80:	004005ff 	.word	0x004005ff

0800ad84 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08c      	sub	sp, #48	; 0x30
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d107      	bne.n	800adac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e0c6      	b.n	800af3a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	f040 80bf 	bne.w	800af38 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800adc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	441a      	add	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adca:	429a      	cmp	r2, r3
 800adcc:	d907      	bls.n	800adde <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0ad      	b.n	800af3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2203      	movs	r2, #3
 800ade2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2200      	movs	r2, #0
 800adec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f042 021a 	orr.w	r2, r2, #26
 800adfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	4a50      	ldr	r2, [pc, #320]	; (800af44 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ae04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	4a4f      	ldr	r2, [pc, #316]	; (800af48 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800ae0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	2200      	movs	r2, #0
 800ae14:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d002      	beq.n	800ae24 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	025b      	lsls	r3, r3, #9
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d90a      	bls.n	800ae40 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	22a0      	movs	r2, #160	; 0xa0
 800ae2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 fd04 	bl	800d844 <SDMMC_CmdWriteMultiBlock>
 800ae3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae3e:	e009      	b.n	800ae54 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2290      	movs	r2, #144	; 0x90
 800ae44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 fcd7 	bl	800d800 <SDMMC_CmdWriteSingleBlock>
 800ae52:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d012      	beq.n	800ae80 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3b      	ldr	r2, [pc, #236]	; (800af4c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e05c      	b.n	800af3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f042 0208 	orr.w	r2, r2, #8
 800ae8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae94:	2240      	movs	r2, #64	; 0x40
 800ae96:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3380      	adds	r3, #128	; 0x80
 800aec0:	461a      	mov	r2, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	025b      	lsls	r3, r3, #9
 800aec6:	089b      	lsrs	r3, r3, #2
 800aec8:	f7fb f818 	bl	8005efc <HAL_DMA_Start_IT>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d01a      	beq.n	800af08 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 021a 	bic.w	r2, r2, #26
 800aee0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a19      	ldr	r2, [pc, #100]	; (800af4c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e018      	b.n	800af3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af08:	f04f 33ff 	mov.w	r3, #4294967295
 800af0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	025b      	lsls	r3, r3, #9
 800af12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800af14:	2390      	movs	r3, #144	; 0x90
 800af16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800af18:	2300      	movs	r3, #0
 800af1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800af20:	2301      	movs	r3, #1
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f107 0210 	add.w	r2, r7, #16
 800af2c:	4611      	mov	r1, r2
 800af2e:	4618      	mov	r0, r3
 800af30:	f002 fbd4 	bl	800d6dc <SDMMC_ConfigData>

      return HAL_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	e000      	b.n	800af3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800af38:	2302      	movs	r3, #2
  }
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3730      	adds	r7, #48	; 0x30
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	0800b631 	.word	0x0800b631
 800af48:	0800b6cd 	.word	0x0800b6cd
 800af4c:	004005ff 	.word	0x004005ff

0800af50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <HAL_SD_IRQHandler+0x2e>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f003 0308 	and.w	r3, r3, #8
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fdec 	bl	800bb54 <SD_Read_IT>
 800af7c:	e15a      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 808d 	beq.w	800b0a8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af96:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b9a      	ldr	r3, [pc, #616]	; (800b20c <HAL_SD_IRQHandler+0x2bc>)
 800afa4:	400b      	ands	r3, r1
 800afa6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0201 	bic.w	r2, r2, #1
 800afb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d039      	beq.n	800b036 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f003 0302 	and.w	r3, r3, #2
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_SD_IRQHandler+0x86>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d011      	beq.n	800affa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f002 fc54 	bl	800d888 <SDMMC_CmdStopTransfer>
 800afe0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d008      	beq.n	800affa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	431a      	orrs	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f921 	bl	800b23c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f240 523a 	movw	r2, #1338	; 0x53a
 800b002:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d104      	bne.n	800b026 <HAL_SD_IRQHandler+0xd6>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f005 fa98 	bl	801055c <HAL_SD_RxCpltCallback>
 800b02c:	e102      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f005 fa8a 	bl	8010548 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b034:	e0fe      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 80f9 	beq.w	800b234 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d011      	beq.n	800b070 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f002 fc19 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b056:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d008      	beq.n	800b070 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	431a      	orrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f8e6 	bl	800b23c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	f040 80dc 	bne.w	800b234 <HAL_SD_IRQHandler+0x2e4>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b00      	cmp	r3, #0
 800b084:	f040 80d6 	bne.w	800b234 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f022 0208 	bic.w	r2, r2, #8
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f005 fa51 	bl	8010548 <HAL_SD_TxCpltCallback>
}
 800b0a6:	e0c5      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_SD_IRQHandler+0x178>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fd98 	bl	800bbf6 <SD_Write_IT>
 800b0c6:	e0b5      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 80ae 	beq.w	800b234 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	f043 0202 	orr.w	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	f043 0208 	orr.w	r2, r3, #8
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	f043 0220 	orr.w	r2, r3, #32
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12c:	f003 0310 	and.w	r3, r3, #16
 800b130:	2b00      	cmp	r3, #0
 800b132:	d005      	beq.n	800b140 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	f043 0210 	orr.w	r2, r3, #16
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f240 523a 	movw	r2, #1338	; 0x53a
 800b148:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b158:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 fb92 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b164:	4602      	mov	r2, r0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f857 	bl	800b23c <HAL_SD_ErrorCallback>
}
 800b18e:	e051      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d04c      	beq.n	800b234 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f003 0310 	and.w	r3, r3, #16
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d104      	bne.n	800b1ae <HAL_SD_IRQHandler+0x25e>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f003 0320 	and.w	r3, r3, #32
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d011      	beq.n	800b1d2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b2:	4a17      	ldr	r2, [pc, #92]	; (800b210 <HAL_SD_IRQHandler+0x2c0>)
 800b1b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa fefe 	bl	8005fbc <HAL_DMA_Abort_IT>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d036      	beq.n	800b234 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fad0 	bl	800b770 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b1d0:	e030      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <HAL_SD_IRQHandler+0x296>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f003 0302 	and.w	r3, r3, #2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d018      	beq.n	800b218 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ea:	4a0a      	ldr	r2, [pc, #40]	; (800b214 <HAL_SD_IRQHandler+0x2c4>)
 800b1ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fa fee2 	bl	8005fbc <HAL_DMA_Abort_IT>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d01a      	beq.n	800b234 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	4618      	mov	r0, r3
 800b204:	f000 faeb 	bl	800b7de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b208:	e014      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
 800b20a:	bf00      	nop
 800b20c:	ffff3ec5 	.word	0xffff3ec5
 800b210:	0800b771 	.word	0x0800b771
 800b214:	0800b7df 	.word	0x0800b7df
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f005 f981 	bl	8010534 <HAL_SD_AbortCallback>
}
 800b232:	e7ff      	b.n	800b234 <HAL_SD_IRQHandler+0x2e4>
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b25e:	0f9b      	lsrs	r3, r3, #30
 800b260:	b2da      	uxtb	r2, r3
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b26a:	0e9b      	lsrs	r3, r3, #26
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	f003 030f 	and.w	r3, r3, #15
 800b272:	b2da      	uxtb	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b27c:	0e1b      	lsrs	r3, r3, #24
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f003 0303 	and.w	r3, r3, #3
 800b284:	b2da      	uxtb	r2, r3
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	b2da      	uxtb	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2b0:	0d1b      	lsrs	r3, r3, #20
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2bc:	0c1b      	lsrs	r3, r3, #16
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 030f 	and.w	r3, r3, #15
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2ce:	0bdb      	lsrs	r3, r3, #15
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e0:	0b9b      	lsrs	r3, r3, #14
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2f2:	0b5b      	lsrs	r3, r3, #13
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b304:	0b1b      	lsrs	r3, r3, #12
 800b306:	b2db      	uxtb	r3, r3
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2200      	movs	r2, #0
 800b316:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d163      	bne.n	800b3e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b324:	009a      	lsls	r2, r3, #2
 800b326:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b32a:	4013      	ands	r3, r2
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b330:	0f92      	lsrs	r2, r2, #30
 800b332:	431a      	orrs	r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b33c:	0edb      	lsrs	r3, r3, #27
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	b2da      	uxtb	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b34e:	0e1b      	lsrs	r3, r3, #24
 800b350:	b2db      	uxtb	r3, r3
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	b2da      	uxtb	r2, r3
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b360:	0d5b      	lsrs	r3, r3, #21
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b372:	0c9b      	lsrs	r3, r3, #18
 800b374:	b2db      	uxtb	r3, r3
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b384:	0bdb      	lsrs	r3, r3, #15
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	7e1b      	ldrb	r3, [r3, #24]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b3b2:	fb03 f202 	mul.w	r2, r3, r2
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	7a1b      	ldrb	r3, [r3, #8]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	409a      	lsls	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b3d4:	0a52      	lsrs	r2, r2, #9
 800b3d6:	fb03 f202 	mul.w	r2, r3, r2
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3e4:	661a      	str	r2, [r3, #96]	; 0x60
 800b3e6:	e031      	b.n	800b44c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d11d      	bne.n	800b42c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f4:	041b      	lsls	r3, r3, #16
 800b3f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fe:	0c1b      	lsrs	r3, r3, #16
 800b400:	431a      	orrs	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	3301      	adds	r3, #1
 800b40c:	029a      	lsls	r2, r3, #10
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b420:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	661a      	str	r2, [r3, #96]	; 0x60
 800b42a:	e00f      	b.n	800b44c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a58      	ldr	r2, [pc, #352]	; (800b594 <HAL_SD_GetCardCSD+0x344>)
 800b432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e09d      	b.n	800b588 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	0b9b      	lsrs	r3, r3, #14
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b462:	09db      	lsrs	r3, r3, #7
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	b2db      	uxtb	r3, r3
 800b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b484:	0fdb      	lsrs	r3, r3, #31
 800b486:	b2da      	uxtb	r2, r3
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b490:	0f5b      	lsrs	r3, r3, #29
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a2:	0e9b      	lsrs	r3, r3, #26
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b4:	0d9b      	lsrs	r3, r3, #22
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c6:	0d5b      	lsrs	r3, r3, #21
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e2:	0c1b      	lsrs	r3, r3, #16
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f6:	0bdb      	lsrs	r3, r3, #15
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50a:	0b9b      	lsrs	r3, r3, #14
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b51e:	0b5b      	lsrs	r3, r3, #13
 800b520:	b2db      	uxtb	r3, r3
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	b2da      	uxtb	r2, r3
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b532:	0b1b      	lsrs	r3, r3, #12
 800b534:	b2db      	uxtb	r3, r3
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b546:	0a9b      	lsrs	r3, r3, #10
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	f003 0303 	and.w	r3, r3, #3
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55a:	0a1b      	lsrs	r3, r3, #8
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	b2da      	uxtb	r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56e:	085b      	lsrs	r3, r3, #1
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b576:	b2da      	uxtb	r2, r3
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	004005ff 	.word	0x004005ff

0800b598 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b5fc:	f107 030c 	add.w	r3, r7, #12
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa7e 	bl	800bb04 <SD_SendStatus>
 800b608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	431a      	orrs	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	0a5b      	lsrs	r3, r3, #9
 800b620:	f003 030f 	and.w	r3, r3, #15
 800b624:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b626:	693b      	ldr	r3, [r7, #16]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b64c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	2b82      	cmp	r3, #130	; 0x82
 800b66e:	d111      	bne.n	800b694 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f002 f907 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b67a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	431a      	orrs	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7ff fdd4 	bl	800b23c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 0208 	bic.w	r2, r2, #8
 800b6a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f004 ff4d 	bl	801055c <HAL_SD_RxCpltCallback>
#endif
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fa fe1a 	bl	8006314 <HAL_DMA_GetError>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d03e      	beq.n	800b764 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d002      	beq.n	800b702 <SD_DMAError+0x36>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d12d      	bne.n	800b75e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a19      	ldr	r2, [pc, #100]	; (800b76c <SD_DMAError+0xa0>)
 800b708:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b718:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b726:	6978      	ldr	r0, [r7, #20]
 800b728:	f7ff ff62 	bl	800b5f0 <HAL_SD_GetCardState>
 800b72c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b06      	cmp	r3, #6
 800b732:	d002      	beq.n	800b73a <SD_DMAError+0x6e>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b05      	cmp	r3, #5
 800b738:	d10a      	bne.n	800b750 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f002 f8a2 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b744:	4602      	mov	r2, r0
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	431a      	orrs	r2, r3
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2200      	movs	r2, #0
 800b75c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f7ff fd6c 	bl	800b23c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b764:	bf00      	nop
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	004005ff 	.word	0x004005ff

0800b770 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f240 523a 	movw	r2, #1338	; 0x53a
 800b786:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f7ff ff31 	bl	800b5f0 <HAL_SD_GetCardState>
 800b78e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b06      	cmp	r3, #6
 800b7a2:	d002      	beq.n	800b7aa <SD_DMATxAbort+0x3a>
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d10a      	bne.n	800b7c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f002 f86a 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d103      	bne.n	800b7d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f004 feb3 	bl	8010534 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b7ce:	e002      	b.n	800b7d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7ff fd33 	bl	800b23c <HAL_SD_ErrorCallback>
}
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7ff fefa 	bl	800b5f0 <HAL_SD_GetCardState>
 800b7fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b06      	cmp	r3, #6
 800b810:	d002      	beq.n	800b818 <SD_DMARxAbort+0x3a>
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b05      	cmp	r3, #5
 800b816:	d10a      	bne.n	800b82e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f002 f833 	bl	800d888 <SDMMC_CmdStopTransfer>
 800b822:	4602      	mov	r2, r0
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	431a      	orrs	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	2b00      	cmp	r3, #0
 800b834:	d103      	bne.n	800b83e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f004 fe7c 	bl	8010534 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b83c:	e002      	b.n	800b844 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff fcfc 	bl	800b23c <HAL_SD_ErrorCallback>
}
 800b844:	bf00      	nop
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b84c:	b5b0      	push	{r4, r5, r7, lr}
 800b84e:	b094      	sub	sp, #80	; 0x50
 800b850:	af04      	add	r7, sp, #16
 800b852:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b854:	2301      	movs	r3, #1
 800b856:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 fee5 	bl	800d62c <SDMMC_GetPowerState>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d102      	bne.n	800b86e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b868:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b86c:	e0b8      	b.n	800b9e0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b872:	2b03      	cmp	r3, #3
 800b874:	d02f      	beq.n	800b8d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f002 f8cc 	bl	800da18 <SDMMC_CmdSendCID>
 800b880:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <SD_InitCard+0x40>
    {
      return errorstate;
 800b888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b88a:	e0a9      	b.n	800b9e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2100      	movs	r1, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f001 ff0f 	bl	800d6b6 <SDMMC_GetResponse>
 800b898:	4602      	mov	r2, r0
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2104      	movs	r1, #4
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 ff06 	bl	800d6b6 <SDMMC_GetResponse>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2108      	movs	r1, #8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 fefd 	bl	800d6b6 <SDMMC_GetResponse>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	210c      	movs	r1, #12
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f001 fef4 	bl	800d6b6 <SDMMC_GetResponse>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d00d      	beq.n	800b8fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f107 020e 	add.w	r2, r7, #14
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f002 f8d2 	bl	800da92 <SDMMC_CmdSetRelAdd>
 800b8ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <SD_InitCard+0xae>
    {
      return errorstate;
 800b8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f8:	e072      	b.n	800b9e0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d036      	beq.n	800b970 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b902:	89fb      	ldrh	r3, [r7, #14]
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b912:	041b      	lsls	r3, r3, #16
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f002 f89c 	bl	800da54 <SDMMC_CmdSendCSD>
 800b91c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	e05b      	b.n	800b9e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2100      	movs	r1, #0
 800b92e:	4618      	mov	r0, r3
 800b930:	f001 fec1 	bl	800d6b6 <SDMMC_GetResponse>
 800b934:	4602      	mov	r2, r0
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2104      	movs	r1, #4
 800b940:	4618      	mov	r0, r3
 800b942:	f001 feb8 	bl	800d6b6 <SDMMC_GetResponse>
 800b946:	4602      	mov	r2, r0
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2108      	movs	r1, #8
 800b952:	4618      	mov	r0, r3
 800b954:	f001 feaf 	bl	800d6b6 <SDMMC_GetResponse>
 800b958:	4602      	mov	r2, r0
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	210c      	movs	r1, #12
 800b964:	4618      	mov	r0, r3
 800b966:	f001 fea6 	bl	800d6b6 <SDMMC_GetResponse>
 800b96a:	4602      	mov	r2, r0
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2104      	movs	r1, #4
 800b976:	4618      	mov	r0, r3
 800b978:	f001 fe9d 	bl	800d6b6 <SDMMC_GetResponse>
 800b97c:	4603      	mov	r3, r0
 800b97e:	0d1a      	lsrs	r2, r3, #20
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b984:	f107 0310 	add.w	r3, r7, #16
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff fc60 	bl	800b250 <HAL_SD_GetCardCSD>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b996:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b99a:	e021      	b.n	800b9e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6819      	ldr	r1, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a4:	041b      	lsls	r3, r3, #16
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	461c      	mov	r4, r3
 800b9aa:	4615      	mov	r5, r2
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	f001 ff8b 	bl	800d8cc <SDMMC_CmdSelDesel>
 800b9b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <SD_InitCard+0x176>
  {
    return errorstate;
 800b9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c0:	e00e      	b.n	800b9e0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	466c      	mov	r4, sp
 800b9ca:	f103 0210 	add.w	r2, r3, #16
 800b9ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800b9d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f001 fdcf 	bl	800d57c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3740      	adds	r7, #64	; 0x40
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bdb0      	pop	{r4, r5, r7, pc}

0800b9e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 ff86 	bl	800d912 <SDMMC_CmdGoIdleState>
 800ba06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	e072      	b.n	800baf8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 ff99 	bl	800d94e <SDMMC_CmdOperCond>
 800ba1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00d      	beq.n	800ba40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f001 ff6f 	bl	800d912 <SDMMC_CmdGoIdleState>
 800ba34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d004      	beq.n	800ba46 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	e05b      	b.n	800baf8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d137      	bne.n	800babe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 ff99 	bl	800d98c <SDMMC_CmdAppCommand>
 800ba5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d02d      	beq.n	800babe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba66:	e047      	b.n	800baf8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 ff8c 	bl	800d98c <SDMMC_CmdAppCommand>
 800ba74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <SD_PowerON+0x98>
    {
      return errorstate;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	e03b      	b.n	800baf8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	491e      	ldr	r1, [pc, #120]	; (800bb00 <SD_PowerON+0x118>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 ffa2 	bl	800d9d0 <SDMMC_CmdAppOperCommand>
 800ba8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba98:	e02e      	b.n	800baf8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2100      	movs	r1, #0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fe08 	bl	800d6b6 <SDMMC_GetResponse>
 800baa6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	0fdb      	lsrs	r3, r3, #31
 800baac:	2b01      	cmp	r3, #1
 800baae:	d101      	bne.n	800bab4 <SD_PowerON+0xcc>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e000      	b.n	800bab6 <SD_PowerON+0xce>
 800bab4:	2300      	movs	r3, #0
 800bab6:	613b      	str	r3, [r7, #16]

    count++;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3301      	adds	r3, #1
 800babc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d802      	bhi.n	800bace <SD_PowerON+0xe6>
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0cc      	beq.n	800ba68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d902      	bls.n	800bade <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800badc:	e00c      	b.n	800baf8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	645a      	str	r2, [r3, #68]	; 0x44
 800baee:	e002      	b.n	800baf6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	c1100000 	.word	0xc1100000

0800bb04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bb14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb18:	e018      	b.n	800bb4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb22:	041b      	lsls	r3, r3, #16
 800bb24:	4619      	mov	r1, r3
 800bb26:	4610      	mov	r0, r2
 800bb28:	f001 ffd4 	bl	800dad4 <SDMMC_CmdSendStatus>
 800bb2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	e009      	b.n	800bb4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f001 fdb9 	bl	800d6b6 <SDMMC_GetResponse>
 800bb44:	4602      	mov	r2, r0
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb66:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d03f      	beq.n	800bbee <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e033      	b.n	800bbdc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fd2b 	bl	800d5d4 <SDMMC_ReadFIFO>
 800bb7e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	0a1b      	lsrs	r3, r3, #8
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	0e1b      	lsrs	r3, r3, #24
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2b07      	cmp	r3, #7
 800bbe0:	d9c8      	bls.n	800bb74 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b086      	sub	sp, #24
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc08:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d043      	beq.n	800bc98 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e037      	b.n	800bc86 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	021a      	lsls	r2, r3, #8
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3301      	adds	r3, #1
 800bc38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	041a      	lsls	r2, r3, #16
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	061a      	lsls	r2, r3, #24
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3301      	adds	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f107 0208 	add.w	r2, r7, #8
 800bc78:	4611      	mov	r1, r2
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f001 fcb7 	bl	800d5ee <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	3301      	adds	r3, #1
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b07      	cmp	r3, #7
 800bc8a:	d9c4      	bls.n	800bc16 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bc98:	bf00      	nop
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e038      	b.n	800bd28 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f7f9 fad0 	bl	8005270 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	4619      	mov	r1, r3
 800bcda:	4610      	mov	r0, r2
 800bcdc:	f001 fb36 	bl	800d34c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	461a      	mov	r2, r3
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	f001 fbbe 	bl	800d46c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6858      	ldr	r0, [r3, #4]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	689a      	ldr	r2, [r3, #8]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	f001 fc05 	bl	800d50c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	6892      	ldr	r2, [r2, #8]
 800bd0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	6892      	ldr	r2, [r2, #8]
 800bd16:	f041 0101 	orr.w	r1, r1, #1
 800bd1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e049      	b.n	800bdd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7f9 f952 	bl	8005000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f000 fa74 	bl	800c25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e049      	b.n	800be84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f841 	bl	800be8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	3304      	adds	r3, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f000 fa1d 	bl	800c25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d101      	bne.n	800bebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800beba:	2302      	movs	r3, #2
 800bebc:	e0ff      	b.n	800c0be <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b14      	cmp	r3, #20
 800beca:	f200 80f0 	bhi.w	800c0ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bece:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bf29 	.word	0x0800bf29
 800bed8:	0800c0af 	.word	0x0800c0af
 800bedc:	0800c0af 	.word	0x0800c0af
 800bee0:	0800c0af 	.word	0x0800c0af
 800bee4:	0800bf69 	.word	0x0800bf69
 800bee8:	0800c0af 	.word	0x0800c0af
 800beec:	0800c0af 	.word	0x0800c0af
 800bef0:	0800c0af 	.word	0x0800c0af
 800bef4:	0800bfab 	.word	0x0800bfab
 800bef8:	0800c0af 	.word	0x0800c0af
 800befc:	0800c0af 	.word	0x0800c0af
 800bf00:	0800c0af 	.word	0x0800c0af
 800bf04:	0800bfeb 	.word	0x0800bfeb
 800bf08:	0800c0af 	.word	0x0800c0af
 800bf0c:	0800c0af 	.word	0x0800c0af
 800bf10:	0800c0af 	.word	0x0800c0af
 800bf14:	0800c02d 	.word	0x0800c02d
 800bf18:	0800c0af 	.word	0x0800c0af
 800bf1c:	0800c0af 	.word	0x0800c0af
 800bf20:	0800c0af 	.word	0x0800c0af
 800bf24:	0800c06d 	.word	0x0800c06d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 fa34 	bl	800c39c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	699a      	ldr	r2, [r3, #24]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f042 0208 	orr.w	r2, r2, #8
 800bf42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	699a      	ldr	r2, [r3, #24]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0204 	bic.w	r2, r2, #4
 800bf52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6999      	ldr	r1, [r3, #24]
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	691a      	ldr	r2, [r3, #16]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	619a      	str	r2, [r3, #24]
      break;
 800bf66:	e0a5      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68b9      	ldr	r1, [r7, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fa86 	bl	800c480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	699a      	ldr	r2, [r3, #24]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699a      	ldr	r2, [r3, #24]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6999      	ldr	r1, [r3, #24]
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	021a      	lsls	r2, r3, #8
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	619a      	str	r2, [r3, #24]
      break;
 800bfa8:	e084      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 fadd 	bl	800c570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	69da      	ldr	r2, [r3, #28]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0208 	orr.w	r2, r2, #8
 800bfc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69da      	ldr	r2, [r3, #28]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f022 0204 	bic.w	r2, r2, #4
 800bfd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69d9      	ldr	r1, [r3, #28]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	691a      	ldr	r2, [r3, #16]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	61da      	str	r2, [r3, #28]
      break;
 800bfe8:	e064      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fb33 	bl	800c65c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69da      	ldr	r2, [r3, #28]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69da      	ldr	r2, [r3, #28]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	69d9      	ldr	r1, [r3, #28]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	021a      	lsls	r2, r3, #8
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	430a      	orrs	r2, r1
 800c028:	61da      	str	r2, [r3, #28]
      break;
 800c02a:	e043      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	4618      	mov	r0, r3
 800c034:	f000 fb6a 	bl	800c70c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 0208 	orr.w	r2, r2, #8
 800c046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f022 0204 	bic.w	r2, r2, #4
 800c056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c06a:	e023      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fb9c 	bl	800c7b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	021a      	lsls	r2, r3, #8
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0ac:	e002      	b.n	800c0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop

0800c0c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d101      	bne.n	800c0e4 <HAL_TIM_ConfigClockSource+0x1c>
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e0b4      	b.n	800c24e <HAL_TIM_ConfigClockSource+0x186>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	4b56      	ldr	r3, [pc, #344]	; (800c258 <HAL_TIM_ConfigClockSource+0x190>)
 800c100:	4013      	ands	r3, r2
 800c102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c10a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c11c:	d03e      	beq.n	800c19c <HAL_TIM_ConfigClockSource+0xd4>
 800c11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c122:	f200 8087 	bhi.w	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c12a:	f000 8086 	beq.w	800c23a <HAL_TIM_ConfigClockSource+0x172>
 800c12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c132:	d87f      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c134:	2b70      	cmp	r3, #112	; 0x70
 800c136:	d01a      	beq.n	800c16e <HAL_TIM_ConfigClockSource+0xa6>
 800c138:	2b70      	cmp	r3, #112	; 0x70
 800c13a:	d87b      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c13c:	2b60      	cmp	r3, #96	; 0x60
 800c13e:	d050      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x11a>
 800c140:	2b60      	cmp	r3, #96	; 0x60
 800c142:	d877      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c144:	2b50      	cmp	r3, #80	; 0x50
 800c146:	d03c      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0xfa>
 800c148:	2b50      	cmp	r3, #80	; 0x50
 800c14a:	d873      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c14c:	2b40      	cmp	r3, #64	; 0x40
 800c14e:	d058      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x13a>
 800c150:	2b40      	cmp	r3, #64	; 0x40
 800c152:	d86f      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c154:	2b30      	cmp	r3, #48	; 0x30
 800c156:	d064      	beq.n	800c222 <HAL_TIM_ConfigClockSource+0x15a>
 800c158:	2b30      	cmp	r3, #48	; 0x30
 800c15a:	d86b      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	d060      	beq.n	800c222 <HAL_TIM_ConfigClockSource+0x15a>
 800c160:	2b20      	cmp	r3, #32
 800c162:	d867      	bhi.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05c      	beq.n	800c222 <HAL_TIM_ConfigClockSource+0x15a>
 800c168:	2b10      	cmp	r3, #16
 800c16a:	d05a      	beq.n	800c222 <HAL_TIM_ConfigClockSource+0x15a>
 800c16c:	e062      	b.n	800c234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	6899      	ldr	r1, [r3, #8]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f000 fbe5 	bl	800c94c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	609a      	str	r2, [r3, #8]
      break;
 800c19a:	e04f      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	6899      	ldr	r1, [r3, #8]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f000 fbce 	bl	800c94c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689a      	ldr	r2, [r3, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1be:	609a      	str	r2, [r3, #8]
      break;
 800c1c0:	e03c      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	6859      	ldr	r1, [r3, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f000 fb42 	bl	800c858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2150      	movs	r1, #80	; 0x50
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 fb9b 	bl	800c916 <TIM_ITRx_SetConfig>
      break;
 800c1e0:	e02c      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	6859      	ldr	r1, [r3, #4]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f000 fb61 	bl	800c8b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2160      	movs	r1, #96	; 0x60
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 fb8b 	bl	800c916 <TIM_ITRx_SetConfig>
      break;
 800c200:	e01c      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6859      	ldr	r1, [r3, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	461a      	mov	r2, r3
 800c210:	f000 fb22 	bl	800c858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2140      	movs	r1, #64	; 0x40
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 fb7b 	bl	800c916 <TIM_ITRx_SetConfig>
      break;
 800c220:	e00c      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	4610      	mov	r0, r2
 800c22e:	f000 fb72 	bl	800c916 <TIM_ITRx_SetConfig>
      break;
 800c232:	e003      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	73fb      	strb	r3, [r7, #15]
      break;
 800c238:	e000      	b.n	800c23c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c23a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	fffeff88 	.word	0xfffeff88

0800c25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a40      	ldr	r2, [pc, #256]	; (800c370 <TIM_Base_SetConfig+0x114>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27a:	d00f      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a3d      	ldr	r2, [pc, #244]	; (800c374 <TIM_Base_SetConfig+0x118>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00b      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a3c      	ldr	r2, [pc, #240]	; (800c378 <TIM_Base_SetConfig+0x11c>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d007      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a3b      	ldr	r2, [pc, #236]	; (800c37c <TIM_Base_SetConfig+0x120>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a3a      	ldr	r2, [pc, #232]	; (800c380 <TIM_Base_SetConfig+0x124>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d108      	bne.n	800c2ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a2f      	ldr	r2, [pc, #188]	; (800c370 <TIM_Base_SetConfig+0x114>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d02b      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2bc:	d027      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a2c      	ldr	r2, [pc, #176]	; (800c374 <TIM_Base_SetConfig+0x118>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d023      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a2b      	ldr	r2, [pc, #172]	; (800c378 <TIM_Base_SetConfig+0x11c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d01f      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a2a      	ldr	r2, [pc, #168]	; (800c37c <TIM_Base_SetConfig+0x120>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d01b      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a29      	ldr	r2, [pc, #164]	; (800c380 <TIM_Base_SetConfig+0x124>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d017      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a28      	ldr	r2, [pc, #160]	; (800c384 <TIM_Base_SetConfig+0x128>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d013      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a27      	ldr	r2, [pc, #156]	; (800c388 <TIM_Base_SetConfig+0x12c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d00f      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a26      	ldr	r2, [pc, #152]	; (800c38c <TIM_Base_SetConfig+0x130>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d00b      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a25      	ldr	r2, [pc, #148]	; (800c390 <TIM_Base_SetConfig+0x134>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d007      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a24      	ldr	r2, [pc, #144]	; (800c394 <TIM_Base_SetConfig+0x138>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d003      	beq.n	800c30e <TIM_Base_SetConfig+0xb2>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a23      	ldr	r2, [pc, #140]	; (800c398 <TIM_Base_SetConfig+0x13c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d108      	bne.n	800c320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	689a      	ldr	r2, [r3, #8]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a0a      	ldr	r2, [pc, #40]	; (800c370 <TIM_Base_SetConfig+0x114>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d003      	beq.n	800c354 <TIM_Base_SetConfig+0xf8>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a0c      	ldr	r2, [pc, #48]	; (800c380 <TIM_Base_SetConfig+0x124>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d103      	bne.n	800c35c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	691a      	ldr	r2, [r3, #16]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	615a      	str	r2, [r3, #20]
}
 800c362:	bf00      	nop
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	40010000 	.word	0x40010000
 800c374:	40000400 	.word	0x40000400
 800c378:	40000800 	.word	0x40000800
 800c37c:	40000c00 	.word	0x40000c00
 800c380:	40010400 	.word	0x40010400
 800c384:	40014000 	.word	0x40014000
 800c388:	40014400 	.word	0x40014400
 800c38c:	40014800 	.word	0x40014800
 800c390:	40001800 	.word	0x40001800
 800c394:	40001c00 	.word	0x40001c00
 800c398:	40002000 	.word	0x40002000

0800c39c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	f023 0201 	bic.w	r2, r3, #1
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <TIM_OC1_SetConfig+0xd8>)
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f023 0302 	bic.w	r3, r3, #2
 800c3e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a21      	ldr	r2, [pc, #132]	; (800c478 <TIM_OC1_SetConfig+0xdc>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d003      	beq.n	800c400 <TIM_OC1_SetConfig+0x64>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a20      	ldr	r2, [pc, #128]	; (800c47c <TIM_OC1_SetConfig+0xe0>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d10c      	bne.n	800c41a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f023 0308 	bic.w	r3, r3, #8
 800c406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	697a      	ldr	r2, [r7, #20]
 800c40e:	4313      	orrs	r3, r2
 800c410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f023 0304 	bic.w	r3, r3, #4
 800c418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a16      	ldr	r2, [pc, #88]	; (800c478 <TIM_OC1_SetConfig+0xdc>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d003      	beq.n	800c42a <TIM_OC1_SetConfig+0x8e>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a15      	ldr	r2, [pc, #84]	; (800c47c <TIM_OC1_SetConfig+0xe0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d111      	bne.n	800c44e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	4313      	orrs	r3, r2
 800c442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	621a      	str	r2, [r3, #32]
}
 800c468:	bf00      	nop
 800c46a:	371c      	adds	r7, #28
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	fffeff8f 	.word	0xfffeff8f
 800c478:	40010000 	.word	0x40010000
 800c47c:	40010400 	.word	0x40010400

0800c480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	f023 0210 	bic.w	r2, r3, #16
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4b2e      	ldr	r3, [pc, #184]	; (800c564 <TIM_OC2_SetConfig+0xe4>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	021b      	lsls	r3, r3, #8
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f023 0320 	bic.w	r3, r3, #32
 800c4ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	011b      	lsls	r3, r3, #4
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a23      	ldr	r2, [pc, #140]	; (800c568 <TIM_OC2_SetConfig+0xe8>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d003      	beq.n	800c4e8 <TIM_OC2_SetConfig+0x68>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a22      	ldr	r2, [pc, #136]	; (800c56c <TIM_OC2_SetConfig+0xec>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d10d      	bne.n	800c504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	011b      	lsls	r3, r3, #4
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a18      	ldr	r2, [pc, #96]	; (800c568 <TIM_OC2_SetConfig+0xe8>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d003      	beq.n	800c514 <TIM_OC2_SetConfig+0x94>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a17      	ldr	r2, [pc, #92]	; (800c56c <TIM_OC2_SetConfig+0xec>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d113      	bne.n	800c53c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c51a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	4313      	orrs	r3, r2
 800c53a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	621a      	str	r2, [r3, #32]
}
 800c556:	bf00      	nop
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	feff8fff 	.word	0xfeff8fff
 800c568:	40010000 	.word	0x40010000
 800c56c:	40010400 	.word	0x40010400

0800c570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4b2d      	ldr	r3, [pc, #180]	; (800c650 <TIM_OC3_SetConfig+0xe0>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0303 	bic.w	r3, r3, #3
 800c5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	021b      	lsls	r3, r3, #8
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a22      	ldr	r2, [pc, #136]	; (800c654 <TIM_OC3_SetConfig+0xe4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d003      	beq.n	800c5d6 <TIM_OC3_SetConfig+0x66>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a21      	ldr	r2, [pc, #132]	; (800c658 <TIM_OC3_SetConfig+0xe8>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d10d      	bne.n	800c5f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	021b      	lsls	r3, r3, #8
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a17      	ldr	r2, [pc, #92]	; (800c654 <TIM_OC3_SetConfig+0xe4>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d003      	beq.n	800c602 <TIM_OC3_SetConfig+0x92>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a16      	ldr	r2, [pc, #88]	; (800c658 <TIM_OC3_SetConfig+0xe8>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d113      	bne.n	800c62a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	011b      	lsls	r3, r3, #4
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	011b      	lsls	r3, r3, #4
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4313      	orrs	r3, r2
 800c628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	621a      	str	r2, [r3, #32]
}
 800c644:	bf00      	nop
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	fffeff8f 	.word	0xfffeff8f
 800c654:	40010000 	.word	0x40010000
 800c658:	40010400 	.word	0x40010400

0800c65c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4b1e      	ldr	r3, [pc, #120]	; (800c700 <TIM_OC4_SetConfig+0xa4>)
 800c688:	4013      	ands	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	031b      	lsls	r3, r3, #12
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a13      	ldr	r2, [pc, #76]	; (800c704 <TIM_OC4_SetConfig+0xa8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC4_SetConfig+0x68>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a12      	ldr	r2, [pc, #72]	; (800c708 <TIM_OC4_SetConfig+0xac>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d109      	bne.n	800c6d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	019b      	lsls	r3, r3, #6
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	feff8fff 	.word	0xfeff8fff
 800c704:	40010000 	.word	0x40010000
 800c708:	40010400 	.word	0x40010400

0800c70c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4b1b      	ldr	r3, [pc, #108]	; (800c7a4 <TIM_OC5_SetConfig+0x98>)
 800c738:	4013      	ands	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c74c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	041b      	lsls	r3, r3, #16
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	4313      	orrs	r3, r2
 800c758:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a12      	ldr	r2, [pc, #72]	; (800c7a8 <TIM_OC5_SetConfig+0x9c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d003      	beq.n	800c76a <TIM_OC5_SetConfig+0x5e>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <TIM_OC5_SetConfig+0xa0>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d109      	bne.n	800c77e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	021b      	lsls	r3, r3, #8
 800c778:	697a      	ldr	r2, [r7, #20]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	621a      	str	r2, [r3, #32]
}
 800c798:	bf00      	nop
 800c79a:	371c      	adds	r7, #28
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	fffeff8f 	.word	0xfffeff8f
 800c7a8:	40010000 	.word	0x40010000
 800c7ac:	40010400 	.word	0x40010400

0800c7b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4b1c      	ldr	r3, [pc, #112]	; (800c84c <TIM_OC6_SetConfig+0x9c>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	051b      	lsls	r3, r3, #20
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a13      	ldr	r2, [pc, #76]	; (800c850 <TIM_OC6_SetConfig+0xa0>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d003      	beq.n	800c810 <TIM_OC6_SetConfig+0x60>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a12      	ldr	r2, [pc, #72]	; (800c854 <TIM_OC6_SetConfig+0xa4>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d109      	bne.n	800c824 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	029b      	lsls	r3, r3, #10
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	4313      	orrs	r3, r2
 800c822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	621a      	str	r2, [r3, #32]
}
 800c83e:	bf00      	nop
 800c840:	371c      	adds	r7, #28
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	feff8fff 	.word	0xfeff8fff
 800c850:	40010000 	.word	0x40010000
 800c854:	40010400 	.word	0x40010400

0800c858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	f023 0201 	bic.w	r2, r3, #1
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	011b      	lsls	r3, r3, #4
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f023 030a 	bic.w	r3, r3, #10
 800c894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	621a      	str	r2, [r3, #32]
}
 800c8aa:	bf00      	nop
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b087      	sub	sp, #28
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	60f8      	str	r0, [r7, #12]
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	f023 0210 	bic.w	r2, r3, #16
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	031b      	lsls	r3, r3, #12
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	011b      	lsls	r3, r3, #4
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	621a      	str	r2, [r3, #32]
}
 800c90a:	bf00      	nop
 800c90c:	371c      	adds	r7, #28
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c916:	b480      	push	{r7}
 800c918:	b085      	sub	sp, #20
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4313      	orrs	r3, r2
 800c934:	f043 0307 	orr.w	r3, r3, #7
 800c938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	609a      	str	r2, [r3, #8]
}
 800c940:	bf00      	nop
 800c942:	3714      	adds	r7, #20
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	021a      	lsls	r2, r3, #8
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	431a      	orrs	r2, r3
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	4313      	orrs	r3, r2
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	4313      	orrs	r3, r2
 800c978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	609a      	str	r2, [r3, #8]
}
 800c980:	bf00      	nop
 800c982:	371c      	adds	r7, #28
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e06d      	b.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a30      	ldr	r2, [pc, #192]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d004      	beq.n	800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a2f      	ldr	r2, [pc, #188]	; (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d108      	bne.n	800c9ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a20      	ldr	r2, [pc, #128]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d022      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca16:	d01d      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a1d      	ldr	r2, [pc, #116]	; (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d018      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a1c      	ldr	r2, [pc, #112]	; (800ca98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d013      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a1a      	ldr	r2, [pc, #104]	; (800ca9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00e      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a15      	ldr	r2, [pc, #84]	; (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d009      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a16      	ldr	r2, [pc, #88]	; (800caa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d004      	beq.n	800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	; (800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d10c      	bne.n	800ca6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	40010000 	.word	0x40010000
 800ca90:	40010400 	.word	0x40010400
 800ca94:	40000400 	.word	0x40000400
 800ca98:	40000800 	.word	0x40000800
 800ca9c:	40000c00 	.word	0x40000c00
 800caa0:	40014000 	.word	0x40014000
 800caa4:	40001800 	.word	0x40001800

0800caa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e040      	b.n	800cb3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7f8 fb04 	bl	80050d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2224      	movs	r2, #36	; 0x24
 800cad4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f022 0201 	bic.w	r2, r2, #1
 800cae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f82c 	bl	800cb44 <UART_SetConfig>
 800caec:	4603      	mov	r3, r0
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d101      	bne.n	800caf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e022      	b.n	800cb3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d002      	beq.n	800cb04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fa84 	bl	800d00c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685a      	ldr	r2, [r3, #4]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689a      	ldr	r2, [r3, #8]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f042 0201 	orr.w	r2, r2, #1
 800cb32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fb0b 	bl	800d150 <UART_CheckIdleState>
 800cb3a:	4603      	mov	r3, r0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	689a      	ldr	r2, [r3, #8]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	69db      	ldr	r3, [r3, #28]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	4ba6      	ldr	r3, [pc, #664]	; (800ce08 <UART_SetConfig+0x2c4>)
 800cb70:	4013      	ands	r3, r2
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	6979      	ldr	r1, [r7, #20]
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a94      	ldr	r2, [pc, #592]	; (800ce0c <UART_SetConfig+0x2c8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d120      	bne.n	800cc02 <UART_SetConfig+0xbe>
 800cbc0:	4b93      	ldr	r3, [pc, #588]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cbc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc6:	f003 0303 	and.w	r3, r3, #3
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d816      	bhi.n	800cbfc <UART_SetConfig+0xb8>
 800cbce:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <UART_SetConfig+0x90>)
 800cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd4:	0800cbe5 	.word	0x0800cbe5
 800cbd8:	0800cbf1 	.word	0x0800cbf1
 800cbdc:	0800cbeb 	.word	0x0800cbeb
 800cbe0:	0800cbf7 	.word	0x0800cbf7
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	77fb      	strb	r3, [r7, #31]
 800cbe8:	e150      	b.n	800ce8c <UART_SetConfig+0x348>
 800cbea:	2302      	movs	r3, #2
 800cbec:	77fb      	strb	r3, [r7, #31]
 800cbee:	e14d      	b.n	800ce8c <UART_SetConfig+0x348>
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	77fb      	strb	r3, [r7, #31]
 800cbf4:	e14a      	b.n	800ce8c <UART_SetConfig+0x348>
 800cbf6:	2308      	movs	r3, #8
 800cbf8:	77fb      	strb	r3, [r7, #31]
 800cbfa:	e147      	b.n	800ce8c <UART_SetConfig+0x348>
 800cbfc:	2310      	movs	r3, #16
 800cbfe:	77fb      	strb	r3, [r7, #31]
 800cc00:	e144      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a83      	ldr	r2, [pc, #524]	; (800ce14 <UART_SetConfig+0x2d0>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d132      	bne.n	800cc72 <UART_SetConfig+0x12e>
 800cc0c:	4b80      	ldr	r3, [pc, #512]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc12:	f003 030c 	and.w	r3, r3, #12
 800cc16:	2b0c      	cmp	r3, #12
 800cc18:	d828      	bhi.n	800cc6c <UART_SetConfig+0x128>
 800cc1a:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <UART_SetConfig+0xdc>)
 800cc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc20:	0800cc55 	.word	0x0800cc55
 800cc24:	0800cc6d 	.word	0x0800cc6d
 800cc28:	0800cc6d 	.word	0x0800cc6d
 800cc2c:	0800cc6d 	.word	0x0800cc6d
 800cc30:	0800cc61 	.word	0x0800cc61
 800cc34:	0800cc6d 	.word	0x0800cc6d
 800cc38:	0800cc6d 	.word	0x0800cc6d
 800cc3c:	0800cc6d 	.word	0x0800cc6d
 800cc40:	0800cc5b 	.word	0x0800cc5b
 800cc44:	0800cc6d 	.word	0x0800cc6d
 800cc48:	0800cc6d 	.word	0x0800cc6d
 800cc4c:	0800cc6d 	.word	0x0800cc6d
 800cc50:	0800cc67 	.word	0x0800cc67
 800cc54:	2300      	movs	r3, #0
 800cc56:	77fb      	strb	r3, [r7, #31]
 800cc58:	e118      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	77fb      	strb	r3, [r7, #31]
 800cc5e:	e115      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc60:	2304      	movs	r3, #4
 800cc62:	77fb      	strb	r3, [r7, #31]
 800cc64:	e112      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc66:	2308      	movs	r3, #8
 800cc68:	77fb      	strb	r3, [r7, #31]
 800cc6a:	e10f      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	77fb      	strb	r3, [r7, #31]
 800cc70:	e10c      	b.n	800ce8c <UART_SetConfig+0x348>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a68      	ldr	r2, [pc, #416]	; (800ce18 <UART_SetConfig+0x2d4>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d120      	bne.n	800ccbe <UART_SetConfig+0x17a>
 800cc7c:	4b64      	ldr	r3, [pc, #400]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc86:	2b30      	cmp	r3, #48	; 0x30
 800cc88:	d013      	beq.n	800ccb2 <UART_SetConfig+0x16e>
 800cc8a:	2b30      	cmp	r3, #48	; 0x30
 800cc8c:	d814      	bhi.n	800ccb8 <UART_SetConfig+0x174>
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	d009      	beq.n	800cca6 <UART_SetConfig+0x162>
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	d810      	bhi.n	800ccb8 <UART_SetConfig+0x174>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <UART_SetConfig+0x15c>
 800cc9a:	2b10      	cmp	r3, #16
 800cc9c:	d006      	beq.n	800ccac <UART_SetConfig+0x168>
 800cc9e:	e00b      	b.n	800ccb8 <UART_SetConfig+0x174>
 800cca0:	2300      	movs	r3, #0
 800cca2:	77fb      	strb	r3, [r7, #31]
 800cca4:	e0f2      	b.n	800ce8c <UART_SetConfig+0x348>
 800cca6:	2302      	movs	r3, #2
 800cca8:	77fb      	strb	r3, [r7, #31]
 800ccaa:	e0ef      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccac:	2304      	movs	r3, #4
 800ccae:	77fb      	strb	r3, [r7, #31]
 800ccb0:	e0ec      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccb2:	2308      	movs	r3, #8
 800ccb4:	77fb      	strb	r3, [r7, #31]
 800ccb6:	e0e9      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccb8:	2310      	movs	r3, #16
 800ccba:	77fb      	strb	r3, [r7, #31]
 800ccbc:	e0e6      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a56      	ldr	r2, [pc, #344]	; (800ce1c <UART_SetConfig+0x2d8>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d120      	bne.n	800cd0a <UART_SetConfig+0x1c6>
 800ccc8:	4b51      	ldr	r3, [pc, #324]	; (800ce10 <UART_SetConfig+0x2cc>)
 800ccca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccd2:	2bc0      	cmp	r3, #192	; 0xc0
 800ccd4:	d013      	beq.n	800ccfe <UART_SetConfig+0x1ba>
 800ccd6:	2bc0      	cmp	r3, #192	; 0xc0
 800ccd8:	d814      	bhi.n	800cd04 <UART_SetConfig+0x1c0>
 800ccda:	2b80      	cmp	r3, #128	; 0x80
 800ccdc:	d009      	beq.n	800ccf2 <UART_SetConfig+0x1ae>
 800ccde:	2b80      	cmp	r3, #128	; 0x80
 800cce0:	d810      	bhi.n	800cd04 <UART_SetConfig+0x1c0>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <UART_SetConfig+0x1a8>
 800cce6:	2b40      	cmp	r3, #64	; 0x40
 800cce8:	d006      	beq.n	800ccf8 <UART_SetConfig+0x1b4>
 800ccea:	e00b      	b.n	800cd04 <UART_SetConfig+0x1c0>
 800ccec:	2300      	movs	r3, #0
 800ccee:	77fb      	strb	r3, [r7, #31]
 800ccf0:	e0cc      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	77fb      	strb	r3, [r7, #31]
 800ccf6:	e0c9      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	77fb      	strb	r3, [r7, #31]
 800ccfc:	e0c6      	b.n	800ce8c <UART_SetConfig+0x348>
 800ccfe:	2308      	movs	r3, #8
 800cd00:	77fb      	strb	r3, [r7, #31]
 800cd02:	e0c3      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd04:	2310      	movs	r3, #16
 800cd06:	77fb      	strb	r3, [r7, #31]
 800cd08:	e0c0      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a44      	ldr	r2, [pc, #272]	; (800ce20 <UART_SetConfig+0x2dc>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d125      	bne.n	800cd60 <UART_SetConfig+0x21c>
 800cd14:	4b3e      	ldr	r3, [pc, #248]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd22:	d017      	beq.n	800cd54 <UART_SetConfig+0x210>
 800cd24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd28:	d817      	bhi.n	800cd5a <UART_SetConfig+0x216>
 800cd2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd2e:	d00b      	beq.n	800cd48 <UART_SetConfig+0x204>
 800cd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd34:	d811      	bhi.n	800cd5a <UART_SetConfig+0x216>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d003      	beq.n	800cd42 <UART_SetConfig+0x1fe>
 800cd3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd3e:	d006      	beq.n	800cd4e <UART_SetConfig+0x20a>
 800cd40:	e00b      	b.n	800cd5a <UART_SetConfig+0x216>
 800cd42:	2300      	movs	r3, #0
 800cd44:	77fb      	strb	r3, [r7, #31]
 800cd46:	e0a1      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd48:	2302      	movs	r3, #2
 800cd4a:	77fb      	strb	r3, [r7, #31]
 800cd4c:	e09e      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd4e:	2304      	movs	r3, #4
 800cd50:	77fb      	strb	r3, [r7, #31]
 800cd52:	e09b      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd54:	2308      	movs	r3, #8
 800cd56:	77fb      	strb	r3, [r7, #31]
 800cd58:	e098      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd5a:	2310      	movs	r3, #16
 800cd5c:	77fb      	strb	r3, [r7, #31]
 800cd5e:	e095      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a2f      	ldr	r2, [pc, #188]	; (800ce24 <UART_SetConfig+0x2e0>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d125      	bne.n	800cdb6 <UART_SetConfig+0x272>
 800cd6a:	4b29      	ldr	r3, [pc, #164]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd78:	d017      	beq.n	800cdaa <UART_SetConfig+0x266>
 800cd7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd7e:	d817      	bhi.n	800cdb0 <UART_SetConfig+0x26c>
 800cd80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd84:	d00b      	beq.n	800cd9e <UART_SetConfig+0x25a>
 800cd86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd8a:	d811      	bhi.n	800cdb0 <UART_SetConfig+0x26c>
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <UART_SetConfig+0x254>
 800cd90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd94:	d006      	beq.n	800cda4 <UART_SetConfig+0x260>
 800cd96:	e00b      	b.n	800cdb0 <UART_SetConfig+0x26c>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	77fb      	strb	r3, [r7, #31]
 800cd9c:	e076      	b.n	800ce8c <UART_SetConfig+0x348>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	77fb      	strb	r3, [r7, #31]
 800cda2:	e073      	b.n	800ce8c <UART_SetConfig+0x348>
 800cda4:	2304      	movs	r3, #4
 800cda6:	77fb      	strb	r3, [r7, #31]
 800cda8:	e070      	b.n	800ce8c <UART_SetConfig+0x348>
 800cdaa:	2308      	movs	r3, #8
 800cdac:	77fb      	strb	r3, [r7, #31]
 800cdae:	e06d      	b.n	800ce8c <UART_SetConfig+0x348>
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	77fb      	strb	r3, [r7, #31]
 800cdb4:	e06a      	b.n	800ce8c <UART_SetConfig+0x348>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a1b      	ldr	r2, [pc, #108]	; (800ce28 <UART_SetConfig+0x2e4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d138      	bne.n	800ce32 <UART_SetConfig+0x2ee>
 800cdc0:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <UART_SetConfig+0x2cc>)
 800cdc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cdca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdce:	d017      	beq.n	800ce00 <UART_SetConfig+0x2bc>
 800cdd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdd4:	d82a      	bhi.n	800ce2c <UART_SetConfig+0x2e8>
 800cdd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdda:	d00b      	beq.n	800cdf4 <UART_SetConfig+0x2b0>
 800cddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cde0:	d824      	bhi.n	800ce2c <UART_SetConfig+0x2e8>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <UART_SetConfig+0x2aa>
 800cde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdea:	d006      	beq.n	800cdfa <UART_SetConfig+0x2b6>
 800cdec:	e01e      	b.n	800ce2c <UART_SetConfig+0x2e8>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	77fb      	strb	r3, [r7, #31]
 800cdf2:	e04b      	b.n	800ce8c <UART_SetConfig+0x348>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	77fb      	strb	r3, [r7, #31]
 800cdf8:	e048      	b.n	800ce8c <UART_SetConfig+0x348>
 800cdfa:	2304      	movs	r3, #4
 800cdfc:	77fb      	strb	r3, [r7, #31]
 800cdfe:	e045      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce00:	2308      	movs	r3, #8
 800ce02:	77fb      	strb	r3, [r7, #31]
 800ce04:	e042      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce06:	bf00      	nop
 800ce08:	efff69f3 	.word	0xefff69f3
 800ce0c:	40011000 	.word	0x40011000
 800ce10:	40023800 	.word	0x40023800
 800ce14:	40004400 	.word	0x40004400
 800ce18:	40004800 	.word	0x40004800
 800ce1c:	40004c00 	.word	0x40004c00
 800ce20:	40005000 	.word	0x40005000
 800ce24:	40011400 	.word	0x40011400
 800ce28:	40007800 	.word	0x40007800
 800ce2c:	2310      	movs	r3, #16
 800ce2e:	77fb      	strb	r3, [r7, #31]
 800ce30:	e02c      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a72      	ldr	r2, [pc, #456]	; (800d000 <UART_SetConfig+0x4bc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d125      	bne.n	800ce88 <UART_SetConfig+0x344>
 800ce3c:	4b71      	ldr	r3, [pc, #452]	; (800d004 <UART_SetConfig+0x4c0>)
 800ce3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce4a:	d017      	beq.n	800ce7c <UART_SetConfig+0x338>
 800ce4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce50:	d817      	bhi.n	800ce82 <UART_SetConfig+0x33e>
 800ce52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce56:	d00b      	beq.n	800ce70 <UART_SetConfig+0x32c>
 800ce58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce5c:	d811      	bhi.n	800ce82 <UART_SetConfig+0x33e>
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <UART_SetConfig+0x326>
 800ce62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce66:	d006      	beq.n	800ce76 <UART_SetConfig+0x332>
 800ce68:	e00b      	b.n	800ce82 <UART_SetConfig+0x33e>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	77fb      	strb	r3, [r7, #31]
 800ce6e:	e00d      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce70:	2302      	movs	r3, #2
 800ce72:	77fb      	strb	r3, [r7, #31]
 800ce74:	e00a      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce76:	2304      	movs	r3, #4
 800ce78:	77fb      	strb	r3, [r7, #31]
 800ce7a:	e007      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce7c:	2308      	movs	r3, #8
 800ce7e:	77fb      	strb	r3, [r7, #31]
 800ce80:	e004      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce82:	2310      	movs	r3, #16
 800ce84:	77fb      	strb	r3, [r7, #31]
 800ce86:	e001      	b.n	800ce8c <UART_SetConfig+0x348>
 800ce88:	2310      	movs	r3, #16
 800ce8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce94:	d15b      	bne.n	800cf4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ce96:	7ffb      	ldrb	r3, [r7, #31]
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d828      	bhi.n	800ceee <UART_SetConfig+0x3aa>
 800ce9c:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <UART_SetConfig+0x360>)
 800ce9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea2:	bf00      	nop
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800ced1 	.word	0x0800ced1
 800ceac:	0800ced9 	.word	0x0800ced9
 800ceb0:	0800ceef 	.word	0x0800ceef
 800ceb4:	0800cedf 	.word	0x0800cedf
 800ceb8:	0800ceef 	.word	0x0800ceef
 800cebc:	0800ceef 	.word	0x0800ceef
 800cec0:	0800ceef 	.word	0x0800ceef
 800cec4:	0800cee7 	.word	0x0800cee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec8:	f7fd f9e2 	bl	800a290 <HAL_RCC_GetPCLK1Freq>
 800cecc:	61b8      	str	r0, [r7, #24]
        break;
 800cece:	e013      	b.n	800cef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ced0:	f7fd f9f2 	bl	800a2b8 <HAL_RCC_GetPCLK2Freq>
 800ced4:	61b8      	str	r0, [r7, #24]
        break;
 800ced6:	e00f      	b.n	800cef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ced8:	4b4b      	ldr	r3, [pc, #300]	; (800d008 <UART_SetConfig+0x4c4>)
 800ceda:	61bb      	str	r3, [r7, #24]
        break;
 800cedc:	e00c      	b.n	800cef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cede:	f7fd f8c7 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800cee2:	61b8      	str	r0, [r7, #24]
        break;
 800cee4:	e008      	b.n	800cef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceea:	61bb      	str	r3, [r7, #24]
        break;
 800ceec:	e004      	b.n	800cef8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ceee:	2300      	movs	r3, #0
 800cef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	77bb      	strb	r3, [r7, #30]
        break;
 800cef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d074      	beq.n	800cfe8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	005a      	lsls	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	085b      	lsrs	r3, r3, #1
 800cf08:	441a      	add	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d916      	bls.n	800cf48 <UART_SetConfig+0x404>
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf20:	d212      	bcs.n	800cf48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	f023 030f 	bic.w	r3, r3, #15
 800cf2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	085b      	lsrs	r3, r3, #1
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	f003 0307 	and.w	r3, r3, #7
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	89fb      	ldrh	r3, [r7, #14]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	89fa      	ldrh	r2, [r7, #14]
 800cf44:	60da      	str	r2, [r3, #12]
 800cf46:	e04f      	b.n	800cfe8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	77bb      	strb	r3, [r7, #30]
 800cf4c:	e04c      	b.n	800cfe8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf4e:	7ffb      	ldrb	r3, [r7, #31]
 800cf50:	2b08      	cmp	r3, #8
 800cf52:	d828      	bhi.n	800cfa6 <UART_SetConfig+0x462>
 800cf54:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <UART_SetConfig+0x418>)
 800cf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5a:	bf00      	nop
 800cf5c:	0800cf81 	.word	0x0800cf81
 800cf60:	0800cf89 	.word	0x0800cf89
 800cf64:	0800cf91 	.word	0x0800cf91
 800cf68:	0800cfa7 	.word	0x0800cfa7
 800cf6c:	0800cf97 	.word	0x0800cf97
 800cf70:	0800cfa7 	.word	0x0800cfa7
 800cf74:	0800cfa7 	.word	0x0800cfa7
 800cf78:	0800cfa7 	.word	0x0800cfa7
 800cf7c:	0800cf9f 	.word	0x0800cf9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf80:	f7fd f986 	bl	800a290 <HAL_RCC_GetPCLK1Freq>
 800cf84:	61b8      	str	r0, [r7, #24]
        break;
 800cf86:	e013      	b.n	800cfb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf88:	f7fd f996 	bl	800a2b8 <HAL_RCC_GetPCLK2Freq>
 800cf8c:	61b8      	str	r0, [r7, #24]
        break;
 800cf8e:	e00f      	b.n	800cfb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf90:	4b1d      	ldr	r3, [pc, #116]	; (800d008 <UART_SetConfig+0x4c4>)
 800cf92:	61bb      	str	r3, [r7, #24]
        break;
 800cf94:	e00c      	b.n	800cfb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf96:	f7fd f86b 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800cf9a:	61b8      	str	r0, [r7, #24]
        break;
 800cf9c:	e008      	b.n	800cfb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfa2:	61bb      	str	r3, [r7, #24]
        break;
 800cfa4:	e004      	b.n	800cfb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	77bb      	strb	r3, [r7, #30]
        break;
 800cfae:	bf00      	nop
    }

    if (pclk != 0U)
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d018      	beq.n	800cfe8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	085a      	lsrs	r2, r3, #1
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	441a      	add	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	2b0f      	cmp	r3, #15
 800cfce:	d909      	bls.n	800cfe4 <UART_SetConfig+0x4a0>
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfd6:	d205      	bcs.n	800cfe4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	60da      	str	r2, [r3, #12]
 800cfe2:	e001      	b.n	800cfe8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cff4:	7fbb      	ldrb	r3, [r7, #30]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3720      	adds	r7, #32
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	40007c00 	.word	0x40007c00
 800d004:	40023800 	.word	0x40023800
 800d008:	00f42400 	.word	0x00f42400

0800d00c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	f003 0301 	and.w	r3, r3, #1
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00a      	beq.n	800d036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	f003 0302 	and.w	r3, r3, #2
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	f003 0304 	and.w	r3, r3, #4
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00a      	beq.n	800d07a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	f003 0308 	and.w	r3, r3, #8
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	430a      	orrs	r2, r1
 800d09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	f003 0310 	and.w	r3, r3, #16
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	430a      	orrs	r2, r1
 800d0bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	f003 0320 	and.w	r3, r3, #32
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00a      	beq.n	800d0e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d01a      	beq.n	800d122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	430a      	orrs	r2, r1
 800d100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d10a:	d10a      	bne.n	800d122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	430a      	orrs	r2, r1
 800d142:	605a      	str	r2, [r3, #4]
  }
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af02      	add	r7, sp, #8
 800d156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d160:	f7f8 fa48 	bl	80055f4 <HAL_GetTick>
 800d164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 0308 	and.w	r3, r3, #8
 800d170:	2b08      	cmp	r3, #8
 800d172:	d10e      	bne.n	800d192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f81b 	bl	800d1be <UART_WaitOnFlagUntilTimeout>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e011      	b.n	800d1b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2220      	movs	r2, #32
 800d196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b09c      	sub	sp, #112	; 0x70
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	60f8      	str	r0, [r7, #12]
 800d1c6:	60b9      	str	r1, [r7, #8]
 800d1c8:	603b      	str	r3, [r7, #0]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1ce:	e0a7      	b.n	800d320 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d6:	f000 80a3 	beq.w	800d320 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1da:	f7f8 fa0b 	bl	80055f4 <HAL_GetTick>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d302      	bcc.n	800d1f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d13f      	bne.n	800d270 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f8:	e853 3f00 	ldrex	r3, [r3]
 800d1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d204:	667b      	str	r3, [r7, #100]	; 0x64
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d20e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d210:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d216:	e841 2300 	strex	r3, r2, [r1]
 800d21a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d21c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1e6      	bne.n	800d1f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3308      	adds	r3, #8
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	f023 0301 	bic.w	r3, r3, #1
 800d238:	663b      	str	r3, [r7, #96]	; 0x60
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3308      	adds	r3, #8
 800d240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d242:	64ba      	str	r2, [r7, #72]	; 0x48
 800d244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e5      	bne.n	800d222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2220      	movs	r2, #32
 800d25a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2220      	movs	r2, #32
 800d260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e068      	b.n	800d342 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f003 0304 	and.w	r3, r3, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d050      	beq.n	800d320 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d28c:	d148      	bne.n	800d320 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	e853 3f00 	ldrex	r3, [r3]
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2be:	e841 2300 	strex	r3, r2, [r1]
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1e6      	bne.n	800d298 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3308      	adds	r3, #8
 800d2d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	e853 3f00 	ldrex	r3, [r3]
 800d2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f023 0301 	bic.w	r3, r3, #1
 800d2e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2ea:	623a      	str	r2, [r7, #32]
 800d2ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	69f9      	ldr	r1, [r7, #28]
 800d2f0:	6a3a      	ldr	r2, [r7, #32]
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e5      	bne.n	800d2ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2220      	movs	r2, #32
 800d302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2220      	movs	r2, #32
 800d308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2220      	movs	r2, #32
 800d310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e010      	b.n	800d342 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	69da      	ldr	r2, [r3, #28]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	4013      	ands	r3, r2
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	bf0c      	ite	eq
 800d330:	2301      	moveq	r3, #1
 800d332:	2300      	movne	r3, #0
 800d334:	b2db      	uxtb	r3, r3
 800d336:	461a      	mov	r2, r3
 800d338:	79fb      	ldrb	r3, [r7, #7]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	f43f af48 	beq.w	800d1d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3770      	adds	r7, #112	; 0x70
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	6812      	ldr	r2, [r2, #0]
 800d364:	f023 0101 	bic.w	r1, r3, #1
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	2b08      	cmp	r3, #8
 800d374:	d102      	bne.n	800d37c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d376:	2340      	movs	r3, #64	; 0x40
 800d378:	617b      	str	r3, [r7, #20]
 800d37a:	e001      	b.n	800d380 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d37c:	2300      	movs	r3, #0
 800d37e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d38c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d392:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d398:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d39e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d3a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d3aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d3b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d3b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d3bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800d3e4:	4b20      	ldr	r3, [pc, #128]	; (800d468 <FMC_NORSRAM_Init+0x11c>)
 800d3e6:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3ee:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3f6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d3fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	43db      	mvns	r3, r3
 800d40e:	ea02 0103 	and.w	r1, r2, r3
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	4319      	orrs	r1, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d428:	d10c      	bne.n	800d444 <FMC_NORSRAM_Init+0xf8>
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d008      	beq.n	800d444 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43e:	431a      	orrs	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d006      	beq.n	800d45a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	371c      	adds	r7, #28
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	0008fb7f 	.word	0x0008fb7f

0800d46c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d482:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	431a      	orrs	r2, r3
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	021b      	lsls	r3, r3, #8
 800d498:	431a      	orrs	r2, r3
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	041b      	lsls	r3, r3, #16
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	051b      	lsls	r3, r3, #20
 800d4aa:	431a      	orrs	r2, r3
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	3b02      	subs	r3, #2
 800d4b2:	061b      	lsls	r3, r3, #24
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	3201      	adds	r2, #1
 800d4c0:	4319      	orrs	r1, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4d4:	d113      	bne.n	800d4fe <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4de:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	051b      	lsls	r3, r3, #20
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d520:	d11d      	bne.n	800d55e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d52a:	4b13      	ldr	r3, [pc, #76]	; (800d578 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d52c:	4013      	ands	r3, r2
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	6811      	ldr	r1, [r2, #0]
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	6852      	ldr	r2, [r2, #4]
 800d536:	0112      	lsls	r2, r2, #4
 800d538:	4311      	orrs	r1, r2
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	6892      	ldr	r2, [r2, #8]
 800d53e:	0212      	lsls	r2, r2, #8
 800d540:	4311      	orrs	r1, r2
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	6992      	ldr	r2, [r2, #24]
 800d546:	4311      	orrs	r1, r2
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	68d2      	ldr	r2, [r2, #12]
 800d54c:	0412      	lsls	r2, r2, #16
 800d54e:	430a      	orrs	r2, r1
 800d550:	ea43 0102 	orr.w	r1, r3, r2
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d55c:	e005      	b.n	800d56a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	cff00000 	.word	0xcff00000

0800d57c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d57c:	b084      	sub	sp, #16
 800d57e:	b480      	push	{r7}
 800d580:	b085      	sub	sp, #20
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	f107 001c 	add.w	r0, r7, #28
 800d58a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d592:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d594:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d596:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d59a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d59e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d5a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d5a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <SDMMC_Init+0x54>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	b004      	add	sp, #16
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	ffff8100 	.word	0xffff8100

0800d5d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d5ee:	b480      	push	{r7}
 800d5f0:	b083      	sub	sp, #12
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2203      	movs	r2, #3
 800d61c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 0303 	and.w	r3, r3, #3
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d666:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d66c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d672:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	4313      	orrs	r3, r2
 800d678:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68da      	ldr	r2, [r3, #12]
 800d67e:	4b06      	ldr	r3, [pc, #24]	; (800d698 <SDMMC_SendCommand+0x50>)
 800d680:	4013      	ands	r3, r2
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	431a      	orrs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	fffff000 	.word	0xfffff000

0800d69c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	b2db      	uxtb	r3, r3
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	b085      	sub	sp, #20
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
}  
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d702:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d708:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d70e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	4313      	orrs	r3, r2
 800d714:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d726:	2300      	movs	r3, #0

}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d742:	2310      	movs	r3, #16
 800d744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff ff74 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d760:	f241 3288 	movw	r2, #5000	; 0x1388
 800d764:	2110      	movs	r1, #16
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f9d6 	bl	800db18 <SDMMC_GetCmdResp1>
 800d76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d76e:	69fb      	ldr	r3, [r7, #28]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d786:	2311      	movs	r3, #17
 800d788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d78a:	2340      	movs	r3, #64	; 0x40
 800d78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d78e:	2300      	movs	r3, #0
 800d790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d798:	f107 0308 	add.w	r3, r7, #8
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7ff ff52 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a8:	2111      	movs	r1, #17
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f9b4 	bl	800db18 <SDMMC_GetCmdResp1>
 800d7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d7ca:	2312      	movs	r3, #18
 800d7cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7ce:	2340      	movs	r3, #64	; 0x40
 800d7d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7dc:	f107 0308 	add.w	r3, r7, #8
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff ff30 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ec:	2112      	movs	r1, #18
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f992 	bl	800db18 <SDMMC_GetCmdResp1>
 800d7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d80e:	2318      	movs	r3, #24
 800d810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d816:	2300      	movs	r3, #0
 800d818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d81e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d820:	f107 0308 	add.w	r3, r7, #8
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff ff0e 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d830:	2118      	movs	r1, #24
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f970 	bl	800db18 <SDMMC_GetCmdResp1>
 800d838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83a:	69fb      	ldr	r3, [r7, #28]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d852:	2319      	movs	r3, #25
 800d854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d856:	2340      	movs	r3, #64	; 0x40
 800d858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d862:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d864:	f107 0308 	add.w	r3, r7, #8
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff feec 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d870:	f241 3288 	movw	r2, #5000	; 0x1388
 800d874:	2119      	movs	r1, #25
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f94e 	bl	800db18 <SDMMC_GetCmdResp1>
 800d87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d87e:	69fb      	ldr	r3, [r7, #28]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3720      	adds	r7, #32
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d894:	230c      	movs	r3, #12
 800d896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8a6:	f107 0308 	add.w	r3, r7, #8
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff fecb 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d8b2:	4a05      	ldr	r2, [pc, #20]	; (800d8c8 <SDMMC_CmdStopTransfer+0x40>)
 800d8b4:	210c      	movs	r1, #12
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f92e 	bl	800db18 <SDMMC_GetCmdResp1>
 800d8bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8be:	69fb      	ldr	r3, [r7, #28]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	05f5e100 	.word	0x05f5e100

0800d8cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	; 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d8dc:	2307      	movs	r3, #7
 800d8de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8e0:	2340      	movs	r3, #64	; 0x40
 800d8e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8ee:	f107 0310 	add.w	r3, r7, #16
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7ff fea7 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d8fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8fe:	2107      	movs	r1, #7
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 f909 	bl	800db18 <SDMMC_GetCmdResp1>
 800d906:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3728      	adds	r7, #40	; 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b088      	sub	sp, #32
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d91e:	2300      	movs	r3, #0
 800d920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d922:	2300      	movs	r3, #0
 800d924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d926:	2300      	movs	r3, #0
 800d928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d930:	f107 0308 	add.w	r3, r7, #8
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff fe86 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fb23 	bl	800df88 <SDMMC_GetCmdError>
 800d942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d944:	69fb      	ldr	r3, [r7, #28]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3720      	adds	r7, #32
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b088      	sub	sp, #32
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d956:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d95c:	2308      	movs	r3, #8
 800d95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d960:	2340      	movs	r3, #64	; 0x40
 800d962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d964:	2300      	movs	r3, #0
 800d966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d96c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d96e:	f107 0308 	add.w	r3, r7, #8
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff fe67 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 fab6 	bl	800deec <SDMMC_GetCmdResp7>
 800d980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d982:	69fb      	ldr	r3, [r7, #28]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d99a:	2337      	movs	r3, #55	; 0x37
 800d99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d99e:	2340      	movs	r3, #64	; 0x40
 800d9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9ac:	f107 0308 	add.w	r3, r7, #8
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7ff fe48 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9bc:	2137      	movs	r1, #55	; 0x37
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f8aa 	bl	800db18 <SDMMC_GetCmdResp1>
 800d9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c6:	69fb      	ldr	r3, [r7, #28]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3720      	adds	r7, #32
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <SDMMC_CmdAppOperCommand+0x44>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d9e2:	2329      	movs	r3, #41	; 0x29
 800d9e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9e6:	2340      	movs	r3, #64	; 0x40
 800d9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9f4:	f107 0308 	add.w	r3, r7, #8
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff fe24 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f9bf 	bl	800dd84 <SDMMC_GetCmdResp3>
 800da06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da08:	69fb      	ldr	r3, [r7, #28]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3720      	adds	r7, #32
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	80100000 	.word	0x80100000

0800da18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800da20:	2300      	movs	r3, #0
 800da22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800da24:	2302      	movs	r3, #2
 800da26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800da28:	23c0      	movs	r3, #192	; 0xc0
 800da2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da2c:	2300      	movs	r3, #0
 800da2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da36:	f107 0308 	add.w	r3, r7, #8
 800da3a:	4619      	mov	r1, r3
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7ff fe03 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f956 	bl	800dcf4 <SDMMC_GetCmdResp2>
 800da48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da4a:	69fb      	ldr	r3, [r7, #28]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3720      	adds	r7, #32
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800da62:	2309      	movs	r3, #9
 800da64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800da66:	23c0      	movs	r3, #192	; 0xc0
 800da68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da6a:	2300      	movs	r3, #0
 800da6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da74:	f107 0308 	add.w	r3, r7, #8
 800da78:	4619      	mov	r1, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff fde4 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f937 	bl	800dcf4 <SDMMC_GetCmdResp2>
 800da86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da88:	69fb      	ldr	r3, [r7, #28]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3720      	adds	r7, #32
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b088      	sub	sp, #32
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
 800da9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800da9c:	2300      	movs	r3, #0
 800da9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800daa0:	2303      	movs	r3, #3
 800daa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daa4:	2340      	movs	r3, #64	; 0x40
 800daa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daa8:	2300      	movs	r3, #0
 800daaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dab2:	f107 0308 	add.w	r3, r7, #8
 800dab6:	4619      	mov	r1, r3
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7ff fdc5 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	2103      	movs	r1, #3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f99c 	bl	800de00 <SDMMC_GetCmdResp6>
 800dac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daca:	69fb      	ldr	r3, [r7, #28]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3720      	adds	r7, #32
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b088      	sub	sp, #32
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dae2:	230d      	movs	r3, #13
 800dae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dae6:	2340      	movs	r3, #64	; 0x40
 800dae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daea:	2300      	movs	r3, #0
 800daec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daf4:	f107 0308 	add.w	r3, r7, #8
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fda4 	bl	800d648 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800db00:	f241 3288 	movw	r2, #5000	; 0x1388
 800db04:	210d      	movs	r1, #13
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f806 	bl	800db18 <SDMMC_GetCmdResp1>
 800db0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db0e:	69fb      	ldr	r3, [r7, #28]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3720      	adds	r7, #32
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	460b      	mov	r3, r1
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db26:	4b70      	ldr	r3, [pc, #448]	; (800dce8 <SDMMC_GetCmdResp1+0x1d0>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a70      	ldr	r2, [pc, #448]	; (800dcec <SDMMC_GetCmdResp1+0x1d4>)
 800db2c:	fba2 2303 	umull	r2, r3, r2, r3
 800db30:	0a5a      	lsrs	r2, r3, #9
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	fb02 f303 	mul.w	r3, r2, r3
 800db38:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	1e5a      	subs	r2, r3, #1
 800db3e:	61fa      	str	r2, [r7, #28]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d102      	bne.n	800db4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db48:	e0c9      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0ef      	beq.n	800db3a <SDMMC_GetCmdResp1+0x22>
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1ea      	bne.n	800db3a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2204      	movs	r2, #4
 800db74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db76:	2304      	movs	r3, #4
 800db78:	e0b1      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7e:	f003 0301 	and.w	r3, r3, #1
 800db82:	2b00      	cmp	r3, #0
 800db84:	d004      	beq.n	800db90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2201      	movs	r2, #1
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e0a6      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	22c5      	movs	r2, #197	; 0xc5
 800db94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff fd80 	bl	800d69c <SDMMC_GetCommandResponse>
 800db9c:	4603      	mov	r3, r0
 800db9e:	461a      	mov	r2, r3
 800dba0:	7afb      	ldrb	r3, [r7, #11]
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d001      	beq.n	800dbaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e099      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dbaa:	2100      	movs	r1, #0
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f7ff fd82 	bl	800d6b6 <SDMMC_GetResponse>
 800dbb2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	4b4e      	ldr	r3, [pc, #312]	; (800dcf0 <SDMMC_GetCmdResp1+0x1d8>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e08d      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	da02      	bge.n	800dbce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dbc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbcc:	e087      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dbd8:	2340      	movs	r3, #64	; 0x40
 800dbda:	e080      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbe6:	2380      	movs	r3, #128	; 0x80
 800dbe8:	e079      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dbf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbf8:	e071      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc08:	e069      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc18:	e061      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc28:	e059      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc38:	e051      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc48:	e049      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc58:	e041      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dc64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc68:	e039      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dc78:	e031      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc88:	e029      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc98:	e021      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dca4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dca8:	e019      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dcb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dcb8:	e011      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dcc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dcc8:	e009      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dcd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dcd8:	e001      	b.n	800dcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20000004 	.word	0x20000004
 800dcec:	10624dd3 	.word	0x10624dd3
 800dcf0:	fdffe008 	.word	0xfdffe008

0800dcf4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcfc:	4b1f      	ldr	r3, [pc, #124]	; (800dd7c <SDMMC_GetCmdResp2+0x88>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a1f      	ldr	r2, [pc, #124]	; (800dd80 <SDMMC_GetCmdResp2+0x8c>)
 800dd02:	fba2 2303 	umull	r2, r3, r2, r3
 800dd06:	0a5b      	lsrs	r3, r3, #9
 800dd08:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd0c:	fb02 f303 	mul.w	r3, r2, r3
 800dd10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	1e5a      	subs	r2, r3, #1
 800dd16:	60fa      	str	r2, [r7, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d102      	bne.n	800dd22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd20:	e026      	b.n	800dd70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0ef      	beq.n	800dd12 <SDMMC_GetCmdResp2+0x1e>
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1ea      	bne.n	800dd12 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd40:	f003 0304 	and.w	r3, r3, #4
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2204      	movs	r2, #4
 800dd4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd4e:	2304      	movs	r3, #4
 800dd50:	e00e      	b.n	800dd70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e003      	b.n	800dd70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	22c5      	movs	r2, #197	; 0xc5
 800dd6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	20000004 	.word	0x20000004
 800dd80:	10624dd3 	.word	0x10624dd3

0800dd84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd8c:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <SDMMC_GetCmdResp3+0x74>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a1a      	ldr	r2, [pc, #104]	; (800ddfc <SDMMC_GetCmdResp3+0x78>)
 800dd92:	fba2 2303 	umull	r2, r3, r2, r3
 800dd96:	0a5b      	lsrs	r3, r3, #9
 800dd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd9c:	fb02 f303 	mul.w	r3, r2, r3
 800dda0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1e5a      	subs	r2, r3, #1
 800dda6:	60fa      	str	r2, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddb0:	e01b      	b.n	800ddea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d0ef      	beq.n	800dda2 <SDMMC_GetCmdResp3+0x1e>
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1ea      	bne.n	800dda2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd0:	f003 0304 	and.w	r3, r3, #4
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2204      	movs	r2, #4
 800dddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddde:	2304      	movs	r3, #4
 800dde0:	e003      	b.n	800ddea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	22c5      	movs	r2, #197	; 0xc5
 800dde6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20000004 	.word	0x20000004
 800ddfc:	10624dd3 	.word	0x10624dd3

0800de00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	460b      	mov	r3, r1
 800de0a:	607a      	str	r2, [r7, #4]
 800de0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de0e:	4b35      	ldr	r3, [pc, #212]	; (800dee4 <SDMMC_GetCmdResp6+0xe4>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a35      	ldr	r2, [pc, #212]	; (800dee8 <SDMMC_GetCmdResp6+0xe8>)
 800de14:	fba2 2303 	umull	r2, r3, r2, r3
 800de18:	0a5b      	lsrs	r3, r3, #9
 800de1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de1e:	fb02 f303 	mul.w	r3, r2, r3
 800de22:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	1e5a      	subs	r2, r3, #1
 800de28:	61fa      	str	r2, [r7, #28]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d102      	bne.n	800de34 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de32:	e052      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de38:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0ef      	beq.n	800de24 <SDMMC_GetCmdResp6+0x24>
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1ea      	bne.n	800de24 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de52:	f003 0304 	and.w	r3, r3, #4
 800de56:	2b00      	cmp	r3, #0
 800de58:	d004      	beq.n	800de64 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2204      	movs	r2, #4
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de60:	2304      	movs	r3, #4
 800de62:	e03a      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de68:	f003 0301 	and.w	r3, r3, #1
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2201      	movs	r2, #1
 800de74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de76:	2301      	movs	r3, #1
 800de78:	e02f      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7ff fc0e 	bl	800d69c <SDMMC_GetCommandResponse>
 800de80:	4603      	mov	r3, r0
 800de82:	461a      	mov	r2, r3
 800de84:	7afb      	ldrb	r3, [r7, #11]
 800de86:	4293      	cmp	r3, r2
 800de88:	d001      	beq.n	800de8e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e025      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	22c5      	movs	r2, #197	; 0xc5
 800de92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de94:	2100      	movs	r1, #0
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fc0d 	bl	800d6b6 <SDMMC_GetResponse>
 800de9c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d106      	bne.n	800deb6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	0c1b      	lsrs	r3, r3, #16
 800deac:	b29a      	uxth	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e011      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dec4:	e009      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800decc:	2b00      	cmp	r3, #0
 800dece:	d002      	beq.n	800ded6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ded0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ded4:	e001      	b.n	800deda <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ded6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3720      	adds	r7, #32
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20000004 	.word	0x20000004
 800dee8:	10624dd3 	.word	0x10624dd3

0800deec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800def4:	4b22      	ldr	r3, [pc, #136]	; (800df80 <SDMMC_GetCmdResp7+0x94>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a22      	ldr	r2, [pc, #136]	; (800df84 <SDMMC_GetCmdResp7+0x98>)
 800defa:	fba2 2303 	umull	r2, r3, r2, r3
 800defe:	0a5b      	lsrs	r3, r3, #9
 800df00:	f241 3288 	movw	r2, #5000	; 0x1388
 800df04:	fb02 f303 	mul.w	r3, r2, r3
 800df08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	1e5a      	subs	r2, r3, #1
 800df0e:	60fa      	str	r2, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d102      	bne.n	800df1a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df18:	e02c      	b.n	800df74 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0ef      	beq.n	800df0a <SDMMC_GetCmdResp7+0x1e>
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1ea      	bne.n	800df0a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df38:	f003 0304 	and.w	r3, r3, #4
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d004      	beq.n	800df4a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2204      	movs	r2, #4
 800df44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df46:	2304      	movs	r3, #4
 800df48:	e014      	b.n	800df74 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	d004      	beq.n	800df60 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e009      	b.n	800df74 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2240      	movs	r2, #64	; 0x40
 800df70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800df72:	2300      	movs	r3, #0
  
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	20000004 	.word	0x20000004
 800df84:	10624dd3 	.word	0x10624dd3

0800df88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df90:	4b11      	ldr	r3, [pc, #68]	; (800dfd8 <SDMMC_GetCmdError+0x50>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a11      	ldr	r2, [pc, #68]	; (800dfdc <SDMMC_GetCmdError+0x54>)
 800df96:	fba2 2303 	umull	r2, r3, r2, r3
 800df9a:	0a5b      	lsrs	r3, r3, #9
 800df9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfa0:	fb02 f303 	mul.w	r3, r2, r3
 800dfa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	1e5a      	subs	r2, r3, #1
 800dfaa:	60fa      	str	r2, [r7, #12]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfb4:	e009      	b.n	800dfca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0f1      	beq.n	800dfa6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	22c5      	movs	r2, #197	; 0xc5
 800dfc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	20000004 	.word	0x20000004
 800dfdc:	10624dd3 	.word	0x10624dd3

0800dfe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	f107 001c 	add.w	r0, r7, #28
 800dfee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d120      	bne.n	800e03a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	4b20      	ldr	r3, [pc, #128]	; (800e08c <USB_CoreInit+0xac>)
 800e00a:	4013      	ands	r3, r2
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d105      	bne.n	800e02e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f001 fc0e 	bl	800f850 <USB_CoreReset>
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	e010      	b.n	800e05c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f001 fc02 	bl	800f850 <USB_CoreReset>
 800e04c:	4603      	mov	r3, r0
 800e04e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d10b      	bne.n	800e07a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f043 0206 	orr.w	r2, r3, #6
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	f043 0220 	orr.w	r2, r3, #32
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e086:	b004      	add	sp, #16
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	ffbdffbf 	.word	0xffbdffbf

0800e090 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	4613      	mov	r3, r2
 800e09c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d165      	bne.n	800e170 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	4a41      	ldr	r2, [pc, #260]	; (800e1ac <USB_SetTurnaroundTime+0x11c>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d906      	bls.n	800e0ba <USB_SetTurnaroundTime+0x2a>
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	4a40      	ldr	r2, [pc, #256]	; (800e1b0 <USB_SetTurnaroundTime+0x120>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d202      	bcs.n	800e0ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e0b4:	230f      	movs	r3, #15
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e062      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	4a3c      	ldr	r2, [pc, #240]	; (800e1b0 <USB_SetTurnaroundTime+0x120>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d306      	bcc.n	800e0d0 <USB_SetTurnaroundTime+0x40>
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	4a3b      	ldr	r2, [pc, #236]	; (800e1b4 <USB_SetTurnaroundTime+0x124>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d202      	bcs.n	800e0d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e0ca:	230e      	movs	r3, #14
 800e0cc:	617b      	str	r3, [r7, #20]
 800e0ce:	e057      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	4a38      	ldr	r2, [pc, #224]	; (800e1b4 <USB_SetTurnaroundTime+0x124>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d306      	bcc.n	800e0e6 <USB_SetTurnaroundTime+0x56>
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4a37      	ldr	r2, [pc, #220]	; (800e1b8 <USB_SetTurnaroundTime+0x128>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d202      	bcs.n	800e0e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e0e0:	230d      	movs	r3, #13
 800e0e2:	617b      	str	r3, [r7, #20]
 800e0e4:	e04c      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	4a33      	ldr	r2, [pc, #204]	; (800e1b8 <USB_SetTurnaroundTime+0x128>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d306      	bcc.n	800e0fc <USB_SetTurnaroundTime+0x6c>
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	4a32      	ldr	r2, [pc, #200]	; (800e1bc <USB_SetTurnaroundTime+0x12c>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d802      	bhi.n	800e0fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	e041      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	4a2f      	ldr	r2, [pc, #188]	; (800e1bc <USB_SetTurnaroundTime+0x12c>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d906      	bls.n	800e112 <USB_SetTurnaroundTime+0x82>
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	4a2e      	ldr	r2, [pc, #184]	; (800e1c0 <USB_SetTurnaroundTime+0x130>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d802      	bhi.n	800e112 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e10c:	230b      	movs	r3, #11
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	e036      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	4a2a      	ldr	r2, [pc, #168]	; (800e1c0 <USB_SetTurnaroundTime+0x130>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d906      	bls.n	800e128 <USB_SetTurnaroundTime+0x98>
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	4a29      	ldr	r2, [pc, #164]	; (800e1c4 <USB_SetTurnaroundTime+0x134>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d802      	bhi.n	800e128 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e122:	230a      	movs	r3, #10
 800e124:	617b      	str	r3, [r7, #20]
 800e126:	e02b      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	4a26      	ldr	r2, [pc, #152]	; (800e1c4 <USB_SetTurnaroundTime+0x134>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d906      	bls.n	800e13e <USB_SetTurnaroundTime+0xae>
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	4a25      	ldr	r2, [pc, #148]	; (800e1c8 <USB_SetTurnaroundTime+0x138>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d202      	bcs.n	800e13e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e138:	2309      	movs	r3, #9
 800e13a:	617b      	str	r3, [r7, #20]
 800e13c:	e020      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	4a21      	ldr	r2, [pc, #132]	; (800e1c8 <USB_SetTurnaroundTime+0x138>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d306      	bcc.n	800e154 <USB_SetTurnaroundTime+0xc4>
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	4a20      	ldr	r2, [pc, #128]	; (800e1cc <USB_SetTurnaroundTime+0x13c>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d802      	bhi.n	800e154 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e14e:	2308      	movs	r3, #8
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	e015      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	4a1d      	ldr	r2, [pc, #116]	; (800e1cc <USB_SetTurnaroundTime+0x13c>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d906      	bls.n	800e16a <USB_SetTurnaroundTime+0xda>
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	4a1c      	ldr	r2, [pc, #112]	; (800e1d0 <USB_SetTurnaroundTime+0x140>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d202      	bcs.n	800e16a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e164:	2307      	movs	r3, #7
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e00a      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e16a:	2306      	movs	r3, #6
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	e007      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e170:	79fb      	ldrb	r3, [r7, #7]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d102      	bne.n	800e17c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e176:	2309      	movs	r3, #9
 800e178:	617b      	str	r3, [r7, #20]
 800e17a:	e001      	b.n	800e180 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e17c:	2309      	movs	r3, #9
 800e17e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	68da      	ldr	r2, [r3, #12]
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	029b      	lsls	r3, r3, #10
 800e194:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e198:	431a      	orrs	r2, r3
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	371c      	adds	r7, #28
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	00d8acbf 	.word	0x00d8acbf
 800e1b0:	00e4e1c0 	.word	0x00e4e1c0
 800e1b4:	00f42400 	.word	0x00f42400
 800e1b8:	01067380 	.word	0x01067380
 800e1bc:	011a499f 	.word	0x011a499f
 800e1c0:	01312cff 	.word	0x01312cff
 800e1c4:	014ca43f 	.word	0x014ca43f
 800e1c8:	016e3600 	.word	0x016e3600
 800e1cc:	01a6ab1f 	.word	0x01a6ab1f
 800e1d0:	01e84800 	.word	0x01e84800

0800e1d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	f043 0201 	orr.w	r2, r3, #1
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f023 0201 	bic.w	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	460b      	mov	r3, r1
 800e222:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e234:	78fb      	ldrb	r3, [r7, #3]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d115      	bne.n	800e266 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e246:	2001      	movs	r0, #1
 800e248:	f7f7 f9e0 	bl	800560c <HAL_Delay>
      ms++;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3301      	adds	r3, #1
 800e250:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f001 fa6c 	bl	800f730 <USB_GetMode>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d01e      	beq.n	800e29c <USB_SetCurrentMode+0x84>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b31      	cmp	r3, #49	; 0x31
 800e262:	d9f0      	bls.n	800e246 <USB_SetCurrentMode+0x2e>
 800e264:	e01a      	b.n	800e29c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e266:	78fb      	ldrb	r3, [r7, #3]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d115      	bne.n	800e298 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e278:	2001      	movs	r0, #1
 800e27a:	f7f7 f9c7 	bl	800560c <HAL_Delay>
      ms++;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3301      	adds	r3, #1
 800e282:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f001 fa53 	bl	800f730 <USB_GetMode>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d005      	beq.n	800e29c <USB_SetCurrentMode+0x84>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b31      	cmp	r3, #49	; 0x31
 800e294:	d9f0      	bls.n	800e278 <USB_SetCurrentMode+0x60>
 800e296:	e001      	b.n	800e29c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e005      	b.n	800e2a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b32      	cmp	r3, #50	; 0x32
 800e2a0:	d101      	bne.n	800e2a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e000      	b.n	800e2a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b086      	sub	sp, #24
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e2be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	613b      	str	r3, [r7, #16]
 800e2ce:	e009      	b.n	800e2e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	3340      	adds	r3, #64	; 0x40
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	2200      	movs	r2, #0
 800e2dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	613b      	str	r3, [r7, #16]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2b0e      	cmp	r3, #14
 800e2e8:	d9f2      	bls.n	800e2d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d11c      	bne.n	800e32a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2fe:	f043 0302 	orr.w	r3, r3, #2
 800e302:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e308:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	e005      	b.n	800e336 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e33c:	461a      	mov	r2, r3
 800e33e:	2300      	movs	r3, #0
 800e340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e348:	4619      	mov	r1, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e350:	461a      	mov	r2, r3
 800e352:	680b      	ldr	r3, [r1, #0]
 800e354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d10c      	bne.n	800e376 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d104      	bne.n	800e36c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e362:	2100      	movs	r1, #0
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 f965 	bl	800e634 <USB_SetDevSpeed>
 800e36a:	e008      	b.n	800e37e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e36c:	2101      	movs	r1, #1
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f960 	bl	800e634 <USB_SetDevSpeed>
 800e374:	e003      	b.n	800e37e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e376:	2103      	movs	r1, #3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f95b 	bl	800e634 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e37e:	2110      	movs	r1, #16
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f8f3 	bl	800e56c <USB_FlushTxFifo>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d001      	beq.n	800e390 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e38c:	2301      	movs	r3, #1
 800e38e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f91f 	bl	800e5d4 <USB_FlushRxFifo>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3be:	461a      	mov	r2, r3
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	613b      	str	r3, [r7, #16]
 800e3c8:	e043      	b.n	800e452 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	015a      	lsls	r2, r3, #5
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3e0:	d118      	bne.n	800e414 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10a      	bne.n	800e3fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	015a      	lsls	r2, r3, #5
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3fa:	6013      	str	r3, [r2, #0]
 800e3fc:	e013      	b.n	800e426 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4413      	add	r3, r2
 800e406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e40a:	461a      	mov	r2, r3
 800e40c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e410:	6013      	str	r3, [r2, #0]
 800e412:	e008      	b.n	800e426 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	015a      	lsls	r2, r3, #5
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4413      	add	r3, r2
 800e41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e420:	461a      	mov	r2, r3
 800e422:	2300      	movs	r3, #0
 800e424:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e432:	461a      	mov	r2, r3
 800e434:	2300      	movs	r3, #0
 800e436:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	015a      	lsls	r2, r3, #5
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	4413      	add	r3, r2
 800e440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e444:	461a      	mov	r2, r3
 800e446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e44a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	3301      	adds	r3, #1
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	429a      	cmp	r2, r3
 800e458:	d3b7      	bcc.n	800e3ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e45a:	2300      	movs	r3, #0
 800e45c:	613b      	str	r3, [r7, #16]
 800e45e:	e043      	b.n	800e4e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	015a      	lsls	r2, r3, #5
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	4413      	add	r3, r2
 800e468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e476:	d118      	bne.n	800e4aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10a      	bne.n	800e494 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48a:	461a      	mov	r2, r3
 800e48c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	e013      	b.n	800e4bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	015a      	lsls	r2, r3, #5
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	4413      	add	r3, r2
 800e49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	e008      	b.n	800e4bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	015a      	lsls	r2, r3, #5
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	015a      	lsls	r2, r3, #5
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4da:	461a      	mov	r2, r3
 800e4dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e4e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	613b      	str	r3, [r7, #16]
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d3b7      	bcc.n	800e460 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e502:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e510:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	2b00      	cmp	r3, #0
 800e516:	d105      	bne.n	800e524 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	699b      	ldr	r3, [r3, #24]
 800e51c:	f043 0210 	orr.w	r2, r3, #16
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	699a      	ldr	r2, [r3, #24]
 800e528:	4b0e      	ldr	r3, [pc, #56]	; (800e564 <USB_DevInit+0x2b4>)
 800e52a:	4313      	orrs	r3, r2
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d005      	beq.n	800e542 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	f043 0208 	orr.w	r2, r3, #8
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e544:	2b01      	cmp	r3, #1
 800e546:	d105      	bne.n	800e554 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	699a      	ldr	r2, [r3, #24]
 800e54c:	4b06      	ldr	r3, [pc, #24]	; (800e568 <USB_DevInit+0x2b8>)
 800e54e:	4313      	orrs	r3, r2
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e554:	7dfb      	ldrb	r3, [r7, #23]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3718      	adds	r7, #24
 800e55a:	46bd      	mov	sp, r7
 800e55c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e560:	b004      	add	sp, #16
 800e562:	4770      	bx	lr
 800e564:	803c3800 	.word	0x803c3800
 800e568:	40000004 	.word	0x40000004

0800e56c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e576:	2300      	movs	r3, #0
 800e578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	4a13      	ldr	r2, [pc, #76]	; (800e5d0 <USB_FlushTxFifo+0x64>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d901      	bls.n	800e58c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e588:	2303      	movs	r3, #3
 800e58a:	e01b      	b.n	800e5c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	691b      	ldr	r3, [r3, #16]
 800e590:	2b00      	cmp	r3, #0
 800e592:	daf2      	bge.n	800e57a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e594:	2300      	movs	r3, #0
 800e596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	019b      	lsls	r3, r3, #6
 800e59c:	f043 0220 	orr.w	r2, r3, #32
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	4a08      	ldr	r2, [pc, #32]	; (800e5d0 <USB_FlushTxFifo+0x64>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d901      	bls.n	800e5b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	e006      	b.n	800e5c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	f003 0320 	and.w	r3, r3, #32
 800e5be:	2b20      	cmp	r3, #32
 800e5c0:	d0f0      	beq.n	800e5a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3714      	adds	r7, #20
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	00030d40 	.word	0x00030d40

0800e5d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	4a11      	ldr	r2, [pc, #68]	; (800e630 <USB_FlushRxFifo+0x5c>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d901      	bls.n	800e5f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	e018      	b.n	800e624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	daf2      	bge.n	800e5e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2210      	movs	r2, #16
 800e602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3301      	adds	r3, #1
 800e608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	4a08      	ldr	r2, [pc, #32]	; (800e630 <USB_FlushRxFifo+0x5c>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d901      	bls.n	800e616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e612:	2303      	movs	r3, #3
 800e614:	e006      	b.n	800e624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	f003 0310 	and.w	r3, r3, #16
 800e61e:	2b10      	cmp	r3, #16
 800e620:	d0f0      	beq.n	800e604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	00030d40 	.word	0x00030d40

0800e634 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	78fb      	ldrb	r3, [r7, #3]
 800e64e:	68f9      	ldr	r1, [r7, #12]
 800e650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e654:	4313      	orrs	r3, r2
 800e656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3714      	adds	r7, #20
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e666:	b480      	push	{r7}
 800e668:	b087      	sub	sp, #28
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	f003 0306 	and.w	r3, r3, #6
 800e67e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e686:	2300      	movs	r3, #0
 800e688:	75fb      	strb	r3, [r7, #23]
 800e68a:	e00a      	b.n	800e6a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d002      	beq.n	800e698 <USB_GetDevSpeed+0x32>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b06      	cmp	r3, #6
 800e696:	d102      	bne.n	800e69e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e698:	2302      	movs	r3, #2
 800e69a:	75fb      	strb	r3, [r7, #23]
 800e69c:	e001      	b.n	800e6a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e69e:	230f      	movs	r3, #15
 800e6a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	371c      	adds	r7, #28
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	785b      	ldrb	r3, [r3, #1]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d139      	bne.n	800e740 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d2:	69da      	ldr	r2, [r3, #28]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	2101      	movs	r1, #1
 800e6de:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	68f9      	ldr	r1, [r7, #12]
 800e6e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	015a      	lsls	r2, r3, #5
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d153      	bne.n	800e7ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	791b      	ldrb	r3, [r3, #4]
 800e71e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e720:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	059b      	lsls	r3, r3, #22
 800e726:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e728:	431a      	orrs	r2, r3
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	0159      	lsls	r1, r3, #5
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	440b      	add	r3, r1
 800e732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e736:	4619      	mov	r1, r3
 800e738:	4b20      	ldr	r3, [pc, #128]	; (800e7bc <USB_ActivateEndpoint+0x10c>)
 800e73a:	4313      	orrs	r3, r2
 800e73c:	600b      	str	r3, [r1, #0]
 800e73e:	e035      	b.n	800e7ac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	f003 030f 	and.w	r3, r3, #15
 800e750:	2101      	movs	r1, #1
 800e752:	fa01 f303 	lsl.w	r3, r1, r3
 800e756:	041b      	lsls	r3, r3, #16
 800e758:	68f9      	ldr	r1, [r7, #12]
 800e75a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e75e:	4313      	orrs	r3, r2
 800e760:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	015a      	lsls	r2, r3, #5
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4413      	add	r3, r2
 800e76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d119      	bne.n	800e7ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	015a      	lsls	r2, r3, #5
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	4413      	add	r3, r2
 800e780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	791b      	ldrb	r3, [r3, #4]
 800e792:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e794:	430b      	orrs	r3, r1
 800e796:	431a      	orrs	r2, r3
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	0159      	lsls	r1, r3, #5
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	440b      	add	r3, r1
 800e7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <USB_ActivateEndpoint+0x10c>)
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	10008000 	.word	0x10008000

0800e7c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d161      	bne.n	800e8a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	015a      	lsls	r2, r3, #5
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7f2:	d11f      	bne.n	800e834 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	015a      	lsls	r2, r3, #5
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	0151      	lsls	r1, r2, #5
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	440a      	add	r2, r1
 800e80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e80e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e812:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	015a      	lsls	r2, r3, #5
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	4413      	add	r3, r2
 800e81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	0151      	lsls	r1, r2, #5
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	440a      	add	r2, r1
 800e82a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e82e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e832:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e83a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f003 030f 	and.w	r3, r3, #15
 800e844:	2101      	movs	r1, #1
 800e846:	fa01 f303 	lsl.w	r3, r1, r3
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	43db      	mvns	r3, r3
 800e84e:	68f9      	ldr	r1, [r7, #12]
 800e850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e854:	4013      	ands	r3, r2
 800e856:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e85e:	69da      	ldr	r2, [r3, #28]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	2101      	movs	r1, #1
 800e86a:	fa01 f303 	lsl.w	r3, r1, r3
 800e86e:	b29b      	uxth	r3, r3
 800e870:	43db      	mvns	r3, r3
 800e872:	68f9      	ldr	r1, [r7, #12]
 800e874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e878:	4013      	ands	r3, r2
 800e87a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	0159      	lsls	r1, r3, #5
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	440b      	add	r3, r1
 800e892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e896:	4619      	mov	r1, r3
 800e898:	4b35      	ldr	r3, [pc, #212]	; (800e970 <USB_DeactivateEndpoint+0x1b0>)
 800e89a:	4013      	ands	r3, r2
 800e89c:	600b      	str	r3, [r1, #0]
 800e89e:	e060      	b.n	800e962 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8b6:	d11f      	bne.n	800e8f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	015a      	lsls	r2, r3, #5
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	4413      	add	r3, r2
 800e8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	0151      	lsls	r1, r2, #5
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	440a      	add	r2, r1
 800e8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e8d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	0151      	lsls	r1, r2, #5
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	440a      	add	r2, r1
 800e8ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e8f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	f003 030f 	and.w	r3, r3, #15
 800e908:	2101      	movs	r1, #1
 800e90a:	fa01 f303 	lsl.w	r3, r1, r3
 800e90e:	041b      	lsls	r3, r3, #16
 800e910:	43db      	mvns	r3, r3
 800e912:	68f9      	ldr	r1, [r7, #12]
 800e914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e918:	4013      	ands	r3, r2
 800e91a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e922:	69da      	ldr	r2, [r3, #28]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	f003 030f 	and.w	r3, r3, #15
 800e92c:	2101      	movs	r1, #1
 800e92e:	fa01 f303 	lsl.w	r3, r1, r3
 800e932:	041b      	lsls	r3, r3, #16
 800e934:	43db      	mvns	r3, r3
 800e936:	68f9      	ldr	r1, [r7, #12]
 800e938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e93c:	4013      	ands	r3, r2
 800e93e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	0159      	lsls	r1, r3, #5
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	440b      	add	r3, r1
 800e956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e95a:	4619      	mov	r1, r3
 800e95c:	4b05      	ldr	r3, [pc, #20]	; (800e974 <USB_DeactivateEndpoint+0x1b4>)
 800e95e:	4013      	ands	r3, r2
 800e960:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	ec337800 	.word	0xec337800
 800e974:	eff37800 	.word	0xeff37800

0800e978 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	4613      	mov	r3, r2
 800e984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	785b      	ldrb	r3, [r3, #1]
 800e994:	2b01      	cmp	r3, #1
 800e996:	f040 8163 	bne.w	800ec60 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d132      	bne.n	800ea08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	015a      	lsls	r2, r3, #5
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ae:	691a      	ldr	r2, [r3, #16]
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	0159      	lsls	r1, r3, #5
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	440b      	add	r3, r1
 800e9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4ba5      	ldr	r3, [pc, #660]	; (800ec54 <USB_EPStartXfer+0x2dc>)
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	0151      	lsls	r1, r2, #5
 800e9d6:	69fa      	ldr	r2, [r7, #28]
 800e9d8:	440a      	add	r2, r1
 800e9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	015a      	lsls	r2, r3, #5
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f0:	691a      	ldr	r2, [r3, #16]
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	0159      	lsls	r1, r3, #5
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	440b      	add	r3, r1
 800e9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4b95      	ldr	r3, [pc, #596]	; (800ec58 <USB_EPStartXfer+0x2e0>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	610b      	str	r3, [r1, #16]
 800ea06:	e074      	b.n	800eaf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	015a      	lsls	r2, r3, #5
 800ea0c:	69fb      	ldr	r3, [r7, #28]
 800ea0e:	4413      	add	r3, r2
 800ea10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea14:	691a      	ldr	r2, [r3, #16]
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	0159      	lsls	r1, r3, #5
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	440b      	add	r3, r1
 800ea1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea22:	4619      	mov	r1, r3
 800ea24:	4b8c      	ldr	r3, [pc, #560]	; (800ec58 <USB_EPStartXfer+0x2e0>)
 800ea26:	4013      	ands	r3, r2
 800ea28:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	015a      	lsls	r2, r3, #5
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	4413      	add	r3, r2
 800ea32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea36:	691a      	ldr	r2, [r3, #16]
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	0159      	lsls	r1, r3, #5
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	440b      	add	r3, r1
 800ea40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea44:	4619      	mov	r1, r3
 800ea46:	4b83      	ldr	r3, [pc, #524]	; (800ec54 <USB_EPStartXfer+0x2dc>)
 800ea48:	4013      	ands	r3, r2
 800ea4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	015a      	lsls	r2, r3, #5
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	4413      	add	r3, r2
 800ea54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	6999      	ldr	r1, [r3, #24]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	440b      	add	r3, r1
 800ea64:	1e59      	subs	r1, r3, #1
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ea70:	4b7a      	ldr	r3, [pc, #488]	; (800ec5c <USB_EPStartXfer+0x2e4>)
 800ea72:	400b      	ands	r3, r1
 800ea74:	69b9      	ldr	r1, [r7, #24]
 800ea76:	0148      	lsls	r0, r1, #5
 800ea78:	69f9      	ldr	r1, [r7, #28]
 800ea7a:	4401      	add	r1, r0
 800ea7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea80:	4313      	orrs	r3, r2
 800ea82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	699b      	ldr	r3, [r3, #24]
 800ea96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea9a:	69b9      	ldr	r1, [r7, #24]
 800ea9c:	0148      	lsls	r0, r1, #5
 800ea9e:	69f9      	ldr	r1, [r7, #28]
 800eaa0:	4401      	add	r1, r0
 800eaa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	791b      	ldrb	r3, [r3, #4]
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d11f      	bne.n	800eaf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	015a      	lsls	r2, r3, #5
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	4413      	add	r3, r2
 800eaba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	69ba      	ldr	r2, [r7, #24]
 800eac2:	0151      	lsls	r1, r2, #5
 800eac4:	69fa      	ldr	r2, [r7, #28]
 800eac6:	440a      	add	r2, r1
 800eac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eacc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ead0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	015a      	lsls	r2, r3, #5
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	4413      	add	r3, r2
 800eada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	69ba      	ldr	r2, [r7, #24]
 800eae2:	0151      	lsls	r1, r2, #5
 800eae4:	69fa      	ldr	r2, [r7, #28]
 800eae6:	440a      	add	r2, r1
 800eae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eaf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eaf2:	79fb      	ldrb	r3, [r7, #7]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d14b      	bne.n	800eb90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d009      	beq.n	800eb14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	695b      	ldr	r3, [r3, #20]
 800eb12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	791b      	ldrb	r3, [r3, #4]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d128      	bne.n	800eb6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d110      	bne.n	800eb4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	015a      	lsls	r2, r3, #5
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	4413      	add	r3, r2
 800eb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	69ba      	ldr	r2, [r7, #24]
 800eb3c:	0151      	lsls	r1, r2, #5
 800eb3e:	69fa      	ldr	r2, [r7, #28]
 800eb40:	440a      	add	r2, r1
 800eb42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb4a:	6013      	str	r3, [r2, #0]
 800eb4c:	e00f      	b.n	800eb6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	015a      	lsls	r2, r3, #5
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	4413      	add	r3, r2
 800eb56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	0151      	lsls	r1, r2, #5
 800eb60:	69fa      	ldr	r2, [r7, #28]
 800eb62:	440a      	add	r2, r1
 800eb64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	015a      	lsls	r2, r3, #5
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	4413      	add	r3, r2
 800eb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	0151      	lsls	r1, r2, #5
 800eb80:	69fa      	ldr	r2, [r7, #28]
 800eb82:	440a      	add	r2, r1
 800eb84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb8c:	6013      	str	r3, [r2, #0]
 800eb8e:	e137      	b.n	800ee00 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	015a      	lsls	r2, r3, #5
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	4413      	add	r3, r2
 800eb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	69ba      	ldr	r2, [r7, #24]
 800eba0:	0151      	lsls	r1, r2, #5
 800eba2:	69fa      	ldr	r2, [r7, #28]
 800eba4:	440a      	add	r2, r1
 800eba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ebae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	791b      	ldrb	r3, [r3, #4]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d015      	beq.n	800ebe4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 811f 	beq.w	800ee00 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	f003 030f 	and.w	r3, r3, #15
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	fa01 f303 	lsl.w	r3, r1, r3
 800ebd8:	69f9      	ldr	r1, [r7, #28]
 800ebda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	634b      	str	r3, [r1, #52]	; 0x34
 800ebe2:	e10d      	b.n	800ee00 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d110      	bne.n	800ec16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69ba      	ldr	r2, [r7, #24]
 800ec04:	0151      	lsls	r1, r2, #5
 800ec06:	69fa      	ldr	r2, [r7, #28]
 800ec08:	440a      	add	r2, r1
 800ec0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	e00f      	b.n	800ec36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	69ba      	ldr	r2, [r7, #24]
 800ec26:	0151      	lsls	r1, r2, #5
 800ec28:	69fa      	ldr	r2, [r7, #28]
 800ec2a:	440a      	add	r2, r1
 800ec2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	6919      	ldr	r1, [r3, #16]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	781a      	ldrb	r2, [r3, #0]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	b298      	uxth	r0, r3
 800ec44:	79fb      	ldrb	r3, [r7, #7]
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	4603      	mov	r3, r0
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 faea 	bl	800f224 <USB_WritePacket>
 800ec50:	e0d6      	b.n	800ee00 <USB_EPStartXfer+0x488>
 800ec52:	bf00      	nop
 800ec54:	e007ffff 	.word	0xe007ffff
 800ec58:	fff80000 	.word	0xfff80000
 800ec5c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec6c:	691a      	ldr	r2, [r3, #16]
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	0159      	lsls	r1, r3, #5
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	440b      	add	r3, r1
 800ec76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4b63      	ldr	r3, [pc, #396]	; (800ee0c <USB_EPStartXfer+0x494>)
 800ec7e:	4013      	ands	r3, r2
 800ec80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec8e:	691a      	ldr	r2, [r3, #16]
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	0159      	lsls	r1, r3, #5
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	440b      	add	r3, r1
 800ec98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	4b5c      	ldr	r3, [pc, #368]	; (800ee10 <USB_EPStartXfer+0x498>)
 800eca0:	4013      	ands	r3, r2
 800eca2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d123      	bne.n	800ecf4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb8:	691a      	ldr	r2, [r3, #16]
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecc2:	69b9      	ldr	r1, [r7, #24]
 800ecc4:	0148      	lsls	r0, r1, #5
 800ecc6:	69f9      	ldr	r1, [r7, #28]
 800ecc8:	4401      	add	r1, r0
 800ecca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	69ba      	ldr	r2, [r7, #24]
 800ece2:	0151      	lsls	r1, r2, #5
 800ece4:	69fa      	ldr	r2, [r7, #28]
 800ece6:	440a      	add	r2, r1
 800ece8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecf0:	6113      	str	r3, [r2, #16]
 800ecf2:	e037      	b.n	800ed64 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	699a      	ldr	r2, [r3, #24]
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	1e5a      	subs	r2, r3, #1
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	8afa      	ldrh	r2, [r7, #22]
 800ed10:	fb03 f202 	mul.w	r2, r3, r2
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed24:	691a      	ldr	r2, [r3, #16]
 800ed26:	8afb      	ldrh	r3, [r7, #22]
 800ed28:	04d9      	lsls	r1, r3, #19
 800ed2a:	4b3a      	ldr	r3, [pc, #232]	; (800ee14 <USB_EPStartXfer+0x49c>)
 800ed2c:	400b      	ands	r3, r1
 800ed2e:	69b9      	ldr	r1, [r7, #24]
 800ed30:	0148      	lsls	r0, r1, #5
 800ed32:	69f9      	ldr	r1, [r7, #28]
 800ed34:	4401      	add	r1, r0
 800ed36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	015a      	lsls	r2, r3, #5
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	4413      	add	r3, r2
 800ed46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed4a:	691a      	ldr	r2, [r3, #16]
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	69db      	ldr	r3, [r3, #28]
 800ed50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed54:	69b9      	ldr	r1, [r7, #24]
 800ed56:	0148      	lsls	r0, r1, #5
 800ed58:	69f9      	ldr	r1, [r7, #28]
 800ed5a:	4401      	add	r1, r0
 800ed5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed60:	4313      	orrs	r3, r2
 800ed62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ed64:	79fb      	ldrb	r3, [r7, #7]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d10d      	bne.n	800ed86 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d009      	beq.n	800ed86 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	6919      	ldr	r1, [r3, #16]
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	015a      	lsls	r2, r3, #5
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed82:	460a      	mov	r2, r1
 800ed84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	791b      	ldrb	r3, [r3, #4]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d128      	bne.n	800ede0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d110      	bne.n	800edc0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	015a      	lsls	r2, r3, #5
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	4413      	add	r3, r2
 800eda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	69ba      	ldr	r2, [r7, #24]
 800edae:	0151      	lsls	r1, r2, #5
 800edb0:	69fa      	ldr	r2, [r7, #28]
 800edb2:	440a      	add	r2, r1
 800edb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	e00f      	b.n	800ede0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	015a      	lsls	r2, r3, #5
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	4413      	add	r3, r2
 800ede8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	69ba      	ldr	r2, [r7, #24]
 800edf0:	0151      	lsls	r1, r2, #5
 800edf2:	69fa      	ldr	r2, [r7, #28]
 800edf4:	440a      	add	r2, r1
 800edf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800edfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3720      	adds	r7, #32
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	fff80000 	.word	0xfff80000
 800ee10:	e007ffff 	.word	0xe007ffff
 800ee14:	1ff80000 	.word	0x1ff80000

0800ee18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b087      	sub	sp, #28
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	4613      	mov	r3, r2
 800ee24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	785b      	ldrb	r3, [r3, #1]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	f040 80ce 	bne.w	800efd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d132      	bne.n	800eea8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	015a      	lsls	r2, r3, #5
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	4413      	add	r3, r2
 800ee4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee4e:	691a      	ldr	r2, [r3, #16]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	0159      	lsls	r1, r3, #5
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	440b      	add	r3, r1
 800ee58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	4b9a      	ldr	r3, [pc, #616]	; (800f0c8 <USB_EP0StartXfer+0x2b0>)
 800ee60:	4013      	ands	r3, r2
 800ee62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee70:	691b      	ldr	r3, [r3, #16]
 800ee72:	693a      	ldr	r2, [r7, #16]
 800ee74:	0151      	lsls	r1, r2, #5
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	440a      	add	r2, r1
 800ee7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee90:	691a      	ldr	r2, [r3, #16]
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	0159      	lsls	r1, r3, #5
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	440b      	add	r3, r1
 800ee9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee9e:	4619      	mov	r1, r3
 800eea0:	4b8a      	ldr	r3, [pc, #552]	; (800f0cc <USB_EP0StartXfer+0x2b4>)
 800eea2:	4013      	ands	r3, r2
 800eea4:	610b      	str	r3, [r1, #16]
 800eea6:	e04e      	b.n	800ef46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb4:	691a      	ldr	r2, [r3, #16]
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	0159      	lsls	r1, r3, #5
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	440b      	add	r3, r1
 800eebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec2:	4619      	mov	r1, r3
 800eec4:	4b81      	ldr	r3, [pc, #516]	; (800f0cc <USB_EP0StartXfer+0x2b4>)
 800eec6:	4013      	ands	r3, r2
 800eec8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	015a      	lsls	r2, r3, #5
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	4413      	add	r3, r2
 800eed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed6:	691a      	ldr	r2, [r3, #16]
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	0159      	lsls	r1, r3, #5
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	440b      	add	r3, r1
 800eee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee4:	4619      	mov	r1, r3
 800eee6:	4b78      	ldr	r3, [pc, #480]	; (800f0c8 <USB_EP0StartXfer+0x2b0>)
 800eee8:	4013      	ands	r3, r2
 800eeea:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	699a      	ldr	r2, [r3, #24]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d903      	bls.n	800ef00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	68da      	ldr	r2, [r3, #12]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	015a      	lsls	r2, r3, #5
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	4413      	add	r3, r2
 800ef08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	0151      	lsls	r1, r2, #5
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	440a      	add	r2, r1
 800ef16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2c:	691a      	ldr	r2, [r3, #16]
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef36:	6939      	ldr	r1, [r7, #16]
 800ef38:	0148      	lsls	r0, r1, #5
 800ef3a:	6979      	ldr	r1, [r7, #20]
 800ef3c:	4401      	add	r1, r0
 800ef3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef42:	4313      	orrs	r3, r2
 800ef44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d11e      	bne.n	800ef8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d009      	beq.n	800ef68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef60:	461a      	mov	r2, r3
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	693a      	ldr	r2, [r7, #16]
 800ef78:	0151      	lsls	r1, r2, #5
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	440a      	add	r2, r1
 800ef7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	e097      	b.n	800f0ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	015a      	lsls	r2, r3, #5
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	4413      	add	r3, r2
 800ef92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	693a      	ldr	r2, [r7, #16]
 800ef9a:	0151      	lsls	r1, r2, #5
 800ef9c:	697a      	ldr	r2, [r7, #20]
 800ef9e:	440a      	add	r2, r1
 800efa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efa8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	699b      	ldr	r3, [r3, #24]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 8083 	beq.w	800f0ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	f003 030f 	and.w	r3, r3, #15
 800efc4:	2101      	movs	r1, #1
 800efc6:	fa01 f303 	lsl.w	r3, r1, r3
 800efca:	6979      	ldr	r1, [r7, #20]
 800efcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efd0:	4313      	orrs	r3, r2
 800efd2:	634b      	str	r3, [r1, #52]	; 0x34
 800efd4:	e071      	b.n	800f0ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	0159      	lsls	r1, r3, #5
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	440b      	add	r3, r1
 800efec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff0:	4619      	mov	r1, r3
 800eff2:	4b36      	ldr	r3, [pc, #216]	; (800f0cc <USB_EP0StartXfer+0x2b4>)
 800eff4:	4013      	ands	r3, r2
 800eff6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	4413      	add	r3, r2
 800f000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f004:	691a      	ldr	r2, [r3, #16]
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	0159      	lsls	r1, r3, #5
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	440b      	add	r3, r1
 800f00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f012:	4619      	mov	r1, r3
 800f014:	4b2c      	ldr	r3, [pc, #176]	; (800f0c8 <USB_EP0StartXfer+0x2b0>)
 800f016:	4013      	ands	r3, r2
 800f018:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	68da      	ldr	r2, [r3, #12]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	015a      	lsls	r2, r3, #5
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	4413      	add	r3, r2
 800f03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	0151      	lsls	r1, r2, #5
 800f044:	697a      	ldr	r2, [r7, #20]
 800f046:	440a      	add	r2, r1
 800f048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f04c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	69db      	ldr	r3, [r3, #28]
 800f064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f068:	6939      	ldr	r1, [r7, #16]
 800f06a:	0148      	lsls	r0, r1, #5
 800f06c:	6979      	ldr	r1, [r7, #20]
 800f06e:	4401      	add	r1, r0
 800f070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f074:	4313      	orrs	r3, r2
 800f076:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d10d      	bne.n	800f09a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	691b      	ldr	r3, [r3, #16]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d009      	beq.n	800f09a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	6919      	ldr	r1, [r3, #16]
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	015a      	lsls	r2, r3, #5
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	4413      	add	r3, r2
 800f092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f096:	460a      	mov	r2, r1
 800f098:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	0151      	lsls	r1, r2, #5
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	440a      	add	r2, r1
 800f0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	371c      	adds	r7, #28
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr
 800f0c8:	e007ffff 	.word	0xe007ffff
 800f0cc:	fff80000 	.word	0xfff80000

0800f0d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b087      	sub	sp, #28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	785b      	ldrb	r3, [r3, #1]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d14a      	bne.n	800f184 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f106:	f040 8086 	bne.w	800f216 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	015a      	lsls	r2, r3, #5
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	4413      	add	r3, r2
 800f114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	7812      	ldrb	r2, [r2, #0]
 800f11e:	0151      	lsls	r1, r2, #5
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	440a      	add	r2, r1
 800f124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f12c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	7812      	ldrb	r2, [r2, #0]
 800f142:	0151      	lsls	r1, r2, #5
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	440a      	add	r2, r1
 800f148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f14c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3301      	adds	r3, #1
 800f156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f242 7210 	movw	r2, #10000	; 0x2710
 800f15e:	4293      	cmp	r3, r2
 800f160:	d902      	bls.n	800f168 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	75fb      	strb	r3, [r7, #23]
          break;
 800f166:	e056      	b.n	800f216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	015a      	lsls	r2, r3, #5
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	4413      	add	r3, r2
 800f172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f17c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f180:	d0e7      	beq.n	800f152 <USB_EPStopXfer+0x82>
 800f182:	e048      	b.n	800f216 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f19c:	d13b      	bne.n	800f216 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	015a      	lsls	r2, r3, #5
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	7812      	ldrb	r2, [r2, #0]
 800f1b2:	0151      	lsls	r1, r2, #5
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	440a      	add	r2, r1
 800f1b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f1c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	015a      	lsls	r2, r3, #5
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	7812      	ldrb	r2, [r2, #0]
 800f1d6:	0151      	lsls	r1, r2, #5
 800f1d8:	693a      	ldr	r2, [r7, #16]
 800f1da:	440a      	add	r2, r1
 800f1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d902      	bls.n	800f1fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800f1fa:	e00c      	b.n	800f216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	015a      	lsls	r2, r3, #5
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	4413      	add	r3, r2
 800f206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f214:	d0e7      	beq.n	800f1e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f216:	7dfb      	ldrb	r3, [r7, #23]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	371c      	adds	r7, #28
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f224:	b480      	push	{r7}
 800f226:	b089      	sub	sp, #36	; 0x24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	4611      	mov	r1, r2
 800f230:	461a      	mov	r2, r3
 800f232:	460b      	mov	r3, r1
 800f234:	71fb      	strb	r3, [r7, #7]
 800f236:	4613      	mov	r3, r2
 800f238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f242:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f246:	2b00      	cmp	r3, #0
 800f248:	d123      	bne.n	800f292 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f24a:	88bb      	ldrh	r3, [r7, #4]
 800f24c:	3303      	adds	r3, #3
 800f24e:	089b      	lsrs	r3, r3, #2
 800f250:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f252:	2300      	movs	r3, #0
 800f254:	61bb      	str	r3, [r7, #24]
 800f256:	e018      	b.n	800f28a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f258:	79fb      	ldrb	r3, [r7, #7]
 800f25a:	031a      	lsls	r2, r3, #12
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	4413      	add	r3, r2
 800f260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f264:	461a      	mov	r2, r3
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	3301      	adds	r3, #1
 800f270:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	3301      	adds	r3, #1
 800f276:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	3301      	adds	r3, #1
 800f27c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	3301      	adds	r3, #1
 800f282:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	3301      	adds	r3, #1
 800f288:	61bb      	str	r3, [r7, #24]
 800f28a:	69ba      	ldr	r2, [r7, #24]
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d3e2      	bcc.n	800f258 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f292:	2300      	movs	r3, #0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3724      	adds	r7, #36	; 0x24
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b08b      	sub	sp, #44	; 0x2c
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f2b6:	88fb      	ldrh	r3, [r7, #6]
 800f2b8:	089b      	lsrs	r3, r3, #2
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f2be:	88fb      	ldrh	r3, [r7, #6]
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	623b      	str	r3, [r7, #32]
 800f2ca:	e014      	b.n	800f2f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	3301      	adds	r3, #1
 800f2dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	623b      	str	r3, [r7, #32]
 800f2f6:	6a3a      	ldr	r2, [r7, #32]
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d3e6      	bcc.n	800f2cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f2fe:	8bfb      	ldrh	r3, [r7, #30]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d01e      	beq.n	800f342 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f304:	2300      	movs	r3, #0
 800f306:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f30e:	461a      	mov	r2, r3
 800f310:	f107 0310 	add.w	r3, r7, #16
 800f314:	6812      	ldr	r2, [r2, #0]
 800f316:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	fa22 f303 	lsr.w	r3, r2, r3
 800f324:	b2da      	uxtb	r2, r3
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	701a      	strb	r2, [r3, #0]
      i++;
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	3301      	adds	r3, #1
 800f32e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f332:	3301      	adds	r3, #1
 800f334:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f336:	8bfb      	ldrh	r3, [r7, #30]
 800f338:	3b01      	subs	r3, #1
 800f33a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f33c:	8bfb      	ldrh	r3, [r7, #30]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1ea      	bne.n	800f318 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f344:	4618      	mov	r0, r3
 800f346:	372c      	adds	r7, #44	; 0x2c
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	785b      	ldrb	r3, [r3, #1]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d12c      	bne.n	800f3c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	db12      	blt.n	800f3a4 <USB_EPSetStall+0x54>
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00f      	beq.n	800f3a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	015a      	lsls	r2, r3, #5
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4413      	add	r3, r2
 800f38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68ba      	ldr	r2, [r7, #8]
 800f394:	0151      	lsls	r1, r2, #5
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	440a      	add	r2, r1
 800f39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f39e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f3a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	015a      	lsls	r2, r3, #5
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	0151      	lsls	r1, r2, #5
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	440a      	add	r2, r1
 800f3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3c2:	6013      	str	r3, [r2, #0]
 800f3c4:	e02b      	b.n	800f41e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	015a      	lsls	r2, r3, #5
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	db12      	blt.n	800f3fe <USB_EPSetStall+0xae>
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00f      	beq.n	800f3fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	015a      	lsls	r2, r3, #5
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	0151      	lsls	r1, r2, #5
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	440a      	add	r2, r1
 800f3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f3fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	015a      	lsls	r2, r3, #5
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	4413      	add	r3, r2
 800f406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	0151      	lsls	r1, r2, #5
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	440a      	add	r2, r1
 800f414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f41c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	785b      	ldrb	r3, [r3, #1]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d128      	bne.n	800f49a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	015a      	lsls	r2, r3, #5
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	4413      	add	r3, r2
 800f450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	0151      	lsls	r1, r2, #5
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	440a      	add	r2, r1
 800f45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f466:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	791b      	ldrb	r3, [r3, #4]
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d003      	beq.n	800f478 <USB_EPClearStall+0x4c>
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	791b      	ldrb	r3, [r3, #4]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d138      	bne.n	800f4ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	0151      	lsls	r1, r2, #5
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	440a      	add	r2, r1
 800f48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	e027      	b.n	800f4ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	0151      	lsls	r1, r2, #5
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	440a      	add	r2, r1
 800f4b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	791b      	ldrb	r3, [r3, #4]
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d003      	beq.n	800f4ca <USB_EPClearStall+0x9e>
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	791b      	ldrb	r3, [r3, #4]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d10f      	bne.n	800f4ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	0151      	lsls	r1, r2, #5
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	440a      	add	r2, r1
 800f4e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f516:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f51a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	78fb      	ldrb	r3, [r7, #3]
 800f526:	011b      	lsls	r3, r3, #4
 800f528:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f52c:	68f9      	ldr	r1, [r7, #12]
 800f52e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f532:	4313      	orrs	r3, r2
 800f534:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f55e:	f023 0303 	bic.w	r3, r3, #3
 800f562:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f572:	f023 0302 	bic.w	r3, r3, #2
 800f576:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f578:	2300      	movs	r3, #0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3714      	adds	r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f586:	b480      	push	{r7}
 800f588:	b085      	sub	sp, #20
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5a0:	f023 0303 	bic.w	r3, r3, #3
 800f5a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5b4:	f043 0302 	orr.w	r3, r3, #2
 800f5b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	4013      	ands	r3, r2
 800f5de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3714      	adds	r7, #20
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b085      	sub	sp, #20
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800f5fe:	78fb      	ldrb	r3, [r7, #3]
 800f600:	015a      	lsls	r2, r3, #5
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	4413      	add	r3, r2
 800f606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	015a      	lsls	r2, r3, #5
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4413      	add	r3, r2
 800f616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	4013      	ands	r3, r2
 800f620:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f622:	68bb      	ldr	r3, [r7, #8]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f64c:	69db      	ldr	r3, [r3, #28]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	4013      	ands	r3, r2
 800f652:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	0c1b      	lsrs	r3, r3, #16
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f680:	69db      	ldr	r3, [r3, #28]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4013      	ands	r3, r2
 800f686:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	b29b      	uxth	r3, r3
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f6f8:	78fb      	ldrb	r3, [r7, #3]
 800f6fa:	f003 030f 	and.w	r3, r3, #15
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	fa22 f303 	lsr.w	r3, r2, r3
 800f704:	01db      	lsls	r3, r3, #7
 800f706:	b2db      	uxtb	r3, r3
 800f708:	693a      	ldr	r2, [r7, #16]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f70e:	78fb      	ldrb	r3, [r7, #3]
 800f710:	015a      	lsls	r2, r3, #5
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	4413      	add	r3, r2
 800f716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	4013      	ands	r3, r2
 800f720:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f722:	68bb      	ldr	r3, [r7, #8]
}
 800f724:	4618      	mov	r0, r3
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	f003 0301 	and.w	r3, r3, #1
}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f766:	4619      	mov	r1, r3
 800f768:	4b09      	ldr	r3, [pc, #36]	; (800f790 <USB_ActivateSetup+0x44>)
 800f76a:	4013      	ands	r3, r2
 800f76c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f77c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	fffff800 	.word	0xfffff800

0800f794 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f794:	b480      	push	{r7}
 800f796:	b087      	sub	sp, #28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	460b      	mov	r3, r1
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	333c      	adds	r3, #60	; 0x3c
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	4a26      	ldr	r2, [pc, #152]	; (800f84c <USB_EP0_OutStart+0xb8>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d90a      	bls.n	800f7ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7c8:	d101      	bne.n	800f7ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	e037      	b.n	800f83e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7fc:	f043 0318 	orr.w	r3, r3, #24
 800f800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	697a      	ldr	r2, [r7, #20]
 800f80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f810:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f814:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f816:	7afb      	ldrb	r3, [r7, #11]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d10f      	bne.n	800f83c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f822:	461a      	mov	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	697a      	ldr	r2, [r7, #20]
 800f832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f836:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f83a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	371c      	adds	r7, #28
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop
 800f84c:	4f54300a 	.word	0x4f54300a

0800f850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f858:	2300      	movs	r3, #0
 800f85a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3301      	adds	r3, #1
 800f860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4a13      	ldr	r2, [pc, #76]	; (800f8b4 <USB_CoreReset+0x64>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d901      	bls.n	800f86e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f86a:	2303      	movs	r3, #3
 800f86c:	e01b      	b.n	800f8a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	691b      	ldr	r3, [r3, #16]
 800f872:	2b00      	cmp	r3, #0
 800f874:	daf2      	bge.n	800f85c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f876:	2300      	movs	r3, #0
 800f878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	691b      	ldr	r3, [r3, #16]
 800f87e:	f043 0201 	orr.w	r2, r3, #1
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	3301      	adds	r3, #1
 800f88a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	4a09      	ldr	r2, [pc, #36]	; (800f8b4 <USB_CoreReset+0x64>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d901      	bls.n	800f898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f894:	2303      	movs	r3, #3
 800f896:	e006      	b.n	800f8a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	691b      	ldr	r3, [r3, #16]
 800f89c:	f003 0301 	and.w	r3, r3, #1
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d0f0      	beq.n	800f886 <USB_CoreReset+0x36>

  return HAL_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3714      	adds	r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	00030d40 	.word	0x00030d40

0800f8b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b086      	sub	sp, #24
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8d8:	461a      	mov	r2, r3
 800f8da:	2300      	movs	r3, #0
 800f8dc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d018      	beq.n	800f928 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d10a      	bne.n	800f912 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f90a:	f043 0304 	orr.w	r3, r3, #4
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	e014      	b.n	800f93c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f920:	f023 0304 	bic.w	r3, r3, #4
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	e009      	b.n	800f93c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f936:	f023 0304 	bic.w	r3, r3, #4
 800f93a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f93c:	2110      	movs	r1, #16
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7fe fe14 	bl	800e56c <USB_FlushTxFifo>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800f94a:	2301      	movs	r3, #1
 800f94c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7fe fe40 	bl	800e5d4 <USB_FlushRxFifo>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f95e:	2300      	movs	r3, #0
 800f960:	613b      	str	r3, [r7, #16]
 800f962:	e015      	b.n	800f990 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	015a      	lsls	r2, r3, #5
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	4413      	add	r3, r2
 800f96c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f970:	461a      	mov	r2, r3
 800f972:	f04f 33ff 	mov.w	r3, #4294967295
 800f976:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	015a      	lsls	r2, r3, #5
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4413      	add	r3, r2
 800f980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f984:	461a      	mov	r2, r3
 800f986:	2300      	movs	r3, #0
 800f988:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	3301      	adds	r3, #1
 800f98e:	613b      	str	r3, [r7, #16]
 800f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	429a      	cmp	r2, r3
 800f996:	d3e5      	bcc.n	800f964 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00b      	beq.n	800f9ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a13      	ldr	r2, [pc, #76]	; (800fa0c <USB_HostInit+0x154>)
 800f9be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a13      	ldr	r2, [pc, #76]	; (800fa10 <USB_HostInit+0x158>)
 800f9c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f9c8:	e009      	b.n	800f9de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2280      	movs	r2, #128	; 0x80
 800f9ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a10      	ldr	r2, [pc, #64]	; (800fa14 <USB_HostInit+0x15c>)
 800f9d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a0f      	ldr	r2, [pc, #60]	; (800fa18 <USB_HostInit+0x160>)
 800f9da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d105      	bne.n	800f9f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	699b      	ldr	r3, [r3, #24]
 800f9e8:	f043 0210 	orr.w	r2, r3, #16
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	699a      	ldr	r2, [r3, #24]
 800f9f4:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <USB_HostInit+0x164>)
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa08:	b004      	add	sp, #16
 800fa0a:	4770      	bx	lr
 800fa0c:	01000200 	.word	0x01000200
 800fa10:	00e00300 	.word	0x00e00300
 800fa14:	00600080 	.word	0x00600080
 800fa18:	004000e0 	.word	0x004000e0
 800fa1c:	a3200008 	.word	0xa3200008

0800fa20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa3e:	f023 0303 	bic.w	r3, r3, #3
 800fa42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	f003 0303 	and.w	r3, r3, #3
 800fa52:	68f9      	ldr	r1, [r7, #12]
 800fa54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800fa5c:	78fb      	ldrb	r3, [r7, #3]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d107      	bne.n	800fa72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa68:	461a      	mov	r2, r3
 800fa6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fa6e:	6053      	str	r3, [r2, #4]
 800fa70:	e009      	b.n	800fa86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800fa72:	78fb      	ldrb	r3, [r7, #3]
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d106      	bne.n	800fa86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa7e:	461a      	mov	r2, r3
 800fa80:	f241 7370 	movw	r3, #6000	; 0x1770
 800fa84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800faa0:	2300      	movs	r3, #0
 800faa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fabe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fac2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800fac4:	2064      	movs	r0, #100	; 0x64
 800fac6:	f7f5 fda1 	bl	800560c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fad6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800fad8:	200a      	movs	r0, #10
 800fada:	f7f5 fd97 	bl	800560c <HAL_Delay>

  return HAL_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800fae8:	b480      	push	{r7}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	460b      	mov	r3, r1
 800faf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fb0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d109      	bne.n	800fb2c <USB_DriveVbus+0x44>
 800fb18:	78fb      	ldrb	r3, [r7, #3]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d106      	bne.n	800fb2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fb26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fb2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb36:	d109      	bne.n	800fb4c <USB_DriveVbus+0x64>
 800fb38:	78fb      	ldrb	r3, [r7, #3]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fb46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr

0800fb5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fb5a:	b480      	push	{r7}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800fb66:	2300      	movs	r3, #0
 800fb68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	0c5b      	lsrs	r3, r3, #17
 800fb78:	f003 0303 	and.w	r3, r3, #3
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb9a:	689b      	ldr	r3, [r3, #8]
 800fb9c:	b29b      	uxth	r3, r3
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3714      	adds	r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr
	...

0800fbac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b088      	sub	sp, #32
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	461a      	mov	r2, r3
 800fbba:	4603      	mov	r3, r0
 800fbbc:	70fb      	strb	r3, [r7, #3]
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	70bb      	strb	r3, [r7, #2]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800fbce:	78fb      	ldrb	r3, [r7, #3]
 800fbd0:	015a      	lsls	r2, r3, #5
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbda:	461a      	mov	r2, r3
 800fbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800fbe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d87e      	bhi.n	800fce8 <USB_HC_Init+0x13c>
 800fbea:	a201      	add	r2, pc, #4	; (adr r2, 800fbf0 <USB_HC_Init+0x44>)
 800fbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf0:	0800fc01 	.word	0x0800fc01
 800fbf4:	0800fcab 	.word	0x0800fcab
 800fbf8:	0800fc01 	.word	0x0800fc01
 800fbfc:	0800fc6d 	.word	0x0800fc6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fc00:	78fb      	ldrb	r3, [r7, #3]
 800fc02:	015a      	lsls	r2, r3, #5
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	4413      	add	r3, r2
 800fc08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	f240 439d 	movw	r3, #1181	; 0x49d
 800fc12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800fc14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	da10      	bge.n	800fc3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fc1c:	78fb      	ldrb	r3, [r7, #3]
 800fc1e:	015a      	lsls	r2, r3, #5
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	4413      	add	r3, r2
 800fc24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	78fa      	ldrb	r2, [r7, #3]
 800fc2c:	0151      	lsls	r1, r2, #5
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	440a      	add	r2, r1
 800fc32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800fc3c:	e057      	b.n	800fcee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d051      	beq.n	800fcee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800fc4a:	78fb      	ldrb	r3, [r7, #3]
 800fc4c:	015a      	lsls	r2, r3, #5
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	4413      	add	r3, r2
 800fc52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	78fa      	ldrb	r2, [r7, #3]
 800fc5a:	0151      	lsls	r1, r2, #5
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	440a      	add	r2, r1
 800fc60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fc68:	60d3      	str	r3, [r2, #12]
      break;
 800fc6a:	e040      	b.n	800fcee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fc6c:	78fb      	ldrb	r3, [r7, #3]
 800fc6e:	015a      	lsls	r2, r3, #5
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	4413      	add	r3, r2
 800fc74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc78:	461a      	mov	r2, r3
 800fc7a:	f240 639d 	movw	r3, #1693	; 0x69d
 800fc7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fc80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	da34      	bge.n	800fcf2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fc88:	78fb      	ldrb	r3, [r7, #3]
 800fc8a:	015a      	lsls	r2, r3, #5
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	0151      	lsls	r1, r2, #5
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	440a      	add	r2, r1
 800fc9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fca6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800fca8:	e023      	b.n	800fcf2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fcaa:	78fb      	ldrb	r3, [r7, #3]
 800fcac:	015a      	lsls	r2, r3, #5
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f240 2325 	movw	r3, #549	; 0x225
 800fcbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fcbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	da17      	bge.n	800fcf6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	015a      	lsls	r2, r3, #5
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	4413      	add	r3, r2
 800fcce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	78fa      	ldrb	r2, [r7, #3]
 800fcd6:	0151      	lsls	r1, r2, #5
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	440a      	add	r2, r1
 800fcdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fce0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800fce4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800fce6:	e006      	b.n	800fcf6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800fce8:	2301      	movs	r3, #1
 800fcea:	77fb      	strb	r3, [r7, #31]
      break;
 800fcec:	e004      	b.n	800fcf8 <USB_HC_Init+0x14c>
      break;
 800fcee:	bf00      	nop
 800fcf0:	e002      	b.n	800fcf8 <USB_HC_Init+0x14c>
      break;
 800fcf2:	bf00      	nop
 800fcf4:	e000      	b.n	800fcf8 <USB_HC_Init+0x14c>
      break;
 800fcf6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800fcf8:	78fb      	ldrb	r3, [r7, #3]
 800fcfa:	015a      	lsls	r2, r3, #5
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	4413      	add	r3, r2
 800fd00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	78fa      	ldrb	r2, [r7, #3]
 800fd08:	0151      	lsls	r1, r2, #5
 800fd0a:	693a      	ldr	r2, [r7, #16]
 800fd0c:	440a      	add	r2, r1
 800fd0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd12:	f043 0302 	orr.w	r3, r3, #2
 800fd16:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd1e:	699a      	ldr	r2, [r3, #24]
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	f003 030f 	and.w	r3, r3, #15
 800fd26:	2101      	movs	r1, #1
 800fd28:	fa01 f303 	lsl.w	r3, r1, r3
 800fd2c:	6939      	ldr	r1, [r7, #16]
 800fd2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fd32:	4313      	orrs	r3, r2
 800fd34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800fd42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	da03      	bge.n	800fd52 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800fd4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd4e:	61bb      	str	r3, [r7, #24]
 800fd50:	e001      	b.n	800fd56 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800fd52:	2300      	movs	r3, #0
 800fd54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff feff 	bl	800fb5a <USB_GetHostSpeed>
 800fd5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800fd5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d106      	bne.n	800fd74 <USB_HC_Init+0x1c8>
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	d003      	beq.n	800fd74 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800fd6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fd70:	617b      	str	r3, [r7, #20]
 800fd72:	e001      	b.n	800fd78 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800fd74:	2300      	movs	r3, #0
 800fd76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fd78:	787b      	ldrb	r3, [r7, #1]
 800fd7a:	059b      	lsls	r3, r3, #22
 800fd7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fd80:	78bb      	ldrb	r3, [r7, #2]
 800fd82:	02db      	lsls	r3, r3, #11
 800fd84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fd88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fd8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd8e:	049b      	lsls	r3, r3, #18
 800fd90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fd94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fd96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fd98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fd9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	0159      	lsls	r1, r3, #5
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	440b      	add	r3, r1
 800fdaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fdb4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800fdb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d003      	beq.n	800fdc6 <USB_HC_Init+0x21a>
 800fdbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d10f      	bne.n	800fde6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800fdc6:	78fb      	ldrb	r3, [r7, #3]
 800fdc8:	015a      	lsls	r2, r3, #5
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	4413      	add	r3, r2
 800fdce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	78fa      	ldrb	r2, [r7, #3]
 800fdd6:	0151      	lsls	r1, r2, #5
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	440a      	add	r2, r1
 800fddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fde0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fde4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800fde6:	7ffb      	ldrb	r3, [r7, #31]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3720      	adds	r7, #32
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08c      	sub	sp, #48	; 0x30
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	785b      	ldrb	r3, [r3, #1]
 800fe06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800fe08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d02d      	beq.n	800fe76 <USB_HC_StartXfer+0x86>
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	791b      	ldrb	r3, [r3, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d129      	bne.n	800fe76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d117      	bne.n	800fe58 <USB_HC_StartXfer+0x68>
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	79db      	ldrb	r3, [r3, #7]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d003      	beq.n	800fe38 <USB_HC_StartXfer+0x48>
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	79db      	ldrb	r3, [r3, #7]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d10f      	bne.n	800fe58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	015a      	lsls	r2, r3, #5
 800fe3c:	6a3b      	ldr	r3, [r7, #32]
 800fe3e:	4413      	add	r3, r2
 800fe40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	69fa      	ldr	r2, [r7, #28]
 800fe48:	0151      	lsls	r1, r2, #5
 800fe4a:	6a3a      	ldr	r2, [r7, #32]
 800fe4c:	440a      	add	r2, r1
 800fe4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800fe58:	79fb      	ldrb	r3, [r7, #7]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10b      	bne.n	800fe76 <USB_HC_StartXfer+0x86>
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	795b      	ldrb	r3, [r3, #5]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d107      	bne.n	800fe76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f000 fa0f 	bl	8010290 <USB_DoPing>
      return HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e0f8      	b.n	8010068 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	695b      	ldr	r3, [r3, #20]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d018      	beq.n	800feb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	68ba      	ldr	r2, [r7, #8]
 800fe84:	8912      	ldrh	r2, [r2, #8]
 800fe86:	4413      	add	r3, r2
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	8912      	ldrh	r2, [r2, #8]
 800fe8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800fe94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fe96:	8b7b      	ldrh	r3, [r7, #26]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d90b      	bls.n	800feb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800fe9c:	8b7b      	ldrh	r3, [r7, #26]
 800fe9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	8912      	ldrh	r2, [r2, #8]
 800fea6:	fb03 f202 	mul.w	r2, r3, r2
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	611a      	str	r2, [r3, #16]
 800feae:	e001      	b.n	800feb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800feb0:	2301      	movs	r3, #1
 800feb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	78db      	ldrb	r3, [r3, #3]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d007      	beq.n	800fecc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800febc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	8912      	ldrh	r2, [r2, #8]
 800fec2:	fb03 f202 	mul.w	r2, r3, r2
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	611a      	str	r2, [r3, #16]
 800feca:	e003      	b.n	800fed4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	695a      	ldr	r2, [r3, #20]
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fedc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fede:	04d9      	lsls	r1, r3, #19
 800fee0:	4b63      	ldr	r3, [pc, #396]	; (8010070 <USB_HC_StartXfer+0x280>)
 800fee2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fee4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	7a9b      	ldrb	r3, [r3, #10]
 800feea:	075b      	lsls	r3, r3, #29
 800feec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fef0:	69f9      	ldr	r1, [r7, #28]
 800fef2:	0148      	lsls	r0, r1, #5
 800fef4:	6a39      	ldr	r1, [r7, #32]
 800fef6:	4401      	add	r1, r0
 800fef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fefc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fefe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	68d9      	ldr	r1, [r3, #12]
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	015a      	lsls	r2, r3, #5
 800ff0e:	6a3b      	ldr	r3, [r7, #32]
 800ff10:	4413      	add	r3, r2
 800ff12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff16:	460a      	mov	r2, r1
 800ff18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	f003 0301 	and.w	r3, r3, #1
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	bf0c      	ite	eq
 800ff2a:	2301      	moveq	r3, #1
 800ff2c:	2300      	movne	r3, #0
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	015a      	lsls	r2, r3, #5
 800ff36:	6a3b      	ldr	r3, [r7, #32]
 800ff38:	4413      	add	r3, r2
 800ff3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	69fa      	ldr	r2, [r7, #28]
 800ff42:	0151      	lsls	r1, r2, #5
 800ff44:	6a3a      	ldr	r2, [r7, #32]
 800ff46:	440a      	add	r2, r1
 800ff48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	015a      	lsls	r2, r3, #5
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	7e7b      	ldrb	r3, [r7, #25]
 800ff62:	075b      	lsls	r3, r3, #29
 800ff64:	69f9      	ldr	r1, [r7, #28]
 800ff66:	0148      	lsls	r0, r1, #5
 800ff68:	6a39      	ldr	r1, [r7, #32]
 800ff6a:	4401      	add	r1, r0
 800ff6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ff70:	4313      	orrs	r3, r2
 800ff72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ff8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	78db      	ldrb	r3, [r3, #3]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff9a:	613b      	str	r3, [r7, #16]
 800ff9c:	e003      	b.n	800ffa6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ffa4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ffac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffba:	461a      	mov	r2, r3
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e04e      	b.n	8010068 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	78db      	ldrb	r3, [r3, #3]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d149      	bne.n	8010066 <USB_HC_StartXfer+0x276>
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d045      	beq.n	8010066 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	79db      	ldrb	r3, [r3, #7]
 800ffde:	2b03      	cmp	r3, #3
 800ffe0:	d830      	bhi.n	8010044 <USB_HC_StartXfer+0x254>
 800ffe2:	a201      	add	r2, pc, #4	; (adr r2, 800ffe8 <USB_HC_StartXfer+0x1f8>)
 800ffe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe8:	0800fff9 	.word	0x0800fff9
 800ffec:	0801001d 	.word	0x0801001d
 800fff0:	0800fff9 	.word	0x0800fff9
 800fff4:	0801001d 	.word	0x0801001d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	3303      	adds	r3, #3
 800fffe:	089b      	lsrs	r3, r3, #2
 8010000:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8010002:	8afa      	ldrh	r2, [r7, #22]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010008:	b29b      	uxth	r3, r3
 801000a:	429a      	cmp	r2, r3
 801000c:	d91c      	bls.n	8010048 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	f043 0220 	orr.w	r2, r3, #32
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	619a      	str	r2, [r3, #24]
        }
        break;
 801001a:	e015      	b.n	8010048 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	695b      	ldr	r3, [r3, #20]
 8010020:	3303      	adds	r3, #3
 8010022:	089b      	lsrs	r3, r3, #2
 8010024:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8010026:	8afa      	ldrh	r2, [r7, #22]
 8010028:	6a3b      	ldr	r3, [r7, #32]
 801002a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	b29b      	uxth	r3, r3
 8010032:	429a      	cmp	r2, r3
 8010034:	d90a      	bls.n	801004c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	619a      	str	r2, [r3, #24]
        }
        break;
 8010042:	e003      	b.n	801004c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8010044:	bf00      	nop
 8010046:	e002      	b.n	801004e <USB_HC_StartXfer+0x25e>
        break;
 8010048:	bf00      	nop
 801004a:	e000      	b.n	801004e <USB_HC_StartXfer+0x25e>
        break;
 801004c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	68d9      	ldr	r1, [r3, #12]
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	785a      	ldrb	r2, [r3, #1]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	b29b      	uxth	r3, r3
 801005c:	2000      	movs	r0, #0
 801005e:	9000      	str	r0, [sp, #0]
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f7ff f8df 	bl	800f224 <USB_WritePacket>
  }

  return HAL_OK;
 8010066:	2300      	movs	r3, #0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3728      	adds	r7, #40	; 0x28
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	1ff80000 	.word	0x1ff80000

08010074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010086:	695b      	ldr	r3, [r3, #20]
 8010088:	b29b      	uxth	r3, r3
}
 801008a:	4618      	mov	r0, r3
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8010096:	b480      	push	{r7}
 8010098:	b089      	sub	sp, #36	; 0x24
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	460b      	mov	r3, r1
 80100a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80100a6:	78fb      	ldrb	r3, [r7, #3]
 80100a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80100aa:	2300      	movs	r3, #0
 80100ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	015a      	lsls	r2, r3, #5
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	4413      	add	r3, r2
 80100b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	0c9b      	lsrs	r3, r3, #18
 80100be:	f003 0303 	and.w	r3, r3, #3
 80100c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	0fdb      	lsrs	r3, r3, #31
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 0320 	and.w	r3, r3, #32
 80100e2:	2b20      	cmp	r3, #32
 80100e4:	d104      	bne.n	80100f0 <USB_HC_Halt+0x5a>
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	e0c8      	b.n	8010282 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <USB_HC_Halt+0x66>
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d163      	bne.n	80101c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	4413      	add	r3, r2
 8010104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	0151      	lsls	r1, r2, #5
 801010e:	69fa      	ldr	r2, [r7, #28]
 8010110:	440a      	add	r2, r1
 8010112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801011a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f003 0320 	and.w	r3, r3, #32
 8010124:	2b00      	cmp	r3, #0
 8010126:	f040 80ab 	bne.w	8010280 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801012e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010132:	2b00      	cmp	r3, #0
 8010134:	d133      	bne.n	801019e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	015a      	lsls	r2, r3, #5
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	4413      	add	r3, r2
 801013e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	69ba      	ldr	r2, [r7, #24]
 8010146:	0151      	lsls	r1, r2, #5
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	440a      	add	r2, r1
 801014c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010154:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	015a      	lsls	r2, r3, #5
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	4413      	add	r3, r2
 801015e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	0151      	lsls	r1, r2, #5
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	440a      	add	r2, r1
 801016c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010174:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3301      	adds	r3, #1
 801017a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010182:	d81d      	bhi.n	80101c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	015a      	lsls	r2, r3, #5
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	4413      	add	r3, r2
 801018c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801019a:	d0ec      	beq.n	8010176 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801019c:	e070      	b.n	8010280 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	015a      	lsls	r2, r3, #5
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	4413      	add	r3, r2
 80101a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	69ba      	ldr	r2, [r7, #24]
 80101ae:	0151      	lsls	r1, r2, #5
 80101b0:	69fa      	ldr	r2, [r7, #28]
 80101b2:	440a      	add	r2, r1
 80101b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80101b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80101bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80101be:	e05f      	b.n	8010280 <USB_HC_Halt+0x1ea>
            break;
 80101c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80101c2:	e05d      	b.n	8010280 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	015a      	lsls	r2, r3, #5
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	4413      	add	r3, r2
 80101cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	69ba      	ldr	r2, [r7, #24]
 80101d4:	0151      	lsls	r1, r2, #5
 80101d6:	69fa      	ldr	r2, [r7, #28]
 80101d8:	440a      	add	r2, r1
 80101da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80101de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101ea:	691b      	ldr	r3, [r3, #16]
 80101ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d133      	bne.n	801025c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	015a      	lsls	r2, r3, #5
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	4413      	add	r3, r2
 80101fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	69ba      	ldr	r2, [r7, #24]
 8010204:	0151      	lsls	r1, r2, #5
 8010206:	69fa      	ldr	r2, [r7, #28]
 8010208:	440a      	add	r2, r1
 801020a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801020e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010212:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	015a      	lsls	r2, r3, #5
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	4413      	add	r3, r2
 801021c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	69ba      	ldr	r2, [r7, #24]
 8010224:	0151      	lsls	r1, r2, #5
 8010226:	69fa      	ldr	r2, [r7, #28]
 8010228:	440a      	add	r2, r1
 801022a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801022e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010232:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	3301      	adds	r3, #1
 8010238:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010240:	d81d      	bhi.n	801027e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	4413      	add	r3, r2
 801024a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010258:	d0ec      	beq.n	8010234 <USB_HC_Halt+0x19e>
 801025a:	e011      	b.n	8010280 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	4413      	add	r3, r2
 8010264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	69ba      	ldr	r2, [r7, #24]
 801026c:	0151      	lsls	r1, r2, #5
 801026e:	69fa      	ldr	r2, [r7, #28]
 8010270:	440a      	add	r2, r1
 8010272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801027a:	6013      	str	r3, [r2, #0]
 801027c:	e000      	b.n	8010280 <USB_HC_Halt+0x1ea>
          break;
 801027e:	bf00      	nop
    }
  }

  return HAL_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3724      	adds	r7, #36	; 0x24
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
	...

08010290 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80102a0:	78fb      	ldrb	r3, [r7, #3]
 80102a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80102a4:	2301      	movs	r3, #1
 80102a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	04da      	lsls	r2, r3, #19
 80102ac:	4b15      	ldr	r3, [pc, #84]	; (8010304 <USB_DoPing+0x74>)
 80102ae:	4013      	ands	r3, r2
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	0151      	lsls	r1, r2, #5
 80102b4:	697a      	ldr	r2, [r7, #20]
 80102b6:	440a      	add	r2, r1
 80102b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80102c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	015a      	lsls	r2, r3, #5
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	4413      	add	r3, r2
 80102ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80102d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80102e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	015a      	lsls	r2, r3, #5
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	4413      	add	r3, r2
 80102ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102ee:	461a      	mov	r2, r3
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	1ff80000 	.word	0x1ff80000

08010308 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b088      	sub	sp, #32
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8010318:	2300      	movs	r3, #0
 801031a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7fd ff6a 	bl	800e1f6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010322:	2110      	movs	r1, #16
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fe f921 	bl	800e56c <USB_FlushTxFifo>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d001      	beq.n	8010334 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8010330:	2301      	movs	r3, #1
 8010332:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7fe f94d 	bl	800e5d4 <USB_FlushRxFifo>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d001      	beq.n	8010344 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8010340:	2301      	movs	r3, #1
 8010342:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8010344:	2300      	movs	r3, #0
 8010346:	61bb      	str	r3, [r7, #24]
 8010348:	e01f      	b.n	801038a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	015a      	lsls	r2, r3, #5
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	4413      	add	r3, r2
 8010352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010360:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010368:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010370:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	4413      	add	r3, r2
 801037a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801037e:	461a      	mov	r2, r3
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	3301      	adds	r3, #1
 8010388:	61bb      	str	r3, [r7, #24]
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	2b0f      	cmp	r3, #15
 801038e:	d9dc      	bls.n	801034a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010390:	2300      	movs	r3, #0
 8010392:	61bb      	str	r3, [r7, #24]
 8010394:	e034      	b.n	8010400 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	015a      	lsls	r2, r3, #5
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	4413      	add	r3, r2
 801039e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80103ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80103bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	015a      	lsls	r2, r3, #5
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	4413      	add	r3, r2
 80103c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103ca:	461a      	mov	r2, r3
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	3301      	adds	r3, #1
 80103d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80103dc:	d80c      	bhi.n	80103f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	015a      	lsls	r2, r3, #5
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	4413      	add	r3, r2
 80103e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103f4:	d0ec      	beq.n	80103d0 <USB_StopHost+0xc8>
 80103f6:	e000      	b.n	80103fa <USB_StopHost+0xf2>
        break;
 80103f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	3301      	adds	r3, #1
 80103fe:	61bb      	str	r3, [r7, #24]
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b0f      	cmp	r3, #15
 8010404:	d9c7      	bls.n	8010396 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801040c:	461a      	mov	r2, r3
 801040e:	f04f 33ff 	mov.w	r3, #4294967295
 8010412:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f04f 32ff 	mov.w	r2, #4294967295
 801041a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7fd fed9 	bl	800e1d4 <USB_EnableGlobalInt>

  return ret;
 8010422:	7ffb      	ldrb	r3, [r7, #31]
}
 8010424:	4618      	mov	r0, r3
 8010426:	3720      	adds	r7, #32
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010430:	4904      	ldr	r1, [pc, #16]	; (8010444 <MX_FATFS_Init+0x18>)
 8010432:	4805      	ldr	r0, [pc, #20]	; (8010448 <MX_FATFS_Init+0x1c>)
 8010434:	f006 ffc2 	bl	80173bc <FATFS_LinkDriver>
 8010438:	4603      	mov	r3, r0
 801043a:	461a      	mov	r2, r3
 801043c:	4b03      	ldr	r3, [pc, #12]	; (801044c <MX_FATFS_Init+0x20>)
 801043e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010440:	bf00      	nop
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20000f5c 	.word	0x20000f5c
 8010448:	0801c1dc 	.word	0x0801c1dc
 801044c:	20000f58 	.word	0x20000f58

08010450 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010450:	b480      	push	{r7}
 8010452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010454:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010456:	4618      	mov	r0, r3
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010466:	2300      	movs	r3, #0
 8010468:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801046a:	f000 f888 	bl	801057e <BSP_SD_IsDetected>
 801046e:	4603      	mov	r3, r0
 8010470:	2b01      	cmp	r3, #1
 8010472:	d001      	beq.n	8010478 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010474:	2302      	movs	r3, #2
 8010476:	e005      	b.n	8010484 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010478:	4804      	ldr	r0, [pc, #16]	; (801048c <BSP_SD_Init+0x2c>)
 801047a:	f7fa fae9 	bl	800aa50 <HAL_SD_Init>
 801047e:	4603      	mov	r3, r0
 8010480:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8010482:	79fb      	ldrb	r3, [r7, #7]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	200003c8 	.word	0x200003c8

08010490 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	68f9      	ldr	r1, [r7, #12]
 80104a6:	4806      	ldr	r0, [pc, #24]	; (80104c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80104a8:	f7fa fb8a 	bl	800abc0 <HAL_SD_ReadBlocks_DMA>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80104b2:	2301      	movs	r3, #1
 80104b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80104b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	200003c8 	.word	0x200003c8

080104c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	68f9      	ldr	r1, [r7, #12]
 80104da:	4806      	ldr	r0, [pc, #24]	; (80104f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80104dc:	f7fa fc52 	bl	800ad84 <HAL_SD_WriteBlocks_DMA>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d001      	beq.n	80104ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80104ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200003c8 	.word	0x200003c8

080104f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80104fc:	4805      	ldr	r0, [pc, #20]	; (8010514 <BSP_SD_GetCardState+0x1c>)
 80104fe:	f7fb f877 	bl	800b5f0 <HAL_SD_GetCardState>
 8010502:	4603      	mov	r3, r0
 8010504:	2b04      	cmp	r3, #4
 8010506:	bf14      	ite	ne
 8010508:	2301      	movne	r3, #1
 801050a:	2300      	moveq	r3, #0
 801050c:	b2db      	uxtb	r3, r3
}
 801050e:	4618      	mov	r0, r3
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	200003c8 	.word	0x200003c8

08010518 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010520:	6879      	ldr	r1, [r7, #4]
 8010522:	4803      	ldr	r0, [pc, #12]	; (8010530 <BSP_SD_GetCardInfo+0x18>)
 8010524:	f7fb f838 	bl	800b598 <HAL_SD_GetCardInfo>
}
 8010528:	bf00      	nop
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	200003c8 	.word	0x200003c8

08010534 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801053c:	f000 f818 	bl	8010570 <BSP_SD_AbortCallback>
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010550:	f000 f98c 	bl	801086c <BSP_SD_WriteCpltCallback>
}
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010564:	f000 f98e 	bl	8010884 <BSP_SD_ReadCpltCallback>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010570:	b480      	push	{r7}
 8010572:	af00      	add	r7, sp, #0

}
 8010574:	bf00      	nop
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801057e:	b480      	push	{r7}
 8010580:	b083      	sub	sp, #12
 8010582:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010584:	2301      	movs	r3, #1
 8010586:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010588:	79fb      	ldrb	r3, [r7, #7]
 801058a:	b2db      	uxtb	r3, r3
}
 801058c:	4618      	mov	r0, r3
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80105a0:	f7f5 f828 	bl	80055f4 <HAL_GetTick>
 80105a4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80105a6:	e006      	b.n	80105b6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105a8:	f7ff ffa6 	bl	80104f8 <BSP_SD_GetCardState>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e009      	b.n	80105ca <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80105b6:	f7f5 f81d 	bl	80055f4 <HAL_GetTick>
 80105ba:	4602      	mov	r2, r0
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d8f0      	bhi.n	80105a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80105c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
	...

080105d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80105de:	4b0b      	ldr	r3, [pc, #44]	; (801060c <SD_CheckStatus+0x38>)
 80105e0:	2201      	movs	r2, #1
 80105e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80105e4:	f7ff ff88 	bl	80104f8 <BSP_SD_GetCardState>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d107      	bne.n	80105fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80105ee:	4b07      	ldr	r3, [pc, #28]	; (801060c <SD_CheckStatus+0x38>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f023 0301 	bic.w	r3, r3, #1
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b04      	ldr	r3, [pc, #16]	; (801060c <SD_CheckStatus+0x38>)
 80105fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <SD_CheckStatus+0x38>)
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	b2db      	uxtb	r3, r3
}
 8010604:	4618      	mov	r0, r3
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	2000000d 	.word	0x2000000d

08010610 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801061a:	f7ff ff21 	bl	8010460 <BSP_SD_Init>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d107      	bne.n	8010634 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	4618      	mov	r0, r3
 8010628:	f7ff ffd4 	bl	80105d4 <SD_CheckStatus>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	4b04      	ldr	r3, [pc, #16]	; (8010644 <SD_initialize+0x34>)
 8010632:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010634:	4b03      	ldr	r3, [pc, #12]	; (8010644 <SD_initialize+0x34>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	b2db      	uxtb	r3, r3
}
 801063a:	4618      	mov	r0, r3
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	2000000d 	.word	0x2000000d

08010648 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	4603      	mov	r3, r0
 8010650:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff ffbd 	bl	80105d4 <SD_CheckStatus>
 801065a:	4603      	mov	r3, r0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	60b9      	str	r1, [r7, #8]
 801066c:	607a      	str	r2, [r7, #4]
 801066e:	603b      	str	r3, [r7, #0]
 8010670:	4603      	mov	r3, r0
 8010672:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010678:	f247 5030 	movw	r0, #30000	; 0x7530
 801067c:	f7ff ff8c 	bl	8010598 <SD_CheckStatusWithTimeout>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	da01      	bge.n	801068a <SD_read+0x26>
  {
    return res;
 8010686:	7dfb      	ldrb	r3, [r7, #23]
 8010688:	e03b      	b.n	8010702 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	6879      	ldr	r1, [r7, #4]
 801068e:	68b8      	ldr	r0, [r7, #8]
 8010690:	f7ff fefe 	bl	8010490 <BSP_SD_ReadBlocks_DMA>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d132      	bne.n	8010700 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801069a:	4b1c      	ldr	r3, [pc, #112]	; (801070c <SD_read+0xa8>)
 801069c:	2200      	movs	r2, #0
 801069e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80106a0:	f7f4 ffa8 	bl	80055f4 <HAL_GetTick>
 80106a4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80106a6:	bf00      	nop
 80106a8:	4b18      	ldr	r3, [pc, #96]	; (801070c <SD_read+0xa8>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d108      	bne.n	80106c2 <SD_read+0x5e>
 80106b0:	f7f4 ffa0 	bl	80055f4 <HAL_GetTick>
 80106b4:	4602      	mov	r2, r0
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80106be:	4293      	cmp	r3, r2
 80106c0:	d9f2      	bls.n	80106a8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80106c2:	4b12      	ldr	r3, [pc, #72]	; (801070c <SD_read+0xa8>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d102      	bne.n	80106d0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80106ca:	2301      	movs	r3, #1
 80106cc:	75fb      	strb	r3, [r7, #23]
 80106ce:	e017      	b.n	8010700 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80106d0:	4b0e      	ldr	r3, [pc, #56]	; (801070c <SD_read+0xa8>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80106d6:	f7f4 ff8d 	bl	80055f4 <HAL_GetTick>
 80106da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80106dc:	e007      	b.n	80106ee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80106de:	f7ff ff0b 	bl	80104f8 <BSP_SD_GetCardState>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d102      	bne.n	80106ee <SD_read+0x8a>
          {
            res = RES_OK;
 80106e8:	2300      	movs	r3, #0
 80106ea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80106ec:	e008      	b.n	8010700 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80106ee:	f7f4 ff81 	bl	80055f4 <HAL_GetTick>
 80106f2:	4602      	mov	r2, r0
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d9ee      	bls.n	80106de <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010700:	7dfb      	ldrb	r3, [r7, #23]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	20000f64 	.word	0x20000f64

08010710 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	60b9      	str	r1, [r7, #8]
 8010718:	607a      	str	r2, [r7, #4]
 801071a:	603b      	str	r3, [r7, #0]
 801071c:	4603      	mov	r3, r0
 801071e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010724:	4b24      	ldr	r3, [pc, #144]	; (80107b8 <SD_write+0xa8>)
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801072a:	f247 5030 	movw	r0, #30000	; 0x7530
 801072e:	f7ff ff33 	bl	8010598 <SD_CheckStatusWithTimeout>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	da01      	bge.n	801073c <SD_write+0x2c>
  {
    return res;
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	e038      	b.n	80107ae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	68b8      	ldr	r0, [r7, #8]
 8010742:	f7ff febf 	bl	80104c4 <BSP_SD_WriteBlocks_DMA>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d12f      	bne.n	80107ac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801074c:	f7f4 ff52 	bl	80055f4 <HAL_GetTick>
 8010750:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010752:	bf00      	nop
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <SD_write+0xa8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d108      	bne.n	801076e <SD_write+0x5e>
 801075c:	f7f4 ff4a 	bl	80055f4 <HAL_GetTick>
 8010760:	4602      	mov	r2, r0
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	f247 522f 	movw	r2, #29999	; 0x752f
 801076a:	4293      	cmp	r3, r2
 801076c:	d9f2      	bls.n	8010754 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801076e:	4b12      	ldr	r3, [pc, #72]	; (80107b8 <SD_write+0xa8>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d102      	bne.n	801077c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010776:	2301      	movs	r3, #1
 8010778:	75fb      	strb	r3, [r7, #23]
 801077a:	e017      	b.n	80107ac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801077c:	4b0e      	ldr	r3, [pc, #56]	; (80107b8 <SD_write+0xa8>)
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010782:	f7f4 ff37 	bl	80055f4 <HAL_GetTick>
 8010786:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010788:	e007      	b.n	801079a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801078a:	f7ff feb5 	bl	80104f8 <BSP_SD_GetCardState>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d102      	bne.n	801079a <SD_write+0x8a>
          {
            res = RES_OK;
 8010794:	2300      	movs	r3, #0
 8010796:	75fb      	strb	r3, [r7, #23]
            break;
 8010798:	e008      	b.n	80107ac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801079a:	f7f4 ff2b 	bl	80055f4 <HAL_GetTick>
 801079e:	4602      	mov	r2, r0
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d9ee      	bls.n	801078a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80107ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3718      	adds	r7, #24
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	20000f60 	.word	0x20000f60

080107bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08c      	sub	sp, #48	; 0x30
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	603a      	str	r2, [r7, #0]
 80107c6:	71fb      	strb	r3, [r7, #7]
 80107c8:	460b      	mov	r3, r1
 80107ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80107cc:	2301      	movs	r3, #1
 80107ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80107d2:	4b25      	ldr	r3, [pc, #148]	; (8010868 <SD_ioctl+0xac>)
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	f003 0301 	and.w	r3, r3, #1
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <SD_ioctl+0x28>
 80107e0:	2303      	movs	r3, #3
 80107e2:	e03c      	b.n	801085e <SD_ioctl+0xa2>

  switch (cmd)
 80107e4:	79bb      	ldrb	r3, [r7, #6]
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d834      	bhi.n	8010854 <SD_ioctl+0x98>
 80107ea:	a201      	add	r2, pc, #4	; (adr r2, 80107f0 <SD_ioctl+0x34>)
 80107ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f0:	08010801 	.word	0x08010801
 80107f4:	08010809 	.word	0x08010809
 80107f8:	08010821 	.word	0x08010821
 80107fc:	0801083b 	.word	0x0801083b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010806:	e028      	b.n	801085a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010808:	f107 030c 	add.w	r3, r7, #12
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff fe83 	bl	8010518 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801081e:	e01c      	b.n	801085a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010820:	f107 030c 	add.w	r3, r7, #12
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff fe77 	bl	8010518 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082c:	b29a      	uxth	r2, r3
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010838:	e00f      	b.n	801085a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801083a:	f107 030c 	add.w	r3, r7, #12
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff fe6a 	bl	8010518 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010846:	0a5a      	lsrs	r2, r3, #9
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801084c:	2300      	movs	r3, #0
 801084e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010852:	e002      	b.n	801085a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010854:	2304      	movs	r3, #4
 8010856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801085a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801085e:	4618      	mov	r0, r3
 8010860:	3730      	adds	r7, #48	; 0x30
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	2000000d 	.word	0x2000000d

0801086c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801086c:	b480      	push	{r7}
 801086e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010870:	4b03      	ldr	r3, [pc, #12]	; (8010880 <BSP_SD_WriteCpltCallback+0x14>)
 8010872:	2201      	movs	r2, #1
 8010874:	601a      	str	r2, [r3, #0]
}
 8010876:	bf00      	nop
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	20000f60 	.word	0x20000f60

08010884 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010884:	b480      	push	{r7}
 8010886:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010888:	4b03      	ldr	r3, [pc, #12]	; (8010898 <BSP_SD_ReadCpltCallback+0x14>)
 801088a:	2201      	movs	r2, #1
 801088c:	601a      	str	r2, [r3, #0]
}
 801088e:	bf00      	nop
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	20000f64 	.word	0x20000f64

0801089c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80108a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80108ac:	f007 fe8e 	bl	80185cc <malloc>
 80108b0:	4603      	mov	r3, r0
 80108b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d109      	bne.n	80108ce <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	32b0      	adds	r2, #176	; 0xb0
 80108c4:	2100      	movs	r1, #0
 80108c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80108ca:	2302      	movs	r3, #2
 80108cc:	e0d4      	b.n	8010a78 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80108ce:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80108d2:	2100      	movs	r1, #0
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f007 fea7 	bl	8018628 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	32b0      	adds	r2, #176	; 0xb0
 80108e4:	68f9      	ldr	r1, [r7, #12]
 80108e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	32b0      	adds	r2, #176	; 0xb0
 80108f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	7c1b      	ldrb	r3, [r3, #16]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d138      	bne.n	8010978 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010906:	4b5e      	ldr	r3, [pc, #376]	; (8010a80 <USBD_CDC_Init+0x1e4>)
 8010908:	7819      	ldrb	r1, [r3, #0]
 801090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801090e:	2202      	movs	r2, #2
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f007 f96e 	bl	8017bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010916:	4b5a      	ldr	r3, [pc, #360]	; (8010a80 <USBD_CDC_Init+0x1e4>)
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	f003 020f 	and.w	r2, r3, #15
 801091e:	6879      	ldr	r1, [r7, #4]
 8010920:	4613      	mov	r3, r2
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	4413      	add	r3, r2
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	440b      	add	r3, r1
 801092a:	3324      	adds	r3, #36	; 0x24
 801092c:	2201      	movs	r2, #1
 801092e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010930:	4b54      	ldr	r3, [pc, #336]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 8010932:	7819      	ldrb	r1, [r3, #0]
 8010934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010938:	2202      	movs	r2, #2
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f007 f959 	bl	8017bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010940:	4b50      	ldr	r3, [pc, #320]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f003 020f 	and.w	r2, r3, #15
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	4613      	mov	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	4413      	add	r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	440b      	add	r3, r1
 8010954:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010958:	2201      	movs	r2, #1
 801095a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801095c:	4b4a      	ldr	r3, [pc, #296]	; (8010a88 <USBD_CDC_Init+0x1ec>)
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f003 020f 	and.w	r2, r3, #15
 8010964:	6879      	ldr	r1, [r7, #4]
 8010966:	4613      	mov	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	4413      	add	r3, r2
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	440b      	add	r3, r1
 8010970:	3326      	adds	r3, #38	; 0x26
 8010972:	2210      	movs	r2, #16
 8010974:	801a      	strh	r2, [r3, #0]
 8010976:	e035      	b.n	80109e4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010978:	4b41      	ldr	r3, [pc, #260]	; (8010a80 <USBD_CDC_Init+0x1e4>)
 801097a:	7819      	ldrb	r1, [r3, #0]
 801097c:	2340      	movs	r3, #64	; 0x40
 801097e:	2202      	movs	r2, #2
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f007 f936 	bl	8017bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010986:	4b3e      	ldr	r3, [pc, #248]	; (8010a80 <USBD_CDC_Init+0x1e4>)
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f003 020f 	and.w	r2, r3, #15
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	4613      	mov	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	440b      	add	r3, r1
 801099a:	3324      	adds	r3, #36	; 0x24
 801099c:	2201      	movs	r2, #1
 801099e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80109a0:	4b38      	ldr	r3, [pc, #224]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 80109a2:	7819      	ldrb	r1, [r3, #0]
 80109a4:	2340      	movs	r3, #64	; 0x40
 80109a6:	2202      	movs	r2, #2
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f007 f922 	bl	8017bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80109ae:	4b35      	ldr	r3, [pc, #212]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	f003 020f 	and.w	r2, r3, #15
 80109b6:	6879      	ldr	r1, [r7, #4]
 80109b8:	4613      	mov	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	4413      	add	r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	440b      	add	r3, r1
 80109c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80109c6:	2201      	movs	r2, #1
 80109c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80109ca:	4b2f      	ldr	r3, [pc, #188]	; (8010a88 <USBD_CDC_Init+0x1ec>)
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	f003 020f 	and.w	r2, r3, #15
 80109d2:	6879      	ldr	r1, [r7, #4]
 80109d4:	4613      	mov	r3, r2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	4413      	add	r3, r2
 80109da:	009b      	lsls	r3, r3, #2
 80109dc:	440b      	add	r3, r1
 80109de:	3326      	adds	r3, #38	; 0x26
 80109e0:	2210      	movs	r2, #16
 80109e2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80109e4:	4b28      	ldr	r3, [pc, #160]	; (8010a88 <USBD_CDC_Init+0x1ec>)
 80109e6:	7819      	ldrb	r1, [r3, #0]
 80109e8:	2308      	movs	r3, #8
 80109ea:	2203      	movs	r2, #3
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f007 f900 	bl	8017bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80109f2:	4b25      	ldr	r3, [pc, #148]	; (8010a88 <USBD_CDC_Init+0x1ec>)
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	f003 020f 	and.w	r2, r3, #15
 80109fa:	6879      	ldr	r1, [r7, #4]
 80109fc:	4613      	mov	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	440b      	add	r3, r1
 8010a06:	3324      	adds	r3, #36	; 0x24
 8010a08:	2201      	movs	r2, #1
 8010a0a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	33b0      	adds	r3, #176	; 0xb0
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	4413      	add	r3, r2
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8010a42:	2302      	movs	r3, #2
 8010a44:	e018      	b.n	8010a78 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7c1b      	ldrb	r3, [r3, #16]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 8010a50:	7819      	ldrb	r1, [r3, #0]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f007 f9b7 	bl	8017dd0 <USBD_LL_PrepareReceive>
 8010a62:	e008      	b.n	8010a76 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010a64:	4b07      	ldr	r3, [pc, #28]	; (8010a84 <USBD_CDC_Init+0x1e8>)
 8010a66:	7819      	ldrb	r1, [r3, #0]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a6e:	2340      	movs	r3, #64	; 0x40
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f007 f9ad 	bl	8017dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20000097 	.word	0x20000097
 8010a84:	20000098 	.word	0x20000098
 8010a88:	20000099 	.word	0x20000099

08010a8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	460b      	mov	r3, r1
 8010a96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010a98:	4b3a      	ldr	r3, [pc, #232]	; (8010b84 <USBD_CDC_DeInit+0xf8>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f007 f8cd 	bl	8017c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010aa4:	4b37      	ldr	r3, [pc, #220]	; (8010b84 <USBD_CDC_DeInit+0xf8>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	f003 020f 	and.w	r2, r3, #15
 8010aac:	6879      	ldr	r1, [r7, #4]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	440b      	add	r3, r1
 8010ab8:	3324      	adds	r3, #36	; 0x24
 8010aba:	2200      	movs	r2, #0
 8010abc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010abe:	4b32      	ldr	r3, [pc, #200]	; (8010b88 <USBD_CDC_DeInit+0xfc>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f007 f8ba 	bl	8017c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010aca:	4b2f      	ldr	r3, [pc, #188]	; (8010b88 <USBD_CDC_DeInit+0xfc>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 020f 	and.w	r2, r3, #15
 8010ad2:	6879      	ldr	r1, [r7, #4]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	4413      	add	r3, r2
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	440b      	add	r3, r1
 8010ade:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010ae6:	4b29      	ldr	r3, [pc, #164]	; (8010b8c <USBD_CDC_DeInit+0x100>)
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	4619      	mov	r1, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f007 f8a6 	bl	8017c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010af2:	4b26      	ldr	r3, [pc, #152]	; (8010b8c <USBD_CDC_DeInit+0x100>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	f003 020f 	and.w	r2, r3, #15
 8010afa:	6879      	ldr	r1, [r7, #4]
 8010afc:	4613      	mov	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	440b      	add	r3, r1
 8010b06:	3324      	adds	r3, #36	; 0x24
 8010b08:	2200      	movs	r2, #0
 8010b0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010b0c:	4b1f      	ldr	r3, [pc, #124]	; (8010b8c <USBD_CDC_DeInit+0x100>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	f003 020f 	and.w	r2, r3, #15
 8010b14:	6879      	ldr	r1, [r7, #4]
 8010b16:	4613      	mov	r3, r2
 8010b18:	009b      	lsls	r3, r3, #2
 8010b1a:	4413      	add	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	440b      	add	r3, r1
 8010b20:	3326      	adds	r3, #38	; 0x26
 8010b22:	2200      	movs	r2, #0
 8010b24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	32b0      	adds	r2, #176	; 0xb0
 8010b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d01f      	beq.n	8010b78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	33b0      	adds	r3, #176	; 0xb0
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	4413      	add	r3, r2
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	32b0      	adds	r2, #176	; 0xb0
 8010b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f007 fd3e 	bl	80185dc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	32b0      	adds	r2, #176	; 0xb0
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3708      	adds	r7, #8
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	20000097 	.word	0x20000097
 8010b88:	20000098 	.word	0x20000098
 8010b8c:	20000099 	.word	0x20000099

08010b90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	32b0      	adds	r2, #176	; 0xb0
 8010ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ba8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010baa:	2300      	movs	r3, #0
 8010bac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d101      	bne.n	8010bc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	e0bf      	b.n	8010d40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d050      	beq.n	8010c6e <USBD_CDC_Setup+0xde>
 8010bcc:	2b20      	cmp	r3, #32
 8010bce:	f040 80af 	bne.w	8010d30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	88db      	ldrh	r3, [r3, #6]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d03a      	beq.n	8010c50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b25b      	sxtb	r3, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	da1b      	bge.n	8010c1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	33b0      	adds	r3, #176	; 0xb0
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	4413      	add	r3, r2
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010bfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	88d2      	ldrh	r2, [r2, #6]
 8010c00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	88db      	ldrh	r3, [r3, #6]
 8010c06:	2b07      	cmp	r3, #7
 8010c08:	bf28      	it	cs
 8010c0a:	2307      	movcs	r3, #7
 8010c0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	89fa      	ldrh	r2, [r7, #14]
 8010c12:	4619      	mov	r1, r3
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f001 fdad 	bl	8012774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010c1a:	e090      	b.n	8010d3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	785a      	ldrb	r2, [r3, #1]
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	88db      	ldrh	r3, [r3, #6]
 8010c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8010c2c:	d803      	bhi.n	8010c36 <USBD_CDC_Setup+0xa6>
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	88db      	ldrh	r3, [r3, #6]
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	e000      	b.n	8010c38 <USBD_CDC_Setup+0xa8>
 8010c36:	2240      	movs	r2, #64	; 0x40
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010c3e:	6939      	ldr	r1, [r7, #16]
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010c46:	461a      	mov	r2, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f001 fdbf 	bl	80127cc <USBD_CtlPrepareRx>
      break;
 8010c4e:	e076      	b.n	8010d3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	33b0      	adds	r3, #176	; 0xb0
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	683a      	ldr	r2, [r7, #0]
 8010c64:	7850      	ldrb	r0, [r2, #1]
 8010c66:	2200      	movs	r2, #0
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	4798      	blx	r3
      break;
 8010c6c:	e067      	b.n	8010d3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	785b      	ldrb	r3, [r3, #1]
 8010c72:	2b0b      	cmp	r3, #11
 8010c74:	d851      	bhi.n	8010d1a <USBD_CDC_Setup+0x18a>
 8010c76:	a201      	add	r2, pc, #4	; (adr r2, 8010c7c <USBD_CDC_Setup+0xec>)
 8010c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c7c:	08010cad 	.word	0x08010cad
 8010c80:	08010d29 	.word	0x08010d29
 8010c84:	08010d1b 	.word	0x08010d1b
 8010c88:	08010d1b 	.word	0x08010d1b
 8010c8c:	08010d1b 	.word	0x08010d1b
 8010c90:	08010d1b 	.word	0x08010d1b
 8010c94:	08010d1b 	.word	0x08010d1b
 8010c98:	08010d1b 	.word	0x08010d1b
 8010c9c:	08010d1b 	.word	0x08010d1b
 8010ca0:	08010d1b 	.word	0x08010d1b
 8010ca4:	08010cd7 	.word	0x08010cd7
 8010ca8:	08010d01 	.word	0x08010d01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b03      	cmp	r3, #3
 8010cb6:	d107      	bne.n	8010cc8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010cb8:	f107 030a 	add.w	r3, r7, #10
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f001 fd57 	bl	8012774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cc6:	e032      	b.n	8010d2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f001 fce1 	bl	8012692 <USBD_CtlError>
            ret = USBD_FAIL;
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	75fb      	strb	r3, [r7, #23]
          break;
 8010cd4:	e02b      	b.n	8010d2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	2b03      	cmp	r3, #3
 8010ce0:	d107      	bne.n	8010cf2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010ce2:	f107 030d 	add.w	r3, r7, #13
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f001 fd42 	bl	8012774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cf0:	e01d      	b.n	8010d2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010cf2:	6839      	ldr	r1, [r7, #0]
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f001 fccc 	bl	8012692 <USBD_CtlError>
            ret = USBD_FAIL;
 8010cfa:	2303      	movs	r3, #3
 8010cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8010cfe:	e016      	b.n	8010d2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	2b03      	cmp	r3, #3
 8010d0a:	d00f      	beq.n	8010d2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010d0c:	6839      	ldr	r1, [r7, #0]
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f001 fcbf 	bl	8012692 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d14:	2303      	movs	r3, #3
 8010d16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010d18:	e008      	b.n	8010d2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f001 fcb8 	bl	8012692 <USBD_CtlError>
          ret = USBD_FAIL;
 8010d22:	2303      	movs	r3, #3
 8010d24:	75fb      	strb	r3, [r7, #23]
          break;
 8010d26:	e002      	b.n	8010d2e <USBD_CDC_Setup+0x19e>
          break;
 8010d28:	bf00      	nop
 8010d2a:	e008      	b.n	8010d3e <USBD_CDC_Setup+0x1ae>
          break;
 8010d2c:	bf00      	nop
      }
      break;
 8010d2e:	e006      	b.n	8010d3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f001 fcad 	bl	8012692 <USBD_CtlError>
      ret = USBD_FAIL;
 8010d38:	2303      	movs	r3, #3
 8010d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8010d3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3718      	adds	r7, #24
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	460b      	mov	r3, r1
 8010d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	32b0      	adds	r2, #176	; 0xb0
 8010d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d101      	bne.n	8010d72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	e065      	b.n	8010e3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	32b0      	adds	r2, #176	; 0xb0
 8010d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010d82:	78fb      	ldrb	r3, [r7, #3]
 8010d84:	f003 020f 	and.w	r2, r3, #15
 8010d88:	6879      	ldr	r1, [r7, #4]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	4413      	add	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	440b      	add	r3, r1
 8010d94:	3318      	adds	r3, #24
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d02f      	beq.n	8010dfc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010d9c:	78fb      	ldrb	r3, [r7, #3]
 8010d9e:	f003 020f 	and.w	r2, r3, #15
 8010da2:	6879      	ldr	r1, [r7, #4]
 8010da4:	4613      	mov	r3, r2
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	440b      	add	r3, r1
 8010dae:	3318      	adds	r3, #24
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	f003 010f 	and.w	r1, r3, #15
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	440b      	add	r3, r1
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	4403      	add	r3, r0
 8010dc4:	3348      	adds	r3, #72	; 0x48
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010dcc:	fb01 f303 	mul.w	r3, r1, r3
 8010dd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d112      	bne.n	8010dfc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010dd6:	78fb      	ldrb	r3, [r7, #3]
 8010dd8:	f003 020f 	and.w	r2, r3, #15
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	4613      	mov	r3, r2
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	440b      	add	r3, r1
 8010de8:	3318      	adds	r3, #24
 8010dea:	2200      	movs	r2, #0
 8010dec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010dee:	78f9      	ldrb	r1, [r7, #3]
 8010df0:	2300      	movs	r3, #0
 8010df2:	2200      	movs	r2, #0
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f006 ffca 	bl	8017d8e <USBD_LL_Transmit>
 8010dfa:	e01f      	b.n	8010e3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	33b0      	adds	r3, #176	; 0xb0
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4413      	add	r3, r2
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d010      	beq.n	8010e3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	33b0      	adds	r3, #176	; 0xb0
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	4413      	add	r3, r2
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010e38:	78fa      	ldrb	r2, [r7, #3]
 8010e3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b084      	sub	sp, #16
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	460b      	mov	r3, r1
 8010e50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	32b0      	adds	r2, #176	; 0xb0
 8010e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	32b0      	adds	r2, #176	; 0xb0
 8010e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d101      	bne.n	8010e78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010e74:	2303      	movs	r3, #3
 8010e76:	e01a      	b.n	8010eae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010e78:	78fb      	ldrb	r3, [r7, #3]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f006 ffc8 	bl	8017e12 <USBD_LL_GetRxDataSize>
 8010e82:	4602      	mov	r2, r0
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	33b0      	adds	r3, #176	; 0xb0
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	4413      	add	r3, r2
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b084      	sub	sp, #16
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	32b0      	adds	r2, #176	; 0xb0
 8010ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ecc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e025      	b.n	8010f24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	33b0      	adds	r3, #176	; 0xb0
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4413      	add	r3, r2
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d01a      	beq.n	8010f22 <USBD_CDC_EP0_RxReady+0x6c>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010ef2:	2bff      	cmp	r3, #255	; 0xff
 8010ef4:	d015      	beq.n	8010f22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	33b0      	adds	r3, #176	; 0xb0
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010f0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010f16:	b292      	uxth	r2, r2
 8010f18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	22ff      	movs	r2, #255	; 0xff
 8010f1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010f22:	2300      	movs	r3, #0
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b086      	sub	sp, #24
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010f34:	2182      	movs	r1, #130	; 0x82
 8010f36:	4818      	ldr	r0, [pc, #96]	; (8010f98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f38:	f000 fd49 	bl	80119ce <USBD_GetEpDesc>
 8010f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f3e:	2101      	movs	r1, #1
 8010f40:	4815      	ldr	r0, [pc, #84]	; (8010f98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f42:	f000 fd44 	bl	80119ce <USBD_GetEpDesc>
 8010f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010f48:	2181      	movs	r1, #129	; 0x81
 8010f4a:	4813      	ldr	r0, [pc, #76]	; (8010f98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010f4c:	f000 fd3f 	bl	80119ce <USBD_GetEpDesc>
 8010f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d002      	beq.n	8010f5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	2210      	movs	r2, #16
 8010f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	2200      	movs	r2, #0
 8010f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f6c:	711a      	strb	r2, [r3, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d006      	beq.n	8010f86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f80:	711a      	strb	r2, [r3, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2243      	movs	r2, #67	; 0x43
 8010f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010f8c:	4b02      	ldr	r3, [pc, #8]	; (8010f98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3718      	adds	r7, #24
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20000054 	.word	0x20000054

08010f9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b086      	sub	sp, #24
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010fa4:	2182      	movs	r1, #130	; 0x82
 8010fa6:	4818      	ldr	r0, [pc, #96]	; (8011008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010fa8:	f000 fd11 	bl	80119ce <USBD_GetEpDesc>
 8010fac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010fae:	2101      	movs	r1, #1
 8010fb0:	4815      	ldr	r0, [pc, #84]	; (8011008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010fb2:	f000 fd0c 	bl	80119ce <USBD_GetEpDesc>
 8010fb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010fb8:	2181      	movs	r1, #129	; 0x81
 8010fba:	4813      	ldr	r0, [pc, #76]	; (8011008 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010fbc:	f000 fd07 	bl	80119ce <USBD_GetEpDesc>
 8010fc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2210      	movs	r2, #16
 8010fcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d006      	beq.n	8010fe2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	711a      	strb	r2, [r3, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f042 0202 	orr.w	r2, r2, #2
 8010fe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d006      	beq.n	8010ff6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	711a      	strb	r2, [r3, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f042 0202 	orr.w	r2, r2, #2
 8010ff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2243      	movs	r2, #67	; 0x43
 8010ffa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010ffc:	4b02      	ldr	r3, [pc, #8]	; (8011008 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3718      	adds	r7, #24
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	20000054 	.word	0x20000054

0801100c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011014:	2182      	movs	r1, #130	; 0x82
 8011016:	4818      	ldr	r0, [pc, #96]	; (8011078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011018:	f000 fcd9 	bl	80119ce <USBD_GetEpDesc>
 801101c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801101e:	2101      	movs	r1, #1
 8011020:	4815      	ldr	r0, [pc, #84]	; (8011078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011022:	f000 fcd4 	bl	80119ce <USBD_GetEpDesc>
 8011026:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011028:	2181      	movs	r1, #129	; 0x81
 801102a:	4813      	ldr	r0, [pc, #76]	; (8011078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801102c:	f000 fccf 	bl	80119ce <USBD_GetEpDesc>
 8011030:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2210      	movs	r2, #16
 801103c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d006      	beq.n	8011052 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	2200      	movs	r2, #0
 8011048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801104c:	711a      	strb	r2, [r3, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d006      	beq.n	8011066 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2200      	movs	r2, #0
 801105c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011060:	711a      	strb	r2, [r3, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2243      	movs	r2, #67	; 0x43
 801106a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801106c:	4b02      	ldr	r3, [pc, #8]	; (8011078 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801106e:	4618      	mov	r0, r3
 8011070:	3718      	adds	r7, #24
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	20000054 	.word	0x20000054

0801107c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	220a      	movs	r2, #10
 8011088:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801108a:	4b03      	ldr	r3, [pc, #12]	; (8011098 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801108c:	4618      	mov	r0, r3
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr
 8011098:	20000010 	.word	0x20000010

0801109c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d101      	bne.n	80110b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80110ac:	2303      	movs	r3, #3
 80110ae:	e009      	b.n	80110c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	33b0      	adds	r3, #176	; 0xb0
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	4413      	add	r3, r2
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80110c2:	2300      	movs	r3, #0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b087      	sub	sp, #28
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	32b0      	adds	r2, #176	; 0xb0
 80110e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80110f2:	2303      	movs	r3, #3
 80110f4:	e008      	b.n	8011108 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	68ba      	ldr	r2, [r7, #8]
 80110fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	371c      	adds	r7, #28
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr

08011114 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011114:	b480      	push	{r7}
 8011116:	b085      	sub	sp, #20
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	32b0      	adds	r2, #176	; 0xb0
 8011128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011134:	2303      	movs	r3, #3
 8011136:	e004      	b.n	8011142 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	3714      	adds	r7, #20
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
	...

08011150 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	32b0      	adds	r2, #176	; 0xb0
 8011162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011166:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011168:	2301      	movs	r3, #1
 801116a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011172:	2303      	movs	r3, #3
 8011174:	e025      	b.n	80111c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801117c:	2b00      	cmp	r3, #0
 801117e:	d11f      	bne.n	80111c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2201      	movs	r2, #1
 8011184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011188:	4b10      	ldr	r3, [pc, #64]	; (80111cc <USBD_CDC_TransmitPacket+0x7c>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 020f 	and.w	r2, r3, #15
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	4613      	mov	r3, r2
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	4413      	add	r3, r2
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	4403      	add	r3, r0
 80111a2:	3318      	adds	r3, #24
 80111a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80111a6:	4b09      	ldr	r3, [pc, #36]	; (80111cc <USBD_CDC_TransmitPacket+0x7c>)
 80111a8:	7819      	ldrb	r1, [r3, #0]
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f006 fde9 	bl	8017d8e <USBD_LL_Transmit>

    ret = USBD_OK;
 80111bc:	2300      	movs	r3, #0
 80111be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	20000097 	.word	0x20000097

080111d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b084      	sub	sp, #16
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	32b0      	adds	r2, #176	; 0xb0
 80111e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	32b0      	adds	r2, #176	; 0xb0
 80111f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80111fa:	2303      	movs	r3, #3
 80111fc:	e018      	b.n	8011230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7c1b      	ldrb	r3, [r3, #16]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d10a      	bne.n	801121c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011206:	4b0c      	ldr	r3, [pc, #48]	; (8011238 <USBD_CDC_ReceivePacket+0x68>)
 8011208:	7819      	ldrb	r1, [r3, #0]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f006 fddb 	bl	8017dd0 <USBD_LL_PrepareReceive>
 801121a:	e008      	b.n	801122e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801121c:	4b06      	ldr	r3, [pc, #24]	; (8011238 <USBD_CDC_ReceivePacket+0x68>)
 801121e:	7819      	ldrb	r1, [r3, #0]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011226:	2340      	movs	r3, #64	; 0x40
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f006 fdd1 	bl	8017dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801122e:	2300      	movs	r3, #0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20000098 	.word	0x20000098

0801123c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b086      	sub	sp, #24
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	4613      	mov	r3, r2
 8011248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011250:	2303      	movs	r3, #3
 8011252:	e01f      	b.n	8011294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2200      	movs	r2, #0
 8011258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2200      	movs	r2, #0
 8011268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d003      	beq.n	801127a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2201      	movs	r2, #1
 801127e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	79fa      	ldrb	r2, [r7, #7]
 8011286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f006 fc45 	bl	8017b18 <USBD_LL_Init>
 801128e:	4603      	mov	r3, r0
 8011290:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011292:	7dfb      	ldrb	r3, [r7, #23]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80112a6:	2300      	movs	r3, #0
 80112a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e025      	b.n	8011300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	32ae      	adds	r2, #174	; 0xae
 80112c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00f      	beq.n	80112f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	32ae      	adds	r2, #174	; 0xae
 80112da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e0:	f107 020e 	add.w	r2, r7, #14
 80112e4:	4610      	mov	r0, r2
 80112e6:	4798      	blx	r3
 80112e8:	4602      	mov	r2, r0
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f006 fc53 	bl	8017bbc <USBD_LL_Start>
 8011316:	4603      	mov	r3, r0
}
 8011318:	4618      	mov	r0, r3
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr

08011336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011336:	b580      	push	{r7, lr}
 8011338:	b084      	sub	sp, #16
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
 801133e:	460b      	mov	r3, r1
 8011340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	78fa      	ldrb	r2, [r7, #3]
 801135a:	4611      	mov	r1, r2
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	4798      	blx	r3
 8011360:	4603      	mov	r3, r0
 8011362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011364:	7bfb      	ldrb	r3, [r7, #15]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b084      	sub	sp, #16
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	460b      	mov	r3, r1
 8011378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	78fa      	ldrb	r2, [r7, #3]
 8011388:	4611      	mov	r1, r2
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	4798      	blx	r3
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011394:	2303      	movs	r3, #3
 8011396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011398:	7bfb      	ldrb	r3, [r7, #15]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b084      	sub	sp, #16
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f001 f932 	bl	801261e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2201      	movs	r2, #1
 80113be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80113c8:	461a      	mov	r2, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80113d6:	f003 031f 	and.w	r3, r3, #31
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d01a      	beq.n	8011414 <USBD_LL_SetupStage+0x72>
 80113de:	2b02      	cmp	r3, #2
 80113e0:	d822      	bhi.n	8011428 <USBD_LL_SetupStage+0x86>
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d002      	beq.n	80113ec <USBD_LL_SetupStage+0x4a>
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d00a      	beq.n	8011400 <USBD_LL_SetupStage+0x5e>
 80113ea:	e01d      	b.n	8011428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fb5f 	bl	8011ab8 <USBD_StdDevReq>
 80113fa:	4603      	mov	r3, r0
 80113fc:	73fb      	strb	r3, [r7, #15]
      break;
 80113fe:	e020      	b.n	8011442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011406:	4619      	mov	r1, r3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 fbc7 	bl	8011b9c <USBD_StdItfReq>
 801140e:	4603      	mov	r3, r0
 8011410:	73fb      	strb	r3, [r7, #15]
      break;
 8011412:	e016      	b.n	8011442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801141a:	4619      	mov	r1, r3
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 fc29 	bl	8011c74 <USBD_StdEPReq>
 8011422:	4603      	mov	r3, r0
 8011424:	73fb      	strb	r3, [r7, #15]
      break;
 8011426:	e00c      	b.n	8011442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801142e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011432:	b2db      	uxtb	r3, r3
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f006 fc20 	bl	8017c7c <USBD_LL_StallEP>
 801143c:	4603      	mov	r3, r0
 801143e:	73fb      	strb	r3, [r7, #15]
      break;
 8011440:	bf00      	nop
  }

  return ret;
 8011442:	7bfb      	ldrb	r3, [r7, #15]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3710      	adds	r7, #16
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	460b      	mov	r3, r1
 8011456:	607a      	str	r2, [r7, #4]
 8011458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801145e:	7afb      	ldrb	r3, [r7, #11]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d16e      	bne.n	8011542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801146a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011472:	2b03      	cmp	r3, #3
 8011474:	f040 8098 	bne.w	80115a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	689a      	ldr	r2, [r3, #8]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	429a      	cmp	r2, r3
 8011482:	d913      	bls.n	80114ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	689a      	ldr	r2, [r3, #8]
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	1ad2      	subs	r2, r2, r3
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	68da      	ldr	r2, [r3, #12]
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	689b      	ldr	r3, [r3, #8]
 801149a:	4293      	cmp	r3, r2
 801149c:	bf28      	it	cs
 801149e:	4613      	movcs	r3, r2
 80114a0:	461a      	mov	r2, r3
 80114a2:	6879      	ldr	r1, [r7, #4]
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	f001 f9ae 	bl	8012806 <USBD_CtlContinueRx>
 80114aa:	e07d      	b.n	80115a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80114b2:	f003 031f 	and.w	r3, r3, #31
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d014      	beq.n	80114e4 <USBD_LL_DataOutStage+0x98>
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d81d      	bhi.n	80114fa <USBD_LL_DataOutStage+0xae>
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <USBD_LL_DataOutStage+0x7c>
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d003      	beq.n	80114ce <USBD_LL_DataOutStage+0x82>
 80114c6:	e018      	b.n	80114fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80114c8:	2300      	movs	r3, #0
 80114ca:	75bb      	strb	r3, [r7, #22]
            break;
 80114cc:	e018      	b.n	8011500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	4619      	mov	r1, r3
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 fa5e 	bl	801199a <USBD_CoreFindIF>
 80114de:	4603      	mov	r3, r0
 80114e0:	75bb      	strb	r3, [r7, #22]
            break;
 80114e2:	e00d      	b.n	8011500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	4619      	mov	r1, r3
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f000 fa60 	bl	80119b4 <USBD_CoreFindEP>
 80114f4:	4603      	mov	r3, r0
 80114f6:	75bb      	strb	r3, [r7, #22]
            break;
 80114f8:	e002      	b.n	8011500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80114fa:	2300      	movs	r3, #0
 80114fc:	75bb      	strb	r3, [r7, #22]
            break;
 80114fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011500:	7dbb      	ldrb	r3, [r7, #22]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d119      	bne.n	801153a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801150c:	b2db      	uxtb	r3, r3
 801150e:	2b03      	cmp	r3, #3
 8011510:	d113      	bne.n	801153a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011512:	7dba      	ldrb	r2, [r7, #22]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	32ae      	adds	r2, #174	; 0xae
 8011518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00b      	beq.n	801153a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011522:	7dba      	ldrb	r2, [r7, #22]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801152a:	7dba      	ldrb	r2, [r7, #22]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	32ae      	adds	r2, #174	; 0xae
 8011530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f001 f974 	bl	8012828 <USBD_CtlSendStatus>
 8011540:	e032      	b.n	80115a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011542:	7afb      	ldrb	r3, [r7, #11]
 8011544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011548:	b2db      	uxtb	r3, r3
 801154a:	4619      	mov	r1, r3
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f000 fa31 	bl	80119b4 <USBD_CoreFindEP>
 8011552:	4603      	mov	r3, r0
 8011554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011556:	7dbb      	ldrb	r3, [r7, #22]
 8011558:	2bff      	cmp	r3, #255	; 0xff
 801155a:	d025      	beq.n	80115a8 <USBD_LL_DataOutStage+0x15c>
 801155c:	7dbb      	ldrb	r3, [r7, #22]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d122      	bne.n	80115a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011568:	b2db      	uxtb	r3, r3
 801156a:	2b03      	cmp	r3, #3
 801156c:	d117      	bne.n	801159e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801156e:	7dba      	ldrb	r2, [r7, #22]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	32ae      	adds	r2, #174	; 0xae
 8011574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011578:	699b      	ldr	r3, [r3, #24]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00f      	beq.n	801159e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801157e:	7dba      	ldrb	r2, [r7, #22]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011586:	7dba      	ldrb	r2, [r7, #22]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	32ae      	adds	r2, #174	; 0xae
 801158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011590:	699b      	ldr	r3, [r3, #24]
 8011592:	7afa      	ldrb	r2, [r7, #11]
 8011594:	4611      	mov	r1, r2
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	4798      	blx	r3
 801159a:	4603      	mov	r3, r0
 801159c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801159e:	7dfb      	ldrb	r3, [r7, #23]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80115a4:	7dfb      	ldrb	r3, [r7, #23]
 80115a6:	e000      	b.n	80115aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80115a8:	2300      	movs	r3, #0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b086      	sub	sp, #24
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	60f8      	str	r0, [r7, #12]
 80115ba:	460b      	mov	r3, r1
 80115bc:	607a      	str	r2, [r7, #4]
 80115be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80115c0:	7afb      	ldrb	r3, [r7, #11]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d16f      	bne.n	80116a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	3314      	adds	r3, #20
 80115ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80115d2:	2b02      	cmp	r3, #2
 80115d4:	d15a      	bne.n	801168c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	689a      	ldr	r2, [r3, #8]
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d914      	bls.n	801160c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	689a      	ldr	r2, [r3, #8]
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	1ad2      	subs	r2, r2, r3
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	461a      	mov	r2, r3
 80115f6:	6879      	ldr	r1, [r7, #4]
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f001 f8d6 	bl	80127aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115fe:	2300      	movs	r3, #0
 8011600:	2200      	movs	r2, #0
 8011602:	2100      	movs	r1, #0
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f006 fbe3 	bl	8017dd0 <USBD_LL_PrepareReceive>
 801160a:	e03f      	b.n	801168c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	68da      	ldr	r2, [r3, #12]
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	429a      	cmp	r2, r3
 8011616:	d11c      	bne.n	8011652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	685a      	ldr	r2, [r3, #4]
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011620:	429a      	cmp	r2, r3
 8011622:	d316      	bcc.n	8011652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	685a      	ldr	r2, [r3, #4]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801162e:	429a      	cmp	r2, r3
 8011630:	d20f      	bcs.n	8011652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011632:	2200      	movs	r2, #0
 8011634:	2100      	movs	r1, #0
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f001 f8b7 	bl	80127aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2200      	movs	r2, #0
 8011640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011644:	2300      	movs	r3, #0
 8011646:	2200      	movs	r2, #0
 8011648:	2100      	movs	r1, #0
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f006 fbc0 	bl	8017dd0 <USBD_LL_PrepareReceive>
 8011650:	e01c      	b.n	801168c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b03      	cmp	r3, #3
 801165c:	d10f      	bne.n	801167e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d009      	beq.n	801167e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011678:	68db      	ldr	r3, [r3, #12]
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801167e:	2180      	movs	r1, #128	; 0x80
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f006 fafb 	bl	8017c7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f001 f8e1 	bl	801284e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d03a      	beq.n	801170c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7ff fe42 	bl	8011320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2200      	movs	r2, #0
 80116a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80116a4:	e032      	b.n	801170c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80116a6:	7afb      	ldrb	r3, [r7, #11]
 80116a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	4619      	mov	r1, r3
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f000 f97f 	bl	80119b4 <USBD_CoreFindEP>
 80116b6:	4603      	mov	r3, r0
 80116b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	2bff      	cmp	r3, #255	; 0xff
 80116be:	d025      	beq.n	801170c <USBD_LL_DataInStage+0x15a>
 80116c0:	7dfb      	ldrb	r3, [r7, #23]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d122      	bne.n	801170c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	d11c      	bne.n	801170c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80116d2:	7dfa      	ldrb	r2, [r7, #23]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	32ae      	adds	r2, #174	; 0xae
 80116d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d014      	beq.n	801170c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80116e2:	7dfa      	ldrb	r2, [r7, #23]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80116ea:	7dfa      	ldrb	r2, [r7, #23]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	32ae      	adds	r2, #174	; 0xae
 80116f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	7afa      	ldrb	r2, [r7, #11]
 80116f8:	4611      	mov	r1, r2
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	4798      	blx	r3
 80116fe:	4603      	mov	r3, r0
 8011700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011702:	7dbb      	ldrb	r3, [r7, #22]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d001      	beq.n	801170c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011708:	7dbb      	ldrb	r3, [r7, #22]
 801170a:	e000      	b.n	801170e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3718      	adds	r7, #24
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801171e:	2300      	movs	r3, #0
 8011720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2201      	movs	r2, #1
 8011726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2200      	movs	r2, #0
 8011736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801174e:	2b00      	cmp	r3, #0
 8011750:	d014      	beq.n	801177c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00e      	beq.n	801177c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6852      	ldr	r2, [r2, #4]
 801176a:	b2d2      	uxtb	r2, r2
 801176c:	4611      	mov	r1, r2
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	4798      	blx	r3
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011778:	2303      	movs	r3, #3
 801177a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801177c:	2340      	movs	r3, #64	; 0x40
 801177e:	2200      	movs	r2, #0
 8011780:	2100      	movs	r1, #0
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f006 fa35 	bl	8017bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2201      	movs	r2, #1
 801178c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2240      	movs	r2, #64	; 0x40
 8011794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011798:	2340      	movs	r3, #64	; 0x40
 801179a:	2200      	movs	r2, #0
 801179c:	2180      	movs	r1, #128	; 0x80
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f006 fa27 	bl	8017bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2201      	movs	r2, #1
 80117a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2240      	movs	r2, #64	; 0x40
 80117ae:	621a      	str	r2, [r3, #32]

  return ret;
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3710      	adds	r7, #16
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}

080117ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117ba:	b480      	push	{r7}
 80117bc:	b083      	sub	sp, #12
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
 80117c2:	460b      	mov	r3, r1
 80117c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	78fa      	ldrb	r2, [r7, #3]
 80117ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80117cc:	2300      	movs	r3, #0
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	370c      	adds	r7, #12
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80117da:	b480      	push	{r7}
 80117dc:	b083      	sub	sp, #12
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117e8:	b2da      	uxtb	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2204      	movs	r2, #4
 80117f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	370c      	adds	r7, #12
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011806:	b480      	push	{r7}
 8011808:	b083      	sub	sp, #12
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b04      	cmp	r3, #4
 8011818:	d106      	bne.n	8011828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011820:	b2da      	uxtb	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b082      	sub	sp, #8
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b03      	cmp	r3, #3
 8011848:	d110      	bne.n	801186c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00b      	beq.n	801186c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801185a:	69db      	ldr	r3, [r3, #28]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d005      	beq.n	801186c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011866:	69db      	ldr	r3, [r3, #28]
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b082      	sub	sp, #8
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
 801187e:	460b      	mov	r3, r1
 8011880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	32ae      	adds	r2, #174	; 0xae
 801188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d101      	bne.n	8011898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011894:	2303      	movs	r3, #3
 8011896:	e01c      	b.n	80118d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b03      	cmp	r3, #3
 80118a2:	d115      	bne.n	80118d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	32ae      	adds	r2, #174	; 0xae
 80118ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b2:	6a1b      	ldr	r3, [r3, #32]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00b      	beq.n	80118d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	32ae      	adds	r2, #174	; 0xae
 80118c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c6:	6a1b      	ldr	r3, [r3, #32]
 80118c8:	78fa      	ldrb	r2, [r7, #3]
 80118ca:	4611      	mov	r1, r2
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3708      	adds	r7, #8
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b082      	sub	sp, #8
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
 80118e2:	460b      	mov	r3, r1
 80118e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	32ae      	adds	r2, #174	; 0xae
 80118f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d101      	bne.n	80118fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80118f8:	2303      	movs	r3, #3
 80118fa:	e01c      	b.n	8011936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b03      	cmp	r3, #3
 8011906:	d115      	bne.n	8011934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	32ae      	adds	r2, #174	; 0xae
 8011912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00b      	beq.n	8011934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	32ae      	adds	r2, #174	; 0xae
 8011926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192c:	78fa      	ldrb	r2, [r7, #3]
 801192e:	4611      	mov	r1, r2
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}

0801193e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801193e:	b480      	push	{r7}
 8011940:	b083      	sub	sp, #12
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801195c:	2300      	movs	r3, #0
 801195e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2201      	movs	r2, #1
 8011964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00e      	beq.n	8011990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	6852      	ldr	r2, [r2, #4]
 801197e:	b2d2      	uxtb	r2, r2
 8011980:	4611      	mov	r1, r2
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	4798      	blx	r3
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801198c:	2303      	movs	r3, #3
 801198e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011990:	7bfb      	ldrb	r3, [r7, #15]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801199a:	b480      	push	{r7}
 801199c:	b083      	sub	sp, #12
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	460b      	mov	r3, r1
 80119a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80119a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	370c      	adds	r7, #12
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	460b      	mov	r3, r1
 80119be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80119c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	370c      	adds	r7, #12
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b086      	sub	sp, #24
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	460b      	mov	r3, r1
 80119d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	885b      	ldrh	r3, [r3, #2]
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d920      	bls.n	8011a38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80119fe:	e013      	b.n	8011a28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011a00:	f107 030a 	add.w	r3, r7, #10
 8011a04:	4619      	mov	r1, r3
 8011a06:	6978      	ldr	r0, [r7, #20]
 8011a08:	f000 f81b 	bl	8011a42 <USBD_GetNextDesc>
 8011a0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	785b      	ldrb	r3, [r3, #1]
 8011a12:	2b05      	cmp	r3, #5
 8011a14:	d108      	bne.n	8011a28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	789b      	ldrb	r3, [r3, #2]
 8011a1e:	78fa      	ldrb	r2, [r7, #3]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d008      	beq.n	8011a36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011a24:	2300      	movs	r3, #0
 8011a26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	885b      	ldrh	r3, [r3, #2]
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	897b      	ldrh	r3, [r7, #10]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d8e5      	bhi.n	8011a00 <USBD_GetEpDesc+0x32>
 8011a34:	e000      	b.n	8011a38 <USBD_GetEpDesc+0x6a>
          break;
 8011a36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011a38:	693b      	ldr	r3, [r7, #16]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3718      	adds	r7, #24
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b085      	sub	sp, #20
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	881a      	ldrh	r2, [r3, #0]
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	4413      	add	r3, r2
 8011a5c:	b29a      	uxth	r2, r3
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	461a      	mov	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3714      	adds	r7, #20
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b087      	sub	sp, #28
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	3301      	adds	r3, #1
 8011a92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011a9a:	8a3b      	ldrh	r3, [r7, #16]
 8011a9c:	021b      	lsls	r3, r3, #8
 8011a9e:	b21a      	sxth	r2, r3
 8011aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	b21b      	sxth	r3, r3
 8011aa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011aaa:	89fb      	ldrh	r3, [r7, #14]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	371c      	adds	r7, #28
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ace:	2b40      	cmp	r3, #64	; 0x40
 8011ad0:	d005      	beq.n	8011ade <USBD_StdDevReq+0x26>
 8011ad2:	2b40      	cmp	r3, #64	; 0x40
 8011ad4:	d857      	bhi.n	8011b86 <USBD_StdDevReq+0xce>
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00f      	beq.n	8011afa <USBD_StdDevReq+0x42>
 8011ada:	2b20      	cmp	r3, #32
 8011adc:	d153      	bne.n	8011b86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	32ae      	adds	r2, #174	; 0xae
 8011ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	6839      	ldr	r1, [r7, #0]
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	4798      	blx	r3
 8011af4:	4603      	mov	r3, r0
 8011af6:	73fb      	strb	r3, [r7, #15]
      break;
 8011af8:	e04a      	b.n	8011b90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	785b      	ldrb	r3, [r3, #1]
 8011afe:	2b09      	cmp	r3, #9
 8011b00:	d83b      	bhi.n	8011b7a <USBD_StdDevReq+0xc2>
 8011b02:	a201      	add	r2, pc, #4	; (adr r2, 8011b08 <USBD_StdDevReq+0x50>)
 8011b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b08:	08011b5d 	.word	0x08011b5d
 8011b0c:	08011b71 	.word	0x08011b71
 8011b10:	08011b7b 	.word	0x08011b7b
 8011b14:	08011b67 	.word	0x08011b67
 8011b18:	08011b7b 	.word	0x08011b7b
 8011b1c:	08011b3b 	.word	0x08011b3b
 8011b20:	08011b31 	.word	0x08011b31
 8011b24:	08011b7b 	.word	0x08011b7b
 8011b28:	08011b53 	.word	0x08011b53
 8011b2c:	08011b45 	.word	0x08011b45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fa3c 	bl	8011fb0 <USBD_GetDescriptor>
          break;
 8011b38:	e024      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011b3a:	6839      	ldr	r1, [r7, #0]
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 fbcb 	bl	80122d8 <USBD_SetAddress>
          break;
 8011b42:	e01f      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011b44:	6839      	ldr	r1, [r7, #0]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 fc0a 	bl	8012360 <USBD_SetConfig>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8011b50:	e018      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011b52:	6839      	ldr	r1, [r7, #0]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 fcad 	bl	80124b4 <USBD_GetConfig>
          break;
 8011b5a:	e013      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011b5c:	6839      	ldr	r1, [r7, #0]
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f000 fcde 	bl	8012520 <USBD_GetStatus>
          break;
 8011b64:	e00e      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011b66:	6839      	ldr	r1, [r7, #0]
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 fd0d 	bl	8012588 <USBD_SetFeature>
          break;
 8011b6e:	e009      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011b70:	6839      	ldr	r1, [r7, #0]
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 fd31 	bl	80125da <USBD_ClrFeature>
          break;
 8011b78:	e004      	b.n	8011b84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011b7a:	6839      	ldr	r1, [r7, #0]
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 fd88 	bl	8012692 <USBD_CtlError>
          break;
 8011b82:	bf00      	nop
      }
      break;
 8011b84:	e004      	b.n	8011b90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011b86:	6839      	ldr	r1, [r7, #0]
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f000 fd82 	bl	8012692 <USBD_CtlError>
      break;
 8011b8e:	bf00      	nop
  }

  return ret;
 8011b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop

08011b9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bb2:	2b40      	cmp	r3, #64	; 0x40
 8011bb4:	d005      	beq.n	8011bc2 <USBD_StdItfReq+0x26>
 8011bb6:	2b40      	cmp	r3, #64	; 0x40
 8011bb8:	d852      	bhi.n	8011c60 <USBD_StdItfReq+0xc4>
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <USBD_StdItfReq+0x26>
 8011bbe:	2b20      	cmp	r3, #32
 8011bc0:	d14e      	bne.n	8011c60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	2b02      	cmp	r3, #2
 8011bce:	d840      	bhi.n	8011c52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	889b      	ldrh	r3, [r3, #4]
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d836      	bhi.n	8011c48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	889b      	ldrh	r3, [r3, #4]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	4619      	mov	r1, r3
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f7ff fed9 	bl	801199a <USBD_CoreFindIF>
 8011be8:	4603      	mov	r3, r0
 8011bea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011bec:	7bbb      	ldrb	r3, [r7, #14]
 8011bee:	2bff      	cmp	r3, #255	; 0xff
 8011bf0:	d01d      	beq.n	8011c2e <USBD_StdItfReq+0x92>
 8011bf2:	7bbb      	ldrb	r3, [r7, #14]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d11a      	bne.n	8011c2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011bf8:	7bba      	ldrb	r2, [r7, #14]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	32ae      	adds	r2, #174	; 0xae
 8011bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00f      	beq.n	8011c28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011c08:	7bba      	ldrb	r2, [r7, #14]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011c10:	7bba      	ldrb	r2, [r7, #14]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	32ae      	adds	r2, #174	; 0xae
 8011c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	4798      	blx	r3
 8011c22:	4603      	mov	r3, r0
 8011c24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c26:	e004      	b.n	8011c32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011c28:	2303      	movs	r3, #3
 8011c2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c2c:	e001      	b.n	8011c32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011c2e:	2303      	movs	r3, #3
 8011c30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	88db      	ldrh	r3, [r3, #6]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d110      	bne.n	8011c5c <USBD_StdItfReq+0xc0>
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d10d      	bne.n	8011c5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fdf1 	bl	8012828 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011c46:	e009      	b.n	8011c5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fd21 	bl	8012692 <USBD_CtlError>
          break;
 8011c50:	e004      	b.n	8011c5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011c52:	6839      	ldr	r1, [r7, #0]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fd1c 	bl	8012692 <USBD_CtlError>
          break;
 8011c5a:	e000      	b.n	8011c5e <USBD_StdItfReq+0xc2>
          break;
 8011c5c:	bf00      	nop
      }
      break;
 8011c5e:	e004      	b.n	8011c6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011c60:	6839      	ldr	r1, [r7, #0]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 fd15 	bl	8012692 <USBD_CtlError>
      break;
 8011c68:	bf00      	nop
  }

  return ret;
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	889b      	ldrh	r3, [r3, #4]
 8011c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c90:	2b40      	cmp	r3, #64	; 0x40
 8011c92:	d007      	beq.n	8011ca4 <USBD_StdEPReq+0x30>
 8011c94:	2b40      	cmp	r3, #64	; 0x40
 8011c96:	f200 817f 	bhi.w	8011f98 <USBD_StdEPReq+0x324>
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d02a      	beq.n	8011cf4 <USBD_StdEPReq+0x80>
 8011c9e:	2b20      	cmp	r3, #32
 8011ca0:	f040 817a 	bne.w	8011f98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011ca4:	7bbb      	ldrb	r3, [r7, #14]
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f7ff fe83 	bl	80119b4 <USBD_CoreFindEP>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cb2:	7b7b      	ldrb	r3, [r7, #13]
 8011cb4:	2bff      	cmp	r3, #255	; 0xff
 8011cb6:	f000 8174 	beq.w	8011fa2 <USBD_StdEPReq+0x32e>
 8011cba:	7b7b      	ldrb	r3, [r7, #13]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f040 8170 	bne.w	8011fa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011cc2:	7b7a      	ldrb	r2, [r7, #13]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011cca:	7b7a      	ldrb	r2, [r7, #13]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	32ae      	adds	r2, #174	; 0xae
 8011cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f000 8163 	beq.w	8011fa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011cdc:	7b7a      	ldrb	r2, [r7, #13]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	32ae      	adds	r2, #174	; 0xae
 8011ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	6839      	ldr	r1, [r7, #0]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	4798      	blx	r3
 8011cee:	4603      	mov	r3, r0
 8011cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011cf2:	e156      	b.n	8011fa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	785b      	ldrb	r3, [r3, #1]
 8011cf8:	2b03      	cmp	r3, #3
 8011cfa:	d008      	beq.n	8011d0e <USBD_StdEPReq+0x9a>
 8011cfc:	2b03      	cmp	r3, #3
 8011cfe:	f300 8145 	bgt.w	8011f8c <USBD_StdEPReq+0x318>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 809b 	beq.w	8011e3e <USBD_StdEPReq+0x1ca>
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d03c      	beq.n	8011d86 <USBD_StdEPReq+0x112>
 8011d0c:	e13e      	b.n	8011f8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	d002      	beq.n	8011d20 <USBD_StdEPReq+0xac>
 8011d1a:	2b03      	cmp	r3, #3
 8011d1c:	d016      	beq.n	8011d4c <USBD_StdEPReq+0xd8>
 8011d1e:	e02c      	b.n	8011d7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d20:	7bbb      	ldrb	r3, [r7, #14]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00d      	beq.n	8011d42 <USBD_StdEPReq+0xce>
 8011d26:	7bbb      	ldrb	r3, [r7, #14]
 8011d28:	2b80      	cmp	r3, #128	; 0x80
 8011d2a:	d00a      	beq.n	8011d42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d2c:	7bbb      	ldrb	r3, [r7, #14]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f005 ffa3 	bl	8017c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d36:	2180      	movs	r1, #128	; 0x80
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f005 ff9f 	bl	8017c7c <USBD_LL_StallEP>
 8011d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011d40:	e020      	b.n	8011d84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011d42:	6839      	ldr	r1, [r7, #0]
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 fca4 	bl	8012692 <USBD_CtlError>
              break;
 8011d4a:	e01b      	b.n	8011d84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	885b      	ldrh	r3, [r3, #2]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d10e      	bne.n	8011d72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011d54:	7bbb      	ldrb	r3, [r7, #14]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00b      	beq.n	8011d72 <USBD_StdEPReq+0xfe>
 8011d5a:	7bbb      	ldrb	r3, [r7, #14]
 8011d5c:	2b80      	cmp	r3, #128	; 0x80
 8011d5e:	d008      	beq.n	8011d72 <USBD_StdEPReq+0xfe>
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	88db      	ldrh	r3, [r3, #6]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d104      	bne.n	8011d72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d68:	7bbb      	ldrb	r3, [r7, #14]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f005 ff85 	bl	8017c7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 fd58 	bl	8012828 <USBD_CtlSendStatus>

              break;
 8011d78:	e004      	b.n	8011d84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011d7a:	6839      	ldr	r1, [r7, #0]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 fc88 	bl	8012692 <USBD_CtlError>
              break;
 8011d82:	bf00      	nop
          }
          break;
 8011d84:	e107      	b.n	8011f96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d002      	beq.n	8011d98 <USBD_StdEPReq+0x124>
 8011d92:	2b03      	cmp	r3, #3
 8011d94:	d016      	beq.n	8011dc4 <USBD_StdEPReq+0x150>
 8011d96:	e04b      	b.n	8011e30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d98:	7bbb      	ldrb	r3, [r7, #14]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00d      	beq.n	8011dba <USBD_StdEPReq+0x146>
 8011d9e:	7bbb      	ldrb	r3, [r7, #14]
 8011da0:	2b80      	cmp	r3, #128	; 0x80
 8011da2:	d00a      	beq.n	8011dba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011da4:	7bbb      	ldrb	r3, [r7, #14]
 8011da6:	4619      	mov	r1, r3
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f005 ff67 	bl	8017c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dae:	2180      	movs	r1, #128	; 0x80
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f005 ff63 	bl	8017c7c <USBD_LL_StallEP>
 8011db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011db8:	e040      	b.n	8011e3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011dba:	6839      	ldr	r1, [r7, #0]
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f000 fc68 	bl	8012692 <USBD_CtlError>
              break;
 8011dc2:	e03b      	b.n	8011e3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	885b      	ldrh	r3, [r3, #2]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d136      	bne.n	8011e3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011dcc:	7bbb      	ldrb	r3, [r7, #14]
 8011dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d004      	beq.n	8011de0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011dd6:	7bbb      	ldrb	r3, [r7, #14]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f005 ff6d 	bl	8017cba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fd21 	bl	8012828 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011de6:	7bbb      	ldrb	r3, [r7, #14]
 8011de8:	4619      	mov	r1, r3
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fde2 	bl	80119b4 <USBD_CoreFindEP>
 8011df0:	4603      	mov	r3, r0
 8011df2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011df4:	7b7b      	ldrb	r3, [r7, #13]
 8011df6:	2bff      	cmp	r3, #255	; 0xff
 8011df8:	d01f      	beq.n	8011e3a <USBD_StdEPReq+0x1c6>
 8011dfa:	7b7b      	ldrb	r3, [r7, #13]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d11c      	bne.n	8011e3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011e00:	7b7a      	ldrb	r2, [r7, #13]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011e08:	7b7a      	ldrb	r2, [r7, #13]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	32ae      	adds	r2, #174	; 0xae
 8011e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d010      	beq.n	8011e3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011e18:	7b7a      	ldrb	r2, [r7, #13]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	32ae      	adds	r2, #174	; 0xae
 8011e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	4798      	blx	r3
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011e2e:	e004      	b.n	8011e3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011e30:	6839      	ldr	r1, [r7, #0]
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fc2d 	bl	8012692 <USBD_CtlError>
              break;
 8011e38:	e000      	b.n	8011e3c <USBD_StdEPReq+0x1c8>
              break;
 8011e3a:	bf00      	nop
          }
          break;
 8011e3c:	e0ab      	b.n	8011f96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b02      	cmp	r3, #2
 8011e48:	d002      	beq.n	8011e50 <USBD_StdEPReq+0x1dc>
 8011e4a:	2b03      	cmp	r3, #3
 8011e4c:	d032      	beq.n	8011eb4 <USBD_StdEPReq+0x240>
 8011e4e:	e097      	b.n	8011f80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d007      	beq.n	8011e66 <USBD_StdEPReq+0x1f2>
 8011e56:	7bbb      	ldrb	r3, [r7, #14]
 8011e58:	2b80      	cmp	r3, #128	; 0x80
 8011e5a:	d004      	beq.n	8011e66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fc17 	bl	8012692 <USBD_CtlError>
                break;
 8011e64:	e091      	b.n	8011f8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	da0b      	bge.n	8011e86 <USBD_StdEPReq+0x212>
 8011e6e:	7bbb      	ldrb	r3, [r7, #14]
 8011e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e74:	4613      	mov	r3, r2
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	4413      	add	r3, r2
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	3310      	adds	r3, #16
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	4413      	add	r3, r2
 8011e82:	3304      	adds	r3, #4
 8011e84:	e00b      	b.n	8011e9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011e86:	7bbb      	ldrb	r3, [r7, #14]
 8011e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	4413      	add	r3, r2
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	4619      	mov	r1, r3
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fc61 	bl	8012774 <USBD_CtlSendData>
              break;
 8011eb2:	e06a      	b.n	8011f8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	da11      	bge.n	8011ee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ebc:	7bbb      	ldrb	r3, [r7, #14]
 8011ebe:	f003 020f 	and.w	r2, r3, #15
 8011ec2:	6879      	ldr	r1, [r7, #4]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	4413      	add	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	440b      	add	r3, r1
 8011ece:	3324      	adds	r3, #36	; 0x24
 8011ed0:	881b      	ldrh	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d117      	bne.n	8011f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fbda 	bl	8012692 <USBD_CtlError>
                  break;
 8011ede:	e054      	b.n	8011f8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ee0:	7bbb      	ldrb	r3, [r7, #14]
 8011ee2:	f003 020f 	and.w	r2, r3, #15
 8011ee6:	6879      	ldr	r1, [r7, #4]
 8011ee8:	4613      	mov	r3, r2
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	440b      	add	r3, r1
 8011ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d104      	bne.n	8011f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 fbc7 	bl	8012692 <USBD_CtlError>
                  break;
 8011f04:	e041      	b.n	8011f8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	da0b      	bge.n	8011f26 <USBD_StdEPReq+0x2b2>
 8011f0e:	7bbb      	ldrb	r3, [r7, #14]
 8011f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f14:	4613      	mov	r3, r2
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	4413      	add	r3, r2
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	3310      	adds	r3, #16
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	4413      	add	r3, r2
 8011f22:	3304      	adds	r3, #4
 8011f24:	e00b      	b.n	8011f3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011f26:	7bbb      	ldrb	r3, [r7, #14]
 8011f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	4413      	add	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f40:	7bbb      	ldrb	r3, [r7, #14]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <USBD_StdEPReq+0x2d8>
 8011f46:	7bbb      	ldrb	r3, [r7, #14]
 8011f48:	2b80      	cmp	r3, #128	; 0x80
 8011f4a:	d103      	bne.n	8011f54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	601a      	str	r2, [r3, #0]
 8011f52:	e00e      	b.n	8011f72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011f54:	7bbb      	ldrb	r3, [r7, #14]
 8011f56:	4619      	mov	r1, r3
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f005 fecd 	bl	8017cf8 <USBD_LL_IsStallEP>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d003      	beq.n	8011f6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2201      	movs	r2, #1
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	e002      	b.n	8011f72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2202      	movs	r2, #2
 8011f76:	4619      	mov	r1, r3
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 fbfb 	bl	8012774 <USBD_CtlSendData>
              break;
 8011f7e:	e004      	b.n	8011f8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 fb85 	bl	8012692 <USBD_CtlError>
              break;
 8011f88:	bf00      	nop
          }
          break;
 8011f8a:	e004      	b.n	8011f96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 fb7f 	bl	8012692 <USBD_CtlError>
          break;
 8011f94:	bf00      	nop
      }
      break;
 8011f96:	e005      	b.n	8011fa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011f98:	6839      	ldr	r1, [r7, #0]
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fb79 	bl	8012692 <USBD_CtlError>
      break;
 8011fa0:	e000      	b.n	8011fa4 <USBD_StdEPReq+0x330>
      break;
 8011fa2:	bf00      	nop
  }

  return ret;
 8011fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
	...

08011fb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	885b      	ldrh	r3, [r3, #2]
 8011fca:	0a1b      	lsrs	r3, r3, #8
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	2b0e      	cmp	r3, #14
 8011fd2:	f200 8152 	bhi.w	801227a <USBD_GetDescriptor+0x2ca>
 8011fd6:	a201      	add	r2, pc, #4	; (adr r2, 8011fdc <USBD_GetDescriptor+0x2c>)
 8011fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fdc:	0801204d 	.word	0x0801204d
 8011fe0:	08012065 	.word	0x08012065
 8011fe4:	080120a5 	.word	0x080120a5
 8011fe8:	0801227b 	.word	0x0801227b
 8011fec:	0801227b 	.word	0x0801227b
 8011ff0:	0801221b 	.word	0x0801221b
 8011ff4:	08012247 	.word	0x08012247
 8011ff8:	0801227b 	.word	0x0801227b
 8011ffc:	0801227b 	.word	0x0801227b
 8012000:	0801227b 	.word	0x0801227b
 8012004:	0801227b 	.word	0x0801227b
 8012008:	0801227b 	.word	0x0801227b
 801200c:	0801227b 	.word	0x0801227b
 8012010:	0801227b 	.word	0x0801227b
 8012014:	08012019 	.word	0x08012019
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801201e:	69db      	ldr	r3, [r3, #28]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00b      	beq.n	801203c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	7c12      	ldrb	r2, [r2, #16]
 8012030:	f107 0108 	add.w	r1, r7, #8
 8012034:	4610      	mov	r0, r2
 8012036:	4798      	blx	r3
 8012038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801203a:	e126      	b.n	801228a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801203c:	6839      	ldr	r1, [r7, #0]
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 fb27 	bl	8012692 <USBD_CtlError>
        err++;
 8012044:	7afb      	ldrb	r3, [r7, #11]
 8012046:	3301      	adds	r3, #1
 8012048:	72fb      	strb	r3, [r7, #11]
      break;
 801204a:	e11e      	b.n	801228a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	7c12      	ldrb	r2, [r2, #16]
 8012058:	f107 0108 	add.w	r1, r7, #8
 801205c:	4610      	mov	r0, r2
 801205e:	4798      	blx	r3
 8012060:	60f8      	str	r0, [r7, #12]
      break;
 8012062:	e112      	b.n	801228a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7c1b      	ldrb	r3, [r3, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10d      	bne.n	8012088 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012074:	f107 0208 	add.w	r2, r7, #8
 8012078:	4610      	mov	r0, r2
 801207a:	4798      	blx	r3
 801207c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	3301      	adds	r3, #1
 8012082:	2202      	movs	r2, #2
 8012084:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012086:	e100      	b.n	801228a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012090:	f107 0208 	add.w	r2, r7, #8
 8012094:	4610      	mov	r0, r2
 8012096:	4798      	blx	r3
 8012098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	3301      	adds	r3, #1
 801209e:	2202      	movs	r2, #2
 80120a0:	701a      	strb	r2, [r3, #0]
      break;
 80120a2:	e0f2      	b.n	801228a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	885b      	ldrh	r3, [r3, #2]
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b05      	cmp	r3, #5
 80120ac:	f200 80ac 	bhi.w	8012208 <USBD_GetDescriptor+0x258>
 80120b0:	a201      	add	r2, pc, #4	; (adr r2, 80120b8 <USBD_GetDescriptor+0x108>)
 80120b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b6:	bf00      	nop
 80120b8:	080120d1 	.word	0x080120d1
 80120bc:	08012105 	.word	0x08012105
 80120c0:	08012139 	.word	0x08012139
 80120c4:	0801216d 	.word	0x0801216d
 80120c8:	080121a1 	.word	0x080121a1
 80120cc:	080121d5 	.word	0x080121d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00b      	beq.n	80120f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	7c12      	ldrb	r2, [r2, #16]
 80120e8:	f107 0108 	add.w	r1, r7, #8
 80120ec:	4610      	mov	r0, r2
 80120ee:	4798      	blx	r3
 80120f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120f2:	e091      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 facb 	bl	8012692 <USBD_CtlError>
            err++;
 80120fc:	7afb      	ldrb	r3, [r7, #11]
 80120fe:	3301      	adds	r3, #1
 8012100:	72fb      	strb	r3, [r7, #11]
          break;
 8012102:	e089      	b.n	8012218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00b      	beq.n	8012128 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	7c12      	ldrb	r2, [r2, #16]
 801211c:	f107 0108 	add.w	r1, r7, #8
 8012120:	4610      	mov	r0, r2
 8012122:	4798      	blx	r3
 8012124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012126:	e077      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012128:	6839      	ldr	r1, [r7, #0]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fab1 	bl	8012692 <USBD_CtlError>
            err++;
 8012130:	7afb      	ldrb	r3, [r7, #11]
 8012132:	3301      	adds	r3, #1
 8012134:	72fb      	strb	r3, [r7, #11]
          break;
 8012136:	e06f      	b.n	8012218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00b      	beq.n	801215c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	7c12      	ldrb	r2, [r2, #16]
 8012150:	f107 0108 	add.w	r1, r7, #8
 8012154:	4610      	mov	r0, r2
 8012156:	4798      	blx	r3
 8012158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801215a:	e05d      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 fa97 	bl	8012692 <USBD_CtlError>
            err++;
 8012164:	7afb      	ldrb	r3, [r7, #11]
 8012166:	3301      	adds	r3, #1
 8012168:	72fb      	strb	r3, [r7, #11]
          break;
 801216a:	e055      	b.n	8012218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012172:	691b      	ldr	r3, [r3, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00b      	beq.n	8012190 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	7c12      	ldrb	r2, [r2, #16]
 8012184:	f107 0108 	add.w	r1, r7, #8
 8012188:	4610      	mov	r0, r2
 801218a:	4798      	blx	r3
 801218c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801218e:	e043      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012190:	6839      	ldr	r1, [r7, #0]
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 fa7d 	bl	8012692 <USBD_CtlError>
            err++;
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	3301      	adds	r3, #1
 801219c:	72fb      	strb	r3, [r7, #11]
          break;
 801219e:	e03b      	b.n	8012218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121a6:	695b      	ldr	r3, [r3, #20]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00b      	beq.n	80121c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b2:	695b      	ldr	r3, [r3, #20]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	7c12      	ldrb	r2, [r2, #16]
 80121b8:	f107 0108 	add.w	r1, r7, #8
 80121bc:	4610      	mov	r0, r2
 80121be:	4798      	blx	r3
 80121c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121c2:	e029      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121c4:	6839      	ldr	r1, [r7, #0]
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fa63 	bl	8012692 <USBD_CtlError>
            err++;
 80121cc:	7afb      	ldrb	r3, [r7, #11]
 80121ce:	3301      	adds	r3, #1
 80121d0:	72fb      	strb	r3, [r7, #11]
          break;
 80121d2:	e021      	b.n	8012218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121da:	699b      	ldr	r3, [r3, #24]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00b      	beq.n	80121f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e6:	699b      	ldr	r3, [r3, #24]
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	7c12      	ldrb	r2, [r2, #16]
 80121ec:	f107 0108 	add.w	r1, r7, #8
 80121f0:	4610      	mov	r0, r2
 80121f2:	4798      	blx	r3
 80121f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121f6:	e00f      	b.n	8012218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fa49 	bl	8012692 <USBD_CtlError>
            err++;
 8012200:	7afb      	ldrb	r3, [r7, #11]
 8012202:	3301      	adds	r3, #1
 8012204:	72fb      	strb	r3, [r7, #11]
          break;
 8012206:	e007      	b.n	8012218 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012208:	6839      	ldr	r1, [r7, #0]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 fa41 	bl	8012692 <USBD_CtlError>
          err++;
 8012210:	7afb      	ldrb	r3, [r7, #11]
 8012212:	3301      	adds	r3, #1
 8012214:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012216:	bf00      	nop
      }
      break;
 8012218:	e037      	b.n	801228a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	7c1b      	ldrb	r3, [r3, #16]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d109      	bne.n	8012236 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801222a:	f107 0208 	add.w	r2, r7, #8
 801222e:	4610      	mov	r0, r2
 8012230:	4798      	blx	r3
 8012232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012234:	e029      	b.n	801228a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012236:	6839      	ldr	r1, [r7, #0]
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fa2a 	bl	8012692 <USBD_CtlError>
        err++;
 801223e:	7afb      	ldrb	r3, [r7, #11]
 8012240:	3301      	adds	r3, #1
 8012242:	72fb      	strb	r3, [r7, #11]
      break;
 8012244:	e021      	b.n	801228a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	7c1b      	ldrb	r3, [r3, #16]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d10d      	bne.n	801226a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012256:	f107 0208 	add.w	r2, r7, #8
 801225a:	4610      	mov	r0, r2
 801225c:	4798      	blx	r3
 801225e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	3301      	adds	r3, #1
 8012264:	2207      	movs	r2, #7
 8012266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012268:	e00f      	b.n	801228a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fa10 	bl	8012692 <USBD_CtlError>
        err++;
 8012272:	7afb      	ldrb	r3, [r7, #11]
 8012274:	3301      	adds	r3, #1
 8012276:	72fb      	strb	r3, [r7, #11]
      break;
 8012278:	e007      	b.n	801228a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801227a:	6839      	ldr	r1, [r7, #0]
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fa08 	bl	8012692 <USBD_CtlError>
      err++;
 8012282:	7afb      	ldrb	r3, [r7, #11]
 8012284:	3301      	adds	r3, #1
 8012286:	72fb      	strb	r3, [r7, #11]
      break;
 8012288:	bf00      	nop
  }

  if (err != 0U)
 801228a:	7afb      	ldrb	r3, [r7, #11]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d11e      	bne.n	80122ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	88db      	ldrh	r3, [r3, #6]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d016      	beq.n	80122c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012298:	893b      	ldrh	r3, [r7, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00e      	beq.n	80122bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	88da      	ldrh	r2, [r3, #6]
 80122a2:	893b      	ldrh	r3, [r7, #8]
 80122a4:	4293      	cmp	r3, r2
 80122a6:	bf28      	it	cs
 80122a8:	4613      	movcs	r3, r2
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80122ae:	893b      	ldrh	r3, [r7, #8]
 80122b0:	461a      	mov	r2, r3
 80122b2:	68f9      	ldr	r1, [r7, #12]
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 fa5d 	bl	8012774 <USBD_CtlSendData>
 80122ba:	e009      	b.n	80122d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f9e7 	bl	8012692 <USBD_CtlError>
 80122c4:	e004      	b.n	80122d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 faae 	bl	8012828 <USBD_CtlSendStatus>
 80122cc:	e000      	b.n	80122d0 <USBD_GetDescriptor+0x320>
    return;
 80122ce:	bf00      	nop
  }
}
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop

080122d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
 80122e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	889b      	ldrh	r3, [r3, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d131      	bne.n	801234e <USBD_SetAddress+0x76>
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	88db      	ldrh	r3, [r3, #6]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d12d      	bne.n	801234e <USBD_SetAddress+0x76>
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	885b      	ldrh	r3, [r3, #2]
 80122f6:	2b7f      	cmp	r3, #127	; 0x7f
 80122f8:	d829      	bhi.n	801234e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	885b      	ldrh	r3, [r3, #2]
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b03      	cmp	r3, #3
 8012310:	d104      	bne.n	801231c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f9bc 	bl	8012692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801231a:	e01d      	b.n	8012358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	7bfa      	ldrb	r2, [r7, #15]
 8012320:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	4619      	mov	r1, r3
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f005 fd11 	bl	8017d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 fa7a 	bl	8012828 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012334:	7bfb      	ldrb	r3, [r7, #15]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d004      	beq.n	8012344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2202      	movs	r2, #2
 801233e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012342:	e009      	b.n	8012358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2201      	movs	r2, #1
 8012348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801234c:	e004      	b.n	8012358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801234e:	6839      	ldr	r1, [r7, #0]
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 f99e 	bl	8012692 <USBD_CtlError>
  }
}
 8012356:	bf00      	nop
 8012358:	bf00      	nop
 801235a:	3710      	adds	r7, #16
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801236a:	2300      	movs	r3, #0
 801236c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	885b      	ldrh	r3, [r3, #2]
 8012372:	b2da      	uxtb	r2, r3
 8012374:	4b4e      	ldr	r3, [pc, #312]	; (80124b0 <USBD_SetConfig+0x150>)
 8012376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012378:	4b4d      	ldr	r3, [pc, #308]	; (80124b0 <USBD_SetConfig+0x150>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d905      	bls.n	801238c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 f985 	bl	8012692 <USBD_CtlError>
    return USBD_FAIL;
 8012388:	2303      	movs	r3, #3
 801238a:	e08c      	b.n	80124a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b02      	cmp	r3, #2
 8012396:	d002      	beq.n	801239e <USBD_SetConfig+0x3e>
 8012398:	2b03      	cmp	r3, #3
 801239a:	d029      	beq.n	80123f0 <USBD_SetConfig+0x90>
 801239c:	e075      	b.n	801248a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801239e:	4b44      	ldr	r3, [pc, #272]	; (80124b0 <USBD_SetConfig+0x150>)
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d020      	beq.n	80123e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80123a6:	4b42      	ldr	r3, [pc, #264]	; (80124b0 <USBD_SetConfig+0x150>)
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	461a      	mov	r2, r3
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80123b0:	4b3f      	ldr	r3, [pc, #252]	; (80124b0 <USBD_SetConfig+0x150>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7fe ffbd 	bl	8011336 <USBD_SetClassConfig>
 80123bc:	4603      	mov	r3, r0
 80123be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d008      	beq.n	80123d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 f962 	bl	8012692 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2202      	movs	r2, #2
 80123d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80123d6:	e065      	b.n	80124a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 fa25 	bl	8012828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2203      	movs	r2, #3
 80123e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80123e6:	e05d      	b.n	80124a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 fa1d 	bl	8012828 <USBD_CtlSendStatus>
      break;
 80123ee:	e059      	b.n	80124a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80123f0:	4b2f      	ldr	r3, [pc, #188]	; (80124b0 <USBD_SetConfig+0x150>)
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d112      	bne.n	801241e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2202      	movs	r2, #2
 80123fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012400:	4b2b      	ldr	r3, [pc, #172]	; (80124b0 <USBD_SetConfig+0x150>)
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	461a      	mov	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801240a:	4b29      	ldr	r3, [pc, #164]	; (80124b0 <USBD_SetConfig+0x150>)
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	4619      	mov	r1, r3
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7fe ffac 	bl	801136e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fa06 	bl	8012828 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801241c:	e042      	b.n	80124a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801241e:	4b24      	ldr	r3, [pc, #144]	; (80124b0 <USBD_SetConfig+0x150>)
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	429a      	cmp	r2, r3
 801242a:	d02a      	beq.n	8012482 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	b2db      	uxtb	r3, r3
 8012432:	4619      	mov	r1, r3
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7fe ff9a 	bl	801136e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801243a:	4b1d      	ldr	r3, [pc, #116]	; (80124b0 <USBD_SetConfig+0x150>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	461a      	mov	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012444:	4b1a      	ldr	r3, [pc, #104]	; (80124b0 <USBD_SetConfig+0x150>)
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	4619      	mov	r1, r3
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7fe ff73 	bl	8011336 <USBD_SetClassConfig>
 8012450:	4603      	mov	r3, r0
 8012452:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012454:	7bfb      	ldrb	r3, [r7, #15]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00f      	beq.n	801247a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801245a:	6839      	ldr	r1, [r7, #0]
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f918 	bl	8012692 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	b2db      	uxtb	r3, r3
 8012468:	4619      	mov	r1, r3
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7fe ff7f 	bl	801136e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2202      	movs	r2, #2
 8012474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012478:	e014      	b.n	80124a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 f9d4 	bl	8012828 <USBD_CtlSendStatus>
      break;
 8012480:	e010      	b.n	80124a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f9d0 	bl	8012828 <USBD_CtlSendStatus>
      break;
 8012488:	e00c      	b.n	80124a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 f900 	bl	8012692 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012492:	4b07      	ldr	r3, [pc, #28]	; (80124b0 <USBD_SetConfig+0x150>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7fe ff68 	bl	801136e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801249e:	2303      	movs	r3, #3
 80124a0:	73fb      	strb	r3, [r7, #15]
      break;
 80124a2:	bf00      	nop
  }

  return ret;
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	20000f68 	.word	0x20000f68

080124b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	88db      	ldrh	r3, [r3, #6]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d004      	beq.n	80124d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80124c6:	6839      	ldr	r1, [r7, #0]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f8e2 	bl	8012692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80124ce:	e023      	b.n	8012518 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	2b02      	cmp	r3, #2
 80124da:	dc02      	bgt.n	80124e2 <USBD_GetConfig+0x2e>
 80124dc:	2b00      	cmp	r3, #0
 80124de:	dc03      	bgt.n	80124e8 <USBD_GetConfig+0x34>
 80124e0:	e015      	b.n	801250e <USBD_GetConfig+0x5a>
 80124e2:	2b03      	cmp	r3, #3
 80124e4:	d00b      	beq.n	80124fe <USBD_GetConfig+0x4a>
 80124e6:	e012      	b.n	801250e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	3308      	adds	r3, #8
 80124f2:	2201      	movs	r2, #1
 80124f4:	4619      	mov	r1, r3
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f93c 	bl	8012774 <USBD_CtlSendData>
        break;
 80124fc:	e00c      	b.n	8012518 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	3304      	adds	r3, #4
 8012502:	2201      	movs	r2, #1
 8012504:	4619      	mov	r1, r3
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f934 	bl	8012774 <USBD_CtlSendData>
        break;
 801250c:	e004      	b.n	8012518 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 f8be 	bl	8012692 <USBD_CtlError>
        break;
 8012516:	bf00      	nop
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012530:	b2db      	uxtb	r3, r3
 8012532:	3b01      	subs	r3, #1
 8012534:	2b02      	cmp	r3, #2
 8012536:	d81e      	bhi.n	8012576 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	88db      	ldrh	r3, [r3, #6]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d004      	beq.n	801254a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012540:	6839      	ldr	r1, [r7, #0]
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f8a5 	bl	8012692 <USBD_CtlError>
        break;
 8012548:	e01a      	b.n	8012580 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2201      	movs	r2, #1
 801254e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012556:	2b00      	cmp	r3, #0
 8012558:	d005      	beq.n	8012566 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	f043 0202 	orr.w	r2, r3, #2
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	330c      	adds	r3, #12
 801256a:	2202      	movs	r2, #2
 801256c:	4619      	mov	r1, r3
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 f900 	bl	8012774 <USBD_CtlSendData>
      break;
 8012574:	e004      	b.n	8012580 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012576:	6839      	ldr	r1, [r7, #0]
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f88a 	bl	8012692 <USBD_CtlError>
      break;
 801257e:	bf00      	nop
  }
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	885b      	ldrh	r3, [r3, #2]
 8012596:	2b01      	cmp	r3, #1
 8012598:	d107      	bne.n	80125aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2201      	movs	r2, #1
 801259e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 f940 	bl	8012828 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80125a8:	e013      	b.n	80125d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	885b      	ldrh	r3, [r3, #2]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d10b      	bne.n	80125ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	889b      	ldrh	r3, [r3, #4]
 80125b6:	0a1b      	lsrs	r3, r3, #8
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 f930 	bl	8012828 <USBD_CtlSendStatus>
}
 80125c8:	e003      	b.n	80125d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f860 	bl	8012692 <USBD_CtlError>
}
 80125d2:	bf00      	nop
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	3b01      	subs	r3, #1
 80125ee:	2b02      	cmp	r3, #2
 80125f0:	d80b      	bhi.n	801260a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	885b      	ldrh	r3, [r3, #2]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d10c      	bne.n	8012614 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 f910 	bl	8012828 <USBD_CtlSendStatus>
      }
      break;
 8012608:	e004      	b.n	8012614 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801260a:	6839      	ldr	r1, [r7, #0]
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 f840 	bl	8012692 <USBD_CtlError>
      break;
 8012612:	e000      	b.n	8012616 <USBD_ClrFeature+0x3c>
      break;
 8012614:	bf00      	nop
  }
}
 8012616:	bf00      	nop
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b084      	sub	sp, #16
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	781a      	ldrb	r2, [r3, #0]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	3301      	adds	r3, #1
 8012638:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	781a      	ldrb	r2, [r3, #0]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	3301      	adds	r3, #1
 8012646:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012648:	68f8      	ldr	r0, [r7, #12]
 801264a:	f7ff fa17 	bl	8011a7c <SWAPBYTE>
 801264e:	4603      	mov	r3, r0
 8012650:	461a      	mov	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	3301      	adds	r3, #1
 801265a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3301      	adds	r3, #1
 8012660:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f7ff fa0a 	bl	8011a7c <SWAPBYTE>
 8012668:	4603      	mov	r3, r0
 801266a:	461a      	mov	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	3301      	adds	r3, #1
 8012674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	3301      	adds	r3, #1
 801267a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f7ff f9fd 	bl	8011a7c <SWAPBYTE>
 8012682:	4603      	mov	r3, r0
 8012684:	461a      	mov	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	80da      	strh	r2, [r3, #6]
}
 801268a:	bf00      	nop
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
 801269a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801269c:	2180      	movs	r1, #128	; 0x80
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f005 faec 	bl	8017c7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126a4:	2100      	movs	r1, #0
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f005 fae8 	bl	8017c7c <USBD_LL_StallEP>
}
 80126ac:	bf00      	nop
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b086      	sub	sp, #24
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80126c0:	2300      	movs	r3, #0
 80126c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d036      	beq.n	8012738 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80126ce:	6938      	ldr	r0, [r7, #16]
 80126d0:	f000 f836 	bl	8012740 <USBD_GetLen>
 80126d4:	4603      	mov	r3, r0
 80126d6:	3301      	adds	r3, #1
 80126d8:	b29b      	uxth	r3, r3
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	b29a      	uxth	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80126e2:	7dfb      	ldrb	r3, [r7, #23]
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	4413      	add	r3, r2
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	7812      	ldrb	r2, [r2, #0]
 80126ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
 80126f0:	3301      	adds	r3, #1
 80126f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80126f4:	7dfb      	ldrb	r3, [r7, #23]
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	4413      	add	r3, r2
 80126fa:	2203      	movs	r2, #3
 80126fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
 8012700:	3301      	adds	r3, #1
 8012702:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012704:	e013      	b.n	801272e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012706:	7dfb      	ldrb	r3, [r7, #23]
 8012708:	68ba      	ldr	r2, [r7, #8]
 801270a:	4413      	add	r3, r2
 801270c:	693a      	ldr	r2, [r7, #16]
 801270e:	7812      	ldrb	r2, [r2, #0]
 8012710:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	3301      	adds	r3, #1
 8012716:	613b      	str	r3, [r7, #16]
    idx++;
 8012718:	7dfb      	ldrb	r3, [r7, #23]
 801271a:	3301      	adds	r3, #1
 801271c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801271e:	7dfb      	ldrb	r3, [r7, #23]
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	4413      	add	r3, r2
 8012724:	2200      	movs	r2, #0
 8012726:	701a      	strb	r2, [r3, #0]
    idx++;
 8012728:	7dfb      	ldrb	r3, [r7, #23]
 801272a:	3301      	adds	r3, #1
 801272c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e7      	bne.n	8012706 <USBD_GetString+0x52>
 8012736:	e000      	b.n	801273a <USBD_GetString+0x86>
    return;
 8012738:	bf00      	nop
  }
}
 801273a:	3718      	adds	r7, #24
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}

08012740 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012748:	2300      	movs	r3, #0
 801274a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012750:	e005      	b.n	801275e <USBD_GetLen+0x1e>
  {
    len++;
 8012752:	7bfb      	ldrb	r3, [r7, #15]
 8012754:	3301      	adds	r3, #1
 8012756:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	3301      	adds	r3, #1
 801275c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1f5      	bne.n	8012752 <USBD_GetLen+0x12>
  }

  return len;
 8012766:	7bfb      	ldrb	r3, [r7, #15]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3714      	adds	r7, #20
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr

08012774 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b084      	sub	sp, #16
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2202      	movs	r2, #2
 8012784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	68ba      	ldr	r2, [r7, #8]
 8012798:	2100      	movs	r1, #0
 801279a:	68f8      	ldr	r0, [r7, #12]
 801279c:	f005 faf7 	bl	8017d8e <USBD_LL_Transmit>

  return USBD_OK;
 80127a0:	2300      	movs	r3, #0
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3710      	adds	r7, #16
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b084      	sub	sp, #16
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	60f8      	str	r0, [r7, #12]
 80127b2:	60b9      	str	r1, [r7, #8]
 80127b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	2100      	movs	r1, #0
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f005 fae6 	bl	8017d8e <USBD_LL_Transmit>

  return USBD_OK;
 80127c2:	2300      	movs	r3, #0
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	2203      	movs	r2, #3
 80127dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	2100      	movs	r1, #0
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f005 faea 	bl	8017dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3710      	adds	r7, #16
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}

08012806 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012806:	b580      	push	{r7, lr}
 8012808:	b084      	sub	sp, #16
 801280a:	af00      	add	r7, sp, #0
 801280c:	60f8      	str	r0, [r7, #12]
 801280e:	60b9      	str	r1, [r7, #8]
 8012810:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	2100      	movs	r1, #0
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f005 fad9 	bl	8017dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2204      	movs	r2, #4
 8012834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012838:	2300      	movs	r3, #0
 801283a:	2200      	movs	r2, #0
 801283c:	2100      	movs	r1, #0
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f005 faa5 	bl	8017d8e <USBD_LL_Transmit>

  return USBD_OK;
 8012844:	2300      	movs	r3, #0
}
 8012846:	4618      	mov	r0, r3
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801284e:	b580      	push	{r7, lr}
 8012850:	b082      	sub	sp, #8
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2205      	movs	r2, #5
 801285a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801285e:	2300      	movs	r3, #0
 8012860:	2200      	movs	r2, #0
 8012862:	2100      	movs	r1, #0
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f005 fab3 	bl	8017dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012874:	b590      	push	{r4, r7, lr}
 8012876:	b089      	sub	sp, #36	; 0x24
 8012878:	af04      	add	r7, sp, #16
 801287a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 801287c:	2301      	movs	r3, #1
 801287e:	2202      	movs	r2, #2
 8012880:	2102      	movs	r1, #2
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f000 fc85 	bl	8013192 <USBH_FindInterface>
 8012888:	4603      	mov	r3, r0
 801288a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	2bff      	cmp	r3, #255	; 0xff
 8012890:	d002      	beq.n	8012898 <USBH_CDC_InterfaceInit+0x24>
 8012892:	7bfb      	ldrb	r3, [r7, #15]
 8012894:	2b01      	cmp	r3, #1
 8012896:	d901      	bls.n	801289c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012898:	2302      	movs	r3, #2
 801289a:	e13d      	b.n	8012b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801289c:	7bfb      	ldrb	r3, [r7, #15]
 801289e:	4619      	mov	r1, r3
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 fc5a 	bl	801315a <USBH_SelectInterface>
 80128a6:	4603      	mov	r3, r0
 80128a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80128aa:	7bbb      	ldrb	r3, [r7, #14]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80128b0:	2302      	movs	r3, #2
 80128b2:	e131      	b.n	8012b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80128ba:	2050      	movs	r0, #80	; 0x50
 80128bc:	f005 fe86 	bl	80185cc <malloc>
 80128c0:	4603      	mov	r3, r0
 80128c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80128ca:	69db      	ldr	r3, [r3, #28]
 80128cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d101      	bne.n	80128d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80128d4:	2302      	movs	r3, #2
 80128d6:	e11f      	b.n	8012b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80128d8:	2250      	movs	r2, #80	; 0x50
 80128da:	2100      	movs	r1, #0
 80128dc:	68b8      	ldr	r0, [r7, #8]
 80128de:	f005 fea3 	bl	8018628 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80128e2:	7bfb      	ldrb	r3, [r7, #15]
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	211a      	movs	r1, #26
 80128e8:	fb01 f303 	mul.w	r3, r1, r3
 80128ec:	4413      	add	r3, r2
 80128ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	b25b      	sxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	da15      	bge.n	8012926 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80128fa:	7bfb      	ldrb	r3, [r7, #15]
 80128fc:	687a      	ldr	r2, [r7, #4]
 80128fe:	211a      	movs	r1, #26
 8012900:	fb01 f303 	mul.w	r3, r1, r3
 8012904:	4413      	add	r3, r2
 8012906:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801290a:	781a      	ldrb	r2, [r3, #0]
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012910:	7bfb      	ldrb	r3, [r7, #15]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	211a      	movs	r1, #26
 8012916:	fb01 f303 	mul.w	r3, r1, r3
 801291a:	4413      	add	r3, r2
 801291c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012920:	881a      	ldrh	r2, [r3, #0]
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	785b      	ldrb	r3, [r3, #1]
 801292a:	4619      	mov	r1, r3
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f001 ff26 	bl	801477e <USBH_AllocPipe>
 8012932:	4603      	mov	r3, r0
 8012934:	461a      	mov	r2, r3
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	7819      	ldrb	r1, [r3, #0]
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	7858      	ldrb	r0, [r3, #1]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	8952      	ldrh	r2, [r2, #10]
 8012952:	9202      	str	r2, [sp, #8]
 8012954:	2203      	movs	r2, #3
 8012956:	9201      	str	r2, [sp, #4]
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	4623      	mov	r3, r4
 801295c:	4602      	mov	r2, r0
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f001 fede 	bl	8014720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2200      	movs	r2, #0
 801296a:	4619      	mov	r1, r3
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f005 fd77 	bl	8018460 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012972:	2300      	movs	r3, #0
 8012974:	2200      	movs	r2, #0
 8012976:	210a      	movs	r1, #10
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 fc0a 	bl	8013192 <USBH_FindInterface>
 801297e:	4603      	mov	r3, r0
 8012980:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012982:	7bfb      	ldrb	r3, [r7, #15]
 8012984:	2bff      	cmp	r3, #255	; 0xff
 8012986:	d002      	beq.n	801298e <USBH_CDC_InterfaceInit+0x11a>
 8012988:	7bfb      	ldrb	r3, [r7, #15]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d901      	bls.n	8012992 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801298e:	2302      	movs	r3, #2
 8012990:	e0c2      	b.n	8012b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012992:	7bfb      	ldrb	r3, [r7, #15]
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	211a      	movs	r1, #26
 8012998:	fb01 f303 	mul.w	r3, r1, r3
 801299c:	4413      	add	r3, r2
 801299e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	b25b      	sxtb	r3, r3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	da16      	bge.n	80129d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80129aa:	7bfb      	ldrb	r3, [r7, #15]
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	211a      	movs	r1, #26
 80129b0:	fb01 f303 	mul.w	r3, r1, r3
 80129b4:	4413      	add	r3, r2
 80129b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80129ba:	781a      	ldrb	r2, [r3, #0]
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80129c0:	7bfb      	ldrb	r3, [r7, #15]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	211a      	movs	r1, #26
 80129c6:	fb01 f303 	mul.w	r3, r1, r3
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80129d0:	881a      	ldrh	r2, [r3, #0]
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	835a      	strh	r2, [r3, #26]
 80129d6:	e015      	b.n	8012a04 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80129d8:	7bfb      	ldrb	r3, [r7, #15]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	211a      	movs	r1, #26
 80129de:	fb01 f303 	mul.w	r3, r1, r3
 80129e2:	4413      	add	r3, r2
 80129e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80129e8:	781a      	ldrb	r2, [r3, #0]
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80129ee:	7bfb      	ldrb	r3, [r7, #15]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	211a      	movs	r1, #26
 80129f4:	fb01 f303 	mul.w	r3, r1, r3
 80129f8:	4413      	add	r3, r2
 80129fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80129fe:	881a      	ldrh	r2, [r3, #0]
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
 8012a06:	687a      	ldr	r2, [r7, #4]
 8012a08:	211a      	movs	r1, #26
 8012a0a:	fb01 f303 	mul.w	r3, r1, r3
 8012a0e:	4413      	add	r3, r2
 8012a10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	b25b      	sxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	da16      	bge.n	8012a4a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012a1c:	7bfb      	ldrb	r3, [r7, #15]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	211a      	movs	r1, #26
 8012a22:	fb01 f303 	mul.w	r3, r1, r3
 8012a26:	4413      	add	r3, r2
 8012a28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012a2c:	781a      	ldrb	r2, [r3, #0]
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	211a      	movs	r1, #26
 8012a38:	fb01 f303 	mul.w	r3, r1, r3
 8012a3c:	4413      	add	r3, r2
 8012a3e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012a42:	881a      	ldrh	r2, [r3, #0]
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	835a      	strh	r2, [r3, #26]
 8012a48:	e015      	b.n	8012a76 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012a4a:	7bfb      	ldrb	r3, [r7, #15]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	211a      	movs	r1, #26
 8012a50:	fb01 f303 	mul.w	r3, r1, r3
 8012a54:	4413      	add	r3, r2
 8012a56:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012a5a:	781a      	ldrb	r2, [r3, #0]
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012a60:	7bfb      	ldrb	r3, [r7, #15]
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	211a      	movs	r1, #26
 8012a66:	fb01 f303 	mul.w	r3, r1, r3
 8012a6a:	4413      	add	r3, r2
 8012a6c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012a70:	881a      	ldrh	r2, [r3, #0]
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	7b9b      	ldrb	r3, [r3, #14]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f001 fe7e 	bl	801477e <USBH_AllocPipe>
 8012a82:	4603      	mov	r3, r0
 8012a84:	461a      	mov	r2, r3
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	7bdb      	ldrb	r3, [r3, #15]
 8012a8e:	4619      	mov	r1, r3
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f001 fe74 	bl	801477e <USBH_AllocPipe>
 8012a96:	4603      	mov	r3, r0
 8012a98:	461a      	mov	r2, r3
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	7b59      	ldrb	r1, [r3, #13]
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	7b98      	ldrb	r0, [r3, #14]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012ab2:	68ba      	ldr	r2, [r7, #8]
 8012ab4:	8b12      	ldrh	r2, [r2, #24]
 8012ab6:	9202      	str	r2, [sp, #8]
 8012ab8:	2202      	movs	r2, #2
 8012aba:	9201      	str	r2, [sp, #4]
 8012abc:	9300      	str	r3, [sp, #0]
 8012abe:	4623      	mov	r3, r4
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f001 fe2c 	bl	8014720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	7b19      	ldrb	r1, [r3, #12]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	7bd8      	ldrb	r0, [r3, #15]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	8b52      	ldrh	r2, [r2, #26]
 8012ae0:	9202      	str	r2, [sp, #8]
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	9201      	str	r2, [sp, #4]
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	4623      	mov	r3, r4
 8012aea:	4602      	mov	r2, r0
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f001 fe17 	bl	8014720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2200      	movs	r2, #0
 8012af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	7b5b      	ldrb	r3, [r3, #13]
 8012afe:	2200      	movs	r2, #0
 8012b00:	4619      	mov	r1, r3
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f005 fcac 	bl	8018460 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	7b1b      	ldrb	r3, [r3, #12]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	4619      	mov	r1, r3
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f005 fca5 	bl	8018460 <USBH_LL_SetToggle>

  return USBH_OK;
 8012b16:	2300      	movs	r3, #0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3714      	adds	r7, #20
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd90      	pop	{r4, r7, pc}

08012b20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012b2e:	69db      	ldr	r3, [r3, #28]
 8012b30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00e      	beq.n	8012b58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	4619      	mov	r1, r3
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f001 fe0c 	bl	801475e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f001 fe37 	bl	80147c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2200      	movs	r2, #0
 8012b56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	7b1b      	ldrb	r3, [r3, #12]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00e      	beq.n	8012b7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	7b1b      	ldrb	r3, [r3, #12]
 8012b64:	4619      	mov	r1, r3
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f001 fdf9 	bl	801475e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	7b1b      	ldrb	r3, [r3, #12]
 8012b70:	4619      	mov	r1, r3
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f001 fe24 	bl	80147c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	7b5b      	ldrb	r3, [r3, #13]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d00e      	beq.n	8012ba4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	7b5b      	ldrb	r3, [r3, #13]
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f001 fde6 	bl	801475e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	7b5b      	ldrb	r3, [r3, #13]
 8012b96:	4619      	mov	r1, r3
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f001 fe11 	bl	80147c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012baa:	69db      	ldr	r3, [r3, #28]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00b      	beq.n	8012bc8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012bb6:	69db      	ldr	r3, [r3, #28]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f005 fd0f 	bl	80185dc <free>
    phost->pActiveClass->pData = 0U;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012bc8:	2300      	movs	r3, #0
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3710      	adds	r7, #16
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}

08012bd2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012bd2:	b580      	push	{r7, lr}
 8012bd4:	b084      	sub	sp, #16
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012be0:	69db      	ldr	r3, [r3, #28]
 8012be2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	3340      	adds	r3, #64	; 0x40
 8012be8:	4619      	mov	r1, r3
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f000 f8b1 	bl	8012d52 <GetLineCoding>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012bf4:	7afb      	ldrb	r3, [r7, #11]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d105      	bne.n	8012c06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012c00:	2102      	movs	r1, #2
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8012c06:	7afb      	ldrb	r3, [r7, #11]
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3710      	adds	r7, #16
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012c26:	69db      	ldr	r3, [r3, #28]
 8012c28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012c30:	2b04      	cmp	r3, #4
 8012c32:	d877      	bhi.n	8012d24 <USBH_CDC_Process+0x114>
 8012c34:	a201      	add	r2, pc, #4	; (adr r2, 8012c3c <USBH_CDC_Process+0x2c>)
 8012c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c3a:	bf00      	nop
 8012c3c:	08012c51 	.word	0x08012c51
 8012c40:	08012c57 	.word	0x08012c57
 8012c44:	08012c87 	.word	0x08012c87
 8012c48:	08012cfb 	.word	0x08012cfb
 8012c4c:	08012d09 	.word	0x08012d09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012c50:	2300      	movs	r3, #0
 8012c52:	73fb      	strb	r3, [r7, #15]
      break;
 8012c54:	e06d      	b.n	8012d32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 f897 	bl	8012d90 <SetLineCoding>
 8012c62:	4603      	mov	r3, r0
 8012c64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012c66:	7bbb      	ldrb	r3, [r7, #14]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d104      	bne.n	8012c76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	2202      	movs	r2, #2
 8012c70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012c74:	e058      	b.n	8012d28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012c76:	7bbb      	ldrb	r3, [r7, #14]
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d055      	beq.n	8012d28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	2204      	movs	r2, #4
 8012c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012c84:	e050      	b.n	8012d28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	3340      	adds	r3, #64	; 0x40
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f860 	bl	8012d52 <GetLineCoding>
 8012c92:	4603      	mov	r3, r0
 8012c94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012c96:	7bbb      	ldrb	r3, [r7, #14]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d126      	bne.n	8012cea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cae:	791b      	ldrb	r3, [r3, #4]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d13b      	bne.n	8012d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cbe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d133      	bne.n	8012d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d12b      	bne.n	8012d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cdc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d124      	bne.n	8012d2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f958 	bl	8012f98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012ce8:	e020      	b.n	8012d2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012cea:	7bbb      	ldrb	r3, [r7, #14]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d01d      	beq.n	8012d2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	2204      	movs	r2, #4
 8012cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012cf8:	e018      	b.n	8012d2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 f867 	bl	8012dce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 f8da 	bl	8012eba <CDC_ProcessReception>
      break;
 8012d06:	e014      	b.n	8012d32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012d08:	2100      	movs	r1, #0
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f001 f80f 	bl	8013d2e <USBH_ClrFeature>
 8012d10:	4603      	mov	r3, r0
 8012d12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012d14:	7bbb      	ldrb	r3, [r7, #14]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d10a      	bne.n	8012d30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8012d22:	e005      	b.n	8012d30 <USBH_CDC_Process+0x120>

    default:
      break;
 8012d24:	bf00      	nop
 8012d26:	e004      	b.n	8012d32 <USBH_CDC_Process+0x122>
      break;
 8012d28:	bf00      	nop
 8012d2a:	e002      	b.n	8012d32 <USBH_CDC_Process+0x122>
      break;
 8012d2c:	bf00      	nop
 8012d2e:	e000      	b.n	8012d32 <USBH_CDC_Process+0x122>
      break;
 8012d30:	bf00      	nop

  }

  return status;
 8012d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	370c      	adds	r7, #12
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b082      	sub	sp, #8
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	22a1      	movs	r2, #161	; 0xa1
 8012d60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2221      	movs	r2, #33	; 0x21
 8012d66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2200      	movs	r2, #0
 8012d72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2207      	movs	r2, #7
 8012d78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	4619      	mov	r1, r3
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f001 fa7b 	bl	801427c <USBH_CtlReq>
 8012d86:	4603      	mov	r3, r0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2221      	movs	r2, #33	; 0x21
 8012d9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2220      	movs	r2, #32
 8012da4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2200      	movs	r2, #0
 8012daa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2207      	movs	r2, #7
 8012db6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	2207      	movs	r2, #7
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f001 fa5c 	bl	801427c <USBH_CtlReq>
 8012dc4:	4603      	mov	r3, r0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b086      	sub	sp, #24
 8012dd2:	af02      	add	r7, sp, #8
 8012dd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012ddc:	69db      	ldr	r3, [r3, #28]
 8012dde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012de0:	2300      	movs	r3, #0
 8012de2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d002      	beq.n	8012df4 <CDC_ProcessTransmission+0x26>
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	d023      	beq.n	8012e3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012df2:	e05e      	b.n	8012eb2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	8b12      	ldrh	r2, [r2, #24]
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	d90b      	bls.n	8012e18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	69d9      	ldr	r1, [r3, #28]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	8b1a      	ldrh	r2, [r3, #24]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	7b5b      	ldrb	r3, [r3, #13]
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	9000      	str	r0, [sp, #0]
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f001 fc42 	bl	801469a <USBH_BulkSendData>
 8012e16:	e00b      	b.n	8012e30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	7b5b      	ldrb	r3, [r3, #13]
 8012e26:	2001      	movs	r0, #1
 8012e28:	9000      	str	r0, [sp, #0]
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f001 fc35 	bl	801469a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2202      	movs	r2, #2
 8012e34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8012e38:	e03b      	b.n	8012eb2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	7b5b      	ldrb	r3, [r3, #13]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f005 fae3 	bl	801840c <USBH_LL_GetURBState>
 8012e46:	4603      	mov	r3, r0
 8012e48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012e4a:	7afb      	ldrb	r3, [r7, #11]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d128      	bne.n	8012ea2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	8b12      	ldrh	r2, [r2, #24]
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d90e      	bls.n	8012e7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	8b12      	ldrh	r2, [r2, #24]
 8012e64:	1a9a      	subs	r2, r3, r2
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	69db      	ldr	r3, [r3, #28]
 8012e6e:	68fa      	ldr	r2, [r7, #12]
 8012e70:	8b12      	ldrh	r2, [r2, #24]
 8012e72:	441a      	add	r2, r3
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	61da      	str	r2, [r3, #28]
 8012e78:	e002      	b.n	8012e80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d004      	beq.n	8012e92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2201      	movs	r2, #1
 8012e8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8012e90:	e00e      	b.n	8012eb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f000 f868 	bl	8012f70 <USBH_CDC_TransmitCallback>
      break;
 8012ea0:	e006      	b.n	8012eb0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8012ea2:	7afb      	ldrb	r3, [r7, #11]
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	d103      	bne.n	8012eb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8012eb0:	bf00      	nop
  }
}
 8012eb2:	bf00      	nop
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b086      	sub	sp, #24
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012ec8:	69db      	ldr	r3, [r3, #28]
 8012eca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012ed6:	2b03      	cmp	r3, #3
 8012ed8:	d002      	beq.n	8012ee0 <CDC_ProcessReception+0x26>
 8012eda:	2b04      	cmp	r3, #4
 8012edc:	d00e      	beq.n	8012efc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8012ede:	e043      	b.n	8012f68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	6a19      	ldr	r1, [r3, #32]
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	8b5a      	ldrh	r2, [r3, #26]
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	7b1b      	ldrb	r3, [r3, #12]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f001 fbf9 	bl	80146e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012efa:	e035      	b.n	8012f68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	7b1b      	ldrb	r3, [r3, #12]
 8012f00:	4619      	mov	r1, r3
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f005 fa82 	bl	801840c <USBH_LL_GetURBState>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012f0c:	7cfb      	ldrb	r3, [r7, #19]
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d129      	bne.n	8012f66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	7b1b      	ldrb	r3, [r3, #12]
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f005 f9e5 	bl	80182e8 <USBH_LL_GetLastXferSize>
 8012f1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d016      	beq.n	8012f58 <CDC_ProcessReception+0x9e>
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	8b5b      	ldrh	r3, [r3, #26]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d910      	bls.n	8012f58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	1ad2      	subs	r2, r2, r3
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	6a1a      	ldr	r2, [r3, #32]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	441a      	add	r2, r3
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	2203      	movs	r2, #3
 8012f52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012f56:	e006      	b.n	8012f66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 f80f 	bl	8012f84 <USBH_CDC_ReceiveCallback>
      break;
 8012f66:	bf00      	nop
  }
}
 8012f68:	bf00      	nop
 8012f6a:	3718      	adds	r7, #24
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012f78:	bf00      	nop
 8012f7a:	370c      	adds	r7, #12
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f82:	4770      	bx	lr

08012f84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012f8c:	bf00      	nop
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012fa0:	bf00      	nop
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	4613      	mov	r3, r2
 8012fb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d101      	bne.n	8012fc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	e029      	b.n	8013018 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	79fa      	ldrb	r2, [r7, #7]
 8012fc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f000 f81f 	bl	8013020 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d003      	beq.n	8013010 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f005 f8b5 	bl	8018180 <USBH_LL_Init>

  return USBH_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b084      	sub	sp, #16
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8013028:	2300      	movs	r3, #0
 801302a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801302c:	2300      	movs	r3, #0
 801302e:	60fb      	str	r3, [r7, #12]
 8013030:	e009      	b.n	8013046 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	33e0      	adds	r3, #224	; 0xe0
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	2200      	movs	r2, #0
 801303e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	3301      	adds	r3, #1
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2b0f      	cmp	r3, #15
 801304a:	d9f2      	bls.n	8013032 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801304c:	2300      	movs	r3, #0
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	e009      	b.n	8013066 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	4413      	add	r3, r2
 8013058:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801305c:	2200      	movs	r2, #0
 801305e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	3301      	adds	r3, #1
 8013064:	60fb      	str	r3, [r7, #12]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801306c:	d3f1      	bcc.n	8013052 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2200      	movs	r2, #0
 8013078:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2201      	movs	r2, #1
 801308c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2240      	movs	r2, #64	; 0x40
 8013092:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2200      	movs	r2, #0
 801309e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2201      	movs	r2, #1
 80130a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2200      	movs	r2, #0
 80130b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	331c      	adds	r3, #28
 80130be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130c2:	2100      	movs	r1, #0
 80130c4:	4618      	mov	r0, r3
 80130c6:	f005 faaf 	bl	8018628 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80130d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130d4:	2100      	movs	r1, #0
 80130d6:	4618      	mov	r0, r3
 80130d8:	f005 faa6 	bl	8018628 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f203 3326 	addw	r3, r3, #806	; 0x326
 80130e2:	2212      	movs	r2, #18
 80130e4:	2100      	movs	r1, #0
 80130e6:	4618      	mov	r0, r3
 80130e8:	f005 fa9e 	bl	8018628 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80130f2:	223e      	movs	r2, #62	; 0x3e
 80130f4:	2100      	movs	r1, #0
 80130f6:	4618      	mov	r0, r3
 80130f8:	f005 fa96 	bl	8018628 <memset>

  return USBH_OK;
 80130fc:	2300      	movs	r3, #0
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013106:	b480      	push	{r7}
 8013108:	b085      	sub	sp, #20
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8013110:	2300      	movs	r3, #0
 8013112:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d016      	beq.n	8013148 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10e      	bne.n	8013142 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801312a:	1c59      	adds	r1, r3, #1
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	33de      	adds	r3, #222	; 0xde
 8013136:	6839      	ldr	r1, [r7, #0]
 8013138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	73fb      	strb	r3, [r7, #15]
 8013140:	e004      	b.n	801314c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8013142:	2302      	movs	r3, #2
 8013144:	73fb      	strb	r3, [r7, #15]
 8013146:	e001      	b.n	801314c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013148:	2302      	movs	r3, #2
 801314a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801314c:	7bfb      	ldrb	r3, [r7, #15]
}
 801314e:	4618      	mov	r0, r3
 8013150:	3714      	adds	r7, #20
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801315a:	b480      	push	{r7}
 801315c:	b085      	sub	sp, #20
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
 8013162:	460b      	mov	r3, r1
 8013164:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013166:	2300      	movs	r3, #0
 8013168:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8013170:	78fa      	ldrb	r2, [r7, #3]
 8013172:	429a      	cmp	r2, r3
 8013174:	d204      	bcs.n	8013180 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	78fa      	ldrb	r2, [r7, #3]
 801317a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 801317e:	e001      	b.n	8013184 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013180:	2302      	movs	r3, #2
 8013182:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013184:	7bfb      	ldrb	r3, [r7, #15]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr

08013192 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013192:	b480      	push	{r7}
 8013194:	b087      	sub	sp, #28
 8013196:	af00      	add	r7, sp, #0
 8013198:	6078      	str	r0, [r7, #4]
 801319a:	4608      	mov	r0, r1
 801319c:	4611      	mov	r1, r2
 801319e:	461a      	mov	r2, r3
 80131a0:	4603      	mov	r3, r0
 80131a2:	70fb      	strb	r3, [r7, #3]
 80131a4:	460b      	mov	r3, r1
 80131a6:	70bb      	strb	r3, [r7, #2]
 80131a8:	4613      	mov	r3, r2
 80131aa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80131ac:	2300      	movs	r3, #0
 80131ae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80131b0:	2300      	movs	r3, #0
 80131b2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80131ba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80131bc:	e025      	b.n	801320a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80131be:	7dfb      	ldrb	r3, [r7, #23]
 80131c0:	221a      	movs	r2, #26
 80131c2:	fb02 f303 	mul.w	r3, r2, r3
 80131c6:	3308      	adds	r3, #8
 80131c8:	68fa      	ldr	r2, [r7, #12]
 80131ca:	4413      	add	r3, r2
 80131cc:	3302      	adds	r3, #2
 80131ce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	795b      	ldrb	r3, [r3, #5]
 80131d4:	78fa      	ldrb	r2, [r7, #3]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d002      	beq.n	80131e0 <USBH_FindInterface+0x4e>
 80131da:	78fb      	ldrb	r3, [r7, #3]
 80131dc:	2bff      	cmp	r3, #255	; 0xff
 80131de:	d111      	bne.n	8013204 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80131e4:	78ba      	ldrb	r2, [r7, #2]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d002      	beq.n	80131f0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131ea:	78bb      	ldrb	r3, [r7, #2]
 80131ec:	2bff      	cmp	r3, #255	; 0xff
 80131ee:	d109      	bne.n	8013204 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131f4:	787a      	ldrb	r2, [r7, #1]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d002      	beq.n	8013200 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80131fa:	787b      	ldrb	r3, [r7, #1]
 80131fc:	2bff      	cmp	r3, #255	; 0xff
 80131fe:	d101      	bne.n	8013204 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013200:	7dfb      	ldrb	r3, [r7, #23]
 8013202:	e006      	b.n	8013212 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013204:	7dfb      	ldrb	r3, [r7, #23]
 8013206:	3301      	adds	r3, #1
 8013208:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801320a:	7dfb      	ldrb	r3, [r7, #23]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d9d6      	bls.n	80131be <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013210:	23ff      	movs	r3, #255	; 0xff
}
 8013212:	4618      	mov	r0, r3
 8013214:	371c      	adds	r7, #28
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b082      	sub	sp, #8
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f004 ffe6 	bl	80181f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 801322c:	2101      	movs	r1, #1
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f005 f8ff 	bl	8018432 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
	...

08013240 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b088      	sub	sp, #32
 8013244:	af04      	add	r7, sp, #16
 8013246:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013248:	2302      	movs	r3, #2
 801324a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801324c:	2300      	movs	r3, #0
 801324e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8013256:	b2db      	uxtb	r3, r3
 8013258:	2b01      	cmp	r3, #1
 801325a:	d102      	bne.n	8013262 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2203      	movs	r2, #3
 8013260:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	b2db      	uxtb	r3, r3
 8013268:	2b0b      	cmp	r3, #11
 801326a:	f200 81be 	bhi.w	80135ea <USBH_Process+0x3aa>
 801326e:	a201      	add	r2, pc, #4	; (adr r2, 8013274 <USBH_Process+0x34>)
 8013270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013274:	080132a5 	.word	0x080132a5
 8013278:	080132d7 	.word	0x080132d7
 801327c:	0801333f 	.word	0x0801333f
 8013280:	08013585 	.word	0x08013585
 8013284:	080135eb 	.word	0x080135eb
 8013288:	080133e3 	.word	0x080133e3
 801328c:	0801352b 	.word	0x0801352b
 8013290:	08013419 	.word	0x08013419
 8013294:	08013439 	.word	0x08013439
 8013298:	08013459 	.word	0x08013459
 801329c:	0801349d 	.word	0x0801349d
 80132a0:	0801356d 	.word	0x0801356d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80132aa:	b2db      	uxtb	r3, r3
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 819e 	beq.w	80135ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2201      	movs	r2, #1
 80132b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80132b8:	20c8      	movs	r0, #200	; 0xc8
 80132ba:	f005 f901 	bl	80184c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f004 fff7 	bl	80182b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2200      	movs	r2, #0
 80132d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80132d4:	e18b      	b.n	80135ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80132dc:	2b01      	cmp	r3, #1
 80132de:	d107      	bne.n	80132f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2200      	movs	r2, #0
 80132e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2202      	movs	r2, #2
 80132ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80132ee:	e18d      	b.n	801360c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80132f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80132fa:	d914      	bls.n	8013326 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013302:	3301      	adds	r3, #1
 8013304:	b2da      	uxtb	r2, r3
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013312:	2b03      	cmp	r3, #3
 8013314:	d903      	bls.n	801331e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	220d      	movs	r2, #13
 801331a:	701a      	strb	r2, [r3, #0]
      break;
 801331c:	e176      	b.n	801360c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2200      	movs	r2, #0
 8013322:	701a      	strb	r2, [r3, #0]
      break;
 8013324:	e172      	b.n	801360c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801332c:	f103 020a 	add.w	r2, r3, #10
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8013336:	200a      	movs	r0, #10
 8013338:	f005 f8c2 	bl	80184c0 <USBH_Delay>
      break;
 801333c:	e166      	b.n	801360c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013344:	2b00      	cmp	r3, #0
 8013346:	d005      	beq.n	8013354 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801334e:	2104      	movs	r1, #4
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013354:	2064      	movs	r0, #100	; 0x64
 8013356:	f005 f8b3 	bl	80184c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f004 ff82 	bl	8018264 <USBH_LL_GetSpeed>
 8013360:	4603      	mov	r3, r0
 8013362:	461a      	mov	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2205      	movs	r2, #5
 801336e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013370:	2100      	movs	r1, #0
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f001 fa03 	bl	801477e <USBH_AllocPipe>
 8013378:	4603      	mov	r3, r0
 801337a:	461a      	mov	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013380:	2180      	movs	r1, #128	; 0x80
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f001 f9fb 	bl	801477e <USBH_AllocPipe>
 8013388:	4603      	mov	r3, r0
 801338a:	461a      	mov	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	7919      	ldrb	r1, [r3, #4]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80133a4:	b292      	uxth	r2, r2
 80133a6:	9202      	str	r2, [sp, #8]
 80133a8:	2200      	movs	r2, #0
 80133aa:	9201      	str	r2, [sp, #4]
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	4603      	mov	r3, r0
 80133b0:	2280      	movs	r2, #128	; 0x80
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f001 f9b4 	bl	8014720 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	7959      	ldrb	r1, [r3, #5]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80133cc:	b292      	uxth	r2, r2
 80133ce:	9202      	str	r2, [sp, #8]
 80133d0:	2200      	movs	r2, #0
 80133d2:	9201      	str	r2, [sp, #4]
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	4603      	mov	r3, r0
 80133d8:	2200      	movs	r2, #0
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f001 f9a0 	bl	8014720 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80133e0:	e114      	b.n	801360c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f918 	bl	8013618 <USBH_HandleEnum>
 80133e8:	4603      	mov	r3, r0
 80133ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80133ec:	7bbb      	ldrb	r3, [r7, #14]
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f040 80fe 	bne.w	80135f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2200      	movs	r2, #0
 80133fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8013404:	2b01      	cmp	r3, #1
 8013406:	d103      	bne.n	8013410 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2208      	movs	r2, #8
 801340c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801340e:	e0f0      	b.n	80135f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2207      	movs	r2, #7
 8013414:	701a      	strb	r2, [r3, #0]
      break;
 8013416:	e0ec      	b.n	80135f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 80e9 	beq.w	80135f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801342a:	2101      	movs	r1, #1
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2208      	movs	r2, #8
 8013434:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8013436:	e0de      	b.n	80135f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801343e:	b29b      	uxth	r3, r3
 8013440:	4619      	mov	r1, r3
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f000 fc2c 	bl	8013ca0 <USBH_SetCfg>
 8013448:	4603      	mov	r3, r0
 801344a:	2b00      	cmp	r3, #0
 801344c:	f040 80d5 	bne.w	80135fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2209      	movs	r2, #9
 8013454:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013456:	e0d0      	b.n	80135fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 801345e:	f003 0320 	and.w	r3, r3, #32
 8013462:	2b00      	cmp	r3, #0
 8013464:	d016      	beq.n	8013494 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8013466:	2101      	movs	r1, #1
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 fc3c 	bl	8013ce6 <USBH_SetFeature>
 801346e:	4603      	mov	r3, r0
 8013470:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013472:	7bbb      	ldrb	r3, [r7, #14]
 8013474:	b2db      	uxtb	r3, r3
 8013476:	2b00      	cmp	r3, #0
 8013478:	d103      	bne.n	8013482 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	220a      	movs	r2, #10
 801347e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013480:	e0bd      	b.n	80135fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8013482:	7bbb      	ldrb	r3, [r7, #14]
 8013484:	b2db      	uxtb	r3, r3
 8013486:	2b03      	cmp	r3, #3
 8013488:	f040 80b9 	bne.w	80135fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	220a      	movs	r2, #10
 8013490:	701a      	strb	r2, [r3, #0]
      break;
 8013492:	e0b4      	b.n	80135fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	220a      	movs	r2, #10
 8013498:	701a      	strb	r2, [r3, #0]
      break;
 801349a:	e0b0      	b.n	80135fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 80ad 	beq.w	8013602 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80134b0:	2300      	movs	r3, #0
 80134b2:	73fb      	strb	r3, [r7, #15]
 80134b4:	e016      	b.n	80134e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80134b6:	7bfa      	ldrb	r2, [r7, #15]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	32de      	adds	r2, #222	; 0xde
 80134bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134c0:	791a      	ldrb	r2, [r3, #4]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d108      	bne.n	80134de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80134cc:	7bfa      	ldrb	r2, [r7, #15]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	32de      	adds	r2, #222	; 0xde
 80134d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80134dc:	e005      	b.n	80134ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80134de:	7bfb      	ldrb	r3, [r7, #15]
 80134e0:	3301      	adds	r3, #1
 80134e2:	73fb      	strb	r3, [r7, #15]
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d0e5      	beq.n	80134b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d016      	beq.n	8013522 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80134fa:	689b      	ldr	r3, [r3, #8]
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	4798      	blx	r3
 8013500:	4603      	mov	r3, r0
 8013502:	2b00      	cmp	r3, #0
 8013504:	d109      	bne.n	801351a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2206      	movs	r2, #6
 801350a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013512:	2103      	movs	r1, #3
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013518:	e073      	b.n	8013602 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	220d      	movs	r2, #13
 801351e:	701a      	strb	r2, [r3, #0]
      break;
 8013520:	e06f      	b.n	8013602 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	220d      	movs	r2, #13
 8013526:	701a      	strb	r2, [r3, #0]
      break;
 8013528:	e06b      	b.n	8013602 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013530:	2b00      	cmp	r3, #0
 8013532:	d017      	beq.n	8013564 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801353a:	691b      	ldr	r3, [r3, #16]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	4798      	blx	r3
 8013540:	4603      	mov	r3, r0
 8013542:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013544:	7bbb      	ldrb	r3, [r7, #14]
 8013546:	b2db      	uxtb	r3, r3
 8013548:	2b00      	cmp	r3, #0
 801354a:	d103      	bne.n	8013554 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	220b      	movs	r2, #11
 8013550:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013552:	e058      	b.n	8013606 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8013554:	7bbb      	ldrb	r3, [r7, #14]
 8013556:	b2db      	uxtb	r3, r3
 8013558:	2b02      	cmp	r3, #2
 801355a:	d154      	bne.n	8013606 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	220d      	movs	r2, #13
 8013560:	701a      	strb	r2, [r3, #0]
      break;
 8013562:	e050      	b.n	8013606 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	220d      	movs	r2, #13
 8013568:	701a      	strb	r2, [r3, #0]
      break;
 801356a:	e04c      	b.n	8013606 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013572:	2b00      	cmp	r3, #0
 8013574:	d049      	beq.n	801360a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	4798      	blx	r3
      }
      break;
 8013582:	e042      	b.n	801360a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff fd47 	bl	8013020 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2200      	movs	r2, #0
 80135ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d005      	beq.n	80135c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80135c0:	2105      	movs	r1, #5
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d107      	bne.n	80135e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2200      	movs	r2, #0
 80135d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff fe1f 	bl	801321e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80135e0:	e014      	b.n	801360c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f004 fe08 	bl	80181f8 <USBH_LL_Start>
      break;
 80135e8:	e010      	b.n	801360c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80135ea:	bf00      	nop
 80135ec:	e00e      	b.n	801360c <USBH_Process+0x3cc>
      break;
 80135ee:	bf00      	nop
 80135f0:	e00c      	b.n	801360c <USBH_Process+0x3cc>
      break;
 80135f2:	bf00      	nop
 80135f4:	e00a      	b.n	801360c <USBH_Process+0x3cc>
    break;
 80135f6:	bf00      	nop
 80135f8:	e008      	b.n	801360c <USBH_Process+0x3cc>
      break;
 80135fa:	bf00      	nop
 80135fc:	e006      	b.n	801360c <USBH_Process+0x3cc>
      break;
 80135fe:	bf00      	nop
 8013600:	e004      	b.n	801360c <USBH_Process+0x3cc>
      break;
 8013602:	bf00      	nop
 8013604:	e002      	b.n	801360c <USBH_Process+0x3cc>
      break;
 8013606:	bf00      	nop
 8013608:	e000      	b.n	801360c <USBH_Process+0x3cc>
      break;
 801360a:	bf00      	nop
  }
  return USBH_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop

08013618 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af04      	add	r7, sp, #16
 801361e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013620:	2301      	movs	r3, #1
 8013622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013624:	2301      	movs	r3, #1
 8013626:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	785b      	ldrb	r3, [r3, #1]
 801362c:	2b07      	cmp	r3, #7
 801362e:	f200 81c1 	bhi.w	80139b4 <USBH_HandleEnum+0x39c>
 8013632:	a201      	add	r2, pc, #4	; (adr r2, 8013638 <USBH_HandleEnum+0x20>)
 8013634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013638:	08013659 	.word	0x08013659
 801363c:	08013717 	.word	0x08013717
 8013640:	08013781 	.word	0x08013781
 8013644:	0801380f 	.word	0x0801380f
 8013648:	08013879 	.word	0x08013879
 801364c:	080138e9 	.word	0x080138e9
 8013650:	0801392f 	.word	0x0801392f
 8013654:	08013975 	.word	0x08013975
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013658:	2108      	movs	r1, #8
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 fa50 	bl	8013b00 <USBH_Get_DevDesc>
 8013660:	4603      	mov	r3, r0
 8013662:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013664:	7bbb      	ldrb	r3, [r7, #14]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d130      	bne.n	80136cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2201      	movs	r2, #1
 8013678:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7919      	ldrb	r1, [r3, #4]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801368e:	b292      	uxth	r2, r2
 8013690:	9202      	str	r2, [sp, #8]
 8013692:	2200      	movs	r2, #0
 8013694:	9201      	str	r2, [sp, #4]
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	4603      	mov	r3, r0
 801369a:	2280      	movs	r2, #128	; 0x80
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f001 f83f 	bl	8014720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	7959      	ldrb	r1, [r3, #5]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80136b6:	b292      	uxth	r2, r2
 80136b8:	9202      	str	r2, [sp, #8]
 80136ba:	2200      	movs	r2, #0
 80136bc:	9201      	str	r2, [sp, #4]
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	4603      	mov	r3, r0
 80136c2:	2200      	movs	r2, #0
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f001 f82b 	bl	8014720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80136ca:	e175      	b.n	80139b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80136cc:	7bbb      	ldrb	r3, [r7, #14]
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	f040 8172 	bne.w	80139b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80136da:	3301      	adds	r3, #1
 80136dc:	b2da      	uxtb	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80136ea:	2b03      	cmp	r3, #3
 80136ec:	d903      	bls.n	80136f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	220d      	movs	r2, #13
 80136f2:	701a      	strb	r2, [r3, #0]
      break;
 80136f4:	e160      	b.n	80139b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	795b      	ldrb	r3, [r3, #5]
 80136fa:	4619      	mov	r1, r3
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f001 f85f 	bl	80147c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	791b      	ldrb	r3, [r3, #4]
 8013706:	4619      	mov	r1, r3
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f001 f859 	bl	80147c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2200      	movs	r2, #0
 8013712:	701a      	strb	r2, [r3, #0]
      break;
 8013714:	e150      	b.n	80139b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013716:	2112      	movs	r1, #18
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f000 f9f1 	bl	8013b00 <USBH_Get_DevDesc>
 801371e:	4603      	mov	r3, r0
 8013720:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013722:	7bbb      	ldrb	r3, [r7, #14]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d103      	bne.n	8013730 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2202      	movs	r2, #2
 801372c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801372e:	e145      	b.n	80139bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013730:	7bbb      	ldrb	r3, [r7, #14]
 8013732:	2b03      	cmp	r3, #3
 8013734:	f040 8142 	bne.w	80139bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801373e:	3301      	adds	r3, #1
 8013740:	b2da      	uxtb	r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801374e:	2b03      	cmp	r3, #3
 8013750:	d903      	bls.n	801375a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	220d      	movs	r2, #13
 8013756:	701a      	strb	r2, [r3, #0]
      break;
 8013758:	e130      	b.n	80139bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	795b      	ldrb	r3, [r3, #5]
 801375e:	4619      	mov	r1, r3
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f001 f82d 	bl	80147c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	791b      	ldrb	r3, [r3, #4]
 801376a:	4619      	mov	r1, r3
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f001 f827 	bl	80147c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2200      	movs	r2, #0
 8013776:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2200      	movs	r2, #0
 801377c:	701a      	strb	r2, [r3, #0]
      break;
 801377e:	e11d      	b.n	80139bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8013780:	2101      	movs	r1, #1
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 fa68 	bl	8013c58 <USBH_SetAddress>
 8013788:	4603      	mov	r3, r0
 801378a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801378c:	7bbb      	ldrb	r3, [r7, #14]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d132      	bne.n	80137f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8013792:	2002      	movs	r0, #2
 8013794:	f004 fe94 	bl	80184c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2201      	movs	r2, #1
 801379c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2203      	movs	r2, #3
 80137a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	7919      	ldrb	r1, [r3, #4]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80137ba:	b292      	uxth	r2, r2
 80137bc:	9202      	str	r2, [sp, #8]
 80137be:	2200      	movs	r2, #0
 80137c0:	9201      	str	r2, [sp, #4]
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	4603      	mov	r3, r0
 80137c6:	2280      	movs	r2, #128	; 0x80
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 ffa9 	bl	8014720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	7959      	ldrb	r1, [r3, #5]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80137e2:	b292      	uxth	r2, r2
 80137e4:	9202      	str	r2, [sp, #8]
 80137e6:	2200      	movs	r2, #0
 80137e8:	9201      	str	r2, [sp, #4]
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	4603      	mov	r3, r0
 80137ee:	2200      	movs	r2, #0
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 ff95 	bl	8014720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80137f6:	e0e3      	b.n	80139c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80137f8:	7bbb      	ldrb	r3, [r7, #14]
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	f040 80e0 	bne.w	80139c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	220d      	movs	r2, #13
 8013804:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2200      	movs	r2, #0
 801380a:	705a      	strb	r2, [r3, #1]
      break;
 801380c:	e0d8      	b.n	80139c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801380e:	2109      	movs	r1, #9
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f99d 	bl	8013b50 <USBH_Get_CfgDesc>
 8013816:	4603      	mov	r3, r0
 8013818:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801381a:	7bbb      	ldrb	r3, [r7, #14]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d103      	bne.n	8013828 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2204      	movs	r2, #4
 8013824:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013826:	e0cd      	b.n	80139c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013828:	7bbb      	ldrb	r3, [r7, #14]
 801382a:	2b03      	cmp	r3, #3
 801382c:	f040 80ca 	bne.w	80139c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013836:	3301      	adds	r3, #1
 8013838:	b2da      	uxtb	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013846:	2b03      	cmp	r3, #3
 8013848:	d903      	bls.n	8013852 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	220d      	movs	r2, #13
 801384e:	701a      	strb	r2, [r3, #0]
      break;
 8013850:	e0b8      	b.n	80139c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	795b      	ldrb	r3, [r3, #5]
 8013856:	4619      	mov	r1, r3
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f000 ffb1 	bl	80147c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	791b      	ldrb	r3, [r3, #4]
 8013862:	4619      	mov	r1, r3
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f000 ffab 	bl	80147c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2200      	movs	r2, #0
 801386e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2200      	movs	r2, #0
 8013874:	701a      	strb	r2, [r3, #0]
      break;
 8013876:	e0a5      	b.n	80139c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 f965 	bl	8013b50 <USBH_Get_CfgDesc>
 8013886:	4603      	mov	r3, r0
 8013888:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801388a:	7bbb      	ldrb	r3, [r7, #14]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d103      	bne.n	8013898 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2205      	movs	r2, #5
 8013894:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013896:	e097      	b.n	80139c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013898:	7bbb      	ldrb	r3, [r7, #14]
 801389a:	2b03      	cmp	r3, #3
 801389c:	f040 8094 	bne.w	80139c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80138a6:	3301      	adds	r3, #1
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80138b6:	2b03      	cmp	r3, #3
 80138b8:	d903      	bls.n	80138c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	220d      	movs	r2, #13
 80138be:	701a      	strb	r2, [r3, #0]
      break;
 80138c0:	e082      	b.n	80139c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	795b      	ldrb	r3, [r3, #5]
 80138c6:	4619      	mov	r1, r3
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f000 ff79 	bl	80147c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	791b      	ldrb	r3, [r3, #4]
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f000 ff73 	bl	80147c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2200      	movs	r2, #0
 80138de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2200      	movs	r2, #0
 80138e4:	701a      	strb	r2, [r3, #0]
      break;
 80138e6:	e06f      	b.n	80139c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d019      	beq.n	8013926 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80138fe:	23ff      	movs	r3, #255	; 0xff
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f000 f949 	bl	8013b98 <USBH_Get_StringDesc>
 8013906:	4603      	mov	r3, r0
 8013908:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801390a:	7bbb      	ldrb	r3, [r7, #14]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d103      	bne.n	8013918 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2206      	movs	r2, #6
 8013914:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013916:	e059      	b.n	80139cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013918:	7bbb      	ldrb	r3, [r7, #14]
 801391a:	2b03      	cmp	r3, #3
 801391c:	d156      	bne.n	80139cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2206      	movs	r2, #6
 8013922:	705a      	strb	r2, [r3, #1]
      break;
 8013924:	e052      	b.n	80139cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2206      	movs	r2, #6
 801392a:	705a      	strb	r2, [r3, #1]
      break;
 801392c:	e04e      	b.n	80139cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8013934:	2b00      	cmp	r3, #0
 8013936:	d019      	beq.n	801396c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013944:	23ff      	movs	r3, #255	; 0xff
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 f926 	bl	8013b98 <USBH_Get_StringDesc>
 801394c:	4603      	mov	r3, r0
 801394e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013950:	7bbb      	ldrb	r3, [r7, #14]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d103      	bne.n	801395e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2207      	movs	r2, #7
 801395a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801395c:	e038      	b.n	80139d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801395e:	7bbb      	ldrb	r3, [r7, #14]
 8013960:	2b03      	cmp	r3, #3
 8013962:	d135      	bne.n	80139d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2207      	movs	r2, #7
 8013968:	705a      	strb	r2, [r3, #1]
      break;
 801396a:	e031      	b.n	80139d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2207      	movs	r2, #7
 8013970:	705a      	strb	r2, [r3, #1]
      break;
 8013972:	e02d      	b.n	80139d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801397a:	2b00      	cmp	r3, #0
 801397c:	d017      	beq.n	80139ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801398a:	23ff      	movs	r3, #255	; 0xff
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 f903 	bl	8013b98 <USBH_Get_StringDesc>
 8013992:	4603      	mov	r3, r0
 8013994:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013996:	7bbb      	ldrb	r3, [r7, #14]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d102      	bne.n	80139a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801399c:	2300      	movs	r3, #0
 801399e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80139a0:	e018      	b.n	80139d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80139a2:	7bbb      	ldrb	r3, [r7, #14]
 80139a4:	2b03      	cmp	r3, #3
 80139a6:	d115      	bne.n	80139d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	73fb      	strb	r3, [r7, #15]
      break;
 80139ac:	e012      	b.n	80139d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80139ae:	2300      	movs	r3, #0
 80139b0:	73fb      	strb	r3, [r7, #15]
      break;
 80139b2:	e00f      	b.n	80139d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80139b4:	bf00      	nop
 80139b6:	e00e      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139b8:	bf00      	nop
 80139ba:	e00c      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139bc:	bf00      	nop
 80139be:	e00a      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139c0:	bf00      	nop
 80139c2:	e008      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139c4:	bf00      	nop
 80139c6:	e006      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139c8:	bf00      	nop
 80139ca:	e004      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139cc:	bf00      	nop
 80139ce:	e002      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139d0:	bf00      	nop
 80139d2:	e000      	b.n	80139d6 <USBH_HandleEnum+0x3be>
      break;
 80139d4:	bf00      	nop
  }
  return Status;
 80139d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	683a      	ldr	r2, [r7, #0]
 80139ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80139f2:	bf00      	nop
 80139f4:	370c      	adds	r7, #12
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr

080139fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b082      	sub	sp, #8
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013a0c:	1c5a      	adds	r2, r3, #1
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 f804 	bl	8013a22 <USBH_HandleSof>
}
 8013a1a:	bf00      	nop
 8013a1c:	3708      	adds	r7, #8
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013a22:	b580      	push	{r7, lr}
 8013a24:	b082      	sub	sp, #8
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	2b0b      	cmp	r3, #11
 8013a32:	d10a      	bne.n	8013a4a <USBH_HandleSof+0x28>
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d005      	beq.n	8013a4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a44:	699b      	ldr	r3, [r3, #24]
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	4798      	blx	r3
  }
}
 8013a4a:	bf00      	nop
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}

08013a52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013a52:	b480      	push	{r7}
 8013a54:	b083      	sub	sp, #12
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8013a62:	bf00      	nop
}
 8013a64:	370c      	adds	r7, #12
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	4770      	bx	lr

08013a6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013a6e:	b480      	push	{r7}
 8013a70:	b083      	sub	sp, #12
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8013a7e:	bf00      	nop
}
 8013a80:	370c      	adds	r7, #12
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr

08013a8a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013a8a:	b480      	push	{r7}
 8013a8c:	b083      	sub	sp, #12
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2201      	movs	r2, #1
 8013a96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8013aaa:	2300      	movs	r3, #0
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f004 fba8 	bl	801822e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	791b      	ldrb	r3, [r3, #4]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f000 fe6b 	bl	80147c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	795b      	ldrb	r3, [r3, #5]
 8013aee:	4619      	mov	r1, r3
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f000 fe65 	bl	80147c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8013af6:	2300      	movs	r3, #0
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b086      	sub	sp, #24
 8013b04:	af02      	add	r7, sp, #8
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8013b12:	78fb      	ldrb	r3, [r7, #3]
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013b1e:	2100      	movs	r1, #0
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 f864 	bl	8013bee <USBH_GetDescriptor>
 8013b26:	4603      	mov	r3, r0
 8013b28:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10a      	bne.n	8013b46 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f203 3026 	addw	r0, r3, #806	; 0x326
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013b3c:	78fa      	ldrb	r2, [r7, #3]
 8013b3e:	b292      	uxth	r2, r2
 8013b40:	4619      	mov	r1, r3
 8013b42:	f000 f919 	bl	8013d78 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af02      	add	r7, sp, #8
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	460b      	mov	r3, r1
 8013b5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	331c      	adds	r3, #28
 8013b60:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013b62:	887b      	ldrh	r3, [r7, #2]
 8013b64:	9300      	str	r3, [sp, #0]
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f83d 	bl	8013bee <USBH_GetDescriptor>
 8013b74:	4603      	mov	r3, r0
 8013b76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013b78:	7bfb      	ldrb	r3, [r7, #15]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d107      	bne.n	8013b8e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013b7e:	887b      	ldrh	r3, [r7, #2]
 8013b80:	461a      	mov	r2, r3
 8013b82:	68b9      	ldr	r1, [r7, #8]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 f987 	bl	8013e98 <USBH_ParseCfgDesc>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3710      	adds	r7, #16
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b088      	sub	sp, #32
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	607a      	str	r2, [r7, #4]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	72fb      	strb	r3, [r7, #11]
 8013ba8:	4613      	mov	r3, r2
 8013baa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8013bac:	7afb      	ldrb	r3, [r7, #11]
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013bb4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8013bbc:	893b      	ldrh	r3, [r7, #8]
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f000 f812 	bl	8013bee <USBH_GetDescriptor>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013bce:	7dfb      	ldrb	r3, [r7, #23]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d107      	bne.n	8013be4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013bda:	893a      	ldrh	r2, [r7, #8]
 8013bdc:	6879      	ldr	r1, [r7, #4]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f000 fafe 	bl	80141e0 <USBH_ParseStringDesc>
  }

  return status;
 8013be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}

08013bee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8013bee:	b580      	push	{r7, lr}
 8013bf0:	b084      	sub	sp, #16
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	60f8      	str	r0, [r7, #12]
 8013bf6:	607b      	str	r3, [r7, #4]
 8013bf8:	460b      	mov	r3, r1
 8013bfa:	72fb      	strb	r3, [r7, #11]
 8013bfc:	4613      	mov	r3, r2
 8013bfe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	789b      	ldrb	r3, [r3, #2]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d11c      	bne.n	8013c42 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013c08:	7afb      	ldrb	r3, [r7, #11]
 8013c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c0e:	b2da      	uxtb	r2, r3
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2206      	movs	r2, #6
 8013c18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	893a      	ldrh	r2, [r7, #8]
 8013c1e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013c20:	893b      	ldrh	r3, [r7, #8]
 8013c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c2a:	d104      	bne.n	8013c36 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f240 4209 	movw	r2, #1033	; 0x409
 8013c32:	829a      	strh	r2, [r3, #20]
 8013c34:	e002      	b.n	8013c3c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	8b3a      	ldrh	r2, [r7, #24]
 8013c40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013c42:	8b3b      	ldrh	r3, [r7, #24]
 8013c44:	461a      	mov	r2, r3
 8013c46:	6879      	ldr	r1, [r7, #4]
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f000 fb17 	bl	801427c <USBH_CtlReq>
 8013c4e:	4603      	mov	r3, r0
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3710      	adds	r7, #16
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	460b      	mov	r3, r1
 8013c62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	789b      	ldrb	r3, [r3, #2]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d10f      	bne.n	8013c8c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2205      	movs	r2, #5
 8013c76:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013c78:	78fb      	ldrb	r3, [r7, #3]
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	2100      	movs	r1, #0
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 faf3 	bl	801427c <USBH_CtlReq>
 8013c96:	4603      	mov	r3, r0
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	789b      	ldrb	r3, [r3, #2]
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d10e      	bne.n	8013cd2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2209      	movs	r2, #9
 8013cbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	887a      	ldrh	r2, [r7, #2]
 8013cc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 fad0 	bl	801427c <USBH_CtlReq>
 8013cdc:	4603      	mov	r3, r0
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3708      	adds	r7, #8
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b082      	sub	sp, #8
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
 8013cee:	460b      	mov	r3, r1
 8013cf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	789b      	ldrb	r3, [r3, #2]
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d10f      	bne.n	8013d1a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2203      	movs	r2, #3
 8013d04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013d06:	78fb      	ldrb	r3, [r7, #3]
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 faac 	bl	801427c <USBH_CtlReq>
 8013d24:	4603      	mov	r3, r0
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3708      	adds	r7, #8
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b082      	sub	sp, #8
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	460b      	mov	r3, r1
 8013d38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	789b      	ldrb	r3, [r3, #2]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d10f      	bne.n	8013d62 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2202      	movs	r2, #2
 8013d46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013d54:	78fb      	ldrb	r3, [r7, #3]
 8013d56:	b29a      	uxth	r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8013d62:	2200      	movs	r2, #0
 8013d64:	2100      	movs	r1, #0
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f000 fa88 	bl	801427c <USBH_CtlReq>
 8013d6c:	4603      	mov	r3, r0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
	...

08013d78 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8013d78:	b480      	push	{r7}
 8013d7a:	b085      	sub	sp, #20
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	4613      	mov	r3, r2
 8013d84:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	781a      	ldrb	r2, [r3, #0]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	785a      	ldrb	r2, [r3, #1]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	3302      	adds	r3, #2
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	b29a      	uxth	r2, r3
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	3303      	adds	r3, #3
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	021b      	lsls	r3, r3, #8
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	4313      	orrs	r3, r2
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	791a      	ldrb	r2, [r3, #4]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	795a      	ldrb	r2, [r3, #5]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	799a      	ldrb	r2, [r3, #6]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	79da      	ldrb	r2, [r3, #7]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	79db      	ldrb	r3, [r3, #7]
 8013dd6:	2b20      	cmp	r3, #32
 8013dd8:	dc0e      	bgt.n	8013df8 <USBH_ParseDevDesc+0x80>
 8013dda:	2b08      	cmp	r3, #8
 8013ddc:	db13      	blt.n	8013e06 <USBH_ParseDevDesc+0x8e>
 8013dde:	3b08      	subs	r3, #8
 8013de0:	2201      	movs	r2, #1
 8013de2:	409a      	lsls	r2, r3
 8013de4:	4b2b      	ldr	r3, [pc, #172]	; (8013e94 <USBH_ParseDevDesc+0x11c>)
 8013de6:	4013      	ands	r3, r2
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bf14      	ite	ne
 8013dec:	2301      	movne	r3, #1
 8013dee:	2300      	moveq	r3, #0
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d102      	bne.n	8013dfc <USBH_ParseDevDesc+0x84>
 8013df6:	e006      	b.n	8013e06 <USBH_ParseDevDesc+0x8e>
 8013df8:	2b40      	cmp	r3, #64	; 0x40
 8013dfa:	d104      	bne.n	8013e06 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	79da      	ldrb	r2, [r3, #7]
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	71da      	strb	r2, [r3, #7]
      break;
 8013e04:	e003      	b.n	8013e0e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2240      	movs	r2, #64	; 0x40
 8013e0a:	71da      	strb	r2, [r3, #7]
      break;
 8013e0c:	bf00      	nop
  }

  if (length > 8U)
 8013e0e:	88fb      	ldrh	r3, [r7, #6]
 8013e10:	2b08      	cmp	r3, #8
 8013e12:	d939      	bls.n	8013e88 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	3308      	adds	r3, #8
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	b29a      	uxth	r2, r3
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	3309      	adds	r3, #9
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	021b      	lsls	r3, r3, #8
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	330a      	adds	r3, #10
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	b29a      	uxth	r2, r3
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	330b      	adds	r3, #11
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	021b      	lsls	r3, r3, #8
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	4313      	orrs	r3, r2
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	330c      	adds	r3, #12
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	330d      	adds	r3, #13
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	021b      	lsls	r3, r3, #8
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	4313      	orrs	r3, r2
 8013e62:	b29a      	uxth	r2, r3
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	7b9a      	ldrb	r2, [r3, #14]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	7bda      	ldrb	r2, [r3, #15]
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	7c1a      	ldrb	r2, [r3, #16]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	7c5a      	ldrb	r2, [r3, #17]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	745a      	strb	r2, [r3, #17]
  }
}
 8013e88:	bf00      	nop
 8013e8a:	3714      	adds	r7, #20
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr
 8013e94:	01000101 	.word	0x01000101

08013e98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08c      	sub	sp, #48	; 0x30
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013eac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	781a      	ldrb	r2, [r3, #0]
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	785a      	ldrb	r2, [r3, #1]
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	3302      	adds	r3, #2
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	3303      	adds	r3, #3
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	021b      	lsls	r3, r3, #8
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	4313      	orrs	r3, r2
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ef4:	bf28      	it	cs
 8013ef6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	6a3b      	ldr	r3, [r7, #32]
 8013efe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	791a      	ldrb	r2, [r3, #4]
 8013f04:	6a3b      	ldr	r3, [r7, #32]
 8013f06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	795a      	ldrb	r2, [r3, #5]
 8013f0c:	6a3b      	ldr	r3, [r7, #32]
 8013f0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	799a      	ldrb	r2, [r3, #6]
 8013f14:	6a3b      	ldr	r3, [r7, #32]
 8013f16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	79da      	ldrb	r2, [r3, #7]
 8013f1c:	6a3b      	ldr	r3, [r7, #32]
 8013f1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	7a1a      	ldrb	r2, [r3, #8]
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8013f28:	6a3b      	ldr	r3, [r7, #32]
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	2b09      	cmp	r3, #9
 8013f2e:	d002      	beq.n	8013f36 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8013f30:	6a3b      	ldr	r3, [r7, #32]
 8013f32:	2209      	movs	r2, #9
 8013f34:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013f36:	88fb      	ldrh	r3, [r7, #6]
 8013f38:	2b09      	cmp	r3, #9
 8013f3a:	f240 8099 	bls.w	8014070 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8013f3e:	2309      	movs	r3, #9
 8013f40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013f42:	2300      	movs	r3, #0
 8013f44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013f46:	e07d      	b.n	8014044 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013f48:	f107 0316 	add.w	r3, r7, #22
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f50:	f000 f979 	bl	8014246 <USBH_GetNextDesc>
 8013f54:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8013f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f58:	785b      	ldrb	r3, [r3, #1]
 8013f5a:	2b04      	cmp	r3, #4
 8013f5c:	d172      	bne.n	8014044 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8013f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	2b09      	cmp	r3, #9
 8013f64:	d002      	beq.n	8013f6c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8013f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f68:	2209      	movs	r2, #9
 8013f6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8013f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f70:	221a      	movs	r2, #26
 8013f72:	fb02 f303 	mul.w	r3, r2, r3
 8013f76:	3308      	adds	r3, #8
 8013f78:	6a3a      	ldr	r2, [r7, #32]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	3302      	adds	r3, #2
 8013f7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f82:	69f8      	ldr	r0, [r7, #28]
 8013f84:	f000 f87a 	bl	801407c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013f92:	e03f      	b.n	8014014 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013f94:	f107 0316 	add.w	r3, r7, #22
 8013f98:	4619      	mov	r1, r3
 8013f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f9c:	f000 f953 	bl	8014246 <USBH_GetNextDesc>
 8013fa0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa4:	785b      	ldrb	r3, [r3, #1]
 8013fa6:	2b05      	cmp	r3, #5
 8013fa8:	d134      	bne.n	8014014 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	795b      	ldrb	r3, [r3, #5]
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d10f      	bne.n	8013fd2 <USBH_ParseCfgDesc+0x13a>
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	799b      	ldrb	r3, [r3, #6]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d10b      	bne.n	8013fd2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	79db      	ldrb	r3, [r3, #7]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d10b      	bne.n	8013fda <USBH_ParseCfgDesc+0x142>
 8013fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	2b09      	cmp	r3, #9
 8013fc8:	d007      	beq.n	8013fda <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8013fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fcc:	2209      	movs	r2, #9
 8013fce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013fd0:	e003      	b.n	8013fda <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8013fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd4:	2207      	movs	r2, #7
 8013fd6:	701a      	strb	r2, [r3, #0]
 8013fd8:	e000      	b.n	8013fdc <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013fda:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8013fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fe0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013fe4:	3201      	adds	r2, #1
 8013fe6:	00d2      	lsls	r2, r2, #3
 8013fe8:	211a      	movs	r1, #26
 8013fea:	fb01 f303 	mul.w	r3, r1, r3
 8013fee:	4413      	add	r3, r2
 8013ff0:	3308      	adds	r3, #8
 8013ff2:	6a3a      	ldr	r2, [r7, #32]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	3304      	adds	r3, #4
 8013ff8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8013ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ffc:	69b9      	ldr	r1, [r7, #24]
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 f86c 	bl	80140dc <USBH_ParseEPDesc>
 8014004:	4603      	mov	r3, r0
 8014006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801400a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801400e:	3301      	adds	r3, #1
 8014010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	791b      	ldrb	r3, [r3, #4]
 8014018:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801401c:	429a      	cmp	r2, r3
 801401e:	d204      	bcs.n	801402a <USBH_ParseCfgDesc+0x192>
 8014020:	6a3b      	ldr	r3, [r7, #32]
 8014022:	885a      	ldrh	r2, [r3, #2]
 8014024:	8afb      	ldrh	r3, [r7, #22]
 8014026:	429a      	cmp	r2, r3
 8014028:	d8b4      	bhi.n	8013f94 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	791b      	ldrb	r3, [r3, #4]
 801402e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014032:	429a      	cmp	r2, r3
 8014034:	d201      	bcs.n	801403a <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8014036:	2303      	movs	r3, #3
 8014038:	e01c      	b.n	8014074 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801403a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801403e:	3301      	adds	r3, #1
 8014040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014048:	2b01      	cmp	r3, #1
 801404a:	d805      	bhi.n	8014058 <USBH_ParseCfgDesc+0x1c0>
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	885a      	ldrh	r2, [r3, #2]
 8014050:	8afb      	ldrh	r3, [r7, #22]
 8014052:	429a      	cmp	r2, r3
 8014054:	f63f af78 	bhi.w	8013f48 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8014058:	6a3b      	ldr	r3, [r7, #32]
 801405a:	791b      	ldrb	r3, [r3, #4]
 801405c:	2b02      	cmp	r3, #2
 801405e:	bf28      	it	cs
 8014060:	2302      	movcs	r3, #2
 8014062:	b2db      	uxtb	r3, r3
 8014064:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014068:	429a      	cmp	r2, r3
 801406a:	d201      	bcs.n	8014070 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 801406c:	2303      	movs	r3, #3
 801406e:	e001      	b.n	8014074 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8014070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014074:	4618      	mov	r0, r3
 8014076:	3730      	adds	r7, #48	; 0x30
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	781a      	ldrb	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	785a      	ldrb	r2, [r3, #1]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	789a      	ldrb	r2, [r3, #2]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	78da      	ldrb	r2, [r3, #3]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	791a      	ldrb	r2, [r3, #4]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	795a      	ldrb	r2, [r3, #5]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	799a      	ldrb	r2, [r3, #6]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	79da      	ldrb	r2, [r3, #7]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	7a1a      	ldrb	r2, [r3, #8]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	721a      	strb	r2, [r3, #8]
}
 80140ce:	bf00      	nop
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr
	...

080140dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 80140dc:	b480      	push	{r7}
 80140de:	b087      	sub	sp, #28
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80140e8:	2300      	movs	r3, #0
 80140ea:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	781a      	ldrb	r2, [r3, #0]
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	785a      	ldrb	r2, [r3, #1]
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	789a      	ldrb	r2, [r3, #2]
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	78da      	ldrb	r2, [r3, #3]
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	3304      	adds	r3, #4
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	b29a      	uxth	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	3305      	adds	r3, #5
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	b29b      	uxth	r3, r3
 801411c:	021b      	lsls	r3, r3, #8
 801411e:	b29b      	uxth	r3, r3
 8014120:	4313      	orrs	r3, r2
 8014122:	b29a      	uxth	r2, r3
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	799a      	ldrb	r2, [r3, #6]
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	889b      	ldrh	r3, [r3, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d102      	bne.n	801413e <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8014138:	2303      	movs	r3, #3
 801413a:	75fb      	strb	r3, [r7, #23]
 801413c:	e00d      	b.n	801415a <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	889a      	ldrh	r2, [r3, #4]
 8014142:	4b26      	ldr	r3, [pc, #152]	; (80141dc <USBH_ParseEPDesc+0x100>)
 8014144:	4013      	ands	r3, r2
 8014146:	b29a      	uxth	r2, r3
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	889b      	ldrh	r3, [r3, #4]
 8014150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014154:	b29a      	uxth	r2, r3
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014160:	2b00      	cmp	r3, #0
 8014162:	d116      	bne.n	8014192 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	78db      	ldrb	r3, [r3, #3]
 8014168:	f003 0303 	and.w	r3, r3, #3
 801416c:	2b01      	cmp	r3, #1
 801416e:	d005      	beq.n	801417c <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	78db      	ldrb	r3, [r3, #3]
 8014174:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014178:	2b03      	cmp	r3, #3
 801417a:	d127      	bne.n	80141cc <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	799b      	ldrb	r3, [r3, #6]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d003      	beq.n	801418c <USBH_ParseEPDesc+0xb0>
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	799b      	ldrb	r3, [r3, #6]
 8014188:	2b10      	cmp	r3, #16
 801418a:	d91f      	bls.n	80141cc <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801418c:	2303      	movs	r3, #3
 801418e:	75fb      	strb	r3, [r7, #23]
 8014190:	e01c      	b.n	80141cc <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	78db      	ldrb	r3, [r3, #3]
 8014196:	f003 0303 	and.w	r3, r3, #3
 801419a:	2b01      	cmp	r3, #1
 801419c:	d10a      	bne.n	80141b4 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	799b      	ldrb	r3, [r3, #6]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d003      	beq.n	80141ae <USBH_ParseEPDesc+0xd2>
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	799b      	ldrb	r3, [r3, #6]
 80141aa:	2b10      	cmp	r3, #16
 80141ac:	d90e      	bls.n	80141cc <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80141ae:	2303      	movs	r3, #3
 80141b0:	75fb      	strb	r3, [r7, #23]
 80141b2:	e00b      	b.n	80141cc <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	78db      	ldrb	r3, [r3, #3]
 80141b8:	f003 0303 	and.w	r3, r3, #3
 80141bc:	2b03      	cmp	r3, #3
 80141be:	d105      	bne.n	80141cc <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	799b      	ldrb	r3, [r3, #6]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d101      	bne.n	80141cc <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80141c8:	2303      	movs	r3, #3
 80141ca:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80141cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	371c      	adds	r7, #28
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	fffff800 	.word	0xfffff800

080141e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b087      	sub	sp, #28
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	4613      	mov	r3, r2
 80141ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	3301      	adds	r3, #1
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	2b03      	cmp	r3, #3
 80141f6:	d120      	bne.n	801423a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	1e9a      	subs	r2, r3, #2
 80141fe:	88fb      	ldrh	r3, [r7, #6]
 8014200:	4293      	cmp	r3, r2
 8014202:	bf28      	it	cs
 8014204:	4613      	movcs	r3, r2
 8014206:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	3302      	adds	r3, #2
 801420c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801420e:	2300      	movs	r3, #0
 8014210:	82fb      	strh	r3, [r7, #22]
 8014212:	e00b      	b.n	801422c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014214:	8afb      	ldrh	r3, [r7, #22]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	4413      	add	r3, r2
 801421a:	781a      	ldrb	r2, [r3, #0]
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	3301      	adds	r3, #1
 8014224:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014226:	8afb      	ldrh	r3, [r7, #22]
 8014228:	3302      	adds	r3, #2
 801422a:	82fb      	strh	r3, [r7, #22]
 801422c:	8afa      	ldrh	r2, [r7, #22]
 801422e:	8abb      	ldrh	r3, [r7, #20]
 8014230:	429a      	cmp	r2, r3
 8014232:	d3ef      	bcc.n	8014214 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	2200      	movs	r2, #0
 8014238:	701a      	strb	r2, [r3, #0]
  }
}
 801423a:	bf00      	nop
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014246:	b480      	push	{r7}
 8014248:	b085      	sub	sp, #20
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	881a      	ldrh	r2, [r3, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	b29b      	uxth	r3, r3
 801425a:	4413      	add	r3, r2
 801425c:	b29a      	uxth	r2, r3
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	4413      	add	r3, r2
 801426c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801426e:	68fb      	ldr	r3, [r7, #12]
}
 8014270:	4618      	mov	r0, r3
 8014272:	3714      	adds	r7, #20
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b086      	sub	sp, #24
 8014280:	af00      	add	r7, sp, #0
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	4613      	mov	r3, r2
 8014288:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801428a:	2301      	movs	r3, #1
 801428c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	789b      	ldrb	r3, [r3, #2]
 8014292:	2b01      	cmp	r3, #1
 8014294:	d002      	beq.n	801429c <USBH_CtlReq+0x20>
 8014296:	2b02      	cmp	r3, #2
 8014298:	d00f      	beq.n	80142ba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801429a:	e027      	b.n	80142ec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	68ba      	ldr	r2, [r7, #8]
 80142a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	88fa      	ldrh	r2, [r7, #6]
 80142a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2201      	movs	r2, #1
 80142ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	2202      	movs	r2, #2
 80142b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80142b4:	2301      	movs	r3, #1
 80142b6:	75fb      	strb	r3, [r7, #23]
      break;
 80142b8:	e018      	b.n	80142ec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f000 f81c 	bl	80142f8 <USBH_HandleControl>
 80142c0:	4603      	mov	r3, r0
 80142c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d002      	beq.n	80142d0 <USBH_CtlReq+0x54>
 80142ca:	7dfb      	ldrb	r3, [r7, #23]
 80142cc:	2b03      	cmp	r3, #3
 80142ce:	d106      	bne.n	80142de <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2201      	movs	r2, #1
 80142d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	2200      	movs	r2, #0
 80142da:	761a      	strb	r2, [r3, #24]
      break;
 80142dc:	e005      	b.n	80142ea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80142de:	7dfb      	ldrb	r3, [r7, #23]
 80142e0:	2b02      	cmp	r3, #2
 80142e2:	d102      	bne.n	80142ea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	2201      	movs	r2, #1
 80142e8:	709a      	strb	r2, [r3, #2]
      break;
 80142ea:	bf00      	nop
  }
  return status;
 80142ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3718      	adds	r7, #24
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
	...

080142f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b086      	sub	sp, #24
 80142fc:	af02      	add	r7, sp, #8
 80142fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014300:	2301      	movs	r3, #1
 8014302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014304:	2300      	movs	r3, #0
 8014306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	7e1b      	ldrb	r3, [r3, #24]
 801430c:	3b01      	subs	r3, #1
 801430e:	2b0a      	cmp	r3, #10
 8014310:	f200 8156 	bhi.w	80145c0 <USBH_HandleControl+0x2c8>
 8014314:	a201      	add	r2, pc, #4	; (adr r2, 801431c <USBH_HandleControl+0x24>)
 8014316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801431a:	bf00      	nop
 801431c:	08014349 	.word	0x08014349
 8014320:	08014363 	.word	0x08014363
 8014324:	080143cd 	.word	0x080143cd
 8014328:	080143f3 	.word	0x080143f3
 801432c:	0801442b 	.word	0x0801442b
 8014330:	08014455 	.word	0x08014455
 8014334:	080144a7 	.word	0x080144a7
 8014338:	080144c9 	.word	0x080144c9
 801433c:	08014505 	.word	0x08014505
 8014340:	0801452b 	.word	0x0801452b
 8014344:	08014569 	.word	0x08014569
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f103 0110 	add.w	r1, r3, #16
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	795b      	ldrb	r3, [r3, #5]
 8014352:	461a      	mov	r2, r3
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 f943 	bl	80145e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2202      	movs	r2, #2
 801435e:	761a      	strb	r2, [r3, #24]
      break;
 8014360:	e139      	b.n	80145d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	795b      	ldrb	r3, [r3, #5]
 8014366:	4619      	mov	r1, r3
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f004 f84f 	bl	801840c <USBH_LL_GetURBState>
 801436e:	4603      	mov	r3, r0
 8014370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014372:	7bbb      	ldrb	r3, [r7, #14]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d11e      	bne.n	80143b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	7c1b      	ldrb	r3, [r3, #16]
 801437c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	8adb      	ldrh	r3, [r3, #22]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00a      	beq.n	80143a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801438a:	7b7b      	ldrb	r3, [r7, #13]
 801438c:	2b80      	cmp	r3, #128	; 0x80
 801438e:	d103      	bne.n	8014398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2203      	movs	r2, #3
 8014394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014396:	e115      	b.n	80145c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2205      	movs	r2, #5
 801439c:	761a      	strb	r2, [r3, #24]
      break;
 801439e:	e111      	b.n	80145c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80143a0:	7b7b      	ldrb	r3, [r7, #13]
 80143a2:	2b80      	cmp	r3, #128	; 0x80
 80143a4:	d103      	bne.n	80143ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2209      	movs	r2, #9
 80143aa:	761a      	strb	r2, [r3, #24]
      break;
 80143ac:	e10a      	b.n	80145c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2207      	movs	r2, #7
 80143b2:	761a      	strb	r2, [r3, #24]
      break;
 80143b4:	e106      	b.n	80145c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80143b6:	7bbb      	ldrb	r3, [r7, #14]
 80143b8:	2b04      	cmp	r3, #4
 80143ba:	d003      	beq.n	80143c4 <USBH_HandleControl+0xcc>
 80143bc:	7bbb      	ldrb	r3, [r7, #14]
 80143be:	2b02      	cmp	r3, #2
 80143c0:	f040 8100 	bne.w	80145c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	220b      	movs	r2, #11
 80143c8:	761a      	strb	r2, [r3, #24]
      break;
 80143ca:	e0fb      	b.n	80145c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6899      	ldr	r1, [r3, #8]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	899a      	ldrh	r2, [r3, #12]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	791b      	ldrb	r3, [r3, #4]
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f000 f93a 	bl	801465e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2204      	movs	r2, #4
 80143ee:	761a      	strb	r2, [r3, #24]
      break;
 80143f0:	e0f1      	b.n	80145d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	791b      	ldrb	r3, [r3, #4]
 80143f6:	4619      	mov	r1, r3
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f004 f807 	bl	801840c <USBH_LL_GetURBState>
 80143fe:	4603      	mov	r3, r0
 8014400:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8014402:	7bbb      	ldrb	r3, [r7, #14]
 8014404:	2b01      	cmp	r3, #1
 8014406:	d102      	bne.n	801440e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2209      	movs	r2, #9
 801440c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801440e:	7bbb      	ldrb	r3, [r7, #14]
 8014410:	2b05      	cmp	r3, #5
 8014412:	d102      	bne.n	801441a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014414:	2303      	movs	r3, #3
 8014416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014418:	e0d6      	b.n	80145c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801441a:	7bbb      	ldrb	r3, [r7, #14]
 801441c:	2b04      	cmp	r3, #4
 801441e:	f040 80d3 	bne.w	80145c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	220b      	movs	r2, #11
 8014426:	761a      	strb	r2, [r3, #24]
      break;
 8014428:	e0ce      	b.n	80145c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6899      	ldr	r1, [r3, #8]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	899a      	ldrh	r2, [r3, #12]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	795b      	ldrb	r3, [r3, #5]
 8014436:	2001      	movs	r0, #1
 8014438:	9000      	str	r0, [sp, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 f8ea 	bl	8014614 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014446:	b29a      	uxth	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2206      	movs	r2, #6
 8014450:	761a      	strb	r2, [r3, #24]
      break;
 8014452:	e0c0      	b.n	80145d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	795b      	ldrb	r3, [r3, #5]
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f003 ffd6 	bl	801840c <USBH_LL_GetURBState>
 8014460:	4603      	mov	r3, r0
 8014462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014464:	7bbb      	ldrb	r3, [r7, #14]
 8014466:	2b01      	cmp	r3, #1
 8014468:	d103      	bne.n	8014472 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2207      	movs	r2, #7
 801446e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8014470:	e0ac      	b.n	80145cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8014472:	7bbb      	ldrb	r3, [r7, #14]
 8014474:	2b05      	cmp	r3, #5
 8014476:	d105      	bne.n	8014484 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	220c      	movs	r2, #12
 801447c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801447e:	2303      	movs	r3, #3
 8014480:	73fb      	strb	r3, [r7, #15]
      break;
 8014482:	e0a3      	b.n	80145cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014484:	7bbb      	ldrb	r3, [r7, #14]
 8014486:	2b02      	cmp	r3, #2
 8014488:	d103      	bne.n	8014492 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2205      	movs	r2, #5
 801448e:	761a      	strb	r2, [r3, #24]
      break;
 8014490:	e09c      	b.n	80145cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8014492:	7bbb      	ldrb	r3, [r7, #14]
 8014494:	2b04      	cmp	r3, #4
 8014496:	f040 8099 	bne.w	80145cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	220b      	movs	r2, #11
 801449e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80144a0:	2302      	movs	r3, #2
 80144a2:	73fb      	strb	r3, [r7, #15]
      break;
 80144a4:	e092      	b.n	80145cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	791b      	ldrb	r3, [r3, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	2100      	movs	r1, #0
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 f8d5 	bl	801465e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2208      	movs	r2, #8
 80144c4:	761a      	strb	r2, [r3, #24]

      break;
 80144c6:	e086      	b.n	80145d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	791b      	ldrb	r3, [r3, #4]
 80144cc:	4619      	mov	r1, r3
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f003 ff9c 	bl	801840c <USBH_LL_GetURBState>
 80144d4:	4603      	mov	r3, r0
 80144d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80144d8:	7bbb      	ldrb	r3, [r7, #14]
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d105      	bne.n	80144ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	220d      	movs	r2, #13
 80144e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80144e4:	2300      	movs	r3, #0
 80144e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80144e8:	e072      	b.n	80145d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80144ea:	7bbb      	ldrb	r3, [r7, #14]
 80144ec:	2b04      	cmp	r3, #4
 80144ee:	d103      	bne.n	80144f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	220b      	movs	r2, #11
 80144f4:	761a      	strb	r2, [r3, #24]
      break;
 80144f6:	e06b      	b.n	80145d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80144f8:	7bbb      	ldrb	r3, [r7, #14]
 80144fa:	2b05      	cmp	r3, #5
 80144fc:	d168      	bne.n	80145d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80144fe:	2303      	movs	r3, #3
 8014500:	73fb      	strb	r3, [r7, #15]
      break;
 8014502:	e065      	b.n	80145d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	795b      	ldrb	r3, [r3, #5]
 8014508:	2201      	movs	r2, #1
 801450a:	9200      	str	r2, [sp, #0]
 801450c:	2200      	movs	r2, #0
 801450e:	2100      	movs	r1, #0
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f000 f87f 	bl	8014614 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801451c:	b29a      	uxth	r2, r3
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	220a      	movs	r2, #10
 8014526:	761a      	strb	r2, [r3, #24]
      break;
 8014528:	e055      	b.n	80145d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	795b      	ldrb	r3, [r3, #5]
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f003 ff6b 	bl	801840c <USBH_LL_GetURBState>
 8014536:	4603      	mov	r3, r0
 8014538:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801453a:	7bbb      	ldrb	r3, [r7, #14]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d105      	bne.n	801454c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8014540:	2300      	movs	r3, #0
 8014542:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	220d      	movs	r2, #13
 8014548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801454a:	e043      	b.n	80145d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801454c:	7bbb      	ldrb	r3, [r7, #14]
 801454e:	2b02      	cmp	r3, #2
 8014550:	d103      	bne.n	801455a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2209      	movs	r2, #9
 8014556:	761a      	strb	r2, [r3, #24]
      break;
 8014558:	e03c      	b.n	80145d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801455a:	7bbb      	ldrb	r3, [r7, #14]
 801455c:	2b04      	cmp	r3, #4
 801455e:	d139      	bne.n	80145d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	220b      	movs	r2, #11
 8014564:	761a      	strb	r2, [r3, #24]
      break;
 8014566:	e035      	b.n	80145d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	7e5b      	ldrb	r3, [r3, #25]
 801456c:	3301      	adds	r3, #1
 801456e:	b2da      	uxtb	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	765a      	strb	r2, [r3, #25]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	7e5b      	ldrb	r3, [r3, #25]
 8014578:	2b02      	cmp	r3, #2
 801457a:	d806      	bhi.n	801458a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2201      	movs	r2, #1
 8014580:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2201      	movs	r2, #1
 8014586:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014588:	e025      	b.n	80145d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014590:	2106      	movs	r1, #6
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2200      	movs	r2, #0
 801459a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	795b      	ldrb	r3, [r3, #5]
 80145a0:	4619      	mov	r1, r3
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f000 f90c 	bl	80147c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	791b      	ldrb	r3, [r3, #4]
 80145ac:	4619      	mov	r1, r3
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f000 f906 	bl	80147c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80145ba:	2302      	movs	r3, #2
 80145bc:	73fb      	strb	r3, [r7, #15]
      break;
 80145be:	e00a      	b.n	80145d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80145c0:	bf00      	nop
 80145c2:	e008      	b.n	80145d6 <USBH_HandleControl+0x2de>
      break;
 80145c4:	bf00      	nop
 80145c6:	e006      	b.n	80145d6 <USBH_HandleControl+0x2de>
      break;
 80145c8:	bf00      	nop
 80145ca:	e004      	b.n	80145d6 <USBH_HandleControl+0x2de>
      break;
 80145cc:	bf00      	nop
 80145ce:	e002      	b.n	80145d6 <USBH_HandleControl+0x2de>
      break;
 80145d0:	bf00      	nop
 80145d2:	e000      	b.n	80145d6 <USBH_HandleControl+0x2de>
      break;
 80145d4:	bf00      	nop
  }

  return status;
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3710      	adds	r7, #16
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b088      	sub	sp, #32
 80145e4:	af04      	add	r7, sp, #16
 80145e6:	60f8      	str	r0, [r7, #12]
 80145e8:	60b9      	str	r1, [r7, #8]
 80145ea:	4613      	mov	r3, r2
 80145ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80145ee:	79f9      	ldrb	r1, [r7, #7]
 80145f0:	2300      	movs	r3, #0
 80145f2:	9303      	str	r3, [sp, #12]
 80145f4:	2308      	movs	r3, #8
 80145f6:	9302      	str	r3, [sp, #8]
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	9301      	str	r3, [sp, #4]
 80145fc:	2300      	movs	r3, #0
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	2300      	movs	r3, #0
 8014602:	2200      	movs	r2, #0
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f003 fed0 	bl	80183aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b088      	sub	sp, #32
 8014618:	af04      	add	r7, sp, #16
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	60b9      	str	r1, [r7, #8]
 801461e:	4611      	mov	r1, r2
 8014620:	461a      	mov	r2, r3
 8014622:	460b      	mov	r3, r1
 8014624:	80fb      	strh	r3, [r7, #6]
 8014626:	4613      	mov	r3, r2
 8014628:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8014634:	2300      	movs	r3, #0
 8014636:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014638:	7979      	ldrb	r1, [r7, #5]
 801463a:	7e3b      	ldrb	r3, [r7, #24]
 801463c:	9303      	str	r3, [sp, #12]
 801463e:	88fb      	ldrh	r3, [r7, #6]
 8014640:	9302      	str	r3, [sp, #8]
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	9301      	str	r3, [sp, #4]
 8014646:	2301      	movs	r3, #1
 8014648:	9300      	str	r3, [sp, #0]
 801464a:	2300      	movs	r3, #0
 801464c:	2200      	movs	r2, #0
 801464e:	68f8      	ldr	r0, [r7, #12]
 8014650:	f003 feab 	bl	80183aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014654:	2300      	movs	r3, #0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b088      	sub	sp, #32
 8014662:	af04      	add	r7, sp, #16
 8014664:	60f8      	str	r0, [r7, #12]
 8014666:	60b9      	str	r1, [r7, #8]
 8014668:	4611      	mov	r1, r2
 801466a:	461a      	mov	r2, r3
 801466c:	460b      	mov	r3, r1
 801466e:	80fb      	strh	r3, [r7, #6]
 8014670:	4613      	mov	r3, r2
 8014672:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014674:	7979      	ldrb	r1, [r7, #5]
 8014676:	2300      	movs	r3, #0
 8014678:	9303      	str	r3, [sp, #12]
 801467a:	88fb      	ldrh	r3, [r7, #6]
 801467c:	9302      	str	r3, [sp, #8]
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	9301      	str	r3, [sp, #4]
 8014682:	2301      	movs	r3, #1
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	2300      	movs	r3, #0
 8014688:	2201      	movs	r2, #1
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f003 fe8d 	bl	80183aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014690:	2300      	movs	r3, #0

}
 8014692:	4618      	mov	r0, r3
 8014694:	3710      	adds	r7, #16
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b088      	sub	sp, #32
 801469e:	af04      	add	r7, sp, #16
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	60b9      	str	r1, [r7, #8]
 80146a4:	4611      	mov	r1, r2
 80146a6:	461a      	mov	r2, r3
 80146a8:	460b      	mov	r3, r1
 80146aa:	80fb      	strh	r3, [r7, #6]
 80146ac:	4613      	mov	r3, r2
 80146ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d001      	beq.n	80146be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80146ba:	2300      	movs	r3, #0
 80146bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80146be:	7979      	ldrb	r1, [r7, #5]
 80146c0:	7e3b      	ldrb	r3, [r7, #24]
 80146c2:	9303      	str	r3, [sp, #12]
 80146c4:	88fb      	ldrh	r3, [r7, #6]
 80146c6:	9302      	str	r3, [sp, #8]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	9301      	str	r3, [sp, #4]
 80146cc:	2301      	movs	r3, #1
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	2302      	movs	r3, #2
 80146d2:	2200      	movs	r2, #0
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f003 fe68 	bl	80183aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80146da:	2300      	movs	r3, #0
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3710      	adds	r7, #16
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b088      	sub	sp, #32
 80146e8:	af04      	add	r7, sp, #16
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	4611      	mov	r1, r2
 80146f0:	461a      	mov	r2, r3
 80146f2:	460b      	mov	r3, r1
 80146f4:	80fb      	strh	r3, [r7, #6]
 80146f6:	4613      	mov	r3, r2
 80146f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80146fa:	7979      	ldrb	r1, [r7, #5]
 80146fc:	2300      	movs	r3, #0
 80146fe:	9303      	str	r3, [sp, #12]
 8014700:	88fb      	ldrh	r3, [r7, #6]
 8014702:	9302      	str	r3, [sp, #8]
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	2301      	movs	r3, #1
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	2302      	movs	r3, #2
 801470e:	2201      	movs	r2, #1
 8014710:	68f8      	ldr	r0, [r7, #12]
 8014712:	f003 fe4a 	bl	80183aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014716:	2300      	movs	r3, #0
}
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af04      	add	r7, sp, #16
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	4608      	mov	r0, r1
 801472a:	4611      	mov	r1, r2
 801472c:	461a      	mov	r2, r3
 801472e:	4603      	mov	r3, r0
 8014730:	70fb      	strb	r3, [r7, #3]
 8014732:	460b      	mov	r3, r1
 8014734:	70bb      	strb	r3, [r7, #2]
 8014736:	4613      	mov	r3, r2
 8014738:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801473a:	7878      	ldrb	r0, [r7, #1]
 801473c:	78ba      	ldrb	r2, [r7, #2]
 801473e:	78f9      	ldrb	r1, [r7, #3]
 8014740:	8b3b      	ldrh	r3, [r7, #24]
 8014742:	9302      	str	r3, [sp, #8]
 8014744:	7d3b      	ldrb	r3, [r7, #20]
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	7c3b      	ldrb	r3, [r7, #16]
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	4603      	mov	r3, r0
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f003 fddd 	bl	801830e <USBH_LL_OpenPipe>

  return USBH_OK;
 8014754:	2300      	movs	r3, #0
}
 8014756:	4618      	mov	r0, r3
 8014758:	3708      	adds	r7, #8
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801475e:	b580      	push	{r7, lr}
 8014760:	b082      	sub	sp, #8
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
 8014766:	460b      	mov	r3, r1
 8014768:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801476a:	78fb      	ldrb	r3, [r7, #3]
 801476c:	4619      	mov	r1, r3
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f003 fdfc 	bl	801836c <USBH_LL_ClosePipe>

  return USBH_OK;
 8014774:	2300      	movs	r3, #0
}
 8014776:	4618      	mov	r0, r3
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b084      	sub	sp, #16
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
 8014786:	460b      	mov	r3, r1
 8014788:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 f836 	bl	80147fc <USBH_GetFreePipe>
 8014790:	4603      	mov	r3, r0
 8014792:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014794:	89fb      	ldrh	r3, [r7, #14]
 8014796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801479a:	4293      	cmp	r3, r2
 801479c:	d00a      	beq.n	80147b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801479e:	78fa      	ldrb	r2, [r7, #3]
 80147a0:	89fb      	ldrh	r3, [r7, #14]
 80147a2:	f003 030f 	and.w	r3, r3, #15
 80147a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80147aa:	6879      	ldr	r1, [r7, #4]
 80147ac:	33e0      	adds	r3, #224	; 0xe0
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	440b      	add	r3, r1
 80147b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80147b4:	89fb      	ldrh	r3, [r7, #14]
 80147b6:	b2db      	uxtb	r3, r3
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3710      	adds	r7, #16
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}

080147c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b083      	sub	sp, #12
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	460b      	mov	r3, r1
 80147ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80147cc:	78fb      	ldrb	r3, [r7, #3]
 80147ce:	2b0f      	cmp	r3, #15
 80147d0:	d80d      	bhi.n	80147ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80147d2:	78fb      	ldrb	r3, [r7, #3]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	33e0      	adds	r3, #224	; 0xe0
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	4413      	add	r3, r2
 80147dc:	685a      	ldr	r2, [r3, #4]
 80147de:	78fb      	ldrb	r3, [r7, #3]
 80147e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80147e4:	6879      	ldr	r1, [r7, #4]
 80147e6:	33e0      	adds	r3, #224	; 0xe0
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	440b      	add	r3, r1
 80147ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80147ee:	2300      	movs	r3, #0
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	370c      	adds	r7, #12
 80147f4:	46bd      	mov	sp, r7
 80147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fa:	4770      	bx	lr

080147fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80147fc:	b480      	push	{r7}
 80147fe:	b085      	sub	sp, #20
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014804:	2300      	movs	r3, #0
 8014806:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014808:	2300      	movs	r3, #0
 801480a:	73fb      	strb	r3, [r7, #15]
 801480c:	e00f      	b.n	801482e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801480e:	7bfb      	ldrb	r3, [r7, #15]
 8014810:	687a      	ldr	r2, [r7, #4]
 8014812:	33e0      	adds	r3, #224	; 0xe0
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	4413      	add	r3, r2
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801481e:	2b00      	cmp	r3, #0
 8014820:	d102      	bne.n	8014828 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014822:	7bfb      	ldrb	r3, [r7, #15]
 8014824:	b29b      	uxth	r3, r3
 8014826:	e007      	b.n	8014838 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014828:	7bfb      	ldrb	r3, [r7, #15]
 801482a:	3301      	adds	r3, #1
 801482c:	73fb      	strb	r3, [r7, #15]
 801482e:	7bfb      	ldrb	r3, [r7, #15]
 8014830:	2b0f      	cmp	r3, #15
 8014832:	d9ec      	bls.n	801480e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014834:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8014838:	4618      	mov	r0, r3
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
 801484a:	4603      	mov	r3, r0
 801484c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801484e:	79fb      	ldrb	r3, [r7, #7]
 8014850:	4a08      	ldr	r2, [pc, #32]	; (8014874 <disk_status+0x30>)
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4413      	add	r3, r2
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	79fa      	ldrb	r2, [r7, #7]
 801485c:	4905      	ldr	r1, [pc, #20]	; (8014874 <disk_status+0x30>)
 801485e:	440a      	add	r2, r1
 8014860:	7a12      	ldrb	r2, [r2, #8]
 8014862:	4610      	mov	r0, r2
 8014864:	4798      	blx	r3
 8014866:	4603      	mov	r3, r0
 8014868:	73fb      	strb	r3, [r7, #15]
  return stat;
 801486a:	7bfb      	ldrb	r3, [r7, #15]
}
 801486c:	4618      	mov	r0, r3
 801486e:	3710      	adds	r7, #16
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	20000f94 	.word	0x20000f94

08014878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	4603      	mov	r3, r0
 8014880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014886:	79fb      	ldrb	r3, [r7, #7]
 8014888:	4a0d      	ldr	r2, [pc, #52]	; (80148c0 <disk_initialize+0x48>)
 801488a:	5cd3      	ldrb	r3, [r2, r3]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d111      	bne.n	80148b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014890:	79fb      	ldrb	r3, [r7, #7]
 8014892:	4a0b      	ldr	r2, [pc, #44]	; (80148c0 <disk_initialize+0x48>)
 8014894:	2101      	movs	r1, #1
 8014896:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014898:	79fb      	ldrb	r3, [r7, #7]
 801489a:	4a09      	ldr	r2, [pc, #36]	; (80148c0 <disk_initialize+0x48>)
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	4413      	add	r3, r2
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	79fa      	ldrb	r2, [r7, #7]
 80148a6:	4906      	ldr	r1, [pc, #24]	; (80148c0 <disk_initialize+0x48>)
 80148a8:	440a      	add	r2, r1
 80148aa:	7a12      	ldrb	r2, [r2, #8]
 80148ac:	4610      	mov	r0, r2
 80148ae:	4798      	blx	r3
 80148b0:	4603      	mov	r3, r0
 80148b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	20000f94 	.word	0x20000f94

080148c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80148c4:	b590      	push	{r4, r7, lr}
 80148c6:	b087      	sub	sp, #28
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60b9      	str	r1, [r7, #8]
 80148cc:	607a      	str	r2, [r7, #4]
 80148ce:	603b      	str	r3, [r7, #0]
 80148d0:	4603      	mov	r3, r0
 80148d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80148d4:	7bfb      	ldrb	r3, [r7, #15]
 80148d6:	4a0a      	ldr	r2, [pc, #40]	; (8014900 <disk_read+0x3c>)
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	4413      	add	r3, r2
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	689c      	ldr	r4, [r3, #8]
 80148e0:	7bfb      	ldrb	r3, [r7, #15]
 80148e2:	4a07      	ldr	r2, [pc, #28]	; (8014900 <disk_read+0x3c>)
 80148e4:	4413      	add	r3, r2
 80148e6:	7a18      	ldrb	r0, [r3, #8]
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	68b9      	ldr	r1, [r7, #8]
 80148ee:	47a0      	blx	r4
 80148f0:	4603      	mov	r3, r0
 80148f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80148f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	371c      	adds	r7, #28
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd90      	pop	{r4, r7, pc}
 80148fe:	bf00      	nop
 8014900:	20000f94 	.word	0x20000f94

08014904 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014904:	b590      	push	{r4, r7, lr}
 8014906:	b087      	sub	sp, #28
 8014908:	af00      	add	r7, sp, #0
 801490a:	60b9      	str	r1, [r7, #8]
 801490c:	607a      	str	r2, [r7, #4]
 801490e:	603b      	str	r3, [r7, #0]
 8014910:	4603      	mov	r3, r0
 8014912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014914:	7bfb      	ldrb	r3, [r7, #15]
 8014916:	4a0a      	ldr	r2, [pc, #40]	; (8014940 <disk_write+0x3c>)
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	4413      	add	r3, r2
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	68dc      	ldr	r4, [r3, #12]
 8014920:	7bfb      	ldrb	r3, [r7, #15]
 8014922:	4a07      	ldr	r2, [pc, #28]	; (8014940 <disk_write+0x3c>)
 8014924:	4413      	add	r3, r2
 8014926:	7a18      	ldrb	r0, [r3, #8]
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	68b9      	ldr	r1, [r7, #8]
 801492e:	47a0      	blx	r4
 8014930:	4603      	mov	r3, r0
 8014932:	75fb      	strb	r3, [r7, #23]
  return res;
 8014934:	7dfb      	ldrb	r3, [r7, #23]
}
 8014936:	4618      	mov	r0, r3
 8014938:	371c      	adds	r7, #28
 801493a:	46bd      	mov	sp, r7
 801493c:	bd90      	pop	{r4, r7, pc}
 801493e:	bf00      	nop
 8014940:	20000f94 	.word	0x20000f94

08014944 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	4603      	mov	r3, r0
 801494c:	603a      	str	r2, [r7, #0]
 801494e:	71fb      	strb	r3, [r7, #7]
 8014950:	460b      	mov	r3, r1
 8014952:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014954:	79fb      	ldrb	r3, [r7, #7]
 8014956:	4a09      	ldr	r2, [pc, #36]	; (801497c <disk_ioctl+0x38>)
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	4413      	add	r3, r2
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	691b      	ldr	r3, [r3, #16]
 8014960:	79fa      	ldrb	r2, [r7, #7]
 8014962:	4906      	ldr	r1, [pc, #24]	; (801497c <disk_ioctl+0x38>)
 8014964:	440a      	add	r2, r1
 8014966:	7a10      	ldrb	r0, [r2, #8]
 8014968:	79b9      	ldrb	r1, [r7, #6]
 801496a:	683a      	ldr	r2, [r7, #0]
 801496c:	4798      	blx	r3
 801496e:	4603      	mov	r3, r0
 8014970:	73fb      	strb	r3, [r7, #15]
  return res;
 8014972:	7bfb      	ldrb	r3, [r7, #15]
}
 8014974:	4618      	mov	r0, r3
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	20000f94 	.word	0x20000f94

08014980 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014980:	b480      	push	{r7}
 8014982:	b085      	sub	sp, #20
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	3301      	adds	r3, #1
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014990:	89fb      	ldrh	r3, [r7, #14]
 8014992:	021b      	lsls	r3, r3, #8
 8014994:	b21a      	sxth	r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	b21b      	sxth	r3, r3
 801499c:	4313      	orrs	r3, r2
 801499e:	b21b      	sxth	r3, r3
 80149a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80149a2:	89fb      	ldrh	r3, [r7, #14]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3714      	adds	r7, #20
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	3303      	adds	r3, #3
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	021b      	lsls	r3, r3, #8
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	3202      	adds	r2, #2
 80149c8:	7812      	ldrb	r2, [r2, #0]
 80149ca:	4313      	orrs	r3, r2
 80149cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	021b      	lsls	r3, r3, #8
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	3201      	adds	r2, #1
 80149d6:	7812      	ldrb	r2, [r2, #0]
 80149d8:	4313      	orrs	r3, r2
 80149da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	021b      	lsls	r3, r3, #8
 80149e0:	687a      	ldr	r2, [r7, #4]
 80149e2:	7812      	ldrb	r2, [r2, #0]
 80149e4:	4313      	orrs	r3, r2
 80149e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80149e8:	68fb      	ldr	r3, [r7, #12]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3714      	adds	r7, #20
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr

080149f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80149f6:	b480      	push	{r7}
 80149f8:	b083      	sub	sp, #12
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
 80149fe:	460b      	mov	r3, r1
 8014a00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	1c5a      	adds	r2, r3, #1
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	887a      	ldrh	r2, [r7, #2]
 8014a0a:	b2d2      	uxtb	r2, r2
 8014a0c:	701a      	strb	r2, [r3, #0]
 8014a0e:	887b      	ldrh	r3, [r7, #2]
 8014a10:	0a1b      	lsrs	r3, r3, #8
 8014a12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	1c5a      	adds	r2, r3, #1
 8014a18:	607a      	str	r2, [r7, #4]
 8014a1a:	887a      	ldrh	r2, [r7, #2]
 8014a1c:	b2d2      	uxtb	r2, r2
 8014a1e:	701a      	strb	r2, [r3, #0]
}
 8014a20:	bf00      	nop
 8014a22:	370c      	adds	r7, #12
 8014a24:	46bd      	mov	sp, r7
 8014a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2a:	4770      	bx	lr

08014a2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	1c5a      	adds	r2, r3, #1
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	683a      	ldr	r2, [r7, #0]
 8014a3e:	b2d2      	uxtb	r2, r2
 8014a40:	701a      	strb	r2, [r3, #0]
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	0a1b      	lsrs	r3, r3, #8
 8014a46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	1c5a      	adds	r2, r3, #1
 8014a4c:	607a      	str	r2, [r7, #4]
 8014a4e:	683a      	ldr	r2, [r7, #0]
 8014a50:	b2d2      	uxtb	r2, r2
 8014a52:	701a      	strb	r2, [r3, #0]
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	0a1b      	lsrs	r3, r3, #8
 8014a58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	1c5a      	adds	r2, r3, #1
 8014a5e:	607a      	str	r2, [r7, #4]
 8014a60:	683a      	ldr	r2, [r7, #0]
 8014a62:	b2d2      	uxtb	r2, r2
 8014a64:	701a      	strb	r2, [r3, #0]
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	0a1b      	lsrs	r3, r3, #8
 8014a6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	1c5a      	adds	r2, r3, #1
 8014a70:	607a      	str	r2, [r7, #4]
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	b2d2      	uxtb	r2, r2
 8014a76:	701a      	strb	r2, [r3, #0]
}
 8014a78:	bf00      	nop
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014a84:	b480      	push	{r7}
 8014a86:	b087      	sub	sp, #28
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00d      	beq.n	8014aba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014a9e:	693a      	ldr	r2, [r7, #16]
 8014aa0:	1c53      	adds	r3, r2, #1
 8014aa2:	613b      	str	r3, [r7, #16]
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	1c59      	adds	r1, r3, #1
 8014aa8:	6179      	str	r1, [r7, #20]
 8014aaa:	7812      	ldrb	r2, [r2, #0]
 8014aac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	607b      	str	r3, [r7, #4]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d1f1      	bne.n	8014a9e <mem_cpy+0x1a>
	}
}
 8014aba:	bf00      	nop
 8014abc:	371c      	adds	r7, #28
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr

08014ac6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014ac6:	b480      	push	{r7}
 8014ac8:	b087      	sub	sp, #28
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	60f8      	str	r0, [r7, #12]
 8014ace:	60b9      	str	r1, [r7, #8]
 8014ad0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	1c5a      	adds	r2, r3, #1
 8014ada:	617a      	str	r2, [r7, #20]
 8014adc:	68ba      	ldr	r2, [r7, #8]
 8014ade:	b2d2      	uxtb	r2, r2
 8014ae0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	3b01      	subs	r3, #1
 8014ae6:	607b      	str	r3, [r7, #4]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1f3      	bne.n	8014ad6 <mem_set+0x10>
}
 8014aee:	bf00      	nop
 8014af0:	bf00      	nop
 8014af2:	371c      	adds	r7, #28
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr

08014afc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014afc:	b480      	push	{r7}
 8014afe:	b089      	sub	sp, #36	; 0x24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	60b9      	str	r1, [r7, #8]
 8014b06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	61fb      	str	r3, [r7, #28]
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014b10:	2300      	movs	r3, #0
 8014b12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	1c5a      	adds	r2, r3, #1
 8014b18:	61fa      	str	r2, [r7, #28]
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	61ba      	str	r2, [r7, #24]
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	1acb      	subs	r3, r1, r3
 8014b28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	607b      	str	r3, [r7, #4]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d002      	beq.n	8014b3c <mem_cmp+0x40>
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d0eb      	beq.n	8014b14 <mem_cmp+0x18>

	return r;
 8014b3c:	697b      	ldr	r3, [r7, #20]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3724      	adds	r7, #36	; 0x24
 8014b42:	46bd      	mov	sp, r7
 8014b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b48:	4770      	bx	lr

08014b4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014b4a:	b480      	push	{r7}
 8014b4c:	b083      	sub	sp, #12
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	6078      	str	r0, [r7, #4]
 8014b52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014b54:	e002      	b.n	8014b5c <chk_chr+0x12>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	607b      	str	r3, [r7, #4]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d005      	beq.n	8014b70 <chk_chr+0x26>
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	461a      	mov	r2, r3
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	d1f2      	bne.n	8014b56 <chk_chr+0xc>
	return *str;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	781b      	ldrb	r3, [r3, #0]
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	370c      	adds	r7, #12
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr

08014b80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b085      	sub	sp, #20
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	60bb      	str	r3, [r7, #8]
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	60fb      	str	r3, [r7, #12]
 8014b92:	e029      	b.n	8014be8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014b94:	4a27      	ldr	r2, [pc, #156]	; (8014c34 <chk_lock+0xb4>)
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	011b      	lsls	r3, r3, #4
 8014b9a:	4413      	add	r3, r2
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d01d      	beq.n	8014bde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014ba2:	4a24      	ldr	r2, [pc, #144]	; (8014c34 <chk_lock+0xb4>)
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	011b      	lsls	r3, r3, #4
 8014ba8:	4413      	add	r3, r2
 8014baa:	681a      	ldr	r2, [r3, #0]
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d116      	bne.n	8014be2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014bb4:	4a1f      	ldr	r2, [pc, #124]	; (8014c34 <chk_lock+0xb4>)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	011b      	lsls	r3, r3, #4
 8014bba:	4413      	add	r3, r2
 8014bbc:	3304      	adds	r3, #4
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d10c      	bne.n	8014be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014bc8:	4a1a      	ldr	r2, [pc, #104]	; (8014c34 <chk_lock+0xb4>)
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	011b      	lsls	r3, r3, #4
 8014bce:	4413      	add	r3, r2
 8014bd0:	3308      	adds	r3, #8
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d102      	bne.n	8014be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014bdc:	e007      	b.n	8014bee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014bde:	2301      	movs	r3, #1
 8014be0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	3301      	adds	r3, #1
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d9d2      	bls.n	8014b94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2b02      	cmp	r3, #2
 8014bf2:	d109      	bne.n	8014c08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d102      	bne.n	8014c00 <chk_lock+0x80>
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d101      	bne.n	8014c04 <chk_lock+0x84>
 8014c00:	2300      	movs	r3, #0
 8014c02:	e010      	b.n	8014c26 <chk_lock+0xa6>
 8014c04:	2312      	movs	r3, #18
 8014c06:	e00e      	b.n	8014c26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d108      	bne.n	8014c20 <chk_lock+0xa0>
 8014c0e:	4a09      	ldr	r2, [pc, #36]	; (8014c34 <chk_lock+0xb4>)
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	011b      	lsls	r3, r3, #4
 8014c14:	4413      	add	r3, r2
 8014c16:	330c      	adds	r3, #12
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c1e:	d101      	bne.n	8014c24 <chk_lock+0xa4>
 8014c20:	2310      	movs	r3, #16
 8014c22:	e000      	b.n	8014c26 <chk_lock+0xa6>
 8014c24:	2300      	movs	r3, #0
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3714      	adds	r7, #20
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	20000f74 	.word	0x20000f74

08014c38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	607b      	str	r3, [r7, #4]
 8014c42:	e002      	b.n	8014c4a <enq_lock+0x12>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	3301      	adds	r3, #1
 8014c48:	607b      	str	r3, [r7, #4]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	d806      	bhi.n	8014c5e <enq_lock+0x26>
 8014c50:	4a09      	ldr	r2, [pc, #36]	; (8014c78 <enq_lock+0x40>)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	011b      	lsls	r3, r3, #4
 8014c56:	4413      	add	r3, r2
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1f2      	bne.n	8014c44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	bf14      	ite	ne
 8014c64:	2301      	movne	r3, #1
 8014c66:	2300      	moveq	r3, #0
 8014c68:	b2db      	uxtb	r3, r3
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr
 8014c76:	bf00      	nop
 8014c78:	20000f74 	.word	0x20000f74

08014c7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b085      	sub	sp, #20
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014c86:	2300      	movs	r3, #0
 8014c88:	60fb      	str	r3, [r7, #12]
 8014c8a:	e01f      	b.n	8014ccc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014c8c:	4a41      	ldr	r2, [pc, #260]	; (8014d94 <inc_lock+0x118>)
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	011b      	lsls	r3, r3, #4
 8014c92:	4413      	add	r3, r2
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d113      	bne.n	8014cc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014c9e:	4a3d      	ldr	r2, [pc, #244]	; (8014d94 <inc_lock+0x118>)
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	011b      	lsls	r3, r3, #4
 8014ca4:	4413      	add	r3, r2
 8014ca6:	3304      	adds	r3, #4
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d109      	bne.n	8014cc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014cb2:	4a38      	ldr	r2, [pc, #224]	; (8014d94 <inc_lock+0x118>)
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	011b      	lsls	r3, r3, #4
 8014cb8:	4413      	add	r3, r2
 8014cba:	3308      	adds	r3, #8
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d006      	beq.n	8014cd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	3301      	adds	r3, #1
 8014cca:	60fb      	str	r3, [r7, #12]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d9dc      	bls.n	8014c8c <inc_lock+0x10>
 8014cd2:	e000      	b.n	8014cd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014cd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d132      	bne.n	8014d42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	60fb      	str	r3, [r7, #12]
 8014ce0:	e002      	b.n	8014ce8 <inc_lock+0x6c>
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	60fb      	str	r3, [r7, #12]
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2b01      	cmp	r3, #1
 8014cec:	d806      	bhi.n	8014cfc <inc_lock+0x80>
 8014cee:	4a29      	ldr	r2, [pc, #164]	; (8014d94 <inc_lock+0x118>)
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	011b      	lsls	r3, r3, #4
 8014cf4:	4413      	add	r3, r2
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d1f2      	bne.n	8014ce2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b02      	cmp	r3, #2
 8014d00:	d101      	bne.n	8014d06 <inc_lock+0x8a>
 8014d02:	2300      	movs	r3, #0
 8014d04:	e040      	b.n	8014d88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	4922      	ldr	r1, [pc, #136]	; (8014d94 <inc_lock+0x118>)
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	011b      	lsls	r3, r3, #4
 8014d10:	440b      	add	r3, r1
 8014d12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	689a      	ldr	r2, [r3, #8]
 8014d18:	491e      	ldr	r1, [pc, #120]	; (8014d94 <inc_lock+0x118>)
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	011b      	lsls	r3, r3, #4
 8014d1e:	440b      	add	r3, r1
 8014d20:	3304      	adds	r3, #4
 8014d22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	695a      	ldr	r2, [r3, #20]
 8014d28:	491a      	ldr	r1, [pc, #104]	; (8014d94 <inc_lock+0x118>)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	011b      	lsls	r3, r3, #4
 8014d2e:	440b      	add	r3, r1
 8014d30:	3308      	adds	r3, #8
 8014d32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014d34:	4a17      	ldr	r2, [pc, #92]	; (8014d94 <inc_lock+0x118>)
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	011b      	lsls	r3, r3, #4
 8014d3a:	4413      	add	r3, r2
 8014d3c:	330c      	adds	r3, #12
 8014d3e:	2200      	movs	r2, #0
 8014d40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d009      	beq.n	8014d5c <inc_lock+0xe0>
 8014d48:	4a12      	ldr	r2, [pc, #72]	; (8014d94 <inc_lock+0x118>)
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	011b      	lsls	r3, r3, #4
 8014d4e:	4413      	add	r3, r2
 8014d50:	330c      	adds	r3, #12
 8014d52:	881b      	ldrh	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d001      	beq.n	8014d5c <inc_lock+0xe0>
 8014d58:	2300      	movs	r3, #0
 8014d5a:	e015      	b.n	8014d88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d108      	bne.n	8014d74 <inc_lock+0xf8>
 8014d62:	4a0c      	ldr	r2, [pc, #48]	; (8014d94 <inc_lock+0x118>)
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	011b      	lsls	r3, r3, #4
 8014d68:	4413      	add	r3, r2
 8014d6a:	330c      	adds	r3, #12
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	e001      	b.n	8014d78 <inc_lock+0xfc>
 8014d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014d78:	4906      	ldr	r1, [pc, #24]	; (8014d94 <inc_lock+0x118>)
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	011b      	lsls	r3, r3, #4
 8014d7e:	440b      	add	r3, r1
 8014d80:	330c      	adds	r3, #12
 8014d82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	3301      	adds	r3, #1
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3714      	adds	r7, #20
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	20000f74 	.word	0x20000f74

08014d98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	3b01      	subs	r3, #1
 8014da4:	607b      	str	r3, [r7, #4]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d825      	bhi.n	8014df8 <dec_lock+0x60>
		n = Files[i].ctr;
 8014dac:	4a17      	ldr	r2, [pc, #92]	; (8014e0c <dec_lock+0x74>)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	011b      	lsls	r3, r3, #4
 8014db2:	4413      	add	r3, r2
 8014db4:	330c      	adds	r3, #12
 8014db6:	881b      	ldrh	r3, [r3, #0]
 8014db8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014dba:	89fb      	ldrh	r3, [r7, #14]
 8014dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014dc0:	d101      	bne.n	8014dc6 <dec_lock+0x2e>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014dc6:	89fb      	ldrh	r3, [r7, #14]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d002      	beq.n	8014dd2 <dec_lock+0x3a>
 8014dcc:	89fb      	ldrh	r3, [r7, #14]
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014dd2:	4a0e      	ldr	r2, [pc, #56]	; (8014e0c <dec_lock+0x74>)
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	011b      	lsls	r3, r3, #4
 8014dd8:	4413      	add	r3, r2
 8014dda:	330c      	adds	r3, #12
 8014ddc:	89fa      	ldrh	r2, [r7, #14]
 8014dde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014de0:	89fb      	ldrh	r3, [r7, #14]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d105      	bne.n	8014df2 <dec_lock+0x5a>
 8014de6:	4a09      	ldr	r2, [pc, #36]	; (8014e0c <dec_lock+0x74>)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	011b      	lsls	r3, r3, #4
 8014dec:	4413      	add	r3, r2
 8014dee:	2200      	movs	r2, #0
 8014df0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014df2:	2300      	movs	r3, #0
 8014df4:	737b      	strb	r3, [r7, #13]
 8014df6:	e001      	b.n	8014dfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014df8:	2302      	movs	r3, #2
 8014dfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014dfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3714      	adds	r7, #20
 8014e02:	46bd      	mov	sp, r7
 8014e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	20000f74 	.word	0x20000f74

08014e10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b085      	sub	sp, #20
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014e18:	2300      	movs	r3, #0
 8014e1a:	60fb      	str	r3, [r7, #12]
 8014e1c:	e010      	b.n	8014e40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014e1e:	4a0d      	ldr	r2, [pc, #52]	; (8014e54 <clear_lock+0x44>)
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	011b      	lsls	r3, r3, #4
 8014e24:	4413      	add	r3, r2
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d105      	bne.n	8014e3a <clear_lock+0x2a>
 8014e2e:	4a09      	ldr	r2, [pc, #36]	; (8014e54 <clear_lock+0x44>)
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	011b      	lsls	r3, r3, #4
 8014e34:	4413      	add	r3, r2
 8014e36:	2200      	movs	r2, #0
 8014e38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	60fb      	str	r3, [r7, #12]
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d9eb      	bls.n	8014e1e <clear_lock+0xe>
	}
}
 8014e46:	bf00      	nop
 8014e48:	bf00      	nop
 8014e4a:	3714      	adds	r7, #20
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr
 8014e54:	20000f74 	.word	0x20000f74

08014e58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b086      	sub	sp, #24
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014e60:	2300      	movs	r3, #0
 8014e62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	78db      	ldrb	r3, [r3, #3]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d034      	beq.n	8014ed6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	7858      	ldrb	r0, [r3, #1]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	f7ff fd40 	bl	8014904 <disk_write>
 8014e84:	4603      	mov	r3, r0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d002      	beq.n	8014e90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	73fb      	strb	r3, [r7, #15]
 8014e8e:	e022      	b.n	8014ed6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6a1b      	ldr	r3, [r3, #32]
 8014e9a:	697a      	ldr	r2, [r7, #20]
 8014e9c:	1ad2      	subs	r2, r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d217      	bcs.n	8014ed6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	789b      	ldrb	r3, [r3, #2]
 8014eaa:	613b      	str	r3, [r7, #16]
 8014eac:	e010      	b.n	8014ed0 <sync_window+0x78>
					wsect += fs->fsize;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	699b      	ldr	r3, [r3, #24]
 8014eb2:	697a      	ldr	r2, [r7, #20]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	7858      	ldrb	r0, [r3, #1]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	697a      	ldr	r2, [r7, #20]
 8014ec6:	f7ff fd1d 	bl	8014904 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	613b      	str	r3, [r7, #16]
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d8eb      	bhi.n	8014eae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3718      	adds	r7, #24
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014eea:	2300      	movs	r3, #0
 8014eec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef2:	683a      	ldr	r2, [r7, #0]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d01b      	beq.n	8014f30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f7ff ffad 	bl	8014e58 <sync_window>
 8014efe:	4603      	mov	r3, r0
 8014f00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014f02:	7bfb      	ldrb	r3, [r7, #15]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d113      	bne.n	8014f30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	7858      	ldrb	r0, [r3, #1]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f12:	2301      	movs	r3, #1
 8014f14:	683a      	ldr	r2, [r7, #0]
 8014f16:	f7ff fcd5 	bl	80148c4 <disk_read>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d004      	beq.n	8014f2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014f20:	f04f 33ff 	mov.w	r3, #4294967295
 8014f24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014f26:	2301      	movs	r3, #1
 8014f28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	683a      	ldr	r2, [r7, #0]
 8014f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8014f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
	...

08014f3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7ff ff87 	bl	8014e58 <sync_window>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014f4e:	7bfb      	ldrb	r3, [r7, #15]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d158      	bne.n	8015006 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	d148      	bne.n	8014fee <sync_fs+0xb2>
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	791b      	ldrb	r3, [r3, #4]
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d144      	bne.n	8014fee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	3330      	adds	r3, #48	; 0x30
 8014f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7ff fda9 	bl	8014ac6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	3330      	adds	r3, #48	; 0x30
 8014f78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014f7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7ff fd38 	bl	80149f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	3330      	adds	r3, #48	; 0x30
 8014f8a:	4921      	ldr	r1, [pc, #132]	; (8015010 <sync_fs+0xd4>)
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7ff fd4d 	bl	8014a2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	3330      	adds	r3, #48	; 0x30
 8014f96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014f9a:	491e      	ldr	r1, [pc, #120]	; (8015014 <sync_fs+0xd8>)
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7ff fd45 	bl	8014a2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	3330      	adds	r3, #48	; 0x30
 8014fa6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	691b      	ldr	r3, [r3, #16]
 8014fae:	4619      	mov	r1, r3
 8014fb0:	4610      	mov	r0, r2
 8014fb2:	f7ff fd3b 	bl	8014a2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	3330      	adds	r3, #48	; 0x30
 8014fba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	4610      	mov	r0, r2
 8014fc6:	f7ff fd31 	bl	8014a2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	69db      	ldr	r3, [r3, #28]
 8014fce:	1c5a      	adds	r2, r3, #1
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	7858      	ldrb	r0, [r3, #1]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	f7ff fc8e 	bl	8014904 <disk_write>
			fs->fsi_flag = 0;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	785b      	ldrb	r3, [r3, #1]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7ff fca4 	bl	8014944 <disk_ioctl>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d001      	beq.n	8015006 <sync_fs+0xca>
 8015002:	2301      	movs	r3, #1
 8015004:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015006:	7bfb      	ldrb	r3, [r7, #15]
}
 8015008:	4618      	mov	r0, r3
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	41615252 	.word	0x41615252
 8015014:	61417272 	.word	0x61417272

08015018 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	3b02      	subs	r3, #2
 8015026:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	695b      	ldr	r3, [r3, #20]
 801502c:	3b02      	subs	r3, #2
 801502e:	683a      	ldr	r2, [r7, #0]
 8015030:	429a      	cmp	r2, r3
 8015032:	d301      	bcc.n	8015038 <clust2sect+0x20>
 8015034:	2300      	movs	r3, #0
 8015036:	e008      	b.n	801504a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	895b      	ldrh	r3, [r3, #10]
 801503c:	461a      	mov	r2, r3
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	fb03 f202 	mul.w	r2, r3, r2
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015048:	4413      	add	r3, r2
}
 801504a:	4618      	mov	r0, r3
 801504c:	370c      	adds	r7, #12
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr

08015056 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015056:	b580      	push	{r7, lr}
 8015058:	b086      	sub	sp, #24
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2b01      	cmp	r3, #1
 801506a:	d904      	bls.n	8015076 <get_fat+0x20>
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	695b      	ldr	r3, [r3, #20]
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	429a      	cmp	r2, r3
 8015074:	d302      	bcc.n	801507c <get_fat+0x26>
		val = 1;	/* Internal error */
 8015076:	2301      	movs	r3, #1
 8015078:	617b      	str	r3, [r7, #20]
 801507a:	e08f      	b.n	801519c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801507c:	f04f 33ff 	mov.w	r3, #4294967295
 8015080:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	2b03      	cmp	r3, #3
 8015088:	d062      	beq.n	8015150 <get_fat+0xfa>
 801508a:	2b03      	cmp	r3, #3
 801508c:	dc7c      	bgt.n	8015188 <get_fat+0x132>
 801508e:	2b01      	cmp	r3, #1
 8015090:	d002      	beq.n	8015098 <get_fat+0x42>
 8015092:	2b02      	cmp	r3, #2
 8015094:	d042      	beq.n	801511c <get_fat+0xc6>
 8015096:	e077      	b.n	8015188 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	60fb      	str	r3, [r7, #12]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	085b      	lsrs	r3, r3, #1
 80150a0:	68fa      	ldr	r2, [r7, #12]
 80150a2:	4413      	add	r3, r2
 80150a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	6a1a      	ldr	r2, [r3, #32]
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	0a5b      	lsrs	r3, r3, #9
 80150ae:	4413      	add	r3, r2
 80150b0:	4619      	mov	r1, r3
 80150b2:	6938      	ldr	r0, [r7, #16]
 80150b4:	f7ff ff14 	bl	8014ee0 <move_window>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d167      	bne.n	801518e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	1c5a      	adds	r2, r3, #1
 80150c2:	60fa      	str	r2, [r7, #12]
 80150c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150c8:	693a      	ldr	r2, [r7, #16]
 80150ca:	4413      	add	r3, r2
 80150cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	6a1a      	ldr	r2, [r3, #32]
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	0a5b      	lsrs	r3, r3, #9
 80150da:	4413      	add	r3, r2
 80150dc:	4619      	mov	r1, r3
 80150de:	6938      	ldr	r0, [r7, #16]
 80150e0:	f7ff fefe 	bl	8014ee0 <move_window>
 80150e4:	4603      	mov	r3, r0
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d153      	bne.n	8015192 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150f0:	693a      	ldr	r2, [r7, #16]
 80150f2:	4413      	add	r3, r2
 80150f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150f8:	021b      	lsls	r3, r3, #8
 80150fa:	461a      	mov	r2, r3
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	4313      	orrs	r3, r2
 8015100:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	f003 0301 	and.w	r3, r3, #1
 8015108:	2b00      	cmp	r3, #0
 801510a:	d002      	beq.n	8015112 <get_fat+0xbc>
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	091b      	lsrs	r3, r3, #4
 8015110:	e002      	b.n	8015118 <get_fat+0xc2>
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015118:	617b      	str	r3, [r7, #20]
			break;
 801511a:	e03f      	b.n	801519c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	6a1a      	ldr	r2, [r3, #32]
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	0a1b      	lsrs	r3, r3, #8
 8015124:	4413      	add	r3, r2
 8015126:	4619      	mov	r1, r3
 8015128:	6938      	ldr	r0, [r7, #16]
 801512a:	f7ff fed9 	bl	8014ee0 <move_window>
 801512e:	4603      	mov	r3, r0
 8015130:	2b00      	cmp	r3, #0
 8015132:	d130      	bne.n	8015196 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	005b      	lsls	r3, r3, #1
 801513e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015142:	4413      	add	r3, r2
 8015144:	4618      	mov	r0, r3
 8015146:	f7ff fc1b 	bl	8014980 <ld_word>
 801514a:	4603      	mov	r3, r0
 801514c:	617b      	str	r3, [r7, #20]
			break;
 801514e:	e025      	b.n	801519c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	6a1a      	ldr	r2, [r3, #32]
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	09db      	lsrs	r3, r3, #7
 8015158:	4413      	add	r3, r2
 801515a:	4619      	mov	r1, r3
 801515c:	6938      	ldr	r0, [r7, #16]
 801515e:	f7ff febf 	bl	8014ee0 <move_window>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d118      	bne.n	801519a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015176:	4413      	add	r3, r2
 8015178:	4618      	mov	r0, r3
 801517a:	f7ff fc19 	bl	80149b0 <ld_dword>
 801517e:	4603      	mov	r3, r0
 8015180:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015184:	617b      	str	r3, [r7, #20]
			break;
 8015186:	e009      	b.n	801519c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015188:	2301      	movs	r3, #1
 801518a:	617b      	str	r3, [r7, #20]
 801518c:	e006      	b.n	801519c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801518e:	bf00      	nop
 8015190:	e004      	b.n	801519c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015192:	bf00      	nop
 8015194:	e002      	b.n	801519c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015196:	bf00      	nop
 8015198:	e000      	b.n	801519c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801519a:	bf00      	nop
		}
	}

	return val;
 801519c:	697b      	ldr	r3, [r7, #20]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3718      	adds	r7, #24
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80151a6:	b590      	push	{r4, r7, lr}
 80151a8:	b089      	sub	sp, #36	; 0x24
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	60f8      	str	r0, [r7, #12]
 80151ae:	60b9      	str	r1, [r7, #8]
 80151b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80151b2:	2302      	movs	r3, #2
 80151b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	f240 80d2 	bls.w	8015362 <put_fat+0x1bc>
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	695b      	ldr	r3, [r3, #20]
 80151c2:	68ba      	ldr	r2, [r7, #8]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	f080 80cc 	bcs.w	8015362 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	f000 8096 	beq.w	8015300 <put_fat+0x15a>
 80151d4:	2b03      	cmp	r3, #3
 80151d6:	f300 80cd 	bgt.w	8015374 <put_fat+0x1ce>
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d002      	beq.n	80151e4 <put_fat+0x3e>
 80151de:	2b02      	cmp	r3, #2
 80151e0:	d06e      	beq.n	80152c0 <put_fat+0x11a>
 80151e2:	e0c7      	b.n	8015374 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	61bb      	str	r3, [r7, #24]
 80151e8:	69bb      	ldr	r3, [r7, #24]
 80151ea:	085b      	lsrs	r3, r3, #1
 80151ec:	69ba      	ldr	r2, [r7, #24]
 80151ee:	4413      	add	r3, r2
 80151f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	6a1a      	ldr	r2, [r3, #32]
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	0a5b      	lsrs	r3, r3, #9
 80151fa:	4413      	add	r3, r2
 80151fc:	4619      	mov	r1, r3
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	f7ff fe6e 	bl	8014ee0 <move_window>
 8015204:	4603      	mov	r3, r0
 8015206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015208:	7ffb      	ldrb	r3, [r7, #31]
 801520a:	2b00      	cmp	r3, #0
 801520c:	f040 80ab 	bne.w	8015366 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	1c59      	adds	r1, r3, #1
 801521a:	61b9      	str	r1, [r7, #24]
 801521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015220:	4413      	add	r3, r2
 8015222:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	f003 0301 	and.w	r3, r3, #1
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00d      	beq.n	801524a <put_fat+0xa4>
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	b25b      	sxtb	r3, r3
 8015234:	f003 030f 	and.w	r3, r3, #15
 8015238:	b25a      	sxtb	r2, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	b2db      	uxtb	r3, r3
 801523e:	011b      	lsls	r3, r3, #4
 8015240:	b25b      	sxtb	r3, r3
 8015242:	4313      	orrs	r3, r2
 8015244:	b25b      	sxtb	r3, r3
 8015246:	b2db      	uxtb	r3, r3
 8015248:	e001      	b.n	801524e <put_fat+0xa8>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	b2db      	uxtb	r3, r3
 801524e:	697a      	ldr	r2, [r7, #20]
 8015250:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2201      	movs	r2, #1
 8015256:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	6a1a      	ldr	r2, [r3, #32]
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	0a5b      	lsrs	r3, r3, #9
 8015260:	4413      	add	r3, r2
 8015262:	4619      	mov	r1, r3
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f7ff fe3b 	bl	8014ee0 <move_window>
 801526a:	4603      	mov	r3, r0
 801526c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801526e:	7ffb      	ldrb	r3, [r7, #31]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d17a      	bne.n	801536a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015280:	4413      	add	r3, r2
 8015282:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	f003 0301 	and.w	r3, r3, #1
 801528a:	2b00      	cmp	r3, #0
 801528c:	d003      	beq.n	8015296 <put_fat+0xf0>
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	091b      	lsrs	r3, r3, #4
 8015292:	b2db      	uxtb	r3, r3
 8015294:	e00e      	b.n	80152b4 <put_fat+0x10e>
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	b25b      	sxtb	r3, r3
 801529c:	f023 030f 	bic.w	r3, r3, #15
 80152a0:	b25a      	sxtb	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	0a1b      	lsrs	r3, r3, #8
 80152a6:	b25b      	sxtb	r3, r3
 80152a8:	f003 030f 	and.w	r3, r3, #15
 80152ac:	b25b      	sxtb	r3, r3
 80152ae:	4313      	orrs	r3, r2
 80152b0:	b25b      	sxtb	r3, r3
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	697a      	ldr	r2, [r7, #20]
 80152b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2201      	movs	r2, #1
 80152bc:	70da      	strb	r2, [r3, #3]
			break;
 80152be:	e059      	b.n	8015374 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6a1a      	ldr	r2, [r3, #32]
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	0a1b      	lsrs	r3, r3, #8
 80152c8:	4413      	add	r3, r2
 80152ca:	4619      	mov	r1, r3
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f7ff fe07 	bl	8014ee0 <move_window>
 80152d2:	4603      	mov	r3, r0
 80152d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80152d6:	7ffb      	ldrb	r3, [r7, #31]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d148      	bne.n	801536e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	005b      	lsls	r3, r3, #1
 80152e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80152ea:	4413      	add	r3, r2
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	b292      	uxth	r2, r2
 80152f0:	4611      	mov	r1, r2
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7ff fb7f 	bl	80149f6 <st_word>
			fs->wflag = 1;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2201      	movs	r2, #1
 80152fc:	70da      	strb	r2, [r3, #3]
			break;
 80152fe:	e039      	b.n	8015374 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6a1a      	ldr	r2, [r3, #32]
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	09db      	lsrs	r3, r3, #7
 8015308:	4413      	add	r3, r2
 801530a:	4619      	mov	r1, r3
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f7ff fde7 	bl	8014ee0 <move_window>
 8015312:	4603      	mov	r3, r0
 8015314:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015316:	7ffb      	ldrb	r3, [r7, #31]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d12a      	bne.n	8015372 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	009b      	lsls	r3, r3, #2
 801532c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015330:	4413      	add	r3, r2
 8015332:	4618      	mov	r0, r3
 8015334:	f7ff fb3c 	bl	80149b0 <ld_dword>
 8015338:	4603      	mov	r3, r0
 801533a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801533e:	4323      	orrs	r3, r4
 8015340:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015350:	4413      	add	r3, r2
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	4618      	mov	r0, r3
 8015356:	f7ff fb69 	bl	8014a2c <st_dword>
			fs->wflag = 1;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2201      	movs	r2, #1
 801535e:	70da      	strb	r2, [r3, #3]
			break;
 8015360:	e008      	b.n	8015374 <put_fat+0x1ce>
		}
	}
 8015362:	bf00      	nop
 8015364:	e006      	b.n	8015374 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015366:	bf00      	nop
 8015368:	e004      	b.n	8015374 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801536a:	bf00      	nop
 801536c:	e002      	b.n	8015374 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801536e:	bf00      	nop
 8015370:	e000      	b.n	8015374 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015372:	bf00      	nop
	return res;
 8015374:	7ffb      	ldrb	r3, [r7, #31]
}
 8015376:	4618      	mov	r0, r3
 8015378:	3724      	adds	r7, #36	; 0x24
 801537a:	46bd      	mov	sp, r7
 801537c:	bd90      	pop	{r4, r7, pc}

0801537e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b088      	sub	sp, #32
 8015382:	af00      	add	r7, sp, #0
 8015384:	60f8      	str	r0, [r7, #12]
 8015386:	60b9      	str	r1, [r7, #8]
 8015388:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801538a:	2300      	movs	r3, #0
 801538c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d904      	bls.n	80153a4 <remove_chain+0x26>
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	695b      	ldr	r3, [r3, #20]
 801539e:	68ba      	ldr	r2, [r7, #8]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d301      	bcc.n	80153a8 <remove_chain+0x2a>
 80153a4:	2302      	movs	r3, #2
 80153a6:	e04b      	b.n	8015440 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d00c      	beq.n	80153c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80153ae:	f04f 32ff 	mov.w	r2, #4294967295
 80153b2:	6879      	ldr	r1, [r7, #4]
 80153b4:	69b8      	ldr	r0, [r7, #24]
 80153b6:	f7ff fef6 	bl	80151a6 <put_fat>
 80153ba:	4603      	mov	r3, r0
 80153bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80153be:	7ffb      	ldrb	r3, [r7, #31]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d001      	beq.n	80153c8 <remove_chain+0x4a>
 80153c4:	7ffb      	ldrb	r3, [r7, #31]
 80153c6:	e03b      	b.n	8015440 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80153c8:	68b9      	ldr	r1, [r7, #8]
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f7ff fe43 	bl	8015056 <get_fat>
 80153d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d031      	beq.n	801543c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d101      	bne.n	80153e2 <remove_chain+0x64>
 80153de:	2302      	movs	r3, #2
 80153e0:	e02e      	b.n	8015440 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153e8:	d101      	bne.n	80153ee <remove_chain+0x70>
 80153ea:	2301      	movs	r3, #1
 80153ec:	e028      	b.n	8015440 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80153ee:	2200      	movs	r2, #0
 80153f0:	68b9      	ldr	r1, [r7, #8]
 80153f2:	69b8      	ldr	r0, [r7, #24]
 80153f4:	f7ff fed7 	bl	80151a6 <put_fat>
 80153f8:	4603      	mov	r3, r0
 80153fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80153fc:	7ffb      	ldrb	r3, [r7, #31]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d001      	beq.n	8015406 <remove_chain+0x88>
 8015402:	7ffb      	ldrb	r3, [r7, #31]
 8015404:	e01c      	b.n	8015440 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	691a      	ldr	r2, [r3, #16]
 801540a:	69bb      	ldr	r3, [r7, #24]
 801540c:	695b      	ldr	r3, [r3, #20]
 801540e:	3b02      	subs	r3, #2
 8015410:	429a      	cmp	r2, r3
 8015412:	d20b      	bcs.n	801542c <remove_chain+0xae>
			fs->free_clst++;
 8015414:	69bb      	ldr	r3, [r7, #24]
 8015416:	691b      	ldr	r3, [r3, #16]
 8015418:	1c5a      	adds	r2, r3, #1
 801541a:	69bb      	ldr	r3, [r7, #24]
 801541c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801541e:	69bb      	ldr	r3, [r7, #24]
 8015420:	791b      	ldrb	r3, [r3, #4]
 8015422:	f043 0301 	orr.w	r3, r3, #1
 8015426:	b2da      	uxtb	r2, r3
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	695b      	ldr	r3, [r3, #20]
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	429a      	cmp	r2, r3
 8015438:	d3c6      	bcc.n	80153c8 <remove_chain+0x4a>
 801543a:	e000      	b.n	801543e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801543c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801543e:	2300      	movs	r3, #0
}
 8015440:	4618      	mov	r0, r3
 8015442:	3720      	adds	r7, #32
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b088      	sub	sp, #32
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d10d      	bne.n	801547a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	68db      	ldr	r3, [r3, #12]
 8015462:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d004      	beq.n	8015474 <create_chain+0x2c>
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	695b      	ldr	r3, [r3, #20]
 801546e:	69ba      	ldr	r2, [r7, #24]
 8015470:	429a      	cmp	r2, r3
 8015472:	d31b      	bcc.n	80154ac <create_chain+0x64>
 8015474:	2301      	movs	r3, #1
 8015476:	61bb      	str	r3, [r7, #24]
 8015478:	e018      	b.n	80154ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801547a:	6839      	ldr	r1, [r7, #0]
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f7ff fdea 	bl	8015056 <get_fat>
 8015482:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2b01      	cmp	r3, #1
 8015488:	d801      	bhi.n	801548e <create_chain+0x46>
 801548a:	2301      	movs	r3, #1
 801548c:	e070      	b.n	8015570 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015494:	d101      	bne.n	801549a <create_chain+0x52>
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	e06a      	b.n	8015570 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801549a:	693b      	ldr	r3, [r7, #16]
 801549c:	695b      	ldr	r3, [r3, #20]
 801549e:	68fa      	ldr	r2, [r7, #12]
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d201      	bcs.n	80154a8 <create_chain+0x60>
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	e063      	b.n	8015570 <create_chain+0x128>
		scl = clst;
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	3301      	adds	r3, #1
 80154b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	695b      	ldr	r3, [r3, #20]
 80154ba:	69fa      	ldr	r2, [r7, #28]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d307      	bcc.n	80154d0 <create_chain+0x88>
				ncl = 2;
 80154c0:	2302      	movs	r3, #2
 80154c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80154c4:	69fa      	ldr	r2, [r7, #28]
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d901      	bls.n	80154d0 <create_chain+0x88>
 80154cc:	2300      	movs	r3, #0
 80154ce:	e04f      	b.n	8015570 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80154d0:	69f9      	ldr	r1, [r7, #28]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7ff fdbf 	bl	8015056 <get_fat>
 80154d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00e      	beq.n	80154fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d003      	beq.n	80154ee <create_chain+0xa6>
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ec:	d101      	bne.n	80154f2 <create_chain+0xaa>
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	e03e      	b.n	8015570 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80154f2:	69fa      	ldr	r2, [r7, #28]
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d1da      	bne.n	80154b0 <create_chain+0x68>
 80154fa:	2300      	movs	r3, #0
 80154fc:	e038      	b.n	8015570 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80154fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015500:	f04f 32ff 	mov.w	r2, #4294967295
 8015504:	69f9      	ldr	r1, [r7, #28]
 8015506:	6938      	ldr	r0, [r7, #16]
 8015508:	f7ff fe4d 	bl	80151a6 <put_fat>
 801550c:	4603      	mov	r3, r0
 801550e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d109      	bne.n	801552a <create_chain+0xe2>
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d006      	beq.n	801552a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801551c:	69fa      	ldr	r2, [r7, #28]
 801551e:	6839      	ldr	r1, [r7, #0]
 8015520:	6938      	ldr	r0, [r7, #16]
 8015522:	f7ff fe40 	bl	80151a6 <put_fat>
 8015526:	4603      	mov	r3, r0
 8015528:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801552a:	7dfb      	ldrb	r3, [r7, #23]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d116      	bne.n	801555e <create_chain+0x116>
		fs->last_clst = ncl;
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	69fa      	ldr	r2, [r7, #28]
 8015534:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	691a      	ldr	r2, [r3, #16]
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	695b      	ldr	r3, [r3, #20]
 801553e:	3b02      	subs	r3, #2
 8015540:	429a      	cmp	r2, r3
 8015542:	d804      	bhi.n	801554e <create_chain+0x106>
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	691b      	ldr	r3, [r3, #16]
 8015548:	1e5a      	subs	r2, r3, #1
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	791b      	ldrb	r3, [r3, #4]
 8015552:	f043 0301 	orr.w	r3, r3, #1
 8015556:	b2da      	uxtb	r2, r3
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	711a      	strb	r2, [r3, #4]
 801555c:	e007      	b.n	801556e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801555e:	7dfb      	ldrb	r3, [r7, #23]
 8015560:	2b01      	cmp	r3, #1
 8015562:	d102      	bne.n	801556a <create_chain+0x122>
 8015564:	f04f 33ff 	mov.w	r3, #4294967295
 8015568:	e000      	b.n	801556c <create_chain+0x124>
 801556a:	2301      	movs	r3, #1
 801556c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801556e:	69fb      	ldr	r3, [r7, #28]
}
 8015570:	4618      	mov	r0, r3
 8015572:	3720      	adds	r7, #32
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015578:	b480      	push	{r7}
 801557a:	b087      	sub	sp, #28
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801558c:	3304      	adds	r3, #4
 801558e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	0a5b      	lsrs	r3, r3, #9
 8015594:	68fa      	ldr	r2, [r7, #12]
 8015596:	8952      	ldrh	r2, [r2, #10]
 8015598:	fbb3 f3f2 	udiv	r3, r3, r2
 801559c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	1d1a      	adds	r2, r3, #4
 80155a2:	613a      	str	r2, [r7, #16]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d101      	bne.n	80155b2 <clmt_clust+0x3a>
 80155ae:	2300      	movs	r3, #0
 80155b0:	e010      	b.n	80155d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80155b2:	697a      	ldr	r2, [r7, #20]
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d307      	bcc.n	80155ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80155ba:	697a      	ldr	r2, [r7, #20]
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	617b      	str	r3, [r7, #20]
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	3304      	adds	r3, #4
 80155c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80155c8:	e7e9      	b.n	801559e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80155ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	4413      	add	r3, r2
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	371c      	adds	r7, #28
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr

080155e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80155f6:	d204      	bcs.n	8015602 <dir_sdi+0x22>
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	f003 031f 	and.w	r3, r3, #31
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d001      	beq.n	8015606 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015602:	2302      	movs	r3, #2
 8015604:	e063      	b.n	80156ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	683a      	ldr	r2, [r7, #0]
 801560a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d106      	bne.n	8015626 <dir_sdi+0x46>
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	2b02      	cmp	r3, #2
 801561e:	d902      	bls.n	8015626 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015624:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d10c      	bne.n	8015646 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	095b      	lsrs	r3, r3, #5
 8015630:	693a      	ldr	r2, [r7, #16]
 8015632:	8912      	ldrh	r2, [r2, #8]
 8015634:	4293      	cmp	r3, r2
 8015636:	d301      	bcc.n	801563c <dir_sdi+0x5c>
 8015638:	2302      	movs	r3, #2
 801563a:	e048      	b.n	80156ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	61da      	str	r2, [r3, #28]
 8015644:	e029      	b.n	801569a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	895b      	ldrh	r3, [r3, #10]
 801564a:	025b      	lsls	r3, r3, #9
 801564c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801564e:	e019      	b.n	8015684 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6979      	ldr	r1, [r7, #20]
 8015654:	4618      	mov	r0, r3
 8015656:	f7ff fcfe 	bl	8015056 <get_fat>
 801565a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015662:	d101      	bne.n	8015668 <dir_sdi+0x88>
 8015664:	2301      	movs	r3, #1
 8015666:	e032      	b.n	80156ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	2b01      	cmp	r3, #1
 801566c:	d904      	bls.n	8015678 <dir_sdi+0x98>
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	695b      	ldr	r3, [r3, #20]
 8015672:	697a      	ldr	r2, [r7, #20]
 8015674:	429a      	cmp	r2, r3
 8015676:	d301      	bcc.n	801567c <dir_sdi+0x9c>
 8015678:	2302      	movs	r3, #2
 801567a:	e028      	b.n	80156ce <dir_sdi+0xee>
			ofs -= csz;
 801567c:	683a      	ldr	r2, [r7, #0]
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015684:	683a      	ldr	r2, [r7, #0]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	429a      	cmp	r2, r3
 801568a:	d2e1      	bcs.n	8015650 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801568c:	6979      	ldr	r1, [r7, #20]
 801568e:	6938      	ldr	r0, [r7, #16]
 8015690:	f7ff fcc2 	bl	8015018 <clust2sect>
 8015694:	4602      	mov	r2, r0
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	697a      	ldr	r2, [r7, #20]
 801569e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	69db      	ldr	r3, [r3, #28]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d101      	bne.n	80156ac <dir_sdi+0xcc>
 80156a8:	2302      	movs	r3, #2
 80156aa:	e010      	b.n	80156ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	69da      	ldr	r2, [r3, #28]
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	0a5b      	lsrs	r3, r3, #9
 80156b4:	441a      	add	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80156ba:	693b      	ldr	r3, [r7, #16]
 80156bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156c6:	441a      	add	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}

080156d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b086      	sub	sp, #24
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	695b      	ldr	r3, [r3, #20]
 80156ea:	3320      	adds	r3, #32
 80156ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69db      	ldr	r3, [r3, #28]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d003      	beq.n	80156fe <dir_next+0x28>
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80156fc:	d301      	bcc.n	8015702 <dir_next+0x2c>
 80156fe:	2304      	movs	r3, #4
 8015700:	e0aa      	b.n	8015858 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015708:	2b00      	cmp	r3, #0
 801570a:	f040 8098 	bne.w	801583e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	69db      	ldr	r3, [r3, #28]
 8015712:	1c5a      	adds	r2, r3, #1
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	699b      	ldr	r3, [r3, #24]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d10b      	bne.n	8015738 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	095b      	lsrs	r3, r3, #5
 8015724:	68fa      	ldr	r2, [r7, #12]
 8015726:	8912      	ldrh	r2, [r2, #8]
 8015728:	4293      	cmp	r3, r2
 801572a:	f0c0 8088 	bcc.w	801583e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2200      	movs	r2, #0
 8015732:	61da      	str	r2, [r3, #28]
 8015734:	2304      	movs	r3, #4
 8015736:	e08f      	b.n	8015858 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	0a5b      	lsrs	r3, r3, #9
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	8952      	ldrh	r2, [r2, #10]
 8015740:	3a01      	subs	r2, #1
 8015742:	4013      	ands	r3, r2
 8015744:	2b00      	cmp	r3, #0
 8015746:	d17a      	bne.n	801583e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	699b      	ldr	r3, [r3, #24]
 801574e:	4619      	mov	r1, r3
 8015750:	4610      	mov	r0, r2
 8015752:	f7ff fc80 	bl	8015056 <get_fat>
 8015756:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2b01      	cmp	r3, #1
 801575c:	d801      	bhi.n	8015762 <dir_next+0x8c>
 801575e:	2302      	movs	r3, #2
 8015760:	e07a      	b.n	8015858 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015768:	d101      	bne.n	801576e <dir_next+0x98>
 801576a:	2301      	movs	r3, #1
 801576c:	e074      	b.n	8015858 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	695b      	ldr	r3, [r3, #20]
 8015772:	697a      	ldr	r2, [r7, #20]
 8015774:	429a      	cmp	r2, r3
 8015776:	d358      	bcc.n	801582a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	61da      	str	r2, [r3, #28]
 8015784:	2304      	movs	r3, #4
 8015786:	e067      	b.n	8015858 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	699b      	ldr	r3, [r3, #24]
 801578e:	4619      	mov	r1, r3
 8015790:	4610      	mov	r0, r2
 8015792:	f7ff fe59 	bl	8015448 <create_chain>
 8015796:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d101      	bne.n	80157a2 <dir_next+0xcc>
 801579e:	2307      	movs	r3, #7
 80157a0:	e05a      	b.n	8015858 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d101      	bne.n	80157ac <dir_next+0xd6>
 80157a8:	2302      	movs	r3, #2
 80157aa:	e055      	b.n	8015858 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157b2:	d101      	bne.n	80157b8 <dir_next+0xe2>
 80157b4:	2301      	movs	r3, #1
 80157b6:	e04f      	b.n	8015858 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	f7ff fb4d 	bl	8014e58 <sync_window>
 80157be:	4603      	mov	r3, r0
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d001      	beq.n	80157c8 <dir_next+0xf2>
 80157c4:	2301      	movs	r3, #1
 80157c6:	e047      	b.n	8015858 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	3330      	adds	r3, #48	; 0x30
 80157cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80157d0:	2100      	movs	r1, #0
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7ff f977 	bl	8014ac6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80157d8:	2300      	movs	r3, #0
 80157da:	613b      	str	r3, [r7, #16]
 80157dc:	6979      	ldr	r1, [r7, #20]
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f7ff fc1a 	bl	8015018 <clust2sect>
 80157e4:	4602      	mov	r2, r0
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80157ea:	e012      	b.n	8015812 <dir_next+0x13c>
						fs->wflag = 1;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2201      	movs	r2, #1
 80157f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80157f2:	68f8      	ldr	r0, [r7, #12]
 80157f4:	f7ff fb30 	bl	8014e58 <sync_window>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d001      	beq.n	8015802 <dir_next+0x12c>
 80157fe:	2301      	movs	r3, #1
 8015800:	e02a      	b.n	8015858 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	3301      	adds	r3, #1
 8015806:	613b      	str	r3, [r7, #16]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801580c:	1c5a      	adds	r2, r3, #1
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	62da      	str	r2, [r3, #44]	; 0x2c
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	895b      	ldrh	r3, [r3, #10]
 8015816:	461a      	mov	r2, r3
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	4293      	cmp	r3, r2
 801581c:	d3e6      	bcc.n	80157ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	1ad2      	subs	r2, r2, r3
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	697a      	ldr	r2, [r7, #20]
 801582e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015830:	6979      	ldr	r1, [r7, #20]
 8015832:	68f8      	ldr	r0, [r7, #12]
 8015834:	f7ff fbf0 	bl	8015018 <clust2sect>
 8015838:	4602      	mov	r2, r0
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	68ba      	ldr	r2, [r7, #8]
 8015842:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015850:	441a      	add	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3718      	adds	r7, #24
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b086      	sub	sp, #24
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015870:	2100      	movs	r1, #0
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f7ff feb4 	bl	80155e0 <dir_sdi>
 8015878:	4603      	mov	r3, r0
 801587a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801587c:	7dfb      	ldrb	r3, [r7, #23]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d12b      	bne.n	80158da <dir_alloc+0x7a>
		n = 0;
 8015882:	2300      	movs	r3, #0
 8015884:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	69db      	ldr	r3, [r3, #28]
 801588a:	4619      	mov	r1, r3
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f7ff fb27 	bl	8014ee0 <move_window>
 8015892:	4603      	mov	r3, r0
 8015894:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015896:	7dfb      	ldrb	r3, [r7, #23]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d11d      	bne.n	80158d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6a1b      	ldr	r3, [r3, #32]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	2be5      	cmp	r3, #229	; 0xe5
 80158a4:	d004      	beq.n	80158b0 <dir_alloc+0x50>
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6a1b      	ldr	r3, [r3, #32]
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d107      	bne.n	80158c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	3301      	adds	r3, #1
 80158b4:	613b      	str	r3, [r7, #16]
 80158b6:	693a      	ldr	r2, [r7, #16]
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d102      	bne.n	80158c4 <dir_alloc+0x64>
 80158be:	e00c      	b.n	80158da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80158c0:	2300      	movs	r3, #0
 80158c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80158c4:	2101      	movs	r1, #1
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff ff05 	bl	80156d6 <dir_next>
 80158cc:	4603      	mov	r3, r0
 80158ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80158d0:	7dfb      	ldrb	r3, [r7, #23]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d0d7      	beq.n	8015886 <dir_alloc+0x26>
 80158d6:	e000      	b.n	80158da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80158d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80158da:	7dfb      	ldrb	r3, [r7, #23]
 80158dc:	2b04      	cmp	r3, #4
 80158de:	d101      	bne.n	80158e4 <dir_alloc+0x84>
 80158e0:	2307      	movs	r3, #7
 80158e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80158e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3718      	adds	r7, #24
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}

080158ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80158ee:	b580      	push	{r7, lr}
 80158f0:	b084      	sub	sp, #16
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	331a      	adds	r3, #26
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7ff f83f 	bl	8014980 <ld_word>
 8015902:	4603      	mov	r3, r0
 8015904:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	781b      	ldrb	r3, [r3, #0]
 801590a:	2b03      	cmp	r3, #3
 801590c:	d109      	bne.n	8015922 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	3314      	adds	r3, #20
 8015912:	4618      	mov	r0, r3
 8015914:	f7ff f834 	bl	8014980 <ld_word>
 8015918:	4603      	mov	r3, r0
 801591a:	041b      	lsls	r3, r3, #16
 801591c:	68fa      	ldr	r2, [r7, #12]
 801591e:	4313      	orrs	r3, r2
 8015920:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015922:	68fb      	ldr	r3, [r7, #12]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3710      	adds	r7, #16
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	331a      	adds	r3, #26
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	b292      	uxth	r2, r2
 8015940:	4611      	mov	r1, r2
 8015942:	4618      	mov	r0, r3
 8015944:	f7ff f857 	bl	80149f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b03      	cmp	r3, #3
 801594e:	d109      	bne.n	8015964 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	f103 0214 	add.w	r2, r3, #20
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	0c1b      	lsrs	r3, r3, #16
 801595a:	b29b      	uxth	r3, r3
 801595c:	4619      	mov	r1, r3
 801595e:	4610      	mov	r0, r2
 8015960:	f7ff f849 	bl	80149f6 <st_word>
	}
}
 8015964:	bf00      	nop
 8015966:	3710      	adds	r7, #16
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b086      	sub	sp, #24
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8015976:	2304      	movs	r3, #4
 8015978:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8015980:	e03c      	b.n	80159fc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	69db      	ldr	r3, [r3, #28]
 8015986:	4619      	mov	r1, r3
 8015988:	6938      	ldr	r0, [r7, #16]
 801598a:	f7ff faa9 	bl	8014ee0 <move_window>
 801598e:	4603      	mov	r3, r0
 8015990:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015992:	7dfb      	ldrb	r3, [r7, #23]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d136      	bne.n	8015a06 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6a1b      	ldr	r3, [r3, #32]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80159a0:	7bfb      	ldrb	r3, [r7, #15]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d102      	bne.n	80159ac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80159a6:	2304      	movs	r3, #4
 80159a8:	75fb      	strb	r3, [r7, #23]
 80159aa:	e031      	b.n	8015a10 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6a1b      	ldr	r3, [r3, #32]
 80159b0:	330b      	adds	r3, #11
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159b8:	73bb      	strb	r3, [r7, #14]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	7bba      	ldrb	r2, [r7, #14]
 80159be:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80159c0:	7bfb      	ldrb	r3, [r7, #15]
 80159c2:	2be5      	cmp	r3, #229	; 0xe5
 80159c4:	d011      	beq.n	80159ea <dir_read+0x7e>
 80159c6:	7bfb      	ldrb	r3, [r7, #15]
 80159c8:	2b2e      	cmp	r3, #46	; 0x2e
 80159ca:	d00e      	beq.n	80159ea <dir_read+0x7e>
 80159cc:	7bbb      	ldrb	r3, [r7, #14]
 80159ce:	2b0f      	cmp	r3, #15
 80159d0:	d00b      	beq.n	80159ea <dir_read+0x7e>
 80159d2:	7bbb      	ldrb	r3, [r7, #14]
 80159d4:	f023 0320 	bic.w	r3, r3, #32
 80159d8:	2b08      	cmp	r3, #8
 80159da:	bf0c      	ite	eq
 80159dc:	2301      	moveq	r3, #1
 80159de:	2300      	movne	r3, #0
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	461a      	mov	r2, r3
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d00f      	beq.n	8015a0a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80159ea:	2100      	movs	r1, #0
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7ff fe72 	bl	80156d6 <dir_next>
 80159f2:	4603      	mov	r3, r0
 80159f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80159f6:	7dfb      	ldrb	r3, [r7, #23]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d108      	bne.n	8015a0e <dir_read+0xa2>
	while (dp->sect) {
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	69db      	ldr	r3, [r3, #28]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1be      	bne.n	8015982 <dir_read+0x16>
 8015a04:	e004      	b.n	8015a10 <dir_read+0xa4>
		if (res != FR_OK) break;
 8015a06:	bf00      	nop
 8015a08:	e002      	b.n	8015a10 <dir_read+0xa4>
				break;
 8015a0a:	bf00      	nop
 8015a0c:	e000      	b.n	8015a10 <dir_read+0xa4>
		if (res != FR_OK) break;
 8015a0e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015a10:	7dfb      	ldrb	r3, [r7, #23]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d002      	beq.n	8015a1c <dir_read+0xb0>
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2200      	movs	r2, #0
 8015a1a:	61da      	str	r2, [r3, #28]
	return res;
 8015a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3718      	adds	r7, #24
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b086      	sub	sp, #24
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015a34:	2100      	movs	r1, #0
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7ff fdd2 	bl	80155e0 <dir_sdi>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015a40:	7dfb      	ldrb	r3, [r7, #23]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d001      	beq.n	8015a4a <dir_find+0x24>
 8015a46:	7dfb      	ldrb	r3, [r7, #23]
 8015a48:	e03e      	b.n	8015ac8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	69db      	ldr	r3, [r3, #28]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6938      	ldr	r0, [r7, #16]
 8015a52:	f7ff fa45 	bl	8014ee0 <move_window>
 8015a56:	4603      	mov	r3, r0
 8015a58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015a5a:	7dfb      	ldrb	r3, [r7, #23]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d12f      	bne.n	8015ac0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a1b      	ldr	r3, [r3, #32]
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015a68:	7bfb      	ldrb	r3, [r7, #15]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d102      	bne.n	8015a74 <dir_find+0x4e>
 8015a6e:	2304      	movs	r3, #4
 8015a70:	75fb      	strb	r3, [r7, #23]
 8015a72:	e028      	b.n	8015ac6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	6a1b      	ldr	r3, [r3, #32]
 8015a78:	330b      	adds	r3, #11
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a80:	b2da      	uxtb	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6a1b      	ldr	r3, [r3, #32]
 8015a8a:	330b      	adds	r3, #11
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	f003 0308 	and.w	r3, r3, #8
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d10a      	bne.n	8015aac <dir_find+0x86>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6a18      	ldr	r0, [r3, #32]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	3324      	adds	r3, #36	; 0x24
 8015a9e:	220b      	movs	r2, #11
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	f7ff f82b 	bl	8014afc <mem_cmp>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d00b      	beq.n	8015ac4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015aac:	2100      	movs	r1, #0
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff fe11 	bl	80156d6 <dir_next>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015ab8:	7dfb      	ldrb	r3, [r7, #23]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d0c5      	beq.n	8015a4a <dir_find+0x24>
 8015abe:	e002      	b.n	8015ac6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8015ac0:	bf00      	nop
 8015ac2:	e000      	b.n	8015ac6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015ac4:	bf00      	nop

	return res;
 8015ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3718      	adds	r7, #24
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}

08015ad0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015ade:	2101      	movs	r1, #1
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7ff febd 	bl	8015860 <dir_alloc>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d11c      	bne.n	8015b2a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	69db      	ldr	r3, [r3, #28]
 8015af4:	4619      	mov	r1, r3
 8015af6:	68b8      	ldr	r0, [r7, #8]
 8015af8:	f7ff f9f2 	bl	8014ee0 <move_window>
 8015afc:	4603      	mov	r3, r0
 8015afe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015b00:	7bfb      	ldrb	r3, [r7, #15]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d111      	bne.n	8015b2a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6a1b      	ldr	r3, [r3, #32]
 8015b0a:	2220      	movs	r2, #32
 8015b0c:	2100      	movs	r1, #0
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7fe ffd9 	bl	8014ac6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6a18      	ldr	r0, [r3, #32]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	3324      	adds	r3, #36	; 0x24
 8015b1c:	220b      	movs	r2, #11
 8015b1e:	4619      	mov	r1, r3
 8015b20:	f7fe ffb0 	bl	8014a84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2201      	movs	r2, #1
 8015b28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3710      	adds	r7, #16
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	69db      	ldr	r3, [r3, #28]
 8015b46:	4619      	mov	r1, r3
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f7ff f9c9 	bl	8014ee0 <move_window>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8015b52:	7afb      	ldrb	r3, [r7, #11]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d106      	bne.n	8015b66 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6a1b      	ldr	r3, [r3, #32]
 8015b5c:	22e5      	movs	r2, #229	; 0xe5
 8015b5e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2201      	movs	r2, #1
 8015b64:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8015b66:	7afb      	ldrb	r3, [r7, #11]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3710      	adds	r7, #16
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b086      	sub	sp, #24
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	69db      	ldr	r3, [r3, #28]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d04e      	beq.n	8015c26 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	613b      	str	r3, [r7, #16]
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8015b90:	e021      	b.n	8015bd6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6a1a      	ldr	r2, [r3, #32]
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	1c59      	adds	r1, r3, #1
 8015b9a:	6179      	str	r1, [r7, #20]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8015ba2:	7bfb      	ldrb	r3, [r7, #15]
 8015ba4:	2b20      	cmp	r3, #32
 8015ba6:	d100      	bne.n	8015baa <get_fileinfo+0x3a>
 8015ba8:	e015      	b.n	8015bd6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8015baa:	7bfb      	ldrb	r3, [r7, #15]
 8015bac:	2b05      	cmp	r3, #5
 8015bae:	d101      	bne.n	8015bb4 <get_fileinfo+0x44>
 8015bb0:	23e5      	movs	r3, #229	; 0xe5
 8015bb2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	2b09      	cmp	r3, #9
 8015bb8:	d106      	bne.n	8015bc8 <get_fileinfo+0x58>
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	1c5a      	adds	r2, r3, #1
 8015bbe:	613a      	str	r2, [r7, #16]
 8015bc0:	683a      	ldr	r2, [r7, #0]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	222e      	movs	r2, #46	; 0x2e
 8015bc6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	613a      	str	r2, [r7, #16]
 8015bce:	683a      	ldr	r2, [r7, #0]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	7bfa      	ldrb	r2, [r7, #15]
 8015bd4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	2b0a      	cmp	r3, #10
 8015bda:	d9da      	bls.n	8015b92 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8015bdc:	683a      	ldr	r2, [r7, #0]
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	4413      	add	r3, r2
 8015be2:	3309      	adds	r3, #9
 8015be4:	2200      	movs	r2, #0
 8015be6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6a1b      	ldr	r3, [r3, #32]
 8015bec:	7ada      	ldrb	r2, [r3, #11]
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6a1b      	ldr	r3, [r3, #32]
 8015bf6:	331c      	adds	r3, #28
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7fe fed9 	bl	80149b0 <ld_dword>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6a1b      	ldr	r3, [r3, #32]
 8015c08:	3316      	adds	r3, #22
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7fe fed0 	bl	80149b0 <ld_dword>
 8015c10:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	80da      	strh	r2, [r3, #6]
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	0c1b      	lsrs	r3, r3, #16
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	809a      	strh	r2, [r3, #4]
 8015c24:	e000      	b.n	8015c28 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015c26:	bf00      	nop
}
 8015c28:	3718      	adds	r7, #24
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
	...

08015c30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b088      	sub	sp, #32
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	60fb      	str	r3, [r7, #12]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	3324      	adds	r3, #36	; 0x24
 8015c44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8015c46:	220b      	movs	r2, #11
 8015c48:	2120      	movs	r1, #32
 8015c4a:	68b8      	ldr	r0, [r7, #8]
 8015c4c:	f7fe ff3b 	bl	8014ac6 <mem_set>
	si = i = 0; ni = 8;
 8015c50:	2300      	movs	r3, #0
 8015c52:	613b      	str	r3, [r7, #16]
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	61fb      	str	r3, [r7, #28]
 8015c58:	2308      	movs	r3, #8
 8015c5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8015c5c:	69fb      	ldr	r3, [r7, #28]
 8015c5e:	1c5a      	adds	r2, r3, #1
 8015c60:	61fa      	str	r2, [r7, #28]
 8015c62:	68fa      	ldr	r2, [r7, #12]
 8015c64:	4413      	add	r3, r2
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015c6a:	7efb      	ldrb	r3, [r7, #27]
 8015c6c:	2b20      	cmp	r3, #32
 8015c6e:	d94e      	bls.n	8015d0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015c70:	7efb      	ldrb	r3, [r7, #27]
 8015c72:	2b2f      	cmp	r3, #47	; 0x2f
 8015c74:	d006      	beq.n	8015c84 <create_name+0x54>
 8015c76:	7efb      	ldrb	r3, [r7, #27]
 8015c78:	2b5c      	cmp	r3, #92	; 0x5c
 8015c7a:	d110      	bne.n	8015c9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015c7c:	e002      	b.n	8015c84 <create_name+0x54>
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	3301      	adds	r3, #1
 8015c82:	61fb      	str	r3, [r7, #28]
 8015c84:	68fa      	ldr	r2, [r7, #12]
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	4413      	add	r3, r2
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8015c8e:	d0f6      	beq.n	8015c7e <create_name+0x4e>
 8015c90:	68fa      	ldr	r2, [r7, #12]
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	4413      	add	r3, r2
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	2b5c      	cmp	r3, #92	; 0x5c
 8015c9a:	d0f0      	beq.n	8015c7e <create_name+0x4e>
			break;
 8015c9c:	e038      	b.n	8015d10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8015c9e:	7efb      	ldrb	r3, [r7, #27]
 8015ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8015ca2:	d003      	beq.n	8015cac <create_name+0x7c>
 8015ca4:	693a      	ldr	r2, [r7, #16]
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d30c      	bcc.n	8015cc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	2b0b      	cmp	r3, #11
 8015cb0:	d002      	beq.n	8015cb8 <create_name+0x88>
 8015cb2:	7efb      	ldrb	r3, [r7, #27]
 8015cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8015cb6:	d001      	beq.n	8015cbc <create_name+0x8c>
 8015cb8:	2306      	movs	r3, #6
 8015cba:	e044      	b.n	8015d46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015cbc:	2308      	movs	r3, #8
 8015cbe:	613b      	str	r3, [r7, #16]
 8015cc0:	230b      	movs	r3, #11
 8015cc2:	617b      	str	r3, [r7, #20]
			continue;
 8015cc4:	e022      	b.n	8015d0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8015cc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	da04      	bge.n	8015cd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8015cce:	7efb      	ldrb	r3, [r7, #27]
 8015cd0:	3b80      	subs	r3, #128	; 0x80
 8015cd2:	4a1f      	ldr	r2, [pc, #124]	; (8015d50 <create_name+0x120>)
 8015cd4:	5cd3      	ldrb	r3, [r2, r3]
 8015cd6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015cd8:	7efb      	ldrb	r3, [r7, #27]
 8015cda:	4619      	mov	r1, r3
 8015cdc:	481d      	ldr	r0, [pc, #116]	; (8015d54 <create_name+0x124>)
 8015cde:	f7fe ff34 	bl	8014b4a <chk_chr>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d001      	beq.n	8015cec <create_name+0xbc>
 8015ce8:	2306      	movs	r3, #6
 8015cea:	e02c      	b.n	8015d46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8015cec:	7efb      	ldrb	r3, [r7, #27]
 8015cee:	2b60      	cmp	r3, #96	; 0x60
 8015cf0:	d905      	bls.n	8015cfe <create_name+0xce>
 8015cf2:	7efb      	ldrb	r3, [r7, #27]
 8015cf4:	2b7a      	cmp	r3, #122	; 0x7a
 8015cf6:	d802      	bhi.n	8015cfe <create_name+0xce>
 8015cf8:	7efb      	ldrb	r3, [r7, #27]
 8015cfa:	3b20      	subs	r3, #32
 8015cfc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	1c5a      	adds	r2, r3, #1
 8015d02:	613a      	str	r2, [r7, #16]
 8015d04:	68ba      	ldr	r2, [r7, #8]
 8015d06:	4413      	add	r3, r2
 8015d08:	7efa      	ldrb	r2, [r7, #27]
 8015d0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8015d0c:	e7a6      	b.n	8015c5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015d0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015d10:	68fa      	ldr	r2, [r7, #12]
 8015d12:	69fb      	ldr	r3, [r7, #28]
 8015d14:	441a      	add	r2, r3
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d101      	bne.n	8015d24 <create_name+0xf4>
 8015d20:	2306      	movs	r3, #6
 8015d22:	e010      	b.n	8015d46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	2be5      	cmp	r3, #229	; 0xe5
 8015d2a:	d102      	bne.n	8015d32 <create_name+0x102>
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	2205      	movs	r2, #5
 8015d30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015d32:	7efb      	ldrb	r3, [r7, #27]
 8015d34:	2b20      	cmp	r3, #32
 8015d36:	d801      	bhi.n	8015d3c <create_name+0x10c>
 8015d38:	2204      	movs	r2, #4
 8015d3a:	e000      	b.n	8015d3e <create_name+0x10e>
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	330b      	adds	r3, #11
 8015d42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8015d44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3720      	adds	r7, #32
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	0801c1f0 	.word	0x0801c1f0
 8015d54:	0801c130 	.word	0x0801c130

08015d58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b086      	sub	sp, #24
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015d6c:	e002      	b.n	8015d74 <follow_path+0x1c>
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	3301      	adds	r3, #1
 8015d72:	603b      	str	r3, [r7, #0]
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	2b2f      	cmp	r3, #47	; 0x2f
 8015d7a:	d0f8      	beq.n	8015d6e <follow_path+0x16>
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	2b5c      	cmp	r3, #92	; 0x5c
 8015d82:	d0f4      	beq.n	8015d6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	2200      	movs	r2, #0
 8015d88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	2b1f      	cmp	r3, #31
 8015d90:	d80a      	bhi.n	8015da8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2280      	movs	r2, #128	; 0x80
 8015d96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7ff fc1f 	bl	80155e0 <dir_sdi>
 8015da2:	4603      	mov	r3, r0
 8015da4:	75fb      	strb	r3, [r7, #23]
 8015da6:	e043      	b.n	8015e30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015da8:	463b      	mov	r3, r7
 8015daa:	4619      	mov	r1, r3
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7ff ff3f 	bl	8015c30 <create_name>
 8015db2:	4603      	mov	r3, r0
 8015db4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015db6:	7dfb      	ldrb	r3, [r7, #23]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d134      	bne.n	8015e26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f7ff fe32 	bl	8015a26 <dir_find>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015dcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015dce:	7dfb      	ldrb	r3, [r7, #23]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d00a      	beq.n	8015dea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015dd4:	7dfb      	ldrb	r3, [r7, #23]
 8015dd6:	2b04      	cmp	r3, #4
 8015dd8:	d127      	bne.n	8015e2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015dda:	7afb      	ldrb	r3, [r7, #11]
 8015ddc:	f003 0304 	and.w	r3, r3, #4
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d122      	bne.n	8015e2a <follow_path+0xd2>
 8015de4:	2305      	movs	r3, #5
 8015de6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015de8:	e01f      	b.n	8015e2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015dea:	7afb      	ldrb	r3, [r7, #11]
 8015dec:	f003 0304 	and.w	r3, r3, #4
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d11c      	bne.n	8015e2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	799b      	ldrb	r3, [r3, #6]
 8015df8:	f003 0310 	and.w	r3, r3, #16
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d102      	bne.n	8015e06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015e00:	2305      	movs	r3, #5
 8015e02:	75fb      	strb	r3, [r7, #23]
 8015e04:	e014      	b.n	8015e30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	695b      	ldr	r3, [r3, #20]
 8015e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e14:	4413      	add	r3, r2
 8015e16:	4619      	mov	r1, r3
 8015e18:	68f8      	ldr	r0, [r7, #12]
 8015e1a:	f7ff fd68 	bl	80158ee <ld_clust>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015e24:	e7c0      	b.n	8015da8 <follow_path+0x50>
			if (res != FR_OK) break;
 8015e26:	bf00      	nop
 8015e28:	e002      	b.n	8015e30 <follow_path+0xd8>
				break;
 8015e2a:	bf00      	nop
 8015e2c:	e000      	b.n	8015e30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015e2e:	bf00      	nop
			}
		}
	}

	return res;
 8015e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3718      	adds	r7, #24
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}

08015e3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015e3a:	b480      	push	{r7}
 8015e3c:	b087      	sub	sp, #28
 8015e3e:	af00      	add	r7, sp, #0
 8015e40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015e42:	f04f 33ff 	mov.w	r3, #4294967295
 8015e46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d031      	beq.n	8015eb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	617b      	str	r3, [r7, #20]
 8015e56:	e002      	b.n	8015e5e <get_ldnumber+0x24>
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	617b      	str	r3, [r7, #20]
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	2b20      	cmp	r3, #32
 8015e64:	d903      	bls.n	8015e6e <get_ldnumber+0x34>
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	2b3a      	cmp	r3, #58	; 0x3a
 8015e6c:	d1f4      	bne.n	8015e58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	2b3a      	cmp	r3, #58	; 0x3a
 8015e74:	d11c      	bne.n	8015eb0 <get_ldnumber+0x76>
			tp = *path;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	1c5a      	adds	r2, r3, #1
 8015e80:	60fa      	str	r2, [r7, #12]
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	3b30      	subs	r3, #48	; 0x30
 8015e86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2b09      	cmp	r3, #9
 8015e8c:	d80e      	bhi.n	8015eac <get_ldnumber+0x72>
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d10a      	bne.n	8015eac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d107      	bne.n	8015eac <get_ldnumber+0x72>
					vol = (int)i;
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	617b      	str	r3, [r7, #20]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	697a      	ldr	r2, [r7, #20]
 8015eaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	e002      	b.n	8015eb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015eb4:	693b      	ldr	r3, [r7, #16]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	371c      	adds	r7, #28
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr
	...

08015ec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	70da      	strb	r2, [r3, #3]
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8015eda:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015edc:	6839      	ldr	r1, [r7, #0]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f7fe fffe 	bl	8014ee0 <move_window>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d001      	beq.n	8015eee <check_fs+0x2a>
 8015eea:	2304      	movs	r3, #4
 8015eec:	e038      	b.n	8015f60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	3330      	adds	r3, #48	; 0x30
 8015ef2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fe fd42 	bl	8014980 <ld_word>
 8015efc:	4603      	mov	r3, r0
 8015efe:	461a      	mov	r2, r3
 8015f00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d001      	beq.n	8015f0c <check_fs+0x48>
 8015f08:	2303      	movs	r3, #3
 8015f0a:	e029      	b.n	8015f60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f12:	2be9      	cmp	r3, #233	; 0xe9
 8015f14:	d009      	beq.n	8015f2a <check_fs+0x66>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f1c:	2beb      	cmp	r3, #235	; 0xeb
 8015f1e:	d11e      	bne.n	8015f5e <check_fs+0x9a>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8015f26:	2b90      	cmp	r3, #144	; 0x90
 8015f28:	d119      	bne.n	8015f5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	3330      	adds	r3, #48	; 0x30
 8015f2e:	3336      	adds	r3, #54	; 0x36
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7fe fd3d 	bl	80149b0 <ld_dword>
 8015f36:	4603      	mov	r3, r0
 8015f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015f3c:	4a0a      	ldr	r2, [pc, #40]	; (8015f68 <check_fs+0xa4>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d101      	bne.n	8015f46 <check_fs+0x82>
 8015f42:	2300      	movs	r3, #0
 8015f44:	e00c      	b.n	8015f60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3330      	adds	r3, #48	; 0x30
 8015f4a:	3352      	adds	r3, #82	; 0x52
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fe fd2f 	bl	80149b0 <ld_dword>
 8015f52:	4603      	mov	r3, r0
 8015f54:	4a05      	ldr	r2, [pc, #20]	; (8015f6c <check_fs+0xa8>)
 8015f56:	4293      	cmp	r3, r2
 8015f58:	d101      	bne.n	8015f5e <check_fs+0x9a>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	e000      	b.n	8015f60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015f5e:	2302      	movs	r3, #2
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	00544146 	.word	0x00544146
 8015f6c:	33544146 	.word	0x33544146

08015f70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b096      	sub	sp, #88	; 0x58
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	60f8      	str	r0, [r7, #12]
 8015f78:	60b9      	str	r1, [r7, #8]
 8015f7a:	4613      	mov	r3, r2
 8015f7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	2200      	movs	r2, #0
 8015f82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f7ff ff58 	bl	8015e3a <get_ldnumber>
 8015f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	da01      	bge.n	8015f96 <find_volume+0x26>
 8015f92:	230b      	movs	r3, #11
 8015f94:	e22d      	b.n	80163f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015f96:	4aa1      	ldr	r2, [pc, #644]	; (801621c <find_volume+0x2ac>)
 8015f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d101      	bne.n	8015faa <find_volume+0x3a>
 8015fa6:	230c      	movs	r3, #12
 8015fa8:	e223      	b.n	80163f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015fb0:	79fb      	ldrb	r3, [r7, #7]
 8015fb2:	f023 0301 	bic.w	r3, r3, #1
 8015fb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d01a      	beq.n	8015ff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc2:	785b      	ldrb	r3, [r3, #1]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7fe fc3d 	bl	8014844 <disk_status>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015fd4:	f003 0301 	and.w	r3, r3, #1
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d10c      	bne.n	8015ff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015fdc:	79fb      	ldrb	r3, [r7, #7]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d007      	beq.n	8015ff2 <find_volume+0x82>
 8015fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015fe6:	f003 0304 	and.w	r3, r3, #4
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d001      	beq.n	8015ff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015fee:	230a      	movs	r3, #10
 8015ff0:	e1ff      	b.n	80163f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	e1fd      	b.n	80163f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ffe:	b2da      	uxtb	r2, r3
 8016000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016006:	785b      	ldrb	r3, [r3, #1]
 8016008:	4618      	mov	r0, r3
 801600a:	f7fe fc35 	bl	8014878 <disk_initialize>
 801600e:	4603      	mov	r3, r0
 8016010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016018:	f003 0301 	and.w	r3, r3, #1
 801601c:	2b00      	cmp	r3, #0
 801601e:	d001      	beq.n	8016024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016020:	2303      	movs	r3, #3
 8016022:	e1e6      	b.n	80163f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016024:	79fb      	ldrb	r3, [r7, #7]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d007      	beq.n	801603a <find_volume+0xca>
 801602a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801602e:	f003 0304 	and.w	r3, r3, #4
 8016032:	2b00      	cmp	r3, #0
 8016034:	d001      	beq.n	801603a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016036:	230a      	movs	r3, #10
 8016038:	e1db      	b.n	80163f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801603a:	2300      	movs	r3, #0
 801603c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801603e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016042:	f7ff ff3f 	bl	8015ec4 <check_fs>
 8016046:	4603      	mov	r3, r0
 8016048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801604c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016050:	2b02      	cmp	r3, #2
 8016052:	d149      	bne.n	80160e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016054:	2300      	movs	r3, #0
 8016056:	643b      	str	r3, [r7, #64]	; 0x40
 8016058:	e01e      	b.n	8016098 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016062:	011b      	lsls	r3, r3, #4
 8016064:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016068:	4413      	add	r3, r2
 801606a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606e:	3304      	adds	r3, #4
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d006      	beq.n	8016084 <find_volume+0x114>
 8016076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016078:	3308      	adds	r3, #8
 801607a:	4618      	mov	r0, r3
 801607c:	f7fe fc98 	bl	80149b0 <ld_dword>
 8016080:	4602      	mov	r2, r0
 8016082:	e000      	b.n	8016086 <find_volume+0x116>
 8016084:	2200      	movs	r2, #0
 8016086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	3358      	adds	r3, #88	; 0x58
 801608c:	443b      	add	r3, r7
 801608e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016094:	3301      	adds	r3, #1
 8016096:	643b      	str	r3, [r7, #64]	; 0x40
 8016098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801609a:	2b03      	cmp	r3, #3
 801609c:	d9dd      	bls.n	801605a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801609e:	2300      	movs	r3, #0
 80160a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80160a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <find_volume+0x13e>
 80160a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160aa:	3b01      	subs	r3, #1
 80160ac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80160ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	3358      	adds	r3, #88	; 0x58
 80160b4:	443b      	add	r3, r7
 80160b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80160ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80160bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d005      	beq.n	80160ce <find_volume+0x15e>
 80160c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80160c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80160c6:	f7ff fefd 	bl	8015ec4 <check_fs>
 80160ca:	4603      	mov	r3, r0
 80160cc:	e000      	b.n	80160d0 <find_volume+0x160>
 80160ce:	2303      	movs	r3, #3
 80160d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80160d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d905      	bls.n	80160e8 <find_volume+0x178>
 80160dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160de:	3301      	adds	r3, #1
 80160e0:	643b      	str	r3, [r7, #64]	; 0x40
 80160e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160e4:	2b03      	cmp	r3, #3
 80160e6:	d9e2      	bls.n	80160ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80160e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d101      	bne.n	80160f4 <find_volume+0x184>
 80160f0:	2301      	movs	r3, #1
 80160f2:	e17e      	b.n	80163f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80160f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d901      	bls.n	8016100 <find_volume+0x190>
 80160fc:	230d      	movs	r3, #13
 80160fe:	e178      	b.n	80163f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016102:	3330      	adds	r3, #48	; 0x30
 8016104:	330b      	adds	r3, #11
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe fc3a 	bl	8014980 <ld_word>
 801610c:	4603      	mov	r3, r0
 801610e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016112:	d001      	beq.n	8016118 <find_volume+0x1a8>
 8016114:	230d      	movs	r3, #13
 8016116:	e16c      	b.n	80163f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801611a:	3330      	adds	r3, #48	; 0x30
 801611c:	3316      	adds	r3, #22
 801611e:	4618      	mov	r0, r3
 8016120:	f7fe fc2e 	bl	8014980 <ld_word>
 8016124:	4603      	mov	r3, r0
 8016126:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801612a:	2b00      	cmp	r3, #0
 801612c:	d106      	bne.n	801613c <find_volume+0x1cc>
 801612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016130:	3330      	adds	r3, #48	; 0x30
 8016132:	3324      	adds	r3, #36	; 0x24
 8016134:	4618      	mov	r0, r3
 8016136:	f7fe fc3b 	bl	80149b0 <ld_dword>
 801613a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016140:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016144:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801614a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801614e:	789b      	ldrb	r3, [r3, #2]
 8016150:	2b01      	cmp	r3, #1
 8016152:	d005      	beq.n	8016160 <find_volume+0x1f0>
 8016154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016156:	789b      	ldrb	r3, [r3, #2]
 8016158:	2b02      	cmp	r3, #2
 801615a:	d001      	beq.n	8016160 <find_volume+0x1f0>
 801615c:	230d      	movs	r3, #13
 801615e:	e148      	b.n	80163f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016162:	789b      	ldrb	r3, [r3, #2]
 8016164:	461a      	mov	r2, r3
 8016166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016168:	fb02 f303 	mul.w	r3, r2, r3
 801616c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016174:	b29a      	uxth	r2, r3
 8016176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016178:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801617c:	895b      	ldrh	r3, [r3, #10]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d008      	beq.n	8016194 <find_volume+0x224>
 8016182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016184:	895b      	ldrh	r3, [r3, #10]
 8016186:	461a      	mov	r2, r3
 8016188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618a:	895b      	ldrh	r3, [r3, #10]
 801618c:	3b01      	subs	r3, #1
 801618e:	4013      	ands	r3, r2
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <find_volume+0x228>
 8016194:	230d      	movs	r3, #13
 8016196:	e12c      	b.n	80163f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619a:	3330      	adds	r3, #48	; 0x30
 801619c:	3311      	adds	r3, #17
 801619e:	4618      	mov	r0, r3
 80161a0:	f7fe fbee 	bl	8014980 <ld_word>
 80161a4:	4603      	mov	r3, r0
 80161a6:	461a      	mov	r2, r3
 80161a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80161ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ae:	891b      	ldrh	r3, [r3, #8]
 80161b0:	f003 030f 	and.w	r3, r3, #15
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d001      	beq.n	80161be <find_volume+0x24e>
 80161ba:	230d      	movs	r3, #13
 80161bc:	e119      	b.n	80163f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80161be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c0:	3330      	adds	r3, #48	; 0x30
 80161c2:	3313      	adds	r3, #19
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7fe fbdb 	bl	8014980 <ld_word>
 80161ca:	4603      	mov	r3, r0
 80161cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80161ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d106      	bne.n	80161e2 <find_volume+0x272>
 80161d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161d6:	3330      	adds	r3, #48	; 0x30
 80161d8:	3320      	adds	r3, #32
 80161da:	4618      	mov	r0, r3
 80161dc:	f7fe fbe8 	bl	80149b0 <ld_dword>
 80161e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80161e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e4:	3330      	adds	r3, #48	; 0x30
 80161e6:	330e      	adds	r3, #14
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7fe fbc9 	bl	8014980 <ld_word>
 80161ee:	4603      	mov	r3, r0
 80161f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80161f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d101      	bne.n	80161fc <find_volume+0x28c>
 80161f8:	230d      	movs	r3, #13
 80161fa:	e0fa      	b.n	80163f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80161fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80161fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016200:	4413      	add	r3, r2
 8016202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016204:	8912      	ldrh	r2, [r2, #8]
 8016206:	0912      	lsrs	r2, r2, #4
 8016208:	b292      	uxth	r2, r2
 801620a:	4413      	add	r3, r2
 801620c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801620e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016212:	429a      	cmp	r2, r3
 8016214:	d204      	bcs.n	8016220 <find_volume+0x2b0>
 8016216:	230d      	movs	r3, #13
 8016218:	e0eb      	b.n	80163f2 <find_volume+0x482>
 801621a:	bf00      	nop
 801621c:	20000f6c 	.word	0x20000f6c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016224:	1ad3      	subs	r3, r2, r3
 8016226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016228:	8952      	ldrh	r2, [r2, #10]
 801622a:	fbb3 f3f2 	udiv	r3, r3, r2
 801622e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016232:	2b00      	cmp	r3, #0
 8016234:	d101      	bne.n	801623a <find_volume+0x2ca>
 8016236:	230d      	movs	r3, #13
 8016238:	e0db      	b.n	80163f2 <find_volume+0x482>
		fmt = FS_FAT32;
 801623a:	2303      	movs	r3, #3
 801623c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016246:	4293      	cmp	r3, r2
 8016248:	d802      	bhi.n	8016250 <find_volume+0x2e0>
 801624a:	2302      	movs	r3, #2
 801624c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016256:	4293      	cmp	r3, r2
 8016258:	d802      	bhi.n	8016260 <find_volume+0x2f0>
 801625a:	2301      	movs	r3, #1
 801625c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	1c9a      	adds	r2, r3, #2
 8016264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016266:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801626a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801626c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801626e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016272:	441a      	add	r2, r3
 8016274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016276:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801627c:	441a      	add	r2, r3
 801627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016280:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016286:	2b03      	cmp	r3, #3
 8016288:	d11e      	bne.n	80162c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628c:	3330      	adds	r3, #48	; 0x30
 801628e:	332a      	adds	r3, #42	; 0x2a
 8016290:	4618      	mov	r0, r3
 8016292:	f7fe fb75 	bl	8014980 <ld_word>
 8016296:	4603      	mov	r3, r0
 8016298:	2b00      	cmp	r3, #0
 801629a:	d001      	beq.n	80162a0 <find_volume+0x330>
 801629c:	230d      	movs	r3, #13
 801629e:	e0a8      	b.n	80163f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80162a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a2:	891b      	ldrh	r3, [r3, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <find_volume+0x33c>
 80162a8:	230d      	movs	r3, #13
 80162aa:	e0a2      	b.n	80163f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80162ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ae:	3330      	adds	r3, #48	; 0x30
 80162b0:	332c      	adds	r3, #44	; 0x2c
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fe fb7c 	bl	80149b0 <ld_dword>
 80162b8:	4602      	mov	r2, r0
 80162ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162bc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80162be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c0:	695b      	ldr	r3, [r3, #20]
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	647b      	str	r3, [r7, #68]	; 0x44
 80162c6:	e01f      	b.n	8016308 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80162c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ca:	891b      	ldrh	r3, [r3, #8]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d101      	bne.n	80162d4 <find_volume+0x364>
 80162d0:	230d      	movs	r3, #13
 80162d2:	e08e      	b.n	80163f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80162d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162d6:	6a1a      	ldr	r2, [r3, #32]
 80162d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162da:	441a      	add	r2, r3
 80162dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162de:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80162e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80162e4:	2b02      	cmp	r3, #2
 80162e6:	d103      	bne.n	80162f0 <find_volume+0x380>
 80162e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ea:	695b      	ldr	r3, [r3, #20]
 80162ec:	005b      	lsls	r3, r3, #1
 80162ee:	e00a      	b.n	8016306 <find_volume+0x396>
 80162f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f2:	695a      	ldr	r2, [r3, #20]
 80162f4:	4613      	mov	r3, r2
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4413      	add	r3, r2
 80162fa:	085a      	lsrs	r2, r3, #1
 80162fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162fe:	695b      	ldr	r3, [r3, #20]
 8016300:	f003 0301 	and.w	r3, r3, #1
 8016304:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016306:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801630a:	699a      	ldr	r2, [r3, #24]
 801630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801630e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016312:	0a5b      	lsrs	r3, r3, #9
 8016314:	429a      	cmp	r2, r3
 8016316:	d201      	bcs.n	801631c <find_volume+0x3ac>
 8016318:	230d      	movs	r3, #13
 801631a:	e06a      	b.n	80163f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631e:	f04f 32ff 	mov.w	r2, #4294967295
 8016322:	611a      	str	r2, [r3, #16]
 8016324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016326:	691a      	ldr	r2, [r3, #16]
 8016328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632e:	2280      	movs	r2, #128	; 0x80
 8016330:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016336:	2b03      	cmp	r3, #3
 8016338:	d149      	bne.n	80163ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801633c:	3330      	adds	r3, #48	; 0x30
 801633e:	3330      	adds	r3, #48	; 0x30
 8016340:	4618      	mov	r0, r3
 8016342:	f7fe fb1d 	bl	8014980 <ld_word>
 8016346:	4603      	mov	r3, r0
 8016348:	2b01      	cmp	r3, #1
 801634a:	d140      	bne.n	80163ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801634e:	3301      	adds	r3, #1
 8016350:	4619      	mov	r1, r3
 8016352:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016354:	f7fe fdc4 	bl	8014ee0 <move_window>
 8016358:	4603      	mov	r3, r0
 801635a:	2b00      	cmp	r3, #0
 801635c:	d137      	bne.n	80163ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016360:	2200      	movs	r2, #0
 8016362:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016366:	3330      	adds	r3, #48	; 0x30
 8016368:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801636c:	4618      	mov	r0, r3
 801636e:	f7fe fb07 	bl	8014980 <ld_word>
 8016372:	4603      	mov	r3, r0
 8016374:	461a      	mov	r2, r3
 8016376:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801637a:	429a      	cmp	r2, r3
 801637c:	d127      	bne.n	80163ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016380:	3330      	adds	r3, #48	; 0x30
 8016382:	4618      	mov	r0, r3
 8016384:	f7fe fb14 	bl	80149b0 <ld_dword>
 8016388:	4603      	mov	r3, r0
 801638a:	4a1c      	ldr	r2, [pc, #112]	; (80163fc <find_volume+0x48c>)
 801638c:	4293      	cmp	r3, r2
 801638e:	d11e      	bne.n	80163ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016392:	3330      	adds	r3, #48	; 0x30
 8016394:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016398:	4618      	mov	r0, r3
 801639a:	f7fe fb09 	bl	80149b0 <ld_dword>
 801639e:	4603      	mov	r3, r0
 80163a0:	4a17      	ldr	r2, [pc, #92]	; (8016400 <find_volume+0x490>)
 80163a2:	4293      	cmp	r3, r2
 80163a4:	d113      	bne.n	80163ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80163a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a8:	3330      	adds	r3, #48	; 0x30
 80163aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7fe fafe 	bl	80149b0 <ld_dword>
 80163b4:	4602      	mov	r2, r0
 80163b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80163ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163bc:	3330      	adds	r3, #48	; 0x30
 80163be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fe faf4 	bl	80149b0 <ld_dword>
 80163c8:	4602      	mov	r2, r0
 80163ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80163ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80163d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80163d6:	4b0b      	ldr	r3, [pc, #44]	; (8016404 <find_volume+0x494>)
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	3301      	adds	r3, #1
 80163dc:	b29a      	uxth	r2, r3
 80163de:	4b09      	ldr	r3, [pc, #36]	; (8016404 <find_volume+0x494>)
 80163e0:	801a      	strh	r2, [r3, #0]
 80163e2:	4b08      	ldr	r3, [pc, #32]	; (8016404 <find_volume+0x494>)
 80163e4:	881a      	ldrh	r2, [r3, #0]
 80163e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80163ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ec:	f7fe fd10 	bl	8014e10 <clear_lock>
#endif
	return FR_OK;
 80163f0:	2300      	movs	r3, #0
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3758      	adds	r7, #88	; 0x58
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	41615252 	.word	0x41615252
 8016400:	61417272 	.word	0x61417272
 8016404:	20000f70 	.word	0x20000f70

08016408 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016412:	2309      	movs	r3, #9
 8016414:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d01c      	beq.n	8016456 <validate+0x4e>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d018      	beq.n	8016456 <validate+0x4e>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d013      	beq.n	8016456 <validate+0x4e>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	889a      	ldrh	r2, [r3, #4]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	88db      	ldrh	r3, [r3, #6]
 8016438:	429a      	cmp	r2, r3
 801643a:	d10c      	bne.n	8016456 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	785b      	ldrb	r3, [r3, #1]
 8016442:	4618      	mov	r0, r3
 8016444:	f7fe f9fe 	bl	8014844 <disk_status>
 8016448:	4603      	mov	r3, r0
 801644a:	f003 0301 	and.w	r3, r3, #1
 801644e:	2b00      	cmp	r3, #0
 8016450:	d101      	bne.n	8016456 <validate+0x4e>
			res = FR_OK;
 8016452:	2300      	movs	r3, #0
 8016454:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016456:	7bfb      	ldrb	r3, [r7, #15]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d102      	bne.n	8016462 <validate+0x5a>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	e000      	b.n	8016464 <validate+0x5c>
 8016462:	2300      	movs	r3, #0
 8016464:	683a      	ldr	r2, [r7, #0]
 8016466:	6013      	str	r3, [r2, #0]
	return res;
 8016468:	7bfb      	ldrb	r3, [r7, #15]
}
 801646a:	4618      	mov	r0, r3
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
	...

08016474 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b088      	sub	sp, #32
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	4613      	mov	r3, r2
 8016480:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016486:	f107 0310 	add.w	r3, r7, #16
 801648a:	4618      	mov	r0, r3
 801648c:	f7ff fcd5 	bl	8015e3a <get_ldnumber>
 8016490:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	2b00      	cmp	r3, #0
 8016496:	da01      	bge.n	801649c <f_mount+0x28>
 8016498:	230b      	movs	r3, #11
 801649a:	e02b      	b.n	80164f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801649c:	4a17      	ldr	r2, [pc, #92]	; (80164fc <f_mount+0x88>)
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80164a6:	69bb      	ldr	r3, [r7, #24]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d005      	beq.n	80164b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80164ac:	69b8      	ldr	r0, [r7, #24]
 80164ae:	f7fe fcaf 	bl	8014e10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	2200      	movs	r2, #0
 80164b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d002      	beq.n	80164c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2200      	movs	r2, #0
 80164c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80164c4:	68fa      	ldr	r2, [r7, #12]
 80164c6:	490d      	ldr	r1, [pc, #52]	; (80164fc <f_mount+0x88>)
 80164c8:	69fb      	ldr	r3, [r7, #28]
 80164ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d002      	beq.n	80164da <f_mount+0x66>
 80164d4:	79fb      	ldrb	r3, [r7, #7]
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d001      	beq.n	80164de <f_mount+0x6a>
 80164da:	2300      	movs	r3, #0
 80164dc:	e00a      	b.n	80164f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80164de:	f107 010c 	add.w	r1, r7, #12
 80164e2:	f107 0308 	add.w	r3, r7, #8
 80164e6:	2200      	movs	r2, #0
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7ff fd41 	bl	8015f70 <find_volume>
 80164ee:	4603      	mov	r3, r0
 80164f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80164f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3720      	adds	r7, #32
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	20000f6c 	.word	0x20000f6c

08016500 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b098      	sub	sp, #96	; 0x60
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	4613      	mov	r3, r2
 801650c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d101      	bne.n	8016518 <f_open+0x18>
 8016514:	2309      	movs	r3, #9
 8016516:	e1ad      	b.n	8016874 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016518:	79fb      	ldrb	r3, [r7, #7]
 801651a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801651e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016520:	79fa      	ldrb	r2, [r7, #7]
 8016522:	f107 0110 	add.w	r1, r7, #16
 8016526:	f107 0308 	add.w	r3, r7, #8
 801652a:	4618      	mov	r0, r3
 801652c:	f7ff fd20 	bl	8015f70 <find_volume>
 8016530:	4603      	mov	r3, r0
 8016532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801653a:	2b00      	cmp	r3, #0
 801653c:	f040 8191 	bne.w	8016862 <f_open+0x362>
		dj.obj.fs = fs;
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016544:	68ba      	ldr	r2, [r7, #8]
 8016546:	f107 0314 	add.w	r3, r7, #20
 801654a:	4611      	mov	r1, r2
 801654c:	4618      	mov	r0, r3
 801654e:	f7ff fc03 	bl	8015d58 <follow_path>
 8016552:	4603      	mov	r3, r0
 8016554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801655c:	2b00      	cmp	r3, #0
 801655e:	d11a      	bne.n	8016596 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016560:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016564:	b25b      	sxtb	r3, r3
 8016566:	2b00      	cmp	r3, #0
 8016568:	da03      	bge.n	8016572 <f_open+0x72>
				res = FR_INVALID_NAME;
 801656a:	2306      	movs	r3, #6
 801656c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016570:	e011      	b.n	8016596 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016572:	79fb      	ldrb	r3, [r7, #7]
 8016574:	f023 0301 	bic.w	r3, r3, #1
 8016578:	2b00      	cmp	r3, #0
 801657a:	bf14      	ite	ne
 801657c:	2301      	movne	r3, #1
 801657e:	2300      	moveq	r3, #0
 8016580:	b2db      	uxtb	r3, r3
 8016582:	461a      	mov	r2, r3
 8016584:	f107 0314 	add.w	r3, r7, #20
 8016588:	4611      	mov	r1, r2
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe faf8 	bl	8014b80 <chk_lock>
 8016590:	4603      	mov	r3, r0
 8016592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016596:	79fb      	ldrb	r3, [r7, #7]
 8016598:	f003 031c 	and.w	r3, r3, #28
 801659c:	2b00      	cmp	r3, #0
 801659e:	d07f      	beq.n	80166a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80165a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d017      	beq.n	80165d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80165a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165ac:	2b04      	cmp	r3, #4
 80165ae:	d10e      	bne.n	80165ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80165b0:	f7fe fb42 	bl	8014c38 <enq_lock>
 80165b4:	4603      	mov	r3, r0
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d006      	beq.n	80165c8 <f_open+0xc8>
 80165ba:	f107 0314 	add.w	r3, r7, #20
 80165be:	4618      	mov	r0, r3
 80165c0:	f7ff fa86 	bl	8015ad0 <dir_register>
 80165c4:	4603      	mov	r3, r0
 80165c6:	e000      	b.n	80165ca <f_open+0xca>
 80165c8:	2312      	movs	r3, #18
 80165ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80165ce:	79fb      	ldrb	r3, [r7, #7]
 80165d0:	f043 0308 	orr.w	r3, r3, #8
 80165d4:	71fb      	strb	r3, [r7, #7]
 80165d6:	e010      	b.n	80165fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80165d8:	7ebb      	ldrb	r3, [r7, #26]
 80165da:	f003 0311 	and.w	r3, r3, #17
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d003      	beq.n	80165ea <f_open+0xea>
					res = FR_DENIED;
 80165e2:	2307      	movs	r3, #7
 80165e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80165e8:	e007      	b.n	80165fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80165ea:	79fb      	ldrb	r3, [r7, #7]
 80165ec:	f003 0304 	and.w	r3, r3, #4
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d002      	beq.n	80165fa <f_open+0xfa>
 80165f4:	2308      	movs	r3, #8
 80165f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80165fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d168      	bne.n	80166d4 <f_open+0x1d4>
 8016602:	79fb      	ldrb	r3, [r7, #7]
 8016604:	f003 0308 	and.w	r3, r3, #8
 8016608:	2b00      	cmp	r3, #0
 801660a:	d063      	beq.n	80166d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801660c:	f7f9 ff20 	bl	8010450 <get_fattime>
 8016610:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016614:	330e      	adds	r3, #14
 8016616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016618:	4618      	mov	r0, r3
 801661a:	f7fe fa07 	bl	8014a2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016620:	3316      	adds	r3, #22
 8016622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016624:	4618      	mov	r0, r3
 8016626:	f7fe fa01 	bl	8014a2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801662c:	330b      	adds	r3, #11
 801662e:	2220      	movs	r2, #32
 8016630:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016636:	4611      	mov	r1, r2
 8016638:	4618      	mov	r0, r3
 801663a:	f7ff f958 	bl	80158ee <ld_clust>
 801663e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016644:	2200      	movs	r2, #0
 8016646:	4618      	mov	r0, r3
 8016648:	f7ff f970 	bl	801592c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801664e:	331c      	adds	r3, #28
 8016650:	2100      	movs	r1, #0
 8016652:	4618      	mov	r0, r3
 8016654:	f7fe f9ea 	bl	8014a2c <st_dword>
					fs->wflag = 1;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	2201      	movs	r2, #1
 801665c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016660:	2b00      	cmp	r3, #0
 8016662:	d037      	beq.n	80166d4 <f_open+0x1d4>
						dw = fs->winsect;
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016668:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801666a:	f107 0314 	add.w	r3, r7, #20
 801666e:	2200      	movs	r2, #0
 8016670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016672:	4618      	mov	r0, r3
 8016674:	f7fe fe83 	bl	801537e <remove_chain>
 8016678:	4603      	mov	r3, r0
 801667a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801667e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016682:	2b00      	cmp	r3, #0
 8016684:	d126      	bne.n	80166d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016686:	693b      	ldr	r3, [r7, #16]
 8016688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801668a:	4618      	mov	r0, r3
 801668c:	f7fe fc28 	bl	8014ee0 <move_window>
 8016690:	4603      	mov	r3, r0
 8016692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801669a:	3a01      	subs	r2, #1
 801669c:	60da      	str	r2, [r3, #12]
 801669e:	e019      	b.n	80166d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80166a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d115      	bne.n	80166d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80166a8:	7ebb      	ldrb	r3, [r7, #26]
 80166aa:	f003 0310 	and.w	r3, r3, #16
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d003      	beq.n	80166ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80166b2:	2304      	movs	r3, #4
 80166b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80166b8:	e00c      	b.n	80166d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80166ba:	79fb      	ldrb	r3, [r7, #7]
 80166bc:	f003 0302 	and.w	r3, r3, #2
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d007      	beq.n	80166d4 <f_open+0x1d4>
 80166c4:	7ebb      	ldrb	r3, [r7, #26]
 80166c6:	f003 0301 	and.w	r3, r3, #1
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d002      	beq.n	80166d4 <f_open+0x1d4>
						res = FR_DENIED;
 80166ce:	2307      	movs	r3, #7
 80166d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80166d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d128      	bne.n	801672e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80166dc:	79fb      	ldrb	r3, [r7, #7]
 80166de:	f003 0308 	and.w	r3, r3, #8
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d003      	beq.n	80166ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80166e6:	79fb      	ldrb	r3, [r7, #7]
 80166e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80166f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80166fc:	79fb      	ldrb	r3, [r7, #7]
 80166fe:	f023 0301 	bic.w	r3, r3, #1
 8016702:	2b00      	cmp	r3, #0
 8016704:	bf14      	ite	ne
 8016706:	2301      	movne	r3, #1
 8016708:	2300      	moveq	r3, #0
 801670a:	b2db      	uxtb	r3, r3
 801670c:	461a      	mov	r2, r3
 801670e:	f107 0314 	add.w	r3, r7, #20
 8016712:	4611      	mov	r1, r2
 8016714:	4618      	mov	r0, r3
 8016716:	f7fe fab1 	bl	8014c7c <inc_lock>
 801671a:	4602      	mov	r2, r0
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	691b      	ldr	r3, [r3, #16]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d102      	bne.n	801672e <f_open+0x22e>
 8016728:	2302      	movs	r3, #2
 801672a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801672e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016732:	2b00      	cmp	r3, #0
 8016734:	f040 8095 	bne.w	8016862 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801673c:	4611      	mov	r1, r2
 801673e:	4618      	mov	r0, r3
 8016740:	f7ff f8d5 	bl	80158ee <ld_clust>
 8016744:	4602      	mov	r2, r0
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801674c:	331c      	adds	r3, #28
 801674e:	4618      	mov	r0, r3
 8016750:	f7fe f92e 	bl	80149b0 <ld_dword>
 8016754:	4602      	mov	r2, r0
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	2200      	movs	r2, #0
 801675e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016760:	693a      	ldr	r2, [r7, #16]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	88da      	ldrh	r2, [r3, #6]
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	79fa      	ldrb	r2, [r7, #7]
 8016772:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2200      	movs	r2, #0
 8016778:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2200      	movs	r2, #0
 801677e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2200      	movs	r2, #0
 8016784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	3330      	adds	r3, #48	; 0x30
 801678a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801678e:	2100      	movs	r1, #0
 8016790:	4618      	mov	r0, r3
 8016792:	f7fe f998 	bl	8014ac6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016796:	79fb      	ldrb	r3, [r7, #7]
 8016798:	f003 0320 	and.w	r3, r3, #32
 801679c:	2b00      	cmp	r3, #0
 801679e:	d060      	beq.n	8016862 <f_open+0x362>
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d05c      	beq.n	8016862 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	68da      	ldr	r2, [r3, #12]
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	895b      	ldrh	r3, [r3, #10]
 80167b4:	025b      	lsls	r3, r3, #9
 80167b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	689b      	ldr	r3, [r3, #8]
 80167bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	657b      	str	r3, [r7, #84]	; 0x54
 80167c4:	e016      	b.n	80167f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7fe fc43 	bl	8015056 <get_fat>
 80167d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80167d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80167d4:	2b01      	cmp	r3, #1
 80167d6:	d802      	bhi.n	80167de <f_open+0x2de>
 80167d8:	2302      	movs	r3, #2
 80167da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80167de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80167e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167e4:	d102      	bne.n	80167ec <f_open+0x2ec>
 80167e6:	2301      	movs	r3, #1
 80167e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80167ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80167ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167f0:	1ad3      	subs	r3, r2, r3
 80167f2:	657b      	str	r3, [r7, #84]	; 0x54
 80167f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d103      	bne.n	8016804 <f_open+0x304>
 80167fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80167fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016800:	429a      	cmp	r2, r3
 8016802:	d8e0      	bhi.n	80167c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801680a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801680e:	2b00      	cmp	r3, #0
 8016810:	d127      	bne.n	8016862 <f_open+0x362>
 8016812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016818:	2b00      	cmp	r3, #0
 801681a:	d022      	beq.n	8016862 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016820:	4618      	mov	r0, r3
 8016822:	f7fe fbf9 	bl	8015018 <clust2sect>
 8016826:	6478      	str	r0, [r7, #68]	; 0x44
 8016828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801682a:	2b00      	cmp	r3, #0
 801682c:	d103      	bne.n	8016836 <f_open+0x336>
						res = FR_INT_ERR;
 801682e:	2302      	movs	r3, #2
 8016830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016834:	e015      	b.n	8016862 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016838:	0a5a      	lsrs	r2, r3, #9
 801683a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801683c:	441a      	add	r2, r3
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	7858      	ldrb	r0, [r3, #1]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	6a1a      	ldr	r2, [r3, #32]
 8016850:	2301      	movs	r3, #1
 8016852:	f7fe f837 	bl	80148c4 <disk_read>
 8016856:	4603      	mov	r3, r0
 8016858:	2b00      	cmp	r3, #0
 801685a:	d002      	beq.n	8016862 <f_open+0x362>
 801685c:	2301      	movs	r3, #1
 801685e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016866:	2b00      	cmp	r3, #0
 8016868:	d002      	beq.n	8016870 <f_open+0x370>
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	2200      	movs	r2, #0
 801686e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016874:	4618      	mov	r0, r3
 8016876:	3760      	adds	r7, #96	; 0x60
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b08e      	sub	sp, #56	; 0x38
 8016880:	af00      	add	r7, sp, #0
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	60b9      	str	r1, [r7, #8]
 8016886:	607a      	str	r2, [r7, #4]
 8016888:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	2200      	movs	r2, #0
 8016892:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	f107 0214 	add.w	r2, r7, #20
 801689a:	4611      	mov	r1, r2
 801689c:	4618      	mov	r0, r3
 801689e:	f7ff fdb3 	bl	8016408 <validate>
 80168a2:	4603      	mov	r3, r0
 80168a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80168a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d107      	bne.n	80168c0 <f_read+0x44>
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	7d5b      	ldrb	r3, [r3, #21]
 80168b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80168b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d002      	beq.n	80168c6 <f_read+0x4a>
 80168c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168c4:	e115      	b.n	8016af2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	7d1b      	ldrb	r3, [r3, #20]
 80168ca:	f003 0301 	and.w	r3, r3, #1
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d101      	bne.n	80168d6 <f_read+0x5a>
 80168d2:	2307      	movs	r3, #7
 80168d4:	e10d      	b.n	8016af2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	68da      	ldr	r2, [r3, #12]
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	699b      	ldr	r3, [r3, #24]
 80168de:	1ad3      	subs	r3, r2, r3
 80168e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	6a3b      	ldr	r3, [r7, #32]
 80168e6:	429a      	cmp	r2, r3
 80168e8:	f240 80fe 	bls.w	8016ae8 <f_read+0x26c>
 80168ec:	6a3b      	ldr	r3, [r7, #32]
 80168ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80168f0:	e0fa      	b.n	8016ae8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	699b      	ldr	r3, [r3, #24]
 80168f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f040 80c6 	bne.w	8016a8c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	699b      	ldr	r3, [r3, #24]
 8016904:	0a5b      	lsrs	r3, r3, #9
 8016906:	697a      	ldr	r2, [r7, #20]
 8016908:	8952      	ldrh	r2, [r2, #10]
 801690a:	3a01      	subs	r2, #1
 801690c:	4013      	ands	r3, r2
 801690e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016910:	69fb      	ldr	r3, [r7, #28]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d12f      	bne.n	8016976 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	699b      	ldr	r3, [r3, #24]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d103      	bne.n	8016926 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	689b      	ldr	r3, [r3, #8]
 8016922:	633b      	str	r3, [r7, #48]	; 0x30
 8016924:	e013      	b.n	801694e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801692a:	2b00      	cmp	r3, #0
 801692c:	d007      	beq.n	801693e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	699b      	ldr	r3, [r3, #24]
 8016932:	4619      	mov	r1, r3
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f7fe fe1f 	bl	8015578 <clmt_clust>
 801693a:	6338      	str	r0, [r7, #48]	; 0x30
 801693c:	e007      	b.n	801694e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801693e:	68fa      	ldr	r2, [r7, #12]
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	69db      	ldr	r3, [r3, #28]
 8016944:	4619      	mov	r1, r3
 8016946:	4610      	mov	r0, r2
 8016948:	f7fe fb85 	bl	8015056 <get_fat>
 801694c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016950:	2b01      	cmp	r3, #1
 8016952:	d804      	bhi.n	801695e <f_read+0xe2>
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	2202      	movs	r2, #2
 8016958:	755a      	strb	r2, [r3, #21]
 801695a:	2302      	movs	r3, #2
 801695c:	e0c9      	b.n	8016af2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016964:	d104      	bne.n	8016970 <f_read+0xf4>
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2201      	movs	r2, #1
 801696a:	755a      	strb	r2, [r3, #21]
 801696c:	2301      	movs	r3, #1
 801696e:	e0c0      	b.n	8016af2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016974:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016976:	697a      	ldr	r2, [r7, #20]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	69db      	ldr	r3, [r3, #28]
 801697c:	4619      	mov	r1, r3
 801697e:	4610      	mov	r0, r2
 8016980:	f7fe fb4a 	bl	8015018 <clust2sect>
 8016984:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016986:	69bb      	ldr	r3, [r7, #24]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d104      	bne.n	8016996 <f_read+0x11a>
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2202      	movs	r2, #2
 8016990:	755a      	strb	r2, [r3, #21]
 8016992:	2302      	movs	r3, #2
 8016994:	e0ad      	b.n	8016af2 <f_read+0x276>
			sect += csect;
 8016996:	69ba      	ldr	r2, [r7, #24]
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	4413      	add	r3, r2
 801699c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	0a5b      	lsrs	r3, r3, #9
 80169a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80169a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d039      	beq.n	8016a1e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80169aa:	69fa      	ldr	r2, [r7, #28]
 80169ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ae:	4413      	add	r3, r2
 80169b0:	697a      	ldr	r2, [r7, #20]
 80169b2:	8952      	ldrh	r2, [r2, #10]
 80169b4:	4293      	cmp	r3, r2
 80169b6:	d905      	bls.n	80169c4 <f_read+0x148>
					cc = fs->csize - csect;
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	895b      	ldrh	r3, [r3, #10]
 80169bc:	461a      	mov	r2, r3
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	1ad3      	subs	r3, r2, r3
 80169c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	7858      	ldrb	r0, [r3, #1]
 80169c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ca:	69ba      	ldr	r2, [r7, #24]
 80169cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169ce:	f7fd ff79 	bl	80148c4 <disk_read>
 80169d2:	4603      	mov	r3, r0
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d004      	beq.n	80169e2 <f_read+0x166>
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	2201      	movs	r2, #1
 80169dc:	755a      	strb	r2, [r3, #21]
 80169de:	2301      	movs	r3, #1
 80169e0:	e087      	b.n	8016af2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	7d1b      	ldrb	r3, [r3, #20]
 80169e6:	b25b      	sxtb	r3, r3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	da14      	bge.n	8016a16 <f_read+0x19a>
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	6a1a      	ldr	r2, [r3, #32]
 80169f0:	69bb      	ldr	r3, [r7, #24]
 80169f2:	1ad3      	subs	r3, r2, r3
 80169f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d90d      	bls.n	8016a16 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	6a1a      	ldr	r2, [r3, #32]
 80169fe:	69bb      	ldr	r3, [r7, #24]
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	025b      	lsls	r3, r3, #9
 8016a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a06:	18d0      	adds	r0, r2, r3
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	3330      	adds	r3, #48	; 0x30
 8016a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a10:	4619      	mov	r1, r3
 8016a12:	f7fe f837 	bl	8014a84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a18:	025b      	lsls	r3, r3, #9
 8016a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8016a1c:	e050      	b.n	8016ac0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	6a1b      	ldr	r3, [r3, #32]
 8016a22:	69ba      	ldr	r2, [r7, #24]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d02e      	beq.n	8016a86 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	7d1b      	ldrb	r3, [r3, #20]
 8016a2c:	b25b      	sxtb	r3, r3
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	da18      	bge.n	8016a64 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	7858      	ldrb	r0, [r3, #1]
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	6a1a      	ldr	r2, [r3, #32]
 8016a40:	2301      	movs	r3, #1
 8016a42:	f7fd ff5f 	bl	8014904 <disk_write>
 8016a46:	4603      	mov	r3, r0
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d004      	beq.n	8016a56 <f_read+0x1da>
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	2201      	movs	r2, #1
 8016a50:	755a      	strb	r2, [r3, #21]
 8016a52:	2301      	movs	r3, #1
 8016a54:	e04d      	b.n	8016af2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	7d1b      	ldrb	r3, [r3, #20]
 8016a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a5e:	b2da      	uxtb	r2, r3
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	7858      	ldrb	r0, [r3, #1]
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a6e:	2301      	movs	r3, #1
 8016a70:	69ba      	ldr	r2, [r7, #24]
 8016a72:	f7fd ff27 	bl	80148c4 <disk_read>
 8016a76:	4603      	mov	r3, r0
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d004      	beq.n	8016a86 <f_read+0x20a>
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	2201      	movs	r2, #1
 8016a80:	755a      	strb	r2, [r3, #21]
 8016a82:	2301      	movs	r3, #1
 8016a84:	e035      	b.n	8016af2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	69ba      	ldr	r2, [r7, #24]
 8016a8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	699b      	ldr	r3, [r3, #24]
 8016a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016a98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8016a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d901      	bls.n	8016aa6 <f_read+0x22a>
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	699b      	ldr	r3, [r3, #24]
 8016ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ab4:	4413      	add	r3, r2
 8016ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ab8:	4619      	mov	r1, r3
 8016aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016abc:	f7fd ffe2 	bl	8014a84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac4:	4413      	add	r3, r2
 8016ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	699a      	ldr	r2, [r3, #24]
 8016acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ace:	441a      	add	r2, r3
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	619a      	str	r2, [r3, #24]
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	681a      	ldr	r2, [r3, #0]
 8016ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ada:	441a      	add	r2, r3
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	601a      	str	r2, [r3, #0]
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	f47f af01 	bne.w	80168f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016af0:	2300      	movs	r3, #0
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3738      	adds	r7, #56	; 0x38
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b08c      	sub	sp, #48	; 0x30
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	60f8      	str	r0, [r7, #12]
 8016b02:	60b9      	str	r1, [r7, #8]
 8016b04:	607a      	str	r2, [r7, #4]
 8016b06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	f107 0210 	add.w	r2, r7, #16
 8016b18:	4611      	mov	r1, r2
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fc74 	bl	8016408 <validate>
 8016b20:	4603      	mov	r3, r0
 8016b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d107      	bne.n	8016b3e <f_write+0x44>
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	7d5b      	ldrb	r3, [r3, #21]
 8016b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d002      	beq.n	8016b44 <f_write+0x4a>
 8016b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b42:	e14b      	b.n	8016ddc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	7d1b      	ldrb	r3, [r3, #20]
 8016b48:	f003 0302 	and.w	r3, r3, #2
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d101      	bne.n	8016b54 <f_write+0x5a>
 8016b50:	2307      	movs	r3, #7
 8016b52:	e143      	b.n	8016ddc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	699a      	ldr	r2, [r3, #24]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	441a      	add	r2, r3
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	699b      	ldr	r3, [r3, #24]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	f080 812d 	bcs.w	8016dc0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	699b      	ldr	r3, [r3, #24]
 8016b6a:	43db      	mvns	r3, r3
 8016b6c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016b6e:	e127      	b.n	8016dc0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	699b      	ldr	r3, [r3, #24]
 8016b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	f040 80e3 	bne.w	8016d44 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	699b      	ldr	r3, [r3, #24]
 8016b82:	0a5b      	lsrs	r3, r3, #9
 8016b84:	693a      	ldr	r2, [r7, #16]
 8016b86:	8952      	ldrh	r2, [r2, #10]
 8016b88:	3a01      	subs	r2, #1
 8016b8a:	4013      	ands	r3, r2
 8016b8c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d143      	bne.n	8016c1c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	699b      	ldr	r3, [r3, #24]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d10c      	bne.n	8016bb6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	689b      	ldr	r3, [r3, #8]
 8016ba0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d11a      	bne.n	8016bde <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	2100      	movs	r1, #0
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7fe fc4b 	bl	8015448 <create_chain>
 8016bb2:	62b8      	str	r0, [r7, #40]	; 0x28
 8016bb4:	e013      	b.n	8016bde <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d007      	beq.n	8016bce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	699b      	ldr	r3, [r3, #24]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	f7fe fcd7 	bl	8015578 <clmt_clust>
 8016bca:	62b8      	str	r0, [r7, #40]	; 0x28
 8016bcc:	e007      	b.n	8016bde <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016bce:	68fa      	ldr	r2, [r7, #12]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	69db      	ldr	r3, [r3, #28]
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	4610      	mov	r0, r2
 8016bd8:	f7fe fc36 	bl	8015448 <create_chain>
 8016bdc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	f000 80f2 	beq.w	8016dca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d104      	bne.n	8016bf6 <f_write+0xfc>
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	2202      	movs	r2, #2
 8016bf0:	755a      	strb	r2, [r3, #21]
 8016bf2:	2302      	movs	r3, #2
 8016bf4:	e0f2      	b.n	8016ddc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bfc:	d104      	bne.n	8016c08 <f_write+0x10e>
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	2201      	movs	r2, #1
 8016c02:	755a      	strb	r2, [r3, #21]
 8016c04:	2301      	movs	r3, #1
 8016c06:	e0e9      	b.n	8016ddc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	689b      	ldr	r3, [r3, #8]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d102      	bne.n	8016c1c <f_write+0x122>
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	7d1b      	ldrb	r3, [r3, #20]
 8016c20:	b25b      	sxtb	r3, r3
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	da18      	bge.n	8016c58 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	7858      	ldrb	r0, [r3, #1]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	6a1a      	ldr	r2, [r3, #32]
 8016c34:	2301      	movs	r3, #1
 8016c36:	f7fd fe65 	bl	8014904 <disk_write>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d004      	beq.n	8016c4a <f_write+0x150>
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	2201      	movs	r2, #1
 8016c44:	755a      	strb	r2, [r3, #21]
 8016c46:	2301      	movs	r3, #1
 8016c48:	e0c8      	b.n	8016ddc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	7d1b      	ldrb	r3, [r3, #20]
 8016c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c52:	b2da      	uxtb	r2, r3
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016c58:	693a      	ldr	r2, [r7, #16]
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	69db      	ldr	r3, [r3, #28]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	4610      	mov	r0, r2
 8016c62:	f7fe f9d9 	bl	8015018 <clust2sect>
 8016c66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d104      	bne.n	8016c78 <f_write+0x17e>
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2202      	movs	r2, #2
 8016c72:	755a      	strb	r2, [r3, #21]
 8016c74:	2302      	movs	r3, #2
 8016c76:	e0b1      	b.n	8016ddc <f_write+0x2e2>
			sect += csect;
 8016c78:	697a      	ldr	r2, [r7, #20]
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	4413      	add	r3, r2
 8016c7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	0a5b      	lsrs	r3, r3, #9
 8016c84:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d03c      	beq.n	8016d06 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016c8c:	69ba      	ldr	r2, [r7, #24]
 8016c8e:	6a3b      	ldr	r3, [r7, #32]
 8016c90:	4413      	add	r3, r2
 8016c92:	693a      	ldr	r2, [r7, #16]
 8016c94:	8952      	ldrh	r2, [r2, #10]
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d905      	bls.n	8016ca6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	895b      	ldrh	r3, [r3, #10]
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	69bb      	ldr	r3, [r7, #24]
 8016ca2:	1ad3      	subs	r3, r2, r3
 8016ca4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	7858      	ldrb	r0, [r3, #1]
 8016caa:	6a3b      	ldr	r3, [r7, #32]
 8016cac:	697a      	ldr	r2, [r7, #20]
 8016cae:	69f9      	ldr	r1, [r7, #28]
 8016cb0:	f7fd fe28 	bl	8014904 <disk_write>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d004      	beq.n	8016cc4 <f_write+0x1ca>
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	2201      	movs	r2, #1
 8016cbe:	755a      	strb	r2, [r3, #21]
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	e08b      	b.n	8016ddc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	6a1a      	ldr	r2, [r3, #32]
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	1ad3      	subs	r3, r2, r3
 8016ccc:	6a3a      	ldr	r2, [r7, #32]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d915      	bls.n	8016cfe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	6a1a      	ldr	r2, [r3, #32]
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	1ad3      	subs	r3, r2, r3
 8016ce0:	025b      	lsls	r3, r3, #9
 8016ce2:	69fa      	ldr	r2, [r7, #28]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016cea:	4619      	mov	r1, r3
 8016cec:	f7fd feca 	bl	8014a84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	7d1b      	ldrb	r3, [r3, #20]
 8016cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cf8:	b2da      	uxtb	r2, r3
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016cfe:	6a3b      	ldr	r3, [r7, #32]
 8016d00:	025b      	lsls	r3, r3, #9
 8016d02:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016d04:	e03f      	b.n	8016d86 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	6a1b      	ldr	r3, [r3, #32]
 8016d0a:	697a      	ldr	r2, [r7, #20]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d016      	beq.n	8016d3e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	699a      	ldr	r2, [r3, #24]
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d210      	bcs.n	8016d3e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	7858      	ldrb	r0, [r3, #1]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016d26:	2301      	movs	r3, #1
 8016d28:	697a      	ldr	r2, [r7, #20]
 8016d2a:	f7fd fdcb 	bl	80148c4 <disk_read>
 8016d2e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d004      	beq.n	8016d3e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2201      	movs	r2, #1
 8016d38:	755a      	strb	r2, [r3, #21]
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	e04e      	b.n	8016ddc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	697a      	ldr	r2, [r7, #20]
 8016d42:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	699b      	ldr	r3, [r3, #24]
 8016d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016d50:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d901      	bls.n	8016d5e <f_write+0x264>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	699b      	ldr	r3, [r3, #24]
 8016d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d6c:	4413      	add	r3, r2
 8016d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d70:	69f9      	ldr	r1, [r7, #28]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7fd fe86 	bl	8014a84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	7d1b      	ldrb	r3, [r3, #20]
 8016d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016d86:	69fa      	ldr	r2, [r7, #28]
 8016d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8a:	4413      	add	r3, r2
 8016d8c:	61fb      	str	r3, [r7, #28]
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	699a      	ldr	r2, [r3, #24]
 8016d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d94:	441a      	add	r2, r3
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	619a      	str	r2, [r3, #24]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	68da      	ldr	r2, [r3, #12]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	699b      	ldr	r3, [r3, #24]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	bf38      	it	cc
 8016da6:	461a      	movcc	r2, r3
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	60da      	str	r2, [r3, #12]
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	681a      	ldr	r2, [r3, #0]
 8016db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db2:	441a      	add	r2, r3
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	601a      	str	r2, [r3, #0]
 8016db8:	687a      	ldr	r2, [r7, #4]
 8016dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f47f aed4 	bne.w	8016b70 <f_write+0x76>
 8016dc8:	e000      	b.n	8016dcc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016dca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	7d1b      	ldrb	r3, [r3, #20]
 8016dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dd4:	b2da      	uxtb	r2, r3
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8016dda:	2300      	movs	r3, #0
}
 8016ddc:	4618      	mov	r0, r3
 8016dde:	3730      	adds	r7, #48	; 0x30
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b086      	sub	sp, #24
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	f107 0208 	add.w	r2, r7, #8
 8016df2:	4611      	mov	r1, r2
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7ff fb07 	bl	8016408 <validate>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016dfe:	7dfb      	ldrb	r3, [r7, #23]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d168      	bne.n	8016ed6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	7d1b      	ldrb	r3, [r3, #20]
 8016e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d062      	beq.n	8016ed6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	7d1b      	ldrb	r3, [r3, #20]
 8016e14:	b25b      	sxtb	r3, r3
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	da15      	bge.n	8016e46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	7858      	ldrb	r0, [r3, #1]
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6a1a      	ldr	r2, [r3, #32]
 8016e28:	2301      	movs	r3, #1
 8016e2a:	f7fd fd6b 	bl	8014904 <disk_write>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d001      	beq.n	8016e38 <f_sync+0x54>
 8016e34:	2301      	movs	r3, #1
 8016e36:	e04f      	b.n	8016ed8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	7d1b      	ldrb	r3, [r3, #20]
 8016e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e40:	b2da      	uxtb	r2, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016e46:	f7f9 fb03 	bl	8010450 <get_fattime>
 8016e4a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016e4c:	68ba      	ldr	r2, [r7, #8]
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e52:	4619      	mov	r1, r3
 8016e54:	4610      	mov	r0, r2
 8016e56:	f7fe f843 	bl	8014ee0 <move_window>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016e5e:	7dfb      	ldrb	r3, [r7, #23]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d138      	bne.n	8016ed6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e68:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	330b      	adds	r3, #11
 8016e6e:	781a      	ldrb	r2, [r3, #0]
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	330b      	adds	r3, #11
 8016e74:	f042 0220 	orr.w	r2, r2, #32
 8016e78:	b2d2      	uxtb	r2, r2
 8016e7a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	6818      	ldr	r0, [r3, #0]
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	689b      	ldr	r3, [r3, #8]
 8016e84:	461a      	mov	r2, r3
 8016e86:	68f9      	ldr	r1, [r7, #12]
 8016e88:	f7fe fd50 	bl	801592c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	f103 021c 	add.w	r2, r3, #28
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	68db      	ldr	r3, [r3, #12]
 8016e96:	4619      	mov	r1, r3
 8016e98:	4610      	mov	r0, r2
 8016e9a:	f7fd fdc7 	bl	8014a2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	3316      	adds	r3, #22
 8016ea2:	6939      	ldr	r1, [r7, #16]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7fd fdc1 	bl	8014a2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	3312      	adds	r3, #18
 8016eae:	2100      	movs	r1, #0
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7fd fda0 	bl	80149f6 <st_word>
					fs->wflag = 1;
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	2201      	movs	r2, #1
 8016eba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7fe f83c 	bl	8014f3c <sync_fs>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	7d1b      	ldrb	r3, [r3, #20]
 8016ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016ed0:	b2da      	uxtb	r2, r3
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3718      	adds	r7, #24
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7ff ff7b 	bl	8016de4 <f_sync>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016ef2:	7bfb      	ldrb	r3, [r7, #15]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d118      	bne.n	8016f2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f107 0208 	add.w	r2, r7, #8
 8016efe:	4611      	mov	r1, r2
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff fa81 	bl	8016408 <validate>
 8016f06:	4603      	mov	r3, r0
 8016f08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016f0a:	7bfb      	ldrb	r3, [r7, #15]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d10c      	bne.n	8016f2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	691b      	ldr	r3, [r3, #16]
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fd ff3f 	bl	8014d98 <dec_lock>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016f1e:	7bfb      	ldrb	r3, [r7, #15]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d102      	bne.n	8016f2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b086      	sub	sp, #24
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d101      	bne.n	8016f48 <f_opendir+0x14>
 8016f44:	2309      	movs	r3, #9
 8016f46:	e064      	b.n	8017012 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016f4c:	f107 010c 	add.w	r1, r7, #12
 8016f50:	463b      	mov	r3, r7
 8016f52:	2200      	movs	r2, #0
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7ff f80b 	bl	8015f70 <find_volume>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016f5e:	7dfb      	ldrb	r3, [r7, #23]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d14f      	bne.n	8017004 <f_opendir+0xd0>
		obj->fs = fs;
 8016f64:	68fa      	ldr	r2, [r7, #12]
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7fe fef2 	bl	8015d58 <follow_path>
 8016f74:	4603      	mov	r3, r0
 8016f76:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016f78:	7dfb      	ldrb	r3, [r7, #23]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d13d      	bne.n	8016ffa <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016f84:	b25b      	sxtb	r3, r3
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	db12      	blt.n	8016fb0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	799b      	ldrb	r3, [r3, #6]
 8016f8e:	f003 0310 	and.w	r3, r3, #16
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00a      	beq.n	8016fac <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016f96:	68fa      	ldr	r2, [r7, #12]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	6a1b      	ldr	r3, [r3, #32]
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	4610      	mov	r0, r2
 8016fa0:	f7fe fca5 	bl	80158ee <ld_clust>
 8016fa4:	4602      	mov	r2, r0
 8016fa6:	693b      	ldr	r3, [r7, #16]
 8016fa8:	609a      	str	r2, [r3, #8]
 8016faa:	e001      	b.n	8016fb0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016fac:	2305      	movs	r3, #5
 8016fae:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016fb0:	7dfb      	ldrb	r3, [r7, #23]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d121      	bne.n	8016ffa <f_opendir+0xc6>
				obj->id = fs->id;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	88da      	ldrh	r2, [r3, #6]
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7fe fb0d 	bl	80155e0 <dir_sdi>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8016fca:	7dfb      	ldrb	r3, [r7, #23]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d114      	bne.n	8016ffa <f_opendir+0xc6>
					if (obj->sclust) {
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	689b      	ldr	r3, [r3, #8]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d00d      	beq.n	8016ff4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016fd8:	2100      	movs	r1, #0
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f7fd fe4e 	bl	8014c7c <inc_lock>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8016fe6:	693b      	ldr	r3, [r7, #16]
 8016fe8:	691b      	ldr	r3, [r3, #16]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d105      	bne.n	8016ffa <f_opendir+0xc6>
 8016fee:	2312      	movs	r3, #18
 8016ff0:	75fb      	strb	r3, [r7, #23]
 8016ff2:	e002      	b.n	8016ffa <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016ffa:	7dfb      	ldrb	r3, [r7, #23]
 8016ffc:	2b04      	cmp	r3, #4
 8016ffe:	d101      	bne.n	8017004 <f_opendir+0xd0>
 8017000:	2305      	movs	r3, #5
 8017002:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017004:	7dfb      	ldrb	r3, [r7, #23]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d002      	beq.n	8017010 <f_opendir+0xdc>
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	2200      	movs	r2, #0
 801700e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017010:	7dfb      	ldrb	r3, [r7, #23]
}
 8017012:	4618      	mov	r0, r3
 8017014:	3718      	adds	r7, #24
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}

0801701a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801701a:	b580      	push	{r7, lr}
 801701c:	b084      	sub	sp, #16
 801701e:	af00      	add	r7, sp, #0
 8017020:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f107 0208 	add.w	r2, r7, #8
 8017028:	4611      	mov	r1, r2
 801702a:	4618      	mov	r0, r3
 801702c:	f7ff f9ec 	bl	8016408 <validate>
 8017030:	4603      	mov	r3, r0
 8017032:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017034:	7bfb      	ldrb	r3, [r7, #15]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d110      	bne.n	801705c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	691b      	ldr	r3, [r3, #16]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d006      	beq.n	8017050 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	691b      	ldr	r3, [r3, #16]
 8017046:	4618      	mov	r0, r3
 8017048:	f7fd fea6 	bl	8014d98 <dec_lock>
 801704c:	4603      	mov	r3, r0
 801704e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8017050:	7bfb      	ldrb	r3, [r7, #15]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d102      	bne.n	801705c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801705c:	7bfb      	ldrb	r3, [r7, #15]
}
 801705e:	4618      	mov	r0, r3
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}

08017066 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017066:	b580      	push	{r7, lr}
 8017068:	b084      	sub	sp, #16
 801706a:	af00      	add	r7, sp, #0
 801706c:	6078      	str	r0, [r7, #4]
 801706e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f107 0208 	add.w	r2, r7, #8
 8017076:	4611      	mov	r1, r2
 8017078:	4618      	mov	r0, r3
 801707a:	f7ff f9c5 	bl	8016408 <validate>
 801707e:	4603      	mov	r3, r0
 8017080:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017082:	7bfb      	ldrb	r3, [r7, #15]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d126      	bne.n	80170d6 <f_readdir+0x70>
		if (!fno) {
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d106      	bne.n	801709c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801708e:	2100      	movs	r1, #0
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f7fe faa5 	bl	80155e0 <dir_sdi>
 8017096:	4603      	mov	r3, r0
 8017098:	73fb      	strb	r3, [r7, #15]
 801709a:	e01c      	b.n	80170d6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801709c:	2100      	movs	r1, #0
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f7fe fc64 	bl	801596c <dir_read>
 80170a4:	4603      	mov	r3, r0
 80170a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80170a8:	7bfb      	ldrb	r3, [r7, #15]
 80170aa:	2b04      	cmp	r3, #4
 80170ac:	d101      	bne.n	80170b2 <f_readdir+0x4c>
 80170ae:	2300      	movs	r3, #0
 80170b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80170b2:	7bfb      	ldrb	r3, [r7, #15]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d10e      	bne.n	80170d6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80170b8:	6839      	ldr	r1, [r7, #0]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f7fe fd58 	bl	8015b70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80170c0:	2100      	movs	r1, #0
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f7fe fb07 	bl	80156d6 <dir_next>
 80170c8:	4603      	mov	r3, r0
 80170ca:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80170cc:	7bfb      	ldrb	r3, [r7, #15]
 80170ce:	2b04      	cmp	r3, #4
 80170d0:	d101      	bne.n	80170d6 <f_readdir+0x70>
 80170d2:	2300      	movs	r3, #0
 80170d4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80170d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3710      	adds	r7, #16
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b090      	sub	sp, #64	; 0x40
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80170ea:	f107 010c 	add.w	r1, r7, #12
 80170ee:	1d3b      	adds	r3, r7, #4
 80170f0:	2200      	movs	r2, #0
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7fe ff3c 	bl	8015f70 <find_volume>
 80170f8:	4603      	mov	r3, r0
 80170fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80170fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017102:	2b00      	cmp	r3, #0
 8017104:	d11f      	bne.n	8017146 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	f107 030c 	add.w	r3, r7, #12
 801710c:	4611      	mov	r1, r2
 801710e:	4618      	mov	r0, r3
 8017110:	f7fe fe22 	bl	8015d58 <follow_path>
 8017114:	4603      	mov	r3, r0
 8017116:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801711a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801711e:	2b00      	cmp	r3, #0
 8017120:	d111      	bne.n	8017146 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8017122:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017126:	b25b      	sxtb	r3, r3
 8017128:	2b00      	cmp	r3, #0
 801712a:	da03      	bge.n	8017134 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801712c:	2306      	movs	r3, #6
 801712e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017132:	e008      	b.n	8017146 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d005      	beq.n	8017146 <f_stat+0x66>
 801713a:	f107 030c 	add.w	r3, r7, #12
 801713e:	6839      	ldr	r1, [r7, #0]
 8017140:	4618      	mov	r0, r3
 8017142:	f7fe fd15 	bl	8015b70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8017146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801714a:	4618      	mov	r0, r3
 801714c:	3740      	adds	r7, #64	; 0x40
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b09e      	sub	sp, #120	; 0x78
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801715a:	2300      	movs	r3, #0
 801715c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801715e:	f107 010c 	add.w	r1, r7, #12
 8017162:	1d3b      	adds	r3, r7, #4
 8017164:	2202      	movs	r2, #2
 8017166:	4618      	mov	r0, r3
 8017168:	f7fe ff02 	bl	8015f70 <find_volume>
 801716c:	4603      	mov	r3, r0
 801716e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8017176:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801717a:	2b00      	cmp	r3, #0
 801717c:	f040 808e 	bne.w	801729c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017186:	4611      	mov	r1, r2
 8017188:	4618      	mov	r0, r3
 801718a:	f7fe fde5 	bl	8015d58 <follow_path>
 801718e:	4603      	mov	r3, r0
 8017190:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8017194:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017198:	2b00      	cmp	r3, #0
 801719a:	d108      	bne.n	80171ae <f_unlink+0x5c>
 801719c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80171a0:	2102      	movs	r1, #2
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7fd fcec 	bl	8014b80 <chk_lock>
 80171a8:	4603      	mov	r3, r0
 80171aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80171ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d172      	bne.n	801729c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80171b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80171ba:	b25b      	sxtb	r3, r3
 80171bc:	2b00      	cmp	r3, #0
 80171be:	da03      	bge.n	80171c8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80171c0:	2306      	movs	r3, #6
 80171c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80171c6:	e008      	b.n	80171da <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80171c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80171cc:	f003 0301 	and.w	r3, r3, #1
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d002      	beq.n	80171da <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80171d4:	2307      	movs	r3, #7
 80171d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80171da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d134      	bne.n	801724c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80171e6:	4611      	mov	r1, r2
 80171e8:	4618      	mov	r0, r3
 80171ea:	f7fe fb80 	bl	80158ee <ld_clust>
 80171ee:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80171f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80171f4:	f003 0310 	and.w	r3, r3, #16
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d027      	beq.n	801724c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8017200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017202:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8017204:	f107 0310 	add.w	r3, r7, #16
 8017208:	2100      	movs	r1, #0
 801720a:	4618      	mov	r0, r3
 801720c:	f7fe f9e8 	bl	80155e0 <dir_sdi>
 8017210:	4603      	mov	r3, r0
 8017212:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8017216:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801721a:	2b00      	cmp	r3, #0
 801721c:	d116      	bne.n	801724c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801721e:	f107 0310 	add.w	r3, r7, #16
 8017222:	2100      	movs	r1, #0
 8017224:	4618      	mov	r0, r3
 8017226:	f7fe fba1 	bl	801596c <dir_read>
 801722a:	4603      	mov	r3, r0
 801722c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8017230:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017234:	2b00      	cmp	r3, #0
 8017236:	d102      	bne.n	801723e <f_unlink+0xec>
 8017238:	2307      	movs	r3, #7
 801723a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801723e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017242:	2b04      	cmp	r3, #4
 8017244:	d102      	bne.n	801724c <f_unlink+0xfa>
 8017246:	2300      	movs	r3, #0
 8017248:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801724c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017250:	2b00      	cmp	r3, #0
 8017252:	d123      	bne.n	801729c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8017254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017258:	4618      	mov	r0, r3
 801725a:	f7fe fc6b 	bl	8015b34 <dir_remove>
 801725e:	4603      	mov	r3, r0
 8017260:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8017264:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017268:	2b00      	cmp	r3, #0
 801726a:	d10c      	bne.n	8017286 <f_unlink+0x134>
 801726c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801726e:	2b00      	cmp	r3, #0
 8017270:	d009      	beq.n	8017286 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8017272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017276:	2200      	movs	r2, #0
 8017278:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801727a:	4618      	mov	r0, r3
 801727c:	f7fe f87f 	bl	801537e <remove_chain>
 8017280:	4603      	mov	r3, r0
 8017282:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8017286:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801728a:	2b00      	cmp	r3, #0
 801728c:	d106      	bne.n	801729c <f_unlink+0x14a>
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	4618      	mov	r0, r3
 8017292:	f7fd fe53 	bl	8014f3c <sync_fs>
 8017296:	4603      	mov	r3, r0
 8017298:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801729c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3778      	adds	r7, #120	; 0x78
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b088      	sub	sp, #32
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80172b4:	2300      	movs	r3, #0
 80172b6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80172bc:	e01b      	b.n	80172f6 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80172be:	f107 0310 	add.w	r3, r7, #16
 80172c2:	f107 0114 	add.w	r1, r7, #20
 80172c6:	2201      	movs	r2, #1
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f7ff fad7 	bl	801687c <f_read>
		if (rc != 1) break;
 80172ce:	693b      	ldr	r3, [r7, #16]
 80172d0:	2b01      	cmp	r3, #1
 80172d2:	d116      	bne.n	8017302 <f_gets+0x5a>
		c = s[0];
 80172d4:	7d3b      	ldrb	r3, [r7, #20]
 80172d6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
 80172da:	2b0d      	cmp	r3, #13
 80172dc:	d100      	bne.n	80172e0 <f_gets+0x38>
 80172de:	e00a      	b.n	80172f6 <f_gets+0x4e>
		*p++ = c;
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	1c5a      	adds	r2, r3, #1
 80172e4:	61ba      	str	r2, [r7, #24]
 80172e6:	7dfa      	ldrb	r2, [r7, #23]
 80172e8:	701a      	strb	r2, [r3, #0]
		n++;
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	3301      	adds	r3, #1
 80172ee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80172f0:	7dfb      	ldrb	r3, [r7, #23]
 80172f2:	2b0a      	cmp	r3, #10
 80172f4:	d007      	beq.n	8017306 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	3b01      	subs	r3, #1
 80172fa:	69fa      	ldr	r2, [r7, #28]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	dbde      	blt.n	80172be <f_gets+0x16>
 8017300:	e002      	b.n	8017308 <f_gets+0x60>
		if (rc != 1) break;
 8017302:	bf00      	nop
 8017304:	e000      	b.n	8017308 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8017306:	bf00      	nop
	}
	*p = 0;
 8017308:	69bb      	ldr	r3, [r7, #24]
 801730a:	2200      	movs	r2, #0
 801730c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801730e:	69fb      	ldr	r3, [r7, #28]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d001      	beq.n	8017318 <f_gets+0x70>
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	e000      	b.n	801731a <f_gets+0x72>
 8017318:	2300      	movs	r3, #0
}
 801731a:	4618      	mov	r0, r3
 801731c:	3720      	adds	r7, #32
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}
	...

08017324 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017324:	b480      	push	{r7}
 8017326:	b087      	sub	sp, #28
 8017328:	af00      	add	r7, sp, #0
 801732a:	60f8      	str	r0, [r7, #12]
 801732c:	60b9      	str	r1, [r7, #8]
 801732e:	4613      	mov	r3, r2
 8017330:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017332:	2301      	movs	r3, #1
 8017334:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801733a:	4b1f      	ldr	r3, [pc, #124]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 801733c:	7a5b      	ldrb	r3, [r3, #9]
 801733e:	b2db      	uxtb	r3, r3
 8017340:	2b00      	cmp	r3, #0
 8017342:	d131      	bne.n	80173a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017344:	4b1c      	ldr	r3, [pc, #112]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 8017346:	7a5b      	ldrb	r3, [r3, #9]
 8017348:	b2db      	uxtb	r3, r3
 801734a:	461a      	mov	r2, r3
 801734c:	4b1a      	ldr	r3, [pc, #104]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 801734e:	2100      	movs	r1, #0
 8017350:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017352:	4b19      	ldr	r3, [pc, #100]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 8017354:	7a5b      	ldrb	r3, [r3, #9]
 8017356:	b2db      	uxtb	r3, r3
 8017358:	4a17      	ldr	r2, [pc, #92]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	4413      	add	r3, r2
 801735e:	68fa      	ldr	r2, [r7, #12]
 8017360:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017362:	4b15      	ldr	r3, [pc, #84]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 8017364:	7a5b      	ldrb	r3, [r3, #9]
 8017366:	b2db      	uxtb	r3, r3
 8017368:	461a      	mov	r2, r3
 801736a:	4b13      	ldr	r3, [pc, #76]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 801736c:	4413      	add	r3, r2
 801736e:	79fa      	ldrb	r2, [r7, #7]
 8017370:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017372:	4b11      	ldr	r3, [pc, #68]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 8017374:	7a5b      	ldrb	r3, [r3, #9]
 8017376:	b2db      	uxtb	r3, r3
 8017378:	1c5a      	adds	r2, r3, #1
 801737a:	b2d1      	uxtb	r1, r2
 801737c:	4a0e      	ldr	r2, [pc, #56]	; (80173b8 <FATFS_LinkDriverEx+0x94>)
 801737e:	7251      	strb	r1, [r2, #9]
 8017380:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017382:	7dbb      	ldrb	r3, [r7, #22]
 8017384:	3330      	adds	r3, #48	; 0x30
 8017386:	b2da      	uxtb	r2, r3
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	3301      	adds	r3, #1
 8017390:	223a      	movs	r2, #58	; 0x3a
 8017392:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	3302      	adds	r3, #2
 8017398:	222f      	movs	r2, #47	; 0x2f
 801739a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	3303      	adds	r3, #3
 80173a0:	2200      	movs	r2, #0
 80173a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80173a4:	2300      	movs	r3, #0
 80173a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80173a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	371c      	adds	r7, #28
 80173ae:	46bd      	mov	sp, r7
 80173b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop
 80173b8:	20000f94 	.word	0x20000f94

080173bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80173c6:	2200      	movs	r2, #0
 80173c8:	6839      	ldr	r1, [r7, #0]
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f7ff ffaa 	bl	8017324 <FATFS_LinkDriverEx>
 80173d0:	4603      	mov	r3, r0
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
	...

080173dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80173e0:	2201      	movs	r2, #1
 80173e2:	4912      	ldr	r1, [pc, #72]	; (801742c <MX_USB_DEVICE_Init+0x50>)
 80173e4:	4812      	ldr	r0, [pc, #72]	; (8017430 <MX_USB_DEVICE_Init+0x54>)
 80173e6:	f7f9 ff29 	bl	801123c <USBD_Init>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d001      	beq.n	80173f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80173f0:	f7ed fc18 	bl	8004c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80173f4:	490f      	ldr	r1, [pc, #60]	; (8017434 <MX_USB_DEVICE_Init+0x58>)
 80173f6:	480e      	ldr	r0, [pc, #56]	; (8017430 <MX_USB_DEVICE_Init+0x54>)
 80173f8:	f7f9 ff50 	bl	801129c <USBD_RegisterClass>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d001      	beq.n	8017406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017402:	f7ed fc0f 	bl	8004c24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017406:	490c      	ldr	r1, [pc, #48]	; (8017438 <MX_USB_DEVICE_Init+0x5c>)
 8017408:	4809      	ldr	r0, [pc, #36]	; (8017430 <MX_USB_DEVICE_Init+0x54>)
 801740a:	f7f9 fe47 	bl	801109c <USBD_CDC_RegisterInterface>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	d001      	beq.n	8017418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017414:	f7ed fc06 	bl	8004c24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017418:	4805      	ldr	r0, [pc, #20]	; (8017430 <MX_USB_DEVICE_Init+0x54>)
 801741a:	f7f9 ff75 	bl	8011308 <USBD_Start>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d001      	beq.n	8017428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017424:	f7ed fbfe 	bl	8004c24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017428:	bf00      	nop
 801742a:	bd80      	pop	{r7, pc}
 801742c:	200000d0 	.word	0x200000d0
 8017430:	20000fa0 	.word	0x20000fa0
 8017434:	2000001c 	.word	0x2000001c
 8017438:	200000bc 	.word	0x200000bc

0801743c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017440:	2200      	movs	r2, #0
 8017442:	4905      	ldr	r1, [pc, #20]	; (8017458 <CDC_Init_HS+0x1c>)
 8017444:	4805      	ldr	r0, [pc, #20]	; (801745c <CDC_Init_HS+0x20>)
 8017446:	f7f9 fe43 	bl	80110d0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801744a:	4905      	ldr	r1, [pc, #20]	; (8017460 <CDC_Init_HS+0x24>)
 801744c:	4803      	ldr	r0, [pc, #12]	; (801745c <CDC_Init_HS+0x20>)
 801744e:	f7f9 fe61 	bl	8011114 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8017452:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017454:	4618      	mov	r0, r3
 8017456:	bd80      	pop	{r7, pc}
 8017458:	20001a7c 	.word	0x20001a7c
 801745c:	20000fa0 	.word	0x20000fa0
 8017460:	2000127c 	.word	0x2000127c

08017464 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017464:	b480      	push	{r7}
 8017466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 8017468:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801746a:	4618      	mov	r0, r3
 801746c:	46bd      	mov	sp, r7
 801746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017472:	4770      	bx	lr

08017474 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017474:	b480      	push	{r7}
 8017476:	b085      	sub	sp, #20
 8017478:	af00      	add	r7, sp, #0
 801747a:	4603      	mov	r3, r0
 801747c:	6039      	str	r1, [r7, #0]
 801747e:	71fb      	strb	r3, [r7, #7]
 8017480:	4613      	mov	r3, r2
 8017482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*)pbuf;
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	60fb      	str	r3, [r7, #12]
	switch(cmd)
 8017488:	79fb      	ldrb	r3, [r7, #7]
 801748a:	2b23      	cmp	r3, #35	; 0x23
 801748c:	d858      	bhi.n	8017540 <CDC_Control_HS+0xcc>
 801748e:	a201      	add	r2, pc, #4	; (adr r2, 8017494 <CDC_Control_HS+0x20>)
 8017490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017494:	08017541 	.word	0x08017541
 8017498:	08017541 	.word	0x08017541
 801749c:	08017541 	.word	0x08017541
 80174a0:	08017541 	.word	0x08017541
 80174a4:	08017541 	.word	0x08017541
 80174a8:	08017541 	.word	0x08017541
 80174ac:	08017541 	.word	0x08017541
 80174b0:	08017541 	.word	0x08017541
 80174b4:	08017541 	.word	0x08017541
 80174b8:	08017541 	.word	0x08017541
 80174bc:	08017541 	.word	0x08017541
 80174c0:	08017541 	.word	0x08017541
 80174c4:	08017541 	.word	0x08017541
 80174c8:	08017541 	.word	0x08017541
 80174cc:	08017541 	.word	0x08017541
 80174d0:	08017541 	.word	0x08017541
 80174d4:	08017541 	.word	0x08017541
 80174d8:	08017541 	.word	0x08017541
 80174dc:	08017541 	.word	0x08017541
 80174e0:	08017541 	.word	0x08017541
 80174e4:	08017541 	.word	0x08017541
 80174e8:	08017541 	.word	0x08017541
 80174ec:	08017541 	.word	0x08017541
 80174f0:	08017541 	.word	0x08017541
 80174f4:	08017541 	.word	0x08017541
 80174f8:	08017541 	.word	0x08017541
 80174fc:	08017541 	.word	0x08017541
 8017500:	08017541 	.word	0x08017541
 8017504:	08017541 	.word	0x08017541
 8017508:	08017541 	.word	0x08017541
 801750c:	08017541 	.word	0x08017541
 8017510:	08017541 	.word	0x08017541
 8017514:	08017541 	.word	0x08017541
 8017518:	08017541 	.word	0x08017541
 801751c:	08017525 	.word	0x08017525
 8017520:	08017541 	.word	0x08017541
	case CDC_GET_LINE_CODING:

		break;

	case CDC_SET_CONTROL_LINE_STATE:
		if((req->wValue & 0x0001) != 0)
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	885b      	ldrh	r3, [r3, #2]
 8017528:	f003 0301 	and.w	r3, r3, #1
 801752c:	2b00      	cmp	r3, #0
 801752e:	d003      	beq.n	8017538 <CDC_Control_HS+0xc4>
			usb_connected = 1;
 8017530:	4b07      	ldr	r3, [pc, #28]	; (8017550 <CDC_Control_HS+0xdc>)
 8017532:	2201      	movs	r2, #1
 8017534:	701a      	strb	r2, [r3, #0]
		else
			usb_connected = 0;
		break;
 8017536:	e004      	b.n	8017542 <CDC_Control_HS+0xce>
			usb_connected = 0;
 8017538:	4b05      	ldr	r3, [pc, #20]	; (8017550 <CDC_Control_HS+0xdc>)
 801753a:	2200      	movs	r2, #0
 801753c:	701a      	strb	r2, [r3, #0]
		break;
 801753e:	e000      	b.n	8017542 <CDC_Control_HS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8017540:	bf00      	nop
	}

	return (USBD_OK);
 8017542:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8017544:	4618      	mov	r0, r3
 8017546:	3714      	adds	r7, #20
 8017548:	46bd      	mov	sp, r7
 801754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754e:	4770      	bx	lr
 8017550:	20000ee7 	.word	0x20000ee7

08017554 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	memset(usb_rx_buffer, 0x00, 1024);
 801755e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017562:	2100      	movs	r1, #0
 8017564:	480e      	ldr	r0, [pc, #56]	; (80175a0 <CDC_Receive_HS+0x4c>)
 8017566:	f001 f85f 	bl	8018628 <memset>
	memcpy(usb_rx_buffer, Buf, *Len);
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	461a      	mov	r2, r3
 8017570:	6879      	ldr	r1, [r7, #4]
 8017572:	480b      	ldr	r0, [pc, #44]	; (80175a0 <CDC_Receive_HS+0x4c>)
 8017574:	f001 f84a 	bl	801860c <memcpy>
	usb_rx_length = *Len;
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	b29a      	uxth	r2, r3
 801757e:	4b09      	ldr	r3, [pc, #36]	; (80175a4 <CDC_Receive_HS+0x50>)
 8017580:	801a      	strh	r2, [r3, #0]
	usb_rx_ready = 1;
 8017582:	4b09      	ldr	r3, [pc, #36]	; (80175a8 <CDC_Receive_HS+0x54>)
 8017584:	2201      	movs	r2, #1
 8017586:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8017588:	6879      	ldr	r1, [r7, #4]
 801758a:	4808      	ldr	r0, [pc, #32]	; (80175ac <CDC_Receive_HS+0x58>)
 801758c:	f7f9 fdc2 	bl	8011114 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8017590:	4806      	ldr	r0, [pc, #24]	; (80175ac <CDC_Receive_HS+0x58>)
 8017592:	f7f9 fe1d 	bl	80111d0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8017596:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017598:	4618      	mov	r0, r3
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	20000ae4 	.word	0x20000ae4
 80175a4:	20000ee4 	.word	0x20000ee4
 80175a8:	20000ee6 	.word	0x20000ee6
 80175ac:	20000fa0 	.word	0x20000fa0

080175b0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b084      	sub	sp, #16
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
 80175b8:	460b      	mov	r3, r1
 80175ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80175bc:	2300      	movs	r3, #0
 80175be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80175c0:	4b0d      	ldr	r3, [pc, #52]	; (80175f8 <CDC_Transmit_HS+0x48>)
 80175c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175c6:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d001      	beq.n	80175d6 <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 80175d2:	2301      	movs	r3, #1
 80175d4:	e00b      	b.n	80175ee <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80175d6:	887b      	ldrh	r3, [r7, #2]
 80175d8:	461a      	mov	r2, r3
 80175da:	6879      	ldr	r1, [r7, #4]
 80175dc:	4806      	ldr	r0, [pc, #24]	; (80175f8 <CDC_Transmit_HS+0x48>)
 80175de:	f7f9 fd77 	bl	80110d0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80175e2:	4805      	ldr	r0, [pc, #20]	; (80175f8 <CDC_Transmit_HS+0x48>)
 80175e4:	f7f9 fdb4 	bl	8011150 <USBD_CDC_TransmitPacket>
 80175e8:	4603      	mov	r3, r0
 80175ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3710      	adds	r7, #16
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop
 80175f8:	20000fa0 	.word	0x20000fa0

080175fc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b087      	sub	sp, #28
 8017600:	af00      	add	r7, sp, #0
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	4613      	mov	r3, r2
 8017608:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801760a:	2300      	movs	r3, #0
 801760c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801760e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017612:	4618      	mov	r0, r3
 8017614:	371c      	adds	r7, #28
 8017616:	46bd      	mov	sp, r7
 8017618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761c:	4770      	bx	lr
	...

08017620 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017620:	b480      	push	{r7}
 8017622:	b083      	sub	sp, #12
 8017624:	af00      	add	r7, sp, #0
 8017626:	4603      	mov	r3, r0
 8017628:	6039      	str	r1, [r7, #0]
 801762a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	2212      	movs	r2, #18
 8017630:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017632:	4b03      	ldr	r3, [pc, #12]	; (8017640 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017634:	4618      	mov	r0, r3
 8017636:	370c      	adds	r7, #12
 8017638:	46bd      	mov	sp, r7
 801763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763e:	4770      	bx	lr
 8017640:	200000f0 	.word	0x200000f0

08017644 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	4603      	mov	r3, r0
 801764c:	6039      	str	r1, [r7, #0]
 801764e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	2204      	movs	r2, #4
 8017654:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017656:	4b03      	ldr	r3, [pc, #12]	; (8017664 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017658:	4618      	mov	r0, r3
 801765a:	370c      	adds	r7, #12
 801765c:	46bd      	mov	sp, r7
 801765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017662:	4770      	bx	lr
 8017664:	20000110 	.word	0x20000110

08017668 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	4603      	mov	r3, r0
 8017670:	6039      	str	r1, [r7, #0]
 8017672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017674:	79fb      	ldrb	r3, [r7, #7]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d105      	bne.n	8017686 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801767a:	683a      	ldr	r2, [r7, #0]
 801767c:	4907      	ldr	r1, [pc, #28]	; (801769c <USBD_HS_ProductStrDescriptor+0x34>)
 801767e:	4808      	ldr	r0, [pc, #32]	; (80176a0 <USBD_HS_ProductStrDescriptor+0x38>)
 8017680:	f7fb f818 	bl	80126b4 <USBD_GetString>
 8017684:	e004      	b.n	8017690 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017686:	683a      	ldr	r2, [r7, #0]
 8017688:	4904      	ldr	r1, [pc, #16]	; (801769c <USBD_HS_ProductStrDescriptor+0x34>)
 801768a:	4805      	ldr	r0, [pc, #20]	; (80176a0 <USBD_HS_ProductStrDescriptor+0x38>)
 801768c:	f7fb f812 	bl	80126b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017690:	4b02      	ldr	r3, [pc, #8]	; (801769c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017692:	4618      	mov	r0, r3
 8017694:	3708      	adds	r7, #8
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
 801769a:	bf00      	nop
 801769c:	2000227c 	.word	0x2000227c
 80176a0:	0801c174 	.word	0x0801c174

080176a4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	4603      	mov	r3, r0
 80176ac:	6039      	str	r1, [r7, #0]
 80176ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80176b0:	683a      	ldr	r2, [r7, #0]
 80176b2:	4904      	ldr	r1, [pc, #16]	; (80176c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80176b4:	4804      	ldr	r0, [pc, #16]	; (80176c8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80176b6:	f7fa fffd 	bl	80126b4 <USBD_GetString>
  return USBD_StrDesc;
 80176ba:	4b02      	ldr	r3, [pc, #8]	; (80176c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	2000227c 	.word	0x2000227c
 80176c8:	0801c18c 	.word	0x0801c18c

080176cc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	4603      	mov	r3, r0
 80176d4:	6039      	str	r1, [r7, #0]
 80176d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	221a      	movs	r2, #26
 80176dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80176de:	f000 f855 	bl	801778c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80176e2:	4b02      	ldr	r3, [pc, #8]	; (80176ec <USBD_HS_SerialStrDescriptor+0x20>)
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	20000114 	.word	0x20000114

080176f0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	4603      	mov	r3, r0
 80176f8:	6039      	str	r1, [r7, #0]
 80176fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80176fc:	79fb      	ldrb	r3, [r7, #7]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d105      	bne.n	801770e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017702:	683a      	ldr	r2, [r7, #0]
 8017704:	4907      	ldr	r1, [pc, #28]	; (8017724 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017706:	4808      	ldr	r0, [pc, #32]	; (8017728 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017708:	f7fa ffd4 	bl	80126b4 <USBD_GetString>
 801770c:	e004      	b.n	8017718 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801770e:	683a      	ldr	r2, [r7, #0]
 8017710:	4904      	ldr	r1, [pc, #16]	; (8017724 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017712:	4805      	ldr	r0, [pc, #20]	; (8017728 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017714:	f7fa ffce 	bl	80126b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017718:	4b02      	ldr	r3, [pc, #8]	; (8017724 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801771a:	4618      	mov	r0, r3
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	2000227c 	.word	0x2000227c
 8017728:	0801c1a0 	.word	0x0801c1a0

0801772c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	4603      	mov	r3, r0
 8017734:	6039      	str	r1, [r7, #0]
 8017736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d105      	bne.n	801774a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	4907      	ldr	r1, [pc, #28]	; (8017760 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017742:	4808      	ldr	r0, [pc, #32]	; (8017764 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017744:	f7fa ffb6 	bl	80126b4 <USBD_GetString>
 8017748:	e004      	b.n	8017754 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801774a:	683a      	ldr	r2, [r7, #0]
 801774c:	4904      	ldr	r1, [pc, #16]	; (8017760 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801774e:	4805      	ldr	r0, [pc, #20]	; (8017764 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017750:	f7fa ffb0 	bl	80126b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017754:	4b02      	ldr	r3, [pc, #8]	; (8017760 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017756:	4618      	mov	r0, r3
 8017758:	3708      	adds	r7, #8
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	2000227c 	.word	0x2000227c
 8017764:	0801c1ac 	.word	0x0801c1ac

08017768 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017768:	b480      	push	{r7}
 801776a:	b083      	sub	sp, #12
 801776c:	af00      	add	r7, sp, #0
 801776e:	4603      	mov	r3, r0
 8017770:	6039      	str	r1, [r7, #0]
 8017772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	220c      	movs	r2, #12
 8017778:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 801777a:	4b03      	ldr	r3, [pc, #12]	; (8017788 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 801777c:	4618      	mov	r0, r3
 801777e:	370c      	adds	r7, #12
 8017780:	46bd      	mov	sp, r7
 8017782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017786:	4770      	bx	lr
 8017788:	20000104 	.word	0x20000104

0801778c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017792:	4b0f      	ldr	r3, [pc, #60]	; (80177d0 <Get_SerialNum+0x44>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017798:	4b0e      	ldr	r3, [pc, #56]	; (80177d4 <Get_SerialNum+0x48>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801779e:	4b0e      	ldr	r3, [pc, #56]	; (80177d8 <Get_SerialNum+0x4c>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80177a4:	68fa      	ldr	r2, [r7, #12]
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	4413      	add	r3, r2
 80177aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d009      	beq.n	80177c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80177b2:	2208      	movs	r2, #8
 80177b4:	4909      	ldr	r1, [pc, #36]	; (80177dc <Get_SerialNum+0x50>)
 80177b6:	68f8      	ldr	r0, [r7, #12]
 80177b8:	f000 f814 	bl	80177e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80177bc:	2204      	movs	r2, #4
 80177be:	4908      	ldr	r1, [pc, #32]	; (80177e0 <Get_SerialNum+0x54>)
 80177c0:	68b8      	ldr	r0, [r7, #8]
 80177c2:	f000 f80f 	bl	80177e4 <IntToUnicode>
  }
}
 80177c6:	bf00      	nop
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	1ff0f420 	.word	0x1ff0f420
 80177d4:	1ff0f424 	.word	0x1ff0f424
 80177d8:	1ff0f428 	.word	0x1ff0f428
 80177dc:	20000116 	.word	0x20000116
 80177e0:	20000126 	.word	0x20000126

080177e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80177e4:	b480      	push	{r7}
 80177e6:	b087      	sub	sp, #28
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	4613      	mov	r3, r2
 80177f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80177f2:	2300      	movs	r3, #0
 80177f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80177f6:	2300      	movs	r3, #0
 80177f8:	75fb      	strb	r3, [r7, #23]
 80177fa:	e027      	b.n	801784c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	0f1b      	lsrs	r3, r3, #28
 8017800:	2b09      	cmp	r3, #9
 8017802:	d80b      	bhi.n	801781c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	0f1b      	lsrs	r3, r3, #28
 8017808:	b2da      	uxtb	r2, r3
 801780a:	7dfb      	ldrb	r3, [r7, #23]
 801780c:	005b      	lsls	r3, r3, #1
 801780e:	4619      	mov	r1, r3
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	440b      	add	r3, r1
 8017814:	3230      	adds	r2, #48	; 0x30
 8017816:	b2d2      	uxtb	r2, r2
 8017818:	701a      	strb	r2, [r3, #0]
 801781a:	e00a      	b.n	8017832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	0f1b      	lsrs	r3, r3, #28
 8017820:	b2da      	uxtb	r2, r3
 8017822:	7dfb      	ldrb	r3, [r7, #23]
 8017824:	005b      	lsls	r3, r3, #1
 8017826:	4619      	mov	r1, r3
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	440b      	add	r3, r1
 801782c:	3237      	adds	r2, #55	; 0x37
 801782e:	b2d2      	uxtb	r2, r2
 8017830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	011b      	lsls	r3, r3, #4
 8017836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017838:	7dfb      	ldrb	r3, [r7, #23]
 801783a:	005b      	lsls	r3, r3, #1
 801783c:	3301      	adds	r3, #1
 801783e:	68ba      	ldr	r2, [r7, #8]
 8017840:	4413      	add	r3, r2
 8017842:	2200      	movs	r2, #0
 8017844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017846:	7dfb      	ldrb	r3, [r7, #23]
 8017848:	3301      	adds	r3, #1
 801784a:	75fb      	strb	r3, [r7, #23]
 801784c:	7dfa      	ldrb	r2, [r7, #23]
 801784e:	79fb      	ldrb	r3, [r7, #7]
 8017850:	429a      	cmp	r2, r3
 8017852:	d3d3      	bcc.n	80177fc <IntToUnicode+0x18>
  }
}
 8017854:	bf00      	nop
 8017856:	bf00      	nop
 8017858:	371c      	adds	r7, #28
 801785a:	46bd      	mov	sp, r7
 801785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017860:	4770      	bx	lr
	...

08017864 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b0aa      	sub	sp, #168	; 0xa8
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801786c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017870:	2200      	movs	r2, #0
 8017872:	601a      	str	r2, [r3, #0]
 8017874:	605a      	str	r2, [r3, #4]
 8017876:	609a      	str	r2, [r3, #8]
 8017878:	60da      	str	r2, [r3, #12]
 801787a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801787c:	f107 0310 	add.w	r3, r7, #16
 8017880:	2284      	movs	r2, #132	; 0x84
 8017882:	2100      	movs	r1, #0
 8017884:	4618      	mov	r0, r3
 8017886:	f000 fecf 	bl	8018628 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4a26      	ldr	r2, [pc, #152]	; (8017928 <HAL_PCD_MspInit+0xc4>)
 8017890:	4293      	cmp	r3, r2
 8017892:	d145      	bne.n	8017920 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8017894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801789a:	2300      	movs	r3, #0
 801789c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178a0:	f107 0310 	add.w	r3, r7, #16
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7f2 fd1b 	bl	800a2e0 <HAL_RCCEx_PeriphCLKConfig>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d001      	beq.n	80178b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80178b0:	f7ed f9b8 	bl	8004c24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178b4:	4b1d      	ldr	r3, [pc, #116]	; (801792c <HAL_PCD_MspInit+0xc8>)
 80178b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178b8:	4a1c      	ldr	r2, [pc, #112]	; (801792c <HAL_PCD_MspInit+0xc8>)
 80178ba:	f043 0302 	orr.w	r3, r3, #2
 80178be:	6313      	str	r3, [r2, #48]	; 0x30
 80178c0:	4b1a      	ldr	r3, [pc, #104]	; (801792c <HAL_PCD_MspInit+0xc8>)
 80178c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c4:	f003 0302 	and.w	r3, r3, #2
 80178c8:	60fb      	str	r3, [r7, #12]
 80178ca:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80178cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80178d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178d4:	2302      	movs	r3, #2
 80178d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178da:	2300      	movs	r3, #0
 80178dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80178e0:	2303      	movs	r3, #3
 80178e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80178e6:	230c      	movs	r3, #12
 80178e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80178ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80178f0:	4619      	mov	r1, r3
 80178f2:	480f      	ldr	r0, [pc, #60]	; (8017930 <HAL_PCD_MspInit+0xcc>)
 80178f4:	f7ee fdfa 	bl	80064ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80178f8:	4b0c      	ldr	r3, [pc, #48]	; (801792c <HAL_PCD_MspInit+0xc8>)
 80178fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178fc:	4a0b      	ldr	r2, [pc, #44]	; (801792c <HAL_PCD_MspInit+0xc8>)
 80178fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017902:	6313      	str	r3, [r2, #48]	; 0x30
 8017904:	4b09      	ldr	r3, [pc, #36]	; (801792c <HAL_PCD_MspInit+0xc8>)
 8017906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801790c:	60bb      	str	r3, [r7, #8]
 801790e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017910:	2200      	movs	r2, #0
 8017912:	2100      	movs	r1, #0
 8017914:	204d      	movs	r0, #77	; 0x4d
 8017916:	f7ee fa0c 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801791a:	204d      	movs	r0, #77	; 0x4d
 801791c:	f7ee fa25 	bl	8005d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017920:	bf00      	nop
 8017922:	37a8      	adds	r7, #168	; 0xa8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	40040000 	.word	0x40040000
 801792c:	40023800 	.word	0x40023800
 8017930:	40020400 	.word	0x40020400

08017934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017948:	4619      	mov	r1, r3
 801794a:	4610      	mov	r0, r2
 801794c:	f7f9 fd29 	bl	80113a2 <USBD_LL_SetupStage>
}
 8017950:	bf00      	nop
 8017952:	3708      	adds	r7, #8
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	460b      	mov	r3, r1
 8017962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801796a:	78fa      	ldrb	r2, [r7, #3]
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	4613      	mov	r3, r2
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	4413      	add	r3, r2
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	440b      	add	r3, r1
 8017978:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801797c:	681a      	ldr	r2, [r3, #0]
 801797e:	78fb      	ldrb	r3, [r7, #3]
 8017980:	4619      	mov	r1, r3
 8017982:	f7f9 fd63 	bl	801144c <USBD_LL_DataOutStage>
}
 8017986:	bf00      	nop
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b082      	sub	sp, #8
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
 8017996:	460b      	mov	r3, r1
 8017998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80179a0:	78fa      	ldrb	r2, [r7, #3]
 80179a2:	6879      	ldr	r1, [r7, #4]
 80179a4:	4613      	mov	r3, r2
 80179a6:	00db      	lsls	r3, r3, #3
 80179a8:	4413      	add	r3, r2
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	440b      	add	r3, r1
 80179ae:	334c      	adds	r3, #76	; 0x4c
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	78fb      	ldrb	r3, [r7, #3]
 80179b4:	4619      	mov	r1, r3
 80179b6:	f7f9 fdfc 	bl	80115b2 <USBD_LL_DataInStage>
}
 80179ba:	bf00      	nop
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179c2:	b580      	push	{r7, lr}
 80179c4:	b082      	sub	sp, #8
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7f9 ff30 	bl	8011836 <USBD_LL_SOF>
}
 80179d6:	bf00      	nop
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}

080179de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179de:	b580      	push	{r7, lr}
 80179e0:	b084      	sub	sp, #16
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80179e6:	2301      	movs	r3, #1
 80179e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	68db      	ldr	r3, [r3, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d102      	bne.n	80179f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80179f2:	2300      	movs	r3, #0
 80179f4:	73fb      	strb	r3, [r7, #15]
 80179f6:	e008      	b.n	8017a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	68db      	ldr	r3, [r3, #12]
 80179fc:	2b02      	cmp	r3, #2
 80179fe:	d102      	bne.n	8017a06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017a00:	2301      	movs	r3, #1
 8017a02:	73fb      	strb	r3, [r7, #15]
 8017a04:	e001      	b.n	8017a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017a06:	f7ed f90d 	bl	8004c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017a10:	7bfa      	ldrb	r2, [r7, #15]
 8017a12:	4611      	mov	r1, r2
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7f9 fed0 	bl	80117ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7f9 fe78 	bl	8011716 <USBD_LL_Reset>
}
 8017a26:	bf00      	nop
 8017a28:	3710      	adds	r7, #16
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}
	...

08017a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f7f9 fecb 	bl	80117da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	6812      	ldr	r2, [r2, #0]
 8017a52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a56:	f043 0301 	orr.w	r3, r3, #1
 8017a5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6a1b      	ldr	r3, [r3, #32]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d005      	beq.n	8017a70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a64:	4b04      	ldr	r3, [pc, #16]	; (8017a78 <HAL_PCD_SuspendCallback+0x48>)
 8017a66:	691b      	ldr	r3, [r3, #16]
 8017a68:	4a03      	ldr	r2, [pc, #12]	; (8017a78 <HAL_PCD_SuspendCallback+0x48>)
 8017a6a:	f043 0306 	orr.w	r3, r3, #6
 8017a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017a70:	bf00      	nop
 8017a72:	3708      	adds	r7, #8
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	e000ed00 	.word	0xe000ed00

08017a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f7f9 febb 	bl	8011806 <USBD_LL_Resume>
}
 8017a90:	bf00      	nop
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	460b      	mov	r3, r1
 8017aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017aaa:	78fa      	ldrb	r2, [r7, #3]
 8017aac:	4611      	mov	r1, r2
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7f9 ff13 	bl	80118da <USBD_LL_IsoOUTIncomplete>
}
 8017ab4:	bf00      	nop
 8017ab6:	3708      	adds	r7, #8
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	460b      	mov	r3, r1
 8017ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017ace:	78fa      	ldrb	r2, [r7, #3]
 8017ad0:	4611      	mov	r1, r2
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7f9 fecf 	bl	8011876 <USBD_LL_IsoINIncomplete>
}
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b082      	sub	sp, #8
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7f9 ff25 	bl	801193e <USBD_LL_DevConnected>
}
 8017af4:	bf00      	nop
 8017af6:	3708      	adds	r7, #8
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f9 ff22 	bl	8011954 <USBD_LL_DevDisconnected>
}
 8017b10:	bf00      	nop
 8017b12:	3708      	adds	r7, #8
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}

08017b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d140      	bne.n	8017baa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017b28:	4a22      	ldr	r2, [pc, #136]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	4a20      	ldr	r2, [pc, #128]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017b38:	4b1e      	ldr	r3, [pc, #120]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b3a:	4a1f      	ldr	r2, [pc, #124]	; (8017bb8 <USBD_LL_Init+0xa0>)
 8017b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8017b3e:	4b1d      	ldr	r3, [pc, #116]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b40:	2208      	movs	r2, #8
 8017b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017b44:	4b1b      	ldr	r3, [pc, #108]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b46:	2202      	movs	r2, #2
 8017b48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017b4a:	4b1a      	ldr	r3, [pc, #104]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017b50:	4b18      	ldr	r3, [pc, #96]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b52:	2202      	movs	r2, #2
 8017b54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017b56:	4b17      	ldr	r3, [pc, #92]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b58:	2200      	movs	r2, #0
 8017b5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017b5c:	4b15      	ldr	r3, [pc, #84]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017b62:	4b14      	ldr	r3, [pc, #80]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017b68:	4b12      	ldr	r3, [pc, #72]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017b6e:	4b11      	ldr	r3, [pc, #68]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b70:	2200      	movs	r2, #0
 8017b72:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017b74:	4b0f      	ldr	r3, [pc, #60]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b76:	2200      	movs	r2, #0
 8017b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017b7a:	480e      	ldr	r0, [pc, #56]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b7c:	f7f0 fbd0 	bl	8008320 <HAL_PCD_Init>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d001      	beq.n	8017b8a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017b86:	f7ed f84d 	bl	8004c24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017b8e:	4809      	ldr	r0, [pc, #36]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b90:	f7f1 fe49 	bl	8009826 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017b94:	2280      	movs	r2, #128	; 0x80
 8017b96:	2100      	movs	r1, #0
 8017b98:	4806      	ldr	r0, [pc, #24]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017b9a:	f7f1 fdfd 	bl	8009798 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017b9e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017ba2:	2101      	movs	r1, #1
 8017ba4:	4803      	ldr	r0, [pc, #12]	; (8017bb4 <USBD_LL_Init+0x9c>)
 8017ba6:	f7f1 fdf7 	bl	8009798 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017baa:	2300      	movs	r3, #0
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	3708      	adds	r7, #8
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}
 8017bb4:	2000247c 	.word	0x2000247c
 8017bb8:	40040000 	.word	0x40040000

08017bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b084      	sub	sp, #16
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bc8:	2300      	movs	r3, #0
 8017bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7f0 fcc8 	bl	8008568 <HAL_PCD_Start>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bdc:	7bfb      	ldrb	r3, [r7, #15]
 8017bde:	4618      	mov	r0, r3
 8017be0:	f000 f97e 	bl	8017ee0 <USBD_Get_USB_Status>
 8017be4:	4603      	mov	r3, r0
 8017be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b084      	sub	sp, #16
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	4608      	mov	r0, r1
 8017bfc:	4611      	mov	r1, r2
 8017bfe:	461a      	mov	r2, r3
 8017c00:	4603      	mov	r3, r0
 8017c02:	70fb      	strb	r3, [r7, #3]
 8017c04:	460b      	mov	r3, r1
 8017c06:	70bb      	strb	r3, [r7, #2]
 8017c08:	4613      	mov	r3, r2
 8017c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c10:	2300      	movs	r3, #0
 8017c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017c1a:	78bb      	ldrb	r3, [r7, #2]
 8017c1c:	883a      	ldrh	r2, [r7, #0]
 8017c1e:	78f9      	ldrb	r1, [r7, #3]
 8017c20:	f7f1 f9b5 	bl	8008f8e <HAL_PCD_EP_Open>
 8017c24:	4603      	mov	r3, r0
 8017c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c28:	7bfb      	ldrb	r3, [r7, #15]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f000 f958 	bl	8017ee0 <USBD_Get_USB_Status>
 8017c30:	4603      	mov	r3, r0
 8017c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3710      	adds	r7, #16
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c3e:	b580      	push	{r7, lr}
 8017c40:	b084      	sub	sp, #16
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	6078      	str	r0, [r7, #4]
 8017c46:	460b      	mov	r3, r1
 8017c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c58:	78fa      	ldrb	r2, [r7, #3]
 8017c5a:	4611      	mov	r1, r2
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7f1 f9fe 	bl	800905e <HAL_PCD_EP_Close>
 8017c62:	4603      	mov	r3, r0
 8017c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c66:	7bfb      	ldrb	r3, [r7, #15]
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f000 f939 	bl	8017ee0 <USBD_Get_USB_Status>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3710      	adds	r7, #16
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}

08017c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b084      	sub	sp, #16
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	460b      	mov	r3, r1
 8017c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c88:	2300      	movs	r3, #0
 8017c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c96:	78fa      	ldrb	r2, [r7, #3]
 8017c98:	4611      	mov	r1, r2
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7f1 fad6 	bl	800924c <HAL_PCD_EP_SetStall>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ca4:	7bfb      	ldrb	r3, [r7, #15]
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f000 f91a 	bl	8017ee0 <USBD_Get_USB_Status>
 8017cac:	4603      	mov	r3, r0
 8017cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3710      	adds	r7, #16
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}

08017cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cba:	b580      	push	{r7, lr}
 8017cbc:	b084      	sub	sp, #16
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	6078      	str	r0, [r7, #4]
 8017cc2:	460b      	mov	r3, r1
 8017cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017cd4:	78fa      	ldrb	r2, [r7, #3]
 8017cd6:	4611      	mov	r1, r2
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7f1 fb1b 	bl	8009314 <HAL_PCD_EP_ClrStall>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ce2:	7bfb      	ldrb	r3, [r7, #15]
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f000 f8fb 	bl	8017ee0 <USBD_Get_USB_Status>
 8017cea:	4603      	mov	r3, r0
 8017cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3710      	adds	r7, #16
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cf8:	b480      	push	{r7}
 8017cfa:	b085      	sub	sp, #20
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	460b      	mov	r3, r1
 8017d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	da0b      	bge.n	8017d2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017d14:	78fb      	ldrb	r3, [r7, #3]
 8017d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d1a:	68f9      	ldr	r1, [r7, #12]
 8017d1c:	4613      	mov	r3, r2
 8017d1e:	00db      	lsls	r3, r3, #3
 8017d20:	4413      	add	r3, r2
 8017d22:	009b      	lsls	r3, r3, #2
 8017d24:	440b      	add	r3, r1
 8017d26:	333e      	adds	r3, #62	; 0x3e
 8017d28:	781b      	ldrb	r3, [r3, #0]
 8017d2a:	e00b      	b.n	8017d44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017d2c:	78fb      	ldrb	r3, [r7, #3]
 8017d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d32:	68f9      	ldr	r1, [r7, #12]
 8017d34:	4613      	mov	r3, r2
 8017d36:	00db      	lsls	r3, r3, #3
 8017d38:	4413      	add	r3, r2
 8017d3a:	009b      	lsls	r3, r3, #2
 8017d3c:	440b      	add	r3, r1
 8017d3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017d42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3714      	adds	r7, #20
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4e:	4770      	bx	lr

08017d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b084      	sub	sp, #16
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	460b      	mov	r3, r1
 8017d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d60:	2300      	movs	r3, #0
 8017d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d6a:	78fa      	ldrb	r2, [r7, #3]
 8017d6c:	4611      	mov	r1, r2
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7f1 f8e8 	bl	8008f44 <HAL_PCD_SetAddress>
 8017d74:	4603      	mov	r3, r0
 8017d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d78:	7bfb      	ldrb	r3, [r7, #15]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f000 f8b0 	bl	8017ee0 <USBD_Get_USB_Status>
 8017d80:	4603      	mov	r3, r0
 8017d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3710      	adds	r7, #16
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}

08017d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d8e:	b580      	push	{r7, lr}
 8017d90:	b086      	sub	sp, #24
 8017d92:	af00      	add	r7, sp, #0
 8017d94:	60f8      	str	r0, [r7, #12]
 8017d96:	607a      	str	r2, [r7, #4]
 8017d98:	603b      	str	r3, [r7, #0]
 8017d9a:	460b      	mov	r3, r1
 8017d9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017da2:	2300      	movs	r3, #0
 8017da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017dac:	7af9      	ldrb	r1, [r7, #11]
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	687a      	ldr	r2, [r7, #4]
 8017db2:	f7f1 fa01 	bl	80091b8 <HAL_PCD_EP_Transmit>
 8017db6:	4603      	mov	r3, r0
 8017db8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dba:	7dfb      	ldrb	r3, [r7, #23]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f000 f88f 	bl	8017ee0 <USBD_Get_USB_Status>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	3718      	adds	r7, #24
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}

08017dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b086      	sub	sp, #24
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	607a      	str	r2, [r7, #4]
 8017dda:	603b      	str	r3, [r7, #0]
 8017ddc:	460b      	mov	r3, r1
 8017dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de0:	2300      	movs	r3, #0
 8017de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017de4:	2300      	movs	r3, #0
 8017de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017dee:	7af9      	ldrb	r1, [r7, #11]
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	f7f1 f97d 	bl	80090f2 <HAL_PCD_EP_Receive>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dfc:	7dfb      	ldrb	r3, [r7, #23]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 f86e 	bl	8017ee0 <USBD_Get_USB_Status>
 8017e04:	4603      	mov	r3, r0
 8017e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3718      	adds	r7, #24
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e12:	b580      	push	{r7, lr}
 8017e14:	b082      	sub	sp, #8
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
 8017e1a:	460b      	mov	r3, r1
 8017e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e24:	78fa      	ldrb	r2, [r7, #3]
 8017e26:	4611      	mov	r1, r2
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7f1 f9ad 	bl	8009188 <HAL_PCD_EP_GetRxCount>
 8017e2e:	4603      	mov	r3, r0
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3708      	adds	r7, #8
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}

08017e38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b082      	sub	sp, #8
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	460b      	mov	r3, r1
 8017e42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017e44:	78fb      	ldrb	r3, [r7, #3]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d002      	beq.n	8017e50 <HAL_PCDEx_LPM_Callback+0x18>
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d01f      	beq.n	8017e8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017e4e:	e03b      	b.n	8017ec8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6a1b      	ldr	r3, [r3, #32]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d007      	beq.n	8017e68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017e58:	f000 f83c 	bl	8017ed4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017e5c:	4b1c      	ldr	r3, [pc, #112]	; (8017ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8017e5e:	691b      	ldr	r3, [r3, #16]
 8017e60:	4a1b      	ldr	r2, [pc, #108]	; (8017ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8017e62:	f023 0306 	bic.w	r3, r3, #6
 8017e66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	687a      	ldr	r2, [r7, #4]
 8017e74:	6812      	ldr	r2, [r2, #0]
 8017e76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017e7a:	f023 0301 	bic.w	r3, r3, #1
 8017e7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7f9 fcbd 	bl	8011806 <USBD_LL_Resume>
    break;
 8017e8c:	e01c      	b.n	8017ec8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	687a      	ldr	r2, [r7, #4]
 8017e9a:	6812      	ldr	r2, [r2, #0]
 8017e9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ea0:	f043 0301 	orr.w	r3, r3, #1
 8017ea4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f9 fc94 	bl	80117da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	6a1b      	ldr	r3, [r3, #32]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d005      	beq.n	8017ec6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017eba:	4b05      	ldr	r3, [pc, #20]	; (8017ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ebc:	691b      	ldr	r3, [r3, #16]
 8017ebe:	4a04      	ldr	r2, [pc, #16]	; (8017ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ec0:	f043 0306 	orr.w	r3, r3, #6
 8017ec4:	6113      	str	r3, [r2, #16]
    break;
 8017ec6:	bf00      	nop
}
 8017ec8:	bf00      	nop
 8017eca:	3708      	adds	r7, #8
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	e000ed00 	.word	0xe000ed00

08017ed4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017ed8:	f7ec fb20 	bl	800451c <SystemClock_Config>
}
 8017edc:	bf00      	nop
 8017ede:	bd80      	pop	{r7, pc}

08017ee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017ee0:	b480      	push	{r7}
 8017ee2:	b085      	sub	sp, #20
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017eea:	2300      	movs	r3, #0
 8017eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017eee:	79fb      	ldrb	r3, [r7, #7]
 8017ef0:	2b03      	cmp	r3, #3
 8017ef2:	d817      	bhi.n	8017f24 <USBD_Get_USB_Status+0x44>
 8017ef4:	a201      	add	r2, pc, #4	; (adr r2, 8017efc <USBD_Get_USB_Status+0x1c>)
 8017ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017efa:	bf00      	nop
 8017efc:	08017f0d 	.word	0x08017f0d
 8017f00:	08017f13 	.word	0x08017f13
 8017f04:	08017f19 	.word	0x08017f19
 8017f08:	08017f1f 	.word	0x08017f1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8017f10:	e00b      	b.n	8017f2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017f12:	2303      	movs	r3, #3
 8017f14:	73fb      	strb	r3, [r7, #15]
    break;
 8017f16:	e008      	b.n	8017f2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8017f1c:	e005      	b.n	8017f2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017f1e:	2303      	movs	r3, #3
 8017f20:	73fb      	strb	r3, [r7, #15]
    break;
 8017f22:	e002      	b.n	8017f2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017f24:	2303      	movs	r3, #3
 8017f26:	73fb      	strb	r3, [r7, #15]
    break;
 8017f28:	bf00      	nop
  }
  return usb_status;
 8017f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3714      	adds	r7, #20
 8017f30:	46bd      	mov	sp, r7
 8017f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f36:	4770      	bx	lr

08017f38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017f3c:	2201      	movs	r2, #1
 8017f3e:	490e      	ldr	r1, [pc, #56]	; (8017f78 <MX_USB_HOST_Init+0x40>)
 8017f40:	480e      	ldr	r0, [pc, #56]	; (8017f7c <MX_USB_HOST_Init+0x44>)
 8017f42:	f7fb f833 	bl	8012fac <USBH_Init>
 8017f46:	4603      	mov	r3, r0
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d001      	beq.n	8017f50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017f4c:	f7ec fe6a 	bl	8004c24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017f50:	490b      	ldr	r1, [pc, #44]	; (8017f80 <MX_USB_HOST_Init+0x48>)
 8017f52:	480a      	ldr	r0, [pc, #40]	; (8017f7c <MX_USB_HOST_Init+0x44>)
 8017f54:	f7fb f8d7 	bl	8013106 <USBH_RegisterClass>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d001      	beq.n	8017f62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017f5e:	f7ec fe61 	bl	8004c24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017f62:	4806      	ldr	r0, [pc, #24]	; (8017f7c <MX_USB_HOST_Init+0x44>)
 8017f64:	f7fb f95b 	bl	801321e <USBH_Start>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d001      	beq.n	8017f72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017f6e:	f7ec fe59 	bl	8004c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017f72:	bf00      	nop
 8017f74:	bd80      	pop	{r7, pc}
 8017f76:	bf00      	nop
 8017f78:	08017f99 	.word	0x08017f99
 8017f7c:	20002984 	.word	0x20002984
 8017f80:	2000009c 	.word	0x2000009c

08017f84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8017f88:	4802      	ldr	r0, [pc, #8]	; (8017f94 <MX_USB_HOST_Process+0x10>)
 8017f8a:	f7fb f959 	bl	8013240 <USBH_Process>
}
 8017f8e:	bf00      	nop
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	20002984 	.word	0x20002984

08017f98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	460b      	mov	r3, r1
 8017fa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017fa4:	78fb      	ldrb	r3, [r7, #3]
 8017fa6:	3b01      	subs	r3, #1
 8017fa8:	2b04      	cmp	r3, #4
 8017faa:	d819      	bhi.n	8017fe0 <USBH_UserProcess+0x48>
 8017fac:	a201      	add	r2, pc, #4	; (adr r2, 8017fb4 <USBH_UserProcess+0x1c>)
 8017fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fb2:	bf00      	nop
 8017fb4:	08017fe1 	.word	0x08017fe1
 8017fb8:	08017fd1 	.word	0x08017fd1
 8017fbc:	08017fe1 	.word	0x08017fe1
 8017fc0:	08017fd9 	.word	0x08017fd9
 8017fc4:	08017fc9 	.word	0x08017fc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017fc8:	4b09      	ldr	r3, [pc, #36]	; (8017ff0 <USBH_UserProcess+0x58>)
 8017fca:	2203      	movs	r2, #3
 8017fcc:	701a      	strb	r2, [r3, #0]
  break;
 8017fce:	e008      	b.n	8017fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017fd0:	4b07      	ldr	r3, [pc, #28]	; (8017ff0 <USBH_UserProcess+0x58>)
 8017fd2:	2202      	movs	r2, #2
 8017fd4:	701a      	strb	r2, [r3, #0]
  break;
 8017fd6:	e004      	b.n	8017fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017fd8:	4b05      	ldr	r3, [pc, #20]	; (8017ff0 <USBH_UserProcess+0x58>)
 8017fda:	2201      	movs	r2, #1
 8017fdc:	701a      	strb	r2, [r3, #0]
  break;
 8017fde:	e000      	b.n	8017fe2 <USBH_UserProcess+0x4a>

  default:
  break;
 8017fe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017fe2:	bf00      	nop
 8017fe4:	370c      	adds	r7, #12
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fec:	4770      	bx	lr
 8017fee:	bf00      	nop
 8017ff0:	20002d5c 	.word	0x20002d5c

08017ff4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b0ac      	sub	sp, #176	; 0xb0
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ffc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8018000:	2200      	movs	r2, #0
 8018002:	601a      	str	r2, [r3, #0]
 8018004:	605a      	str	r2, [r3, #4]
 8018006:	609a      	str	r2, [r3, #8]
 8018008:	60da      	str	r2, [r3, #12]
 801800a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801800c:	f107 0318 	add.w	r3, r7, #24
 8018010:	2284      	movs	r2, #132	; 0x84
 8018012:	2100      	movs	r1, #0
 8018014:	4618      	mov	r0, r3
 8018016:	f000 fb07 	bl	8018628 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018022:	d151      	bne.n	80180c8 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8018024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8018028:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801802a:	2300      	movs	r3, #0
 801802c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018030:	f107 0318 	add.w	r3, r7, #24
 8018034:	4618      	mov	r0, r3
 8018036:	f7f2 f953 	bl	800a2e0 <HAL_RCCEx_PeriphCLKConfig>
 801803a:	4603      	mov	r3, r0
 801803c:	2b00      	cmp	r3, #0
 801803e:	d001      	beq.n	8018044 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8018040:	f7ec fdf0 	bl	8004c24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018044:	4b22      	ldr	r3, [pc, #136]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 8018046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018048:	4a21      	ldr	r2, [pc, #132]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 801804a:	f043 0301 	orr.w	r3, r3, #1
 801804e:	6313      	str	r3, [r2, #48]	; 0x30
 8018050:	4b1f      	ldr	r3, [pc, #124]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 8018052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	617b      	str	r3, [r7, #20]
 801805a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801805c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018064:	2302      	movs	r3, #2
 8018066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801806a:	2300      	movs	r3, #0
 801806c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018070:	2303      	movs	r3, #3
 8018072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018076:	230a      	movs	r3, #10
 8018078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801807c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8018080:	4619      	mov	r1, r3
 8018082:	4814      	ldr	r0, [pc, #80]	; (80180d4 <HAL_HCD_MspInit+0xe0>)
 8018084:	f7ee fa32 	bl	80064ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018088:	4b11      	ldr	r3, [pc, #68]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 801808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801808c:	4a10      	ldr	r2, [pc, #64]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 801808e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018092:	6353      	str	r3, [r2, #52]	; 0x34
 8018094:	4b0e      	ldr	r3, [pc, #56]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 8018096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801809c:	613b      	str	r3, [r7, #16]
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	4b0b      	ldr	r3, [pc, #44]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 80180a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180a4:	4a0a      	ldr	r2, [pc, #40]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 80180a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80180aa:	6453      	str	r3, [r2, #68]	; 0x44
 80180ac:	4b08      	ldr	r3, [pc, #32]	; (80180d0 <HAL_HCD_MspInit+0xdc>)
 80180ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80180b4:	60fb      	str	r3, [r7, #12]
 80180b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80180b8:	2200      	movs	r2, #0
 80180ba:	2100      	movs	r1, #0
 80180bc:	2043      	movs	r0, #67	; 0x43
 80180be:	f7ed fe38 	bl	8005d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80180c2:	2043      	movs	r0, #67	; 0x43
 80180c4:	f7ed fe51 	bl	8005d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80180c8:	bf00      	nop
 80180ca:	37b0      	adds	r7, #176	; 0xb0
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}
 80180d0:	40023800 	.word	0x40023800
 80180d4:	40020000 	.word	0x40020000

080180d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7fb fc89 	bl	80139fe <USBH_LL_IncTimer>
}
 80180ec:	bf00      	nop
 80180ee:	3708      	adds	r7, #8
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018102:	4618      	mov	r0, r3
 8018104:	f7fb fcc1 	bl	8013a8a <USBH_LL_Connect>
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801811e:	4618      	mov	r0, r3
 8018120:	f7fb fcca 	bl	8013ab8 <USBH_LL_Disconnect>
}
 8018124:	bf00      	nop
 8018126:	3708      	adds	r7, #8
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801812c:	b480      	push	{r7}
 801812e:	b083      	sub	sp, #12
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	460b      	mov	r3, r1
 8018136:	70fb      	strb	r3, [r7, #3]
 8018138:	4613      	mov	r3, r2
 801813a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801813c:	bf00      	nop
 801813e:	370c      	adds	r7, #12
 8018140:	46bd      	mov	sp, r7
 8018142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018146:	4770      	bx	lr

08018148 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018156:	4618      	mov	r0, r3
 8018158:	f7fb fc7b 	bl	8013a52 <USBH_LL_PortEnabled>
}
 801815c:	bf00      	nop
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018172:	4618      	mov	r0, r3
 8018174:	f7fb fc7b 	bl	8013a6e <USBH_LL_PortDisabled>
}
 8018178:	bf00      	nop
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}

08018180 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801818e:	2b01      	cmp	r3, #1
 8018190:	d12a      	bne.n	80181e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8018192:	4a18      	ldr	r2, [pc, #96]	; (80181f4 <USBH_LL_Init+0x74>)
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	4a15      	ldr	r2, [pc, #84]	; (80181f4 <USBH_LL_Init+0x74>)
 801819e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181a2:	4b14      	ldr	r3, [pc, #80]	; (80181f4 <USBH_LL_Init+0x74>)
 80181a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80181a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80181aa:	4b12      	ldr	r3, [pc, #72]	; (80181f4 <USBH_LL_Init+0x74>)
 80181ac:	2208      	movs	r2, #8
 80181ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80181b0:	4b10      	ldr	r3, [pc, #64]	; (80181f4 <USBH_LL_Init+0x74>)
 80181b2:	2201      	movs	r2, #1
 80181b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80181b6:	4b0f      	ldr	r3, [pc, #60]	; (80181f4 <USBH_LL_Init+0x74>)
 80181b8:	2200      	movs	r2, #0
 80181ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80181bc:	4b0d      	ldr	r3, [pc, #52]	; (80181f4 <USBH_LL_Init+0x74>)
 80181be:	2202      	movs	r2, #2
 80181c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181c2:	4b0c      	ldr	r3, [pc, #48]	; (80181f4 <USBH_LL_Init+0x74>)
 80181c4:	2200      	movs	r2, #0
 80181c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80181c8:	480a      	ldr	r0, [pc, #40]	; (80181f4 <USBH_LL_Init+0x74>)
 80181ca:	f7ee fb6e 	bl	80068aa <HAL_HCD_Init>
 80181ce:	4603      	mov	r3, r0
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d001      	beq.n	80181d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80181d4:	f7ec fd26 	bl	8004c24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80181d8:	4806      	ldr	r0, [pc, #24]	; (80181f4 <USBH_LL_Init+0x74>)
 80181da:	f7ee ff52 	bl	8007082 <HAL_HCD_GetCurrentFrame>
 80181de:	4603      	mov	r3, r0
 80181e0:	4619      	mov	r1, r3
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f7fb fbfc 	bl	80139e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80181e8:	2300      	movs	r3, #0
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3708      	adds	r7, #8
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	20002d60 	.word	0x20002d60

080181f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b084      	sub	sp, #16
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018200:	2300      	movs	r3, #0
 8018202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018204:	2300      	movs	r3, #0
 8018206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801820e:	4618      	mov	r0, r3
 8018210:	f7ee fec1 	bl	8006f96 <HAL_HCD_Start>
 8018214:	4603      	mov	r3, r0
 8018216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018218:	7bfb      	ldrb	r3, [r7, #15]
 801821a:	4618      	mov	r0, r3
 801821c:	f000 f95c 	bl	80184d8 <USBH_Get_USB_Status>
 8018220:	4603      	mov	r3, r0
 8018222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018224:	7bbb      	ldrb	r3, [r7, #14]
}
 8018226:	4618      	mov	r0, r3
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}

0801822e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801822e:	b580      	push	{r7, lr}
 8018230:	b084      	sub	sp, #16
 8018232:	af00      	add	r7, sp, #0
 8018234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018236:	2300      	movs	r3, #0
 8018238:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801823a:	2300      	movs	r3, #0
 801823c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018244:	4618      	mov	r0, r3
 8018246:	f7ee fec9 	bl	8006fdc <HAL_HCD_Stop>
 801824a:	4603      	mov	r3, r0
 801824c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801824e:	7bfb      	ldrb	r3, [r7, #15]
 8018250:	4618      	mov	r0, r3
 8018252:	f000 f941 	bl	80184d8 <USBH_Get_USB_Status>
 8018256:	4603      	mov	r3, r0
 8018258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801825a:	7bbb      	ldrb	r3, [r7, #14]
}
 801825c:	4618      	mov	r0, r3
 801825e:	3710      	adds	r7, #16
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b084      	sub	sp, #16
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801826c:	2301      	movs	r3, #1
 801826e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018276:	4618      	mov	r0, r3
 8018278:	f7ee ff11 	bl	800709e <HAL_HCD_GetCurrentSpeed>
 801827c:	4603      	mov	r3, r0
 801827e:	2b02      	cmp	r3, #2
 8018280:	d00c      	beq.n	801829c <USBH_LL_GetSpeed+0x38>
 8018282:	2b02      	cmp	r3, #2
 8018284:	d80d      	bhi.n	80182a2 <USBH_LL_GetSpeed+0x3e>
 8018286:	2b00      	cmp	r3, #0
 8018288:	d002      	beq.n	8018290 <USBH_LL_GetSpeed+0x2c>
 801828a:	2b01      	cmp	r3, #1
 801828c:	d003      	beq.n	8018296 <USBH_LL_GetSpeed+0x32>
 801828e:	e008      	b.n	80182a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8018290:	2300      	movs	r3, #0
 8018292:	73fb      	strb	r3, [r7, #15]
    break;
 8018294:	e008      	b.n	80182a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018296:	2301      	movs	r3, #1
 8018298:	73fb      	strb	r3, [r7, #15]
    break;
 801829a:	e005      	b.n	80182a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801829c:	2302      	movs	r3, #2
 801829e:	73fb      	strb	r3, [r7, #15]
    break;
 80182a0:	e002      	b.n	80182a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80182a2:	2301      	movs	r3, #1
 80182a4:	73fb      	strb	r3, [r7, #15]
    break;
 80182a6:	bf00      	nop
  }
  return  speed;
 80182a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3710      	adds	r7, #16
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}

080182b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80182b2:	b580      	push	{r7, lr}
 80182b4:	b084      	sub	sp, #16
 80182b6:	af00      	add	r7, sp, #0
 80182b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182ba:	2300      	movs	r3, #0
 80182bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182be:	2300      	movs	r3, #0
 80182c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7ee fea4 	bl	8007016 <HAL_HCD_ResetPort>
 80182ce:	4603      	mov	r3, r0
 80182d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80182d2:	7bfb      	ldrb	r3, [r7, #15]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f000 f8ff 	bl	80184d8 <USBH_Get_USB_Status>
 80182da:	4603      	mov	r3, r0
 80182dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182de:	7bbb      	ldrb	r3, [r7, #14]
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3710      	adds	r7, #16
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}

080182e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	460b      	mov	r3, r1
 80182f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80182fa:	78fa      	ldrb	r2, [r7, #3]
 80182fc:	4611      	mov	r1, r2
 80182fe:	4618      	mov	r0, r3
 8018300:	f7ee feab 	bl	800705a <HAL_HCD_HC_GetXferCount>
 8018304:	4603      	mov	r3, r0
}
 8018306:	4618      	mov	r0, r3
 8018308:	3708      	adds	r7, #8
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}

0801830e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801830e:	b590      	push	{r4, r7, lr}
 8018310:	b089      	sub	sp, #36	; 0x24
 8018312:	af04      	add	r7, sp, #16
 8018314:	6078      	str	r0, [r7, #4]
 8018316:	4608      	mov	r0, r1
 8018318:	4611      	mov	r1, r2
 801831a:	461a      	mov	r2, r3
 801831c:	4603      	mov	r3, r0
 801831e:	70fb      	strb	r3, [r7, #3]
 8018320:	460b      	mov	r3, r1
 8018322:	70bb      	strb	r3, [r7, #2]
 8018324:	4613      	mov	r3, r2
 8018326:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018328:	2300      	movs	r3, #0
 801832a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801832c:	2300      	movs	r3, #0
 801832e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018336:	787c      	ldrb	r4, [r7, #1]
 8018338:	78ba      	ldrb	r2, [r7, #2]
 801833a:	78f9      	ldrb	r1, [r7, #3]
 801833c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801833e:	9302      	str	r3, [sp, #8]
 8018340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018344:	9301      	str	r3, [sp, #4]
 8018346:	f897 3020 	ldrb.w	r3, [r7, #32]
 801834a:	9300      	str	r3, [sp, #0]
 801834c:	4623      	mov	r3, r4
 801834e:	f7ee fb0e 	bl	800696e <HAL_HCD_HC_Init>
 8018352:	4603      	mov	r3, r0
 8018354:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018356:	7bfb      	ldrb	r3, [r7, #15]
 8018358:	4618      	mov	r0, r3
 801835a:	f000 f8bd 	bl	80184d8 <USBH_Get_USB_Status>
 801835e:	4603      	mov	r3, r0
 8018360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018362:	7bbb      	ldrb	r3, [r7, #14]
}
 8018364:	4618      	mov	r0, r3
 8018366:	3714      	adds	r7, #20
 8018368:	46bd      	mov	sp, r7
 801836a:	bd90      	pop	{r4, r7, pc}

0801836c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	460b      	mov	r3, r1
 8018376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018378:	2300      	movs	r3, #0
 801837a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801837c:	2300      	movs	r3, #0
 801837e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018386:	78fa      	ldrb	r2, [r7, #3]
 8018388:	4611      	mov	r1, r2
 801838a:	4618      	mov	r0, r3
 801838c:	f7ee fb7e 	bl	8006a8c <HAL_HCD_HC_Halt>
 8018390:	4603      	mov	r3, r0
 8018392:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018394:	7bfb      	ldrb	r3, [r7, #15]
 8018396:	4618      	mov	r0, r3
 8018398:	f000 f89e 	bl	80184d8 <USBH_Get_USB_Status>
 801839c:	4603      	mov	r3, r0
 801839e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80183a2:	4618      	mov	r0, r3
 80183a4:	3710      	adds	r7, #16
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}

080183aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80183aa:	b590      	push	{r4, r7, lr}
 80183ac:	b089      	sub	sp, #36	; 0x24
 80183ae:	af04      	add	r7, sp, #16
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	4608      	mov	r0, r1
 80183b4:	4611      	mov	r1, r2
 80183b6:	461a      	mov	r2, r3
 80183b8:	4603      	mov	r3, r0
 80183ba:	70fb      	strb	r3, [r7, #3]
 80183bc:	460b      	mov	r3, r1
 80183be:	70bb      	strb	r3, [r7, #2]
 80183c0:	4613      	mov	r3, r2
 80183c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183c4:	2300      	movs	r3, #0
 80183c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80183c8:	2300      	movs	r3, #0
 80183ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80183d2:	787c      	ldrb	r4, [r7, #1]
 80183d4:	78ba      	ldrb	r2, [r7, #2]
 80183d6:	78f9      	ldrb	r1, [r7, #3]
 80183d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80183dc:	9303      	str	r3, [sp, #12]
 80183de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80183e0:	9302      	str	r3, [sp, #8]
 80183e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e4:	9301      	str	r3, [sp, #4]
 80183e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	4623      	mov	r3, r4
 80183ee:	f7ee fb71 	bl	8006ad4 <HAL_HCD_HC_SubmitRequest>
 80183f2:	4603      	mov	r3, r0
 80183f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80183f6:	7bfb      	ldrb	r3, [r7, #15]
 80183f8:	4618      	mov	r0, r3
 80183fa:	f000 f86d 	bl	80184d8 <USBH_Get_USB_Status>
 80183fe:	4603      	mov	r3, r0
 8018400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018402:	7bbb      	ldrb	r3, [r7, #14]
}
 8018404:	4618      	mov	r0, r3
 8018406:	3714      	adds	r7, #20
 8018408:	46bd      	mov	sp, r7
 801840a:	bd90      	pop	{r4, r7, pc}

0801840c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801841e:	78fa      	ldrb	r2, [r7, #3]
 8018420:	4611      	mov	r1, r2
 8018422:	4618      	mov	r0, r3
 8018424:	f7ee fe05 	bl	8007032 <HAL_HCD_HC_GetURBState>
 8018428:	4603      	mov	r3, r0
}
 801842a:	4618      	mov	r0, r3
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}

08018432 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018432:	b580      	push	{r7, lr}
 8018434:	b082      	sub	sp, #8
 8018436:	af00      	add	r7, sp, #0
 8018438:	6078      	str	r0, [r7, #4]
 801843a:	460b      	mov	r3, r1
 801843c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8018444:	2b01      	cmp	r3, #1
 8018446:	d103      	bne.n	8018450 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018448:	78fb      	ldrb	r3, [r7, #3]
 801844a:	4618      	mov	r0, r3
 801844c:	f000 f870 	bl	8018530 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018450:	20c8      	movs	r0, #200	; 0xc8
 8018452:	f7ed f8db 	bl	800560c <HAL_Delay>
  return USBH_OK;
 8018456:	2300      	movs	r3, #0
}
 8018458:	4618      	mov	r0, r3
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018460:	b480      	push	{r7}
 8018462:	b085      	sub	sp, #20
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
 8018468:	460b      	mov	r3, r1
 801846a:	70fb      	strb	r3, [r7, #3]
 801846c:	4613      	mov	r3, r2
 801846e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018476:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018478:	78fb      	ldrb	r3, [r7, #3]
 801847a:	68fa      	ldr	r2, [r7, #12]
 801847c:	212c      	movs	r1, #44	; 0x2c
 801847e:	fb01 f303 	mul.w	r3, r1, r3
 8018482:	4413      	add	r3, r2
 8018484:	333b      	adds	r3, #59	; 0x3b
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d009      	beq.n	80184a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801848c:	78fb      	ldrb	r3, [r7, #3]
 801848e:	68fa      	ldr	r2, [r7, #12]
 8018490:	212c      	movs	r1, #44	; 0x2c
 8018492:	fb01 f303 	mul.w	r3, r1, r3
 8018496:	4413      	add	r3, r2
 8018498:	3354      	adds	r3, #84	; 0x54
 801849a:	78ba      	ldrb	r2, [r7, #2]
 801849c:	701a      	strb	r2, [r3, #0]
 801849e:	e008      	b.n	80184b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80184a0:	78fb      	ldrb	r3, [r7, #3]
 80184a2:	68fa      	ldr	r2, [r7, #12]
 80184a4:	212c      	movs	r1, #44	; 0x2c
 80184a6:	fb01 f303 	mul.w	r3, r1, r3
 80184aa:	4413      	add	r3, r2
 80184ac:	3355      	adds	r3, #85	; 0x55
 80184ae:	78ba      	ldrb	r2, [r7, #2]
 80184b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80184b2:	2300      	movs	r3, #0
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3714      	adds	r7, #20
 80184b8:	46bd      	mov	sp, r7
 80184ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184be:	4770      	bx	lr

080184c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b082      	sub	sp, #8
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7ed f89f 	bl	800560c <HAL_Delay>
}
 80184ce:	bf00      	nop
 80184d0:	3708      	adds	r7, #8
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
	...

080184d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80184d8:	b480      	push	{r7}
 80184da:	b085      	sub	sp, #20
 80184dc:	af00      	add	r7, sp, #0
 80184de:	4603      	mov	r3, r0
 80184e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80184e2:	2300      	movs	r3, #0
 80184e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80184e6:	79fb      	ldrb	r3, [r7, #7]
 80184e8:	2b03      	cmp	r3, #3
 80184ea:	d817      	bhi.n	801851c <USBH_Get_USB_Status+0x44>
 80184ec:	a201      	add	r2, pc, #4	; (adr r2, 80184f4 <USBH_Get_USB_Status+0x1c>)
 80184ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f2:	bf00      	nop
 80184f4:	08018505 	.word	0x08018505
 80184f8:	0801850b 	.word	0x0801850b
 80184fc:	08018511 	.word	0x08018511
 8018500:	08018517 	.word	0x08018517
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018504:	2300      	movs	r3, #0
 8018506:	73fb      	strb	r3, [r7, #15]
    break;
 8018508:	e00b      	b.n	8018522 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801850a:	2302      	movs	r3, #2
 801850c:	73fb      	strb	r3, [r7, #15]
    break;
 801850e:	e008      	b.n	8018522 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018510:	2301      	movs	r3, #1
 8018512:	73fb      	strb	r3, [r7, #15]
    break;
 8018514:	e005      	b.n	8018522 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018516:	2302      	movs	r3, #2
 8018518:	73fb      	strb	r3, [r7, #15]
    break;
 801851a:	e002      	b.n	8018522 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801851c:	2302      	movs	r3, #2
 801851e:	73fb      	strb	r3, [r7, #15]
    break;
 8018520:	bf00      	nop
  }
  return usb_status;
 8018522:	7bfb      	ldrb	r3, [r7, #15]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3714      	adds	r7, #20
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr

08018530 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	4603      	mov	r3, r0
 8018538:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801853a:	79fb      	ldrb	r3, [r7, #7]
 801853c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801853e:	79fb      	ldrb	r3, [r7, #7]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d102      	bne.n	801854a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8018544:	2300      	movs	r3, #0
 8018546:	73fb      	strb	r3, [r7, #15]
 8018548:	e001      	b.n	801854e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801854a:	2301      	movs	r3, #1
 801854c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 801854e:	7bfb      	ldrb	r3, [r7, #15]
 8018550:	461a      	mov	r2, r3
 8018552:	2104      	movs	r1, #4
 8018554:	4803      	ldr	r0, [pc, #12]	; (8018564 <MX_DriverVbusFS+0x34>)
 8018556:	f7ee f975 	bl	8006844 <HAL_GPIO_WritePin>
}
 801855a:	bf00      	nop
 801855c:	3710      	adds	r7, #16
 801855e:	46bd      	mov	sp, r7
 8018560:	bd80      	pop	{r7, pc}
 8018562:	bf00      	nop
 8018564:	40022000 	.word	0x40022000

08018568 <atoi>:
 8018568:	220a      	movs	r2, #10
 801856a:	2100      	movs	r1, #0
 801856c:	f000 bebc 	b.w	80192e8 <strtol>

08018570 <atol>:
 8018570:	220a      	movs	r2, #10
 8018572:	2100      	movs	r1, #0
 8018574:	f000 beb8 	b.w	80192e8 <strtol>

08018578 <__errno>:
 8018578:	4b01      	ldr	r3, [pc, #4]	; (8018580 <__errno+0x8>)
 801857a:	6818      	ldr	r0, [r3, #0]
 801857c:	4770      	bx	lr
 801857e:	bf00      	nop
 8018580:	20000130 	.word	0x20000130

08018584 <__libc_init_array>:
 8018584:	b570      	push	{r4, r5, r6, lr}
 8018586:	4d0d      	ldr	r5, [pc, #52]	; (80185bc <__libc_init_array+0x38>)
 8018588:	4c0d      	ldr	r4, [pc, #52]	; (80185c0 <__libc_init_array+0x3c>)
 801858a:	1b64      	subs	r4, r4, r5
 801858c:	10a4      	asrs	r4, r4, #2
 801858e:	2600      	movs	r6, #0
 8018590:	42a6      	cmp	r6, r4
 8018592:	d109      	bne.n	80185a8 <__libc_init_array+0x24>
 8018594:	4d0b      	ldr	r5, [pc, #44]	; (80185c4 <__libc_init_array+0x40>)
 8018596:	4c0c      	ldr	r4, [pc, #48]	; (80185c8 <__libc_init_array+0x44>)
 8018598:	f003 f802 	bl	801b5a0 <_init>
 801859c:	1b64      	subs	r4, r4, r5
 801859e:	10a4      	asrs	r4, r4, #2
 80185a0:	2600      	movs	r6, #0
 80185a2:	42a6      	cmp	r6, r4
 80185a4:	d105      	bne.n	80185b2 <__libc_init_array+0x2e>
 80185a6:	bd70      	pop	{r4, r5, r6, pc}
 80185a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80185ac:	4798      	blx	r3
 80185ae:	3601      	adds	r6, #1
 80185b0:	e7ee      	b.n	8018590 <__libc_init_array+0xc>
 80185b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80185b6:	4798      	blx	r3
 80185b8:	3601      	adds	r6, #1
 80185ba:	e7f2      	b.n	80185a2 <__libc_init_array+0x1e>
 80185bc:	0801c6b4 	.word	0x0801c6b4
 80185c0:	0801c6b4 	.word	0x0801c6b4
 80185c4:	0801c6b4 	.word	0x0801c6b4
 80185c8:	0801c6b8 	.word	0x0801c6b8

080185cc <malloc>:
 80185cc:	4b02      	ldr	r3, [pc, #8]	; (80185d8 <malloc+0xc>)
 80185ce:	4601      	mov	r1, r0
 80185d0:	6818      	ldr	r0, [r3, #0]
 80185d2:	f000 b89d 	b.w	8018710 <_malloc_r>
 80185d6:	bf00      	nop
 80185d8:	20000130 	.word	0x20000130

080185dc <free>:
 80185dc:	4b02      	ldr	r3, [pc, #8]	; (80185e8 <free+0xc>)
 80185de:	4601      	mov	r1, r0
 80185e0:	6818      	ldr	r0, [r3, #0]
 80185e2:	f000 b829 	b.w	8018638 <_free_r>
 80185e6:	bf00      	nop
 80185e8:	20000130 	.word	0x20000130

080185ec <memcmp>:
 80185ec:	b510      	push	{r4, lr}
 80185ee:	3901      	subs	r1, #1
 80185f0:	4402      	add	r2, r0
 80185f2:	4290      	cmp	r0, r2
 80185f4:	d101      	bne.n	80185fa <memcmp+0xe>
 80185f6:	2000      	movs	r0, #0
 80185f8:	e005      	b.n	8018606 <memcmp+0x1a>
 80185fa:	7803      	ldrb	r3, [r0, #0]
 80185fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018600:	42a3      	cmp	r3, r4
 8018602:	d001      	beq.n	8018608 <memcmp+0x1c>
 8018604:	1b18      	subs	r0, r3, r4
 8018606:	bd10      	pop	{r4, pc}
 8018608:	3001      	adds	r0, #1
 801860a:	e7f2      	b.n	80185f2 <memcmp+0x6>

0801860c <memcpy>:
 801860c:	440a      	add	r2, r1
 801860e:	4291      	cmp	r1, r2
 8018610:	f100 33ff 	add.w	r3, r0, #4294967295
 8018614:	d100      	bne.n	8018618 <memcpy+0xc>
 8018616:	4770      	bx	lr
 8018618:	b510      	push	{r4, lr}
 801861a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801861e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018622:	4291      	cmp	r1, r2
 8018624:	d1f9      	bne.n	801861a <memcpy+0xe>
 8018626:	bd10      	pop	{r4, pc}

08018628 <memset>:
 8018628:	4402      	add	r2, r0
 801862a:	4603      	mov	r3, r0
 801862c:	4293      	cmp	r3, r2
 801862e:	d100      	bne.n	8018632 <memset+0xa>
 8018630:	4770      	bx	lr
 8018632:	f803 1b01 	strb.w	r1, [r3], #1
 8018636:	e7f9      	b.n	801862c <memset+0x4>

08018638 <_free_r>:
 8018638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801863a:	2900      	cmp	r1, #0
 801863c:	d044      	beq.n	80186c8 <_free_r+0x90>
 801863e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018642:	9001      	str	r0, [sp, #4]
 8018644:	2b00      	cmp	r3, #0
 8018646:	f1a1 0404 	sub.w	r4, r1, #4
 801864a:	bfb8      	it	lt
 801864c:	18e4      	addlt	r4, r4, r3
 801864e:	f001 fd03 	bl	801a058 <__malloc_lock>
 8018652:	4a1e      	ldr	r2, [pc, #120]	; (80186cc <_free_r+0x94>)
 8018654:	9801      	ldr	r0, [sp, #4]
 8018656:	6813      	ldr	r3, [r2, #0]
 8018658:	b933      	cbnz	r3, 8018668 <_free_r+0x30>
 801865a:	6063      	str	r3, [r4, #4]
 801865c:	6014      	str	r4, [r2, #0]
 801865e:	b003      	add	sp, #12
 8018660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018664:	f001 bcfe 	b.w	801a064 <__malloc_unlock>
 8018668:	42a3      	cmp	r3, r4
 801866a:	d908      	bls.n	801867e <_free_r+0x46>
 801866c:	6825      	ldr	r5, [r4, #0]
 801866e:	1961      	adds	r1, r4, r5
 8018670:	428b      	cmp	r3, r1
 8018672:	bf01      	itttt	eq
 8018674:	6819      	ldreq	r1, [r3, #0]
 8018676:	685b      	ldreq	r3, [r3, #4]
 8018678:	1949      	addeq	r1, r1, r5
 801867a:	6021      	streq	r1, [r4, #0]
 801867c:	e7ed      	b.n	801865a <_free_r+0x22>
 801867e:	461a      	mov	r2, r3
 8018680:	685b      	ldr	r3, [r3, #4]
 8018682:	b10b      	cbz	r3, 8018688 <_free_r+0x50>
 8018684:	42a3      	cmp	r3, r4
 8018686:	d9fa      	bls.n	801867e <_free_r+0x46>
 8018688:	6811      	ldr	r1, [r2, #0]
 801868a:	1855      	adds	r5, r2, r1
 801868c:	42a5      	cmp	r5, r4
 801868e:	d10b      	bne.n	80186a8 <_free_r+0x70>
 8018690:	6824      	ldr	r4, [r4, #0]
 8018692:	4421      	add	r1, r4
 8018694:	1854      	adds	r4, r2, r1
 8018696:	42a3      	cmp	r3, r4
 8018698:	6011      	str	r1, [r2, #0]
 801869a:	d1e0      	bne.n	801865e <_free_r+0x26>
 801869c:	681c      	ldr	r4, [r3, #0]
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	6053      	str	r3, [r2, #4]
 80186a2:	4421      	add	r1, r4
 80186a4:	6011      	str	r1, [r2, #0]
 80186a6:	e7da      	b.n	801865e <_free_r+0x26>
 80186a8:	d902      	bls.n	80186b0 <_free_r+0x78>
 80186aa:	230c      	movs	r3, #12
 80186ac:	6003      	str	r3, [r0, #0]
 80186ae:	e7d6      	b.n	801865e <_free_r+0x26>
 80186b0:	6825      	ldr	r5, [r4, #0]
 80186b2:	1961      	adds	r1, r4, r5
 80186b4:	428b      	cmp	r3, r1
 80186b6:	bf04      	itt	eq
 80186b8:	6819      	ldreq	r1, [r3, #0]
 80186ba:	685b      	ldreq	r3, [r3, #4]
 80186bc:	6063      	str	r3, [r4, #4]
 80186be:	bf04      	itt	eq
 80186c0:	1949      	addeq	r1, r1, r5
 80186c2:	6021      	streq	r1, [r4, #0]
 80186c4:	6054      	str	r4, [r2, #4]
 80186c6:	e7ca      	b.n	801865e <_free_r+0x26>
 80186c8:	b003      	add	sp, #12
 80186ca:	bd30      	pop	{r4, r5, pc}
 80186cc:	20003064 	.word	0x20003064

080186d0 <sbrk_aligned>:
 80186d0:	b570      	push	{r4, r5, r6, lr}
 80186d2:	4e0e      	ldr	r6, [pc, #56]	; (801870c <sbrk_aligned+0x3c>)
 80186d4:	460c      	mov	r4, r1
 80186d6:	6831      	ldr	r1, [r6, #0]
 80186d8:	4605      	mov	r5, r0
 80186da:	b911      	cbnz	r1, 80186e2 <sbrk_aligned+0x12>
 80186dc:	f000 fcf6 	bl	80190cc <_sbrk_r>
 80186e0:	6030      	str	r0, [r6, #0]
 80186e2:	4621      	mov	r1, r4
 80186e4:	4628      	mov	r0, r5
 80186e6:	f000 fcf1 	bl	80190cc <_sbrk_r>
 80186ea:	1c43      	adds	r3, r0, #1
 80186ec:	d00a      	beq.n	8018704 <sbrk_aligned+0x34>
 80186ee:	1cc4      	adds	r4, r0, #3
 80186f0:	f024 0403 	bic.w	r4, r4, #3
 80186f4:	42a0      	cmp	r0, r4
 80186f6:	d007      	beq.n	8018708 <sbrk_aligned+0x38>
 80186f8:	1a21      	subs	r1, r4, r0
 80186fa:	4628      	mov	r0, r5
 80186fc:	f000 fce6 	bl	80190cc <_sbrk_r>
 8018700:	3001      	adds	r0, #1
 8018702:	d101      	bne.n	8018708 <sbrk_aligned+0x38>
 8018704:	f04f 34ff 	mov.w	r4, #4294967295
 8018708:	4620      	mov	r0, r4
 801870a:	bd70      	pop	{r4, r5, r6, pc}
 801870c:	20003068 	.word	0x20003068

08018710 <_malloc_r>:
 8018710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018714:	1ccd      	adds	r5, r1, #3
 8018716:	f025 0503 	bic.w	r5, r5, #3
 801871a:	3508      	adds	r5, #8
 801871c:	2d0c      	cmp	r5, #12
 801871e:	bf38      	it	cc
 8018720:	250c      	movcc	r5, #12
 8018722:	2d00      	cmp	r5, #0
 8018724:	4607      	mov	r7, r0
 8018726:	db01      	blt.n	801872c <_malloc_r+0x1c>
 8018728:	42a9      	cmp	r1, r5
 801872a:	d905      	bls.n	8018738 <_malloc_r+0x28>
 801872c:	230c      	movs	r3, #12
 801872e:	603b      	str	r3, [r7, #0]
 8018730:	2600      	movs	r6, #0
 8018732:	4630      	mov	r0, r6
 8018734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018738:	4e2e      	ldr	r6, [pc, #184]	; (80187f4 <_malloc_r+0xe4>)
 801873a:	f001 fc8d 	bl	801a058 <__malloc_lock>
 801873e:	6833      	ldr	r3, [r6, #0]
 8018740:	461c      	mov	r4, r3
 8018742:	bb34      	cbnz	r4, 8018792 <_malloc_r+0x82>
 8018744:	4629      	mov	r1, r5
 8018746:	4638      	mov	r0, r7
 8018748:	f7ff ffc2 	bl	80186d0 <sbrk_aligned>
 801874c:	1c43      	adds	r3, r0, #1
 801874e:	4604      	mov	r4, r0
 8018750:	d14d      	bne.n	80187ee <_malloc_r+0xde>
 8018752:	6834      	ldr	r4, [r6, #0]
 8018754:	4626      	mov	r6, r4
 8018756:	2e00      	cmp	r6, #0
 8018758:	d140      	bne.n	80187dc <_malloc_r+0xcc>
 801875a:	6823      	ldr	r3, [r4, #0]
 801875c:	4631      	mov	r1, r6
 801875e:	4638      	mov	r0, r7
 8018760:	eb04 0803 	add.w	r8, r4, r3
 8018764:	f000 fcb2 	bl	80190cc <_sbrk_r>
 8018768:	4580      	cmp	r8, r0
 801876a:	d13a      	bne.n	80187e2 <_malloc_r+0xd2>
 801876c:	6821      	ldr	r1, [r4, #0]
 801876e:	3503      	adds	r5, #3
 8018770:	1a6d      	subs	r5, r5, r1
 8018772:	f025 0503 	bic.w	r5, r5, #3
 8018776:	3508      	adds	r5, #8
 8018778:	2d0c      	cmp	r5, #12
 801877a:	bf38      	it	cc
 801877c:	250c      	movcc	r5, #12
 801877e:	4629      	mov	r1, r5
 8018780:	4638      	mov	r0, r7
 8018782:	f7ff ffa5 	bl	80186d0 <sbrk_aligned>
 8018786:	3001      	adds	r0, #1
 8018788:	d02b      	beq.n	80187e2 <_malloc_r+0xd2>
 801878a:	6823      	ldr	r3, [r4, #0]
 801878c:	442b      	add	r3, r5
 801878e:	6023      	str	r3, [r4, #0]
 8018790:	e00e      	b.n	80187b0 <_malloc_r+0xa0>
 8018792:	6822      	ldr	r2, [r4, #0]
 8018794:	1b52      	subs	r2, r2, r5
 8018796:	d41e      	bmi.n	80187d6 <_malloc_r+0xc6>
 8018798:	2a0b      	cmp	r2, #11
 801879a:	d916      	bls.n	80187ca <_malloc_r+0xba>
 801879c:	1961      	adds	r1, r4, r5
 801879e:	42a3      	cmp	r3, r4
 80187a0:	6025      	str	r5, [r4, #0]
 80187a2:	bf18      	it	ne
 80187a4:	6059      	strne	r1, [r3, #4]
 80187a6:	6863      	ldr	r3, [r4, #4]
 80187a8:	bf08      	it	eq
 80187aa:	6031      	streq	r1, [r6, #0]
 80187ac:	5162      	str	r2, [r4, r5]
 80187ae:	604b      	str	r3, [r1, #4]
 80187b0:	4638      	mov	r0, r7
 80187b2:	f104 060b 	add.w	r6, r4, #11
 80187b6:	f001 fc55 	bl	801a064 <__malloc_unlock>
 80187ba:	f026 0607 	bic.w	r6, r6, #7
 80187be:	1d23      	adds	r3, r4, #4
 80187c0:	1af2      	subs	r2, r6, r3
 80187c2:	d0b6      	beq.n	8018732 <_malloc_r+0x22>
 80187c4:	1b9b      	subs	r3, r3, r6
 80187c6:	50a3      	str	r3, [r4, r2]
 80187c8:	e7b3      	b.n	8018732 <_malloc_r+0x22>
 80187ca:	6862      	ldr	r2, [r4, #4]
 80187cc:	42a3      	cmp	r3, r4
 80187ce:	bf0c      	ite	eq
 80187d0:	6032      	streq	r2, [r6, #0]
 80187d2:	605a      	strne	r2, [r3, #4]
 80187d4:	e7ec      	b.n	80187b0 <_malloc_r+0xa0>
 80187d6:	4623      	mov	r3, r4
 80187d8:	6864      	ldr	r4, [r4, #4]
 80187da:	e7b2      	b.n	8018742 <_malloc_r+0x32>
 80187dc:	4634      	mov	r4, r6
 80187de:	6876      	ldr	r6, [r6, #4]
 80187e0:	e7b9      	b.n	8018756 <_malloc_r+0x46>
 80187e2:	230c      	movs	r3, #12
 80187e4:	603b      	str	r3, [r7, #0]
 80187e6:	4638      	mov	r0, r7
 80187e8:	f001 fc3c 	bl	801a064 <__malloc_unlock>
 80187ec:	e7a1      	b.n	8018732 <_malloc_r+0x22>
 80187ee:	6025      	str	r5, [r4, #0]
 80187f0:	e7de      	b.n	80187b0 <_malloc_r+0xa0>
 80187f2:	bf00      	nop
 80187f4:	20003064 	.word	0x20003064

080187f8 <__cvt>:
 80187f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80187fc:	ec55 4b10 	vmov	r4, r5, d0
 8018800:	2d00      	cmp	r5, #0
 8018802:	460e      	mov	r6, r1
 8018804:	4619      	mov	r1, r3
 8018806:	462b      	mov	r3, r5
 8018808:	bfbb      	ittet	lt
 801880a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801880e:	461d      	movlt	r5, r3
 8018810:	2300      	movge	r3, #0
 8018812:	232d      	movlt	r3, #45	; 0x2d
 8018814:	700b      	strb	r3, [r1, #0]
 8018816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801881c:	4691      	mov	r9, r2
 801881e:	f023 0820 	bic.w	r8, r3, #32
 8018822:	bfbc      	itt	lt
 8018824:	4622      	movlt	r2, r4
 8018826:	4614      	movlt	r4, r2
 8018828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801882c:	d005      	beq.n	801883a <__cvt+0x42>
 801882e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018832:	d100      	bne.n	8018836 <__cvt+0x3e>
 8018834:	3601      	adds	r6, #1
 8018836:	2102      	movs	r1, #2
 8018838:	e000      	b.n	801883c <__cvt+0x44>
 801883a:	2103      	movs	r1, #3
 801883c:	ab03      	add	r3, sp, #12
 801883e:	9301      	str	r3, [sp, #4]
 8018840:	ab02      	add	r3, sp, #8
 8018842:	9300      	str	r3, [sp, #0]
 8018844:	ec45 4b10 	vmov	d0, r4, r5
 8018848:	4653      	mov	r3, sl
 801884a:	4632      	mov	r2, r6
 801884c:	f000 fe00 	bl	8019450 <_dtoa_r>
 8018850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018854:	4607      	mov	r7, r0
 8018856:	d102      	bne.n	801885e <__cvt+0x66>
 8018858:	f019 0f01 	tst.w	r9, #1
 801885c:	d022      	beq.n	80188a4 <__cvt+0xac>
 801885e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018862:	eb07 0906 	add.w	r9, r7, r6
 8018866:	d110      	bne.n	801888a <__cvt+0x92>
 8018868:	783b      	ldrb	r3, [r7, #0]
 801886a:	2b30      	cmp	r3, #48	; 0x30
 801886c:	d10a      	bne.n	8018884 <__cvt+0x8c>
 801886e:	2200      	movs	r2, #0
 8018870:	2300      	movs	r3, #0
 8018872:	4620      	mov	r0, r4
 8018874:	4629      	mov	r1, r5
 8018876:	f7e8 f947 	bl	8000b08 <__aeabi_dcmpeq>
 801887a:	b918      	cbnz	r0, 8018884 <__cvt+0x8c>
 801887c:	f1c6 0601 	rsb	r6, r6, #1
 8018880:	f8ca 6000 	str.w	r6, [sl]
 8018884:	f8da 3000 	ldr.w	r3, [sl]
 8018888:	4499      	add	r9, r3
 801888a:	2200      	movs	r2, #0
 801888c:	2300      	movs	r3, #0
 801888e:	4620      	mov	r0, r4
 8018890:	4629      	mov	r1, r5
 8018892:	f7e8 f939 	bl	8000b08 <__aeabi_dcmpeq>
 8018896:	b108      	cbz	r0, 801889c <__cvt+0xa4>
 8018898:	f8cd 900c 	str.w	r9, [sp, #12]
 801889c:	2230      	movs	r2, #48	; 0x30
 801889e:	9b03      	ldr	r3, [sp, #12]
 80188a0:	454b      	cmp	r3, r9
 80188a2:	d307      	bcc.n	80188b4 <__cvt+0xbc>
 80188a4:	9b03      	ldr	r3, [sp, #12]
 80188a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188a8:	1bdb      	subs	r3, r3, r7
 80188aa:	4638      	mov	r0, r7
 80188ac:	6013      	str	r3, [r2, #0]
 80188ae:	b004      	add	sp, #16
 80188b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188b4:	1c59      	adds	r1, r3, #1
 80188b6:	9103      	str	r1, [sp, #12]
 80188b8:	701a      	strb	r2, [r3, #0]
 80188ba:	e7f0      	b.n	801889e <__cvt+0xa6>

080188bc <__exponent>:
 80188bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188be:	4603      	mov	r3, r0
 80188c0:	2900      	cmp	r1, #0
 80188c2:	bfb8      	it	lt
 80188c4:	4249      	neglt	r1, r1
 80188c6:	f803 2b02 	strb.w	r2, [r3], #2
 80188ca:	bfb4      	ite	lt
 80188cc:	222d      	movlt	r2, #45	; 0x2d
 80188ce:	222b      	movge	r2, #43	; 0x2b
 80188d0:	2909      	cmp	r1, #9
 80188d2:	7042      	strb	r2, [r0, #1]
 80188d4:	dd2a      	ble.n	801892c <__exponent+0x70>
 80188d6:	f10d 0407 	add.w	r4, sp, #7
 80188da:	46a4      	mov	ip, r4
 80188dc:	270a      	movs	r7, #10
 80188de:	46a6      	mov	lr, r4
 80188e0:	460a      	mov	r2, r1
 80188e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80188e6:	fb07 1516 	mls	r5, r7, r6, r1
 80188ea:	3530      	adds	r5, #48	; 0x30
 80188ec:	2a63      	cmp	r2, #99	; 0x63
 80188ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80188f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80188f6:	4631      	mov	r1, r6
 80188f8:	dcf1      	bgt.n	80188de <__exponent+0x22>
 80188fa:	3130      	adds	r1, #48	; 0x30
 80188fc:	f1ae 0502 	sub.w	r5, lr, #2
 8018900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018904:	1c44      	adds	r4, r0, #1
 8018906:	4629      	mov	r1, r5
 8018908:	4561      	cmp	r1, ip
 801890a:	d30a      	bcc.n	8018922 <__exponent+0x66>
 801890c:	f10d 0209 	add.w	r2, sp, #9
 8018910:	eba2 020e 	sub.w	r2, r2, lr
 8018914:	4565      	cmp	r5, ip
 8018916:	bf88      	it	hi
 8018918:	2200      	movhi	r2, #0
 801891a:	4413      	add	r3, r2
 801891c:	1a18      	subs	r0, r3, r0
 801891e:	b003      	add	sp, #12
 8018920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018926:	f804 2f01 	strb.w	r2, [r4, #1]!
 801892a:	e7ed      	b.n	8018908 <__exponent+0x4c>
 801892c:	2330      	movs	r3, #48	; 0x30
 801892e:	3130      	adds	r1, #48	; 0x30
 8018930:	7083      	strb	r3, [r0, #2]
 8018932:	70c1      	strb	r1, [r0, #3]
 8018934:	1d03      	adds	r3, r0, #4
 8018936:	e7f1      	b.n	801891c <__exponent+0x60>

08018938 <_printf_float>:
 8018938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801893c:	ed2d 8b02 	vpush	{d8}
 8018940:	b08d      	sub	sp, #52	; 0x34
 8018942:	460c      	mov	r4, r1
 8018944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018948:	4616      	mov	r6, r2
 801894a:	461f      	mov	r7, r3
 801894c:	4605      	mov	r5, r0
 801894e:	f001 fb7f 	bl	801a050 <_localeconv_r>
 8018952:	f8d0 a000 	ldr.w	sl, [r0]
 8018956:	4650      	mov	r0, sl
 8018958:	f7e7 fc5a 	bl	8000210 <strlen>
 801895c:	2300      	movs	r3, #0
 801895e:	930a      	str	r3, [sp, #40]	; 0x28
 8018960:	6823      	ldr	r3, [r4, #0]
 8018962:	9305      	str	r3, [sp, #20]
 8018964:	f8d8 3000 	ldr.w	r3, [r8]
 8018968:	f894 b018 	ldrb.w	fp, [r4, #24]
 801896c:	3307      	adds	r3, #7
 801896e:	f023 0307 	bic.w	r3, r3, #7
 8018972:	f103 0208 	add.w	r2, r3, #8
 8018976:	f8c8 2000 	str.w	r2, [r8]
 801897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801898a:	9307      	str	r3, [sp, #28]
 801898c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018990:	ee08 0a10 	vmov	s16, r0
 8018994:	4b9f      	ldr	r3, [pc, #636]	; (8018c14 <_printf_float+0x2dc>)
 8018996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801899a:	f04f 32ff 	mov.w	r2, #4294967295
 801899e:	f7e8 f8e5 	bl	8000b6c <__aeabi_dcmpun>
 80189a2:	bb88      	cbnz	r0, 8018a08 <_printf_float+0xd0>
 80189a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80189a8:	4b9a      	ldr	r3, [pc, #616]	; (8018c14 <_printf_float+0x2dc>)
 80189aa:	f04f 32ff 	mov.w	r2, #4294967295
 80189ae:	f7e8 f8bf 	bl	8000b30 <__aeabi_dcmple>
 80189b2:	bb48      	cbnz	r0, 8018a08 <_printf_float+0xd0>
 80189b4:	2200      	movs	r2, #0
 80189b6:	2300      	movs	r3, #0
 80189b8:	4640      	mov	r0, r8
 80189ba:	4649      	mov	r1, r9
 80189bc:	f7e8 f8ae 	bl	8000b1c <__aeabi_dcmplt>
 80189c0:	b110      	cbz	r0, 80189c8 <_printf_float+0x90>
 80189c2:	232d      	movs	r3, #45	; 0x2d
 80189c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189c8:	4b93      	ldr	r3, [pc, #588]	; (8018c18 <_printf_float+0x2e0>)
 80189ca:	4894      	ldr	r0, [pc, #592]	; (8018c1c <_printf_float+0x2e4>)
 80189cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80189d0:	bf94      	ite	ls
 80189d2:	4698      	movls	r8, r3
 80189d4:	4680      	movhi	r8, r0
 80189d6:	2303      	movs	r3, #3
 80189d8:	6123      	str	r3, [r4, #16]
 80189da:	9b05      	ldr	r3, [sp, #20]
 80189dc:	f023 0204 	bic.w	r2, r3, #4
 80189e0:	6022      	str	r2, [r4, #0]
 80189e2:	f04f 0900 	mov.w	r9, #0
 80189e6:	9700      	str	r7, [sp, #0]
 80189e8:	4633      	mov	r3, r6
 80189ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80189ec:	4621      	mov	r1, r4
 80189ee:	4628      	mov	r0, r5
 80189f0:	f000 f9d8 	bl	8018da4 <_printf_common>
 80189f4:	3001      	adds	r0, #1
 80189f6:	f040 8090 	bne.w	8018b1a <_printf_float+0x1e2>
 80189fa:	f04f 30ff 	mov.w	r0, #4294967295
 80189fe:	b00d      	add	sp, #52	; 0x34
 8018a00:	ecbd 8b02 	vpop	{d8}
 8018a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a08:	4642      	mov	r2, r8
 8018a0a:	464b      	mov	r3, r9
 8018a0c:	4640      	mov	r0, r8
 8018a0e:	4649      	mov	r1, r9
 8018a10:	f7e8 f8ac 	bl	8000b6c <__aeabi_dcmpun>
 8018a14:	b140      	cbz	r0, 8018a28 <_printf_float+0xf0>
 8018a16:	464b      	mov	r3, r9
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	bfbc      	itt	lt
 8018a1c:	232d      	movlt	r3, #45	; 0x2d
 8018a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018a22:	487f      	ldr	r0, [pc, #508]	; (8018c20 <_printf_float+0x2e8>)
 8018a24:	4b7f      	ldr	r3, [pc, #508]	; (8018c24 <_printf_float+0x2ec>)
 8018a26:	e7d1      	b.n	80189cc <_printf_float+0x94>
 8018a28:	6863      	ldr	r3, [r4, #4]
 8018a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018a2e:	9206      	str	r2, [sp, #24]
 8018a30:	1c5a      	adds	r2, r3, #1
 8018a32:	d13f      	bne.n	8018ab4 <_printf_float+0x17c>
 8018a34:	2306      	movs	r3, #6
 8018a36:	6063      	str	r3, [r4, #4]
 8018a38:	9b05      	ldr	r3, [sp, #20]
 8018a3a:	6861      	ldr	r1, [r4, #4]
 8018a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018a40:	2300      	movs	r3, #0
 8018a42:	9303      	str	r3, [sp, #12]
 8018a44:	ab0a      	add	r3, sp, #40	; 0x28
 8018a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018a4a:	ab09      	add	r3, sp, #36	; 0x24
 8018a4c:	ec49 8b10 	vmov	d0, r8, r9
 8018a50:	9300      	str	r3, [sp, #0]
 8018a52:	6022      	str	r2, [r4, #0]
 8018a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018a58:	4628      	mov	r0, r5
 8018a5a:	f7ff fecd 	bl	80187f8 <__cvt>
 8018a5e:	9b06      	ldr	r3, [sp, #24]
 8018a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a62:	2b47      	cmp	r3, #71	; 0x47
 8018a64:	4680      	mov	r8, r0
 8018a66:	d108      	bne.n	8018a7a <_printf_float+0x142>
 8018a68:	1cc8      	adds	r0, r1, #3
 8018a6a:	db02      	blt.n	8018a72 <_printf_float+0x13a>
 8018a6c:	6863      	ldr	r3, [r4, #4]
 8018a6e:	4299      	cmp	r1, r3
 8018a70:	dd41      	ble.n	8018af6 <_printf_float+0x1be>
 8018a72:	f1ab 0b02 	sub.w	fp, fp, #2
 8018a76:	fa5f fb8b 	uxtb.w	fp, fp
 8018a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018a7e:	d820      	bhi.n	8018ac2 <_printf_float+0x18a>
 8018a80:	3901      	subs	r1, #1
 8018a82:	465a      	mov	r2, fp
 8018a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018a88:	9109      	str	r1, [sp, #36]	; 0x24
 8018a8a:	f7ff ff17 	bl	80188bc <__exponent>
 8018a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a90:	1813      	adds	r3, r2, r0
 8018a92:	2a01      	cmp	r2, #1
 8018a94:	4681      	mov	r9, r0
 8018a96:	6123      	str	r3, [r4, #16]
 8018a98:	dc02      	bgt.n	8018aa0 <_printf_float+0x168>
 8018a9a:	6822      	ldr	r2, [r4, #0]
 8018a9c:	07d2      	lsls	r2, r2, #31
 8018a9e:	d501      	bpl.n	8018aa4 <_printf_float+0x16c>
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	6123      	str	r3, [r4, #16]
 8018aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d09c      	beq.n	80189e6 <_printf_float+0xae>
 8018aac:	232d      	movs	r3, #45	; 0x2d
 8018aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ab2:	e798      	b.n	80189e6 <_printf_float+0xae>
 8018ab4:	9a06      	ldr	r2, [sp, #24]
 8018ab6:	2a47      	cmp	r2, #71	; 0x47
 8018ab8:	d1be      	bne.n	8018a38 <_printf_float+0x100>
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d1bc      	bne.n	8018a38 <_printf_float+0x100>
 8018abe:	2301      	movs	r3, #1
 8018ac0:	e7b9      	b.n	8018a36 <_printf_float+0xfe>
 8018ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018ac6:	d118      	bne.n	8018afa <_printf_float+0x1c2>
 8018ac8:	2900      	cmp	r1, #0
 8018aca:	6863      	ldr	r3, [r4, #4]
 8018acc:	dd0b      	ble.n	8018ae6 <_printf_float+0x1ae>
 8018ace:	6121      	str	r1, [r4, #16]
 8018ad0:	b913      	cbnz	r3, 8018ad8 <_printf_float+0x1a0>
 8018ad2:	6822      	ldr	r2, [r4, #0]
 8018ad4:	07d0      	lsls	r0, r2, #31
 8018ad6:	d502      	bpl.n	8018ade <_printf_float+0x1a6>
 8018ad8:	3301      	adds	r3, #1
 8018ada:	440b      	add	r3, r1
 8018adc:	6123      	str	r3, [r4, #16]
 8018ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8018ae0:	f04f 0900 	mov.w	r9, #0
 8018ae4:	e7de      	b.n	8018aa4 <_printf_float+0x16c>
 8018ae6:	b913      	cbnz	r3, 8018aee <_printf_float+0x1b6>
 8018ae8:	6822      	ldr	r2, [r4, #0]
 8018aea:	07d2      	lsls	r2, r2, #31
 8018aec:	d501      	bpl.n	8018af2 <_printf_float+0x1ba>
 8018aee:	3302      	adds	r3, #2
 8018af0:	e7f4      	b.n	8018adc <_printf_float+0x1a4>
 8018af2:	2301      	movs	r3, #1
 8018af4:	e7f2      	b.n	8018adc <_printf_float+0x1a4>
 8018af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8018afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018afc:	4299      	cmp	r1, r3
 8018afe:	db05      	blt.n	8018b0c <_printf_float+0x1d4>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	6121      	str	r1, [r4, #16]
 8018b04:	07d8      	lsls	r0, r3, #31
 8018b06:	d5ea      	bpl.n	8018ade <_printf_float+0x1a6>
 8018b08:	1c4b      	adds	r3, r1, #1
 8018b0a:	e7e7      	b.n	8018adc <_printf_float+0x1a4>
 8018b0c:	2900      	cmp	r1, #0
 8018b0e:	bfd4      	ite	le
 8018b10:	f1c1 0202 	rsble	r2, r1, #2
 8018b14:	2201      	movgt	r2, #1
 8018b16:	4413      	add	r3, r2
 8018b18:	e7e0      	b.n	8018adc <_printf_float+0x1a4>
 8018b1a:	6823      	ldr	r3, [r4, #0]
 8018b1c:	055a      	lsls	r2, r3, #21
 8018b1e:	d407      	bmi.n	8018b30 <_printf_float+0x1f8>
 8018b20:	6923      	ldr	r3, [r4, #16]
 8018b22:	4642      	mov	r2, r8
 8018b24:	4631      	mov	r1, r6
 8018b26:	4628      	mov	r0, r5
 8018b28:	47b8      	blx	r7
 8018b2a:	3001      	adds	r0, #1
 8018b2c:	d12c      	bne.n	8018b88 <_printf_float+0x250>
 8018b2e:	e764      	b.n	80189fa <_printf_float+0xc2>
 8018b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018b34:	f240 80e0 	bls.w	8018cf8 <_printf_float+0x3c0>
 8018b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f7e7 ffe2 	bl	8000b08 <__aeabi_dcmpeq>
 8018b44:	2800      	cmp	r0, #0
 8018b46:	d034      	beq.n	8018bb2 <_printf_float+0x27a>
 8018b48:	4a37      	ldr	r2, [pc, #220]	; (8018c28 <_printf_float+0x2f0>)
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	4631      	mov	r1, r6
 8018b4e:	4628      	mov	r0, r5
 8018b50:	47b8      	blx	r7
 8018b52:	3001      	adds	r0, #1
 8018b54:	f43f af51 	beq.w	80189fa <_printf_float+0xc2>
 8018b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	db02      	blt.n	8018b66 <_printf_float+0x22e>
 8018b60:	6823      	ldr	r3, [r4, #0]
 8018b62:	07d8      	lsls	r0, r3, #31
 8018b64:	d510      	bpl.n	8018b88 <_printf_float+0x250>
 8018b66:	ee18 3a10 	vmov	r3, s16
 8018b6a:	4652      	mov	r2, sl
 8018b6c:	4631      	mov	r1, r6
 8018b6e:	4628      	mov	r0, r5
 8018b70:	47b8      	blx	r7
 8018b72:	3001      	adds	r0, #1
 8018b74:	f43f af41 	beq.w	80189fa <_printf_float+0xc2>
 8018b78:	f04f 0800 	mov.w	r8, #0
 8018b7c:	f104 091a 	add.w	r9, r4, #26
 8018b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b82:	3b01      	subs	r3, #1
 8018b84:	4543      	cmp	r3, r8
 8018b86:	dc09      	bgt.n	8018b9c <_printf_float+0x264>
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	079b      	lsls	r3, r3, #30
 8018b8c:	f100 8105 	bmi.w	8018d9a <_printf_float+0x462>
 8018b90:	68e0      	ldr	r0, [r4, #12]
 8018b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b94:	4298      	cmp	r0, r3
 8018b96:	bfb8      	it	lt
 8018b98:	4618      	movlt	r0, r3
 8018b9a:	e730      	b.n	80189fe <_printf_float+0xc6>
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	464a      	mov	r2, r9
 8018ba0:	4631      	mov	r1, r6
 8018ba2:	4628      	mov	r0, r5
 8018ba4:	47b8      	blx	r7
 8018ba6:	3001      	adds	r0, #1
 8018ba8:	f43f af27 	beq.w	80189fa <_printf_float+0xc2>
 8018bac:	f108 0801 	add.w	r8, r8, #1
 8018bb0:	e7e6      	b.n	8018b80 <_printf_float+0x248>
 8018bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	dc39      	bgt.n	8018c2c <_printf_float+0x2f4>
 8018bb8:	4a1b      	ldr	r2, [pc, #108]	; (8018c28 <_printf_float+0x2f0>)
 8018bba:	2301      	movs	r3, #1
 8018bbc:	4631      	mov	r1, r6
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	47b8      	blx	r7
 8018bc2:	3001      	adds	r0, #1
 8018bc4:	f43f af19 	beq.w	80189fa <_printf_float+0xc2>
 8018bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018bcc:	4313      	orrs	r3, r2
 8018bce:	d102      	bne.n	8018bd6 <_printf_float+0x29e>
 8018bd0:	6823      	ldr	r3, [r4, #0]
 8018bd2:	07d9      	lsls	r1, r3, #31
 8018bd4:	d5d8      	bpl.n	8018b88 <_printf_float+0x250>
 8018bd6:	ee18 3a10 	vmov	r3, s16
 8018bda:	4652      	mov	r2, sl
 8018bdc:	4631      	mov	r1, r6
 8018bde:	4628      	mov	r0, r5
 8018be0:	47b8      	blx	r7
 8018be2:	3001      	adds	r0, #1
 8018be4:	f43f af09 	beq.w	80189fa <_printf_float+0xc2>
 8018be8:	f04f 0900 	mov.w	r9, #0
 8018bec:	f104 0a1a 	add.w	sl, r4, #26
 8018bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bf2:	425b      	negs	r3, r3
 8018bf4:	454b      	cmp	r3, r9
 8018bf6:	dc01      	bgt.n	8018bfc <_printf_float+0x2c4>
 8018bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bfa:	e792      	b.n	8018b22 <_printf_float+0x1ea>
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	4652      	mov	r2, sl
 8018c00:	4631      	mov	r1, r6
 8018c02:	4628      	mov	r0, r5
 8018c04:	47b8      	blx	r7
 8018c06:	3001      	adds	r0, #1
 8018c08:	f43f aef7 	beq.w	80189fa <_printf_float+0xc2>
 8018c0c:	f109 0901 	add.w	r9, r9, #1
 8018c10:	e7ee      	b.n	8018bf0 <_printf_float+0x2b8>
 8018c12:	bf00      	nop
 8018c14:	7fefffff 	.word	0x7fefffff
 8018c18:	0801c274 	.word	0x0801c274
 8018c1c:	0801c278 	.word	0x0801c278
 8018c20:	0801c280 	.word	0x0801c280
 8018c24:	0801c27c 	.word	0x0801c27c
 8018c28:	0801c284 	.word	0x0801c284
 8018c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018c30:	429a      	cmp	r2, r3
 8018c32:	bfa8      	it	ge
 8018c34:	461a      	movge	r2, r3
 8018c36:	2a00      	cmp	r2, #0
 8018c38:	4691      	mov	r9, r2
 8018c3a:	dc37      	bgt.n	8018cac <_printf_float+0x374>
 8018c3c:	f04f 0b00 	mov.w	fp, #0
 8018c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018c44:	f104 021a 	add.w	r2, r4, #26
 8018c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018c4a:	9305      	str	r3, [sp, #20]
 8018c4c:	eba3 0309 	sub.w	r3, r3, r9
 8018c50:	455b      	cmp	r3, fp
 8018c52:	dc33      	bgt.n	8018cbc <_printf_float+0x384>
 8018c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	db3b      	blt.n	8018cd4 <_printf_float+0x39c>
 8018c5c:	6823      	ldr	r3, [r4, #0]
 8018c5e:	07da      	lsls	r2, r3, #31
 8018c60:	d438      	bmi.n	8018cd4 <_printf_float+0x39c>
 8018c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c64:	9a05      	ldr	r2, [sp, #20]
 8018c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c68:	1a9a      	subs	r2, r3, r2
 8018c6a:	eba3 0901 	sub.w	r9, r3, r1
 8018c6e:	4591      	cmp	r9, r2
 8018c70:	bfa8      	it	ge
 8018c72:	4691      	movge	r9, r2
 8018c74:	f1b9 0f00 	cmp.w	r9, #0
 8018c78:	dc35      	bgt.n	8018ce6 <_printf_float+0x3ae>
 8018c7a:	f04f 0800 	mov.w	r8, #0
 8018c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018c82:	f104 0a1a 	add.w	sl, r4, #26
 8018c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018c8a:	1a9b      	subs	r3, r3, r2
 8018c8c:	eba3 0309 	sub.w	r3, r3, r9
 8018c90:	4543      	cmp	r3, r8
 8018c92:	f77f af79 	ble.w	8018b88 <_printf_float+0x250>
 8018c96:	2301      	movs	r3, #1
 8018c98:	4652      	mov	r2, sl
 8018c9a:	4631      	mov	r1, r6
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	47b8      	blx	r7
 8018ca0:	3001      	adds	r0, #1
 8018ca2:	f43f aeaa 	beq.w	80189fa <_printf_float+0xc2>
 8018ca6:	f108 0801 	add.w	r8, r8, #1
 8018caa:	e7ec      	b.n	8018c86 <_printf_float+0x34e>
 8018cac:	4613      	mov	r3, r2
 8018cae:	4631      	mov	r1, r6
 8018cb0:	4642      	mov	r2, r8
 8018cb2:	4628      	mov	r0, r5
 8018cb4:	47b8      	blx	r7
 8018cb6:	3001      	adds	r0, #1
 8018cb8:	d1c0      	bne.n	8018c3c <_printf_float+0x304>
 8018cba:	e69e      	b.n	80189fa <_printf_float+0xc2>
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	4631      	mov	r1, r6
 8018cc0:	4628      	mov	r0, r5
 8018cc2:	9205      	str	r2, [sp, #20]
 8018cc4:	47b8      	blx	r7
 8018cc6:	3001      	adds	r0, #1
 8018cc8:	f43f ae97 	beq.w	80189fa <_printf_float+0xc2>
 8018ccc:	9a05      	ldr	r2, [sp, #20]
 8018cce:	f10b 0b01 	add.w	fp, fp, #1
 8018cd2:	e7b9      	b.n	8018c48 <_printf_float+0x310>
 8018cd4:	ee18 3a10 	vmov	r3, s16
 8018cd8:	4652      	mov	r2, sl
 8018cda:	4631      	mov	r1, r6
 8018cdc:	4628      	mov	r0, r5
 8018cde:	47b8      	blx	r7
 8018ce0:	3001      	adds	r0, #1
 8018ce2:	d1be      	bne.n	8018c62 <_printf_float+0x32a>
 8018ce4:	e689      	b.n	80189fa <_printf_float+0xc2>
 8018ce6:	9a05      	ldr	r2, [sp, #20]
 8018ce8:	464b      	mov	r3, r9
 8018cea:	4442      	add	r2, r8
 8018cec:	4631      	mov	r1, r6
 8018cee:	4628      	mov	r0, r5
 8018cf0:	47b8      	blx	r7
 8018cf2:	3001      	adds	r0, #1
 8018cf4:	d1c1      	bne.n	8018c7a <_printf_float+0x342>
 8018cf6:	e680      	b.n	80189fa <_printf_float+0xc2>
 8018cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018cfa:	2a01      	cmp	r2, #1
 8018cfc:	dc01      	bgt.n	8018d02 <_printf_float+0x3ca>
 8018cfe:	07db      	lsls	r3, r3, #31
 8018d00:	d538      	bpl.n	8018d74 <_printf_float+0x43c>
 8018d02:	2301      	movs	r3, #1
 8018d04:	4642      	mov	r2, r8
 8018d06:	4631      	mov	r1, r6
 8018d08:	4628      	mov	r0, r5
 8018d0a:	47b8      	blx	r7
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	f43f ae74 	beq.w	80189fa <_printf_float+0xc2>
 8018d12:	ee18 3a10 	vmov	r3, s16
 8018d16:	4652      	mov	r2, sl
 8018d18:	4631      	mov	r1, r6
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	47b8      	blx	r7
 8018d1e:	3001      	adds	r0, #1
 8018d20:	f43f ae6b 	beq.w	80189fa <_printf_float+0xc2>
 8018d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018d28:	2200      	movs	r2, #0
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	f7e7 feec 	bl	8000b08 <__aeabi_dcmpeq>
 8018d30:	b9d8      	cbnz	r0, 8018d6a <_printf_float+0x432>
 8018d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d34:	f108 0201 	add.w	r2, r8, #1
 8018d38:	3b01      	subs	r3, #1
 8018d3a:	4631      	mov	r1, r6
 8018d3c:	4628      	mov	r0, r5
 8018d3e:	47b8      	blx	r7
 8018d40:	3001      	adds	r0, #1
 8018d42:	d10e      	bne.n	8018d62 <_printf_float+0x42a>
 8018d44:	e659      	b.n	80189fa <_printf_float+0xc2>
 8018d46:	2301      	movs	r3, #1
 8018d48:	4652      	mov	r2, sl
 8018d4a:	4631      	mov	r1, r6
 8018d4c:	4628      	mov	r0, r5
 8018d4e:	47b8      	blx	r7
 8018d50:	3001      	adds	r0, #1
 8018d52:	f43f ae52 	beq.w	80189fa <_printf_float+0xc2>
 8018d56:	f108 0801 	add.w	r8, r8, #1
 8018d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d5c:	3b01      	subs	r3, #1
 8018d5e:	4543      	cmp	r3, r8
 8018d60:	dcf1      	bgt.n	8018d46 <_printf_float+0x40e>
 8018d62:	464b      	mov	r3, r9
 8018d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018d68:	e6dc      	b.n	8018b24 <_printf_float+0x1ec>
 8018d6a:	f04f 0800 	mov.w	r8, #0
 8018d6e:	f104 0a1a 	add.w	sl, r4, #26
 8018d72:	e7f2      	b.n	8018d5a <_printf_float+0x422>
 8018d74:	2301      	movs	r3, #1
 8018d76:	4642      	mov	r2, r8
 8018d78:	e7df      	b.n	8018d3a <_printf_float+0x402>
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	464a      	mov	r2, r9
 8018d7e:	4631      	mov	r1, r6
 8018d80:	4628      	mov	r0, r5
 8018d82:	47b8      	blx	r7
 8018d84:	3001      	adds	r0, #1
 8018d86:	f43f ae38 	beq.w	80189fa <_printf_float+0xc2>
 8018d8a:	f108 0801 	add.w	r8, r8, #1
 8018d8e:	68e3      	ldr	r3, [r4, #12]
 8018d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018d92:	1a5b      	subs	r3, r3, r1
 8018d94:	4543      	cmp	r3, r8
 8018d96:	dcf0      	bgt.n	8018d7a <_printf_float+0x442>
 8018d98:	e6fa      	b.n	8018b90 <_printf_float+0x258>
 8018d9a:	f04f 0800 	mov.w	r8, #0
 8018d9e:	f104 0919 	add.w	r9, r4, #25
 8018da2:	e7f4      	b.n	8018d8e <_printf_float+0x456>

08018da4 <_printf_common>:
 8018da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018da8:	4616      	mov	r6, r2
 8018daa:	4699      	mov	r9, r3
 8018dac:	688a      	ldr	r2, [r1, #8]
 8018dae:	690b      	ldr	r3, [r1, #16]
 8018db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018db4:	4293      	cmp	r3, r2
 8018db6:	bfb8      	it	lt
 8018db8:	4613      	movlt	r3, r2
 8018dba:	6033      	str	r3, [r6, #0]
 8018dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018dc0:	4607      	mov	r7, r0
 8018dc2:	460c      	mov	r4, r1
 8018dc4:	b10a      	cbz	r2, 8018dca <_printf_common+0x26>
 8018dc6:	3301      	adds	r3, #1
 8018dc8:	6033      	str	r3, [r6, #0]
 8018dca:	6823      	ldr	r3, [r4, #0]
 8018dcc:	0699      	lsls	r1, r3, #26
 8018dce:	bf42      	ittt	mi
 8018dd0:	6833      	ldrmi	r3, [r6, #0]
 8018dd2:	3302      	addmi	r3, #2
 8018dd4:	6033      	strmi	r3, [r6, #0]
 8018dd6:	6825      	ldr	r5, [r4, #0]
 8018dd8:	f015 0506 	ands.w	r5, r5, #6
 8018ddc:	d106      	bne.n	8018dec <_printf_common+0x48>
 8018dde:	f104 0a19 	add.w	sl, r4, #25
 8018de2:	68e3      	ldr	r3, [r4, #12]
 8018de4:	6832      	ldr	r2, [r6, #0]
 8018de6:	1a9b      	subs	r3, r3, r2
 8018de8:	42ab      	cmp	r3, r5
 8018dea:	dc26      	bgt.n	8018e3a <_printf_common+0x96>
 8018dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018df0:	1e13      	subs	r3, r2, #0
 8018df2:	6822      	ldr	r2, [r4, #0]
 8018df4:	bf18      	it	ne
 8018df6:	2301      	movne	r3, #1
 8018df8:	0692      	lsls	r2, r2, #26
 8018dfa:	d42b      	bmi.n	8018e54 <_printf_common+0xb0>
 8018dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018e00:	4649      	mov	r1, r9
 8018e02:	4638      	mov	r0, r7
 8018e04:	47c0      	blx	r8
 8018e06:	3001      	adds	r0, #1
 8018e08:	d01e      	beq.n	8018e48 <_printf_common+0xa4>
 8018e0a:	6823      	ldr	r3, [r4, #0]
 8018e0c:	68e5      	ldr	r5, [r4, #12]
 8018e0e:	6832      	ldr	r2, [r6, #0]
 8018e10:	f003 0306 	and.w	r3, r3, #6
 8018e14:	2b04      	cmp	r3, #4
 8018e16:	bf08      	it	eq
 8018e18:	1aad      	subeq	r5, r5, r2
 8018e1a:	68a3      	ldr	r3, [r4, #8]
 8018e1c:	6922      	ldr	r2, [r4, #16]
 8018e1e:	bf0c      	ite	eq
 8018e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018e24:	2500      	movne	r5, #0
 8018e26:	4293      	cmp	r3, r2
 8018e28:	bfc4      	itt	gt
 8018e2a:	1a9b      	subgt	r3, r3, r2
 8018e2c:	18ed      	addgt	r5, r5, r3
 8018e2e:	2600      	movs	r6, #0
 8018e30:	341a      	adds	r4, #26
 8018e32:	42b5      	cmp	r5, r6
 8018e34:	d11a      	bne.n	8018e6c <_printf_common+0xc8>
 8018e36:	2000      	movs	r0, #0
 8018e38:	e008      	b.n	8018e4c <_printf_common+0xa8>
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	4652      	mov	r2, sl
 8018e3e:	4649      	mov	r1, r9
 8018e40:	4638      	mov	r0, r7
 8018e42:	47c0      	blx	r8
 8018e44:	3001      	adds	r0, #1
 8018e46:	d103      	bne.n	8018e50 <_printf_common+0xac>
 8018e48:	f04f 30ff 	mov.w	r0, #4294967295
 8018e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e50:	3501      	adds	r5, #1
 8018e52:	e7c6      	b.n	8018de2 <_printf_common+0x3e>
 8018e54:	18e1      	adds	r1, r4, r3
 8018e56:	1c5a      	adds	r2, r3, #1
 8018e58:	2030      	movs	r0, #48	; 0x30
 8018e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018e5e:	4422      	add	r2, r4
 8018e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018e68:	3302      	adds	r3, #2
 8018e6a:	e7c7      	b.n	8018dfc <_printf_common+0x58>
 8018e6c:	2301      	movs	r3, #1
 8018e6e:	4622      	mov	r2, r4
 8018e70:	4649      	mov	r1, r9
 8018e72:	4638      	mov	r0, r7
 8018e74:	47c0      	blx	r8
 8018e76:	3001      	adds	r0, #1
 8018e78:	d0e6      	beq.n	8018e48 <_printf_common+0xa4>
 8018e7a:	3601      	adds	r6, #1
 8018e7c:	e7d9      	b.n	8018e32 <_printf_common+0x8e>
	...

08018e80 <_printf_i>:
 8018e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e84:	7e0f      	ldrb	r7, [r1, #24]
 8018e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018e88:	2f78      	cmp	r7, #120	; 0x78
 8018e8a:	4691      	mov	r9, r2
 8018e8c:	4680      	mov	r8, r0
 8018e8e:	460c      	mov	r4, r1
 8018e90:	469a      	mov	sl, r3
 8018e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018e96:	d807      	bhi.n	8018ea8 <_printf_i+0x28>
 8018e98:	2f62      	cmp	r7, #98	; 0x62
 8018e9a:	d80a      	bhi.n	8018eb2 <_printf_i+0x32>
 8018e9c:	2f00      	cmp	r7, #0
 8018e9e:	f000 80d8 	beq.w	8019052 <_printf_i+0x1d2>
 8018ea2:	2f58      	cmp	r7, #88	; 0x58
 8018ea4:	f000 80a3 	beq.w	8018fee <_printf_i+0x16e>
 8018ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018eb0:	e03a      	b.n	8018f28 <_printf_i+0xa8>
 8018eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018eb6:	2b15      	cmp	r3, #21
 8018eb8:	d8f6      	bhi.n	8018ea8 <_printf_i+0x28>
 8018eba:	a101      	add	r1, pc, #4	; (adr r1, 8018ec0 <_printf_i+0x40>)
 8018ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018ec0:	08018f19 	.word	0x08018f19
 8018ec4:	08018f2d 	.word	0x08018f2d
 8018ec8:	08018ea9 	.word	0x08018ea9
 8018ecc:	08018ea9 	.word	0x08018ea9
 8018ed0:	08018ea9 	.word	0x08018ea9
 8018ed4:	08018ea9 	.word	0x08018ea9
 8018ed8:	08018f2d 	.word	0x08018f2d
 8018edc:	08018ea9 	.word	0x08018ea9
 8018ee0:	08018ea9 	.word	0x08018ea9
 8018ee4:	08018ea9 	.word	0x08018ea9
 8018ee8:	08018ea9 	.word	0x08018ea9
 8018eec:	08019039 	.word	0x08019039
 8018ef0:	08018f5d 	.word	0x08018f5d
 8018ef4:	0801901b 	.word	0x0801901b
 8018ef8:	08018ea9 	.word	0x08018ea9
 8018efc:	08018ea9 	.word	0x08018ea9
 8018f00:	0801905b 	.word	0x0801905b
 8018f04:	08018ea9 	.word	0x08018ea9
 8018f08:	08018f5d 	.word	0x08018f5d
 8018f0c:	08018ea9 	.word	0x08018ea9
 8018f10:	08018ea9 	.word	0x08018ea9
 8018f14:	08019023 	.word	0x08019023
 8018f18:	682b      	ldr	r3, [r5, #0]
 8018f1a:	1d1a      	adds	r2, r3, #4
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	602a      	str	r2, [r5, #0]
 8018f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018f28:	2301      	movs	r3, #1
 8018f2a:	e0a3      	b.n	8019074 <_printf_i+0x1f4>
 8018f2c:	6820      	ldr	r0, [r4, #0]
 8018f2e:	6829      	ldr	r1, [r5, #0]
 8018f30:	0606      	lsls	r6, r0, #24
 8018f32:	f101 0304 	add.w	r3, r1, #4
 8018f36:	d50a      	bpl.n	8018f4e <_printf_i+0xce>
 8018f38:	680e      	ldr	r6, [r1, #0]
 8018f3a:	602b      	str	r3, [r5, #0]
 8018f3c:	2e00      	cmp	r6, #0
 8018f3e:	da03      	bge.n	8018f48 <_printf_i+0xc8>
 8018f40:	232d      	movs	r3, #45	; 0x2d
 8018f42:	4276      	negs	r6, r6
 8018f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f48:	485e      	ldr	r0, [pc, #376]	; (80190c4 <_printf_i+0x244>)
 8018f4a:	230a      	movs	r3, #10
 8018f4c:	e019      	b.n	8018f82 <_printf_i+0x102>
 8018f4e:	680e      	ldr	r6, [r1, #0]
 8018f50:	602b      	str	r3, [r5, #0]
 8018f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018f56:	bf18      	it	ne
 8018f58:	b236      	sxthne	r6, r6
 8018f5a:	e7ef      	b.n	8018f3c <_printf_i+0xbc>
 8018f5c:	682b      	ldr	r3, [r5, #0]
 8018f5e:	6820      	ldr	r0, [r4, #0]
 8018f60:	1d19      	adds	r1, r3, #4
 8018f62:	6029      	str	r1, [r5, #0]
 8018f64:	0601      	lsls	r1, r0, #24
 8018f66:	d501      	bpl.n	8018f6c <_printf_i+0xec>
 8018f68:	681e      	ldr	r6, [r3, #0]
 8018f6a:	e002      	b.n	8018f72 <_printf_i+0xf2>
 8018f6c:	0646      	lsls	r6, r0, #25
 8018f6e:	d5fb      	bpl.n	8018f68 <_printf_i+0xe8>
 8018f70:	881e      	ldrh	r6, [r3, #0]
 8018f72:	4854      	ldr	r0, [pc, #336]	; (80190c4 <_printf_i+0x244>)
 8018f74:	2f6f      	cmp	r7, #111	; 0x6f
 8018f76:	bf0c      	ite	eq
 8018f78:	2308      	moveq	r3, #8
 8018f7a:	230a      	movne	r3, #10
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018f82:	6865      	ldr	r5, [r4, #4]
 8018f84:	60a5      	str	r5, [r4, #8]
 8018f86:	2d00      	cmp	r5, #0
 8018f88:	bfa2      	ittt	ge
 8018f8a:	6821      	ldrge	r1, [r4, #0]
 8018f8c:	f021 0104 	bicge.w	r1, r1, #4
 8018f90:	6021      	strge	r1, [r4, #0]
 8018f92:	b90e      	cbnz	r6, 8018f98 <_printf_i+0x118>
 8018f94:	2d00      	cmp	r5, #0
 8018f96:	d04d      	beq.n	8019034 <_printf_i+0x1b4>
 8018f98:	4615      	mov	r5, r2
 8018f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8018f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8018fa2:	5dc7      	ldrb	r7, [r0, r7]
 8018fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018fa8:	4637      	mov	r7, r6
 8018faa:	42bb      	cmp	r3, r7
 8018fac:	460e      	mov	r6, r1
 8018fae:	d9f4      	bls.n	8018f9a <_printf_i+0x11a>
 8018fb0:	2b08      	cmp	r3, #8
 8018fb2:	d10b      	bne.n	8018fcc <_printf_i+0x14c>
 8018fb4:	6823      	ldr	r3, [r4, #0]
 8018fb6:	07de      	lsls	r6, r3, #31
 8018fb8:	d508      	bpl.n	8018fcc <_printf_i+0x14c>
 8018fba:	6923      	ldr	r3, [r4, #16]
 8018fbc:	6861      	ldr	r1, [r4, #4]
 8018fbe:	4299      	cmp	r1, r3
 8018fc0:	bfde      	ittt	le
 8018fc2:	2330      	movle	r3, #48	; 0x30
 8018fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018fcc:	1b52      	subs	r2, r2, r5
 8018fce:	6122      	str	r2, [r4, #16]
 8018fd0:	f8cd a000 	str.w	sl, [sp]
 8018fd4:	464b      	mov	r3, r9
 8018fd6:	aa03      	add	r2, sp, #12
 8018fd8:	4621      	mov	r1, r4
 8018fda:	4640      	mov	r0, r8
 8018fdc:	f7ff fee2 	bl	8018da4 <_printf_common>
 8018fe0:	3001      	adds	r0, #1
 8018fe2:	d14c      	bne.n	801907e <_printf_i+0x1fe>
 8018fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8018fe8:	b004      	add	sp, #16
 8018fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fee:	4835      	ldr	r0, [pc, #212]	; (80190c4 <_printf_i+0x244>)
 8018ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018ff4:	6829      	ldr	r1, [r5, #0]
 8018ff6:	6823      	ldr	r3, [r4, #0]
 8018ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8018ffc:	6029      	str	r1, [r5, #0]
 8018ffe:	061d      	lsls	r5, r3, #24
 8019000:	d514      	bpl.n	801902c <_printf_i+0x1ac>
 8019002:	07df      	lsls	r7, r3, #31
 8019004:	bf44      	itt	mi
 8019006:	f043 0320 	orrmi.w	r3, r3, #32
 801900a:	6023      	strmi	r3, [r4, #0]
 801900c:	b91e      	cbnz	r6, 8019016 <_printf_i+0x196>
 801900e:	6823      	ldr	r3, [r4, #0]
 8019010:	f023 0320 	bic.w	r3, r3, #32
 8019014:	6023      	str	r3, [r4, #0]
 8019016:	2310      	movs	r3, #16
 8019018:	e7b0      	b.n	8018f7c <_printf_i+0xfc>
 801901a:	6823      	ldr	r3, [r4, #0]
 801901c:	f043 0320 	orr.w	r3, r3, #32
 8019020:	6023      	str	r3, [r4, #0]
 8019022:	2378      	movs	r3, #120	; 0x78
 8019024:	4828      	ldr	r0, [pc, #160]	; (80190c8 <_printf_i+0x248>)
 8019026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801902a:	e7e3      	b.n	8018ff4 <_printf_i+0x174>
 801902c:	0659      	lsls	r1, r3, #25
 801902e:	bf48      	it	mi
 8019030:	b2b6      	uxthmi	r6, r6
 8019032:	e7e6      	b.n	8019002 <_printf_i+0x182>
 8019034:	4615      	mov	r5, r2
 8019036:	e7bb      	b.n	8018fb0 <_printf_i+0x130>
 8019038:	682b      	ldr	r3, [r5, #0]
 801903a:	6826      	ldr	r6, [r4, #0]
 801903c:	6961      	ldr	r1, [r4, #20]
 801903e:	1d18      	adds	r0, r3, #4
 8019040:	6028      	str	r0, [r5, #0]
 8019042:	0635      	lsls	r5, r6, #24
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	d501      	bpl.n	801904c <_printf_i+0x1cc>
 8019048:	6019      	str	r1, [r3, #0]
 801904a:	e002      	b.n	8019052 <_printf_i+0x1d2>
 801904c:	0670      	lsls	r0, r6, #25
 801904e:	d5fb      	bpl.n	8019048 <_printf_i+0x1c8>
 8019050:	8019      	strh	r1, [r3, #0]
 8019052:	2300      	movs	r3, #0
 8019054:	6123      	str	r3, [r4, #16]
 8019056:	4615      	mov	r5, r2
 8019058:	e7ba      	b.n	8018fd0 <_printf_i+0x150>
 801905a:	682b      	ldr	r3, [r5, #0]
 801905c:	1d1a      	adds	r2, r3, #4
 801905e:	602a      	str	r2, [r5, #0]
 8019060:	681d      	ldr	r5, [r3, #0]
 8019062:	6862      	ldr	r2, [r4, #4]
 8019064:	2100      	movs	r1, #0
 8019066:	4628      	mov	r0, r5
 8019068:	f7e7 f8da 	bl	8000220 <memchr>
 801906c:	b108      	cbz	r0, 8019072 <_printf_i+0x1f2>
 801906e:	1b40      	subs	r0, r0, r5
 8019070:	6060      	str	r0, [r4, #4]
 8019072:	6863      	ldr	r3, [r4, #4]
 8019074:	6123      	str	r3, [r4, #16]
 8019076:	2300      	movs	r3, #0
 8019078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801907c:	e7a8      	b.n	8018fd0 <_printf_i+0x150>
 801907e:	6923      	ldr	r3, [r4, #16]
 8019080:	462a      	mov	r2, r5
 8019082:	4649      	mov	r1, r9
 8019084:	4640      	mov	r0, r8
 8019086:	47d0      	blx	sl
 8019088:	3001      	adds	r0, #1
 801908a:	d0ab      	beq.n	8018fe4 <_printf_i+0x164>
 801908c:	6823      	ldr	r3, [r4, #0]
 801908e:	079b      	lsls	r3, r3, #30
 8019090:	d413      	bmi.n	80190ba <_printf_i+0x23a>
 8019092:	68e0      	ldr	r0, [r4, #12]
 8019094:	9b03      	ldr	r3, [sp, #12]
 8019096:	4298      	cmp	r0, r3
 8019098:	bfb8      	it	lt
 801909a:	4618      	movlt	r0, r3
 801909c:	e7a4      	b.n	8018fe8 <_printf_i+0x168>
 801909e:	2301      	movs	r3, #1
 80190a0:	4632      	mov	r2, r6
 80190a2:	4649      	mov	r1, r9
 80190a4:	4640      	mov	r0, r8
 80190a6:	47d0      	blx	sl
 80190a8:	3001      	adds	r0, #1
 80190aa:	d09b      	beq.n	8018fe4 <_printf_i+0x164>
 80190ac:	3501      	adds	r5, #1
 80190ae:	68e3      	ldr	r3, [r4, #12]
 80190b0:	9903      	ldr	r1, [sp, #12]
 80190b2:	1a5b      	subs	r3, r3, r1
 80190b4:	42ab      	cmp	r3, r5
 80190b6:	dcf2      	bgt.n	801909e <_printf_i+0x21e>
 80190b8:	e7eb      	b.n	8019092 <_printf_i+0x212>
 80190ba:	2500      	movs	r5, #0
 80190bc:	f104 0619 	add.w	r6, r4, #25
 80190c0:	e7f5      	b.n	80190ae <_printf_i+0x22e>
 80190c2:	bf00      	nop
 80190c4:	0801c286 	.word	0x0801c286
 80190c8:	0801c297 	.word	0x0801c297

080190cc <_sbrk_r>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	4d06      	ldr	r5, [pc, #24]	; (80190e8 <_sbrk_r+0x1c>)
 80190d0:	2300      	movs	r3, #0
 80190d2:	4604      	mov	r4, r0
 80190d4:	4608      	mov	r0, r1
 80190d6:	602b      	str	r3, [r5, #0]
 80190d8:	f7ec f9ca 	bl	8005470 <_sbrk>
 80190dc:	1c43      	adds	r3, r0, #1
 80190de:	d102      	bne.n	80190e6 <_sbrk_r+0x1a>
 80190e0:	682b      	ldr	r3, [r5, #0]
 80190e2:	b103      	cbz	r3, 80190e6 <_sbrk_r+0x1a>
 80190e4:	6023      	str	r3, [r4, #0]
 80190e6:	bd38      	pop	{r3, r4, r5, pc}
 80190e8:	2000306c 	.word	0x2000306c

080190ec <siprintf>:
 80190ec:	b40e      	push	{r1, r2, r3}
 80190ee:	b500      	push	{lr}
 80190f0:	b09c      	sub	sp, #112	; 0x70
 80190f2:	ab1d      	add	r3, sp, #116	; 0x74
 80190f4:	9002      	str	r0, [sp, #8]
 80190f6:	9006      	str	r0, [sp, #24]
 80190f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80190fc:	4809      	ldr	r0, [pc, #36]	; (8019124 <siprintf+0x38>)
 80190fe:	9107      	str	r1, [sp, #28]
 8019100:	9104      	str	r1, [sp, #16]
 8019102:	4909      	ldr	r1, [pc, #36]	; (8019128 <siprintf+0x3c>)
 8019104:	f853 2b04 	ldr.w	r2, [r3], #4
 8019108:	9105      	str	r1, [sp, #20]
 801910a:	6800      	ldr	r0, [r0, #0]
 801910c:	9301      	str	r3, [sp, #4]
 801910e:	a902      	add	r1, sp, #8
 8019110:	f001 fba4 	bl	801a85c <_svfiprintf_r>
 8019114:	9b02      	ldr	r3, [sp, #8]
 8019116:	2200      	movs	r2, #0
 8019118:	701a      	strb	r2, [r3, #0]
 801911a:	b01c      	add	sp, #112	; 0x70
 801911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019120:	b003      	add	sp, #12
 8019122:	4770      	bx	lr
 8019124:	20000130 	.word	0x20000130
 8019128:	ffff0208 	.word	0xffff0208

0801912c <strtok>:
 801912c:	4b16      	ldr	r3, [pc, #88]	; (8019188 <strtok+0x5c>)
 801912e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019130:	681e      	ldr	r6, [r3, #0]
 8019132:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8019134:	4605      	mov	r5, r0
 8019136:	b9fc      	cbnz	r4, 8019178 <strtok+0x4c>
 8019138:	2050      	movs	r0, #80	; 0x50
 801913a:	9101      	str	r1, [sp, #4]
 801913c:	f7ff fa46 	bl	80185cc <malloc>
 8019140:	9901      	ldr	r1, [sp, #4]
 8019142:	65b0      	str	r0, [r6, #88]	; 0x58
 8019144:	4602      	mov	r2, r0
 8019146:	b920      	cbnz	r0, 8019152 <strtok+0x26>
 8019148:	4b10      	ldr	r3, [pc, #64]	; (801918c <strtok+0x60>)
 801914a:	4811      	ldr	r0, [pc, #68]	; (8019190 <strtok+0x64>)
 801914c:	2157      	movs	r1, #87	; 0x57
 801914e:	f000 f8d5 	bl	80192fc <__assert_func>
 8019152:	e9c0 4400 	strd	r4, r4, [r0]
 8019156:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801915a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801915e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8019162:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8019166:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801916a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801916e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8019172:	6184      	str	r4, [r0, #24]
 8019174:	7704      	strb	r4, [r0, #28]
 8019176:	6244      	str	r4, [r0, #36]	; 0x24
 8019178:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801917a:	2301      	movs	r3, #1
 801917c:	4628      	mov	r0, r5
 801917e:	b002      	add	sp, #8
 8019180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019184:	f000 b806 	b.w	8019194 <__strtok_r>
 8019188:	20000130 	.word	0x20000130
 801918c:	0801c2a8 	.word	0x0801c2a8
 8019190:	0801c2bf 	.word	0x0801c2bf

08019194 <__strtok_r>:
 8019194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019196:	b908      	cbnz	r0, 801919c <__strtok_r+0x8>
 8019198:	6810      	ldr	r0, [r2, #0]
 801919a:	b188      	cbz	r0, 80191c0 <__strtok_r+0x2c>
 801919c:	4604      	mov	r4, r0
 801919e:	4620      	mov	r0, r4
 80191a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80191a4:	460f      	mov	r7, r1
 80191a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80191aa:	b91e      	cbnz	r6, 80191b4 <__strtok_r+0x20>
 80191ac:	b965      	cbnz	r5, 80191c8 <__strtok_r+0x34>
 80191ae:	6015      	str	r5, [r2, #0]
 80191b0:	4628      	mov	r0, r5
 80191b2:	e005      	b.n	80191c0 <__strtok_r+0x2c>
 80191b4:	42b5      	cmp	r5, r6
 80191b6:	d1f6      	bne.n	80191a6 <__strtok_r+0x12>
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d1f0      	bne.n	801919e <__strtok_r+0xa>
 80191bc:	6014      	str	r4, [r2, #0]
 80191be:	7003      	strb	r3, [r0, #0]
 80191c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191c2:	461c      	mov	r4, r3
 80191c4:	e00c      	b.n	80191e0 <__strtok_r+0x4c>
 80191c6:	b915      	cbnz	r5, 80191ce <__strtok_r+0x3a>
 80191c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80191cc:	460e      	mov	r6, r1
 80191ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80191d2:	42ab      	cmp	r3, r5
 80191d4:	d1f7      	bne.n	80191c6 <__strtok_r+0x32>
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d0f3      	beq.n	80191c2 <__strtok_r+0x2e>
 80191da:	2300      	movs	r3, #0
 80191dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80191e0:	6014      	str	r4, [r2, #0]
 80191e2:	e7ed      	b.n	80191c0 <__strtok_r+0x2c>

080191e4 <_strtol_l.constprop.0>:
 80191e4:	2b01      	cmp	r3, #1
 80191e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191ea:	d001      	beq.n	80191f0 <_strtol_l.constprop.0+0xc>
 80191ec:	2b24      	cmp	r3, #36	; 0x24
 80191ee:	d906      	bls.n	80191fe <_strtol_l.constprop.0+0x1a>
 80191f0:	f7ff f9c2 	bl	8018578 <__errno>
 80191f4:	2316      	movs	r3, #22
 80191f6:	6003      	str	r3, [r0, #0]
 80191f8:	2000      	movs	r0, #0
 80191fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80192e4 <_strtol_l.constprop.0+0x100>
 8019202:	460d      	mov	r5, r1
 8019204:	462e      	mov	r6, r5
 8019206:	f815 4b01 	ldrb.w	r4, [r5], #1
 801920a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801920e:	f017 0708 	ands.w	r7, r7, #8
 8019212:	d1f7      	bne.n	8019204 <_strtol_l.constprop.0+0x20>
 8019214:	2c2d      	cmp	r4, #45	; 0x2d
 8019216:	d132      	bne.n	801927e <_strtol_l.constprop.0+0x9a>
 8019218:	782c      	ldrb	r4, [r5, #0]
 801921a:	2701      	movs	r7, #1
 801921c:	1cb5      	adds	r5, r6, #2
 801921e:	2b00      	cmp	r3, #0
 8019220:	d05b      	beq.n	80192da <_strtol_l.constprop.0+0xf6>
 8019222:	2b10      	cmp	r3, #16
 8019224:	d109      	bne.n	801923a <_strtol_l.constprop.0+0x56>
 8019226:	2c30      	cmp	r4, #48	; 0x30
 8019228:	d107      	bne.n	801923a <_strtol_l.constprop.0+0x56>
 801922a:	782c      	ldrb	r4, [r5, #0]
 801922c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019230:	2c58      	cmp	r4, #88	; 0x58
 8019232:	d14d      	bne.n	80192d0 <_strtol_l.constprop.0+0xec>
 8019234:	786c      	ldrb	r4, [r5, #1]
 8019236:	2310      	movs	r3, #16
 8019238:	3502      	adds	r5, #2
 801923a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801923e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019242:	f04f 0c00 	mov.w	ip, #0
 8019246:	fbb8 f9f3 	udiv	r9, r8, r3
 801924a:	4666      	mov	r6, ip
 801924c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019250:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019254:	f1be 0f09 	cmp.w	lr, #9
 8019258:	d816      	bhi.n	8019288 <_strtol_l.constprop.0+0xa4>
 801925a:	4674      	mov	r4, lr
 801925c:	42a3      	cmp	r3, r4
 801925e:	dd24      	ble.n	80192aa <_strtol_l.constprop.0+0xc6>
 8019260:	f1bc 0f00 	cmp.w	ip, #0
 8019264:	db1e      	blt.n	80192a4 <_strtol_l.constprop.0+0xc0>
 8019266:	45b1      	cmp	r9, r6
 8019268:	d31c      	bcc.n	80192a4 <_strtol_l.constprop.0+0xc0>
 801926a:	d101      	bne.n	8019270 <_strtol_l.constprop.0+0x8c>
 801926c:	45a2      	cmp	sl, r4
 801926e:	db19      	blt.n	80192a4 <_strtol_l.constprop.0+0xc0>
 8019270:	fb06 4603 	mla	r6, r6, r3, r4
 8019274:	f04f 0c01 	mov.w	ip, #1
 8019278:	f815 4b01 	ldrb.w	r4, [r5], #1
 801927c:	e7e8      	b.n	8019250 <_strtol_l.constprop.0+0x6c>
 801927e:	2c2b      	cmp	r4, #43	; 0x2b
 8019280:	bf04      	itt	eq
 8019282:	782c      	ldrbeq	r4, [r5, #0]
 8019284:	1cb5      	addeq	r5, r6, #2
 8019286:	e7ca      	b.n	801921e <_strtol_l.constprop.0+0x3a>
 8019288:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801928c:	f1be 0f19 	cmp.w	lr, #25
 8019290:	d801      	bhi.n	8019296 <_strtol_l.constprop.0+0xb2>
 8019292:	3c37      	subs	r4, #55	; 0x37
 8019294:	e7e2      	b.n	801925c <_strtol_l.constprop.0+0x78>
 8019296:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801929a:	f1be 0f19 	cmp.w	lr, #25
 801929e:	d804      	bhi.n	80192aa <_strtol_l.constprop.0+0xc6>
 80192a0:	3c57      	subs	r4, #87	; 0x57
 80192a2:	e7db      	b.n	801925c <_strtol_l.constprop.0+0x78>
 80192a4:	f04f 3cff 	mov.w	ip, #4294967295
 80192a8:	e7e6      	b.n	8019278 <_strtol_l.constprop.0+0x94>
 80192aa:	f1bc 0f00 	cmp.w	ip, #0
 80192ae:	da05      	bge.n	80192bc <_strtol_l.constprop.0+0xd8>
 80192b0:	2322      	movs	r3, #34	; 0x22
 80192b2:	6003      	str	r3, [r0, #0]
 80192b4:	4646      	mov	r6, r8
 80192b6:	b942      	cbnz	r2, 80192ca <_strtol_l.constprop.0+0xe6>
 80192b8:	4630      	mov	r0, r6
 80192ba:	e79e      	b.n	80191fa <_strtol_l.constprop.0+0x16>
 80192bc:	b107      	cbz	r7, 80192c0 <_strtol_l.constprop.0+0xdc>
 80192be:	4276      	negs	r6, r6
 80192c0:	2a00      	cmp	r2, #0
 80192c2:	d0f9      	beq.n	80192b8 <_strtol_l.constprop.0+0xd4>
 80192c4:	f1bc 0f00 	cmp.w	ip, #0
 80192c8:	d000      	beq.n	80192cc <_strtol_l.constprop.0+0xe8>
 80192ca:	1e69      	subs	r1, r5, #1
 80192cc:	6011      	str	r1, [r2, #0]
 80192ce:	e7f3      	b.n	80192b8 <_strtol_l.constprop.0+0xd4>
 80192d0:	2430      	movs	r4, #48	; 0x30
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d1b1      	bne.n	801923a <_strtol_l.constprop.0+0x56>
 80192d6:	2308      	movs	r3, #8
 80192d8:	e7af      	b.n	801923a <_strtol_l.constprop.0+0x56>
 80192da:	2c30      	cmp	r4, #48	; 0x30
 80192dc:	d0a5      	beq.n	801922a <_strtol_l.constprop.0+0x46>
 80192de:	230a      	movs	r3, #10
 80192e0:	e7ab      	b.n	801923a <_strtol_l.constprop.0+0x56>
 80192e2:	bf00      	nop
 80192e4:	0801c359 	.word	0x0801c359

080192e8 <strtol>:
 80192e8:	4613      	mov	r3, r2
 80192ea:	460a      	mov	r2, r1
 80192ec:	4601      	mov	r1, r0
 80192ee:	4802      	ldr	r0, [pc, #8]	; (80192f8 <strtol+0x10>)
 80192f0:	6800      	ldr	r0, [r0, #0]
 80192f2:	f7ff bf77 	b.w	80191e4 <_strtol_l.constprop.0>
 80192f6:	bf00      	nop
 80192f8:	20000130 	.word	0x20000130

080192fc <__assert_func>:
 80192fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192fe:	4614      	mov	r4, r2
 8019300:	461a      	mov	r2, r3
 8019302:	4b09      	ldr	r3, [pc, #36]	; (8019328 <__assert_func+0x2c>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	4605      	mov	r5, r0
 8019308:	68d8      	ldr	r0, [r3, #12]
 801930a:	b14c      	cbz	r4, 8019320 <__assert_func+0x24>
 801930c:	4b07      	ldr	r3, [pc, #28]	; (801932c <__assert_func+0x30>)
 801930e:	9100      	str	r1, [sp, #0]
 8019310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019314:	4906      	ldr	r1, [pc, #24]	; (8019330 <__assert_func+0x34>)
 8019316:	462b      	mov	r3, r5
 8019318:	f000 fe88 	bl	801a02c <fiprintf>
 801931c:	f001 fdb8 	bl	801ae90 <abort>
 8019320:	4b04      	ldr	r3, [pc, #16]	; (8019334 <__assert_func+0x38>)
 8019322:	461c      	mov	r4, r3
 8019324:	e7f3      	b.n	801930e <__assert_func+0x12>
 8019326:	bf00      	nop
 8019328:	20000130 	.word	0x20000130
 801932c:	0801c31c 	.word	0x0801c31c
 8019330:	0801c329 	.word	0x0801c329
 8019334:	0801c357 	.word	0x0801c357

08019338 <quorem>:
 8019338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801933c:	6903      	ldr	r3, [r0, #16]
 801933e:	690c      	ldr	r4, [r1, #16]
 8019340:	42a3      	cmp	r3, r4
 8019342:	4607      	mov	r7, r0
 8019344:	f2c0 8081 	blt.w	801944a <quorem+0x112>
 8019348:	3c01      	subs	r4, #1
 801934a:	f101 0814 	add.w	r8, r1, #20
 801934e:	f100 0514 	add.w	r5, r0, #20
 8019352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019356:	9301      	str	r3, [sp, #4]
 8019358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801935c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019360:	3301      	adds	r3, #1
 8019362:	429a      	cmp	r2, r3
 8019364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801936c:	fbb2 f6f3 	udiv	r6, r2, r3
 8019370:	d331      	bcc.n	80193d6 <quorem+0x9e>
 8019372:	f04f 0e00 	mov.w	lr, #0
 8019376:	4640      	mov	r0, r8
 8019378:	46ac      	mov	ip, r5
 801937a:	46f2      	mov	sl, lr
 801937c:	f850 2b04 	ldr.w	r2, [r0], #4
 8019380:	b293      	uxth	r3, r2
 8019382:	fb06 e303 	mla	r3, r6, r3, lr
 8019386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801938a:	b29b      	uxth	r3, r3
 801938c:	ebaa 0303 	sub.w	r3, sl, r3
 8019390:	f8dc a000 	ldr.w	sl, [ip]
 8019394:	0c12      	lsrs	r2, r2, #16
 8019396:	fa13 f38a 	uxtah	r3, r3, sl
 801939a:	fb06 e202 	mla	r2, r6, r2, lr
 801939e:	9300      	str	r3, [sp, #0]
 80193a0:	9b00      	ldr	r3, [sp, #0]
 80193a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80193a6:	b292      	uxth	r2, r2
 80193a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80193ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80193b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80193b4:	4581      	cmp	r9, r0
 80193b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80193ba:	f84c 3b04 	str.w	r3, [ip], #4
 80193be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80193c2:	d2db      	bcs.n	801937c <quorem+0x44>
 80193c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80193c8:	b92b      	cbnz	r3, 80193d6 <quorem+0x9e>
 80193ca:	9b01      	ldr	r3, [sp, #4]
 80193cc:	3b04      	subs	r3, #4
 80193ce:	429d      	cmp	r5, r3
 80193d0:	461a      	mov	r2, r3
 80193d2:	d32e      	bcc.n	8019432 <quorem+0xfa>
 80193d4:	613c      	str	r4, [r7, #16]
 80193d6:	4638      	mov	r0, r7
 80193d8:	f001 f8cc 	bl	801a574 <__mcmp>
 80193dc:	2800      	cmp	r0, #0
 80193de:	db24      	blt.n	801942a <quorem+0xf2>
 80193e0:	3601      	adds	r6, #1
 80193e2:	4628      	mov	r0, r5
 80193e4:	f04f 0c00 	mov.w	ip, #0
 80193e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80193ec:	f8d0 e000 	ldr.w	lr, [r0]
 80193f0:	b293      	uxth	r3, r2
 80193f2:	ebac 0303 	sub.w	r3, ip, r3
 80193f6:	0c12      	lsrs	r2, r2, #16
 80193f8:	fa13 f38e 	uxtah	r3, r3, lr
 80193fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019404:	b29b      	uxth	r3, r3
 8019406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801940a:	45c1      	cmp	r9, r8
 801940c:	f840 3b04 	str.w	r3, [r0], #4
 8019410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019414:	d2e8      	bcs.n	80193e8 <quorem+0xb0>
 8019416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801941a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801941e:	b922      	cbnz	r2, 801942a <quorem+0xf2>
 8019420:	3b04      	subs	r3, #4
 8019422:	429d      	cmp	r5, r3
 8019424:	461a      	mov	r2, r3
 8019426:	d30a      	bcc.n	801943e <quorem+0x106>
 8019428:	613c      	str	r4, [r7, #16]
 801942a:	4630      	mov	r0, r6
 801942c:	b003      	add	sp, #12
 801942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019432:	6812      	ldr	r2, [r2, #0]
 8019434:	3b04      	subs	r3, #4
 8019436:	2a00      	cmp	r2, #0
 8019438:	d1cc      	bne.n	80193d4 <quorem+0x9c>
 801943a:	3c01      	subs	r4, #1
 801943c:	e7c7      	b.n	80193ce <quorem+0x96>
 801943e:	6812      	ldr	r2, [r2, #0]
 8019440:	3b04      	subs	r3, #4
 8019442:	2a00      	cmp	r2, #0
 8019444:	d1f0      	bne.n	8019428 <quorem+0xf0>
 8019446:	3c01      	subs	r4, #1
 8019448:	e7eb      	b.n	8019422 <quorem+0xea>
 801944a:	2000      	movs	r0, #0
 801944c:	e7ee      	b.n	801942c <quorem+0xf4>
	...

08019450 <_dtoa_r>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	ed2d 8b04 	vpush	{d8-d9}
 8019458:	ec57 6b10 	vmov	r6, r7, d0
 801945c:	b093      	sub	sp, #76	; 0x4c
 801945e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019464:	9106      	str	r1, [sp, #24]
 8019466:	ee10 aa10 	vmov	sl, s0
 801946a:	4604      	mov	r4, r0
 801946c:	9209      	str	r2, [sp, #36]	; 0x24
 801946e:	930c      	str	r3, [sp, #48]	; 0x30
 8019470:	46bb      	mov	fp, r7
 8019472:	b975      	cbnz	r5, 8019492 <_dtoa_r+0x42>
 8019474:	2010      	movs	r0, #16
 8019476:	f7ff f8a9 	bl	80185cc <malloc>
 801947a:	4602      	mov	r2, r0
 801947c:	6260      	str	r0, [r4, #36]	; 0x24
 801947e:	b920      	cbnz	r0, 801948a <_dtoa_r+0x3a>
 8019480:	4ba7      	ldr	r3, [pc, #668]	; (8019720 <_dtoa_r+0x2d0>)
 8019482:	21ea      	movs	r1, #234	; 0xea
 8019484:	48a7      	ldr	r0, [pc, #668]	; (8019724 <_dtoa_r+0x2d4>)
 8019486:	f7ff ff39 	bl	80192fc <__assert_func>
 801948a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801948e:	6005      	str	r5, [r0, #0]
 8019490:	60c5      	str	r5, [r0, #12]
 8019492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019494:	6819      	ldr	r1, [r3, #0]
 8019496:	b151      	cbz	r1, 80194ae <_dtoa_r+0x5e>
 8019498:	685a      	ldr	r2, [r3, #4]
 801949a:	604a      	str	r2, [r1, #4]
 801949c:	2301      	movs	r3, #1
 801949e:	4093      	lsls	r3, r2
 80194a0:	608b      	str	r3, [r1, #8]
 80194a2:	4620      	mov	r0, r4
 80194a4:	f000 fe24 	bl	801a0f0 <_Bfree>
 80194a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194aa:	2200      	movs	r2, #0
 80194ac:	601a      	str	r2, [r3, #0]
 80194ae:	1e3b      	subs	r3, r7, #0
 80194b0:	bfaa      	itet	ge
 80194b2:	2300      	movge	r3, #0
 80194b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80194b8:	f8c8 3000 	strge.w	r3, [r8]
 80194bc:	4b9a      	ldr	r3, [pc, #616]	; (8019728 <_dtoa_r+0x2d8>)
 80194be:	bfbc      	itt	lt
 80194c0:	2201      	movlt	r2, #1
 80194c2:	f8c8 2000 	strlt.w	r2, [r8]
 80194c6:	ea33 030b 	bics.w	r3, r3, fp
 80194ca:	d11b      	bne.n	8019504 <_dtoa_r+0xb4>
 80194cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80194ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80194d2:	6013      	str	r3, [r2, #0]
 80194d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80194d8:	4333      	orrs	r3, r6
 80194da:	f000 8592 	beq.w	801a002 <_dtoa_r+0xbb2>
 80194de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80194e0:	b963      	cbnz	r3, 80194fc <_dtoa_r+0xac>
 80194e2:	4b92      	ldr	r3, [pc, #584]	; (801972c <_dtoa_r+0x2dc>)
 80194e4:	e022      	b.n	801952c <_dtoa_r+0xdc>
 80194e6:	4b92      	ldr	r3, [pc, #584]	; (8019730 <_dtoa_r+0x2e0>)
 80194e8:	9301      	str	r3, [sp, #4]
 80194ea:	3308      	adds	r3, #8
 80194ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80194ee:	6013      	str	r3, [r2, #0]
 80194f0:	9801      	ldr	r0, [sp, #4]
 80194f2:	b013      	add	sp, #76	; 0x4c
 80194f4:	ecbd 8b04 	vpop	{d8-d9}
 80194f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194fc:	4b8b      	ldr	r3, [pc, #556]	; (801972c <_dtoa_r+0x2dc>)
 80194fe:	9301      	str	r3, [sp, #4]
 8019500:	3303      	adds	r3, #3
 8019502:	e7f3      	b.n	80194ec <_dtoa_r+0x9c>
 8019504:	2200      	movs	r2, #0
 8019506:	2300      	movs	r3, #0
 8019508:	4650      	mov	r0, sl
 801950a:	4659      	mov	r1, fp
 801950c:	f7e7 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8019510:	ec4b ab19 	vmov	d9, sl, fp
 8019514:	4680      	mov	r8, r0
 8019516:	b158      	cbz	r0, 8019530 <_dtoa_r+0xe0>
 8019518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801951a:	2301      	movs	r3, #1
 801951c:	6013      	str	r3, [r2, #0]
 801951e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019520:	2b00      	cmp	r3, #0
 8019522:	f000 856b 	beq.w	8019ffc <_dtoa_r+0xbac>
 8019526:	4883      	ldr	r0, [pc, #524]	; (8019734 <_dtoa_r+0x2e4>)
 8019528:	6018      	str	r0, [r3, #0]
 801952a:	1e43      	subs	r3, r0, #1
 801952c:	9301      	str	r3, [sp, #4]
 801952e:	e7df      	b.n	80194f0 <_dtoa_r+0xa0>
 8019530:	ec4b ab10 	vmov	d0, sl, fp
 8019534:	aa10      	add	r2, sp, #64	; 0x40
 8019536:	a911      	add	r1, sp, #68	; 0x44
 8019538:	4620      	mov	r0, r4
 801953a:	f001 f8c1 	bl	801a6c0 <__d2b>
 801953e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8019542:	ee08 0a10 	vmov	s16, r0
 8019546:	2d00      	cmp	r5, #0
 8019548:	f000 8084 	beq.w	8019654 <_dtoa_r+0x204>
 801954c:	ee19 3a90 	vmov	r3, s19
 8019550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8019558:	4656      	mov	r6, sl
 801955a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801955e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8019566:	4b74      	ldr	r3, [pc, #464]	; (8019738 <_dtoa_r+0x2e8>)
 8019568:	2200      	movs	r2, #0
 801956a:	4630      	mov	r0, r6
 801956c:	4639      	mov	r1, r7
 801956e:	f7e6 feab 	bl	80002c8 <__aeabi_dsub>
 8019572:	a365      	add	r3, pc, #404	; (adr r3, 8019708 <_dtoa_r+0x2b8>)
 8019574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019578:	f7e7 f85e 	bl	8000638 <__aeabi_dmul>
 801957c:	a364      	add	r3, pc, #400	; (adr r3, 8019710 <_dtoa_r+0x2c0>)
 801957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019582:	f7e6 fea3 	bl	80002cc <__adddf3>
 8019586:	4606      	mov	r6, r0
 8019588:	4628      	mov	r0, r5
 801958a:	460f      	mov	r7, r1
 801958c:	f7e6 ffea 	bl	8000564 <__aeabi_i2d>
 8019590:	a361      	add	r3, pc, #388	; (adr r3, 8019718 <_dtoa_r+0x2c8>)
 8019592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019596:	f7e7 f84f 	bl	8000638 <__aeabi_dmul>
 801959a:	4602      	mov	r2, r0
 801959c:	460b      	mov	r3, r1
 801959e:	4630      	mov	r0, r6
 80195a0:	4639      	mov	r1, r7
 80195a2:	f7e6 fe93 	bl	80002cc <__adddf3>
 80195a6:	4606      	mov	r6, r0
 80195a8:	460f      	mov	r7, r1
 80195aa:	f7e7 faf5 	bl	8000b98 <__aeabi_d2iz>
 80195ae:	2200      	movs	r2, #0
 80195b0:	9000      	str	r0, [sp, #0]
 80195b2:	2300      	movs	r3, #0
 80195b4:	4630      	mov	r0, r6
 80195b6:	4639      	mov	r1, r7
 80195b8:	f7e7 fab0 	bl	8000b1c <__aeabi_dcmplt>
 80195bc:	b150      	cbz	r0, 80195d4 <_dtoa_r+0x184>
 80195be:	9800      	ldr	r0, [sp, #0]
 80195c0:	f7e6 ffd0 	bl	8000564 <__aeabi_i2d>
 80195c4:	4632      	mov	r2, r6
 80195c6:	463b      	mov	r3, r7
 80195c8:	f7e7 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80195cc:	b910      	cbnz	r0, 80195d4 <_dtoa_r+0x184>
 80195ce:	9b00      	ldr	r3, [sp, #0]
 80195d0:	3b01      	subs	r3, #1
 80195d2:	9300      	str	r3, [sp, #0]
 80195d4:	9b00      	ldr	r3, [sp, #0]
 80195d6:	2b16      	cmp	r3, #22
 80195d8:	d85a      	bhi.n	8019690 <_dtoa_r+0x240>
 80195da:	9a00      	ldr	r2, [sp, #0]
 80195dc:	4b57      	ldr	r3, [pc, #348]	; (801973c <_dtoa_r+0x2ec>)
 80195de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80195e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e6:	ec51 0b19 	vmov	r0, r1, d9
 80195ea:	f7e7 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d050      	beq.n	8019694 <_dtoa_r+0x244>
 80195f2:	9b00      	ldr	r3, [sp, #0]
 80195f4:	3b01      	subs	r3, #1
 80195f6:	9300      	str	r3, [sp, #0]
 80195f8:	2300      	movs	r3, #0
 80195fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80195fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195fe:	1b5d      	subs	r5, r3, r5
 8019600:	1e6b      	subs	r3, r5, #1
 8019602:	9305      	str	r3, [sp, #20]
 8019604:	bf45      	ittet	mi
 8019606:	f1c5 0301 	rsbmi	r3, r5, #1
 801960a:	9304      	strmi	r3, [sp, #16]
 801960c:	2300      	movpl	r3, #0
 801960e:	2300      	movmi	r3, #0
 8019610:	bf4c      	ite	mi
 8019612:	9305      	strmi	r3, [sp, #20]
 8019614:	9304      	strpl	r3, [sp, #16]
 8019616:	9b00      	ldr	r3, [sp, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	db3d      	blt.n	8019698 <_dtoa_r+0x248>
 801961c:	9b05      	ldr	r3, [sp, #20]
 801961e:	9a00      	ldr	r2, [sp, #0]
 8019620:	920a      	str	r2, [sp, #40]	; 0x28
 8019622:	4413      	add	r3, r2
 8019624:	9305      	str	r3, [sp, #20]
 8019626:	2300      	movs	r3, #0
 8019628:	9307      	str	r3, [sp, #28]
 801962a:	9b06      	ldr	r3, [sp, #24]
 801962c:	2b09      	cmp	r3, #9
 801962e:	f200 8089 	bhi.w	8019744 <_dtoa_r+0x2f4>
 8019632:	2b05      	cmp	r3, #5
 8019634:	bfc4      	itt	gt
 8019636:	3b04      	subgt	r3, #4
 8019638:	9306      	strgt	r3, [sp, #24]
 801963a:	9b06      	ldr	r3, [sp, #24]
 801963c:	f1a3 0302 	sub.w	r3, r3, #2
 8019640:	bfcc      	ite	gt
 8019642:	2500      	movgt	r5, #0
 8019644:	2501      	movle	r5, #1
 8019646:	2b03      	cmp	r3, #3
 8019648:	f200 8087 	bhi.w	801975a <_dtoa_r+0x30a>
 801964c:	e8df f003 	tbb	[pc, r3]
 8019650:	59383a2d 	.word	0x59383a2d
 8019654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8019658:	441d      	add	r5, r3
 801965a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801965e:	2b20      	cmp	r3, #32
 8019660:	bfc1      	itttt	gt
 8019662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801966a:	fa0b f303 	lslgt.w	r3, fp, r3
 801966e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019672:	bfda      	itte	le
 8019674:	f1c3 0320 	rsble	r3, r3, #32
 8019678:	fa06 f003 	lslle.w	r0, r6, r3
 801967c:	4318      	orrgt	r0, r3
 801967e:	f7e6 ff61 	bl	8000544 <__aeabi_ui2d>
 8019682:	2301      	movs	r3, #1
 8019684:	4606      	mov	r6, r0
 8019686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801968a:	3d01      	subs	r5, #1
 801968c:	930e      	str	r3, [sp, #56]	; 0x38
 801968e:	e76a      	b.n	8019566 <_dtoa_r+0x116>
 8019690:	2301      	movs	r3, #1
 8019692:	e7b2      	b.n	80195fa <_dtoa_r+0x1aa>
 8019694:	900b      	str	r0, [sp, #44]	; 0x2c
 8019696:	e7b1      	b.n	80195fc <_dtoa_r+0x1ac>
 8019698:	9b04      	ldr	r3, [sp, #16]
 801969a:	9a00      	ldr	r2, [sp, #0]
 801969c:	1a9b      	subs	r3, r3, r2
 801969e:	9304      	str	r3, [sp, #16]
 80196a0:	4253      	negs	r3, r2
 80196a2:	9307      	str	r3, [sp, #28]
 80196a4:	2300      	movs	r3, #0
 80196a6:	930a      	str	r3, [sp, #40]	; 0x28
 80196a8:	e7bf      	b.n	801962a <_dtoa_r+0x1da>
 80196aa:	2300      	movs	r3, #0
 80196ac:	9308      	str	r3, [sp, #32]
 80196ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	dc55      	bgt.n	8019760 <_dtoa_r+0x310>
 80196b4:	2301      	movs	r3, #1
 80196b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80196ba:	461a      	mov	r2, r3
 80196bc:	9209      	str	r2, [sp, #36]	; 0x24
 80196be:	e00c      	b.n	80196da <_dtoa_r+0x28a>
 80196c0:	2301      	movs	r3, #1
 80196c2:	e7f3      	b.n	80196ac <_dtoa_r+0x25c>
 80196c4:	2300      	movs	r3, #0
 80196c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196c8:	9308      	str	r3, [sp, #32]
 80196ca:	9b00      	ldr	r3, [sp, #0]
 80196cc:	4413      	add	r3, r2
 80196ce:	9302      	str	r3, [sp, #8]
 80196d0:	3301      	adds	r3, #1
 80196d2:	2b01      	cmp	r3, #1
 80196d4:	9303      	str	r3, [sp, #12]
 80196d6:	bfb8      	it	lt
 80196d8:	2301      	movlt	r3, #1
 80196da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80196dc:	2200      	movs	r2, #0
 80196de:	6042      	str	r2, [r0, #4]
 80196e0:	2204      	movs	r2, #4
 80196e2:	f102 0614 	add.w	r6, r2, #20
 80196e6:	429e      	cmp	r6, r3
 80196e8:	6841      	ldr	r1, [r0, #4]
 80196ea:	d93d      	bls.n	8019768 <_dtoa_r+0x318>
 80196ec:	4620      	mov	r0, r4
 80196ee:	f000 fcbf 	bl	801a070 <_Balloc>
 80196f2:	9001      	str	r0, [sp, #4]
 80196f4:	2800      	cmp	r0, #0
 80196f6:	d13b      	bne.n	8019770 <_dtoa_r+0x320>
 80196f8:	4b11      	ldr	r3, [pc, #68]	; (8019740 <_dtoa_r+0x2f0>)
 80196fa:	4602      	mov	r2, r0
 80196fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019700:	e6c0      	b.n	8019484 <_dtoa_r+0x34>
 8019702:	2301      	movs	r3, #1
 8019704:	e7df      	b.n	80196c6 <_dtoa_r+0x276>
 8019706:	bf00      	nop
 8019708:	636f4361 	.word	0x636f4361
 801970c:	3fd287a7 	.word	0x3fd287a7
 8019710:	8b60c8b3 	.word	0x8b60c8b3
 8019714:	3fc68a28 	.word	0x3fc68a28
 8019718:	509f79fb 	.word	0x509f79fb
 801971c:	3fd34413 	.word	0x3fd34413
 8019720:	0801c2a8 	.word	0x0801c2a8
 8019724:	0801c466 	.word	0x0801c466
 8019728:	7ff00000 	.word	0x7ff00000
 801972c:	0801c462 	.word	0x0801c462
 8019730:	0801c459 	.word	0x0801c459
 8019734:	0801c285 	.word	0x0801c285
 8019738:	3ff80000 	.word	0x3ff80000
 801973c:	0801c558 	.word	0x0801c558
 8019740:	0801c4c1 	.word	0x0801c4c1
 8019744:	2501      	movs	r5, #1
 8019746:	2300      	movs	r3, #0
 8019748:	9306      	str	r3, [sp, #24]
 801974a:	9508      	str	r5, [sp, #32]
 801974c:	f04f 33ff 	mov.w	r3, #4294967295
 8019750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019754:	2200      	movs	r2, #0
 8019756:	2312      	movs	r3, #18
 8019758:	e7b0      	b.n	80196bc <_dtoa_r+0x26c>
 801975a:	2301      	movs	r3, #1
 801975c:	9308      	str	r3, [sp, #32]
 801975e:	e7f5      	b.n	801974c <_dtoa_r+0x2fc>
 8019760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019766:	e7b8      	b.n	80196da <_dtoa_r+0x28a>
 8019768:	3101      	adds	r1, #1
 801976a:	6041      	str	r1, [r0, #4]
 801976c:	0052      	lsls	r2, r2, #1
 801976e:	e7b8      	b.n	80196e2 <_dtoa_r+0x292>
 8019770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019772:	9a01      	ldr	r2, [sp, #4]
 8019774:	601a      	str	r2, [r3, #0]
 8019776:	9b03      	ldr	r3, [sp, #12]
 8019778:	2b0e      	cmp	r3, #14
 801977a:	f200 809d 	bhi.w	80198b8 <_dtoa_r+0x468>
 801977e:	2d00      	cmp	r5, #0
 8019780:	f000 809a 	beq.w	80198b8 <_dtoa_r+0x468>
 8019784:	9b00      	ldr	r3, [sp, #0]
 8019786:	2b00      	cmp	r3, #0
 8019788:	dd32      	ble.n	80197f0 <_dtoa_r+0x3a0>
 801978a:	4ab7      	ldr	r2, [pc, #732]	; (8019a68 <_dtoa_r+0x618>)
 801978c:	f003 030f 	and.w	r3, r3, #15
 8019790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019798:	9b00      	ldr	r3, [sp, #0]
 801979a:	05d8      	lsls	r0, r3, #23
 801979c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80197a0:	d516      	bpl.n	80197d0 <_dtoa_r+0x380>
 80197a2:	4bb2      	ldr	r3, [pc, #712]	; (8019a6c <_dtoa_r+0x61c>)
 80197a4:	ec51 0b19 	vmov	r0, r1, d9
 80197a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80197ac:	f7e7 f86e 	bl	800088c <__aeabi_ddiv>
 80197b0:	f007 070f 	and.w	r7, r7, #15
 80197b4:	4682      	mov	sl, r0
 80197b6:	468b      	mov	fp, r1
 80197b8:	2503      	movs	r5, #3
 80197ba:	4eac      	ldr	r6, [pc, #688]	; (8019a6c <_dtoa_r+0x61c>)
 80197bc:	b957      	cbnz	r7, 80197d4 <_dtoa_r+0x384>
 80197be:	4642      	mov	r2, r8
 80197c0:	464b      	mov	r3, r9
 80197c2:	4650      	mov	r0, sl
 80197c4:	4659      	mov	r1, fp
 80197c6:	f7e7 f861 	bl	800088c <__aeabi_ddiv>
 80197ca:	4682      	mov	sl, r0
 80197cc:	468b      	mov	fp, r1
 80197ce:	e028      	b.n	8019822 <_dtoa_r+0x3d2>
 80197d0:	2502      	movs	r5, #2
 80197d2:	e7f2      	b.n	80197ba <_dtoa_r+0x36a>
 80197d4:	07f9      	lsls	r1, r7, #31
 80197d6:	d508      	bpl.n	80197ea <_dtoa_r+0x39a>
 80197d8:	4640      	mov	r0, r8
 80197da:	4649      	mov	r1, r9
 80197dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80197e0:	f7e6 ff2a 	bl	8000638 <__aeabi_dmul>
 80197e4:	3501      	adds	r5, #1
 80197e6:	4680      	mov	r8, r0
 80197e8:	4689      	mov	r9, r1
 80197ea:	107f      	asrs	r7, r7, #1
 80197ec:	3608      	adds	r6, #8
 80197ee:	e7e5      	b.n	80197bc <_dtoa_r+0x36c>
 80197f0:	f000 809b 	beq.w	801992a <_dtoa_r+0x4da>
 80197f4:	9b00      	ldr	r3, [sp, #0]
 80197f6:	4f9d      	ldr	r7, [pc, #628]	; (8019a6c <_dtoa_r+0x61c>)
 80197f8:	425e      	negs	r6, r3
 80197fa:	4b9b      	ldr	r3, [pc, #620]	; (8019a68 <_dtoa_r+0x618>)
 80197fc:	f006 020f 	and.w	r2, r6, #15
 8019800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019808:	ec51 0b19 	vmov	r0, r1, d9
 801980c:	f7e6 ff14 	bl	8000638 <__aeabi_dmul>
 8019810:	1136      	asrs	r6, r6, #4
 8019812:	4682      	mov	sl, r0
 8019814:	468b      	mov	fp, r1
 8019816:	2300      	movs	r3, #0
 8019818:	2502      	movs	r5, #2
 801981a:	2e00      	cmp	r6, #0
 801981c:	d17a      	bne.n	8019914 <_dtoa_r+0x4c4>
 801981e:	2b00      	cmp	r3, #0
 8019820:	d1d3      	bne.n	80197ca <_dtoa_r+0x37a>
 8019822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019824:	2b00      	cmp	r3, #0
 8019826:	f000 8082 	beq.w	801992e <_dtoa_r+0x4de>
 801982a:	4b91      	ldr	r3, [pc, #580]	; (8019a70 <_dtoa_r+0x620>)
 801982c:	2200      	movs	r2, #0
 801982e:	4650      	mov	r0, sl
 8019830:	4659      	mov	r1, fp
 8019832:	f7e7 f973 	bl	8000b1c <__aeabi_dcmplt>
 8019836:	2800      	cmp	r0, #0
 8019838:	d079      	beq.n	801992e <_dtoa_r+0x4de>
 801983a:	9b03      	ldr	r3, [sp, #12]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d076      	beq.n	801992e <_dtoa_r+0x4de>
 8019840:	9b02      	ldr	r3, [sp, #8]
 8019842:	2b00      	cmp	r3, #0
 8019844:	dd36      	ble.n	80198b4 <_dtoa_r+0x464>
 8019846:	9b00      	ldr	r3, [sp, #0]
 8019848:	4650      	mov	r0, sl
 801984a:	4659      	mov	r1, fp
 801984c:	1e5f      	subs	r7, r3, #1
 801984e:	2200      	movs	r2, #0
 8019850:	4b88      	ldr	r3, [pc, #544]	; (8019a74 <_dtoa_r+0x624>)
 8019852:	f7e6 fef1 	bl	8000638 <__aeabi_dmul>
 8019856:	9e02      	ldr	r6, [sp, #8]
 8019858:	4682      	mov	sl, r0
 801985a:	468b      	mov	fp, r1
 801985c:	3501      	adds	r5, #1
 801985e:	4628      	mov	r0, r5
 8019860:	f7e6 fe80 	bl	8000564 <__aeabi_i2d>
 8019864:	4652      	mov	r2, sl
 8019866:	465b      	mov	r3, fp
 8019868:	f7e6 fee6 	bl	8000638 <__aeabi_dmul>
 801986c:	4b82      	ldr	r3, [pc, #520]	; (8019a78 <_dtoa_r+0x628>)
 801986e:	2200      	movs	r2, #0
 8019870:	f7e6 fd2c 	bl	80002cc <__adddf3>
 8019874:	46d0      	mov	r8, sl
 8019876:	46d9      	mov	r9, fp
 8019878:	4682      	mov	sl, r0
 801987a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801987e:	2e00      	cmp	r6, #0
 8019880:	d158      	bne.n	8019934 <_dtoa_r+0x4e4>
 8019882:	4b7e      	ldr	r3, [pc, #504]	; (8019a7c <_dtoa_r+0x62c>)
 8019884:	2200      	movs	r2, #0
 8019886:	4640      	mov	r0, r8
 8019888:	4649      	mov	r1, r9
 801988a:	f7e6 fd1d 	bl	80002c8 <__aeabi_dsub>
 801988e:	4652      	mov	r2, sl
 8019890:	465b      	mov	r3, fp
 8019892:	4680      	mov	r8, r0
 8019894:	4689      	mov	r9, r1
 8019896:	f7e7 f95f 	bl	8000b58 <__aeabi_dcmpgt>
 801989a:	2800      	cmp	r0, #0
 801989c:	f040 8295 	bne.w	8019dca <_dtoa_r+0x97a>
 80198a0:	4652      	mov	r2, sl
 80198a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80198a6:	4640      	mov	r0, r8
 80198a8:	4649      	mov	r1, r9
 80198aa:	f7e7 f937 	bl	8000b1c <__aeabi_dcmplt>
 80198ae:	2800      	cmp	r0, #0
 80198b0:	f040 8289 	bne.w	8019dc6 <_dtoa_r+0x976>
 80198b4:	ec5b ab19 	vmov	sl, fp, d9
 80198b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f2c0 8148 	blt.w	8019b50 <_dtoa_r+0x700>
 80198c0:	9a00      	ldr	r2, [sp, #0]
 80198c2:	2a0e      	cmp	r2, #14
 80198c4:	f300 8144 	bgt.w	8019b50 <_dtoa_r+0x700>
 80198c8:	4b67      	ldr	r3, [pc, #412]	; (8019a68 <_dtoa_r+0x618>)
 80198ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80198ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80198d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	f280 80d5 	bge.w	8019a84 <_dtoa_r+0x634>
 80198da:	9b03      	ldr	r3, [sp, #12]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f300 80d1 	bgt.w	8019a84 <_dtoa_r+0x634>
 80198e2:	f040 826f 	bne.w	8019dc4 <_dtoa_r+0x974>
 80198e6:	4b65      	ldr	r3, [pc, #404]	; (8019a7c <_dtoa_r+0x62c>)
 80198e8:	2200      	movs	r2, #0
 80198ea:	4640      	mov	r0, r8
 80198ec:	4649      	mov	r1, r9
 80198ee:	f7e6 fea3 	bl	8000638 <__aeabi_dmul>
 80198f2:	4652      	mov	r2, sl
 80198f4:	465b      	mov	r3, fp
 80198f6:	f7e7 f925 	bl	8000b44 <__aeabi_dcmpge>
 80198fa:	9e03      	ldr	r6, [sp, #12]
 80198fc:	4637      	mov	r7, r6
 80198fe:	2800      	cmp	r0, #0
 8019900:	f040 8245 	bne.w	8019d8e <_dtoa_r+0x93e>
 8019904:	9d01      	ldr	r5, [sp, #4]
 8019906:	2331      	movs	r3, #49	; 0x31
 8019908:	f805 3b01 	strb.w	r3, [r5], #1
 801990c:	9b00      	ldr	r3, [sp, #0]
 801990e:	3301      	adds	r3, #1
 8019910:	9300      	str	r3, [sp, #0]
 8019912:	e240      	b.n	8019d96 <_dtoa_r+0x946>
 8019914:	07f2      	lsls	r2, r6, #31
 8019916:	d505      	bpl.n	8019924 <_dtoa_r+0x4d4>
 8019918:	e9d7 2300 	ldrd	r2, r3, [r7]
 801991c:	f7e6 fe8c 	bl	8000638 <__aeabi_dmul>
 8019920:	3501      	adds	r5, #1
 8019922:	2301      	movs	r3, #1
 8019924:	1076      	asrs	r6, r6, #1
 8019926:	3708      	adds	r7, #8
 8019928:	e777      	b.n	801981a <_dtoa_r+0x3ca>
 801992a:	2502      	movs	r5, #2
 801992c:	e779      	b.n	8019822 <_dtoa_r+0x3d2>
 801992e:	9f00      	ldr	r7, [sp, #0]
 8019930:	9e03      	ldr	r6, [sp, #12]
 8019932:	e794      	b.n	801985e <_dtoa_r+0x40e>
 8019934:	9901      	ldr	r1, [sp, #4]
 8019936:	4b4c      	ldr	r3, [pc, #304]	; (8019a68 <_dtoa_r+0x618>)
 8019938:	4431      	add	r1, r6
 801993a:	910d      	str	r1, [sp, #52]	; 0x34
 801993c:	9908      	ldr	r1, [sp, #32]
 801993e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019946:	2900      	cmp	r1, #0
 8019948:	d043      	beq.n	80199d2 <_dtoa_r+0x582>
 801994a:	494d      	ldr	r1, [pc, #308]	; (8019a80 <_dtoa_r+0x630>)
 801994c:	2000      	movs	r0, #0
 801994e:	f7e6 ff9d 	bl	800088c <__aeabi_ddiv>
 8019952:	4652      	mov	r2, sl
 8019954:	465b      	mov	r3, fp
 8019956:	f7e6 fcb7 	bl	80002c8 <__aeabi_dsub>
 801995a:	9d01      	ldr	r5, [sp, #4]
 801995c:	4682      	mov	sl, r0
 801995e:	468b      	mov	fp, r1
 8019960:	4649      	mov	r1, r9
 8019962:	4640      	mov	r0, r8
 8019964:	f7e7 f918 	bl	8000b98 <__aeabi_d2iz>
 8019968:	4606      	mov	r6, r0
 801996a:	f7e6 fdfb 	bl	8000564 <__aeabi_i2d>
 801996e:	4602      	mov	r2, r0
 8019970:	460b      	mov	r3, r1
 8019972:	4640      	mov	r0, r8
 8019974:	4649      	mov	r1, r9
 8019976:	f7e6 fca7 	bl	80002c8 <__aeabi_dsub>
 801997a:	3630      	adds	r6, #48	; 0x30
 801997c:	f805 6b01 	strb.w	r6, [r5], #1
 8019980:	4652      	mov	r2, sl
 8019982:	465b      	mov	r3, fp
 8019984:	4680      	mov	r8, r0
 8019986:	4689      	mov	r9, r1
 8019988:	f7e7 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 801998c:	2800      	cmp	r0, #0
 801998e:	d163      	bne.n	8019a58 <_dtoa_r+0x608>
 8019990:	4642      	mov	r2, r8
 8019992:	464b      	mov	r3, r9
 8019994:	4936      	ldr	r1, [pc, #216]	; (8019a70 <_dtoa_r+0x620>)
 8019996:	2000      	movs	r0, #0
 8019998:	f7e6 fc96 	bl	80002c8 <__aeabi_dsub>
 801999c:	4652      	mov	r2, sl
 801999e:	465b      	mov	r3, fp
 80199a0:	f7e7 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80199a4:	2800      	cmp	r0, #0
 80199a6:	f040 80b5 	bne.w	8019b14 <_dtoa_r+0x6c4>
 80199aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199ac:	429d      	cmp	r5, r3
 80199ae:	d081      	beq.n	80198b4 <_dtoa_r+0x464>
 80199b0:	4b30      	ldr	r3, [pc, #192]	; (8019a74 <_dtoa_r+0x624>)
 80199b2:	2200      	movs	r2, #0
 80199b4:	4650      	mov	r0, sl
 80199b6:	4659      	mov	r1, fp
 80199b8:	f7e6 fe3e 	bl	8000638 <__aeabi_dmul>
 80199bc:	4b2d      	ldr	r3, [pc, #180]	; (8019a74 <_dtoa_r+0x624>)
 80199be:	4682      	mov	sl, r0
 80199c0:	468b      	mov	fp, r1
 80199c2:	4640      	mov	r0, r8
 80199c4:	4649      	mov	r1, r9
 80199c6:	2200      	movs	r2, #0
 80199c8:	f7e6 fe36 	bl	8000638 <__aeabi_dmul>
 80199cc:	4680      	mov	r8, r0
 80199ce:	4689      	mov	r9, r1
 80199d0:	e7c6      	b.n	8019960 <_dtoa_r+0x510>
 80199d2:	4650      	mov	r0, sl
 80199d4:	4659      	mov	r1, fp
 80199d6:	f7e6 fe2f 	bl	8000638 <__aeabi_dmul>
 80199da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199dc:	9d01      	ldr	r5, [sp, #4]
 80199de:	930f      	str	r3, [sp, #60]	; 0x3c
 80199e0:	4682      	mov	sl, r0
 80199e2:	468b      	mov	fp, r1
 80199e4:	4649      	mov	r1, r9
 80199e6:	4640      	mov	r0, r8
 80199e8:	f7e7 f8d6 	bl	8000b98 <__aeabi_d2iz>
 80199ec:	4606      	mov	r6, r0
 80199ee:	f7e6 fdb9 	bl	8000564 <__aeabi_i2d>
 80199f2:	3630      	adds	r6, #48	; 0x30
 80199f4:	4602      	mov	r2, r0
 80199f6:	460b      	mov	r3, r1
 80199f8:	4640      	mov	r0, r8
 80199fa:	4649      	mov	r1, r9
 80199fc:	f7e6 fc64 	bl	80002c8 <__aeabi_dsub>
 8019a00:	f805 6b01 	strb.w	r6, [r5], #1
 8019a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a06:	429d      	cmp	r5, r3
 8019a08:	4680      	mov	r8, r0
 8019a0a:	4689      	mov	r9, r1
 8019a0c:	f04f 0200 	mov.w	r2, #0
 8019a10:	d124      	bne.n	8019a5c <_dtoa_r+0x60c>
 8019a12:	4b1b      	ldr	r3, [pc, #108]	; (8019a80 <_dtoa_r+0x630>)
 8019a14:	4650      	mov	r0, sl
 8019a16:	4659      	mov	r1, fp
 8019a18:	f7e6 fc58 	bl	80002cc <__adddf3>
 8019a1c:	4602      	mov	r2, r0
 8019a1e:	460b      	mov	r3, r1
 8019a20:	4640      	mov	r0, r8
 8019a22:	4649      	mov	r1, r9
 8019a24:	f7e7 f898 	bl	8000b58 <__aeabi_dcmpgt>
 8019a28:	2800      	cmp	r0, #0
 8019a2a:	d173      	bne.n	8019b14 <_dtoa_r+0x6c4>
 8019a2c:	4652      	mov	r2, sl
 8019a2e:	465b      	mov	r3, fp
 8019a30:	4913      	ldr	r1, [pc, #76]	; (8019a80 <_dtoa_r+0x630>)
 8019a32:	2000      	movs	r0, #0
 8019a34:	f7e6 fc48 	bl	80002c8 <__aeabi_dsub>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	460b      	mov	r3, r1
 8019a3c:	4640      	mov	r0, r8
 8019a3e:	4649      	mov	r1, r9
 8019a40:	f7e7 f86c 	bl	8000b1c <__aeabi_dcmplt>
 8019a44:	2800      	cmp	r0, #0
 8019a46:	f43f af35 	beq.w	80198b4 <_dtoa_r+0x464>
 8019a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019a4c:	1e6b      	subs	r3, r5, #1
 8019a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019a54:	2b30      	cmp	r3, #48	; 0x30
 8019a56:	d0f8      	beq.n	8019a4a <_dtoa_r+0x5fa>
 8019a58:	9700      	str	r7, [sp, #0]
 8019a5a:	e049      	b.n	8019af0 <_dtoa_r+0x6a0>
 8019a5c:	4b05      	ldr	r3, [pc, #20]	; (8019a74 <_dtoa_r+0x624>)
 8019a5e:	f7e6 fdeb 	bl	8000638 <__aeabi_dmul>
 8019a62:	4680      	mov	r8, r0
 8019a64:	4689      	mov	r9, r1
 8019a66:	e7bd      	b.n	80199e4 <_dtoa_r+0x594>
 8019a68:	0801c558 	.word	0x0801c558
 8019a6c:	0801c530 	.word	0x0801c530
 8019a70:	3ff00000 	.word	0x3ff00000
 8019a74:	40240000 	.word	0x40240000
 8019a78:	401c0000 	.word	0x401c0000
 8019a7c:	40140000 	.word	0x40140000
 8019a80:	3fe00000 	.word	0x3fe00000
 8019a84:	9d01      	ldr	r5, [sp, #4]
 8019a86:	4656      	mov	r6, sl
 8019a88:	465f      	mov	r7, fp
 8019a8a:	4642      	mov	r2, r8
 8019a8c:	464b      	mov	r3, r9
 8019a8e:	4630      	mov	r0, r6
 8019a90:	4639      	mov	r1, r7
 8019a92:	f7e6 fefb 	bl	800088c <__aeabi_ddiv>
 8019a96:	f7e7 f87f 	bl	8000b98 <__aeabi_d2iz>
 8019a9a:	4682      	mov	sl, r0
 8019a9c:	f7e6 fd62 	bl	8000564 <__aeabi_i2d>
 8019aa0:	4642      	mov	r2, r8
 8019aa2:	464b      	mov	r3, r9
 8019aa4:	f7e6 fdc8 	bl	8000638 <__aeabi_dmul>
 8019aa8:	4602      	mov	r2, r0
 8019aaa:	460b      	mov	r3, r1
 8019aac:	4630      	mov	r0, r6
 8019aae:	4639      	mov	r1, r7
 8019ab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8019ab4:	f7e6 fc08 	bl	80002c8 <__aeabi_dsub>
 8019ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8019abc:	9e01      	ldr	r6, [sp, #4]
 8019abe:	9f03      	ldr	r7, [sp, #12]
 8019ac0:	1bae      	subs	r6, r5, r6
 8019ac2:	42b7      	cmp	r7, r6
 8019ac4:	4602      	mov	r2, r0
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	d135      	bne.n	8019b36 <_dtoa_r+0x6e6>
 8019aca:	f7e6 fbff 	bl	80002cc <__adddf3>
 8019ace:	4642      	mov	r2, r8
 8019ad0:	464b      	mov	r3, r9
 8019ad2:	4606      	mov	r6, r0
 8019ad4:	460f      	mov	r7, r1
 8019ad6:	f7e7 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8019ada:	b9d0      	cbnz	r0, 8019b12 <_dtoa_r+0x6c2>
 8019adc:	4642      	mov	r2, r8
 8019ade:	464b      	mov	r3, r9
 8019ae0:	4630      	mov	r0, r6
 8019ae2:	4639      	mov	r1, r7
 8019ae4:	f7e7 f810 	bl	8000b08 <__aeabi_dcmpeq>
 8019ae8:	b110      	cbz	r0, 8019af0 <_dtoa_r+0x6a0>
 8019aea:	f01a 0f01 	tst.w	sl, #1
 8019aee:	d110      	bne.n	8019b12 <_dtoa_r+0x6c2>
 8019af0:	4620      	mov	r0, r4
 8019af2:	ee18 1a10 	vmov	r1, s16
 8019af6:	f000 fafb 	bl	801a0f0 <_Bfree>
 8019afa:	2300      	movs	r3, #0
 8019afc:	9800      	ldr	r0, [sp, #0]
 8019afe:	702b      	strb	r3, [r5, #0]
 8019b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b02:	3001      	adds	r0, #1
 8019b04:	6018      	str	r0, [r3, #0]
 8019b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f43f acf1 	beq.w	80194f0 <_dtoa_r+0xa0>
 8019b0e:	601d      	str	r5, [r3, #0]
 8019b10:	e4ee      	b.n	80194f0 <_dtoa_r+0xa0>
 8019b12:	9f00      	ldr	r7, [sp, #0]
 8019b14:	462b      	mov	r3, r5
 8019b16:	461d      	mov	r5, r3
 8019b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019b1c:	2a39      	cmp	r2, #57	; 0x39
 8019b1e:	d106      	bne.n	8019b2e <_dtoa_r+0x6de>
 8019b20:	9a01      	ldr	r2, [sp, #4]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d1f7      	bne.n	8019b16 <_dtoa_r+0x6c6>
 8019b26:	9901      	ldr	r1, [sp, #4]
 8019b28:	2230      	movs	r2, #48	; 0x30
 8019b2a:	3701      	adds	r7, #1
 8019b2c:	700a      	strb	r2, [r1, #0]
 8019b2e:	781a      	ldrb	r2, [r3, #0]
 8019b30:	3201      	adds	r2, #1
 8019b32:	701a      	strb	r2, [r3, #0]
 8019b34:	e790      	b.n	8019a58 <_dtoa_r+0x608>
 8019b36:	4ba6      	ldr	r3, [pc, #664]	; (8019dd0 <_dtoa_r+0x980>)
 8019b38:	2200      	movs	r2, #0
 8019b3a:	f7e6 fd7d 	bl	8000638 <__aeabi_dmul>
 8019b3e:	2200      	movs	r2, #0
 8019b40:	2300      	movs	r3, #0
 8019b42:	4606      	mov	r6, r0
 8019b44:	460f      	mov	r7, r1
 8019b46:	f7e6 ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8019b4a:	2800      	cmp	r0, #0
 8019b4c:	d09d      	beq.n	8019a8a <_dtoa_r+0x63a>
 8019b4e:	e7cf      	b.n	8019af0 <_dtoa_r+0x6a0>
 8019b50:	9a08      	ldr	r2, [sp, #32]
 8019b52:	2a00      	cmp	r2, #0
 8019b54:	f000 80d7 	beq.w	8019d06 <_dtoa_r+0x8b6>
 8019b58:	9a06      	ldr	r2, [sp, #24]
 8019b5a:	2a01      	cmp	r2, #1
 8019b5c:	f300 80ba 	bgt.w	8019cd4 <_dtoa_r+0x884>
 8019b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019b62:	2a00      	cmp	r2, #0
 8019b64:	f000 80b2 	beq.w	8019ccc <_dtoa_r+0x87c>
 8019b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019b6c:	9e07      	ldr	r6, [sp, #28]
 8019b6e:	9d04      	ldr	r5, [sp, #16]
 8019b70:	9a04      	ldr	r2, [sp, #16]
 8019b72:	441a      	add	r2, r3
 8019b74:	9204      	str	r2, [sp, #16]
 8019b76:	9a05      	ldr	r2, [sp, #20]
 8019b78:	2101      	movs	r1, #1
 8019b7a:	441a      	add	r2, r3
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	9205      	str	r2, [sp, #20]
 8019b80:	f000 fb6e 	bl	801a260 <__i2b>
 8019b84:	4607      	mov	r7, r0
 8019b86:	2d00      	cmp	r5, #0
 8019b88:	dd0c      	ble.n	8019ba4 <_dtoa_r+0x754>
 8019b8a:	9b05      	ldr	r3, [sp, #20]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	dd09      	ble.n	8019ba4 <_dtoa_r+0x754>
 8019b90:	42ab      	cmp	r3, r5
 8019b92:	9a04      	ldr	r2, [sp, #16]
 8019b94:	bfa8      	it	ge
 8019b96:	462b      	movge	r3, r5
 8019b98:	1ad2      	subs	r2, r2, r3
 8019b9a:	9204      	str	r2, [sp, #16]
 8019b9c:	9a05      	ldr	r2, [sp, #20]
 8019b9e:	1aed      	subs	r5, r5, r3
 8019ba0:	1ad3      	subs	r3, r2, r3
 8019ba2:	9305      	str	r3, [sp, #20]
 8019ba4:	9b07      	ldr	r3, [sp, #28]
 8019ba6:	b31b      	cbz	r3, 8019bf0 <_dtoa_r+0x7a0>
 8019ba8:	9b08      	ldr	r3, [sp, #32]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	f000 80af 	beq.w	8019d0e <_dtoa_r+0x8be>
 8019bb0:	2e00      	cmp	r6, #0
 8019bb2:	dd13      	ble.n	8019bdc <_dtoa_r+0x78c>
 8019bb4:	4639      	mov	r1, r7
 8019bb6:	4632      	mov	r2, r6
 8019bb8:	4620      	mov	r0, r4
 8019bba:	f000 fc11 	bl	801a3e0 <__pow5mult>
 8019bbe:	ee18 2a10 	vmov	r2, s16
 8019bc2:	4601      	mov	r1, r0
 8019bc4:	4607      	mov	r7, r0
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f000 fb60 	bl	801a28c <__multiply>
 8019bcc:	ee18 1a10 	vmov	r1, s16
 8019bd0:	4680      	mov	r8, r0
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	f000 fa8c 	bl	801a0f0 <_Bfree>
 8019bd8:	ee08 8a10 	vmov	s16, r8
 8019bdc:	9b07      	ldr	r3, [sp, #28]
 8019bde:	1b9a      	subs	r2, r3, r6
 8019be0:	d006      	beq.n	8019bf0 <_dtoa_r+0x7a0>
 8019be2:	ee18 1a10 	vmov	r1, s16
 8019be6:	4620      	mov	r0, r4
 8019be8:	f000 fbfa 	bl	801a3e0 <__pow5mult>
 8019bec:	ee08 0a10 	vmov	s16, r0
 8019bf0:	2101      	movs	r1, #1
 8019bf2:	4620      	mov	r0, r4
 8019bf4:	f000 fb34 	bl	801a260 <__i2b>
 8019bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	4606      	mov	r6, r0
 8019bfe:	f340 8088 	ble.w	8019d12 <_dtoa_r+0x8c2>
 8019c02:	461a      	mov	r2, r3
 8019c04:	4601      	mov	r1, r0
 8019c06:	4620      	mov	r0, r4
 8019c08:	f000 fbea 	bl	801a3e0 <__pow5mult>
 8019c0c:	9b06      	ldr	r3, [sp, #24]
 8019c0e:	2b01      	cmp	r3, #1
 8019c10:	4606      	mov	r6, r0
 8019c12:	f340 8081 	ble.w	8019d18 <_dtoa_r+0x8c8>
 8019c16:	f04f 0800 	mov.w	r8, #0
 8019c1a:	6933      	ldr	r3, [r6, #16]
 8019c1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019c20:	6918      	ldr	r0, [r3, #16]
 8019c22:	f000 facd 	bl	801a1c0 <__hi0bits>
 8019c26:	f1c0 0020 	rsb	r0, r0, #32
 8019c2a:	9b05      	ldr	r3, [sp, #20]
 8019c2c:	4418      	add	r0, r3
 8019c2e:	f010 001f 	ands.w	r0, r0, #31
 8019c32:	f000 8092 	beq.w	8019d5a <_dtoa_r+0x90a>
 8019c36:	f1c0 0320 	rsb	r3, r0, #32
 8019c3a:	2b04      	cmp	r3, #4
 8019c3c:	f340 808a 	ble.w	8019d54 <_dtoa_r+0x904>
 8019c40:	f1c0 001c 	rsb	r0, r0, #28
 8019c44:	9b04      	ldr	r3, [sp, #16]
 8019c46:	4403      	add	r3, r0
 8019c48:	9304      	str	r3, [sp, #16]
 8019c4a:	9b05      	ldr	r3, [sp, #20]
 8019c4c:	4403      	add	r3, r0
 8019c4e:	4405      	add	r5, r0
 8019c50:	9305      	str	r3, [sp, #20]
 8019c52:	9b04      	ldr	r3, [sp, #16]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	dd07      	ble.n	8019c68 <_dtoa_r+0x818>
 8019c58:	ee18 1a10 	vmov	r1, s16
 8019c5c:	461a      	mov	r2, r3
 8019c5e:	4620      	mov	r0, r4
 8019c60:	f000 fc18 	bl	801a494 <__lshift>
 8019c64:	ee08 0a10 	vmov	s16, r0
 8019c68:	9b05      	ldr	r3, [sp, #20]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	dd05      	ble.n	8019c7a <_dtoa_r+0x82a>
 8019c6e:	4631      	mov	r1, r6
 8019c70:	461a      	mov	r2, r3
 8019c72:	4620      	mov	r0, r4
 8019c74:	f000 fc0e 	bl	801a494 <__lshift>
 8019c78:	4606      	mov	r6, r0
 8019c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d06e      	beq.n	8019d5e <_dtoa_r+0x90e>
 8019c80:	ee18 0a10 	vmov	r0, s16
 8019c84:	4631      	mov	r1, r6
 8019c86:	f000 fc75 	bl	801a574 <__mcmp>
 8019c8a:	2800      	cmp	r0, #0
 8019c8c:	da67      	bge.n	8019d5e <_dtoa_r+0x90e>
 8019c8e:	9b00      	ldr	r3, [sp, #0]
 8019c90:	3b01      	subs	r3, #1
 8019c92:	ee18 1a10 	vmov	r1, s16
 8019c96:	9300      	str	r3, [sp, #0]
 8019c98:	220a      	movs	r2, #10
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	f000 fa49 	bl	801a134 <__multadd>
 8019ca2:	9b08      	ldr	r3, [sp, #32]
 8019ca4:	ee08 0a10 	vmov	s16, r0
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	f000 81b1 	beq.w	801a010 <_dtoa_r+0xbc0>
 8019cae:	2300      	movs	r3, #0
 8019cb0:	4639      	mov	r1, r7
 8019cb2:	220a      	movs	r2, #10
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	f000 fa3d 	bl	801a134 <__multadd>
 8019cba:	9b02      	ldr	r3, [sp, #8]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	4607      	mov	r7, r0
 8019cc0:	f300 808e 	bgt.w	8019de0 <_dtoa_r+0x990>
 8019cc4:	9b06      	ldr	r3, [sp, #24]
 8019cc6:	2b02      	cmp	r3, #2
 8019cc8:	dc51      	bgt.n	8019d6e <_dtoa_r+0x91e>
 8019cca:	e089      	b.n	8019de0 <_dtoa_r+0x990>
 8019ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019cd2:	e74b      	b.n	8019b6c <_dtoa_r+0x71c>
 8019cd4:	9b03      	ldr	r3, [sp, #12]
 8019cd6:	1e5e      	subs	r6, r3, #1
 8019cd8:	9b07      	ldr	r3, [sp, #28]
 8019cda:	42b3      	cmp	r3, r6
 8019cdc:	bfbf      	itttt	lt
 8019cde:	9b07      	ldrlt	r3, [sp, #28]
 8019ce0:	9607      	strlt	r6, [sp, #28]
 8019ce2:	1af2      	sublt	r2, r6, r3
 8019ce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8019ce6:	bfb6      	itet	lt
 8019ce8:	189b      	addlt	r3, r3, r2
 8019cea:	1b9e      	subge	r6, r3, r6
 8019cec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8019cee:	9b03      	ldr	r3, [sp, #12]
 8019cf0:	bfb8      	it	lt
 8019cf2:	2600      	movlt	r6, #0
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	bfb7      	itett	lt
 8019cf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8019cfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8019d00:	1a9d      	sublt	r5, r3, r2
 8019d02:	2300      	movlt	r3, #0
 8019d04:	e734      	b.n	8019b70 <_dtoa_r+0x720>
 8019d06:	9e07      	ldr	r6, [sp, #28]
 8019d08:	9d04      	ldr	r5, [sp, #16]
 8019d0a:	9f08      	ldr	r7, [sp, #32]
 8019d0c:	e73b      	b.n	8019b86 <_dtoa_r+0x736>
 8019d0e:	9a07      	ldr	r2, [sp, #28]
 8019d10:	e767      	b.n	8019be2 <_dtoa_r+0x792>
 8019d12:	9b06      	ldr	r3, [sp, #24]
 8019d14:	2b01      	cmp	r3, #1
 8019d16:	dc18      	bgt.n	8019d4a <_dtoa_r+0x8fa>
 8019d18:	f1ba 0f00 	cmp.w	sl, #0
 8019d1c:	d115      	bne.n	8019d4a <_dtoa_r+0x8fa>
 8019d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019d22:	b993      	cbnz	r3, 8019d4a <_dtoa_r+0x8fa>
 8019d24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019d28:	0d1b      	lsrs	r3, r3, #20
 8019d2a:	051b      	lsls	r3, r3, #20
 8019d2c:	b183      	cbz	r3, 8019d50 <_dtoa_r+0x900>
 8019d2e:	9b04      	ldr	r3, [sp, #16]
 8019d30:	3301      	adds	r3, #1
 8019d32:	9304      	str	r3, [sp, #16]
 8019d34:	9b05      	ldr	r3, [sp, #20]
 8019d36:	3301      	adds	r3, #1
 8019d38:	9305      	str	r3, [sp, #20]
 8019d3a:	f04f 0801 	mov.w	r8, #1
 8019d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	f47f af6a 	bne.w	8019c1a <_dtoa_r+0x7ca>
 8019d46:	2001      	movs	r0, #1
 8019d48:	e76f      	b.n	8019c2a <_dtoa_r+0x7da>
 8019d4a:	f04f 0800 	mov.w	r8, #0
 8019d4e:	e7f6      	b.n	8019d3e <_dtoa_r+0x8ee>
 8019d50:	4698      	mov	r8, r3
 8019d52:	e7f4      	b.n	8019d3e <_dtoa_r+0x8ee>
 8019d54:	f43f af7d 	beq.w	8019c52 <_dtoa_r+0x802>
 8019d58:	4618      	mov	r0, r3
 8019d5a:	301c      	adds	r0, #28
 8019d5c:	e772      	b.n	8019c44 <_dtoa_r+0x7f4>
 8019d5e:	9b03      	ldr	r3, [sp, #12]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	dc37      	bgt.n	8019dd4 <_dtoa_r+0x984>
 8019d64:	9b06      	ldr	r3, [sp, #24]
 8019d66:	2b02      	cmp	r3, #2
 8019d68:	dd34      	ble.n	8019dd4 <_dtoa_r+0x984>
 8019d6a:	9b03      	ldr	r3, [sp, #12]
 8019d6c:	9302      	str	r3, [sp, #8]
 8019d6e:	9b02      	ldr	r3, [sp, #8]
 8019d70:	b96b      	cbnz	r3, 8019d8e <_dtoa_r+0x93e>
 8019d72:	4631      	mov	r1, r6
 8019d74:	2205      	movs	r2, #5
 8019d76:	4620      	mov	r0, r4
 8019d78:	f000 f9dc 	bl	801a134 <__multadd>
 8019d7c:	4601      	mov	r1, r0
 8019d7e:	4606      	mov	r6, r0
 8019d80:	ee18 0a10 	vmov	r0, s16
 8019d84:	f000 fbf6 	bl	801a574 <__mcmp>
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	f73f adbb 	bgt.w	8019904 <_dtoa_r+0x4b4>
 8019d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d90:	9d01      	ldr	r5, [sp, #4]
 8019d92:	43db      	mvns	r3, r3
 8019d94:	9300      	str	r3, [sp, #0]
 8019d96:	f04f 0800 	mov.w	r8, #0
 8019d9a:	4631      	mov	r1, r6
 8019d9c:	4620      	mov	r0, r4
 8019d9e:	f000 f9a7 	bl	801a0f0 <_Bfree>
 8019da2:	2f00      	cmp	r7, #0
 8019da4:	f43f aea4 	beq.w	8019af0 <_dtoa_r+0x6a0>
 8019da8:	f1b8 0f00 	cmp.w	r8, #0
 8019dac:	d005      	beq.n	8019dba <_dtoa_r+0x96a>
 8019dae:	45b8      	cmp	r8, r7
 8019db0:	d003      	beq.n	8019dba <_dtoa_r+0x96a>
 8019db2:	4641      	mov	r1, r8
 8019db4:	4620      	mov	r0, r4
 8019db6:	f000 f99b 	bl	801a0f0 <_Bfree>
 8019dba:	4639      	mov	r1, r7
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	f000 f997 	bl	801a0f0 <_Bfree>
 8019dc2:	e695      	b.n	8019af0 <_dtoa_r+0x6a0>
 8019dc4:	2600      	movs	r6, #0
 8019dc6:	4637      	mov	r7, r6
 8019dc8:	e7e1      	b.n	8019d8e <_dtoa_r+0x93e>
 8019dca:	9700      	str	r7, [sp, #0]
 8019dcc:	4637      	mov	r7, r6
 8019dce:	e599      	b.n	8019904 <_dtoa_r+0x4b4>
 8019dd0:	40240000 	.word	0x40240000
 8019dd4:	9b08      	ldr	r3, [sp, #32]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f000 80ca 	beq.w	8019f70 <_dtoa_r+0xb20>
 8019ddc:	9b03      	ldr	r3, [sp, #12]
 8019dde:	9302      	str	r3, [sp, #8]
 8019de0:	2d00      	cmp	r5, #0
 8019de2:	dd05      	ble.n	8019df0 <_dtoa_r+0x9a0>
 8019de4:	4639      	mov	r1, r7
 8019de6:	462a      	mov	r2, r5
 8019de8:	4620      	mov	r0, r4
 8019dea:	f000 fb53 	bl	801a494 <__lshift>
 8019dee:	4607      	mov	r7, r0
 8019df0:	f1b8 0f00 	cmp.w	r8, #0
 8019df4:	d05b      	beq.n	8019eae <_dtoa_r+0xa5e>
 8019df6:	6879      	ldr	r1, [r7, #4]
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f000 f939 	bl	801a070 <_Balloc>
 8019dfe:	4605      	mov	r5, r0
 8019e00:	b928      	cbnz	r0, 8019e0e <_dtoa_r+0x9be>
 8019e02:	4b87      	ldr	r3, [pc, #540]	; (801a020 <_dtoa_r+0xbd0>)
 8019e04:	4602      	mov	r2, r0
 8019e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019e0a:	f7ff bb3b 	b.w	8019484 <_dtoa_r+0x34>
 8019e0e:	693a      	ldr	r2, [r7, #16]
 8019e10:	3202      	adds	r2, #2
 8019e12:	0092      	lsls	r2, r2, #2
 8019e14:	f107 010c 	add.w	r1, r7, #12
 8019e18:	300c      	adds	r0, #12
 8019e1a:	f7fe fbf7 	bl	801860c <memcpy>
 8019e1e:	2201      	movs	r2, #1
 8019e20:	4629      	mov	r1, r5
 8019e22:	4620      	mov	r0, r4
 8019e24:	f000 fb36 	bl	801a494 <__lshift>
 8019e28:	9b01      	ldr	r3, [sp, #4]
 8019e2a:	f103 0901 	add.w	r9, r3, #1
 8019e2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019e32:	4413      	add	r3, r2
 8019e34:	9305      	str	r3, [sp, #20]
 8019e36:	f00a 0301 	and.w	r3, sl, #1
 8019e3a:	46b8      	mov	r8, r7
 8019e3c:	9304      	str	r3, [sp, #16]
 8019e3e:	4607      	mov	r7, r0
 8019e40:	4631      	mov	r1, r6
 8019e42:	ee18 0a10 	vmov	r0, s16
 8019e46:	f7ff fa77 	bl	8019338 <quorem>
 8019e4a:	4641      	mov	r1, r8
 8019e4c:	9002      	str	r0, [sp, #8]
 8019e4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8019e52:	ee18 0a10 	vmov	r0, s16
 8019e56:	f000 fb8d 	bl	801a574 <__mcmp>
 8019e5a:	463a      	mov	r2, r7
 8019e5c:	9003      	str	r0, [sp, #12]
 8019e5e:	4631      	mov	r1, r6
 8019e60:	4620      	mov	r0, r4
 8019e62:	f000 fba3 	bl	801a5ac <__mdiff>
 8019e66:	68c2      	ldr	r2, [r0, #12]
 8019e68:	f109 3bff 	add.w	fp, r9, #4294967295
 8019e6c:	4605      	mov	r5, r0
 8019e6e:	bb02      	cbnz	r2, 8019eb2 <_dtoa_r+0xa62>
 8019e70:	4601      	mov	r1, r0
 8019e72:	ee18 0a10 	vmov	r0, s16
 8019e76:	f000 fb7d 	bl	801a574 <__mcmp>
 8019e7a:	4602      	mov	r2, r0
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	4620      	mov	r0, r4
 8019e80:	9207      	str	r2, [sp, #28]
 8019e82:	f000 f935 	bl	801a0f0 <_Bfree>
 8019e86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019e8a:	ea43 0102 	orr.w	r1, r3, r2
 8019e8e:	9b04      	ldr	r3, [sp, #16]
 8019e90:	430b      	orrs	r3, r1
 8019e92:	464d      	mov	r5, r9
 8019e94:	d10f      	bne.n	8019eb6 <_dtoa_r+0xa66>
 8019e96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8019e9a:	d02a      	beq.n	8019ef2 <_dtoa_r+0xaa2>
 8019e9c:	9b03      	ldr	r3, [sp, #12]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	dd02      	ble.n	8019ea8 <_dtoa_r+0xa58>
 8019ea2:	9b02      	ldr	r3, [sp, #8]
 8019ea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8019ea8:	f88b a000 	strb.w	sl, [fp]
 8019eac:	e775      	b.n	8019d9a <_dtoa_r+0x94a>
 8019eae:	4638      	mov	r0, r7
 8019eb0:	e7ba      	b.n	8019e28 <_dtoa_r+0x9d8>
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	e7e2      	b.n	8019e7c <_dtoa_r+0xa2c>
 8019eb6:	9b03      	ldr	r3, [sp, #12]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	db04      	blt.n	8019ec6 <_dtoa_r+0xa76>
 8019ebc:	9906      	ldr	r1, [sp, #24]
 8019ebe:	430b      	orrs	r3, r1
 8019ec0:	9904      	ldr	r1, [sp, #16]
 8019ec2:	430b      	orrs	r3, r1
 8019ec4:	d122      	bne.n	8019f0c <_dtoa_r+0xabc>
 8019ec6:	2a00      	cmp	r2, #0
 8019ec8:	ddee      	ble.n	8019ea8 <_dtoa_r+0xa58>
 8019eca:	ee18 1a10 	vmov	r1, s16
 8019ece:	2201      	movs	r2, #1
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	f000 fadf 	bl	801a494 <__lshift>
 8019ed6:	4631      	mov	r1, r6
 8019ed8:	ee08 0a10 	vmov	s16, r0
 8019edc:	f000 fb4a 	bl	801a574 <__mcmp>
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	dc03      	bgt.n	8019eec <_dtoa_r+0xa9c>
 8019ee4:	d1e0      	bne.n	8019ea8 <_dtoa_r+0xa58>
 8019ee6:	f01a 0f01 	tst.w	sl, #1
 8019eea:	d0dd      	beq.n	8019ea8 <_dtoa_r+0xa58>
 8019eec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8019ef0:	d1d7      	bne.n	8019ea2 <_dtoa_r+0xa52>
 8019ef2:	2339      	movs	r3, #57	; 0x39
 8019ef4:	f88b 3000 	strb.w	r3, [fp]
 8019ef8:	462b      	mov	r3, r5
 8019efa:	461d      	mov	r5, r3
 8019efc:	3b01      	subs	r3, #1
 8019efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019f02:	2a39      	cmp	r2, #57	; 0x39
 8019f04:	d071      	beq.n	8019fea <_dtoa_r+0xb9a>
 8019f06:	3201      	adds	r2, #1
 8019f08:	701a      	strb	r2, [r3, #0]
 8019f0a:	e746      	b.n	8019d9a <_dtoa_r+0x94a>
 8019f0c:	2a00      	cmp	r2, #0
 8019f0e:	dd07      	ble.n	8019f20 <_dtoa_r+0xad0>
 8019f10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8019f14:	d0ed      	beq.n	8019ef2 <_dtoa_r+0xaa2>
 8019f16:	f10a 0301 	add.w	r3, sl, #1
 8019f1a:	f88b 3000 	strb.w	r3, [fp]
 8019f1e:	e73c      	b.n	8019d9a <_dtoa_r+0x94a>
 8019f20:	9b05      	ldr	r3, [sp, #20]
 8019f22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8019f26:	4599      	cmp	r9, r3
 8019f28:	d047      	beq.n	8019fba <_dtoa_r+0xb6a>
 8019f2a:	ee18 1a10 	vmov	r1, s16
 8019f2e:	2300      	movs	r3, #0
 8019f30:	220a      	movs	r2, #10
 8019f32:	4620      	mov	r0, r4
 8019f34:	f000 f8fe 	bl	801a134 <__multadd>
 8019f38:	45b8      	cmp	r8, r7
 8019f3a:	ee08 0a10 	vmov	s16, r0
 8019f3e:	f04f 0300 	mov.w	r3, #0
 8019f42:	f04f 020a 	mov.w	r2, #10
 8019f46:	4641      	mov	r1, r8
 8019f48:	4620      	mov	r0, r4
 8019f4a:	d106      	bne.n	8019f5a <_dtoa_r+0xb0a>
 8019f4c:	f000 f8f2 	bl	801a134 <__multadd>
 8019f50:	4680      	mov	r8, r0
 8019f52:	4607      	mov	r7, r0
 8019f54:	f109 0901 	add.w	r9, r9, #1
 8019f58:	e772      	b.n	8019e40 <_dtoa_r+0x9f0>
 8019f5a:	f000 f8eb 	bl	801a134 <__multadd>
 8019f5e:	4639      	mov	r1, r7
 8019f60:	4680      	mov	r8, r0
 8019f62:	2300      	movs	r3, #0
 8019f64:	220a      	movs	r2, #10
 8019f66:	4620      	mov	r0, r4
 8019f68:	f000 f8e4 	bl	801a134 <__multadd>
 8019f6c:	4607      	mov	r7, r0
 8019f6e:	e7f1      	b.n	8019f54 <_dtoa_r+0xb04>
 8019f70:	9b03      	ldr	r3, [sp, #12]
 8019f72:	9302      	str	r3, [sp, #8]
 8019f74:	9d01      	ldr	r5, [sp, #4]
 8019f76:	ee18 0a10 	vmov	r0, s16
 8019f7a:	4631      	mov	r1, r6
 8019f7c:	f7ff f9dc 	bl	8019338 <quorem>
 8019f80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8019f84:	9b01      	ldr	r3, [sp, #4]
 8019f86:	f805 ab01 	strb.w	sl, [r5], #1
 8019f8a:	1aea      	subs	r2, r5, r3
 8019f8c:	9b02      	ldr	r3, [sp, #8]
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	dd09      	ble.n	8019fa6 <_dtoa_r+0xb56>
 8019f92:	ee18 1a10 	vmov	r1, s16
 8019f96:	2300      	movs	r3, #0
 8019f98:	220a      	movs	r2, #10
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	f000 f8ca 	bl	801a134 <__multadd>
 8019fa0:	ee08 0a10 	vmov	s16, r0
 8019fa4:	e7e7      	b.n	8019f76 <_dtoa_r+0xb26>
 8019fa6:	9b02      	ldr	r3, [sp, #8]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	bfc8      	it	gt
 8019fac:	461d      	movgt	r5, r3
 8019fae:	9b01      	ldr	r3, [sp, #4]
 8019fb0:	bfd8      	it	le
 8019fb2:	2501      	movle	r5, #1
 8019fb4:	441d      	add	r5, r3
 8019fb6:	f04f 0800 	mov.w	r8, #0
 8019fba:	ee18 1a10 	vmov	r1, s16
 8019fbe:	2201      	movs	r2, #1
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	f000 fa67 	bl	801a494 <__lshift>
 8019fc6:	4631      	mov	r1, r6
 8019fc8:	ee08 0a10 	vmov	s16, r0
 8019fcc:	f000 fad2 	bl	801a574 <__mcmp>
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	dc91      	bgt.n	8019ef8 <_dtoa_r+0xaa8>
 8019fd4:	d102      	bne.n	8019fdc <_dtoa_r+0xb8c>
 8019fd6:	f01a 0f01 	tst.w	sl, #1
 8019fda:	d18d      	bne.n	8019ef8 <_dtoa_r+0xaa8>
 8019fdc:	462b      	mov	r3, r5
 8019fde:	461d      	mov	r5, r3
 8019fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019fe4:	2a30      	cmp	r2, #48	; 0x30
 8019fe6:	d0fa      	beq.n	8019fde <_dtoa_r+0xb8e>
 8019fe8:	e6d7      	b.n	8019d9a <_dtoa_r+0x94a>
 8019fea:	9a01      	ldr	r2, [sp, #4]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d184      	bne.n	8019efa <_dtoa_r+0xaaa>
 8019ff0:	9b00      	ldr	r3, [sp, #0]
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	9300      	str	r3, [sp, #0]
 8019ff6:	2331      	movs	r3, #49	; 0x31
 8019ff8:	7013      	strb	r3, [r2, #0]
 8019ffa:	e6ce      	b.n	8019d9a <_dtoa_r+0x94a>
 8019ffc:	4b09      	ldr	r3, [pc, #36]	; (801a024 <_dtoa_r+0xbd4>)
 8019ffe:	f7ff ba95 	b.w	801952c <_dtoa_r+0xdc>
 801a002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a004:	2b00      	cmp	r3, #0
 801a006:	f47f aa6e 	bne.w	80194e6 <_dtoa_r+0x96>
 801a00a:	4b07      	ldr	r3, [pc, #28]	; (801a028 <_dtoa_r+0xbd8>)
 801a00c:	f7ff ba8e 	b.w	801952c <_dtoa_r+0xdc>
 801a010:	9b02      	ldr	r3, [sp, #8]
 801a012:	2b00      	cmp	r3, #0
 801a014:	dcae      	bgt.n	8019f74 <_dtoa_r+0xb24>
 801a016:	9b06      	ldr	r3, [sp, #24]
 801a018:	2b02      	cmp	r3, #2
 801a01a:	f73f aea8 	bgt.w	8019d6e <_dtoa_r+0x91e>
 801a01e:	e7a9      	b.n	8019f74 <_dtoa_r+0xb24>
 801a020:	0801c4c1 	.word	0x0801c4c1
 801a024:	0801c284 	.word	0x0801c284
 801a028:	0801c459 	.word	0x0801c459

0801a02c <fiprintf>:
 801a02c:	b40e      	push	{r1, r2, r3}
 801a02e:	b503      	push	{r0, r1, lr}
 801a030:	4601      	mov	r1, r0
 801a032:	ab03      	add	r3, sp, #12
 801a034:	4805      	ldr	r0, [pc, #20]	; (801a04c <fiprintf+0x20>)
 801a036:	f853 2b04 	ldr.w	r2, [r3], #4
 801a03a:	6800      	ldr	r0, [r0, #0]
 801a03c:	9301      	str	r3, [sp, #4]
 801a03e:	f000 fd37 	bl	801aab0 <_vfiprintf_r>
 801a042:	b002      	add	sp, #8
 801a044:	f85d eb04 	ldr.w	lr, [sp], #4
 801a048:	b003      	add	sp, #12
 801a04a:	4770      	bx	lr
 801a04c:	20000130 	.word	0x20000130

0801a050 <_localeconv_r>:
 801a050:	4800      	ldr	r0, [pc, #0]	; (801a054 <_localeconv_r+0x4>)
 801a052:	4770      	bx	lr
 801a054:	20000284 	.word	0x20000284

0801a058 <__malloc_lock>:
 801a058:	4801      	ldr	r0, [pc, #4]	; (801a060 <__malloc_lock+0x8>)
 801a05a:	f001 b8d9 	b.w	801b210 <__retarget_lock_acquire_recursive>
 801a05e:	bf00      	nop
 801a060:	20003070 	.word	0x20003070

0801a064 <__malloc_unlock>:
 801a064:	4801      	ldr	r0, [pc, #4]	; (801a06c <__malloc_unlock+0x8>)
 801a066:	f001 b8d4 	b.w	801b212 <__retarget_lock_release_recursive>
 801a06a:	bf00      	nop
 801a06c:	20003070 	.word	0x20003070

0801a070 <_Balloc>:
 801a070:	b570      	push	{r4, r5, r6, lr}
 801a072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a074:	4604      	mov	r4, r0
 801a076:	460d      	mov	r5, r1
 801a078:	b976      	cbnz	r6, 801a098 <_Balloc+0x28>
 801a07a:	2010      	movs	r0, #16
 801a07c:	f7fe faa6 	bl	80185cc <malloc>
 801a080:	4602      	mov	r2, r0
 801a082:	6260      	str	r0, [r4, #36]	; 0x24
 801a084:	b920      	cbnz	r0, 801a090 <_Balloc+0x20>
 801a086:	4b18      	ldr	r3, [pc, #96]	; (801a0e8 <_Balloc+0x78>)
 801a088:	4818      	ldr	r0, [pc, #96]	; (801a0ec <_Balloc+0x7c>)
 801a08a:	2166      	movs	r1, #102	; 0x66
 801a08c:	f7ff f936 	bl	80192fc <__assert_func>
 801a090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a094:	6006      	str	r6, [r0, #0]
 801a096:	60c6      	str	r6, [r0, #12]
 801a098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a09a:	68f3      	ldr	r3, [r6, #12]
 801a09c:	b183      	cbz	r3, 801a0c0 <_Balloc+0x50>
 801a09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a0a6:	b9b8      	cbnz	r0, 801a0d8 <_Balloc+0x68>
 801a0a8:	2101      	movs	r1, #1
 801a0aa:	fa01 f605 	lsl.w	r6, r1, r5
 801a0ae:	1d72      	adds	r2, r6, #5
 801a0b0:	0092      	lsls	r2, r2, #2
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	f000 fb60 	bl	801a778 <_calloc_r>
 801a0b8:	b160      	cbz	r0, 801a0d4 <_Balloc+0x64>
 801a0ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a0be:	e00e      	b.n	801a0de <_Balloc+0x6e>
 801a0c0:	2221      	movs	r2, #33	; 0x21
 801a0c2:	2104      	movs	r1, #4
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f000 fb57 	bl	801a778 <_calloc_r>
 801a0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0cc:	60f0      	str	r0, [r6, #12]
 801a0ce:	68db      	ldr	r3, [r3, #12]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d1e4      	bne.n	801a09e <_Balloc+0x2e>
 801a0d4:	2000      	movs	r0, #0
 801a0d6:	bd70      	pop	{r4, r5, r6, pc}
 801a0d8:	6802      	ldr	r2, [r0, #0]
 801a0da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a0de:	2300      	movs	r3, #0
 801a0e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a0e4:	e7f7      	b.n	801a0d6 <_Balloc+0x66>
 801a0e6:	bf00      	nop
 801a0e8:	0801c2a8 	.word	0x0801c2a8
 801a0ec:	0801c4d2 	.word	0x0801c4d2

0801a0f0 <_Bfree>:
 801a0f0:	b570      	push	{r4, r5, r6, lr}
 801a0f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a0f4:	4605      	mov	r5, r0
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	b976      	cbnz	r6, 801a118 <_Bfree+0x28>
 801a0fa:	2010      	movs	r0, #16
 801a0fc:	f7fe fa66 	bl	80185cc <malloc>
 801a100:	4602      	mov	r2, r0
 801a102:	6268      	str	r0, [r5, #36]	; 0x24
 801a104:	b920      	cbnz	r0, 801a110 <_Bfree+0x20>
 801a106:	4b09      	ldr	r3, [pc, #36]	; (801a12c <_Bfree+0x3c>)
 801a108:	4809      	ldr	r0, [pc, #36]	; (801a130 <_Bfree+0x40>)
 801a10a:	218a      	movs	r1, #138	; 0x8a
 801a10c:	f7ff f8f6 	bl	80192fc <__assert_func>
 801a110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a114:	6006      	str	r6, [r0, #0]
 801a116:	60c6      	str	r6, [r0, #12]
 801a118:	b13c      	cbz	r4, 801a12a <_Bfree+0x3a>
 801a11a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a11c:	6862      	ldr	r2, [r4, #4]
 801a11e:	68db      	ldr	r3, [r3, #12]
 801a120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a124:	6021      	str	r1, [r4, #0]
 801a126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a12a:	bd70      	pop	{r4, r5, r6, pc}
 801a12c:	0801c2a8 	.word	0x0801c2a8
 801a130:	0801c4d2 	.word	0x0801c4d2

0801a134 <__multadd>:
 801a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a138:	690d      	ldr	r5, [r1, #16]
 801a13a:	4607      	mov	r7, r0
 801a13c:	460c      	mov	r4, r1
 801a13e:	461e      	mov	r6, r3
 801a140:	f101 0c14 	add.w	ip, r1, #20
 801a144:	2000      	movs	r0, #0
 801a146:	f8dc 3000 	ldr.w	r3, [ip]
 801a14a:	b299      	uxth	r1, r3
 801a14c:	fb02 6101 	mla	r1, r2, r1, r6
 801a150:	0c1e      	lsrs	r6, r3, #16
 801a152:	0c0b      	lsrs	r3, r1, #16
 801a154:	fb02 3306 	mla	r3, r2, r6, r3
 801a158:	b289      	uxth	r1, r1
 801a15a:	3001      	adds	r0, #1
 801a15c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a160:	4285      	cmp	r5, r0
 801a162:	f84c 1b04 	str.w	r1, [ip], #4
 801a166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a16a:	dcec      	bgt.n	801a146 <__multadd+0x12>
 801a16c:	b30e      	cbz	r6, 801a1b2 <__multadd+0x7e>
 801a16e:	68a3      	ldr	r3, [r4, #8]
 801a170:	42ab      	cmp	r3, r5
 801a172:	dc19      	bgt.n	801a1a8 <__multadd+0x74>
 801a174:	6861      	ldr	r1, [r4, #4]
 801a176:	4638      	mov	r0, r7
 801a178:	3101      	adds	r1, #1
 801a17a:	f7ff ff79 	bl	801a070 <_Balloc>
 801a17e:	4680      	mov	r8, r0
 801a180:	b928      	cbnz	r0, 801a18e <__multadd+0x5a>
 801a182:	4602      	mov	r2, r0
 801a184:	4b0c      	ldr	r3, [pc, #48]	; (801a1b8 <__multadd+0x84>)
 801a186:	480d      	ldr	r0, [pc, #52]	; (801a1bc <__multadd+0x88>)
 801a188:	21b5      	movs	r1, #181	; 0xb5
 801a18a:	f7ff f8b7 	bl	80192fc <__assert_func>
 801a18e:	6922      	ldr	r2, [r4, #16]
 801a190:	3202      	adds	r2, #2
 801a192:	f104 010c 	add.w	r1, r4, #12
 801a196:	0092      	lsls	r2, r2, #2
 801a198:	300c      	adds	r0, #12
 801a19a:	f7fe fa37 	bl	801860c <memcpy>
 801a19e:	4621      	mov	r1, r4
 801a1a0:	4638      	mov	r0, r7
 801a1a2:	f7ff ffa5 	bl	801a0f0 <_Bfree>
 801a1a6:	4644      	mov	r4, r8
 801a1a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a1ac:	3501      	adds	r5, #1
 801a1ae:	615e      	str	r6, [r3, #20]
 801a1b0:	6125      	str	r5, [r4, #16]
 801a1b2:	4620      	mov	r0, r4
 801a1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1b8:	0801c4c1 	.word	0x0801c4c1
 801a1bc:	0801c4d2 	.word	0x0801c4d2

0801a1c0 <__hi0bits>:
 801a1c0:	0c03      	lsrs	r3, r0, #16
 801a1c2:	041b      	lsls	r3, r3, #16
 801a1c4:	b9d3      	cbnz	r3, 801a1fc <__hi0bits+0x3c>
 801a1c6:	0400      	lsls	r0, r0, #16
 801a1c8:	2310      	movs	r3, #16
 801a1ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a1ce:	bf04      	itt	eq
 801a1d0:	0200      	lsleq	r0, r0, #8
 801a1d2:	3308      	addeq	r3, #8
 801a1d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a1d8:	bf04      	itt	eq
 801a1da:	0100      	lsleq	r0, r0, #4
 801a1dc:	3304      	addeq	r3, #4
 801a1de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a1e2:	bf04      	itt	eq
 801a1e4:	0080      	lsleq	r0, r0, #2
 801a1e6:	3302      	addeq	r3, #2
 801a1e8:	2800      	cmp	r0, #0
 801a1ea:	db05      	blt.n	801a1f8 <__hi0bits+0x38>
 801a1ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a1f0:	f103 0301 	add.w	r3, r3, #1
 801a1f4:	bf08      	it	eq
 801a1f6:	2320      	moveq	r3, #32
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	4770      	bx	lr
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	e7e4      	b.n	801a1ca <__hi0bits+0xa>

0801a200 <__lo0bits>:
 801a200:	6803      	ldr	r3, [r0, #0]
 801a202:	f013 0207 	ands.w	r2, r3, #7
 801a206:	4601      	mov	r1, r0
 801a208:	d00b      	beq.n	801a222 <__lo0bits+0x22>
 801a20a:	07da      	lsls	r2, r3, #31
 801a20c:	d423      	bmi.n	801a256 <__lo0bits+0x56>
 801a20e:	0798      	lsls	r0, r3, #30
 801a210:	bf49      	itett	mi
 801a212:	085b      	lsrmi	r3, r3, #1
 801a214:	089b      	lsrpl	r3, r3, #2
 801a216:	2001      	movmi	r0, #1
 801a218:	600b      	strmi	r3, [r1, #0]
 801a21a:	bf5c      	itt	pl
 801a21c:	600b      	strpl	r3, [r1, #0]
 801a21e:	2002      	movpl	r0, #2
 801a220:	4770      	bx	lr
 801a222:	b298      	uxth	r0, r3
 801a224:	b9a8      	cbnz	r0, 801a252 <__lo0bits+0x52>
 801a226:	0c1b      	lsrs	r3, r3, #16
 801a228:	2010      	movs	r0, #16
 801a22a:	b2da      	uxtb	r2, r3
 801a22c:	b90a      	cbnz	r2, 801a232 <__lo0bits+0x32>
 801a22e:	3008      	adds	r0, #8
 801a230:	0a1b      	lsrs	r3, r3, #8
 801a232:	071a      	lsls	r2, r3, #28
 801a234:	bf04      	itt	eq
 801a236:	091b      	lsreq	r3, r3, #4
 801a238:	3004      	addeq	r0, #4
 801a23a:	079a      	lsls	r2, r3, #30
 801a23c:	bf04      	itt	eq
 801a23e:	089b      	lsreq	r3, r3, #2
 801a240:	3002      	addeq	r0, #2
 801a242:	07da      	lsls	r2, r3, #31
 801a244:	d403      	bmi.n	801a24e <__lo0bits+0x4e>
 801a246:	085b      	lsrs	r3, r3, #1
 801a248:	f100 0001 	add.w	r0, r0, #1
 801a24c:	d005      	beq.n	801a25a <__lo0bits+0x5a>
 801a24e:	600b      	str	r3, [r1, #0]
 801a250:	4770      	bx	lr
 801a252:	4610      	mov	r0, r2
 801a254:	e7e9      	b.n	801a22a <__lo0bits+0x2a>
 801a256:	2000      	movs	r0, #0
 801a258:	4770      	bx	lr
 801a25a:	2020      	movs	r0, #32
 801a25c:	4770      	bx	lr
	...

0801a260 <__i2b>:
 801a260:	b510      	push	{r4, lr}
 801a262:	460c      	mov	r4, r1
 801a264:	2101      	movs	r1, #1
 801a266:	f7ff ff03 	bl	801a070 <_Balloc>
 801a26a:	4602      	mov	r2, r0
 801a26c:	b928      	cbnz	r0, 801a27a <__i2b+0x1a>
 801a26e:	4b05      	ldr	r3, [pc, #20]	; (801a284 <__i2b+0x24>)
 801a270:	4805      	ldr	r0, [pc, #20]	; (801a288 <__i2b+0x28>)
 801a272:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a276:	f7ff f841 	bl	80192fc <__assert_func>
 801a27a:	2301      	movs	r3, #1
 801a27c:	6144      	str	r4, [r0, #20]
 801a27e:	6103      	str	r3, [r0, #16]
 801a280:	bd10      	pop	{r4, pc}
 801a282:	bf00      	nop
 801a284:	0801c4c1 	.word	0x0801c4c1
 801a288:	0801c4d2 	.word	0x0801c4d2

0801a28c <__multiply>:
 801a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a290:	4691      	mov	r9, r2
 801a292:	690a      	ldr	r2, [r1, #16]
 801a294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a298:	429a      	cmp	r2, r3
 801a29a:	bfb8      	it	lt
 801a29c:	460b      	movlt	r3, r1
 801a29e:	460c      	mov	r4, r1
 801a2a0:	bfbc      	itt	lt
 801a2a2:	464c      	movlt	r4, r9
 801a2a4:	4699      	movlt	r9, r3
 801a2a6:	6927      	ldr	r7, [r4, #16]
 801a2a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a2ac:	68a3      	ldr	r3, [r4, #8]
 801a2ae:	6861      	ldr	r1, [r4, #4]
 801a2b0:	eb07 060a 	add.w	r6, r7, sl
 801a2b4:	42b3      	cmp	r3, r6
 801a2b6:	b085      	sub	sp, #20
 801a2b8:	bfb8      	it	lt
 801a2ba:	3101      	addlt	r1, #1
 801a2bc:	f7ff fed8 	bl	801a070 <_Balloc>
 801a2c0:	b930      	cbnz	r0, 801a2d0 <__multiply+0x44>
 801a2c2:	4602      	mov	r2, r0
 801a2c4:	4b44      	ldr	r3, [pc, #272]	; (801a3d8 <__multiply+0x14c>)
 801a2c6:	4845      	ldr	r0, [pc, #276]	; (801a3dc <__multiply+0x150>)
 801a2c8:	f240 115d 	movw	r1, #349	; 0x15d
 801a2cc:	f7ff f816 	bl	80192fc <__assert_func>
 801a2d0:	f100 0514 	add.w	r5, r0, #20
 801a2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a2d8:	462b      	mov	r3, r5
 801a2da:	2200      	movs	r2, #0
 801a2dc:	4543      	cmp	r3, r8
 801a2de:	d321      	bcc.n	801a324 <__multiply+0x98>
 801a2e0:	f104 0314 	add.w	r3, r4, #20
 801a2e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a2e8:	f109 0314 	add.w	r3, r9, #20
 801a2ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a2f0:	9202      	str	r2, [sp, #8]
 801a2f2:	1b3a      	subs	r2, r7, r4
 801a2f4:	3a15      	subs	r2, #21
 801a2f6:	f022 0203 	bic.w	r2, r2, #3
 801a2fa:	3204      	adds	r2, #4
 801a2fc:	f104 0115 	add.w	r1, r4, #21
 801a300:	428f      	cmp	r7, r1
 801a302:	bf38      	it	cc
 801a304:	2204      	movcc	r2, #4
 801a306:	9201      	str	r2, [sp, #4]
 801a308:	9a02      	ldr	r2, [sp, #8]
 801a30a:	9303      	str	r3, [sp, #12]
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d80c      	bhi.n	801a32a <__multiply+0x9e>
 801a310:	2e00      	cmp	r6, #0
 801a312:	dd03      	ble.n	801a31c <__multiply+0x90>
 801a314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d05a      	beq.n	801a3d2 <__multiply+0x146>
 801a31c:	6106      	str	r6, [r0, #16]
 801a31e:	b005      	add	sp, #20
 801a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a324:	f843 2b04 	str.w	r2, [r3], #4
 801a328:	e7d8      	b.n	801a2dc <__multiply+0x50>
 801a32a:	f8b3 a000 	ldrh.w	sl, [r3]
 801a32e:	f1ba 0f00 	cmp.w	sl, #0
 801a332:	d024      	beq.n	801a37e <__multiply+0xf2>
 801a334:	f104 0e14 	add.w	lr, r4, #20
 801a338:	46a9      	mov	r9, r5
 801a33a:	f04f 0c00 	mov.w	ip, #0
 801a33e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a342:	f8d9 1000 	ldr.w	r1, [r9]
 801a346:	fa1f fb82 	uxth.w	fp, r2
 801a34a:	b289      	uxth	r1, r1
 801a34c:	fb0a 110b 	mla	r1, sl, fp, r1
 801a350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a354:	f8d9 2000 	ldr.w	r2, [r9]
 801a358:	4461      	add	r1, ip
 801a35a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a35e:	fb0a c20b 	mla	r2, sl, fp, ip
 801a362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a366:	b289      	uxth	r1, r1
 801a368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a36c:	4577      	cmp	r7, lr
 801a36e:	f849 1b04 	str.w	r1, [r9], #4
 801a372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a376:	d8e2      	bhi.n	801a33e <__multiply+0xb2>
 801a378:	9a01      	ldr	r2, [sp, #4]
 801a37a:	f845 c002 	str.w	ip, [r5, r2]
 801a37e:	9a03      	ldr	r2, [sp, #12]
 801a380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a384:	3304      	adds	r3, #4
 801a386:	f1b9 0f00 	cmp.w	r9, #0
 801a38a:	d020      	beq.n	801a3ce <__multiply+0x142>
 801a38c:	6829      	ldr	r1, [r5, #0]
 801a38e:	f104 0c14 	add.w	ip, r4, #20
 801a392:	46ae      	mov	lr, r5
 801a394:	f04f 0a00 	mov.w	sl, #0
 801a398:	f8bc b000 	ldrh.w	fp, [ip]
 801a39c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a3a0:	fb09 220b 	mla	r2, r9, fp, r2
 801a3a4:	4492      	add	sl, r2
 801a3a6:	b289      	uxth	r1, r1
 801a3a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801a3ac:	f84e 1b04 	str.w	r1, [lr], #4
 801a3b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a3b4:	f8be 1000 	ldrh.w	r1, [lr]
 801a3b8:	0c12      	lsrs	r2, r2, #16
 801a3ba:	fb09 1102 	mla	r1, r9, r2, r1
 801a3be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801a3c2:	4567      	cmp	r7, ip
 801a3c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a3c8:	d8e6      	bhi.n	801a398 <__multiply+0x10c>
 801a3ca:	9a01      	ldr	r2, [sp, #4]
 801a3cc:	50a9      	str	r1, [r5, r2]
 801a3ce:	3504      	adds	r5, #4
 801a3d0:	e79a      	b.n	801a308 <__multiply+0x7c>
 801a3d2:	3e01      	subs	r6, #1
 801a3d4:	e79c      	b.n	801a310 <__multiply+0x84>
 801a3d6:	bf00      	nop
 801a3d8:	0801c4c1 	.word	0x0801c4c1
 801a3dc:	0801c4d2 	.word	0x0801c4d2

0801a3e0 <__pow5mult>:
 801a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3e4:	4615      	mov	r5, r2
 801a3e6:	f012 0203 	ands.w	r2, r2, #3
 801a3ea:	4606      	mov	r6, r0
 801a3ec:	460f      	mov	r7, r1
 801a3ee:	d007      	beq.n	801a400 <__pow5mult+0x20>
 801a3f0:	4c25      	ldr	r4, [pc, #148]	; (801a488 <__pow5mult+0xa8>)
 801a3f2:	3a01      	subs	r2, #1
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a3fa:	f7ff fe9b 	bl	801a134 <__multadd>
 801a3fe:	4607      	mov	r7, r0
 801a400:	10ad      	asrs	r5, r5, #2
 801a402:	d03d      	beq.n	801a480 <__pow5mult+0xa0>
 801a404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a406:	b97c      	cbnz	r4, 801a428 <__pow5mult+0x48>
 801a408:	2010      	movs	r0, #16
 801a40a:	f7fe f8df 	bl	80185cc <malloc>
 801a40e:	4602      	mov	r2, r0
 801a410:	6270      	str	r0, [r6, #36]	; 0x24
 801a412:	b928      	cbnz	r0, 801a420 <__pow5mult+0x40>
 801a414:	4b1d      	ldr	r3, [pc, #116]	; (801a48c <__pow5mult+0xac>)
 801a416:	481e      	ldr	r0, [pc, #120]	; (801a490 <__pow5mult+0xb0>)
 801a418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a41c:	f7fe ff6e 	bl	80192fc <__assert_func>
 801a420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a424:	6004      	str	r4, [r0, #0]
 801a426:	60c4      	str	r4, [r0, #12]
 801a428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a42c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a430:	b94c      	cbnz	r4, 801a446 <__pow5mult+0x66>
 801a432:	f240 2171 	movw	r1, #625	; 0x271
 801a436:	4630      	mov	r0, r6
 801a438:	f7ff ff12 	bl	801a260 <__i2b>
 801a43c:	2300      	movs	r3, #0
 801a43e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a442:	4604      	mov	r4, r0
 801a444:	6003      	str	r3, [r0, #0]
 801a446:	f04f 0900 	mov.w	r9, #0
 801a44a:	07eb      	lsls	r3, r5, #31
 801a44c:	d50a      	bpl.n	801a464 <__pow5mult+0x84>
 801a44e:	4639      	mov	r1, r7
 801a450:	4622      	mov	r2, r4
 801a452:	4630      	mov	r0, r6
 801a454:	f7ff ff1a 	bl	801a28c <__multiply>
 801a458:	4639      	mov	r1, r7
 801a45a:	4680      	mov	r8, r0
 801a45c:	4630      	mov	r0, r6
 801a45e:	f7ff fe47 	bl	801a0f0 <_Bfree>
 801a462:	4647      	mov	r7, r8
 801a464:	106d      	asrs	r5, r5, #1
 801a466:	d00b      	beq.n	801a480 <__pow5mult+0xa0>
 801a468:	6820      	ldr	r0, [r4, #0]
 801a46a:	b938      	cbnz	r0, 801a47c <__pow5mult+0x9c>
 801a46c:	4622      	mov	r2, r4
 801a46e:	4621      	mov	r1, r4
 801a470:	4630      	mov	r0, r6
 801a472:	f7ff ff0b 	bl	801a28c <__multiply>
 801a476:	6020      	str	r0, [r4, #0]
 801a478:	f8c0 9000 	str.w	r9, [r0]
 801a47c:	4604      	mov	r4, r0
 801a47e:	e7e4      	b.n	801a44a <__pow5mult+0x6a>
 801a480:	4638      	mov	r0, r7
 801a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a486:	bf00      	nop
 801a488:	0801c620 	.word	0x0801c620
 801a48c:	0801c2a8 	.word	0x0801c2a8
 801a490:	0801c4d2 	.word	0x0801c4d2

0801a494 <__lshift>:
 801a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a498:	460c      	mov	r4, r1
 801a49a:	6849      	ldr	r1, [r1, #4]
 801a49c:	6923      	ldr	r3, [r4, #16]
 801a49e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a4a2:	68a3      	ldr	r3, [r4, #8]
 801a4a4:	4607      	mov	r7, r0
 801a4a6:	4691      	mov	r9, r2
 801a4a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a4ac:	f108 0601 	add.w	r6, r8, #1
 801a4b0:	42b3      	cmp	r3, r6
 801a4b2:	db0b      	blt.n	801a4cc <__lshift+0x38>
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	f7ff fddb 	bl	801a070 <_Balloc>
 801a4ba:	4605      	mov	r5, r0
 801a4bc:	b948      	cbnz	r0, 801a4d2 <__lshift+0x3e>
 801a4be:	4602      	mov	r2, r0
 801a4c0:	4b2a      	ldr	r3, [pc, #168]	; (801a56c <__lshift+0xd8>)
 801a4c2:	482b      	ldr	r0, [pc, #172]	; (801a570 <__lshift+0xdc>)
 801a4c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a4c8:	f7fe ff18 	bl	80192fc <__assert_func>
 801a4cc:	3101      	adds	r1, #1
 801a4ce:	005b      	lsls	r3, r3, #1
 801a4d0:	e7ee      	b.n	801a4b0 <__lshift+0x1c>
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	f100 0114 	add.w	r1, r0, #20
 801a4d8:	f100 0210 	add.w	r2, r0, #16
 801a4dc:	4618      	mov	r0, r3
 801a4de:	4553      	cmp	r3, sl
 801a4e0:	db37      	blt.n	801a552 <__lshift+0xbe>
 801a4e2:	6920      	ldr	r0, [r4, #16]
 801a4e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a4e8:	f104 0314 	add.w	r3, r4, #20
 801a4ec:	f019 091f 	ands.w	r9, r9, #31
 801a4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a4f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a4f8:	d02f      	beq.n	801a55a <__lshift+0xc6>
 801a4fa:	f1c9 0e20 	rsb	lr, r9, #32
 801a4fe:	468a      	mov	sl, r1
 801a500:	f04f 0c00 	mov.w	ip, #0
 801a504:	681a      	ldr	r2, [r3, #0]
 801a506:	fa02 f209 	lsl.w	r2, r2, r9
 801a50a:	ea42 020c 	orr.w	r2, r2, ip
 801a50e:	f84a 2b04 	str.w	r2, [sl], #4
 801a512:	f853 2b04 	ldr.w	r2, [r3], #4
 801a516:	4298      	cmp	r0, r3
 801a518:	fa22 fc0e 	lsr.w	ip, r2, lr
 801a51c:	d8f2      	bhi.n	801a504 <__lshift+0x70>
 801a51e:	1b03      	subs	r3, r0, r4
 801a520:	3b15      	subs	r3, #21
 801a522:	f023 0303 	bic.w	r3, r3, #3
 801a526:	3304      	adds	r3, #4
 801a528:	f104 0215 	add.w	r2, r4, #21
 801a52c:	4290      	cmp	r0, r2
 801a52e:	bf38      	it	cc
 801a530:	2304      	movcc	r3, #4
 801a532:	f841 c003 	str.w	ip, [r1, r3]
 801a536:	f1bc 0f00 	cmp.w	ip, #0
 801a53a:	d001      	beq.n	801a540 <__lshift+0xac>
 801a53c:	f108 0602 	add.w	r6, r8, #2
 801a540:	3e01      	subs	r6, #1
 801a542:	4638      	mov	r0, r7
 801a544:	612e      	str	r6, [r5, #16]
 801a546:	4621      	mov	r1, r4
 801a548:	f7ff fdd2 	bl	801a0f0 <_Bfree>
 801a54c:	4628      	mov	r0, r5
 801a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a552:	f842 0f04 	str.w	r0, [r2, #4]!
 801a556:	3301      	adds	r3, #1
 801a558:	e7c1      	b.n	801a4de <__lshift+0x4a>
 801a55a:	3904      	subs	r1, #4
 801a55c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a560:	f841 2f04 	str.w	r2, [r1, #4]!
 801a564:	4298      	cmp	r0, r3
 801a566:	d8f9      	bhi.n	801a55c <__lshift+0xc8>
 801a568:	e7ea      	b.n	801a540 <__lshift+0xac>
 801a56a:	bf00      	nop
 801a56c:	0801c4c1 	.word	0x0801c4c1
 801a570:	0801c4d2 	.word	0x0801c4d2

0801a574 <__mcmp>:
 801a574:	b530      	push	{r4, r5, lr}
 801a576:	6902      	ldr	r2, [r0, #16]
 801a578:	690c      	ldr	r4, [r1, #16]
 801a57a:	1b12      	subs	r2, r2, r4
 801a57c:	d10e      	bne.n	801a59c <__mcmp+0x28>
 801a57e:	f100 0314 	add.w	r3, r0, #20
 801a582:	3114      	adds	r1, #20
 801a584:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a588:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a58c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a590:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a594:	42a5      	cmp	r5, r4
 801a596:	d003      	beq.n	801a5a0 <__mcmp+0x2c>
 801a598:	d305      	bcc.n	801a5a6 <__mcmp+0x32>
 801a59a:	2201      	movs	r2, #1
 801a59c:	4610      	mov	r0, r2
 801a59e:	bd30      	pop	{r4, r5, pc}
 801a5a0:	4283      	cmp	r3, r0
 801a5a2:	d3f3      	bcc.n	801a58c <__mcmp+0x18>
 801a5a4:	e7fa      	b.n	801a59c <__mcmp+0x28>
 801a5a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a5aa:	e7f7      	b.n	801a59c <__mcmp+0x28>

0801a5ac <__mdiff>:
 801a5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b0:	460c      	mov	r4, r1
 801a5b2:	4606      	mov	r6, r0
 801a5b4:	4611      	mov	r1, r2
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	4690      	mov	r8, r2
 801a5ba:	f7ff ffdb 	bl	801a574 <__mcmp>
 801a5be:	1e05      	subs	r5, r0, #0
 801a5c0:	d110      	bne.n	801a5e4 <__mdiff+0x38>
 801a5c2:	4629      	mov	r1, r5
 801a5c4:	4630      	mov	r0, r6
 801a5c6:	f7ff fd53 	bl	801a070 <_Balloc>
 801a5ca:	b930      	cbnz	r0, 801a5da <__mdiff+0x2e>
 801a5cc:	4b3a      	ldr	r3, [pc, #232]	; (801a6b8 <__mdiff+0x10c>)
 801a5ce:	4602      	mov	r2, r0
 801a5d0:	f240 2132 	movw	r1, #562	; 0x232
 801a5d4:	4839      	ldr	r0, [pc, #228]	; (801a6bc <__mdiff+0x110>)
 801a5d6:	f7fe fe91 	bl	80192fc <__assert_func>
 801a5da:	2301      	movs	r3, #1
 801a5dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e4:	bfa4      	itt	ge
 801a5e6:	4643      	movge	r3, r8
 801a5e8:	46a0      	movge	r8, r4
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a5f0:	bfa6      	itte	ge
 801a5f2:	461c      	movge	r4, r3
 801a5f4:	2500      	movge	r5, #0
 801a5f6:	2501      	movlt	r5, #1
 801a5f8:	f7ff fd3a 	bl	801a070 <_Balloc>
 801a5fc:	b920      	cbnz	r0, 801a608 <__mdiff+0x5c>
 801a5fe:	4b2e      	ldr	r3, [pc, #184]	; (801a6b8 <__mdiff+0x10c>)
 801a600:	4602      	mov	r2, r0
 801a602:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a606:	e7e5      	b.n	801a5d4 <__mdiff+0x28>
 801a608:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a60c:	6926      	ldr	r6, [r4, #16]
 801a60e:	60c5      	str	r5, [r0, #12]
 801a610:	f104 0914 	add.w	r9, r4, #20
 801a614:	f108 0514 	add.w	r5, r8, #20
 801a618:	f100 0e14 	add.w	lr, r0, #20
 801a61c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a624:	f108 0210 	add.w	r2, r8, #16
 801a628:	46f2      	mov	sl, lr
 801a62a:	2100      	movs	r1, #0
 801a62c:	f859 3b04 	ldr.w	r3, [r9], #4
 801a630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a634:	fa1f f883 	uxth.w	r8, r3
 801a638:	fa11 f18b 	uxtah	r1, r1, fp
 801a63c:	0c1b      	lsrs	r3, r3, #16
 801a63e:	eba1 0808 	sub.w	r8, r1, r8
 801a642:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a646:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a64a:	fa1f f888 	uxth.w	r8, r8
 801a64e:	1419      	asrs	r1, r3, #16
 801a650:	454e      	cmp	r6, r9
 801a652:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a656:	f84a 3b04 	str.w	r3, [sl], #4
 801a65a:	d8e7      	bhi.n	801a62c <__mdiff+0x80>
 801a65c:	1b33      	subs	r3, r6, r4
 801a65e:	3b15      	subs	r3, #21
 801a660:	f023 0303 	bic.w	r3, r3, #3
 801a664:	3304      	adds	r3, #4
 801a666:	3415      	adds	r4, #21
 801a668:	42a6      	cmp	r6, r4
 801a66a:	bf38      	it	cc
 801a66c:	2304      	movcc	r3, #4
 801a66e:	441d      	add	r5, r3
 801a670:	4473      	add	r3, lr
 801a672:	469e      	mov	lr, r3
 801a674:	462e      	mov	r6, r5
 801a676:	4566      	cmp	r6, ip
 801a678:	d30e      	bcc.n	801a698 <__mdiff+0xec>
 801a67a:	f10c 0203 	add.w	r2, ip, #3
 801a67e:	1b52      	subs	r2, r2, r5
 801a680:	f022 0203 	bic.w	r2, r2, #3
 801a684:	3d03      	subs	r5, #3
 801a686:	45ac      	cmp	ip, r5
 801a688:	bf38      	it	cc
 801a68a:	2200      	movcc	r2, #0
 801a68c:	441a      	add	r2, r3
 801a68e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a692:	b17b      	cbz	r3, 801a6b4 <__mdiff+0x108>
 801a694:	6107      	str	r7, [r0, #16]
 801a696:	e7a3      	b.n	801a5e0 <__mdiff+0x34>
 801a698:	f856 8b04 	ldr.w	r8, [r6], #4
 801a69c:	fa11 f288 	uxtah	r2, r1, r8
 801a6a0:	1414      	asrs	r4, r2, #16
 801a6a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a6a6:	b292      	uxth	r2, r2
 801a6a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a6ac:	f84e 2b04 	str.w	r2, [lr], #4
 801a6b0:	1421      	asrs	r1, r4, #16
 801a6b2:	e7e0      	b.n	801a676 <__mdiff+0xca>
 801a6b4:	3f01      	subs	r7, #1
 801a6b6:	e7ea      	b.n	801a68e <__mdiff+0xe2>
 801a6b8:	0801c4c1 	.word	0x0801c4c1
 801a6bc:	0801c4d2 	.word	0x0801c4d2

0801a6c0 <__d2b>:
 801a6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6c4:	4689      	mov	r9, r1
 801a6c6:	2101      	movs	r1, #1
 801a6c8:	ec57 6b10 	vmov	r6, r7, d0
 801a6cc:	4690      	mov	r8, r2
 801a6ce:	f7ff fccf 	bl	801a070 <_Balloc>
 801a6d2:	4604      	mov	r4, r0
 801a6d4:	b930      	cbnz	r0, 801a6e4 <__d2b+0x24>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	4b25      	ldr	r3, [pc, #148]	; (801a770 <__d2b+0xb0>)
 801a6da:	4826      	ldr	r0, [pc, #152]	; (801a774 <__d2b+0xb4>)
 801a6dc:	f240 310a 	movw	r1, #778	; 0x30a
 801a6e0:	f7fe fe0c 	bl	80192fc <__assert_func>
 801a6e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a6e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a6ec:	bb35      	cbnz	r5, 801a73c <__d2b+0x7c>
 801a6ee:	2e00      	cmp	r6, #0
 801a6f0:	9301      	str	r3, [sp, #4]
 801a6f2:	d028      	beq.n	801a746 <__d2b+0x86>
 801a6f4:	4668      	mov	r0, sp
 801a6f6:	9600      	str	r6, [sp, #0]
 801a6f8:	f7ff fd82 	bl	801a200 <__lo0bits>
 801a6fc:	9900      	ldr	r1, [sp, #0]
 801a6fe:	b300      	cbz	r0, 801a742 <__d2b+0x82>
 801a700:	9a01      	ldr	r2, [sp, #4]
 801a702:	f1c0 0320 	rsb	r3, r0, #32
 801a706:	fa02 f303 	lsl.w	r3, r2, r3
 801a70a:	430b      	orrs	r3, r1
 801a70c:	40c2      	lsrs	r2, r0
 801a70e:	6163      	str	r3, [r4, #20]
 801a710:	9201      	str	r2, [sp, #4]
 801a712:	9b01      	ldr	r3, [sp, #4]
 801a714:	61a3      	str	r3, [r4, #24]
 801a716:	2b00      	cmp	r3, #0
 801a718:	bf14      	ite	ne
 801a71a:	2202      	movne	r2, #2
 801a71c:	2201      	moveq	r2, #1
 801a71e:	6122      	str	r2, [r4, #16]
 801a720:	b1d5      	cbz	r5, 801a758 <__d2b+0x98>
 801a722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a726:	4405      	add	r5, r0
 801a728:	f8c9 5000 	str.w	r5, [r9]
 801a72c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a730:	f8c8 0000 	str.w	r0, [r8]
 801a734:	4620      	mov	r0, r4
 801a736:	b003      	add	sp, #12
 801a738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a740:	e7d5      	b.n	801a6ee <__d2b+0x2e>
 801a742:	6161      	str	r1, [r4, #20]
 801a744:	e7e5      	b.n	801a712 <__d2b+0x52>
 801a746:	a801      	add	r0, sp, #4
 801a748:	f7ff fd5a 	bl	801a200 <__lo0bits>
 801a74c:	9b01      	ldr	r3, [sp, #4]
 801a74e:	6163      	str	r3, [r4, #20]
 801a750:	2201      	movs	r2, #1
 801a752:	6122      	str	r2, [r4, #16]
 801a754:	3020      	adds	r0, #32
 801a756:	e7e3      	b.n	801a720 <__d2b+0x60>
 801a758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a75c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a760:	f8c9 0000 	str.w	r0, [r9]
 801a764:	6918      	ldr	r0, [r3, #16]
 801a766:	f7ff fd2b 	bl	801a1c0 <__hi0bits>
 801a76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a76e:	e7df      	b.n	801a730 <__d2b+0x70>
 801a770:	0801c4c1 	.word	0x0801c4c1
 801a774:	0801c4d2 	.word	0x0801c4d2

0801a778 <_calloc_r>:
 801a778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a77a:	fba1 2402 	umull	r2, r4, r1, r2
 801a77e:	b94c      	cbnz	r4, 801a794 <_calloc_r+0x1c>
 801a780:	4611      	mov	r1, r2
 801a782:	9201      	str	r2, [sp, #4]
 801a784:	f7fd ffc4 	bl	8018710 <_malloc_r>
 801a788:	9a01      	ldr	r2, [sp, #4]
 801a78a:	4605      	mov	r5, r0
 801a78c:	b930      	cbnz	r0, 801a79c <_calloc_r+0x24>
 801a78e:	4628      	mov	r0, r5
 801a790:	b003      	add	sp, #12
 801a792:	bd30      	pop	{r4, r5, pc}
 801a794:	220c      	movs	r2, #12
 801a796:	6002      	str	r2, [r0, #0]
 801a798:	2500      	movs	r5, #0
 801a79a:	e7f8      	b.n	801a78e <_calloc_r+0x16>
 801a79c:	4621      	mov	r1, r4
 801a79e:	f7fd ff43 	bl	8018628 <memset>
 801a7a2:	e7f4      	b.n	801a78e <_calloc_r+0x16>

0801a7a4 <__ssputs_r>:
 801a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7a8:	688e      	ldr	r6, [r1, #8]
 801a7aa:	429e      	cmp	r6, r3
 801a7ac:	4682      	mov	sl, r0
 801a7ae:	460c      	mov	r4, r1
 801a7b0:	4690      	mov	r8, r2
 801a7b2:	461f      	mov	r7, r3
 801a7b4:	d838      	bhi.n	801a828 <__ssputs_r+0x84>
 801a7b6:	898a      	ldrh	r2, [r1, #12]
 801a7b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7bc:	d032      	beq.n	801a824 <__ssputs_r+0x80>
 801a7be:	6825      	ldr	r5, [r4, #0]
 801a7c0:	6909      	ldr	r1, [r1, #16]
 801a7c2:	eba5 0901 	sub.w	r9, r5, r1
 801a7c6:	6965      	ldr	r5, [r4, #20]
 801a7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7d0:	3301      	adds	r3, #1
 801a7d2:	444b      	add	r3, r9
 801a7d4:	106d      	asrs	r5, r5, #1
 801a7d6:	429d      	cmp	r5, r3
 801a7d8:	bf38      	it	cc
 801a7da:	461d      	movcc	r5, r3
 801a7dc:	0553      	lsls	r3, r2, #21
 801a7de:	d531      	bpl.n	801a844 <__ssputs_r+0xa0>
 801a7e0:	4629      	mov	r1, r5
 801a7e2:	f7fd ff95 	bl	8018710 <_malloc_r>
 801a7e6:	4606      	mov	r6, r0
 801a7e8:	b950      	cbnz	r0, 801a800 <__ssputs_r+0x5c>
 801a7ea:	230c      	movs	r3, #12
 801a7ec:	f8ca 3000 	str.w	r3, [sl]
 801a7f0:	89a3      	ldrh	r3, [r4, #12]
 801a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7f6:	81a3      	strh	r3, [r4, #12]
 801a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a800:	6921      	ldr	r1, [r4, #16]
 801a802:	464a      	mov	r2, r9
 801a804:	f7fd ff02 	bl	801860c <memcpy>
 801a808:	89a3      	ldrh	r3, [r4, #12]
 801a80a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a812:	81a3      	strh	r3, [r4, #12]
 801a814:	6126      	str	r6, [r4, #16]
 801a816:	6165      	str	r5, [r4, #20]
 801a818:	444e      	add	r6, r9
 801a81a:	eba5 0509 	sub.w	r5, r5, r9
 801a81e:	6026      	str	r6, [r4, #0]
 801a820:	60a5      	str	r5, [r4, #8]
 801a822:	463e      	mov	r6, r7
 801a824:	42be      	cmp	r6, r7
 801a826:	d900      	bls.n	801a82a <__ssputs_r+0x86>
 801a828:	463e      	mov	r6, r7
 801a82a:	6820      	ldr	r0, [r4, #0]
 801a82c:	4632      	mov	r2, r6
 801a82e:	4641      	mov	r1, r8
 801a830:	f000 fd68 	bl	801b304 <memmove>
 801a834:	68a3      	ldr	r3, [r4, #8]
 801a836:	1b9b      	subs	r3, r3, r6
 801a838:	60a3      	str	r3, [r4, #8]
 801a83a:	6823      	ldr	r3, [r4, #0]
 801a83c:	4433      	add	r3, r6
 801a83e:	6023      	str	r3, [r4, #0]
 801a840:	2000      	movs	r0, #0
 801a842:	e7db      	b.n	801a7fc <__ssputs_r+0x58>
 801a844:	462a      	mov	r2, r5
 801a846:	f000 fd77 	bl	801b338 <_realloc_r>
 801a84a:	4606      	mov	r6, r0
 801a84c:	2800      	cmp	r0, #0
 801a84e:	d1e1      	bne.n	801a814 <__ssputs_r+0x70>
 801a850:	6921      	ldr	r1, [r4, #16]
 801a852:	4650      	mov	r0, sl
 801a854:	f7fd fef0 	bl	8018638 <_free_r>
 801a858:	e7c7      	b.n	801a7ea <__ssputs_r+0x46>
	...

0801a85c <_svfiprintf_r>:
 801a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a860:	4698      	mov	r8, r3
 801a862:	898b      	ldrh	r3, [r1, #12]
 801a864:	061b      	lsls	r3, r3, #24
 801a866:	b09d      	sub	sp, #116	; 0x74
 801a868:	4607      	mov	r7, r0
 801a86a:	460d      	mov	r5, r1
 801a86c:	4614      	mov	r4, r2
 801a86e:	d50e      	bpl.n	801a88e <_svfiprintf_r+0x32>
 801a870:	690b      	ldr	r3, [r1, #16]
 801a872:	b963      	cbnz	r3, 801a88e <_svfiprintf_r+0x32>
 801a874:	2140      	movs	r1, #64	; 0x40
 801a876:	f7fd ff4b 	bl	8018710 <_malloc_r>
 801a87a:	6028      	str	r0, [r5, #0]
 801a87c:	6128      	str	r0, [r5, #16]
 801a87e:	b920      	cbnz	r0, 801a88a <_svfiprintf_r+0x2e>
 801a880:	230c      	movs	r3, #12
 801a882:	603b      	str	r3, [r7, #0]
 801a884:	f04f 30ff 	mov.w	r0, #4294967295
 801a888:	e0d1      	b.n	801aa2e <_svfiprintf_r+0x1d2>
 801a88a:	2340      	movs	r3, #64	; 0x40
 801a88c:	616b      	str	r3, [r5, #20]
 801a88e:	2300      	movs	r3, #0
 801a890:	9309      	str	r3, [sp, #36]	; 0x24
 801a892:	2320      	movs	r3, #32
 801a894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a898:	f8cd 800c 	str.w	r8, [sp, #12]
 801a89c:	2330      	movs	r3, #48	; 0x30
 801a89e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aa48 <_svfiprintf_r+0x1ec>
 801a8a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8a6:	f04f 0901 	mov.w	r9, #1
 801a8aa:	4623      	mov	r3, r4
 801a8ac:	469a      	mov	sl, r3
 801a8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8b2:	b10a      	cbz	r2, 801a8b8 <_svfiprintf_r+0x5c>
 801a8b4:	2a25      	cmp	r2, #37	; 0x25
 801a8b6:	d1f9      	bne.n	801a8ac <_svfiprintf_r+0x50>
 801a8b8:	ebba 0b04 	subs.w	fp, sl, r4
 801a8bc:	d00b      	beq.n	801a8d6 <_svfiprintf_r+0x7a>
 801a8be:	465b      	mov	r3, fp
 801a8c0:	4622      	mov	r2, r4
 801a8c2:	4629      	mov	r1, r5
 801a8c4:	4638      	mov	r0, r7
 801a8c6:	f7ff ff6d 	bl	801a7a4 <__ssputs_r>
 801a8ca:	3001      	adds	r0, #1
 801a8cc:	f000 80aa 	beq.w	801aa24 <_svfiprintf_r+0x1c8>
 801a8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8d2:	445a      	add	r2, fp
 801a8d4:	9209      	str	r2, [sp, #36]	; 0x24
 801a8d6:	f89a 3000 	ldrb.w	r3, [sl]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	f000 80a2 	beq.w	801aa24 <_svfiprintf_r+0x1c8>
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	f04f 32ff 	mov.w	r2, #4294967295
 801a8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8ea:	f10a 0a01 	add.w	sl, sl, #1
 801a8ee:	9304      	str	r3, [sp, #16]
 801a8f0:	9307      	str	r3, [sp, #28]
 801a8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8f6:	931a      	str	r3, [sp, #104]	; 0x68
 801a8f8:	4654      	mov	r4, sl
 801a8fa:	2205      	movs	r2, #5
 801a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a900:	4851      	ldr	r0, [pc, #324]	; (801aa48 <_svfiprintf_r+0x1ec>)
 801a902:	f7e5 fc8d 	bl	8000220 <memchr>
 801a906:	9a04      	ldr	r2, [sp, #16]
 801a908:	b9d8      	cbnz	r0, 801a942 <_svfiprintf_r+0xe6>
 801a90a:	06d0      	lsls	r0, r2, #27
 801a90c:	bf44      	itt	mi
 801a90e:	2320      	movmi	r3, #32
 801a910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a914:	0711      	lsls	r1, r2, #28
 801a916:	bf44      	itt	mi
 801a918:	232b      	movmi	r3, #43	; 0x2b
 801a91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a91e:	f89a 3000 	ldrb.w	r3, [sl]
 801a922:	2b2a      	cmp	r3, #42	; 0x2a
 801a924:	d015      	beq.n	801a952 <_svfiprintf_r+0xf6>
 801a926:	9a07      	ldr	r2, [sp, #28]
 801a928:	4654      	mov	r4, sl
 801a92a:	2000      	movs	r0, #0
 801a92c:	f04f 0c0a 	mov.w	ip, #10
 801a930:	4621      	mov	r1, r4
 801a932:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a936:	3b30      	subs	r3, #48	; 0x30
 801a938:	2b09      	cmp	r3, #9
 801a93a:	d94e      	bls.n	801a9da <_svfiprintf_r+0x17e>
 801a93c:	b1b0      	cbz	r0, 801a96c <_svfiprintf_r+0x110>
 801a93e:	9207      	str	r2, [sp, #28]
 801a940:	e014      	b.n	801a96c <_svfiprintf_r+0x110>
 801a942:	eba0 0308 	sub.w	r3, r0, r8
 801a946:	fa09 f303 	lsl.w	r3, r9, r3
 801a94a:	4313      	orrs	r3, r2
 801a94c:	9304      	str	r3, [sp, #16]
 801a94e:	46a2      	mov	sl, r4
 801a950:	e7d2      	b.n	801a8f8 <_svfiprintf_r+0x9c>
 801a952:	9b03      	ldr	r3, [sp, #12]
 801a954:	1d19      	adds	r1, r3, #4
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	9103      	str	r1, [sp, #12]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	bfbb      	ittet	lt
 801a95e:	425b      	neglt	r3, r3
 801a960:	f042 0202 	orrlt.w	r2, r2, #2
 801a964:	9307      	strge	r3, [sp, #28]
 801a966:	9307      	strlt	r3, [sp, #28]
 801a968:	bfb8      	it	lt
 801a96a:	9204      	strlt	r2, [sp, #16]
 801a96c:	7823      	ldrb	r3, [r4, #0]
 801a96e:	2b2e      	cmp	r3, #46	; 0x2e
 801a970:	d10c      	bne.n	801a98c <_svfiprintf_r+0x130>
 801a972:	7863      	ldrb	r3, [r4, #1]
 801a974:	2b2a      	cmp	r3, #42	; 0x2a
 801a976:	d135      	bne.n	801a9e4 <_svfiprintf_r+0x188>
 801a978:	9b03      	ldr	r3, [sp, #12]
 801a97a:	1d1a      	adds	r2, r3, #4
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	9203      	str	r2, [sp, #12]
 801a980:	2b00      	cmp	r3, #0
 801a982:	bfb8      	it	lt
 801a984:	f04f 33ff 	movlt.w	r3, #4294967295
 801a988:	3402      	adds	r4, #2
 801a98a:	9305      	str	r3, [sp, #20]
 801a98c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aa58 <_svfiprintf_r+0x1fc>
 801a990:	7821      	ldrb	r1, [r4, #0]
 801a992:	2203      	movs	r2, #3
 801a994:	4650      	mov	r0, sl
 801a996:	f7e5 fc43 	bl	8000220 <memchr>
 801a99a:	b140      	cbz	r0, 801a9ae <_svfiprintf_r+0x152>
 801a99c:	2340      	movs	r3, #64	; 0x40
 801a99e:	eba0 000a 	sub.w	r0, r0, sl
 801a9a2:	fa03 f000 	lsl.w	r0, r3, r0
 801a9a6:	9b04      	ldr	r3, [sp, #16]
 801a9a8:	4303      	orrs	r3, r0
 801a9aa:	3401      	adds	r4, #1
 801a9ac:	9304      	str	r3, [sp, #16]
 801a9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9b2:	4826      	ldr	r0, [pc, #152]	; (801aa4c <_svfiprintf_r+0x1f0>)
 801a9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9b8:	2206      	movs	r2, #6
 801a9ba:	f7e5 fc31 	bl	8000220 <memchr>
 801a9be:	2800      	cmp	r0, #0
 801a9c0:	d038      	beq.n	801aa34 <_svfiprintf_r+0x1d8>
 801a9c2:	4b23      	ldr	r3, [pc, #140]	; (801aa50 <_svfiprintf_r+0x1f4>)
 801a9c4:	bb1b      	cbnz	r3, 801aa0e <_svfiprintf_r+0x1b2>
 801a9c6:	9b03      	ldr	r3, [sp, #12]
 801a9c8:	3307      	adds	r3, #7
 801a9ca:	f023 0307 	bic.w	r3, r3, #7
 801a9ce:	3308      	adds	r3, #8
 801a9d0:	9303      	str	r3, [sp, #12]
 801a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9d4:	4433      	add	r3, r6
 801a9d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a9d8:	e767      	b.n	801a8aa <_svfiprintf_r+0x4e>
 801a9da:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9de:	460c      	mov	r4, r1
 801a9e0:	2001      	movs	r0, #1
 801a9e2:	e7a5      	b.n	801a930 <_svfiprintf_r+0xd4>
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	3401      	adds	r4, #1
 801a9e8:	9305      	str	r3, [sp, #20]
 801a9ea:	4619      	mov	r1, r3
 801a9ec:	f04f 0c0a 	mov.w	ip, #10
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9f6:	3a30      	subs	r2, #48	; 0x30
 801a9f8:	2a09      	cmp	r2, #9
 801a9fa:	d903      	bls.n	801aa04 <_svfiprintf_r+0x1a8>
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d0c5      	beq.n	801a98c <_svfiprintf_r+0x130>
 801aa00:	9105      	str	r1, [sp, #20]
 801aa02:	e7c3      	b.n	801a98c <_svfiprintf_r+0x130>
 801aa04:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa08:	4604      	mov	r4, r0
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	e7f0      	b.n	801a9f0 <_svfiprintf_r+0x194>
 801aa0e:	ab03      	add	r3, sp, #12
 801aa10:	9300      	str	r3, [sp, #0]
 801aa12:	462a      	mov	r2, r5
 801aa14:	4b0f      	ldr	r3, [pc, #60]	; (801aa54 <_svfiprintf_r+0x1f8>)
 801aa16:	a904      	add	r1, sp, #16
 801aa18:	4638      	mov	r0, r7
 801aa1a:	f7fd ff8d 	bl	8018938 <_printf_float>
 801aa1e:	1c42      	adds	r2, r0, #1
 801aa20:	4606      	mov	r6, r0
 801aa22:	d1d6      	bne.n	801a9d2 <_svfiprintf_r+0x176>
 801aa24:	89ab      	ldrh	r3, [r5, #12]
 801aa26:	065b      	lsls	r3, r3, #25
 801aa28:	f53f af2c 	bmi.w	801a884 <_svfiprintf_r+0x28>
 801aa2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa2e:	b01d      	add	sp, #116	; 0x74
 801aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa34:	ab03      	add	r3, sp, #12
 801aa36:	9300      	str	r3, [sp, #0]
 801aa38:	462a      	mov	r2, r5
 801aa3a:	4b06      	ldr	r3, [pc, #24]	; (801aa54 <_svfiprintf_r+0x1f8>)
 801aa3c:	a904      	add	r1, sp, #16
 801aa3e:	4638      	mov	r0, r7
 801aa40:	f7fe fa1e 	bl	8018e80 <_printf_i>
 801aa44:	e7eb      	b.n	801aa1e <_svfiprintf_r+0x1c2>
 801aa46:	bf00      	nop
 801aa48:	0801c62c 	.word	0x0801c62c
 801aa4c:	0801c636 	.word	0x0801c636
 801aa50:	08018939 	.word	0x08018939
 801aa54:	0801a7a5 	.word	0x0801a7a5
 801aa58:	0801c632 	.word	0x0801c632

0801aa5c <__sfputc_r>:
 801aa5c:	6893      	ldr	r3, [r2, #8]
 801aa5e:	3b01      	subs	r3, #1
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	b410      	push	{r4}
 801aa64:	6093      	str	r3, [r2, #8]
 801aa66:	da08      	bge.n	801aa7a <__sfputc_r+0x1e>
 801aa68:	6994      	ldr	r4, [r2, #24]
 801aa6a:	42a3      	cmp	r3, r4
 801aa6c:	db01      	blt.n	801aa72 <__sfputc_r+0x16>
 801aa6e:	290a      	cmp	r1, #10
 801aa70:	d103      	bne.n	801aa7a <__sfputc_r+0x1e>
 801aa72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa76:	f000 b94b 	b.w	801ad10 <__swbuf_r>
 801aa7a:	6813      	ldr	r3, [r2, #0]
 801aa7c:	1c58      	adds	r0, r3, #1
 801aa7e:	6010      	str	r0, [r2, #0]
 801aa80:	7019      	strb	r1, [r3, #0]
 801aa82:	4608      	mov	r0, r1
 801aa84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa88:	4770      	bx	lr

0801aa8a <__sfputs_r>:
 801aa8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa8c:	4606      	mov	r6, r0
 801aa8e:	460f      	mov	r7, r1
 801aa90:	4614      	mov	r4, r2
 801aa92:	18d5      	adds	r5, r2, r3
 801aa94:	42ac      	cmp	r4, r5
 801aa96:	d101      	bne.n	801aa9c <__sfputs_r+0x12>
 801aa98:	2000      	movs	r0, #0
 801aa9a:	e007      	b.n	801aaac <__sfputs_r+0x22>
 801aa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aaa0:	463a      	mov	r2, r7
 801aaa2:	4630      	mov	r0, r6
 801aaa4:	f7ff ffda 	bl	801aa5c <__sfputc_r>
 801aaa8:	1c43      	adds	r3, r0, #1
 801aaaa:	d1f3      	bne.n	801aa94 <__sfputs_r+0xa>
 801aaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aab0 <_vfiprintf_r>:
 801aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	460d      	mov	r5, r1
 801aab6:	b09d      	sub	sp, #116	; 0x74
 801aab8:	4614      	mov	r4, r2
 801aaba:	4698      	mov	r8, r3
 801aabc:	4606      	mov	r6, r0
 801aabe:	b118      	cbz	r0, 801aac8 <_vfiprintf_r+0x18>
 801aac0:	6983      	ldr	r3, [r0, #24]
 801aac2:	b90b      	cbnz	r3, 801aac8 <_vfiprintf_r+0x18>
 801aac4:	f000 fb06 	bl	801b0d4 <__sinit>
 801aac8:	4b89      	ldr	r3, [pc, #548]	; (801acf0 <_vfiprintf_r+0x240>)
 801aaca:	429d      	cmp	r5, r3
 801aacc:	d11b      	bne.n	801ab06 <_vfiprintf_r+0x56>
 801aace:	6875      	ldr	r5, [r6, #4]
 801aad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aad2:	07d9      	lsls	r1, r3, #31
 801aad4:	d405      	bmi.n	801aae2 <_vfiprintf_r+0x32>
 801aad6:	89ab      	ldrh	r3, [r5, #12]
 801aad8:	059a      	lsls	r2, r3, #22
 801aada:	d402      	bmi.n	801aae2 <_vfiprintf_r+0x32>
 801aadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aade:	f000 fb97 	bl	801b210 <__retarget_lock_acquire_recursive>
 801aae2:	89ab      	ldrh	r3, [r5, #12]
 801aae4:	071b      	lsls	r3, r3, #28
 801aae6:	d501      	bpl.n	801aaec <_vfiprintf_r+0x3c>
 801aae8:	692b      	ldr	r3, [r5, #16]
 801aaea:	b9eb      	cbnz	r3, 801ab28 <_vfiprintf_r+0x78>
 801aaec:	4629      	mov	r1, r5
 801aaee:	4630      	mov	r0, r6
 801aaf0:	f000 f960 	bl	801adb4 <__swsetup_r>
 801aaf4:	b1c0      	cbz	r0, 801ab28 <_vfiprintf_r+0x78>
 801aaf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aaf8:	07dc      	lsls	r4, r3, #31
 801aafa:	d50e      	bpl.n	801ab1a <_vfiprintf_r+0x6a>
 801aafc:	f04f 30ff 	mov.w	r0, #4294967295
 801ab00:	b01d      	add	sp, #116	; 0x74
 801ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab06:	4b7b      	ldr	r3, [pc, #492]	; (801acf4 <_vfiprintf_r+0x244>)
 801ab08:	429d      	cmp	r5, r3
 801ab0a:	d101      	bne.n	801ab10 <_vfiprintf_r+0x60>
 801ab0c:	68b5      	ldr	r5, [r6, #8]
 801ab0e:	e7df      	b.n	801aad0 <_vfiprintf_r+0x20>
 801ab10:	4b79      	ldr	r3, [pc, #484]	; (801acf8 <_vfiprintf_r+0x248>)
 801ab12:	429d      	cmp	r5, r3
 801ab14:	bf08      	it	eq
 801ab16:	68f5      	ldreq	r5, [r6, #12]
 801ab18:	e7da      	b.n	801aad0 <_vfiprintf_r+0x20>
 801ab1a:	89ab      	ldrh	r3, [r5, #12]
 801ab1c:	0598      	lsls	r0, r3, #22
 801ab1e:	d4ed      	bmi.n	801aafc <_vfiprintf_r+0x4c>
 801ab20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab22:	f000 fb76 	bl	801b212 <__retarget_lock_release_recursive>
 801ab26:	e7e9      	b.n	801aafc <_vfiprintf_r+0x4c>
 801ab28:	2300      	movs	r3, #0
 801ab2a:	9309      	str	r3, [sp, #36]	; 0x24
 801ab2c:	2320      	movs	r3, #32
 801ab2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab32:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab36:	2330      	movs	r3, #48	; 0x30
 801ab38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801acfc <_vfiprintf_r+0x24c>
 801ab3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab40:	f04f 0901 	mov.w	r9, #1
 801ab44:	4623      	mov	r3, r4
 801ab46:	469a      	mov	sl, r3
 801ab48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab4c:	b10a      	cbz	r2, 801ab52 <_vfiprintf_r+0xa2>
 801ab4e:	2a25      	cmp	r2, #37	; 0x25
 801ab50:	d1f9      	bne.n	801ab46 <_vfiprintf_r+0x96>
 801ab52:	ebba 0b04 	subs.w	fp, sl, r4
 801ab56:	d00b      	beq.n	801ab70 <_vfiprintf_r+0xc0>
 801ab58:	465b      	mov	r3, fp
 801ab5a:	4622      	mov	r2, r4
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	4630      	mov	r0, r6
 801ab60:	f7ff ff93 	bl	801aa8a <__sfputs_r>
 801ab64:	3001      	adds	r0, #1
 801ab66:	f000 80aa 	beq.w	801acbe <_vfiprintf_r+0x20e>
 801ab6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab6c:	445a      	add	r2, fp
 801ab6e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab70:	f89a 3000 	ldrb.w	r3, [sl]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	f000 80a2 	beq.w	801acbe <_vfiprintf_r+0x20e>
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 801ab80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab84:	f10a 0a01 	add.w	sl, sl, #1
 801ab88:	9304      	str	r3, [sp, #16]
 801ab8a:	9307      	str	r3, [sp, #28]
 801ab8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ab90:	931a      	str	r3, [sp, #104]	; 0x68
 801ab92:	4654      	mov	r4, sl
 801ab94:	2205      	movs	r2, #5
 801ab96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab9a:	4858      	ldr	r0, [pc, #352]	; (801acfc <_vfiprintf_r+0x24c>)
 801ab9c:	f7e5 fb40 	bl	8000220 <memchr>
 801aba0:	9a04      	ldr	r2, [sp, #16]
 801aba2:	b9d8      	cbnz	r0, 801abdc <_vfiprintf_r+0x12c>
 801aba4:	06d1      	lsls	r1, r2, #27
 801aba6:	bf44      	itt	mi
 801aba8:	2320      	movmi	r3, #32
 801abaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abae:	0713      	lsls	r3, r2, #28
 801abb0:	bf44      	itt	mi
 801abb2:	232b      	movmi	r3, #43	; 0x2b
 801abb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abb8:	f89a 3000 	ldrb.w	r3, [sl]
 801abbc:	2b2a      	cmp	r3, #42	; 0x2a
 801abbe:	d015      	beq.n	801abec <_vfiprintf_r+0x13c>
 801abc0:	9a07      	ldr	r2, [sp, #28]
 801abc2:	4654      	mov	r4, sl
 801abc4:	2000      	movs	r0, #0
 801abc6:	f04f 0c0a 	mov.w	ip, #10
 801abca:	4621      	mov	r1, r4
 801abcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abd0:	3b30      	subs	r3, #48	; 0x30
 801abd2:	2b09      	cmp	r3, #9
 801abd4:	d94e      	bls.n	801ac74 <_vfiprintf_r+0x1c4>
 801abd6:	b1b0      	cbz	r0, 801ac06 <_vfiprintf_r+0x156>
 801abd8:	9207      	str	r2, [sp, #28]
 801abda:	e014      	b.n	801ac06 <_vfiprintf_r+0x156>
 801abdc:	eba0 0308 	sub.w	r3, r0, r8
 801abe0:	fa09 f303 	lsl.w	r3, r9, r3
 801abe4:	4313      	orrs	r3, r2
 801abe6:	9304      	str	r3, [sp, #16]
 801abe8:	46a2      	mov	sl, r4
 801abea:	e7d2      	b.n	801ab92 <_vfiprintf_r+0xe2>
 801abec:	9b03      	ldr	r3, [sp, #12]
 801abee:	1d19      	adds	r1, r3, #4
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	9103      	str	r1, [sp, #12]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	bfbb      	ittet	lt
 801abf8:	425b      	neglt	r3, r3
 801abfa:	f042 0202 	orrlt.w	r2, r2, #2
 801abfe:	9307      	strge	r3, [sp, #28]
 801ac00:	9307      	strlt	r3, [sp, #28]
 801ac02:	bfb8      	it	lt
 801ac04:	9204      	strlt	r2, [sp, #16]
 801ac06:	7823      	ldrb	r3, [r4, #0]
 801ac08:	2b2e      	cmp	r3, #46	; 0x2e
 801ac0a:	d10c      	bne.n	801ac26 <_vfiprintf_r+0x176>
 801ac0c:	7863      	ldrb	r3, [r4, #1]
 801ac0e:	2b2a      	cmp	r3, #42	; 0x2a
 801ac10:	d135      	bne.n	801ac7e <_vfiprintf_r+0x1ce>
 801ac12:	9b03      	ldr	r3, [sp, #12]
 801ac14:	1d1a      	adds	r2, r3, #4
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	9203      	str	r2, [sp, #12]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	bfb8      	it	lt
 801ac1e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac22:	3402      	adds	r4, #2
 801ac24:	9305      	str	r3, [sp, #20]
 801ac26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ad0c <_vfiprintf_r+0x25c>
 801ac2a:	7821      	ldrb	r1, [r4, #0]
 801ac2c:	2203      	movs	r2, #3
 801ac2e:	4650      	mov	r0, sl
 801ac30:	f7e5 faf6 	bl	8000220 <memchr>
 801ac34:	b140      	cbz	r0, 801ac48 <_vfiprintf_r+0x198>
 801ac36:	2340      	movs	r3, #64	; 0x40
 801ac38:	eba0 000a 	sub.w	r0, r0, sl
 801ac3c:	fa03 f000 	lsl.w	r0, r3, r0
 801ac40:	9b04      	ldr	r3, [sp, #16]
 801ac42:	4303      	orrs	r3, r0
 801ac44:	3401      	adds	r4, #1
 801ac46:	9304      	str	r3, [sp, #16]
 801ac48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac4c:	482c      	ldr	r0, [pc, #176]	; (801ad00 <_vfiprintf_r+0x250>)
 801ac4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac52:	2206      	movs	r2, #6
 801ac54:	f7e5 fae4 	bl	8000220 <memchr>
 801ac58:	2800      	cmp	r0, #0
 801ac5a:	d03f      	beq.n	801acdc <_vfiprintf_r+0x22c>
 801ac5c:	4b29      	ldr	r3, [pc, #164]	; (801ad04 <_vfiprintf_r+0x254>)
 801ac5e:	bb1b      	cbnz	r3, 801aca8 <_vfiprintf_r+0x1f8>
 801ac60:	9b03      	ldr	r3, [sp, #12]
 801ac62:	3307      	adds	r3, #7
 801ac64:	f023 0307 	bic.w	r3, r3, #7
 801ac68:	3308      	adds	r3, #8
 801ac6a:	9303      	str	r3, [sp, #12]
 801ac6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac6e:	443b      	add	r3, r7
 801ac70:	9309      	str	r3, [sp, #36]	; 0x24
 801ac72:	e767      	b.n	801ab44 <_vfiprintf_r+0x94>
 801ac74:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac78:	460c      	mov	r4, r1
 801ac7a:	2001      	movs	r0, #1
 801ac7c:	e7a5      	b.n	801abca <_vfiprintf_r+0x11a>
 801ac7e:	2300      	movs	r3, #0
 801ac80:	3401      	adds	r4, #1
 801ac82:	9305      	str	r3, [sp, #20]
 801ac84:	4619      	mov	r1, r3
 801ac86:	f04f 0c0a 	mov.w	ip, #10
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac90:	3a30      	subs	r2, #48	; 0x30
 801ac92:	2a09      	cmp	r2, #9
 801ac94:	d903      	bls.n	801ac9e <_vfiprintf_r+0x1ee>
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d0c5      	beq.n	801ac26 <_vfiprintf_r+0x176>
 801ac9a:	9105      	str	r1, [sp, #20]
 801ac9c:	e7c3      	b.n	801ac26 <_vfiprintf_r+0x176>
 801ac9e:	fb0c 2101 	mla	r1, ip, r1, r2
 801aca2:	4604      	mov	r4, r0
 801aca4:	2301      	movs	r3, #1
 801aca6:	e7f0      	b.n	801ac8a <_vfiprintf_r+0x1da>
 801aca8:	ab03      	add	r3, sp, #12
 801acaa:	9300      	str	r3, [sp, #0]
 801acac:	462a      	mov	r2, r5
 801acae:	4b16      	ldr	r3, [pc, #88]	; (801ad08 <_vfiprintf_r+0x258>)
 801acb0:	a904      	add	r1, sp, #16
 801acb2:	4630      	mov	r0, r6
 801acb4:	f7fd fe40 	bl	8018938 <_printf_float>
 801acb8:	4607      	mov	r7, r0
 801acba:	1c78      	adds	r0, r7, #1
 801acbc:	d1d6      	bne.n	801ac6c <_vfiprintf_r+0x1bc>
 801acbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acc0:	07d9      	lsls	r1, r3, #31
 801acc2:	d405      	bmi.n	801acd0 <_vfiprintf_r+0x220>
 801acc4:	89ab      	ldrh	r3, [r5, #12]
 801acc6:	059a      	lsls	r2, r3, #22
 801acc8:	d402      	bmi.n	801acd0 <_vfiprintf_r+0x220>
 801acca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801accc:	f000 faa1 	bl	801b212 <__retarget_lock_release_recursive>
 801acd0:	89ab      	ldrh	r3, [r5, #12]
 801acd2:	065b      	lsls	r3, r3, #25
 801acd4:	f53f af12 	bmi.w	801aafc <_vfiprintf_r+0x4c>
 801acd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acda:	e711      	b.n	801ab00 <_vfiprintf_r+0x50>
 801acdc:	ab03      	add	r3, sp, #12
 801acde:	9300      	str	r3, [sp, #0]
 801ace0:	462a      	mov	r2, r5
 801ace2:	4b09      	ldr	r3, [pc, #36]	; (801ad08 <_vfiprintf_r+0x258>)
 801ace4:	a904      	add	r1, sp, #16
 801ace6:	4630      	mov	r0, r6
 801ace8:	f7fe f8ca 	bl	8018e80 <_printf_i>
 801acec:	e7e4      	b.n	801acb8 <_vfiprintf_r+0x208>
 801acee:	bf00      	nop
 801acf0:	0801c660 	.word	0x0801c660
 801acf4:	0801c680 	.word	0x0801c680
 801acf8:	0801c640 	.word	0x0801c640
 801acfc:	0801c62c 	.word	0x0801c62c
 801ad00:	0801c636 	.word	0x0801c636
 801ad04:	08018939 	.word	0x08018939
 801ad08:	0801aa8b 	.word	0x0801aa8b
 801ad0c:	0801c632 	.word	0x0801c632

0801ad10 <__swbuf_r>:
 801ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad12:	460e      	mov	r6, r1
 801ad14:	4614      	mov	r4, r2
 801ad16:	4605      	mov	r5, r0
 801ad18:	b118      	cbz	r0, 801ad22 <__swbuf_r+0x12>
 801ad1a:	6983      	ldr	r3, [r0, #24]
 801ad1c:	b90b      	cbnz	r3, 801ad22 <__swbuf_r+0x12>
 801ad1e:	f000 f9d9 	bl	801b0d4 <__sinit>
 801ad22:	4b21      	ldr	r3, [pc, #132]	; (801ada8 <__swbuf_r+0x98>)
 801ad24:	429c      	cmp	r4, r3
 801ad26:	d12b      	bne.n	801ad80 <__swbuf_r+0x70>
 801ad28:	686c      	ldr	r4, [r5, #4]
 801ad2a:	69a3      	ldr	r3, [r4, #24]
 801ad2c:	60a3      	str	r3, [r4, #8]
 801ad2e:	89a3      	ldrh	r3, [r4, #12]
 801ad30:	071a      	lsls	r2, r3, #28
 801ad32:	d52f      	bpl.n	801ad94 <__swbuf_r+0x84>
 801ad34:	6923      	ldr	r3, [r4, #16]
 801ad36:	b36b      	cbz	r3, 801ad94 <__swbuf_r+0x84>
 801ad38:	6923      	ldr	r3, [r4, #16]
 801ad3a:	6820      	ldr	r0, [r4, #0]
 801ad3c:	1ac0      	subs	r0, r0, r3
 801ad3e:	6963      	ldr	r3, [r4, #20]
 801ad40:	b2f6      	uxtb	r6, r6
 801ad42:	4283      	cmp	r3, r0
 801ad44:	4637      	mov	r7, r6
 801ad46:	dc04      	bgt.n	801ad52 <__swbuf_r+0x42>
 801ad48:	4621      	mov	r1, r4
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	f000 f92e 	bl	801afac <_fflush_r>
 801ad50:	bb30      	cbnz	r0, 801ada0 <__swbuf_r+0x90>
 801ad52:	68a3      	ldr	r3, [r4, #8]
 801ad54:	3b01      	subs	r3, #1
 801ad56:	60a3      	str	r3, [r4, #8]
 801ad58:	6823      	ldr	r3, [r4, #0]
 801ad5a:	1c5a      	adds	r2, r3, #1
 801ad5c:	6022      	str	r2, [r4, #0]
 801ad5e:	701e      	strb	r6, [r3, #0]
 801ad60:	6963      	ldr	r3, [r4, #20]
 801ad62:	3001      	adds	r0, #1
 801ad64:	4283      	cmp	r3, r0
 801ad66:	d004      	beq.n	801ad72 <__swbuf_r+0x62>
 801ad68:	89a3      	ldrh	r3, [r4, #12]
 801ad6a:	07db      	lsls	r3, r3, #31
 801ad6c:	d506      	bpl.n	801ad7c <__swbuf_r+0x6c>
 801ad6e:	2e0a      	cmp	r6, #10
 801ad70:	d104      	bne.n	801ad7c <__swbuf_r+0x6c>
 801ad72:	4621      	mov	r1, r4
 801ad74:	4628      	mov	r0, r5
 801ad76:	f000 f919 	bl	801afac <_fflush_r>
 801ad7a:	b988      	cbnz	r0, 801ada0 <__swbuf_r+0x90>
 801ad7c:	4638      	mov	r0, r7
 801ad7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad80:	4b0a      	ldr	r3, [pc, #40]	; (801adac <__swbuf_r+0x9c>)
 801ad82:	429c      	cmp	r4, r3
 801ad84:	d101      	bne.n	801ad8a <__swbuf_r+0x7a>
 801ad86:	68ac      	ldr	r4, [r5, #8]
 801ad88:	e7cf      	b.n	801ad2a <__swbuf_r+0x1a>
 801ad8a:	4b09      	ldr	r3, [pc, #36]	; (801adb0 <__swbuf_r+0xa0>)
 801ad8c:	429c      	cmp	r4, r3
 801ad8e:	bf08      	it	eq
 801ad90:	68ec      	ldreq	r4, [r5, #12]
 801ad92:	e7ca      	b.n	801ad2a <__swbuf_r+0x1a>
 801ad94:	4621      	mov	r1, r4
 801ad96:	4628      	mov	r0, r5
 801ad98:	f000 f80c 	bl	801adb4 <__swsetup_r>
 801ad9c:	2800      	cmp	r0, #0
 801ad9e:	d0cb      	beq.n	801ad38 <__swbuf_r+0x28>
 801ada0:	f04f 37ff 	mov.w	r7, #4294967295
 801ada4:	e7ea      	b.n	801ad7c <__swbuf_r+0x6c>
 801ada6:	bf00      	nop
 801ada8:	0801c660 	.word	0x0801c660
 801adac:	0801c680 	.word	0x0801c680
 801adb0:	0801c640 	.word	0x0801c640

0801adb4 <__swsetup_r>:
 801adb4:	4b32      	ldr	r3, [pc, #200]	; (801ae80 <__swsetup_r+0xcc>)
 801adb6:	b570      	push	{r4, r5, r6, lr}
 801adb8:	681d      	ldr	r5, [r3, #0]
 801adba:	4606      	mov	r6, r0
 801adbc:	460c      	mov	r4, r1
 801adbe:	b125      	cbz	r5, 801adca <__swsetup_r+0x16>
 801adc0:	69ab      	ldr	r3, [r5, #24]
 801adc2:	b913      	cbnz	r3, 801adca <__swsetup_r+0x16>
 801adc4:	4628      	mov	r0, r5
 801adc6:	f000 f985 	bl	801b0d4 <__sinit>
 801adca:	4b2e      	ldr	r3, [pc, #184]	; (801ae84 <__swsetup_r+0xd0>)
 801adcc:	429c      	cmp	r4, r3
 801adce:	d10f      	bne.n	801adf0 <__swsetup_r+0x3c>
 801add0:	686c      	ldr	r4, [r5, #4]
 801add2:	89a3      	ldrh	r3, [r4, #12]
 801add4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801add8:	0719      	lsls	r1, r3, #28
 801adda:	d42c      	bmi.n	801ae36 <__swsetup_r+0x82>
 801addc:	06dd      	lsls	r5, r3, #27
 801adde:	d411      	bmi.n	801ae04 <__swsetup_r+0x50>
 801ade0:	2309      	movs	r3, #9
 801ade2:	6033      	str	r3, [r6, #0]
 801ade4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ade8:	81a3      	strh	r3, [r4, #12]
 801adea:	f04f 30ff 	mov.w	r0, #4294967295
 801adee:	e03e      	b.n	801ae6e <__swsetup_r+0xba>
 801adf0:	4b25      	ldr	r3, [pc, #148]	; (801ae88 <__swsetup_r+0xd4>)
 801adf2:	429c      	cmp	r4, r3
 801adf4:	d101      	bne.n	801adfa <__swsetup_r+0x46>
 801adf6:	68ac      	ldr	r4, [r5, #8]
 801adf8:	e7eb      	b.n	801add2 <__swsetup_r+0x1e>
 801adfa:	4b24      	ldr	r3, [pc, #144]	; (801ae8c <__swsetup_r+0xd8>)
 801adfc:	429c      	cmp	r4, r3
 801adfe:	bf08      	it	eq
 801ae00:	68ec      	ldreq	r4, [r5, #12]
 801ae02:	e7e6      	b.n	801add2 <__swsetup_r+0x1e>
 801ae04:	0758      	lsls	r0, r3, #29
 801ae06:	d512      	bpl.n	801ae2e <__swsetup_r+0x7a>
 801ae08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae0a:	b141      	cbz	r1, 801ae1e <__swsetup_r+0x6a>
 801ae0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae10:	4299      	cmp	r1, r3
 801ae12:	d002      	beq.n	801ae1a <__swsetup_r+0x66>
 801ae14:	4630      	mov	r0, r6
 801ae16:	f7fd fc0f 	bl	8018638 <_free_r>
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	6363      	str	r3, [r4, #52]	; 0x34
 801ae1e:	89a3      	ldrh	r3, [r4, #12]
 801ae20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ae24:	81a3      	strh	r3, [r4, #12]
 801ae26:	2300      	movs	r3, #0
 801ae28:	6063      	str	r3, [r4, #4]
 801ae2a:	6923      	ldr	r3, [r4, #16]
 801ae2c:	6023      	str	r3, [r4, #0]
 801ae2e:	89a3      	ldrh	r3, [r4, #12]
 801ae30:	f043 0308 	orr.w	r3, r3, #8
 801ae34:	81a3      	strh	r3, [r4, #12]
 801ae36:	6923      	ldr	r3, [r4, #16]
 801ae38:	b94b      	cbnz	r3, 801ae4e <__swsetup_r+0x9a>
 801ae3a:	89a3      	ldrh	r3, [r4, #12]
 801ae3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ae40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ae44:	d003      	beq.n	801ae4e <__swsetup_r+0x9a>
 801ae46:	4621      	mov	r1, r4
 801ae48:	4630      	mov	r0, r6
 801ae4a:	f000 fa09 	bl	801b260 <__smakebuf_r>
 801ae4e:	89a0      	ldrh	r0, [r4, #12]
 801ae50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae54:	f010 0301 	ands.w	r3, r0, #1
 801ae58:	d00a      	beq.n	801ae70 <__swsetup_r+0xbc>
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	60a3      	str	r3, [r4, #8]
 801ae5e:	6963      	ldr	r3, [r4, #20]
 801ae60:	425b      	negs	r3, r3
 801ae62:	61a3      	str	r3, [r4, #24]
 801ae64:	6923      	ldr	r3, [r4, #16]
 801ae66:	b943      	cbnz	r3, 801ae7a <__swsetup_r+0xc6>
 801ae68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ae6c:	d1ba      	bne.n	801ade4 <__swsetup_r+0x30>
 801ae6e:	bd70      	pop	{r4, r5, r6, pc}
 801ae70:	0781      	lsls	r1, r0, #30
 801ae72:	bf58      	it	pl
 801ae74:	6963      	ldrpl	r3, [r4, #20]
 801ae76:	60a3      	str	r3, [r4, #8]
 801ae78:	e7f4      	b.n	801ae64 <__swsetup_r+0xb0>
 801ae7a:	2000      	movs	r0, #0
 801ae7c:	e7f7      	b.n	801ae6e <__swsetup_r+0xba>
 801ae7e:	bf00      	nop
 801ae80:	20000130 	.word	0x20000130
 801ae84:	0801c660 	.word	0x0801c660
 801ae88:	0801c680 	.word	0x0801c680
 801ae8c:	0801c640 	.word	0x0801c640

0801ae90 <abort>:
 801ae90:	b508      	push	{r3, lr}
 801ae92:	2006      	movs	r0, #6
 801ae94:	f000 faa8 	bl	801b3e8 <raise>
 801ae98:	2001      	movs	r0, #1
 801ae9a:	f7ea fa71 	bl	8005380 <_exit>
	...

0801aea0 <__sflush_r>:
 801aea0:	898a      	ldrh	r2, [r1, #12]
 801aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aea6:	4605      	mov	r5, r0
 801aea8:	0710      	lsls	r0, r2, #28
 801aeaa:	460c      	mov	r4, r1
 801aeac:	d458      	bmi.n	801af60 <__sflush_r+0xc0>
 801aeae:	684b      	ldr	r3, [r1, #4]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	dc05      	bgt.n	801aec0 <__sflush_r+0x20>
 801aeb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	dc02      	bgt.n	801aec0 <__sflush_r+0x20>
 801aeba:	2000      	movs	r0, #0
 801aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aec2:	2e00      	cmp	r6, #0
 801aec4:	d0f9      	beq.n	801aeba <__sflush_r+0x1a>
 801aec6:	2300      	movs	r3, #0
 801aec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aecc:	682f      	ldr	r7, [r5, #0]
 801aece:	602b      	str	r3, [r5, #0]
 801aed0:	d032      	beq.n	801af38 <__sflush_r+0x98>
 801aed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aed4:	89a3      	ldrh	r3, [r4, #12]
 801aed6:	075a      	lsls	r2, r3, #29
 801aed8:	d505      	bpl.n	801aee6 <__sflush_r+0x46>
 801aeda:	6863      	ldr	r3, [r4, #4]
 801aedc:	1ac0      	subs	r0, r0, r3
 801aede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aee0:	b10b      	cbz	r3, 801aee6 <__sflush_r+0x46>
 801aee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aee4:	1ac0      	subs	r0, r0, r3
 801aee6:	2300      	movs	r3, #0
 801aee8:	4602      	mov	r2, r0
 801aeea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aeec:	6a21      	ldr	r1, [r4, #32]
 801aeee:	4628      	mov	r0, r5
 801aef0:	47b0      	blx	r6
 801aef2:	1c43      	adds	r3, r0, #1
 801aef4:	89a3      	ldrh	r3, [r4, #12]
 801aef6:	d106      	bne.n	801af06 <__sflush_r+0x66>
 801aef8:	6829      	ldr	r1, [r5, #0]
 801aefa:	291d      	cmp	r1, #29
 801aefc:	d82c      	bhi.n	801af58 <__sflush_r+0xb8>
 801aefe:	4a2a      	ldr	r2, [pc, #168]	; (801afa8 <__sflush_r+0x108>)
 801af00:	40ca      	lsrs	r2, r1
 801af02:	07d6      	lsls	r6, r2, #31
 801af04:	d528      	bpl.n	801af58 <__sflush_r+0xb8>
 801af06:	2200      	movs	r2, #0
 801af08:	6062      	str	r2, [r4, #4]
 801af0a:	04d9      	lsls	r1, r3, #19
 801af0c:	6922      	ldr	r2, [r4, #16]
 801af0e:	6022      	str	r2, [r4, #0]
 801af10:	d504      	bpl.n	801af1c <__sflush_r+0x7c>
 801af12:	1c42      	adds	r2, r0, #1
 801af14:	d101      	bne.n	801af1a <__sflush_r+0x7a>
 801af16:	682b      	ldr	r3, [r5, #0]
 801af18:	b903      	cbnz	r3, 801af1c <__sflush_r+0x7c>
 801af1a:	6560      	str	r0, [r4, #84]	; 0x54
 801af1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af1e:	602f      	str	r7, [r5, #0]
 801af20:	2900      	cmp	r1, #0
 801af22:	d0ca      	beq.n	801aeba <__sflush_r+0x1a>
 801af24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af28:	4299      	cmp	r1, r3
 801af2a:	d002      	beq.n	801af32 <__sflush_r+0x92>
 801af2c:	4628      	mov	r0, r5
 801af2e:	f7fd fb83 	bl	8018638 <_free_r>
 801af32:	2000      	movs	r0, #0
 801af34:	6360      	str	r0, [r4, #52]	; 0x34
 801af36:	e7c1      	b.n	801aebc <__sflush_r+0x1c>
 801af38:	6a21      	ldr	r1, [r4, #32]
 801af3a:	2301      	movs	r3, #1
 801af3c:	4628      	mov	r0, r5
 801af3e:	47b0      	blx	r6
 801af40:	1c41      	adds	r1, r0, #1
 801af42:	d1c7      	bne.n	801aed4 <__sflush_r+0x34>
 801af44:	682b      	ldr	r3, [r5, #0]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d0c4      	beq.n	801aed4 <__sflush_r+0x34>
 801af4a:	2b1d      	cmp	r3, #29
 801af4c:	d001      	beq.n	801af52 <__sflush_r+0xb2>
 801af4e:	2b16      	cmp	r3, #22
 801af50:	d101      	bne.n	801af56 <__sflush_r+0xb6>
 801af52:	602f      	str	r7, [r5, #0]
 801af54:	e7b1      	b.n	801aeba <__sflush_r+0x1a>
 801af56:	89a3      	ldrh	r3, [r4, #12]
 801af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af5c:	81a3      	strh	r3, [r4, #12]
 801af5e:	e7ad      	b.n	801aebc <__sflush_r+0x1c>
 801af60:	690f      	ldr	r7, [r1, #16]
 801af62:	2f00      	cmp	r7, #0
 801af64:	d0a9      	beq.n	801aeba <__sflush_r+0x1a>
 801af66:	0793      	lsls	r3, r2, #30
 801af68:	680e      	ldr	r6, [r1, #0]
 801af6a:	bf08      	it	eq
 801af6c:	694b      	ldreq	r3, [r1, #20]
 801af6e:	600f      	str	r7, [r1, #0]
 801af70:	bf18      	it	ne
 801af72:	2300      	movne	r3, #0
 801af74:	eba6 0807 	sub.w	r8, r6, r7
 801af78:	608b      	str	r3, [r1, #8]
 801af7a:	f1b8 0f00 	cmp.w	r8, #0
 801af7e:	dd9c      	ble.n	801aeba <__sflush_r+0x1a>
 801af80:	6a21      	ldr	r1, [r4, #32]
 801af82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801af84:	4643      	mov	r3, r8
 801af86:	463a      	mov	r2, r7
 801af88:	4628      	mov	r0, r5
 801af8a:	47b0      	blx	r6
 801af8c:	2800      	cmp	r0, #0
 801af8e:	dc06      	bgt.n	801af9e <__sflush_r+0xfe>
 801af90:	89a3      	ldrh	r3, [r4, #12]
 801af92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af96:	81a3      	strh	r3, [r4, #12]
 801af98:	f04f 30ff 	mov.w	r0, #4294967295
 801af9c:	e78e      	b.n	801aebc <__sflush_r+0x1c>
 801af9e:	4407      	add	r7, r0
 801afa0:	eba8 0800 	sub.w	r8, r8, r0
 801afa4:	e7e9      	b.n	801af7a <__sflush_r+0xda>
 801afa6:	bf00      	nop
 801afa8:	20400001 	.word	0x20400001

0801afac <_fflush_r>:
 801afac:	b538      	push	{r3, r4, r5, lr}
 801afae:	690b      	ldr	r3, [r1, #16]
 801afb0:	4605      	mov	r5, r0
 801afb2:	460c      	mov	r4, r1
 801afb4:	b913      	cbnz	r3, 801afbc <_fflush_r+0x10>
 801afb6:	2500      	movs	r5, #0
 801afb8:	4628      	mov	r0, r5
 801afba:	bd38      	pop	{r3, r4, r5, pc}
 801afbc:	b118      	cbz	r0, 801afc6 <_fflush_r+0x1a>
 801afbe:	6983      	ldr	r3, [r0, #24]
 801afc0:	b90b      	cbnz	r3, 801afc6 <_fflush_r+0x1a>
 801afc2:	f000 f887 	bl	801b0d4 <__sinit>
 801afc6:	4b14      	ldr	r3, [pc, #80]	; (801b018 <_fflush_r+0x6c>)
 801afc8:	429c      	cmp	r4, r3
 801afca:	d11b      	bne.n	801b004 <_fflush_r+0x58>
 801afcc:	686c      	ldr	r4, [r5, #4]
 801afce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d0ef      	beq.n	801afb6 <_fflush_r+0xa>
 801afd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801afd8:	07d0      	lsls	r0, r2, #31
 801afda:	d404      	bmi.n	801afe6 <_fflush_r+0x3a>
 801afdc:	0599      	lsls	r1, r3, #22
 801afde:	d402      	bmi.n	801afe6 <_fflush_r+0x3a>
 801afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801afe2:	f000 f915 	bl	801b210 <__retarget_lock_acquire_recursive>
 801afe6:	4628      	mov	r0, r5
 801afe8:	4621      	mov	r1, r4
 801afea:	f7ff ff59 	bl	801aea0 <__sflush_r>
 801afee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aff0:	07da      	lsls	r2, r3, #31
 801aff2:	4605      	mov	r5, r0
 801aff4:	d4e0      	bmi.n	801afb8 <_fflush_r+0xc>
 801aff6:	89a3      	ldrh	r3, [r4, #12]
 801aff8:	059b      	lsls	r3, r3, #22
 801affa:	d4dd      	bmi.n	801afb8 <_fflush_r+0xc>
 801affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801affe:	f000 f908 	bl	801b212 <__retarget_lock_release_recursive>
 801b002:	e7d9      	b.n	801afb8 <_fflush_r+0xc>
 801b004:	4b05      	ldr	r3, [pc, #20]	; (801b01c <_fflush_r+0x70>)
 801b006:	429c      	cmp	r4, r3
 801b008:	d101      	bne.n	801b00e <_fflush_r+0x62>
 801b00a:	68ac      	ldr	r4, [r5, #8]
 801b00c:	e7df      	b.n	801afce <_fflush_r+0x22>
 801b00e:	4b04      	ldr	r3, [pc, #16]	; (801b020 <_fflush_r+0x74>)
 801b010:	429c      	cmp	r4, r3
 801b012:	bf08      	it	eq
 801b014:	68ec      	ldreq	r4, [r5, #12]
 801b016:	e7da      	b.n	801afce <_fflush_r+0x22>
 801b018:	0801c660 	.word	0x0801c660
 801b01c:	0801c680 	.word	0x0801c680
 801b020:	0801c640 	.word	0x0801c640

0801b024 <std>:
 801b024:	2300      	movs	r3, #0
 801b026:	b510      	push	{r4, lr}
 801b028:	4604      	mov	r4, r0
 801b02a:	e9c0 3300 	strd	r3, r3, [r0]
 801b02e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b032:	6083      	str	r3, [r0, #8]
 801b034:	8181      	strh	r1, [r0, #12]
 801b036:	6643      	str	r3, [r0, #100]	; 0x64
 801b038:	81c2      	strh	r2, [r0, #14]
 801b03a:	6183      	str	r3, [r0, #24]
 801b03c:	4619      	mov	r1, r3
 801b03e:	2208      	movs	r2, #8
 801b040:	305c      	adds	r0, #92	; 0x5c
 801b042:	f7fd faf1 	bl	8018628 <memset>
 801b046:	4b05      	ldr	r3, [pc, #20]	; (801b05c <std+0x38>)
 801b048:	6263      	str	r3, [r4, #36]	; 0x24
 801b04a:	4b05      	ldr	r3, [pc, #20]	; (801b060 <std+0x3c>)
 801b04c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b04e:	4b05      	ldr	r3, [pc, #20]	; (801b064 <std+0x40>)
 801b050:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b052:	4b05      	ldr	r3, [pc, #20]	; (801b068 <std+0x44>)
 801b054:	6224      	str	r4, [r4, #32]
 801b056:	6323      	str	r3, [r4, #48]	; 0x30
 801b058:	bd10      	pop	{r4, pc}
 801b05a:	bf00      	nop
 801b05c:	0801b421 	.word	0x0801b421
 801b060:	0801b443 	.word	0x0801b443
 801b064:	0801b47b 	.word	0x0801b47b
 801b068:	0801b49f 	.word	0x0801b49f

0801b06c <_cleanup_r>:
 801b06c:	4901      	ldr	r1, [pc, #4]	; (801b074 <_cleanup_r+0x8>)
 801b06e:	f000 b8af 	b.w	801b1d0 <_fwalk_reent>
 801b072:	bf00      	nop
 801b074:	0801afad 	.word	0x0801afad

0801b078 <__sfmoreglue>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	2268      	movs	r2, #104	; 0x68
 801b07c:	1e4d      	subs	r5, r1, #1
 801b07e:	4355      	muls	r5, r2
 801b080:	460e      	mov	r6, r1
 801b082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b086:	f7fd fb43 	bl	8018710 <_malloc_r>
 801b08a:	4604      	mov	r4, r0
 801b08c:	b140      	cbz	r0, 801b0a0 <__sfmoreglue+0x28>
 801b08e:	2100      	movs	r1, #0
 801b090:	e9c0 1600 	strd	r1, r6, [r0]
 801b094:	300c      	adds	r0, #12
 801b096:	60a0      	str	r0, [r4, #8]
 801b098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b09c:	f7fd fac4 	bl	8018628 <memset>
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	bd70      	pop	{r4, r5, r6, pc}

0801b0a4 <__sfp_lock_acquire>:
 801b0a4:	4801      	ldr	r0, [pc, #4]	; (801b0ac <__sfp_lock_acquire+0x8>)
 801b0a6:	f000 b8b3 	b.w	801b210 <__retarget_lock_acquire_recursive>
 801b0aa:	bf00      	nop
 801b0ac:	20003071 	.word	0x20003071

0801b0b0 <__sfp_lock_release>:
 801b0b0:	4801      	ldr	r0, [pc, #4]	; (801b0b8 <__sfp_lock_release+0x8>)
 801b0b2:	f000 b8ae 	b.w	801b212 <__retarget_lock_release_recursive>
 801b0b6:	bf00      	nop
 801b0b8:	20003071 	.word	0x20003071

0801b0bc <__sinit_lock_acquire>:
 801b0bc:	4801      	ldr	r0, [pc, #4]	; (801b0c4 <__sinit_lock_acquire+0x8>)
 801b0be:	f000 b8a7 	b.w	801b210 <__retarget_lock_acquire_recursive>
 801b0c2:	bf00      	nop
 801b0c4:	20003072 	.word	0x20003072

0801b0c8 <__sinit_lock_release>:
 801b0c8:	4801      	ldr	r0, [pc, #4]	; (801b0d0 <__sinit_lock_release+0x8>)
 801b0ca:	f000 b8a2 	b.w	801b212 <__retarget_lock_release_recursive>
 801b0ce:	bf00      	nop
 801b0d0:	20003072 	.word	0x20003072

0801b0d4 <__sinit>:
 801b0d4:	b510      	push	{r4, lr}
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	f7ff fff0 	bl	801b0bc <__sinit_lock_acquire>
 801b0dc:	69a3      	ldr	r3, [r4, #24]
 801b0de:	b11b      	cbz	r3, 801b0e8 <__sinit+0x14>
 801b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0e4:	f7ff bff0 	b.w	801b0c8 <__sinit_lock_release>
 801b0e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b0ec:	6523      	str	r3, [r4, #80]	; 0x50
 801b0ee:	4b13      	ldr	r3, [pc, #76]	; (801b13c <__sinit+0x68>)
 801b0f0:	4a13      	ldr	r2, [pc, #76]	; (801b140 <__sinit+0x6c>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	62a2      	str	r2, [r4, #40]	; 0x28
 801b0f6:	42a3      	cmp	r3, r4
 801b0f8:	bf04      	itt	eq
 801b0fa:	2301      	moveq	r3, #1
 801b0fc:	61a3      	streq	r3, [r4, #24]
 801b0fe:	4620      	mov	r0, r4
 801b100:	f000 f820 	bl	801b144 <__sfp>
 801b104:	6060      	str	r0, [r4, #4]
 801b106:	4620      	mov	r0, r4
 801b108:	f000 f81c 	bl	801b144 <__sfp>
 801b10c:	60a0      	str	r0, [r4, #8]
 801b10e:	4620      	mov	r0, r4
 801b110:	f000 f818 	bl	801b144 <__sfp>
 801b114:	2200      	movs	r2, #0
 801b116:	60e0      	str	r0, [r4, #12]
 801b118:	2104      	movs	r1, #4
 801b11a:	6860      	ldr	r0, [r4, #4]
 801b11c:	f7ff ff82 	bl	801b024 <std>
 801b120:	68a0      	ldr	r0, [r4, #8]
 801b122:	2201      	movs	r2, #1
 801b124:	2109      	movs	r1, #9
 801b126:	f7ff ff7d 	bl	801b024 <std>
 801b12a:	68e0      	ldr	r0, [r4, #12]
 801b12c:	2202      	movs	r2, #2
 801b12e:	2112      	movs	r1, #18
 801b130:	f7ff ff78 	bl	801b024 <std>
 801b134:	2301      	movs	r3, #1
 801b136:	61a3      	str	r3, [r4, #24]
 801b138:	e7d2      	b.n	801b0e0 <__sinit+0xc>
 801b13a:	bf00      	nop
 801b13c:	0801c270 	.word	0x0801c270
 801b140:	0801b06d 	.word	0x0801b06d

0801b144 <__sfp>:
 801b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b146:	4607      	mov	r7, r0
 801b148:	f7ff ffac 	bl	801b0a4 <__sfp_lock_acquire>
 801b14c:	4b1e      	ldr	r3, [pc, #120]	; (801b1c8 <__sfp+0x84>)
 801b14e:	681e      	ldr	r6, [r3, #0]
 801b150:	69b3      	ldr	r3, [r6, #24]
 801b152:	b913      	cbnz	r3, 801b15a <__sfp+0x16>
 801b154:	4630      	mov	r0, r6
 801b156:	f7ff ffbd 	bl	801b0d4 <__sinit>
 801b15a:	3648      	adds	r6, #72	; 0x48
 801b15c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b160:	3b01      	subs	r3, #1
 801b162:	d503      	bpl.n	801b16c <__sfp+0x28>
 801b164:	6833      	ldr	r3, [r6, #0]
 801b166:	b30b      	cbz	r3, 801b1ac <__sfp+0x68>
 801b168:	6836      	ldr	r6, [r6, #0]
 801b16a:	e7f7      	b.n	801b15c <__sfp+0x18>
 801b16c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b170:	b9d5      	cbnz	r5, 801b1a8 <__sfp+0x64>
 801b172:	4b16      	ldr	r3, [pc, #88]	; (801b1cc <__sfp+0x88>)
 801b174:	60e3      	str	r3, [r4, #12]
 801b176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b17a:	6665      	str	r5, [r4, #100]	; 0x64
 801b17c:	f000 f847 	bl	801b20e <__retarget_lock_init_recursive>
 801b180:	f7ff ff96 	bl	801b0b0 <__sfp_lock_release>
 801b184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b18c:	6025      	str	r5, [r4, #0]
 801b18e:	61a5      	str	r5, [r4, #24]
 801b190:	2208      	movs	r2, #8
 801b192:	4629      	mov	r1, r5
 801b194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b198:	f7fd fa46 	bl	8018628 <memset>
 801b19c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b1a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b1a4:	4620      	mov	r0, r4
 801b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1a8:	3468      	adds	r4, #104	; 0x68
 801b1aa:	e7d9      	b.n	801b160 <__sfp+0x1c>
 801b1ac:	2104      	movs	r1, #4
 801b1ae:	4638      	mov	r0, r7
 801b1b0:	f7ff ff62 	bl	801b078 <__sfmoreglue>
 801b1b4:	4604      	mov	r4, r0
 801b1b6:	6030      	str	r0, [r6, #0]
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	d1d5      	bne.n	801b168 <__sfp+0x24>
 801b1bc:	f7ff ff78 	bl	801b0b0 <__sfp_lock_release>
 801b1c0:	230c      	movs	r3, #12
 801b1c2:	603b      	str	r3, [r7, #0]
 801b1c4:	e7ee      	b.n	801b1a4 <__sfp+0x60>
 801b1c6:	bf00      	nop
 801b1c8:	0801c270 	.word	0x0801c270
 801b1cc:	ffff0001 	.word	0xffff0001

0801b1d0 <_fwalk_reent>:
 801b1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1d4:	4606      	mov	r6, r0
 801b1d6:	4688      	mov	r8, r1
 801b1d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b1dc:	2700      	movs	r7, #0
 801b1de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1e2:	f1b9 0901 	subs.w	r9, r9, #1
 801b1e6:	d505      	bpl.n	801b1f4 <_fwalk_reent+0x24>
 801b1e8:	6824      	ldr	r4, [r4, #0]
 801b1ea:	2c00      	cmp	r4, #0
 801b1ec:	d1f7      	bne.n	801b1de <_fwalk_reent+0xe>
 801b1ee:	4638      	mov	r0, r7
 801b1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1f4:	89ab      	ldrh	r3, [r5, #12]
 801b1f6:	2b01      	cmp	r3, #1
 801b1f8:	d907      	bls.n	801b20a <_fwalk_reent+0x3a>
 801b1fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1fe:	3301      	adds	r3, #1
 801b200:	d003      	beq.n	801b20a <_fwalk_reent+0x3a>
 801b202:	4629      	mov	r1, r5
 801b204:	4630      	mov	r0, r6
 801b206:	47c0      	blx	r8
 801b208:	4307      	orrs	r7, r0
 801b20a:	3568      	adds	r5, #104	; 0x68
 801b20c:	e7e9      	b.n	801b1e2 <_fwalk_reent+0x12>

0801b20e <__retarget_lock_init_recursive>:
 801b20e:	4770      	bx	lr

0801b210 <__retarget_lock_acquire_recursive>:
 801b210:	4770      	bx	lr

0801b212 <__retarget_lock_release_recursive>:
 801b212:	4770      	bx	lr

0801b214 <__swhatbuf_r>:
 801b214:	b570      	push	{r4, r5, r6, lr}
 801b216:	460e      	mov	r6, r1
 801b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b21c:	2900      	cmp	r1, #0
 801b21e:	b096      	sub	sp, #88	; 0x58
 801b220:	4614      	mov	r4, r2
 801b222:	461d      	mov	r5, r3
 801b224:	da08      	bge.n	801b238 <__swhatbuf_r+0x24>
 801b226:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b22a:	2200      	movs	r2, #0
 801b22c:	602a      	str	r2, [r5, #0]
 801b22e:	061a      	lsls	r2, r3, #24
 801b230:	d410      	bmi.n	801b254 <__swhatbuf_r+0x40>
 801b232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b236:	e00e      	b.n	801b256 <__swhatbuf_r+0x42>
 801b238:	466a      	mov	r2, sp
 801b23a:	f000 f963 	bl	801b504 <_fstat_r>
 801b23e:	2800      	cmp	r0, #0
 801b240:	dbf1      	blt.n	801b226 <__swhatbuf_r+0x12>
 801b242:	9a01      	ldr	r2, [sp, #4]
 801b244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b24c:	425a      	negs	r2, r3
 801b24e:	415a      	adcs	r2, r3
 801b250:	602a      	str	r2, [r5, #0]
 801b252:	e7ee      	b.n	801b232 <__swhatbuf_r+0x1e>
 801b254:	2340      	movs	r3, #64	; 0x40
 801b256:	2000      	movs	r0, #0
 801b258:	6023      	str	r3, [r4, #0]
 801b25a:	b016      	add	sp, #88	; 0x58
 801b25c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b260 <__smakebuf_r>:
 801b260:	898b      	ldrh	r3, [r1, #12]
 801b262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b264:	079d      	lsls	r5, r3, #30
 801b266:	4606      	mov	r6, r0
 801b268:	460c      	mov	r4, r1
 801b26a:	d507      	bpl.n	801b27c <__smakebuf_r+0x1c>
 801b26c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b270:	6023      	str	r3, [r4, #0]
 801b272:	6123      	str	r3, [r4, #16]
 801b274:	2301      	movs	r3, #1
 801b276:	6163      	str	r3, [r4, #20]
 801b278:	b002      	add	sp, #8
 801b27a:	bd70      	pop	{r4, r5, r6, pc}
 801b27c:	ab01      	add	r3, sp, #4
 801b27e:	466a      	mov	r2, sp
 801b280:	f7ff ffc8 	bl	801b214 <__swhatbuf_r>
 801b284:	9900      	ldr	r1, [sp, #0]
 801b286:	4605      	mov	r5, r0
 801b288:	4630      	mov	r0, r6
 801b28a:	f7fd fa41 	bl	8018710 <_malloc_r>
 801b28e:	b948      	cbnz	r0, 801b2a4 <__smakebuf_r+0x44>
 801b290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b294:	059a      	lsls	r2, r3, #22
 801b296:	d4ef      	bmi.n	801b278 <__smakebuf_r+0x18>
 801b298:	f023 0303 	bic.w	r3, r3, #3
 801b29c:	f043 0302 	orr.w	r3, r3, #2
 801b2a0:	81a3      	strh	r3, [r4, #12]
 801b2a2:	e7e3      	b.n	801b26c <__smakebuf_r+0xc>
 801b2a4:	4b0d      	ldr	r3, [pc, #52]	; (801b2dc <__smakebuf_r+0x7c>)
 801b2a6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b2a8:	89a3      	ldrh	r3, [r4, #12]
 801b2aa:	6020      	str	r0, [r4, #0]
 801b2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2b0:	81a3      	strh	r3, [r4, #12]
 801b2b2:	9b00      	ldr	r3, [sp, #0]
 801b2b4:	6163      	str	r3, [r4, #20]
 801b2b6:	9b01      	ldr	r3, [sp, #4]
 801b2b8:	6120      	str	r0, [r4, #16]
 801b2ba:	b15b      	cbz	r3, 801b2d4 <__smakebuf_r+0x74>
 801b2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	f000 f931 	bl	801b528 <_isatty_r>
 801b2c6:	b128      	cbz	r0, 801b2d4 <__smakebuf_r+0x74>
 801b2c8:	89a3      	ldrh	r3, [r4, #12]
 801b2ca:	f023 0303 	bic.w	r3, r3, #3
 801b2ce:	f043 0301 	orr.w	r3, r3, #1
 801b2d2:	81a3      	strh	r3, [r4, #12]
 801b2d4:	89a0      	ldrh	r0, [r4, #12]
 801b2d6:	4305      	orrs	r5, r0
 801b2d8:	81a5      	strh	r5, [r4, #12]
 801b2da:	e7cd      	b.n	801b278 <__smakebuf_r+0x18>
 801b2dc:	0801b06d 	.word	0x0801b06d

0801b2e0 <__ascii_mbtowc>:
 801b2e0:	b082      	sub	sp, #8
 801b2e2:	b901      	cbnz	r1, 801b2e6 <__ascii_mbtowc+0x6>
 801b2e4:	a901      	add	r1, sp, #4
 801b2e6:	b142      	cbz	r2, 801b2fa <__ascii_mbtowc+0x1a>
 801b2e8:	b14b      	cbz	r3, 801b2fe <__ascii_mbtowc+0x1e>
 801b2ea:	7813      	ldrb	r3, [r2, #0]
 801b2ec:	600b      	str	r3, [r1, #0]
 801b2ee:	7812      	ldrb	r2, [r2, #0]
 801b2f0:	1e10      	subs	r0, r2, #0
 801b2f2:	bf18      	it	ne
 801b2f4:	2001      	movne	r0, #1
 801b2f6:	b002      	add	sp, #8
 801b2f8:	4770      	bx	lr
 801b2fa:	4610      	mov	r0, r2
 801b2fc:	e7fb      	b.n	801b2f6 <__ascii_mbtowc+0x16>
 801b2fe:	f06f 0001 	mvn.w	r0, #1
 801b302:	e7f8      	b.n	801b2f6 <__ascii_mbtowc+0x16>

0801b304 <memmove>:
 801b304:	4288      	cmp	r0, r1
 801b306:	b510      	push	{r4, lr}
 801b308:	eb01 0402 	add.w	r4, r1, r2
 801b30c:	d902      	bls.n	801b314 <memmove+0x10>
 801b30e:	4284      	cmp	r4, r0
 801b310:	4623      	mov	r3, r4
 801b312:	d807      	bhi.n	801b324 <memmove+0x20>
 801b314:	1e43      	subs	r3, r0, #1
 801b316:	42a1      	cmp	r1, r4
 801b318:	d008      	beq.n	801b32c <memmove+0x28>
 801b31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b322:	e7f8      	b.n	801b316 <memmove+0x12>
 801b324:	4402      	add	r2, r0
 801b326:	4601      	mov	r1, r0
 801b328:	428a      	cmp	r2, r1
 801b32a:	d100      	bne.n	801b32e <memmove+0x2a>
 801b32c:	bd10      	pop	{r4, pc}
 801b32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b336:	e7f7      	b.n	801b328 <memmove+0x24>

0801b338 <_realloc_r>:
 801b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b33c:	4680      	mov	r8, r0
 801b33e:	4614      	mov	r4, r2
 801b340:	460e      	mov	r6, r1
 801b342:	b921      	cbnz	r1, 801b34e <_realloc_r+0x16>
 801b344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b348:	4611      	mov	r1, r2
 801b34a:	f7fd b9e1 	b.w	8018710 <_malloc_r>
 801b34e:	b92a      	cbnz	r2, 801b35c <_realloc_r+0x24>
 801b350:	f7fd f972 	bl	8018638 <_free_r>
 801b354:	4625      	mov	r5, r4
 801b356:	4628      	mov	r0, r5
 801b358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b35c:	f000 f906 	bl	801b56c <_malloc_usable_size_r>
 801b360:	4284      	cmp	r4, r0
 801b362:	4607      	mov	r7, r0
 801b364:	d802      	bhi.n	801b36c <_realloc_r+0x34>
 801b366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b36a:	d812      	bhi.n	801b392 <_realloc_r+0x5a>
 801b36c:	4621      	mov	r1, r4
 801b36e:	4640      	mov	r0, r8
 801b370:	f7fd f9ce 	bl	8018710 <_malloc_r>
 801b374:	4605      	mov	r5, r0
 801b376:	2800      	cmp	r0, #0
 801b378:	d0ed      	beq.n	801b356 <_realloc_r+0x1e>
 801b37a:	42bc      	cmp	r4, r7
 801b37c:	4622      	mov	r2, r4
 801b37e:	4631      	mov	r1, r6
 801b380:	bf28      	it	cs
 801b382:	463a      	movcs	r2, r7
 801b384:	f7fd f942 	bl	801860c <memcpy>
 801b388:	4631      	mov	r1, r6
 801b38a:	4640      	mov	r0, r8
 801b38c:	f7fd f954 	bl	8018638 <_free_r>
 801b390:	e7e1      	b.n	801b356 <_realloc_r+0x1e>
 801b392:	4635      	mov	r5, r6
 801b394:	e7df      	b.n	801b356 <_realloc_r+0x1e>

0801b396 <_raise_r>:
 801b396:	291f      	cmp	r1, #31
 801b398:	b538      	push	{r3, r4, r5, lr}
 801b39a:	4604      	mov	r4, r0
 801b39c:	460d      	mov	r5, r1
 801b39e:	d904      	bls.n	801b3aa <_raise_r+0x14>
 801b3a0:	2316      	movs	r3, #22
 801b3a2:	6003      	str	r3, [r0, #0]
 801b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3a8:	bd38      	pop	{r3, r4, r5, pc}
 801b3aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b3ac:	b112      	cbz	r2, 801b3b4 <_raise_r+0x1e>
 801b3ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3b2:	b94b      	cbnz	r3, 801b3c8 <_raise_r+0x32>
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f000 f831 	bl	801b41c <_getpid_r>
 801b3ba:	462a      	mov	r2, r5
 801b3bc:	4601      	mov	r1, r0
 801b3be:	4620      	mov	r0, r4
 801b3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3c4:	f000 b818 	b.w	801b3f8 <_kill_r>
 801b3c8:	2b01      	cmp	r3, #1
 801b3ca:	d00a      	beq.n	801b3e2 <_raise_r+0x4c>
 801b3cc:	1c59      	adds	r1, r3, #1
 801b3ce:	d103      	bne.n	801b3d8 <_raise_r+0x42>
 801b3d0:	2316      	movs	r3, #22
 801b3d2:	6003      	str	r3, [r0, #0]
 801b3d4:	2001      	movs	r0, #1
 801b3d6:	e7e7      	b.n	801b3a8 <_raise_r+0x12>
 801b3d8:	2400      	movs	r4, #0
 801b3da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b3de:	4628      	mov	r0, r5
 801b3e0:	4798      	blx	r3
 801b3e2:	2000      	movs	r0, #0
 801b3e4:	e7e0      	b.n	801b3a8 <_raise_r+0x12>
	...

0801b3e8 <raise>:
 801b3e8:	4b02      	ldr	r3, [pc, #8]	; (801b3f4 <raise+0xc>)
 801b3ea:	4601      	mov	r1, r0
 801b3ec:	6818      	ldr	r0, [r3, #0]
 801b3ee:	f7ff bfd2 	b.w	801b396 <_raise_r>
 801b3f2:	bf00      	nop
 801b3f4:	20000130 	.word	0x20000130

0801b3f8 <_kill_r>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4d07      	ldr	r5, [pc, #28]	; (801b418 <_kill_r+0x20>)
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	4604      	mov	r4, r0
 801b400:	4608      	mov	r0, r1
 801b402:	4611      	mov	r1, r2
 801b404:	602b      	str	r3, [r5, #0]
 801b406:	f7e9 ffab 	bl	8005360 <_kill>
 801b40a:	1c43      	adds	r3, r0, #1
 801b40c:	d102      	bne.n	801b414 <_kill_r+0x1c>
 801b40e:	682b      	ldr	r3, [r5, #0]
 801b410:	b103      	cbz	r3, 801b414 <_kill_r+0x1c>
 801b412:	6023      	str	r3, [r4, #0]
 801b414:	bd38      	pop	{r3, r4, r5, pc}
 801b416:	bf00      	nop
 801b418:	2000306c 	.word	0x2000306c

0801b41c <_getpid_r>:
 801b41c:	f7e9 bf98 	b.w	8005350 <_getpid>

0801b420 <__sread>:
 801b420:	b510      	push	{r4, lr}
 801b422:	460c      	mov	r4, r1
 801b424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b428:	f000 f8a8 	bl	801b57c <_read_r>
 801b42c:	2800      	cmp	r0, #0
 801b42e:	bfab      	itete	ge
 801b430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b432:	89a3      	ldrhlt	r3, [r4, #12]
 801b434:	181b      	addge	r3, r3, r0
 801b436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b43a:	bfac      	ite	ge
 801b43c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b43e:	81a3      	strhlt	r3, [r4, #12]
 801b440:	bd10      	pop	{r4, pc}

0801b442 <__swrite>:
 801b442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b446:	461f      	mov	r7, r3
 801b448:	898b      	ldrh	r3, [r1, #12]
 801b44a:	05db      	lsls	r3, r3, #23
 801b44c:	4605      	mov	r5, r0
 801b44e:	460c      	mov	r4, r1
 801b450:	4616      	mov	r6, r2
 801b452:	d505      	bpl.n	801b460 <__swrite+0x1e>
 801b454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b458:	2302      	movs	r3, #2
 801b45a:	2200      	movs	r2, #0
 801b45c:	f000 f874 	bl	801b548 <_lseek_r>
 801b460:	89a3      	ldrh	r3, [r4, #12]
 801b462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b46a:	81a3      	strh	r3, [r4, #12]
 801b46c:	4632      	mov	r2, r6
 801b46e:	463b      	mov	r3, r7
 801b470:	4628      	mov	r0, r5
 801b472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b476:	f000 b823 	b.w	801b4c0 <_write_r>

0801b47a <__sseek>:
 801b47a:	b510      	push	{r4, lr}
 801b47c:	460c      	mov	r4, r1
 801b47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b482:	f000 f861 	bl	801b548 <_lseek_r>
 801b486:	1c43      	adds	r3, r0, #1
 801b488:	89a3      	ldrh	r3, [r4, #12]
 801b48a:	bf15      	itete	ne
 801b48c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b496:	81a3      	strheq	r3, [r4, #12]
 801b498:	bf18      	it	ne
 801b49a:	81a3      	strhne	r3, [r4, #12]
 801b49c:	bd10      	pop	{r4, pc}

0801b49e <__sclose>:
 801b49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4a2:	f000 b81f 	b.w	801b4e4 <_close_r>

0801b4a6 <__ascii_wctomb>:
 801b4a6:	b149      	cbz	r1, 801b4bc <__ascii_wctomb+0x16>
 801b4a8:	2aff      	cmp	r2, #255	; 0xff
 801b4aa:	bf85      	ittet	hi
 801b4ac:	238a      	movhi	r3, #138	; 0x8a
 801b4ae:	6003      	strhi	r3, [r0, #0]
 801b4b0:	700a      	strbls	r2, [r1, #0]
 801b4b2:	f04f 30ff 	movhi.w	r0, #4294967295
 801b4b6:	bf98      	it	ls
 801b4b8:	2001      	movls	r0, #1
 801b4ba:	4770      	bx	lr
 801b4bc:	4608      	mov	r0, r1
 801b4be:	4770      	bx	lr

0801b4c0 <_write_r>:
 801b4c0:	b538      	push	{r3, r4, r5, lr}
 801b4c2:	4d07      	ldr	r5, [pc, #28]	; (801b4e0 <_write_r+0x20>)
 801b4c4:	4604      	mov	r4, r0
 801b4c6:	4608      	mov	r0, r1
 801b4c8:	4611      	mov	r1, r2
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	602a      	str	r2, [r5, #0]
 801b4ce:	461a      	mov	r2, r3
 801b4d0:	f7e9 ff7d 	bl	80053ce <_write>
 801b4d4:	1c43      	adds	r3, r0, #1
 801b4d6:	d102      	bne.n	801b4de <_write_r+0x1e>
 801b4d8:	682b      	ldr	r3, [r5, #0]
 801b4da:	b103      	cbz	r3, 801b4de <_write_r+0x1e>
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	bd38      	pop	{r3, r4, r5, pc}
 801b4e0:	2000306c 	.word	0x2000306c

0801b4e4 <_close_r>:
 801b4e4:	b538      	push	{r3, r4, r5, lr}
 801b4e6:	4d06      	ldr	r5, [pc, #24]	; (801b500 <_close_r+0x1c>)
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	4608      	mov	r0, r1
 801b4ee:	602b      	str	r3, [r5, #0]
 801b4f0:	f7e9 ff89 	bl	8005406 <_close>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	d102      	bne.n	801b4fe <_close_r+0x1a>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	b103      	cbz	r3, 801b4fe <_close_r+0x1a>
 801b4fc:	6023      	str	r3, [r4, #0]
 801b4fe:	bd38      	pop	{r3, r4, r5, pc}
 801b500:	2000306c 	.word	0x2000306c

0801b504 <_fstat_r>:
 801b504:	b538      	push	{r3, r4, r5, lr}
 801b506:	4d07      	ldr	r5, [pc, #28]	; (801b524 <_fstat_r+0x20>)
 801b508:	2300      	movs	r3, #0
 801b50a:	4604      	mov	r4, r0
 801b50c:	4608      	mov	r0, r1
 801b50e:	4611      	mov	r1, r2
 801b510:	602b      	str	r3, [r5, #0]
 801b512:	f7e9 ff84 	bl	800541e <_fstat>
 801b516:	1c43      	adds	r3, r0, #1
 801b518:	d102      	bne.n	801b520 <_fstat_r+0x1c>
 801b51a:	682b      	ldr	r3, [r5, #0]
 801b51c:	b103      	cbz	r3, 801b520 <_fstat_r+0x1c>
 801b51e:	6023      	str	r3, [r4, #0]
 801b520:	bd38      	pop	{r3, r4, r5, pc}
 801b522:	bf00      	nop
 801b524:	2000306c 	.word	0x2000306c

0801b528 <_isatty_r>:
 801b528:	b538      	push	{r3, r4, r5, lr}
 801b52a:	4d06      	ldr	r5, [pc, #24]	; (801b544 <_isatty_r+0x1c>)
 801b52c:	2300      	movs	r3, #0
 801b52e:	4604      	mov	r4, r0
 801b530:	4608      	mov	r0, r1
 801b532:	602b      	str	r3, [r5, #0]
 801b534:	f7e9 ff83 	bl	800543e <_isatty>
 801b538:	1c43      	adds	r3, r0, #1
 801b53a:	d102      	bne.n	801b542 <_isatty_r+0x1a>
 801b53c:	682b      	ldr	r3, [r5, #0]
 801b53e:	b103      	cbz	r3, 801b542 <_isatty_r+0x1a>
 801b540:	6023      	str	r3, [r4, #0]
 801b542:	bd38      	pop	{r3, r4, r5, pc}
 801b544:	2000306c 	.word	0x2000306c

0801b548 <_lseek_r>:
 801b548:	b538      	push	{r3, r4, r5, lr}
 801b54a:	4d07      	ldr	r5, [pc, #28]	; (801b568 <_lseek_r+0x20>)
 801b54c:	4604      	mov	r4, r0
 801b54e:	4608      	mov	r0, r1
 801b550:	4611      	mov	r1, r2
 801b552:	2200      	movs	r2, #0
 801b554:	602a      	str	r2, [r5, #0]
 801b556:	461a      	mov	r2, r3
 801b558:	f7e9 ff7c 	bl	8005454 <_lseek>
 801b55c:	1c43      	adds	r3, r0, #1
 801b55e:	d102      	bne.n	801b566 <_lseek_r+0x1e>
 801b560:	682b      	ldr	r3, [r5, #0]
 801b562:	b103      	cbz	r3, 801b566 <_lseek_r+0x1e>
 801b564:	6023      	str	r3, [r4, #0]
 801b566:	bd38      	pop	{r3, r4, r5, pc}
 801b568:	2000306c 	.word	0x2000306c

0801b56c <_malloc_usable_size_r>:
 801b56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b570:	1f18      	subs	r0, r3, #4
 801b572:	2b00      	cmp	r3, #0
 801b574:	bfbc      	itt	lt
 801b576:	580b      	ldrlt	r3, [r1, r0]
 801b578:	18c0      	addlt	r0, r0, r3
 801b57a:	4770      	bx	lr

0801b57c <_read_r>:
 801b57c:	b538      	push	{r3, r4, r5, lr}
 801b57e:	4d07      	ldr	r5, [pc, #28]	; (801b59c <_read_r+0x20>)
 801b580:	4604      	mov	r4, r0
 801b582:	4608      	mov	r0, r1
 801b584:	4611      	mov	r1, r2
 801b586:	2200      	movs	r2, #0
 801b588:	602a      	str	r2, [r5, #0]
 801b58a:	461a      	mov	r2, r3
 801b58c:	f7e9 ff02 	bl	8005394 <_read>
 801b590:	1c43      	adds	r3, r0, #1
 801b592:	d102      	bne.n	801b59a <_read_r+0x1e>
 801b594:	682b      	ldr	r3, [r5, #0]
 801b596:	b103      	cbz	r3, 801b59a <_read_r+0x1e>
 801b598:	6023      	str	r3, [r4, #0]
 801b59a:	bd38      	pop	{r3, r4, r5, pc}
 801b59c:	2000306c 	.word	0x2000306c

0801b5a0 <_init>:
 801b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5a2:	bf00      	nop
 801b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5a6:	bc08      	pop	{r3}
 801b5a8:	469e      	mov	lr, r3
 801b5aa:	4770      	bx	lr

0801b5ac <_fini>:
 801b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5ae:	bf00      	nop
 801b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5b2:	bc08      	pop	{r3}
 801b5b4:	469e      	mov	lr, r3
 801b5b6:	4770      	bx	lr
